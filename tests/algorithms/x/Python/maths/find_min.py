# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def find_min_iterative(nums):
    if len(nums) == 0:
        panic("find_min_iterative() arg is an empty sequence")
    min_num = nums[0]
    i = 0
    while i < len(nums):
        num = nums[i]
        if num < min_num:
            min_num = num
        i = i + 1
    return min_num
def find_min_recursive(nums, left, right):
    n = len(nums)
    if n == 0:
        panic("find_min_recursive() arg is an empty sequence")
    if left >= n or left < (0 - n) or right >= n or right < (0 - n):
        panic("list index out of range")
    l = left
    r = right
    if l < 0:
        l = n + l
    if r < 0:
        r = n + r
    if l == r:
        return nums[l]
    mid = (l + r) // 2
    left_min = find_min_recursive(nums, l, mid)
    right_min = find_min_recursive(nums, mid + 1, r)
    if left_min <= right_min:
        return left_min
    return right_min
def test_find_min():
    a = [3.0, 2.0, 1.0]
    if find_min_iterative(a) != 1.0:
        panic("iterative test1 failed")
    if find_min_recursive(a, 0, len(a) - 1) != 1.0:
        panic("recursive test1 failed")
    b = [-3.0, -2.0, -1.0]
    if find_min_iterative(b) != (-3.0):
        panic("iterative test2 failed")
    if find_min_recursive(b, 0, len(b) - 1) != (-3.0):
        panic("recursive test2 failed")
    c = [3.0, -3.0, 0.0]
    if find_min_iterative(c) != (-3.0):
        panic("iterative test3 failed")
    if find_min_recursive(c, 0, len(c) - 1) != (-3.0):
        panic("recursive test3 failed")
    d = [1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0]
    if find_min_recursive(d, (0 - len(d)), (0 - 1)) != 1.0:
        panic("negative index test failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_find_min()
        sample = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -3.0, 24.0, -56.0]
        print(str(find_min_iterative(sample)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
