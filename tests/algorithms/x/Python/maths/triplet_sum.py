# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def bubble_sort(nums):
    arr = []
    i = 0
    while i < len(nums):
        arr = _append(arr, nums[i])
        i = i + 1
    n = len(arr)
    a = 0
    while a < n:
        b = 0
        while b < n - a - 1:
            if arr[b] > arr[b + 1]:
                tmp = arr[b]
                arr[b] = arr[b + 1]
                arr[b + 1] = tmp
            b = b + 1
        a = a + 1
    return arr
def sort3(xs):
    arr = []
    i = 0
    while i < len(xs):
        arr = _append(arr, xs[i])
        i = i + 1
    n = len(arr)
    a = 0
    while a < n:
        b = 0
        while b < n - a - 1:
            if arr[b] > arr[b + 1]:
                tmp = arr[b]
                arr[b] = arr[b + 1]
                arr[b + 1] = tmp
            b = b + 1
        a = a + 1
    return arr
def triplet_sum1(arr, target):
    i = 0
    while i < len(arr) - 2:
        j = i + 1
        while j < len(arr) - 1:
            k = j + 1
            while k < len(arr):
                if arr[i] + arr[j] + arr[k] == target:
                    return sort3([arr[i], arr[j], arr[k]])
                k = k + 1
            j = j + 1
        i = i + 1
    return [0, 0, 0]
def triplet_sum2(arr, target):
    sorted = bubble_sort(arr)
    n = len(sorted)
    i = 0
    while i < n - 2:
        left = i + 1
        right = n - 1
        while left < right:
            s = sorted[i] + sorted[left] + sorted[right]
            if s == target:
                return [sorted[i], sorted[left], sorted[right]]
            if s < target:
                left = left + 1
            else:
                right = right - 1
        i = i + 1
    return [0, 0, 0]
def list_equal(a, b):
    if len(a) != len(b):
        return False
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def test_triplet_sum():
    arr1 = [13, 29, 7, 23, 5]
    if not list_equal(triplet_sum1(arr1, 35), [5, 7, 23]):
        panic("ts1 case1 failed")
    if not list_equal(triplet_sum2(arr1, 35), [5, 7, 23]):
        panic("ts2 case1 failed")
    arr2 = [37, 9, 19, 50, 44]
    if not list_equal(triplet_sum1(arr2, 65), [9, 19, 37]):
        panic("ts1 case2 failed")
    if not list_equal(triplet_sum2(arr2, 65), [9, 19, 37]):
        panic("ts2 case2 failed")
    arr3 = [6, 47, 27, 1, 15]
    if not list_equal(triplet_sum1(arr3, 11), [0, 0, 0]):
        panic("ts1 case3 failed")
    if not list_equal(triplet_sum2(arr3, 11), [0, 0, 0]):
        panic("ts2 case3 failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_triplet_sum()
        sample = [13, 29, 7, 23, 5]
        res = triplet_sum2(sample, 35)
        print(_str(res[0]) + " " + _str(res[1]) + " " + _str(res[2]))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
