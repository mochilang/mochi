# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def josephus_recursive(num_people, step_size):
        if num_people <= 0 or step_size <= 0:
            panic("num_people or step_size is not a positive integer.")
        if num_people == 1:
            return 0
        return (josephus_recursive(num_people - 1, step_size) + step_size) % num_people
    def find_winner(num_people, step_size):
        return josephus_recursive(num_people, step_size) + 1
    def remove_at(xs, idx):
        res = []
        i = 0
        while i < len(xs):
            if i != idx:
                res = _append(res, xs[i])
            i = i + 1
        return res
    def josephus_iterative(num_people, step_size):
        if num_people <= 0 or step_size <= 0:
            panic("num_people or step_size is not a positive integer.")
        circle = []
        i = 1
        while i <= num_people:
            circle = _append(circle, i)
            i = i + 1
        current = 0
        while len(circle) > 1:
            current = (current + step_size - 1) % len(circle)
            circle = remove_at(circle, current)
        return circle[0]
    r = josephus_recursive(7, 3)
    print(str(r))
    print(str(find_winner(7, 3)))
    print(str(josephus_iterative(7, 3)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
