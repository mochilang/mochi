# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 14:44 +0700
import json
import math
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

PI = 3.141592653589793
def absf(x):
    if x < 0.0:
        return -x
    return x
def sqrt(x):
    if x < 0.0:
        panic("sqrt domain error")
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def ln(x):
    if x <= 0.0:
        panic("ln domain error")
    y = (x - 1.0) / (x + 1.0)
    y2 = y * y
    term = y
    sum_ = 0.0
    k = 0
    while k < 10:
        denom = float((2 * k + 1))
        sum_ = sum_ + term / denom
        term = term * y2
        k = k + 1
    return 2.0 * sum_
def exp_series(x):
    term = 1.0
    sum_ = 1.0
    n = 1
    while n < 20:
        term = term * x / (float(n))
        sum_ = sum_ + term
        n = n + 1
    return sum_
def powf(base, exponent):
    if base <= 0.0:
        return 0.0
    return exp_series(exponent * math.log(base))
def integrand(x, z):
    return powf(x, z - 1.0) * exp_series(-x)
def gamma_iterative(num):
    if num <= 0.0:
        panic("math domain error")
    step = 0.001
    limit = 100.0
    x = step
    total = 0.0
    while x < limit:
        total = total + integrand(x, num) * step
        x = x + step
    return total
def gamma_recursive(num):
    if num <= 0.0:
        panic("math domain error")
    if num > 171.5:
        panic("math range error")
    int_part = int(num)
    frac = num - (float(int_part))
    if not (absf(frac) < 1e-06 or absf(frac - 0.5) < 1e-06):
        panic("num must be an integer or a half-integer")
    if absf(num - 0.5) < 1e-06:
        return sqrt(PI)
    if absf(num - 1.0) < 1e-06:
        return 1.0
    return (num - 1.0) * gamma_recursive(num - 1.0)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(gamma_iterative(5.0))
        print(gamma_recursive(5.0))
        print(gamma_recursive(0.5))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

