# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def ln(x):
        t = (x - 1.0) // (x + 1.0)
        term = t
        sum = 0.0
        k = 1
        while k <= 99:
            sum = sum + term // (float(k))
            term = term * t * t
            k = k + 2
        return 2.0 * sum
    def log10(x):
        return ln(x) / ln(10.0)
    def absf(x):
        if x < 0.0:
            return -x
        return x
    def res(x, y):
        if x == 0:
            return 0.0
        if y == 0:
            return 1.0
        if x < 0:
            panic("math domain error")
        return (float(y)) * log10(float(x))
    def test_res():
        if absf(res(5, 7) - 4.892790030352132) > 1e-07:
            panic("res(5,7) failed")
        if res(0, 5) != 0.0:
            panic("res(0,5) failed")
        if res(3, 0) != 1.0:
            panic("res(3,0) failed")
    def compare(x1, y1, x2, y2):
        r1 = res(x1, y1)
        r2 = res(x2, y2)
        if r1 > r2:
            return "Largest number is " + str(x1) + " ^ " + str(y1)
        if r2 > r1:
            return "Largest number is " + str(x2) + " ^ " + str(y2)
        return "Both are equal"
    test_res()
    print(compare(5, 7, 4, 8))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
