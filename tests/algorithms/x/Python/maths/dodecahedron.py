# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 14:44 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def sqrtApprox(x):
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def abs_val(num):
    if num < 0.0:
        return -num
    return num
def approx_equal(a, b, eps):
    return abs_val(a - b) < eps
def dodecahedron_surface_area(edge):
    if edge <= 0:
        panic("Length must be a positive.")
    term = sqrtApprox(25.0 + 10.0 * sqrtApprox(5.0))
    e = float(edge)
    return 3.0 * term * e * e
def dodecahedron_volume(edge):
    if edge <= 0:
        panic("Length must be a positive.")
    term = (15.0 + 7.0 * sqrtApprox(5.0)) / 4.0
    e = float(edge)
    return term * e * e * e
def test_dodecahedron():
    if not approx_equal(dodecahedron_surface_area(5), 516.1432201766901, 0.0001):
        panic("surface area 5 failed")
    if not approx_equal(dodecahedron_surface_area(10), 2064.5728807067603, 0.0001):
        panic("surface area 10 failed")
    if not approx_equal(dodecahedron_volume(5), 957.8898700780791, 0.0001):
        panic("volume 5 failed")
    if not approx_equal(dodecahedron_volume(10), 7663.118960624633, 0.0001):
        panic("volume 10 failed")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_dodecahedron()
        print(dodecahedron_surface_area(5))
        print(dodecahedron_volume(5))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

