# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def min_int(a, b):
    if a < b:
        return a
    return b
def int_sqrt(n):
    r = 0
    while (r + 1) * (r + 1) <= n:
        r = r + 1
    return r
def sieve(n):
    if n <= 0:
        panic("Number must instead be a positive integer")
    in_prime = []
    start = 2
    end = int_sqrt(n)
    temp = []
    i = 0
    while i < end + 1:
        temp = _append(temp, 1)
        i = i + 1
    prime = []
    while start <= end:
        if temp[start] == 1:
            in_prime = _append(in_prime, start)
            j = start * start
            while j <= end:
                temp[j] = 0
                j = j + start
        start = start + 1
    i = 0
    while i < len(in_prime):
        prime = _append(prime, in_prime[i])
        i = i + 1
    low = end + 1
    high = min_int(2 * end, n)
    while low <= n:
        tempSeg = []
        size = high - low + 1
        k = 0
        while k < size:
            tempSeg = _append(tempSeg, 1)
            k = k + 1
        idx = 0
        while idx < len(in_prime):
            each = in_prime[idx]
            t = (low / each) * each
            if t < low:
                t = t + each
            j2 = t
            while j2 <= high:
                tempSeg[j2 - low] = 0
                j2 = j2 + each
            idx = idx + 1
        j3 = 0
        while j3 < len(tempSeg):
            if tempSeg[j3] == 1:
                prime = _append(prime, j3 + low)
            j3 = j3 + 1
        low = high + 1
        high = min_int(high + end, n)
    return prime
def lists_equal(a, b):
    if len(a) != len(b):
        return False
    m = 0
    while m < len(a):
        if a[m] != b[m]:
            return False
        m = m + 1
    return True
def test_sieve():
    e1 = sieve(8)
    if not lists_equal(e1, [2, 3, 5, 7]):
        panic("sieve(8) failed")
    e2 = sieve(27)
    if not lists_equal(e2, [2, 3, 5, 7, 11, 13, 17, 19, 23]):
        panic("sieve(27) failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_sieve()
        print(_str(sieve(30)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
