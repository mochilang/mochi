# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

PI = 3.141592653589793
def abs(x):
    if x < 0.0:
        return -x
    return x
def floor(x):
    i = int(x)
    if (float(i)) > x:
        i = i - 1
    return float(i)
def pow(x, n):
    result = 1.0
    i = 0
    while i < n:
        result = result * x
        i = i + 1
    return result
def factorial(n):
    result = 1.0
    i = 2
    while i <= n:
        result = result * (float(i))
        i = i + 1
    return result
def radians(deg):
    return deg * PI / 180.0
def taylor_sin(angle_in_degrees, accuracy, rounded_values_count):
    k = floor(angle_in_degrees / 360.0)
    angle = angle_in_degrees - (k * 360.0)
    angle_in_radians = radians(angle)
    result = angle_in_radians
    a = 3
    sign = -1.0
    i = 0
    while i < accuracy:
        result = result + (sign * pow(angle_in_radians, a)) / factorial(a)
        sign = -sign
        a = a + 2
        i = i + 1
    return result
def test_sin():
    eps = 1e-07
    if abs(taylor_sin(0.0, 18, 10) - 0.0) > eps:
        panic("sin(0) failed")
    if abs(taylor_sin(90.0, 18, 10) - 1.0) > eps:
        panic("sin(90) failed")
    if abs(taylor_sin(180.0, 18, 10) - 0.0) > eps:
        panic("sin(180) failed")
    if abs(taylor_sin(270.0, 18, 10) - (-1.0)) > eps:
        panic("sin(270) failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_sin()
        res = taylor_sin(64.0, 18, 10)
        print(res)
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
