# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def sqrtApprox(x):
        if x <= 0.0:
            return 0.0
        guess = x
        i = 0
        while i < 20:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def factorial_float(n):
        result = 1.0
        i = 2
        while i <= n:
            result = result * (float(i))
            i = i + 1
        return result
    def pi(n):
        if n < 1:
            panic("Undefined for non-natural numbers")
        iterations = (n + 13) // 14
        constant_term = 426880.0 * sqrtApprox(10005.0)
        exponential_term = 1.0
        linear_term = 1.3591409e+07
        partial_sum = linear_term
        k = 1
        while k < iterations:
            k6 = 6 * k
            k3 = 3 * k
            fact6k = factorial_float(k6)
            fact3k = factorial_float(k3)
            factk = factorial_float(k)
            multinomial = fact6k // (fact3k * factk * factk * factk)
            linear_term = linear_term + 5.45140134e+08
            exponential_term = exponential_term * (-2.62537412640768e+17)
            partial_sum = partial_sum + multinomial * linear_term // exponential_term
            k = k + 1
        return constant_term // partial_sum
    n = 50
    print("The first " + str(n) + " digits of pi is: " + str(pi(n)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
