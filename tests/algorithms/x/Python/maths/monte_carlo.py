# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 10:31 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)

PI = 3.141592653589793
rand_seed = 123456789
def rand_float():
    global rand_seed
    rand_seed = (1103515245 * rand_seed + 12345) % 2147483648
    return (float(rand_seed)) / 2.147483648e+09
def rand_range(min_val, max_val):
    return rand_float() * (max_val - min_val) + min_val
def abs_float(x):
    if x < 0.0:
        return -x
    return x
def sqrtApprox(x):
    if x == 0.0:
        return 0.0
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def pi_estimator(iterations):
    inside = 0.0
    i = 0
    while i < iterations:
        x = rand_range(-1.0, 1.0)
        y = rand_range(-1.0, 1.0)
        if x * x + y * y <= 1.0:
            inside = inside + 1.0
        i = i + 1
    proportion = inside // (float(iterations))
    pi_estimate = proportion * 4.0
    print("The estimated value of pi is", pi_estimate)
    print("The numpy value of pi is", PI)
    print("The total error is", abs_float(PI - pi_estimate))
def area_under_curve_estimator(iterations, f, min_value, max_value):
    sum = 0.0
    i = 0
    while i < iterations:
        x = rand_range(min_value, max_value)
        sum = sum + f(x)
        i = i + 1
    expected = sum // (float(iterations))
    return expected * (max_value - min_value)
def area_under_line_estimator_check(iterations, min_value, max_value):
    def identity_function(x):
        return x
    estimated_value = area_under_curve_estimator(iterations, identity_function, min_value, max_value)
    expected_value = (max_value * max_value - min_value * min_value) / 2.0
    print("******************")
    print("Estimating area under y=x where x varies from", min_value)
    print("Estimated value is", estimated_value)
    print("Expected value is", expected_value)
    print("Total error is", abs_float(estimated_value - expected_value))
    print("******************")
def pi_estimator_using_area_under_curve(iterations):
    def semi_circle(x):
        y = 4.0 - x * x
        s = sqrtApprox(y)
        return s
    estimated_value = area_under_curve_estimator(iterations, semi_circle, 0.0, 2.0)
    print("******************")
    print("Estimating pi using area_under_curve_estimator")
    print("Estimated value is", estimated_value)
    print("Expected value is", PI)
    print("Total error is", abs_float(estimated_value - PI))
    print("******************")
def main():
    pi_estimator(1000)
    area_under_line_estimator_check(1000, 0.0, 1.0)
    pi_estimator_using_area_under_curve(1000)
main()
