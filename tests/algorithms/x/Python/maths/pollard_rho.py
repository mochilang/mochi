# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

@dataclass
class PollardResult:
    factor: int
    ok: bool

def gcd(a, b):
    x = (-a if a < 0 else a)
    y = (-b if b < 0 else b)
    while y != 0:
        t = x % y
        x = y
        y = t
    return x
def rand_fn(value, step, modulus):
    return (value * value + step) % modulus
def pollard_rho(num, seed, step, attempts):
    if num < 2:
        panic("The input value cannot be less than 2")
    if num > 2 and num % 2 == 0:
        return PollardResult(factor=2, ok=True)
    s = seed
    st = step
    i = 0
    while i < attempts:
        tortoise = s
        hare = s
        while True:
            tortoise = rand_fn(tortoise, st, num)
            hare = rand_fn(hare, st, num)
            hare = rand_fn(hare, st, num)
            divisor = gcd(hare - tortoise, num)
            if divisor == 1:
                continue
            else:
                if divisor == num:
                    break
                else:
                    return PollardResult(factor=divisor, ok=True)
        s = hare
        st = st + 1
        i = i + 1
    return PollardResult(factor=0, ok=False)
def test_pollard_rho():
    r1 = pollard_rho(8051, 2, 1, 5)
    if not r1.ok or (r1.factor != 83 and r1.factor != 97):
        panic("test1 failed")
    r2 = pollard_rho(10403, 2, 1, 5)
    if not r2.ok or (r2.factor != 101 and r2.factor != 103):
        panic("test2 failed")
    r3 = pollard_rho(100, 2, 1, 3)
    if not r3.ok or r3.factor != 2:
        panic("test3 failed")
    r4 = pollard_rho(17, 2, 1, 3)
    if r4.ok:
        panic("test4 failed")
    r5 = pollard_rho(17 * 17 * 17, 2, 1, 3)
    if not r5.ok or r5.factor != 17:
        panic("test5 failed")
    r6 = pollard_rho(17 * 17 * 17, 2, 1, 1)
    if r6.ok:
        panic("test6 failed")
    r7 = pollard_rho(3 * 5 * 7, 2, 1, 3)
    if not r7.ok or r7.factor != 21:
        panic("test7 failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_pollard_rho()
        a = pollard_rho(100, 2, 1, 3)
        if a.ok:
            print(_str(a.factor))
        else:
            print("None")
        b = pollard_rho(17, 2, 1, 3)
        if b.ok:
            print(_str(b.factor))
        else:
            print("None")
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
