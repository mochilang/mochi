# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def pow_float(base, exponent):
    exp = exponent
    result = 1.0
    i = 0
    while i < exp:
        result = result * base
        i = i + 1
    return result
def evaluate_poly(poly, x):
    total = 0.0
    i = 0
    while i < len(poly):
        total = total + poly[i] * pow_float(x, i)
        i = i + 1
    return total
def horner(poly, x):
    result = 0.0
    i = len(poly) - 1
    while i >= 0:
        result = result * x + poly[i]
        i = i - 1
    return result
def test_polynomial_evaluation():
    poly = [0.0, 0.0, 5.0, 9.3, 7.0]
    x = 10.0
    if evaluate_poly(poly, x) != 79800.0:
        panic("evaluate_poly failed")
    if horner(poly, x) != 79800.0:
        panic("horner failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_polynomial_evaluation()
        poly = [0.0, 0.0, 5.0, 9.3, 7.0]
        x = 10.0
        print(evaluate_poly(poly, x))
        print(horner(poly, x))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
