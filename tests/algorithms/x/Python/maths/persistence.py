# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def multiplicative_persistence(num):
    if num < 0:
        panic("multiplicative_persistence() does not accept negative values")
    steps = 0
    n = num
    while n >= 10:
        product = 1
        temp = n
        while temp > 0:
            digit = temp % 10
            product = product * digit
            temp = temp // 10
        n = product
        steps = steps + 1
    return steps
def additive_persistence(num):
    if num < 0:
        panic("additive_persistence() does not accept negative values")
    steps = 0
    n = num
    while n >= 10:
        total = 0
        temp = n
        while temp > 0:
            digit = temp % 10
            total = total + digit
            temp = temp // 10
        n = total
        steps = steps + 1
    return steps
def test_persistence():
    if multiplicative_persistence(217) != 2:
        panic("multiplicative_persistence failed")
    if additive_persistence(199) != 3:
        panic("additive_persistence failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_persistence()
        print(_str(multiplicative_persistence(217)))
        print(_str(additive_persistence(199)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
