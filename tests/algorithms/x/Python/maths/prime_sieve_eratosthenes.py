# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def prime_sieve_eratosthenes(num):
    if num <= 0:
        panic("Input must be a positive integer")
    primes = []
    i = 0
    while i <= num:
        primes = _append(primes, True)
        i = i + 1
    p = 2
    while p * p <= num:
        if primes[p]:
            j = p * p
            while j <= num:
                primes[j] = False
                j = j + p
        p = p + 1
    result = []
    k = 2
    while k <= num:
        if primes[k]:
            result = _append(result, k)
        k = k + 1
    return result
def list_eq(a, b):
    if len(a) != len(b):
        return False
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def test_prime_sieve_eratosthenes():
    if not list_eq(prime_sieve_eratosthenes(10), [2, 3, 5, 7]):
        panic("test 10 failed")
    if not list_eq(prime_sieve_eratosthenes(20), [2, 3, 5, 7, 11, 13, 17, 19]):
        panic("test 20 failed")
    if not list_eq(prime_sieve_eratosthenes(2), [2]):
        panic("test 2 failed")
    if len(prime_sieve_eratosthenes(1)) != 0:
        panic("test 1 failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_prime_sieve_eratosthenes()
        print(_str(prime_sieve_eratosthenes(20)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
