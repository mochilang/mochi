# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def bubble_sort(nums):
        arr = nums
        n = len(arr)
        i = 0
        while i < n:
            j = 0
            while j < n - 1:
                if arr[j] > arr[j + 1]:
                    temp = arr[j]
                    arr[j] = arr[j + 1]
                    arr[j + 1] = temp
                j = j + 1
            i = i + 1
        return arr
    def three_sum(nums):
        sorted = bubble_sort(nums)
        res = []
        n = len(sorted)
        i = 0
        while i < n - 2:
            if i == 0 or sorted[i] != sorted[i - 1]:
                low = i + 1
                high = n - 1
                c = 0 - sorted[i]
                while low < high:
                    s = sorted[low] + sorted[high]
                    if s == c:
                        triple = [sorted[i], sorted[low], sorted[high]]
                        res = _append(res, triple)
                        while low < high and sorted[low] == sorted[low + 1]:
                            low = low + 1
                        while low < high and sorted[high] == sorted[high - 1]:
                            high = high - 1
                        low = low + 1
                        high = high - 1
                    else:
                        if s < c:
                            low = low + 1
                        else:
                            high = high - 1
            i = i + 1
        return res
    print(_str(three_sum([-1, 0, 1, 2, -1, -4])))
    print(_str(three_sum([1, 2, 3, 4])))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
