# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def to_float(x):
        return x * 1.0
    def sqrt(x):
        if x <= 0.0:
            return 0.0
        guess = x
        i = 0
        while i < 10:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def floor(x):
        n = 0
        y = x
        while y >= 1.0:
            y = y - 1.0
            n = n + 1
        return n
    def juggler_sequence(n):
        if n < 1:
            panic("number must be a positive integer")
        seq = [n]
        current = n
        while current != 1:
            if current % 2 == 0:
                current = floor(sqrt(to_float(current)))
            else:
                r = sqrt(to_float(current))
                current = floor(r * r * r)
            seq = _append(seq, current)
        return seq
    print(str(juggler_sequence(3)))
    print(str(juggler_sequence(10)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
