# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

@dataclass
class Point:
    x: float
    y: float
    z: float

def absf(x):
    if x < 0.0:
        return -x
    return x
def sqrt_approx(x):
    if x <= 0.0:
        return 0.0
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def distance(a, b):
    dx = b.x - a.x
    dy = b.y - a.y
    dz = b.z - a.z
    return sqrt_approx(absf(dx * dx + dy * dy + dz * dz))
def point_to_string(p):
    return "Point(" + _str(p.x) + ", " + _str(p.y) + ", " + _str(p.z) + ")"
def test_distance():
    p1 = Point(x=2.0, y=-1.0, z=7.0)
    p2 = Point(x=1.0, y=-3.0, z=5.0)
    d = distance(p1, p2)
    if absf(d - 3.0) > 0.0001:
        panic("distance test failed")
    print("Distance from " + point_to_string(p1) + " to " + point_to_string(p2) + " is " + _str(d))
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_distance()
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
