# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def key(x, y):
    return str(x) + "," + str(y)
def joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities):
    result = {}
    i = 0
    while i < len(x_values):
        j = 0
        while j < len(y_values):
            k = key(x_values[i], y_values[j])
            result[k] = x_probabilities[i] * y_probabilities[j]
            j = j + 1
        i = i + 1
    return result
def expectation(values, probabilities):
    total = 0.0
    i = 0
    while i < len(values):
        total = total + (float(values[i])) * probabilities[i]
        i = i + 1
    return total
def variance(values, probabilities):
    mean = expectation(values, probabilities)
    total = 0.0
    i = 0
    while i < len(values):
        diff = (float(values[i])) - mean
        total = total + diff * diff * probabilities[i]
        i = i + 1
    return total
def covariance(x_values, y_values, x_probabilities, y_probabilities):
    mean_x = expectation(x_values, x_probabilities)
    mean_y = expectation(y_values, y_probabilities)
    total = 0.0
    i = 0
    while i < len(x_values):
        j = 0
        while j < len(y_values):
            diff_x = (float(x_values[i])) - mean_x
            diff_y = (float(y_values[j])) - mean_y
            total = total + diff_x * diff_y * x_probabilities[i] * y_probabilities[j]
            j = j + 1
        i = i + 1
    return total
def sqrtApprox(x):
    if x <= 0.0:
        return 0.0
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def standard_deviation(v):
    return sqrtApprox(v)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        x_values = [1, 2]
        y_values = [-2, 5, 8]
        x_probabilities = [0.7, 0.3]
        y_probabilities = [0.3, 0.5, 0.2]
        jpd = joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities)
        i = 0
        while i < len(x_values):
            j = 0
            while j < len(y_values):
                k = key(x_values[i], y_values[j])
                prob = jpd.get(k, 0.0)
                print(k + "=" + str(prob))
                j = j + 1
            i = i + 1
        ex = expectation(x_values, x_probabilities)
        ey = expectation(y_values, y_probabilities)
        vx = variance(x_values, x_probabilities)
        vy = variance(y_values, y_probabilities)
        cov = covariance(x_values, y_values, x_probabilities, y_probabilities)
        print("Ex=" + str(ex))
        print("Ey=" + str(ey))
        print("Vx=" + str(vx))
        print("Vy=" + str(vy))
        print("Cov=" + str(cov))
        print("Sx=" + str(standard_deviation(vx)))
        print("Sy=" + str(standard_deviation(vy)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
