# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def abs_int(n):
    if n < 0:
        return -n
    return n
def sum_of_digits(n):
    m = abs_int(n)
    res = 0
    while m > 0:
        res = res + (m % 10)
        m = m // 10
    return res
def sum_of_digits_recursion(n):
    m = abs_int(n)
    if m < 10:
        return m
    return (m % 10) + sum_of_digits_recursion(m // 10)
def sum_of_digits_compact(n):
    s = _str(abs_int(n))
    res = 0
    i = 0
    while i < len(s):
        res = res + (int(s[i]))
        i = i + 1
    return res
def test_sum_of_digits():
    if sum_of_digits(12345) != 15:
        panic("sum_of_digits 12345 failed")
    if sum_of_digits(123) != 6:
        panic("sum_of_digits 123 failed")
    if sum_of_digits(-123) != 6:
        panic("sum_of_digits -123 failed")
    if sum_of_digits(0) != 0:
        panic("sum_of_digits 0 failed")
    if sum_of_digits_recursion(12345) != 15:
        panic("recursion 12345 failed")
    if sum_of_digits_recursion(123) != 6:
        panic("recursion 123 failed")
    if sum_of_digits_recursion(-123) != 6:
        panic("recursion -123 failed")
    if sum_of_digits_recursion(0) != 0:
        panic("recursion 0 failed")
    if sum_of_digits_compact(12345) != 15:
        panic("compact 12345 failed")
    if sum_of_digits_compact(123) != 6:
        panic("compact 123 failed")
    if sum_of_digits_compact(-123) != 6:
        panic("compact -123 failed")
    if sum_of_digits_compact(0) != 0:
        panic("compact 0 failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_sum_of_digits()
        print(_str(sum_of_digits(12345)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
