# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 10:31 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)

def mod(a, n):
    r = a % n
    if r < 0:
        return r + n
    return r
def greatest_common_divisor(a, b):
    x = (-a if a < 0 else a)
    y = (-b if b < 0 else b)
    while y != 0:
        t = x % y
        x = y
        y = t
    return x
def extended_gcd(a, b):
    if b == 0:
        return [a, 1, 0]
    res = extended_gcd(b, a % b)
    d = res[0]
    p = res[1]
    q = res[2]
    x = q
    y = p - q * (a // b)
    return [d, x, y]
def extended_euclid(a, b):
    if b == 0:
        return [1, 0]
    res = extended_euclid(b, a % b)
    x = res[1]
    y = res[0] - (a // b) * res[1]
    return [x, y]
def invert_modulo(a, n):
    res = extended_euclid(a, n)
    inv = res[0]
    return mod(inv, n)
def modular_division(a, b, n):
    if n <= 1:
        panic("n must be > 1")
    if a <= 0:
        panic("a must be > 0")
    if greatest_common_divisor(a, n) != 1:
        panic("gcd(a,n) != 1")
    eg = extended_gcd(n, a)
    s = eg[2]
    return mod(b * s, n)
def modular_division2(a, b, n):
    s = invert_modulo(a, n)
    return mod(b * s, n)
def tests():
    if modular_division(4, 8, 5) != 2:
        panic("md1")
    if modular_division(3, 8, 5) != 1:
        panic("md2")
    if modular_division(4, 11, 5) != 4:
        panic("md3")
    if modular_division2(4, 8, 5) != 2:
        panic("md21")
    if modular_division2(3, 8, 5) != 1:
        panic("md22")
    if modular_division2(4, 11, 5) != 4:
        panic("md23")
    if invert_modulo(2, 5) != 3:
        panic("inv")
    eg = extended_gcd(10, 6)
    if eg[0] != 2 or eg[1] != (-1) or eg[2] != 2:
        panic("eg")
    eu = extended_euclid(10, 6)
    if eu[0] != (-1) or eu[1] != 2:
        panic("eu")
    if greatest_common_divisor(121, 11) != 11:
        panic("gcd")
def main():
    tests()
    print(str(modular_division(4, 8, 5)))
main()
