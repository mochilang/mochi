# Code generated by Mochi transpiler.
# Version 0.10.67, generated on 2025-08-16 19:42 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    import builtins
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(float(builtins.round(v)))
        return builtins.format(v, ".15g")
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def floor_div(a, b):
        q = a // b
        r = a % b
        if r != 0 and ((a < 0 and b > 0) or (a > 0 and b < 0)):
            q = q - 1
        return q
    def continued_fraction(numerator, denominator):
        num = numerator
        den = denominator
        result = []
        while True:
            integer_part = floor_div(num, den)
            result = _append(result, integer_part)
            num = num - integer_part * den
            if num == 0:
                break
            tmp = num
            num = den
            den = tmp
        return result
    def list_to_string(lst):
        s = "["
        i = 0
        while i < len(lst):
            s = s + _str(lst[i])
            if i < len(lst) - 1:
                s = s + ", "
            i = i + 1
        return s + "]"
    print("Continued Fraction of 0.84375 is: " + list_to_string(continued_fraction(27, 32)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

