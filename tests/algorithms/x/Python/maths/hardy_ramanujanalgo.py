# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def exact_prime_factor_count(n):
    count = 0
    num = n
    if num % 2 == 0:
        count = count + 1
        while num % 2 == 0:
            num = num // 2
    i = 3
    while i * i <= num:
        if num % i == 0:
            count = count + 1
            while num % i == 0:
                num = num // i
        i = i + 2
    if num > 2:
        count = count + 1
    return count
def ln(x):
    ln2 = 0.6931471805599453
    y = x
    k = 0.0
    while y > 2.0:
        y = y / 2.0
        k = k + ln2
    while y < 1.0:
        y = y * 2.0
        k = k - ln2
    t = (y - 1.0) // (y + 1.0)
    term = t
    sum = 0.0
    n = 1
    while n <= 19:
        sum = sum + term // (float(n))
        term = term * t * t
        n = n + 2
    return k + 2.0 * sum
def floor(x):
    i = int(x)
    if (float(i)) > x:
        i = i - 1
    return float(i)
def round4(x):
    m = 10000.0
    return floor(x * m + 0.5) / m
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        n = 51242183
        count = exact_prime_factor_count(n)
        print("The number of distinct prime factors is/are " + str(count))
        loglog = ln(ln(float(n)))
        print("The value of log(log(n)) is " + str(round4(loglog)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
