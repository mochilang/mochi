# Code generated by Mochi transpiler.
# Version 0.10.67, generated on 2025-08-16 19:42 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    import builtins
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(float(builtins.round(v)))
        return builtins.format(v, ".15g")
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    MAX = 4294967296
    HALF = 2147483648
    def to_unsigned(n):
        if n < 0:
            return MAX + n
        return n
    def from_unsigned(n):
        if n >= HALF:
            return n - MAX
        return n
    def bit_and(a, b):
        x = a
        y = b
        res = 0
        bit = 1
        i = 0
        while i < 32:
            if (x % 2 == 1) and (y % 2 == 1):
                res = res + bit
            x = x // 2
            y = y // 2
            bit = bit * 2
            i = i + 1
        return res
    def bit_xor(a, b):
        x = a
        y = b
        res = 0
        bit = 1
        i = 0
        while i < 32:
            abit = x % 2
            bbit = y % 2
            if (abit + bbit) % 2 == 1:
                res = res + bit
            x = x // 2
            y = y // 2
            bit = bit * 2
            i = i + 1
        return res
    def lshift1(num):
        return (num * 2) % MAX
    def add(a, b):
        first = to_unsigned(a)
        second = to_unsigned(b)
        while second != 0:
            carry = bit_and(first, second)
            first = bit_xor(first, second)
            second = lshift1(carry)
        result = from_unsigned(first)
        return result
    print(_str(add(3, 5)))
    print(_str(add(13, 5)))
    print(_str(add(-7, 2)))
    print(_str(add(0, -7)))
    print(_str(add(-321, 0)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

