# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 11:48 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _str(v):
    if isinstance(v, float):
        if abs(v - round(v)) < 1e-9:
            return str(float(round(v)))
        return format(v, ".15g")
    return str(v)

MAX = 4294967296
HALF = 2147483648
def to_unsigned(n):
    if n < 0:
        return MAX + n
    return n
def from_unsigned(n):
    if n >= HALF:
        return n - MAX
    return n
def bit_and(a, b):
    x = a
    y = b
    res = 0
    bit = 1
    i = 0
    while i < 32:
        if (x % 2 == 1) and (y % 2 == 1):
            res = res + bit
        x = x // 2
        y = y // 2
        bit = bit * 2
        i = i + 1
    return res
def bit_xor(a, b):
    x = a
    y = b
    res = 0
    bit = 1
    i = 0
    while i < 32:
        abit = x % 2
        bbit = y % 2
        if (abit + bbit) % 2 == 1:
            res = res + bit
        x = x // 2
        y = y // 2
        bit = bit * 2
        i = i + 1
    return res
def lshift1(num):
    return (num * 2) % MAX
def add(a, b):
    first = to_unsigned(a)
    second = to_unsigned(b)
    while second != 0:
        carry = bit_and(first, second)
        first = bit_xor(first, second)
        second = lshift1(carry)
    result = from_unsigned(first)
    return result
print(_str(add(3, 5)))
print(_str(add(13, 5)))
print(_str(add(-7, 2)))
print(_str(add(0, -7)))
print(_str(add(-321, 0)))

