# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def contains_int(xs, x):
        i = 0
        while i < len(xs):
            if xs[i] == x:
                return True
            i = i + 1
        return False
    def contains_string(xs, x):
        i = 0
        while i < len(xs):
            if xs[i] == x:
                return True
            i = i + 1
        return False
    def count_int(xs, x):
        cnt = 0
        i = 0
        while i < len(xs):
            if xs[i] == x:
                cnt = cnt + 1
            i = i + 1
        return cnt
    def count_string(xs, x):
        cnt = 0
        i = 0
        while i < len(xs):
            if xs[i] == x:
                cnt = cnt + 1
            i = i + 1
        return cnt
    def sort_int(xs):
        arr = xs
        i = 0
        while i < len(arr):
            j = i + 1
            while j < len(arr):
                if arr[j] < arr[i]:
                    tmp = arr[i]
                    arr[i] = arr[j]
                    arr[j] = tmp
                j = j + 1
            i = i + 1
        return arr
    def sort_string(xs):
        arr = xs
        i = 0
        while i < len(arr):
            j = i + 1
            while j < len(arr):
                if arr[j] < arr[i]:
                    tmp = arr[i]
                    arr[i] = arr[j]
                    arr[j] = tmp
                j = j + 1
            i = i + 1
        return arr
    def mode_int(lst):
        if len(lst) == 0:
            return []
        counts = []
        i = 0
        while i < len(lst):
            counts = _append(counts, count_int(lst, lst[i]))
            i = i + 1
        max_count = 0
        i = 0
        while i < len(counts):
            if counts[i] > max_count:
                max_count = counts[i]
            i = i + 1
        modes = []
        i = 0
        while i < len(lst):
            if counts[i] == max_count:
                v = lst[i]
                if not contains_int(modes, v):
                    modes = _append(modes, v)
            i = i + 1
        return sort_int(modes)
    def mode_string(lst):
        if len(lst) == 0:
            return []
        counts = []
        i = 0
        while i < len(lst):
            counts = _append(counts, count_string(lst, lst[i]))
            i = i + 1
        max_count = 0
        i = 0
        while i < len(counts):
            if counts[i] > max_count:
                max_count = counts[i]
            i = i + 1
        modes = []
        i = 0
        while i < len(lst):
            if counts[i] == max_count:
                v = lst[i]
                if not contains_string(modes, v):
                    modes = _append(modes, v)
            i = i + 1
        return sort_string(modes)
    print(mode_int([2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2]))
    print(mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2]))
    print(mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2]))
    print(mode_string(["x", "y", "y", "z"]))
    print(mode_string(["x", "x", "y", "y", "z"]))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
