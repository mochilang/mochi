# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def exp_approx(x):
        sum = 1.0
        term = 1.0
        i = 1
        while i <= 20:
            term = term * x / i
            sum = sum + term
            i = i + 1
        return sum
    def f(x):
        return 8.0 * x - 2.0 * exp_approx(-x)
    def secant_method(lower_bound, upper_bound, repeats):
        x0 = lower_bound
        x1 = upper_bound
        i = 0
        while i < repeats:
            fx1 = f(x1)
            fx0 = f(x0)
            new_x = x1 - (fx1 * (x1 - x0)) / (fx1 - fx0)
            x0 = x1
            x1 = new_x
            i = i + 1
        return x1
    print(_str(secant_method(1.0, 3.0, 2)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
