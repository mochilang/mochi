# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 15:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def ucal(u, p):
    temp = u
    i = 1
    while i < p:
        temp = temp * (u - (float(i)))
        i = i + 1
    return temp
def factorial(n):
    result = 1.0
    i = 2
    while i <= n:
        result = result * (float(i))
        i = i + 1
    return result
def newton_forward_interpolation(x, y0, value):
    n = len(x)
    y = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            row = _append(row, 0.0)
            j = j + 1
        y = _append(y, row)
        i = i + 1
    i = 0
    while i < n:
        y[i][0] = y0[i]
        i = i + 1
    i1 = 1
    while i1 < n:
        j1 = 0
        while j1 < n - i1:
            y[j1][i1] = y[j1 + 1][i1 - 1] - y[j1][i1 - 1]
            j1 = j1 + 1
        i1 = i1 + 1
    u = (value - x[0]) / (x[1] - x[0])
    sum = y[0][0]
    k = 1
    while k < n:
        sum = sum + (ucal(u, k) * y[0][k]) / factorial(k)
        k = k + 1
    return sum
x_points = [0.0, 1.0, 2.0, 3.0]
y_points = [0.0, 1.0, 8.0, 27.0]
print(str(newton_forward_interpolation(x_points, y_points, 1.5)))
