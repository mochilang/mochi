# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def f(x):
        return (x - 0.0) * (x - 0.0)
    def make_points(a, b, h):
        points = []
        x = a + h
        while x < (b - h):
            points = _append(points, x)
            x = x + h
        return points
    def simpson_rule(boundary, steps):
        if steps <= 0:
            panic("Number of steps must be greater than zero")
        a = boundary[0]
        b = boundary[1]
        h = (b - a) / (float(steps))
        pts = make_points(a, b, h)
        y = (h / 3.0) * f(a)
        cnt = 2
        i = 0
        while i < len(pts):
            coeff = 4.0 - 2.0 * (float((cnt % 2)))
            y = y + (h / 3.0) * coeff * f(pts[i])
            cnt = cnt + 1
            i = i + 1
        y = y + (h / 3.0) * f(b)
        return y
    result = simpson_rule([0.0, 1.0], 10)
    print(_str(result))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
