# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 15:42 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class NRResult:
    root: float
    error: float
    steps: [float]

def abs_float(x):
    if x < 0.0:
        return -x
    else:
        return x
def fail(msg):
    print("error: " + msg)
def calc_derivative(f, x, delta_x):
    return (f(x + delta_x / 2.0) - f(x - delta_x / 2.0)) / delta_x
def newton_raphson(f, x0, max_iter, step, max_error, log_steps):
    a = x0
    steps = []
    i = 0
    while i < max_iter:
        if log_steps:
            steps = _append(steps, a)
        err = abs_float(f(a))
        if err < max_error:
            return NRResult(root=a, error=err, steps=steps)
        der = calc_derivative(f, a, step)
        if der == 0.0:
            fail("No converging solution found, zero derivative")
            return NRResult(root=a, error=err, steps=steps)
        a = a - f(a) / der
        i = i + 1
    fail("No converging solution found, iteration limit reached")
    return NRResult(root=a, error=abs_float(f(a)), steps=steps)
def poly(x):
    return x * x - 5.0 * x + 2.0
result = newton_raphson(poly, 0.4, 20, 1e-06, 1e-06, False)
print("root = " + str(result.root) + ", error = " + str(result.error))
