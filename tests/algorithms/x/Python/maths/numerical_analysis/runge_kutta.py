# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 15:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def runge_kutta(f, y0, x0, h, x_end):
    span = (x_end - x0) / h
    n = int(span)
    if float(n) < span:
        n = n + 1
    y = []
    i = 0
    while i < n + 1:
        y = _append(y, 0.0)
        i = i + 1
    y[0] = y0
    x = x0
    k = 0
    while k < n:
        k1 = f(x, y[k])
        k2 = f(x + 0.5 * h, y[k] + 0.5 * h * k1)
        k3 = f(x + 0.5 * h, y[k] + 0.5 * h * k2)
        k4 = f(x + h, y[k] + h * k3)
        y[k + 1] = y[k] + (1.0 / 6.0) * h * (k1 + 2.0 * k2 + 2.0 * k3 + k4)
        x = x + h
        k = k + 1
    return y
def test_runge_kutta():
    def f(x, y):
        return y
    result = runge_kutta(f, 1.0, 0.0, 0.01, 5.0)
    last = result[len(result) - 1]
    expected = 148.41315904125113
    diff = last - expected
    if diff < 0.0:
        diff = -diff
    if diff > 1e-06:
        panic("runge_kutta failed")
def main():
    test_runge_kutta()
    def f(x, y):
        return y
    r = runge_kutta(f, 1.0, 0.0, 0.1, 1.0)
    print(str(r[len(r) - 1]))
main()
