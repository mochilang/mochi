# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 15:42 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class NevilleResult:
    value: float
    table: [[float]]

def neville_interpolate(x_points, y_points, x0):
    n = len(x_points)
    q = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            row = _append(row, 0.0)
            j = j + 1
        q = _append(q, row)
        i = i + 1
    i = 0
    while i < n:
        q[i][1] = y_points[i]
        i = i + 1
    col = 2
    while col < n:
        row_idx = col
        while row_idx < n:
            q[row_idx][col] = ((x0 - x_points[row_idx - col + 1]) * q[row_idx][col - 1] - (x0 - x_points[row_idx]) * q[row_idx - 1][col - 1]) / (x_points[row_idx] - x_points[row_idx - col + 1])
            row_idx = row_idx + 1
        col = col + 1
    return NevilleResult(value=q[n - 1][n - 1], table=q)
def test_neville():
    xs = [1.0, 2.0, 3.0, 4.0, 6.0]
    ys = [6.0, 7.0, 8.0, 9.0, 11.0]
    r1 = neville_interpolate(xs, ys, 5.0)
    if r1.value != 10.0:
        panic("neville_interpolate at 5 failed")
    r2 = neville_interpolate(xs, ys, 99.0)
    if r2.value != 104.0:
        panic("neville_interpolate at 99 failed")
def main():
    test_neville()
    xs = [1.0, 2.0, 3.0, 4.0, 6.0]
    ys = [6.0, 7.0, 8.0, 9.0, 11.0]
    r = neville_interpolate(xs, ys, 5.0)
    print(r.value)
main()
