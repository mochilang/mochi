# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 15:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

def runge_kutta_fehlberg_45(func, x_initial, y_initial, step_size, x_final):
    if x_initial >= x_final:
        panic("The final value of x must be greater than initial value of x.")
    if step_size <= 0.0:
        panic("Step size must be positive.")
    n = int(((x_final - x_initial) / step_size))
    ys = []
    x = x_initial
    y = y_initial
    ys = _append(ys, y)
    i = 0
    while i < n:
        k1 = step_size * func(x, y)
        k2 = step_size * func(x + step_size / 4.0, y + k1 / 4.0)
        k3 = step_size * func(x + (3.0 / 8.0) * step_size, y + (3.0 / 32.0) * k1 + (9.0 / 32.0) * k2)
        k4 = step_size * func(x + (12.0 / 13.0) * step_size, y + (1932.0 / 2197.0) * k1 - (7200.0 / 2197.0) * k2 + (7296.0 / 2197.0) * k3)
        k5 = step_size * func(x + step_size, y + (439.0 / 216.0) * k1 - 8.0 * k2 + (3680.0 / 513.0) * k3 - (845.0 / 4104.0) * k4)
        k6 = step_size * func(x + step_size / 2.0, y - (8.0 / 27.0) * k1 + 2.0 * k2 - (3544.0 / 2565.0) * k3 + (1859.0 / 4104.0) * k4 - (11.0 / 40.0) * k5)
        y = y + (16.0 / 135.0) * k1 + (6656.0 / 12825.0) * k3 + (28561.0 / 56430.0) * k4 - (9.0 / 50.0) * k5 + (2.0 / 55.0) * k6
        x = x + step_size
        ys = _append(ys, y)
        i = i + 1
    return ys
def main():
    def f1(x, y):
        return 1.0 + y * y
    y1 = runge_kutta_fehlberg_45(f1, 0.0, 0.0, 0.2, 1.0)
    print(y1[1])
    def f2(x, y):
        return x
    y2 = runge_kutta_fehlberg_45(f2, -1.0, 0.0, 0.2, 0.0)
    print(y2[1])
main()
