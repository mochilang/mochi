# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def normalize_index(index, n):
    if index < 0:
        return n + index
    return index
def find_max_iterative(nums):
    if len(nums) == 0:
        panic("find_max_iterative() arg is an empty sequence")
    max_num = nums[0]
    i = 0
    while i < len(nums):
        x = nums[i]
        if x > max_num:
            max_num = x
        i = i + 1
    return max_num
def find_max_recursive(nums, left, right):
    n = len(nums)
    if n == 0:
        panic("find_max_recursive() arg is an empty sequence")
    if left >= n or left < (0 - n) or right >= n or right < (0 - n):
        panic("list index out of range")
    l = normalize_index(left, n)
    r = normalize_index(right, n)
    if l == r:
        return nums[l]
    mid = (l + r) // 2
    left_max = find_max_recursive(nums, l, mid)
    right_max = find_max_recursive(nums, mid + 1, r)
    if left_max >= right_max:
        return left_max
    return right_max
def test_find_max():
    arr = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0]
    if find_max_iterative(arr) != 94.0:
        panic("find_max_iterative failed")
    if find_max_recursive(arr, 0, len(arr) - 1) != 94.0:
        panic("find_max_recursive failed")
    if find_max_recursive(arr, -len(arr), -1) != 94.0:
        panic("negative index handling failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_find_max()
        nums = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0]
        print(find_max_iterative(nums))
        print(find_max_recursive(nums, 0, len(nums) - 1))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
