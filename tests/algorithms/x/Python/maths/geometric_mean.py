# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def abs(x):
    if x < 0.0:
        return -x
    return x
def pow_int(base, exp):
    result = 1.0
    i = 0
    while i < exp:
        result = result * base
        i = i + 1
    return result
def nth_root(x, n):
    if x == 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 10:
        denom = pow_int(guess, n - 1)
        guess = (float((n - 1)) * guess + x // denom) // (float(n))
        i = i + 1
    return guess
def round_nearest(x):
    if x >= 0.0:
        n = int((x + 0.5))
        return float(n)
    n = int((x - 0.5))
    return float(n)
def compute_geometric_mean(nums):
    if len(nums) == 0:
        panic("no numbers")
    product = 1.0
    i = 0
    while i < len(nums):
        product = product * nums[i]
        i = i + 1
    if product < 0.0 and len(nums) % 2 == 0:
        panic("Cannot Compute Geometric Mean for these numbers.")
    mean = nth_root(abs(product), len(nums))
    if product < 0.0:
        mean = -mean
    possible = round_nearest(mean)
    if pow_int(possible, len(nums)) == product:
        mean = possible
    return mean
def test_compute_geometric_mean():
    eps = 0.0001
    m1 = compute_geometric_mean([2.0, 8.0])
    if abs(m1 - 4.0) > eps:
        panic("test1 failed")
    m2 = compute_geometric_mean([5.0, 125.0])
    if abs(m2 - 25.0) > eps:
        panic("test2 failed")
    m3 = compute_geometric_mean([1.0, 0.0])
    if abs(m3 - 0.0) > eps:
        panic("test3 failed")
    m4 = compute_geometric_mean([1.0, 5.0, 25.0, 5.0])
    if abs(m4 - 5.0) > eps:
        panic("test4 failed")
    m5 = compute_geometric_mean([-5.0, 25.0, 1.0])
    if abs(m5 + 5.0) > eps:
        panic("test5 failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_compute_geometric_mean()
        print(compute_geometric_mean([-3.0, -27.0]))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
