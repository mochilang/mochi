# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class EuclidResult:
        x: int
        y: int
    def extended_euclid(a, b):
        if b == 0:
            return EuclidResult(x=1, y=0)
        res = extended_euclid(b, a % b)
        k = a // b
        return EuclidResult(x=res.y, y=res.x - k * res.y)
    def chinese_remainder_theorem(n1, r1, n2, r2):
        res = extended_euclid(n1, n2)
        x = res.x
        y = res.y
        m = n1 * n2
        n = r2 * x * n1 + r1 * y * n2
        return ((n % m) + m) % m
    def invert_modulo(a, n):
        res = extended_euclid(a, n)
        b = res.x
        if b < 0:
            b = (b % n + n) % n
        return b
    def chinese_remainder_theorem2(n1, r1, n2, r2):
        x = invert_modulo(n1, n2)
        y = invert_modulo(n2, n1)
        m = n1 * n2
        n = r2 * x * n1 + r1 * y * n2
        return ((n % m) + m) % m
    e1 = extended_euclid(10, 6)
    print(str(e1.x) + "," + str(e1.y))
    e2 = extended_euclid(7, 5)
    print(str(e2.x) + "," + str(e2.y))
    print(str(chinese_remainder_theorem(5, 1, 7, 3)))
    print(str(chinese_remainder_theorem(6, 1, 4, 3)))
    print(str(invert_modulo(2, 5)))
    print(str(invert_modulo(8, 7)))
    print(str(chinese_remainder_theorem2(5, 1, 7, 3)))
    print(str(chinese_remainder_theorem2(6, 1, 4, 3)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
