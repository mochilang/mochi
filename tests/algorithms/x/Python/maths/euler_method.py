# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 14:44 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def ceil_int(x):
    n = int(x)
    if float(n) < x:
        n = n + 1
    return n
def explicit_euler(ode_func, y0, x0, step_size, x_end):
    n = ceil_int((x_end - x0) / step_size)
    y = []
    i = 0
    while i <= n:
        y = _append(y, 0.0)
        i = i + 1
    y[0] = y0
    x = x0
    k = 0
    while k < n:
        y[k + 1] = y[k] + step_size * ode_func(x, y[k])
        x = x + step_size
        k = k + 1
    return y
def abs_float(a):
    if a < 0.0:
        return -a
    return a
def test_explicit_euler():
    f = lambda x, y: y
    ys = explicit_euler(f, 1.0, 0.0, 0.01, 5.0)
    last = ys[len(ys) - 1]
    if abs_float(last - 144.77277243257308) > 0.001:
        panic("explicit_euler failed")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_explicit_euler()
        f = lambda x, y: y
        ys = explicit_euler(f, 1.0, 0.0, 0.01, 5.0)
        print(ys[len(ys) - 1])
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

