# Code generated by Mochi transpiler.
# Version 0.10.62, generated on 2025-08-09 10:42 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def remove_at(xs, idx):
    res = []
    i = 0
    while i < len(xs):
        if i != idx:
            res = _append(res, xs[i])
        i = i + 1
    return res
def kth_permutation(k, n):
    if n <= 0:
        panic("n must be positive")
    factorials = [1]
    i = 2
    while i < n:
        factorials = _append(factorials, factorials[len(factorials) - 1] * i)
        i = i + 1
    total = factorials[len(factorials) - 1] * n
    if (k < 0) or (k >= total):
        panic("k out of bounds")
    elements = []
    e = 0
    while e < n:
        elements = _append(elements, e)
        e = e + 1
    permutation = []
    idx = len(factorials) - 1
    while idx >= 0:
        factorial = factorials[idx]
        number = k // factorial
        k = k % factorial
        permutation = _append(permutation, elements[number])
        elements = remove_at(elements, number)
        idx = idx - 1
    permutation = _append(permutation, elements[0])
    return permutation
def list_equal(a, b):
    if len(a) != len(b):
        return False
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def list_to_string(xs):
    if len(xs) == 0:
        return "[]"
    s = "[" + _str(xs[0])
    i = 1
    while i < len(xs):
        s = s + ", " + _str(xs[i])
        i = i + 1
    s = s + "]"
    return s
def test_kth_permutation():
    expected1 = [0, 1, 2, 3, 4]
    res1 = kth_permutation(0, 5)
    if not list_equal(res1, expected1):
        panic("test case 1 failed")
    expected2 = [1, 3, 0, 2]
    res2 = kth_permutation(10, 4)
    if not list_equal(res2, expected2):
        panic("test case 2 failed")
def main():
    test_kth_permutation()
    res = kth_permutation(10, 4)
    print(list_to_string(res))
main()

