# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def assign_ranks(data):
    ranks = []
    n = len(data)
    i = 0
    while i < n:
        rank = 1
        j = 0
        while j < n:
            if data[j] < data[i] or (data[j] == data[i] and j < i):
                rank = rank + 1
            j = j + 1
        ranks = _append(ranks, rank)
        i = i + 1
    return ranks
def calculate_spearman_rank_correlation(var1, var2):
    if len(var1) != len(var2):
        panic("Lists must have equal length")
    n = len(var1)
    rank1 = assign_ranks(var1)
    rank2 = assign_ranks(var2)
    i = 0
    d_sq = 0.0
    while i < n:
        diff = (float((rank1[i] - rank2[i])))
        d_sq = d_sq + diff * diff
        i = i + 1
    n_f = (float(n))
    return 1.0 - (6.0 * d_sq) / (n_f * (n_f * n_f - 1.0))
def test_spearman():
    x = [1.0, 2.0, 3.0, 4.0, 5.0]
    y_inc = [2.0, 4.0, 6.0, 8.0, 10.0]
    if calculate_spearman_rank_correlation(x, y_inc) != 1.0:
        panic("case1")
    y_dec = [5.0, 4.0, 3.0, 2.0, 1.0]
    if calculate_spearman_rank_correlation(x, y_dec) != (-1.0):
        panic("case2")
    y_mix = [5.0, 1.0, 2.0, 9.0, 5.0]
    if calculate_spearman_rank_correlation(x, y_mix) != 0.6:
        panic("case3")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_spearman()
        print(_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [2.0, 4.0, 6.0, 8.0, 10.0])))
        print(_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [5.0, 4.0, 3.0, 2.0, 1.0])))
        print(_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [5.0, 1.0, 2.0, 9.0, 5.0])))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
