# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class QR:
        q: [[float]]
        r: [[float]]
    def sqrt_approx(x):
        if x <= 0.0:
            return 0.0
        guess = x
        i = 0
        while i < 20:
            guess = (guess + x / guess) / 2.0
            i = i + 1
        return guess
    def sign(x):
        if x >= 0.0:
            return 1.0
        else:
            return -1.0
    def vector_norm(v):
        sum = 0.0
        i = 0
        while i < len(v):
            sum = sum + v[i] * v[i]
            i = i + 1
        n = sqrt_approx(sum)
        return n
    def identity_matrix(n):
        mat = []
        i = 0
        while i < n:
            row = []
            j = 0
            while j < n:
                if i == j:
                    row = _append(row, 1.0)
                else:
                    row = _append(row, 0.0)
                j = j + 1
            mat = _append(mat, row)
            i = i + 1
        return mat
    def copy_matrix(a):
        mat = []
        i = 0
        while i < len(a):
            row = []
            j = 0
            while j < len(a[i]):
                row = _append(row, a[i][j])
                j = j + 1
            mat = _append(mat, row)
            i = i + 1
        return mat
    def matmul(a, b):
        m = len(a)
        n = len(a[0])
        p = len(b[0])
        res = []
        i = 0
        while i < m:
            row = []
            j = 0
            while j < p:
                sum = 0.0
                k = 0
                while k < n:
                    sum = sum + a[i][k] * b[k][j]
                    k = k + 1
                row = _append(row, sum)
                j = j + 1
            res = _append(res, row)
            i = i + 1
        return res
    def qr_decomposition(a):
        m = len(a)
        n = len(a[0])
        t = (m if m < n else n)
        q = identity_matrix(m)
        r = copy_matrix(a)
        k = 0
        while k < t - 1:
            x = []
            i = k
            while i < m:
                x = _append(x, r[i][k])
                i = i + 1
            e1 = []
            i = 0
            while i < len(x):
                if i == 0:
                    e1 = _append(e1, 1.0)
                else:
                    e1 = _append(e1, 0.0)
                i = i + 1
            alpha = vector_norm(x)
            s = sign(x[0]) * alpha
            v = []
            i = 0
            while i < len(x):
                v = _append(v, x[i] + s * e1[i])
                i = i + 1
            vnorm = vector_norm(v)
            i = 0
            while i < len(v):
                v[i] = v[i] / vnorm
                i = i + 1
            size = len(v)
            qk_small = []
            i = 0
            while i < size:
                row = []
                j = 0
                while j < size:
                    delta = (1.0 if i == j else 0.0)
                    row = _append(row, delta - 2.0 * v[i] * v[j])
                    j = j + 1
                qk_small = _append(qk_small, row)
                i = i + 1
            qk = identity_matrix(m)
            i = 0
            while i < size:
                j = 0
                while j < size:
                    qk[k + i][k + j] = qk_small[i][j]
                    j = j + 1
                i = i + 1
            q = matmul(q, qk)
            r = matmul(qk, r)
            k = k + 1
        return QR(q=q, r=r)
    def print_matrix(mat):
        i = 0
        while i < len(mat):
            line = ""
            j = 0
            while j < len(mat[i]):
                line = line + _str(mat[i][j])
                if j + 1 < len(mat[i]):
                    line = line + " "
                j = j + 1
            print(line)
            i = i + 1
    A = [[12.0, -51.0, 4.0], [6.0, 167.0, -68.0], [-4.0, 24.0, -41.0]]
    result = qr_decomposition(A)
    print_matrix(result.q)
    print_matrix(result.r)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
