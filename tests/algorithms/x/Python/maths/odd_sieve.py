# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def odd_sieve(num):
        if num <= 2:
            return []
        if num == 3:
            return [2]
        size = (num // 2) - 1
        sieve = []
        idx = 0
        while idx < size:
            sieve = _append(sieve, True)
            idx = idx + 1
        i = 3
        while i * i <= num:
            s_idx = (i // 2) - 1
            if sieve[s_idx]:
                j = i * i
                while j < num:
                    j_idx = (j // 2) - 1
                    sieve[j_idx] = False
                    j = j + 2 * i
            i = i + 2
        primes = [2]
        n = 3
        k = 0
        while n < num:
            if sieve[k]:
                primes = _append(primes, n)
            n = n + 2
            k = k + 1
        return primes
    print(odd_sieve(2))
    print(odd_sieve(3))
    print(odd_sieve(10))
    print(odd_sieve(20))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
