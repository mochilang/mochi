# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def prime_factors(n):
        i = 2
        x = n
        factors = []
        while i * i <= x:
            if x % i == 0:
                factors = _append(factors, i)
                x = int((x // i))
            else:
                i = i + 1
        if x > 1:
            factors = _append(factors, x)
        return factors
    def liouville_lambda(n):
        if n < 1:
            panic("Input must be a positive integer")
        cnt = len(prime_factors(n))
        if cnt % 2 == 0:
            return 1
        return 0 - 1
    print(liouville_lambda(10))
    print(liouville_lambda(11))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
