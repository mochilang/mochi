# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 14:44 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    import builtins
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(float(builtins.round(v)))
        return builtins.format(v, ".15g")
    return builtins.str(v)

@dataclass
class Coeffs:
    x: int
    y: int

def abs_val(n):
    if n < 0:
        return -n
    return n
def extended_euclidean_algorithm(a, b):
    if abs_val(a) == 1:
        return Coeffs(x=a, y=0)
    if abs_val(b) == 1:
        return Coeffs(x=0, y=b)
    old_remainder = a
    remainder = b
    old_coeff_a = 1
    coeff_a = 0
    old_coeff_b = 0
    coeff_b = 1
    while remainder != 0:
        quotient = old_remainder // remainder
        temp_remainder = old_remainder - quotient * remainder
        old_remainder = remainder
        remainder = temp_remainder
        temp_a = old_coeff_a - quotient * coeff_a
        old_coeff_a = coeff_a
        coeff_a = temp_a
        temp_b = old_coeff_b - quotient * coeff_b
        old_coeff_b = coeff_b
        coeff_b = temp_b
    if a < 0:
        old_coeff_a = -old_coeff_a
    if b < 0:
        old_coeff_b = -old_coeff_b
    return Coeffs(x=old_coeff_a, y=old_coeff_b)
def test_extended_euclidean_algorithm():
    r1 = extended_euclidean_algorithm(1, 24)
    if (r1.x != 1) or (r1.y != 0):
        panic("test1 failed")
    r2 = extended_euclidean_algorithm(8, 14)
    if (r2.x != 2) or (r2.y != (-1)):
        panic("test2 failed")
    r3 = extended_euclidean_algorithm(240, 46)
    if (r3.x != (-9)) or (r3.y != 47):
        panic("test3 failed")
    r4 = extended_euclidean_algorithm(1, -4)
    if (r4.x != 1) or (r4.y != 0):
        panic("test4 failed")
    r5 = extended_euclidean_algorithm(-2, -4)
    if (r5.x != (-1)) or (r5.y != 0):
        panic("test5 failed")
    r6 = extended_euclidean_algorithm(0, -4)
    if (r6.x != 0) or (r6.y != (-1)):
        panic("test6 failed")
    r7 = extended_euclidean_algorithm(2, 0)
    if (r7.x != 1) or (r7.y != 0):
        panic("test7 failed")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_extended_euclidean_algorithm()
        res = extended_euclidean_algorithm(240, 46)
        print("(" + _str(res.x) + ", " + _str(res.y) + ")")
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

