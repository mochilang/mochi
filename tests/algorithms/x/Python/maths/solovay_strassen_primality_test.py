# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

seed = 1
def set_seed(s):
    global seed
    seed = s
def randint(a, b):
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483648
    return (seed % (b - a + 1)) + a
def jacobi_symbol(random_a, number):
    if random_a == 0 or random_a == 1:
        return random_a
    random_a = random_a % number
    t = 1
    while random_a != 0:
        while random_a % 2 == 0:
            random_a = random_a // 2
            r = number % 8
            if r == 3 or r == 5:
                t = -t
        temp = random_a
        random_a = number
        number = temp
        if random_a % 4 == 3 and number % 4 == 3:
            t = -t
        random_a = random_a % number
    if number == 1:
        return t
    return 0
def pow_mod(base, exp, mod):
    result = 1
    b = base % mod
    e = exp
    while e > 0:
        if e % 2 == 1:
            result = (result * b) % mod
        b = (b * b) % mod
        e = e // 2
    return result
def solovay_strassen(number, iterations):
    if number <= 1:
        return False
    if number <= 3:
        return True
    i = 0
    while i < iterations:
        a = randint(2, number - 2)
        x = jacobi_symbol(a, number)
        y = pow_mod(a, (number - 1) / 2, number)
        mod_x = x % number
        if mod_x < 0:
            mod_x = mod_x + number
        if x == 0 or y != mod_x:
            return False
        i = i + 1
    return True
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        set_seed(10)
        print(_str(solovay_strassen(13, 5)))
        print(_str(solovay_strassen(9, 10)))
        print(_str(solovay_strassen(17, 15)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
