# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def factorial(n):
    if n < 0:
        panic("factorial() not defined for negative values")
    value = 1
    i = 1
    while i <= n:
        value = value * i
        i = i + 1
    return value
def factorial_recursive(n):
    if n < 0:
        panic("factorial() not defined for negative values")
    if n <= 1:
        return 1
    return n * factorial_recursive(n - 1)
def test_zero():
    if factorial(0) != 1:
        panic("factorial(0) failed")
    if factorial_recursive(0) != 1:
        panic("factorial_recursive(0) failed")
def test_positive_integers():
    if factorial(1) != 1:
        panic("factorial(1) failed")
    if factorial_recursive(1) != 1:
        panic("factorial_recursive(1) failed")
    if factorial(5) != 120:
        panic("factorial(5) failed")
    if factorial_recursive(5) != 120:
        panic("factorial_recursive(5) failed")
    if factorial(7) != 5040:
        panic("factorial(7) failed")
    if factorial_recursive(7) != 5040:
        panic("factorial_recursive(7) failed")
def test_large_number():
    if factorial(10) != 3628800:
        panic("factorial(10) failed")
    if factorial_recursive(10) != 3628800:
        panic("factorial_recursive(10) failed")
def run_tests():
    test_zero()
    test_positive_integers()
    test_large_number()
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        run_tests()
        print(factorial(6))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
