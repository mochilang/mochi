# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def abs_int(x):
        if x < 0:
            return -x
        return x
    def gcd_iter(a, b):
        x = abs_int(a)
        y = abs_int(b)
        while y != 0:
            t = y
            y = x % y
            x = t
        return x
    def is_prime(n):
        if n <= 1:
            return False
        d = 2
        while d * d <= n:
            if n % d == 0:
                return False
            d = d + 1
        return True
    def sieve_er(n):
        nums = []
        i = 2
        while i <= n:
            nums = _append(nums, i)
            i = i + 1
        idx = 0
        while idx < len(nums):
            j = idx + 1
            while j < len(nums):
                if nums[idx] != 0:
                    if nums[j] % nums[idx] == 0:
                        nums[j] = 0
                j = j + 1
            idx = idx + 1
        res = []
        k = 0
        while k < len(nums):
            v = nums[k]
            if v != 0:
                res = _append(res, v)
            k = k + 1
        return res
    def get_prime_numbers(n):
        ans = []
        num = 2
        while num <= n:
            if is_prime(num):
                ans = _append(ans, num)
            num = num + 1
        return ans
    def prime_factorization(number):
        if number == 0:
            return [0]
        if number == 1:
            return [1]
        ans = []
        if is_prime(number):
            ans = _append(ans, number)
            return ans
        quotient = number
        factor = 2
        while quotient != 1:
            if is_prime(factor) and quotient % factor == 0:
                ans = _append(ans, factor)
                quotient = quotient // factor
            else:
                factor = factor + 1
        return ans
    def greatest_prime_factor(number):
        factors = prime_factorization(number)
        m = factors[0]
        i = 1
        while i < len(factors):
            if factors[i] > m:
                m = factors[i]
            i = i + 1
        return m
    def smallest_prime_factor(number):
        factors = prime_factorization(number)
        m = factors[0]
        i = 1
        while i < len(factors):
            if factors[i] < m:
                m = factors[i]
            i = i + 1
        return m
    def kg_v(number1, number2):
        if number1 < 1 or number2 < 1:
            panic("numbers must be positive")
        g = gcd_iter(number1, number2)
        return (number1 // g) * number2
    def is_even(number):
        return number % 2 == 0
    def is_odd(number):
        return number % 2 != 0
    def goldbach(number):
        if not is_even(number) or number <= 2:
            panic("number must be even and > 2")
        primes = get_prime_numbers(number)
        i = 0
        while i < len(primes):
            j = i + 1
            while j < len(primes):
                if primes[i] + primes[j] == number:
                    return [primes[i], primes[j]]
                j = j + 1
            i = i + 1
        return []
    def get_prime(n):
        if n < 0:
            panic("n must be non-negative")
        index = 0
        ans = 2
        while index < n:
            index = index + 1
            ans = ans + 1
            while not is_prime(ans):
                ans = ans + 1
        return ans
    def get_primes_between(p1, p2):
        bad1 = not is_prime(p1)
        bad2 = not is_prime(p2)
        if bad1 or bad2 or p1 >= p2:
            panic("arguments must be prime and p1 < p2")
        num = p1 + 1
        while num < p2:
            if is_prime(num):
                break
            num = num + 1
        ans = []
        while num < p2:
            ans = _append(ans, num)
            num = num + 1
            while num < p2:
                if is_prime(num):
                    break
                num = num + 1
        return ans
    def get_divisors(n):
        if n < 1:
            panic("n must be >= 1")
        ans = []
        d = 1
        while d <= n:
            if n % d == 0:
                ans = _append(ans, d)
            d = d + 1
        return ans
    def is_perfect_number(number):
        if number <= 1:
            panic("number must be > 1")
        divisors = get_divisors(number)
        sum = 0
        i = 0
        while i < len(divisors) - 1:
            sum = sum + divisors[i]
            i = i + 1
        return sum == number
    def simplify_fraction(numerator, denominator):
        if denominator == 0:
            panic("denominator cannot be zero")
        g = gcd_iter(abs_int(numerator), abs_int(denominator))
        return [numerator // g, denominator // g]
    def factorial(n):
        if n < 0:
            panic("n must be >= 0")
        ans = 1
        i = 1
        while i <= n:
            ans = ans * i
            i = i + 1
        return ans
    def fib(n):
        if n < 0:
            panic("n must be >= 0")
        if n <= 1:
            return 1
        tmp = 0
        fib1 = 1
        ans = 1
        i = 0
        while i < n - 1:
            tmp = ans
            ans = ans + fib1
            fib1 = tmp
            i = i + 1
        return ans
    print(_str(is_prime(97)))
    print(_str(sieve_er(20)))
    print(_str(get_prime_numbers(20)))
    print(_str(prime_factorization(287)))
    print(_str(greatest_prime_factor(287)))
    print(_str(smallest_prime_factor(287)))
    print(_str(kg_v(8, 10)))
    print(_str(goldbach(28)))
    print(_str(get_prime(8)))
    print(_str(get_primes_between(3, 20)))
    print(_str(get_divisors(28)))
    print(_str(is_perfect_number(28)))
    print(_str(simplify_fraction(10, 20)))
    print(_str(factorial(5)))
    print(_str(fib(10)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
