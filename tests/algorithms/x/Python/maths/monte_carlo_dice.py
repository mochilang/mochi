# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 10:31 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

lcg_seed = 1
def lcg_rand():
    global lcg_seed
    lcg_seed = (lcg_seed * 1103515245 + 12345) % 2147483648
    return lcg_seed
def roll():
    rv = float(lcg_rand())
    r = rv * 6.0 / 2.147483648e+09
    return 1 + (int(r))
def round2(x):
    y = x * 100.0 + 0.5
    z = int(y)
    return (float(z)) / 100.0
def throw_dice(num_throws, num_dice):
    count_of_sum = []
    max_sum = num_dice * 6 + 1
    i = 0
    while i < max_sum:
        count_of_sum = _append(count_of_sum, 0)
        i = i + 1
    t = 0
    while t < num_throws:
        s = 0
        d = 0
        while d < num_dice:
            s = s + roll()
            d = d + 1
        count_of_sum[s] = count_of_sum[s] + 1
        t = t + 1
    probability = []
    i = num_dice
    while i < max_sum:
        p = (float(count_of_sum[i])) * 100.0 // (float(num_throws))
        probability = _append(probability, round2(p))
        i = i + 1
    return probability
def main():
    global lcg_seed
    lcg_seed = 1
    result = throw_dice(10000, 2)
    print(str(result))
main()
