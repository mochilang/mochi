# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 14:44 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    import builtins
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(float(builtins.round(v)))
        return builtins.format(v, ".15g")
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def pow_int(base, exp):
        result = 1
        i = 0
        while i < exp:
            result = result * base
            i = i + 1
        return result
    def prime_factors(n):
        if n <= 0:
            panic("Only positive integers have prime factors")
        num = n
        pf = []
        while num % 2 == 0:
            pf = _append(pf, 2)
            num = num // 2
        i = 3
        while i * i <= num:
            while num % i == 0:
                pf = _append(pf, i)
                num = num // i
            i = i + 2
        if num > 2:
            pf = _append(pf, num)
        return pf
    def number_of_divisors(n):
        if n <= 0:
            panic("Only positive numbers are accepted")
        num = n
        div = 1
        temp = 1
        while num % 2 == 0:
            temp = temp + 1
            num = num // 2
        div = div * temp
        i = 3
        while i * i <= num:
            temp = 1
            while num % i == 0:
                temp = temp + 1
                num = num // i
            div = div * temp
            i = i + 2
        if num > 1:
            div = div * 2
        return div
    def sum_of_divisors(n):
        if n <= 0:
            panic("Only positive numbers are accepted")
        num = n
        s = 1
        temp = 1
        while num % 2 == 0:
            temp = temp + 1
            num = num // 2
        if temp > 1:
            s = s * ((pow_int(2, temp) - 1) // (2 - 1))
        i = 3
        while i * i <= num:
            temp = 1
            while num % i == 0:
                temp = temp + 1
                num = num // i
            if temp > 1:
                s = s * ((pow_int(i, temp) - 1) / (i - 1))
            i = i + 2
        return s
    def contains(arr, x):
        idx = 0
        while idx < len(arr):
            if arr[idx] == x:
                return True
            idx = idx + 1
        return False
    def unique(arr):
        result = []
        idx = 0
        while idx < len(arr):
            v = arr[idx]
            if not contains(result, v):
                result = _append(result, v)
            idx = idx + 1
        return result
    def euler_phi(n):
        if n <= 0:
            panic("Only positive numbers are accepted")
        s = n
        factors = unique(prime_factors(n))
        idx = 0
        while idx < len(factors):
            x = factors[idx]
            s = (s // x) * (x - 1)
            idx = idx + 1
        return s
    print(_str(prime_factors(100)))
    print(_str(number_of_divisors(100)))
    print(_str(sum_of_divisors(100)))
    print(_str(euler_phi(100)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

