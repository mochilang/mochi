# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def hexagonal_numbers(length):
        if length <= 0:
            panic("Length must be a positive integer.")
        res = []
        n = 0
        while n < length:
            res = _append(res, n * (2 * n - 1))
            n = n + 1
        return res
    def test_hexagonal_numbers():
        expected5 = [0, 1, 6, 15, 28]
        result5 = hexagonal_numbers(5)
        if result5 != expected5:
            panic("hexagonal_numbers(5) failed")
        expected10 = [0, 1, 6, 15, 28, 45, 66, 91, 120, 153]
        result10 = hexagonal_numbers(10)
        if result10 != expected10:
            panic("hexagonal_numbers(10) failed")
    test_hexagonal_numbers()
    print(_str(hexagonal_numbers(5)))
    print(_str(hexagonal_numbers(10)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
