# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def is_geometric_series(series):
    if len(series) == 0:
        panic("Input list must be a non empty list")
    if len(series) == 1:
        return True
    if series[0] == 0.0:
        return False
    ratio = series[1] / series[0]
    i = 0
    while i < len(series) - 1:
        if series[i] == 0.0:
            return False
        if series[i + 1] / series[i] != ratio:
            return False
        i = i + 1
    return True
def geometric_mean(series):
    if len(series) == 0:
        panic("Input list must be a non empty list")
    product = 1.0
    i = 0
    while i < len(series):
        product = product * series[i]
        i = i + 1
    n = len(series)
    return nth_root(product, n)
def pow_float(base, exp):
    result = 1.0
    i = 0
    while i < exp:
        result = result * base
        i = i + 1
    return result
def nth_root(value, n):
    if value == 0.0:
        return 0.0
    low = 0.0
    high = value
    if value < 1.0:
        high = 1.0
    mid = (low + high) / 2.0
    i = 0
    while i < 40:
        mp = pow_float(mid, n)
        if mp > value:
            high = mid
        else:
            low = mid
        mid = (low + high) / 2.0
        i = i + 1
    return mid
def test_geometric():
    a = [2.0, 4.0, 8.0]
    if not is_geometric_series(a):
        panic("expected geometric series")
    b = [1.0, 2.0, 3.0]
    if is_geometric_series(b):
        panic("expected non geometric series")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_geometric()
        print(geometric_mean([2.0, 4.0, 8.0]))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
