# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def pow_string(base, exp):
        if exp >= 0:
            res = 1
            i = 0
            while i < exp:
                res = res * base
                i = i + 1
            return _str(res)
        e = -exp
        res = 1.0
        b = base * 1.0
        i = 0
        while i < e:
            res = res * b
            i = i + 1
        value = 1.0 / res
        return _str(value)
    def p_series(nth_term, power):
        series = []
        if nth_term <= 0:
            return series
        i = 1
        while i <= nth_term:
            if i == 1:
                series = _append(series, "1")
            else:
                series = _append(series, "1 / " + pow_string(i, power))
            i = i + 1
        return series
    print(p_series(5, 2))
    print(p_series(-5, 2))
    print(p_series(5, -2))
    print(p_series(0, 0))
    print(p_series(1, 1))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
