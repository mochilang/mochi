# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def is_harmonic_series(series):
        if len(series) == 0:
            panic("Input list must be a non empty list")
        if len(series) == 1:
            if series[0] == 0.0:
                panic("Input series cannot have 0 as an element")
            return True
        rec_series = []
        i = 0
        while i < len(series):
            val = series[i]
            if val == 0.0:
                panic("Input series cannot have 0 as an element")
            rec_series = _append(rec_series, 1.0 / val)
            i = i + 1
        common_diff = rec_series[1] - rec_series[0]
        idx = 2
        while idx < len(rec_series):
            if rec_series[idx] - rec_series[idx - 1] != common_diff:
                return False
            idx = idx + 1
        return True
    def harmonic_mean(series):
        if len(series) == 0:
            panic("Input list must be a non empty list")
        total = 0.0
        i = 0
        while i < len(series):
            total = total + 1.0 / series[i]
            i = i + 1
        return (float(len(series))) / total
    print(("True" if is_harmonic_series([1.0, 2.0 / 3.0, 1.0 / 2.0, 2.0 / 5.0, 1.0 / 3.0]) else "False"))
    print(("True" if is_harmonic_series([1.0, 2.0 / 3.0, 2.0 / 5.0, 1.0 / 3.0]) else "False"))
    print(harmonic_mean([1.0, 4.0, 4.0]))
    print(harmonic_mean([3.0, 6.0, 9.0, 12.0]))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
