# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def is_arithmetic_series(xs):
        if len(xs) == 0:
            panic("Input list must be a non empty list")
        if len(xs) == 1:
            return True
        diff = xs[1] - xs[0]
        i = 0
        while i < len(xs) - 1:
            if xs[i + 1] - xs[i] != diff:
                return False
            i = i + 1
        return True
    def arithmetic_mean(xs):
        if len(xs) == 0:
            panic("Input list must be a non empty list")
        total = 0.0
        i = 0
        while i < len(xs):
            total = total + xs[i]
            i = i + 1
        return total / (float(len(xs)))
    print(_str(is_arithmetic_series([2.0, 4.0, 6.0])))
    print(_str(is_arithmetic_series([3.0, 6.0, 12.0, 24.0])))
    print(_str(arithmetic_mean([2.0, 4.0, 6.0])))
    print(_str(arithmetic_mean([3.0, 6.0, 9.0, 12.0])))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
