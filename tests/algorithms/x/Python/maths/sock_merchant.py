# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def sock_merchant(colors):
    arr = []
    i = 0
    while i < len(colors):
        arr = _append(arr, colors[i])
        i = i + 1
    n = len(arr)
    a = 0
    while a < n:
        min_idx = a
        b = a + 1
        while b < n:
            if arr[b] < arr[min_idx]:
                min_idx = b
            b = b + 1
        temp = arr[a]
        arr[a] = arr[min_idx]
        arr[min_idx] = temp
        a = a + 1
    pairs = 0
    i = 0
    while i < n:
        count = 1
        while i + 1 < n and arr[i] == arr[i + 1]:
            count = count + 1
            i = i + 1
        pairs = pairs + (count // 2)
        i = i + 1
    return pairs
def test_sock_merchant():
    example1 = [10, 20, 20, 10, 10, 30, 50, 10, 20]
    if sock_merchant(example1) != 3:
        panic("example1 failed")
    example2 = [1, 1, 3, 3]
    if sock_merchant(example2) != 2:
        panic("example2 failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_sock_merchant()
        example1 = [10, 20, 20, 10, 10, 30, 50, 10, 20]
        print(_str(sock_merchant(example1)))
        example2 = [1, 1, 3, 3]
        print(_str(sock_merchant(example2)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
