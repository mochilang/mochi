# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 14:44 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    import builtins
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(float(builtins.round(v)))
        return builtins.format(v, ".15g")
    return builtins.str(v)

def sqrtApprox(x):
    if x <= 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def euclidean_distance(v1, v2):
    sum_ = 0.0
    i = 0
    while i < len(v1):
        diff = v1[i] - v2[i]
        sum_ = sum_ + diff * diff
        i = i + 1
    return sqrtApprox(sum_)
def euclidean_distance_no_np(v1, v2):
    return euclidean_distance(v1, v2)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(_str(euclidean_distance([0.0, 0.0], [2.0, 2.0])))
        print(_str(euclidean_distance([0.0, 0.0, 0.0], [2.0, 2.0, 2.0])))
        print(_str(euclidean_distance([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0])))
        print(_str(euclidean_distance_no_np([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0])))
        print(_str(euclidean_distance_no_np([0.0, 0.0], [2.0, 2.0])))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

