# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 16:09 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

PI = 3.141592653589793
seed = 1
def next_seed(x):
    return (x * 1103515245 + 12345) % 2147483648
def rand_unit():
    global seed
    seed = next_seed(seed)
    return (float(seed)) / 2.147483648e+09
@dataclass
class Point:
    x: float
    y: float

def is_in_unit_circle(p):
    return p.x * p.x + p.y * p.y <= 1.0
def random_unit_square():
    return Point(x=rand_unit(), y=rand_unit())
def estimate_pi(simulations):
    if simulations < 1:
        panic("At least one simulation is necessary to estimate PI.")
    inside = 0
    i = 0
    while i < simulations:
        p = random_unit_square()
        if is_in_unit_circle(p):
            inside = inside + 1
        i = i + 1
    return 4.0 * (float(inside)) / (float(simulations))
def abs_float(x):
    if x < 0.0:
        return -x
    return x
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        n = 10000
        my_pi = estimate_pi(n)
        error = abs_float(my_pi - PI)
        print("An estimate of PI is " + _str(my_pi) + " with an error of " + _str(error))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
