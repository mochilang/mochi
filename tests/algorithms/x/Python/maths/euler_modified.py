# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

def ceil_float(x):
    i = int(x)
    if x > (float(i)):
        return i + 1
    return i
def exp_approx(x):
    term = 1.0
    sum = 1.0
    n = 1
    while n < 20:
        term = term * x // (float(n))
        sum = sum + term
        n = n + 1
    return sum
def euler_modified(ode_func, y0, x0, step, x_end):
    n = ceil_float((x_end - x0) // step)
    y = [y0]
    x = x0
    k = 0
    while k < n:
        y_predict = y[k] + step * ode_func(x, y[k])
        slope1 = ode_func(x, y[k])
        slope2 = ode_func(x + step, y_predict)
        y_next = y[k] + (step / 2.0) * (slope1 + slope2)
        y = _append(y, y_next)
        x = x + step
        k = k + 1
    return y
def f1(x, y):
    return -2.0 * x * y * y
def f2(x, y):
    return -2.0 * y + (x * x * x) * exp_approx(-2.0 * x)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        y1 = euler_modified(f1, 1.0, 0.0, 0.2, 1.0)
        print(y1[len(y1) - 1])
        y2 = euler_modified(f2, 1.0, 0.0, 0.1, 0.3)
        print(y2[len(y2) - 1])
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
