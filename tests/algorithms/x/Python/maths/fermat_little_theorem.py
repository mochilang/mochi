# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def binary_exponentiation(a, n, mod):
        if n == 0:
            return 1
        if n % 2 == 1:
            return (binary_exponentiation(a, n - 1, mod) * a) % mod
        b = binary_exponentiation(a, n // 2, mod)
        return (b * b) % mod
    def naive_exponent_mod(a, n, mod):
        result = 1
        i = 0
        while i < n:
            result = (result * a) % mod
            i = i + 1
        return result
    def print_bool(b):
        if b:
            print(("True" if True else "False"))
        else:
            print(("True" if False else "False"))
    p = 701
    a = 1000000000
    b = 10
    left = (a // b) % p
    right_fast = (a * binary_exponentiation(b, p - 2, p)) % p
    print_bool(left == right_fast)
    right_naive = (a * naive_exponent_mod(b, p - 2, p)) % p
    print_bool(left == right_naive)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
