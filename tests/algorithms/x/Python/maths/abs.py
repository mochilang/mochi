# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 11:48 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def abs_val(num):
    if num < 0.0:
        return -num
    return num
def abs_min(x):
    if len(x) == 0:
        panic("abs_min() arg is an empty sequence")
    j = x[0]
    idx = 0
    while idx < len(x):
        i = x[idx]
        if abs_val(float(i)) < abs_val(float(j)):
            j = i
        idx = idx + 1
    return j
def abs_max(x):
    if len(x) == 0:
        panic("abs_max() arg is an empty sequence")
    j = x[0]
    idx = 0
    while idx < len(x):
        i = x[idx]
        if abs_val(float(i)) > abs_val(float(j)):
            j = i
        idx = idx + 1
    return j
def abs_max_sort(x):
    if len(x) == 0:
        panic("abs_max_sort() arg is an empty sequence")
    arr = []
    i = 0
    while i < len(x):
        arr = _append(arr, x[i])
        i = i + 1
    n = len(arr)
    a = 0
    while a < n:
        b = 0
        while b < n - a - 1:
            if abs_val(float(arr[b])) > abs_val(float(arr[b + 1])):
                temp = arr[b]
                arr[b] = arr[b + 1]
                arr[b + 1] = temp
            b = b + 1
        a = a + 1
    return arr[n - 1]
def test_abs_val():
    if abs_val(0.0) != 0.0:
        panic("abs_val(0) failed")
    if abs_val(34.0) != 34.0:
        panic("abs_val(34) failed")
    if abs_val(-1e+11) != 1e+11:
        panic("abs_val large failed")
    a = [-3, -1, 2, -11]
    if abs_max(a) != (-11):
        panic("abs_max failed")
    if abs_max_sort(a) != (-11):
        panic("abs_max_sort failed")
    if abs_min(a) != (-1):
        panic("abs_min failed")
def main():
    test_abs_val()
    print(abs_val(-34.0))
main()

