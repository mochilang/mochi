# Code generated by Mochi transpiler.
# Version 0.10.67, generated on 2025-08-16 19:42 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def binary_exp_recursive(base, exponent):
        if exponent < 0:
            panic("exponent must be non-negative")
        if exponent == 0:
            return 1.0
        if exponent % 2 == 1:
            return binary_exp_recursive(base, exponent - 1) * base
        half = binary_exp_recursive(base, exponent // 2)
        return half * half
    def binary_exp_iterative(base, exponent):
        if exponent < 0:
            panic("exponent must be non-negative")
        result = 1.0
        b = base
        e = exponent
        while e > 0:
            if e % 2 == 1:
                result = result * b
            b = b * b
            e = e // 2
        return result
    def binary_exp_mod_recursive(base, exponent, modulus):
        if exponent < 0:
            panic("exponent must be non-negative")
        if modulus <= 0:
            panic("modulus must be positive")
        if exponent == 0:
            return 1 % modulus
        if exponent % 2 == 1:
            return (binary_exp_mod_recursive(base, exponent - 1, modulus) * (base % modulus)) % modulus
        r = binary_exp_mod_recursive(base, exponent // 2, modulus)
        return (r * r) % modulus
    def binary_exp_mod_iterative(base, exponent, modulus):
        if exponent < 0:
            panic("exponent must be non-negative")
        if modulus <= 0:
            panic("modulus must be positive")
        result = 1 % modulus
        b = base % modulus
        e = exponent
        while e > 0:
            if e % 2 == 1:
                result = (result * b) % modulus
            b = (b * b) % modulus
            e = e // 2
        return result
    print(binary_exp_recursive(3.0, 5))
    print(binary_exp_iterative(1.5, 4))
    print(binary_exp_mod_recursive(3, 4, 5))
    print(binary_exp_mod_iterative(11, 13, 7))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

