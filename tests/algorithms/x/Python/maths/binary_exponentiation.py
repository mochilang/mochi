# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 11:48 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)

def binary_exp_recursive(base, exponent):
    if exponent < 0:
        panic("exponent must be non-negative")
    if exponent == 0:
        return 1.0
    if exponent % 2 == 1:
        return binary_exp_recursive(base, exponent - 1) * base
    half = binary_exp_recursive(base, exponent // 2)
    return half * half
def binary_exp_iterative(base, exponent):
    if exponent < 0:
        panic("exponent must be non-negative")
    result = 1.0
    b = base
    e = exponent
    while e > 0:
        if e % 2 == 1:
            result = result * b
        b = b * b
        e = e // 2
    return result
def binary_exp_mod_recursive(base, exponent, modulus):
    if exponent < 0:
        panic("exponent must be non-negative")
    if modulus <= 0:
        panic("modulus must be positive")
    if exponent == 0:
        return 1 % modulus
    if exponent % 2 == 1:
        return (binary_exp_mod_recursive(base, exponent - 1, modulus) * (base % modulus)) % modulus
    r = binary_exp_mod_recursive(base, exponent // 2, modulus)
    return (r * r) % modulus
def binary_exp_mod_iterative(base, exponent, modulus):
    if exponent < 0:
        panic("exponent must be non-negative")
    if modulus <= 0:
        panic("modulus must be positive")
    result = 1 % modulus
    b = base % modulus
    e = exponent
    while e > 0:
        if e % 2 == 1:
            result = (result * b) % modulus
        b = (b * b) % modulus
        e = e // 2
    return result
print(binary_exp_recursive(3.0, 5))
print(binary_exp_iterative(1.5, 4))
print(binary_exp_mod_recursive(3, 4, 5))
print(binary_exp_mod_iterative(11, 13, 7))

