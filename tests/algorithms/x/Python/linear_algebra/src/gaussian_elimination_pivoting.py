# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def panic(msg):
    print(msg)
def abs_float(x):
    if x < 0.0:
        return -x
    return x
def copy_matrix(src):
    res = []
    i = 0
    while i < len(src):
        row_src = src[i]
        row = []
        j = 0
        while j < len(row_src):
            row = _append(row, row_src[j])
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return res
def solve_linear_system(matrix):
    ab = copy_matrix(matrix)
    num_rows = len(ab)
    num_cols = len(ab[0]) - 1
    if num_rows != num_cols:
        panic("Matrix is not square")
        return []
    column_num = 0
    while column_num < num_rows:
        i = column_num
        while i < num_cols:
            if abs_float(ab[i][column_num]) > abs_float(ab[column_num][column_num]):
                temp = ab[column_num]
                ab[column_num] = ab[i]
                ab[i] = temp
            i = i + 1
        if abs_float(ab[column_num][column_num]) < 1e-08:
            panic("Matrix is singular")
            return []
        if column_num != 0:
            i = column_num
            while i < num_rows:
                factor = ab[i][column_num - 1] // ab[column_num - 1][column_num - 1]
                j = 0
                while j < len(ab[i]):
                    ab[i][j] = ab[i][j] - factor * ab[column_num - 1][j]
                    j = j + 1
                i = i + 1
        column_num = column_num + 1
    x_lst = []
    t = 0
    while t < num_rows:
        x_lst = _append(x_lst, 0.0)
        t = t + 1
    column_num = num_rows - 1
    while column_num >= 0:
        x = ab[column_num][num_cols] // ab[column_num][column_num]
        x_lst[column_num] = x
        i = column_num - 1
        while i >= 0:
            ab[i][num_cols] = ab[i][num_cols] - ab[i][column_num] * x
            i = i - 1
        column_num = column_num - 1
    return x_lst
example_matrix = [[5.0, -5.0, -3.0, 4.0, -11.0], [1.0, -4.0, 6.0, -4.0, -10.0], [-2.0, -5.0, 4.0, -5.0, -12.0], [-3.0, -3.0, 5.0, -5.0, 8.0]]
print("Matrix:")
print(str(example_matrix))
solution = solve_linear_system(example_matrix)
print(str(solution))
