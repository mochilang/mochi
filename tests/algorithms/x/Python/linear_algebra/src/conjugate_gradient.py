# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

def zeros(n):
    res = []
    i = 0
    while i < n:
        res = _append(res, 0.0)
        i = i + 1
    return res
def dot(a, b):
    sum = 0.0
    i = 0
    while i < len(a):
        sum = sum + a[i] * b[i]
        i = i + 1
    return sum
def mat_vec_mul(m, v):
    res = []
    i = 0
    while i < len(m):
        s = 0.0
        j = 0
        while j < len(m[i]):
            s = s + m[i][j] * v[j]
            j = j + 1
        res = _append(res, s)
        i = i + 1
    return res
def vec_add(a, b):
    res = []
    i = 0
    while i < len(a):
        res = _append(res, a[i] + b[i])
        i = i + 1
    return res
def vec_sub(a, b):
    res = []
    i = 0
    while i < len(a):
        res = _append(res, a[i] - b[i])
        i = i + 1
    return res
def scalar_mul(s, v):
    res = []
    i = 0
    while i < len(v):
        res = _append(res, s * v[i])
        i = i + 1
    return res
def sqrtApprox(x):
    if x <= 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def norm(v):
    return sqrtApprox(dot(v, v))
def conjugate_gradient(A, b, max_iterations, tol):
    n = len(b)
    x = zeros(n)
    r = vec_sub(b, mat_vec_mul(A, x))
    p = r
    rs_old = dot(r, r)
    i = 0
    while i < max_iterations:
        Ap = mat_vec_mul(A, p)
        alpha = rs_old / dot(p, Ap)
        x = vec_add(x, scalar_mul(alpha, p))
        r = vec_sub(r, scalar_mul(alpha, Ap))
        rs_new = dot(r, r)
        if sqrtApprox(rs_new) < tol:
            break
        beta = rs_new // rs_old
        p = vec_add(r, scalar_mul(beta, p))
        rs_old = rs_new
        i = i + 1
    return x
A = [[8.73256573, -5.02034289, -2.68709226], [-5.02034289, 3.78188322, 0.91980451], [-2.68709226, 0.91980451, 1.94746467]]
b = [-5.80872761, 3.23807431, 1.95381422]
x = conjugate_gradient(A, b, 1000, 1e-08)
print(str(x[0]))
print(str(x[1]))
print(str(x[2]))
