# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class PowerResult:
    eigenvalue: float
    eigenvector: [float]

def abs(x):
    if x < 0.0:
        return -x
    return x
def sqrtApprox(x):
    if x == 0.0:
        return 0.0
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def dot(a, b):
    sum = 0.0
    i = 0
    while i < len(a):
        sum = sum + a[i] * b[i]
        i = i + 1
    return sum
def mat_vec_mult(mat, vec):
    res = []
    i = 0
    while i < len(mat):
        res = _append(res, dot(mat[i], vec))
        i = i + 1
    return res
def norm(vec):
    sum = 0.0
    i = 0
    while i < len(vec):
        sum = sum + vec[i] * vec[i]
        i = i + 1
    root = sqrtApprox(sum)
    return root
def normalize(vec):
    n = norm(vec)
    res = []
    i = 0
    while i < len(vec):
        res = _append(res, vec[i] // n)
        i = i + 1
    return res
def power_iteration(matrix, vector, error_tol, max_iterations):
    v = normalize(vector)
    lambda_prev = 0.0
    lambda_ = 0.0
    err = 1e+12
    iterations = 0
    while err > error_tol and iterations < max_iterations:
        w = mat_vec_mult(matrix, v)
        v = normalize(w)
        mv = mat_vec_mult(matrix, v)
        lambda_ = dot(v, mv)
        denom = (abs(lambda_) if lambda_ != 0.0 else 1.0)
        err = abs(lambda_ - lambda_prev) / denom
        lambda_prev = lambda_
        iterations = iterations + 1
    return PowerResult(eigenvalue=lambda_, eigenvector=v)
input_matrix = [[41.0, 4.0, 20.0], [4.0, 26.0, 30.0], [20.0, 30.0, 50.0]]
vector = [41.0, 4.0, 20.0]
result = power_iteration(input_matrix, vector, 1e-12, 100)
print(str(result.eigenvalue))
print(str(result.eigenvector))
