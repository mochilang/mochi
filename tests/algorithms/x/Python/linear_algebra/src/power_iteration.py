# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 16:13 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class PowerResult:
        eigenvalue: float
        eigenvector: [float]
    def abs_(x):
        if x < 0.0:
            return -x
        return x
    def sqrtApprox(x):
        if x == 0.0:
            return 0.0
        guess = x / 2.0
        i = 0
        while i < 20:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def dot(a, b):
        sum_ = 0.0
        i = 0
        while i < len(a):
            sum_ = sum_ + a[i] * b[i]
            i = i + 1
        return sum_
    def mat_vec_mult(mat, vec):
        res = []
        i = 0
        while i < len(mat):
            res = _append(res, dot(mat[i], vec))
            i = i + 1
        return res
    def norm(vec):
        sum_ = 0.0
        i = 0
        while i < len(vec):
            sum_ = sum_ + vec[i] * vec[i]
            i = i + 1
        root = sqrtApprox(sum_)
        return root
    def normalize(vec):
        n = norm(vec)
        res = []
        i = 0
        while i < len(vec):
            res = _append(res, vec[i] / n)
            i = i + 1
        return res
    def power_iteration(matrix, vector, error_tol, max_iterations):
        v = normalize(vector)
        lambda_prev = 0.0
        lambda_ = 0.0
        err = 1e+12
        iterations = 0
        while err > error_tol and iterations < max_iterations:
            w = mat_vec_mult(matrix, v)
            v = normalize(w)
            mv = mat_vec_mult(matrix, v)
            lambda_ = dot(v, mv)
            denom = (abs_(lambda_) if lambda_ != 0.0 else 1.0)
            err = abs_(lambda_ - lambda_prev) / denom
            lambda_prev = lambda_
            iterations = iterations + 1
        return PowerResult(eigenvalue=lambda_, eigenvector=v)
    input_matrix = [[41.0, 4.0, 20.0], [4.0, 26.0, 30.0], [20.0, 30.0, 50.0]]
    vector = [41.0, 4.0, 20.0]
    result = power_iteration(input_matrix, vector, 1e-12, 100)
    print(_str(result.eigenvalue))
    print(_str(result.eigenvector))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

