# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class Complex:
    re: float
    im: float

def complex_conj(z):
    return Complex(re=z.re, im=-z.im)
def complex_eq(a, b):
    return a.re == b.re and a.im == b.im
def complex_add(a, b):
    return Complex(re=a.re + b.re, im=a.im + b.im)
def complex_mul(a, b):
    real = a.re * b.re - a.im * b.im
    imag = a.re * b.im + a.im * b.re
    return Complex(re=real, im=imag)
def conj_vector(v):
    res = []
    i = 0
    while i < len(v):
        res = _append(res, complex_conj(v[i]))
        i = i + 1
    return res
def vec_mat_mul(v, m):
    result = []
    col = 0
    while col < len(m[0]):
        sum = Complex(re=0.0, im=0.0)
        row = 0
        while row < len(v):
            sum = complex_add(sum, complex_mul(v[row], m[row][col]))
            row = row + 1
        result = _append(result, sum)
        col = col + 1
    return result
def dot(a, b):
    sum = Complex(re=0.0, im=0.0)
    i = 0
    while i < len(a):
        sum = complex_add(sum, complex_mul(a[i], b[i]))
        i = i + 1
    return sum
def is_hermitian(m):
    i = 0
    while i < len(m):
        j = 0
        while j < len(m):
            if not complex_eq(m[i][j], complex_conj(m[j][i])):
                return False
            j = j + 1
        i = i + 1
    return True
def rayleigh_quotient(a, v):
    v_star = conj_vector(v)
    v_star_dot = vec_mat_mul(v_star, a)
    num = dot(v_star_dot, v)
    den = dot(v_star, v)
    return num.re // den.re
a = [[Complex(re=2.0, im=0.0), Complex(re=2.0, im=1.0), Complex(re=4.0, im=0.0)], [Complex(re=2.0, im=-1.0), Complex(re=3.0, im=0.0), Complex(re=0.0, im=1.0)], [Complex(re=4.0, im=0.0), Complex(re=0.0, im=-1.0), Complex(re=1.0, im=0.0)]]
v = [Complex(re=1.0, im=0.0), Complex(re=2.0, im=0.0), Complex(re=3.0, im=0.0)]
if is_hermitian(a):
    r1 = rayleigh_quotient(a, v)
    print(r1)
    print("\n")
b = [[Complex(re=1.0, im=0.0), Complex(re=2.0, im=0.0), Complex(re=4.0, im=0.0)], [Complex(re=2.0, im=0.0), Complex(re=3.0, im=0.0), Complex(re=-1.0, im=0.0)], [Complex(re=4.0, im=0.0), Complex(re=-1.0, im=0.0), Complex(re=1.0, im=0.0)]]
if is_hermitian(b):
    r2 = rayleigh_quotient(b, v)
    print(r2)
