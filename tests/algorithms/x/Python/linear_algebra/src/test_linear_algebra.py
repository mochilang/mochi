# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def int_to_string(n):
    if n == 0:
        return "0"
    num = n
    neg = False
    if num < 0:
        neg = True
        num = -num
    res = ""
    while num > 0:
        digit = num % 10
        ch = "0123456789"[digit:digit + 1]
        res = ch + res
        num = num // 10
    if neg:
        res = "-" + res
    return res
def float_to_string(x, dec):
    neg = False
    num = x
    if num < 0.0:
        neg = True
        num = -num
    int_part = int(num)
    res = int_to_string(int_part)
    if dec > 0:
        res = res + "."
        frac = num - (float(int_part))
        i = 0
        while i < dec:
            frac = frac * 10.0
            digit = int(frac)
            res = res + "0123456789"[digit:digit + 1]
            frac = frac - (float(digit))
            i = i + 1
    if neg:
        res = "-" + res
    return res
def vector_component(v, i):
    return v[i]
def vector_str_int(v):
    s = "("
    i = 0
    while i < len(v):
        s = s + int_to_string(v[i])
        if i + 1 < len(v):
            s = s + ","
        i = i + 1
    s = s + ")"
    return s
def vector_str_float(v, dec):
    s = "("
    i = 0
    while i < len(v):
        s = s + float_to_string(v[i], dec)
        if i + 1 < len(v):
            s = s + ","
        i = i + 1
    s = s + ")"
    return s
def vector_add(a, b):
    res = []
    i = 0
    while i < len(a):
        res = _append(res, a[i] + b[i])
        i = i + 1
    return res
def vector_sub(a, b):
    res = []
    i = 0
    while i < len(a):
        res = _append(res, a[i] - b[i])
        i = i + 1
    return res
def vector_scalar_mul(v, s):
    res = []
    i = 0
    while i < len(v):
        res = _append(res, (float(v[i])) * s)
        i = i + 1
    return res
def vector_dot(a, b):
    sum = 0
    i = 0
    while i < len(a):
        sum = sum + a[i] * b[i]
        i = i + 1
    return sum
def sqrt_newton(x):
    if x == 0.0:
        return 0.0
    low = 0.0
    high = x
    if x < 1.0:
        high = 1.0
    mid = 0.0
    i = 0
    while i < 40:
        mid = (low + high) / 2.0
        if mid * mid > x:
            high = mid
        else:
            low = mid
        i = i + 1
    return mid
def euclidean_length(v):
    sum = 0.0
    i = 0
    while i < len(v):
        val = float(v[i])
        sum = sum + val * val
        i = i + 1
    return sqrt_newton(sum)
def zero_vector(n):
    v = []
    i = 0
    while i < n:
        v = _append(v, 0)
        i = i + 1
    return v
def unit_basis_vector(n, idx):
    v = zero_vector(n)
    v[idx] = 1
    return v
def axpy(a, x, y):
    res = []
    i = 0
    while i < len(x):
        res = _append(res, a * x[i] + y[i])
        i = i + 1
    return res
def copy_vector(x):
    res = []
    i = 0
    while i < len(x):
        res = _append(res, x[i])
        i = i + 1
    return res
def change_component(v, idx, val):
    v[idx] = val
def matrix_str(m):
    s = ""
    i = 0
    while i < len(m):
        s = s + "|"
        j = 0
        while j < len(m[0]):
            s = s + int_to_string(m[i][j])
            if j + 1 < len(m[0]):
                s = s + ","
            j = j + 1
        s = s + "|\n"
        i = i + 1
    return s
def submatrix(m, row, col):
    res = []
    i = 0
    while i < len(m):
        if i != row:
            r = []
            j = 0
            while j < len(m[0]):
                if j != col:
                    r = _append(r, m[i][j])
                j = j + 1
            res = _append(res, r)
        i = i + 1
    return res
def determinant(m):
    n = len(m)
    if n == 1:
        return m[0][0]
    if n == 2:
        return m[0][0] * m[1][1] - m[0][1] * m[1][0]
    det = 0
    c = 0
    while c < n:
        sub = submatrix(m, 0, c)
        sign = 1
        if c % 2 == 1:
            sign = -1
        det = det + sign * m[0][c] * determinant(sub)
        c = c + 1
    return det
def matrix_minor(m, row, col):
    return determinant(submatrix(m, row, col))
def matrix_cofactor(m, row, col):
    sign = 1
    if (row + col) % 2 == 1:
        sign = -1
    return sign * matrix_minor(m, row, col)
def matrix_mul_vector(m, v):
    res = []
    i = 0
    while i < len(m):
        sum = 0
        j = 0
        while j < len(m[0]):
            sum = sum + m[i][j] * v[j]
            j = j + 1
        res = _append(res, sum)
        i = i + 1
    return res
def matrix_mul_scalar(m, s):
    res = []
    i = 0
    while i < len(m):
        row = []
        j = 0
        while j < len(m[0]):
            row = _append(row, m[i][j] * s)
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return res
def matrix_change_component(m, i, j, val):
    m[i][j] = val
def matrix_component(m, i, j):
    return m[i][j]
def matrix_add(a, b):
    res = []
    i = 0
    while i < len(a):
        row = []
        j = 0
        while j < len(a[0]):
            row = _append(row, a[i][j] + b[i][j])
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return res
def matrix_sub(a, b):
    res = []
    i = 0
    while i < len(a):
        row = []
        j = 0
        while j < len(a[0]):
            row = _append(row, a[i][j] - b[i][j])
            j = j + 1
        res = _append(res, row)
        i = i + 1
    return res
def square_zero_matrix(n):
    m = []
    i = 0
    while i < n:
        m = _append(m, zero_vector(n))
        i = i + 1
    return m
def assert_int(name, actual, expected):
    if actual == expected:
        print(name + " ok")
    else:
        print(name + " fail " + int_to_string(actual) + " != " + int_to_string(expected))
def assert_str(name, actual, expected):
    if actual == expected:
        print(name + " ok")
    else:
        print(name + " fail")
        print(actual)
        print(expected)
def assert_float(name, actual, expected, eps):
    diff = actual - expected
    if diff < 0.0:
        diff = -diff
    if diff <= eps:
        print(name + " ok")
    else:
        print(name + " fail")
vx = [1, 2, 3]
assert_int("component0", vector_component(vx, 0), 1)
assert_int("component2", vector_component(vx, 2), 3)
vs = [0, 0, 0, 0, 0, 1]
assert_str("str_vector", vector_str_int(vs), "(0,0,0,0,0,1)")
vsize = [1, 2, 3, 4]
assert_int("size", len(vsize), 4)
va = [1, 2, 3]
vb = [1, 1, 1]
vsum = vector_add(va, vb)
assert_int("add0", vector_component(vsum, 0), 2)
assert_int("add1", vector_component(vsum, 1), 3)
assert_int("add2", vector_component(vsum, 2), 4)
vsub = vector_sub(va, vb)
assert_int("sub0", vector_component(vsub, 0), 0)
assert_int("sub1", vector_component(vsub, 1), 1)
assert_int("sub2", vector_component(vsub, 2), 2)
vmul = vector_scalar_mul(va, 3.0)
assert_str("scalar_mul", vector_str_float(vmul, 1), "(3.0,6.0,9.0)")
assert_int("dot_product", vector_dot([2, -1, 4], [1, -2, -1]), 0)
zvec = zero_vector(10)
zstr = vector_str_int(zvec)
zcount = 0
zi = 0
while zi < len(zstr):
    if zstr[zi:zi + 1] == "0":
        zcount = zcount + 1
    zi = zi + 1
assert_int("zero_vector", zcount, 10)
assert_str("unit_basis", vector_str_int(unit_basis_vector(3, 1)), "(0,1,0)")
assert_str("axpy", vector_str_int(axpy(2, [1, 2, 3], [1, 0, 1])), "(3,4,7)")
vcopy = copy_vector([1, 0, 0, 0, 0, 0])
assert_str("copy", vector_str_int(vcopy), "(1,0,0,0,0,0)")
vchange = [1, 0, 0]
change_component(vchange, 0, 0)
change_component(vchange, 1, 1)
assert_str("change_component", vector_str_int(vchange), "(0,1,0)")
ma = [[1, 2, 3], [2, 4, 5], [6, 7, 8]]
assert_str("matrix_str", matrix_str(ma), "|1,2,3|\n|2,4,5|\n|6,7,8|\n")
assert_int("determinant", determinant(ma), -5)
mb = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
mv = matrix_mul_vector(mb, [1, 2, 3])
assert_str("matrix_vec_mul", vector_str_int(mv), "(14,32,50)")
msc = matrix_mul_scalar(mb, 2)
assert_str("matrix_scalar_mul", matrix_str(msc), "|2,4,6|\n|8,10,12|\n|14,16,18|\n")
mc = [[1, 2, 3], [2, 4, 5], [6, 7, 8]]
matrix_change_component(mc, 0, 2, 5)
assert_str("change_component_matrix", matrix_str(mc), "|1,2,5|\n|2,4,5|\n|6,7,8|\n")
assert_int("matrix_component", matrix_component(mc, 2, 1), 7)
madd = matrix_add([[1, 2, 3], [2, 4, 5], [6, 7, 8]], [[1, 2, 7], [2, 4, 5], [6, 7, 10]])
assert_str("matrix_add", matrix_str(madd), "|2,4,10|\n|4,8,10|\n|12,14,18|\n")
msub = matrix_sub([[1, 2, 3], [2, 4, 5], [6, 7, 8]], [[1, 2, 7], [2, 4, 5], [6, 7, 10]])
assert_str("matrix_sub", matrix_str(msub), "|0,0,-4|\n|0,0,0|\n|0,0,-2|\n")
mzero = square_zero_matrix(5)
assert_str("square_zero_matrix", matrix_str(mzero), "|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n")
