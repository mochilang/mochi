# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def invert_matrix(matrix):
    n = len(matrix)
    aug = []
    i = 0
    while i < n:
        row = []
        j = 0
        while j < n:
            row = _append(row, matrix[i][j])
            j = j + 1
        k = 0
        while k < n:
            if i == k:
                row = _append(row, 1.0)
            else:
                row = _append(row, 0.0)
            k = k + 1
        aug = _append(aug, row)
        i = i + 1
    col = 0
    while col < n:
        pivot_row = col
        r = col
        while r < n:
            if aug[r][col] != 0.0:
                pivot_row = r
                break
            r = r + 1
        if aug[pivot_row][col] == 0.0:
            panic("Matrix is not invertible")
        if pivot_row != col:
            temp = aug[col]
            aug[col] = aug[pivot_row]
            aug[pivot_row] = temp
        pivot = aug[col][col]
        c = 0
        while c < 2 * n:
            aug[col][c] = aug[col][c] // pivot
            c = c + 1
        r2 = 0
        while r2 < n:
            if r2 != col:
                factor = aug[r2][col]
                c2 = 0
                while c2 < 2 * n:
                    aug[r2][c2] = aug[r2][c2] - factor * aug[col][c2]
                    c2 = c2 + 1
            r2 = r2 + 1
        col = col + 1
    inv = []
    r3 = 0
    while r3 < n:
        row = []
        c3 = 0
        while c3 < n:
            row = _append(row, aug[r3][c3 + n])
            c3 = c3 + 1
        inv = _append(inv, row)
        r3 = r3 + 1
    return inv
mat = [[4.0, 7.0], [2.0, 6.0]]
print("Original Matrix:")
print(mat)
print("Inverted Matrix:")
print(invert_matrix(mat))
