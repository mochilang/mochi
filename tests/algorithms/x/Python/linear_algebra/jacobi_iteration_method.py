# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

def absf(x):
    return (-x if x < 0.0 else x)
def strictly_diagonally_dominant(matrix):
    n = len(matrix)
    i = 0
    while i < n:
        sum = 0.0
        j = 0
        while j < n:
            if i != j:
                sum = sum + absf(matrix[i][j])
            j = j + 1
        if absf(matrix[i][i]) <= sum:
            panic("Coefficient matrix is not strictly diagonally dominant")
        i = i + 1
    return True
def jacobi_iteration_method(coefficient, constant, init_val, iterations):
    n = len(coefficient)
    if n == 0:
        panic("Coefficient matrix cannot be empty")
    if len(constant) != n:
        panic("Constant vector length must equal number of rows in coefficient matrix")
    if len(init_val) != n:
        panic("Initial values count must match matrix size")
    r = 0
    while r < n:
        if len(coefficient[r]) != n:
            panic("Coefficient matrix must be square")
        r = r + 1
    if iterations <= 0:
        panic("Iterations must be at least 1")
    strictly_diagonally_dominant(coefficient)
    x = init_val
    k = 0
    while k < iterations:
        new_x = []
        i = 0
        while i < n:
            sum = 0.0
            j = 0
            while j < n:
                if i != j:
                    sum = sum + coefficient[i][j] * x[j]
                j = j + 1
            value = (constant[i] - sum) / coefficient[i][i]
            new_x = _append(new_x, value)
            i = i + 1
        x = new_x
        k = k + 1
    return x
coefficient = [[4.0, 1.0, 1.0], [1.0, 5.0, 2.0], [1.0, 2.0, 4.0]]
constant = [2.0, -6.0, -4.0]
init_val = [0.5, -0.5, -0.5]
iterations = 3
result = jacobi_iteration_method(coefficient, constant, init_val, iterations)
print(result)
