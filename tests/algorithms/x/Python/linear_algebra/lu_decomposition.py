# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class LU:
    lower: [[float]]
    upper: [[float]]

def lu_decomposition(mat):
    n = len(mat)
    if n == 0:
        return LU(lower=[], upper=[])
    m = len(mat[0])
    if n != m:
        panic("Matrix must be square")
    lower = []
    upper = []
    i = 0
    while i < n:
        lrow = []
        urow = []
        j = 0
        while j < n:
            lrow = _append(lrow, 0.0)
            urow = _append(urow, 0.0)
            j = j + 1
        lower = _append(lower, lrow)
        upper = _append(upper, urow)
        i = i + 1
    i = 0
    while i < n:
        j1 = 0
        while j1 < i:
            total = 0.0
            k = 0
            while k < i:
                total = total + lower[i][k] * upper[k][j1]
                k = k + 1
            if upper[j1][j1] == 0.0:
                panic("No LU decomposition exists")
            lower[i][j1] = (mat[i][j1] - total) // upper[j1][j1]
            j1 = j1 + 1
        lower[i][i] = 1.0
        j2 = i
        while j2 < n:
            total2 = 0.0
            k2 = 0
            while k2 < i:
                total2 = total2 + lower[i][k2] * upper[k2][j2]
                k2 = k2 + 1
            upper[i][j2] = mat[i][j2] - total2
            j2 = j2 + 1
        i = i + 1
    return LU(lower=lower, upper=upper)
def print_matrix(mat):
    i = 0
    while i < len(mat):
        line = ""
        j = 0
        while j < len(mat[i]):
            line = line + str(mat[i][j])
            if j + 1 < len(mat[i]):
                line = line + " "
            j = j + 1
        print(line)
        i = i + 1
matrix = [[2.0, -2.0, 1.0], [0.0, 1.0, 2.0], [5.0, 3.0, 1.0]]
result = lu_decomposition(matrix)
print_matrix(result.lower)
print_matrix(result.upper)
