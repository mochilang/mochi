# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def calculate_waiting_times(burst_times):
    quantum = 2
    rem = []
    i = 0
    while i < len(burst_times):
        rem = _append(rem, burst_times[i])
        i = i + 1
    waiting = []
    i = 0
    while i < len(burst_times):
        waiting = _append(waiting, 0)
        i = i + 1
    t = 0
    while True:
        done = True
        j = 0
        while j < len(burst_times):
            if rem[j] > 0:
                done = False
                if rem[j] > quantum:
                    t = t + quantum
                    rem[j] = rem[j] - quantum
                else:
                    t = t + rem[j]
                    waiting[j] = t - burst_times[j]
                    rem[j] = 0
            j = j + 1
        if done:
            return waiting
    return waiting
def calculate_turn_around_times(burst_times, waiting_times):
    result = []
    i = 0
    while i < len(burst_times):
        result = _append(result, burst_times[i] + waiting_times[i])
        i = i + 1
    return result
def mean(values):
    total = 0
    i = 0
    while i < len(values):
        total = total + values[i]
        i = i + 1
    return (float(total)) / (float(len(values)))
def format_float_5(x):
    scaled = int(x * 100000.0 + 0.5)
    int_part = scaled // 100000
    frac_part = scaled % 100000
    frac_str = _str(frac_part)
    while len(frac_str) < 5:
        frac_str = "0" + frac_str
    return _str(int_part) + "." + frac_str
def main():
    burst_times = [3, 5, 7]
    waiting_times = calculate_waiting_times(burst_times)
    turn_around_times = calculate_turn_around_times(burst_times, waiting_times)
    print("Process ID \tBurst Time \tWaiting Time \tTurnaround Time")
    i = 0
    while i < len(burst_times):
        line = "  " + _str(i + 1) + "\t\t  " + _str(burst_times[i]) + "\t\t  " + _str(waiting_times[i]) + "\t\t  " + _str(turn_around_times[i])
        print(line)
        i = i + 1
    print("")
    print("Average waiting time = " + format_float_5(mean(waiting_times)))
    print("Average turn around time = " + format_float_5(mean(turn_around_times)))
main()

