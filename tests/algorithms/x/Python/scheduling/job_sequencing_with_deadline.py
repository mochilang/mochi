# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Job:
    id: int
    deadline: int
    profit: int

def sort_jobs_by_profit(jobs):
    js = jobs
    i = 0
    while i < len(js):
        j = 0
        while j < len(js) - i - 1:
            a = js[j]
            b = js[j + 1]
            if a.profit < b.profit:
                js[j] = b
                js[j + 1] = a
            j = j + 1
        i = i + 1
    return js
def max_deadline(jobs):
    max_d = 0
    i = 0
    while i < len(jobs):
        job = jobs[i]
        d = job.deadline
        if d > max_d:
            max_d = d
        i = i + 1
    return max_d
def job_sequencing_with_deadlines(jobs):
    js = sort_jobs_by_profit(jobs)
    max_d = max_deadline(js)
    time_slots = []
    t = 0
    while t < max_d:
        time_slots = _append(time_slots, 0 - 1)
        t = t + 1
    count = 0
    max_profit = 0
    i = 0
    while i < len(js):
        job = js[i]
        j = job.deadline - 1
        while j >= 0:
            if time_slots[j] == 0 - 1:
                time_slots[j] = job.id
                count = count + 1
                max_profit = max_profit + job.profit
                break
            j = j - 1
        i = i + 1
    result = []
    result = _append(result, count)
    result = _append(result, max_profit)
    return result
jobs1 = []
jobs1 = _append(jobs1, Job(id=1, deadline=4, profit=20))
jobs1 = _append(jobs1, Job(id=2, deadline=1, profit=10))
jobs1 = _append(jobs1, Job(id=3, deadline=1, profit=40))
jobs1 = _append(jobs1, Job(id=4, deadline=1, profit=30))
print(_str(job_sequencing_with_deadlines(jobs1)))
jobs2 = []
jobs2 = _append(jobs2, Job(id=1, deadline=2, profit=100))
jobs2 = _append(jobs2, Job(id=2, deadline=1, profit=19))
jobs2 = _append(jobs2, Job(id=3, deadline=2, profit=27))
jobs2 = _append(jobs2, Job(id=4, deadline=1, profit=25))
jobs2 = _append(jobs2, Job(id=5, deadline=1, profit=15))
print(_str(job_sequencing_with_deadlines(jobs2)))

