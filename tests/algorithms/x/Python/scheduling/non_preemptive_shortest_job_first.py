# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def calculate_waitingtime(arrival_time, burst_time, no_of_processes):
    waiting_time = []
    remaining_time = []
    i = 0
    while i < no_of_processes:
        waiting_time = _append(waiting_time, 0)
        remaining_time = _append(remaining_time, burst_time[i])
        i = i + 1
    completed = 0
    total_time = 0
    while completed != no_of_processes:
        ready_process = []
        target_process = -1
        j = 0
        while j < no_of_processes:
            if arrival_time[j] <= total_time and remaining_time[j] > 0:
                ready_process = _append(ready_process, j)
            j = j + 1
        if len(ready_process) > 0:
            target_process = ready_process[0]
            k = 0
            while k < len(ready_process):
                idx = ready_process[k]
                if remaining_time[idx] < remaining_time[target_process]:
                    target_process = idx
                k = k + 1
            total_time = total_time + burst_time[target_process]
            completed = completed + 1
            remaining_time[target_process] = 0
            waiting_time = _set_index(waiting_time, target_process, total_time - arrival_time[target_process] - burst_time[target_process])
        else:
            total_time = total_time + 1
    return waiting_time
def calculate_turnaroundtime(burst_time, no_of_processes, waiting_time):
    turn_around_time = []
    i = 0
    while i < no_of_processes:
        turn_around_time = _append(turn_around_time, burst_time[i] + waiting_time[i])
        i = i + 1
    return turn_around_time
def average(values):
    total = 0
    i = 0
    while i < len(values):
        total = total + values[i]
        i = i + 1
    return (float(total)) / (float(len(values)))
print("[TEST CASE 01]")
no_of_processes = 4
burst_time = [2, 5, 3, 7]
arrival_time = [0, 0, 0, 0]
waiting_time = calculate_waitingtime(arrival_time, burst_time, no_of_processes)
turn_around_time = calculate_turnaroundtime(burst_time, no_of_processes, waiting_time)
print("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time")
i = 0
while i < no_of_processes:
    pid = i + 1
    print(_str(pid) + "\t" + _str(burst_time[i]) + "\t\t\t" + _str(arrival_time[i]) + "\t\t\t\t" + _str(waiting_time[i]) + "\t\t\t\t" + _str(turn_around_time[i]))
    i = i + 1
avg_wait = average(waiting_time)
avg_turn = average(turn_around_time)
print("\nAverage waiting time = " + _str(avg_wait))
print("Average turnaround time = " + _str(avg_turn))

