# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def floyd(n):
    result = ""
    i = 0
    while i < n:
        j = 0
        while j < n - i - 1:
            result = result + " "
            j = j + 1
        k = 0
        while k < i + 1:
            result = result + "* "
            k = k + 1
        result = result + "\n"
        i = i + 1
    return result
def reverse_floyd(n):
    result = ""
    i = n
    while i > 0:
        j = i
        while j > 0:
            result = result + "* "
            j = j - 1
        result = result + "\n"
        k = n - i + 1
        while k > 0:
            result = result + " "
            k = k - 1
        i = i - 1
    return result
def pretty_print(n):
    if n <= 0:
        return "       ...       ....        nothing printing :("
    upper_half = floyd(n)
    lower_half = reverse_floyd(n)
    return upper_half + lower_half
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(pretty_print(3))
        print(pretty_print(0))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

