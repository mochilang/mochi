# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)

DOOMSDAY_LEAP = [4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]
DOOMSDAY_NOT_LEAP = [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]
WEEK_DAY_NAMES = {0: "Sunday", 1: "Monday", 2: "Tuesday", 3: "Wednesday", 4: "Thursday", 5: "Friday", 6: "Saturday"}
def get_week_day(year, month, day):
    if year < 100:
        panic("year should be in YYYY format")
    if month < 1 or month > 12:
        panic("month should be between 1 to 12")
    if day < 1 or day > 31:
        panic("day should be between 1 to 31")
    century = year // 100
    century_anchor = (5 * (century % 4) + 2) % 7
    centurian = year % 100
    centurian_m = centurian % 12
    dooms_day = ((centurian // 12) + centurian_m + (centurian_m // 4) + century_anchor) % 7
    day_anchor = (DOOMSDAY_NOT_LEAP[month - 1] if year % 4 != 0 or (centurian == 0 and year % 400 != 0) else DOOMSDAY_LEAP[month - 1])
    week_day = (dooms_day + day - day_anchor) % 7
    if week_day < 0:
        week_day = week_day + 7
    return WEEK_DAY_NAMES.get(week_day, "")
print(get_week_day(2020, 10, 24))
print(get_week_day(2017, 10, 24))
print(get_week_day(2019, 5, 3))
print(get_week_day(1970, 9, 16))
print(get_week_day(1870, 8, 13))
print(get_week_day(2040, 3, 14))
