# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class State:
    claim: [int]
    alloc: [[int]]
    max: [[int]]

def processes_resource_summation(alloc):
    resources = len(alloc[0])
    sums = []
    i = 0
    while i < resources:
        total = 0
        j = 0
        while j < len(alloc):
            total = total + alloc[j][i]
            j = j + 1
        sums = _append(sums, total)
        i = i + 1
    return sums
def available_resources(claim, alloc_sum):
    avail = []
    i = 0
    while i < len(claim):
        avail = _append(avail, claim[i] - alloc_sum[i])
        i = i + 1
    return avail
def need(max, alloc):
    needs = []
    i = 0
    while i < len(max):
        row = []
        j = 0
        while j < len(max[0]):
            row = _append(row, max[i][j] - alloc[i][j])
            j = j + 1
        needs = _append(needs, row)
        i = i + 1
    return needs
def pretty_print(claim, alloc, max):
    print("         Allocated Resource Table")
    i = 0
    while i < len(alloc):
        row = alloc[i]
        line = "P" + _str(i + 1) + "       "
        j = 0
        while j < len(row):
            line = line + _str(row[j])
            if j < len(row) - 1:
                line = line + "        "
            j = j + 1
        print(line)
        print("")
        i = i + 1
    print("         System Resource Table")
    i = 0
    while i < len(max):
        row = max[i]
        line = "P" + _str(i + 1) + "       "
        j = 0
        while j < len(row):
            line = line + _str(row[j])
            if j < len(row) - 1:
                line = line + "        "
            j = j + 1
        print(line)
        print("")
        i = i + 1
    usage = ""
    i = 0
    while i < len(claim):
        if i > 0:
            usage = usage + " "
        usage = usage + _str(claim[i])
        i = i + 1
    alloc_sum = processes_resource_summation(alloc)
    avail = available_resources(claim, alloc_sum)
    avail_str = ""
    i = 0
    while i < len(avail):
        if i > 0:
            avail_str = avail_str + " "
        avail_str = avail_str + _str(avail[i])
        i = i + 1
    print("Current Usage by Active Processes: " + usage)
    print("Initial Available Resources:       " + avail_str)
def bankers_algorithm(claim, alloc, max):
    need_list = need(max, alloc)
    alloc_sum = processes_resource_summation(alloc)
    avail = available_resources(claim, alloc_sum)
    print("__________________________________________________")
    print("")
    finished = []
    i = 0
    while i < len(need_list):
        finished = _append(finished, False)
        i = i + 1
    remaining = len(need_list)
    while remaining > 0:
        safe = False
        p = 0
        while p < len(need_list):
            if not finished[p]:
                exec = True
                r = 0
                while r < len(avail):
                    if need_list[p][r] > avail[r]:
                        exec = False
                        break
                    r = r + 1
                if exec:
                    safe = True
                    print("Process " + _str(p + 1) + " is executing.")
                    r = 0
                    while r < len(avail):
                        avail[r] = avail[r] + alloc[p][r]
                        r = r + 1
                    avail_str = ""
                    r = 0
                    while r < len(avail):
                        if r > 0:
                            avail_str = avail_str + " "
                        avail_str = avail_str + _str(avail[r])
                        r = r + 1
                    print("Updated available resource stack for processes: " + avail_str)
                    print("The process is in a safe state.")
                    print("")
                    finished[p] = True
                    remaining = remaining - 1
            p = p + 1
        if not safe:
            print("System in unsafe state. Aborting...")
            print("")
            break
claim_vector = [8, 5, 9, 7]
allocated_resources_table = [[2, 0, 1, 1], [0, 1, 2, 1], [4, 0, 0, 3], [0, 2, 1, 0], [1, 0, 3, 0]]
maximum_claim_table = [[3, 2, 1, 4], [0, 2, 5, 2], [5, 1, 0, 5], [1, 5, 3, 0], [3, 0, 3, 3]]
pretty_print(claim_vector, allocated_resources_table, maximum_claim_table)
bankers_algorithm(claim_vector, allocated_resources_table, maximum_claim_table)
