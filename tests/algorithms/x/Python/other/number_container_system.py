# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class NumberContainer:
    numbermap: Dict[int, [int]]
    indexmap: Dict[int, int]

def remove_at(xs, idx):
    res = []
    i = 0
    while i < len(xs):
        if i != idx:
            res = _append(res, xs[i])
        i = i + 1
    return res
def insert_at(xs, idx, val):
    res = []
    i = 0
    while i < len(xs):
        if i == idx:
            res = _append(res, val)
        res = _append(res, xs[i])
        i = i + 1
    if idx == len(xs):
        res = _append(res, val)
    return res
def binary_search_delete(array, item):
    low = 0
    high = len(array) - 1
    arr = array
    while low <= high:
        mid = (low + high) / 2
        if arr[mid] == item:
            arr = remove_at(arr, mid)
            return arr
        else:
            if arr[mid] < item:
                low = mid + 1
            else:
                high = mid - 1
    print("ValueError: Either the item is not in the array or the array was unsorted")
    return arr
def binary_search_insert(array, index):
    low = 0
    high = len(array) - 1
    arr = array
    while low <= high:
        mid = (low + high) / 2
        if arr[mid] == index:
            arr = insert_at(arr, mid + 1, index)
            return arr
        else:
            if arr[mid] < index:
                low = mid + 1
            else:
                high = mid - 1
    arr = insert_at(arr, low, index)
    return arr
def change(cont, idx, num):
    numbermap = cont.numbermap
    indexmap = cont.indexmap
    if idx in indexmap:
        old = indexmap[idx]
        indexes = numbermap[old]
        if len(indexes) == 1:
            numbermap[old] = []
        else:
            numbermap[old] = binary_search_delete(indexes, idx)
    indexmap[idx] = num
    if num in numbermap:
        numbermap[num] = binary_search_insert(numbermap[num], idx)
    else:
        numbermap[num] = [idx]
    return NumberContainer(numbermap=numbermap, indexmap=indexmap)
def find(cont, num):
    numbermap = cont.numbermap
    if num in numbermap:
        arr = numbermap[num]
        if len(arr) > 0:
            return arr[0]
    return -1
nm = {}
im = {}
cont = NumberContainer(numbermap=nm, indexmap=im)
print(find(cont, 10))
cont = change(cont, 0, 10)
print(find(cont, 10))
cont = change(cont, 0, 20)
print(find(cont, 10))
print(find(cont, 20))
