# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]

OPEN_TO_CLOSED = {"(": ")", "[": "]", "{": "}"}
def slice_without_last(xs):
    res = []
    i = 0
    while i < len(xs) - 1:
        res = _append(res, xs[i])
        i = i + 1
    return res
def is_balanced(s):
    stack = []
    i = 0
    while i < len(s):
        symbol = s[i:i + 1]
        if symbol in OPEN_TO_CLOSED:
            stack = _append(stack, symbol)
        else:
            if symbol == ")" or symbol == "]" or symbol == "}":
                if len(stack) == 0:
                    return False
                top = stack[len(stack) - 1]
                if OPEN_TO_CLOSED.get(top, "") != symbol:
                    return False
                stack = slice_without_last(stack)
        i = i + 1
    return len(stack) == 0
def main():
    print(("True" if is_balanced("") else "False"))
    print(("True" if is_balanced("()") else "False"))
    print(("True" if is_balanced("[]") else "False"))
    print(("True" if is_balanced("{}") else "False"))
    print(("True" if is_balanced("()[]{}") else "False"))
    print(("True" if is_balanced("(())") else "False"))
    print(("True" if is_balanced("[[") else "False"))
    print(("True" if is_balanced("([{}])") else "False"))
    print(("True" if is_balanced("(()[)]") else "False"))
    print(("True" if is_balanced("([)]") else "False"))
    print(("True" if is_balanced("[[()]]") else "False"))
    print(("True" if is_balanced("(()(()))") else "False"))
    print(("True" if is_balanced("]") else "False"))
    print(("True" if is_balanced("Life is a bowl of cherries.") else "False"))
    print(("True" if is_balanced("Life is a bowl of che{}ies.") else "False"))
    print(("True" if is_balanced("Life is a bowl of che}{ies.") else "False"))
main()
