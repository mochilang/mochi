# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]

OPEN_TO_CLOSED = {"(": ")", "[": "]", "{": "}"}
def slice_without_last(xs):
    res = []
    i = 0
    while i < len(xs) - 1:
        res = _append(res, xs[i])
        i = i + 1
    return res
def is_balanced(s):
    stack = []
    i = 0
    while i < len(s):
        symbol = s[i:i + 1]
        if symbol in OPEN_TO_CLOSED:
            stack = _append(stack, symbol)
        else:
            if symbol == ")" or symbol == "]" or symbol == "}":
                if len(stack) == 0:
                    return False
                top = stack[len(stack) - 1]
                if OPEN_TO_CLOSED.get(top, "") != symbol:
                    return False
                stack = slice_without_last(stack)
        i = i + 1
    return len(stack) == 0
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(("True" if is_balanced("") else "False"))
        print(("True" if is_balanced("()") else "False"))
        print(("True" if is_balanced("[]") else "False"))
        print(("True" if is_balanced("{}") else "False"))
        print(("True" if is_balanced("()[]{}") else "False"))
        print(("True" if is_balanced("(())") else "False"))
        print(("True" if is_balanced("[[") else "False"))
        print(("True" if is_balanced("([{}])") else "False"))
        print(("True" if is_balanced("(()[)]") else "False"))
        print(("True" if is_balanced("([)]") else "False"))
        print(("True" if is_balanced("[[()]]") else "False"))
        print(("True" if is_balanced("(()(()))") else "False"))
        print(("True" if is_balanced("]") else "False"))
        print(("True" if is_balanced("Life is a bowl of cherries.") else "False"))
        print(("True" if is_balanced("Life is a bowl of che{}ies.") else "False"))
        print(("True" if is_balanced("Life is a bowl of che}{ies.") else "False"))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

