# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

def subarray(xs, start, end):
    result = []
    k = start
    while k < end:
        result = _append(result, xs[k])
        k = k + 1
    return result
def merge(left_half, right_half):
    result = []
    i = 0
    j = 0
    while i < len(left_half) and j < len(right_half):
        if left_half[i] < right_half[j]:
            result = _append(result, left_half[i])
            i = i + 1
        else:
            result = _append(result, right_half[j])
            j = j + 1
    while i < len(left_half):
        result = _append(result, left_half[i])
        i = i + 1
    while j < len(right_half):
        result = _append(result, right_half[j])
        j = j + 1
    return result
def merge_sort(array):
    if len(array) <= 1:
        return array
    middle = len(array) // 2
    left_half = subarray(array, 0, middle)
    right_half = subarray(array, middle, len(array))
    sorted_left = merge_sort(left_half)
    sorted_right = merge_sort(right_half)
    return merge(sorted_left, sorted_right)
def h_index(citations):
    idx = 0
    while idx < len(citations):
        if citations[idx] < 0:
            panic("The citations should be a list of non negative integers.")
        idx = idx + 1
    sorted = merge_sort(citations)
    n = len(sorted)
    i = 0
    while i < n:
        if sorted[n - 1 - i] <= i:
            return i
        i = i + 1
    return n
print(_str(h_index([3, 0, 6, 1, 5])))
print(_str(h_index([1, 3, 1])))
print(_str(h_index([1, 2, 3])))
