# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def index_of(xs, x):
    i = 0
    while i < len(xs):
        if xs[i] == x:
            return i
        i = i + 1
    return 0 - 1
def majority_vote(votes, votes_needed_to_win):
    if votes_needed_to_win < 2:
        return []
    candidates = []
    counts = []
    i = 0
    while i < len(votes):
        v = votes[i]
        idx = index_of(candidates, v)
        if idx != 0 - 1:
            counts[idx] = counts[idx] + 1
        else:
            if len(candidates) < votes_needed_to_win - 1:
                candidates = _append(candidates, v)
                counts = _append(counts, 1)
            else:
                j = 0
                while j < len(counts):
                    counts[j] = counts[j] - 1
                    j = j + 1
                new_candidates = []
                new_counts = []
                j = 0
                while j < len(candidates):
                    if counts[j] > 0:
                        new_candidates = _append(new_candidates, candidates[j])
                        new_counts = _append(new_counts, counts[j])
                    j = j + 1
                candidates = new_candidates
                counts = new_counts
        i = i + 1
    final_counts = []
    j = 0
    while j < len(candidates):
        final_counts = _append(final_counts, 0)
        j = j + 1
    i = 0
    while i < len(votes):
        v = votes[i]
        idx = index_of(candidates, v)
        if idx != 0 - 1:
            final_counts[idx] = final_counts[idx] + 1
        i = i + 1
    result = []
    j = 0
    while j < len(candidates):
        if final_counts[j] * votes_needed_to_win > len(votes):
            result = _append(result, candidates[j])
        j = j + 1
    return result
def main():
    votes = [1, 2, 2, 3, 1, 3, 2]
    print(_str(majority_vote(votes, 3)))
    print(_str(majority_vote(votes, 2)))
    print(_str(majority_vote(votes, 4)))
main()
