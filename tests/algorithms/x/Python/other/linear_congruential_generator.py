# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

@dataclass
class LCG:
    multiplier: int
    increment: int
    modulo: int
    seed: int

def make_lcg(multiplier, increment, modulo, seed):
    return LCG(multiplier=multiplier, increment=increment, modulo=modulo, seed=seed)
def next_number(lcg):
    lcg.seed = (lcg.multiplier * lcg.seed + lcg.increment) % lcg.modulo
    return lcg.seed
lcg = make_lcg(1664525, 1013904223, 4294967296, _now())
i = 0
while i < 5:
    print(_str(next_number(lcg)))
    i = i + 1
