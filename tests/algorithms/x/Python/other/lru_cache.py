# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 10:04 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Node:
    key: int
    value: int
    prev: int
    next: int

@dataclass
class DoubleLinkedList:
    nodes: [Node]
    head: int
    tail: int

def new_list():
    nodes = []
    head = Node(key=0, value=0, prev=0 - 1, next=1)
    tail = Node(key=0, value=0, prev=0, next=0 - 1)
    nodes = _append(nodes, head)
    nodes = _append(nodes, tail)
    return DoubleLinkedList(nodes=nodes, head=0, tail=1)
def dll_add(lst, idx):
    nodes = lst.nodes
    tail_idx = lst.tail
    tail_node = nodes[tail_idx]
    prev_idx = tail_node.prev
    node = nodes[idx]
    node.prev = prev_idx
    node.next = tail_idx
    nodes[idx] = node
    prev_node = nodes[prev_idx]
    prev_node.next = idx
    nodes[prev_idx] = prev_node
    tail_node.prev = idx
    nodes[tail_idx] = tail_node
    lst.nodes = nodes
    return lst
def dll_remove(lst, idx):
    nodes = lst.nodes
    node = nodes[idx]
    prev_idx = node.prev
    next_idx = node.next
    if prev_idx == 0 - 1 or next_idx == 0 - 1:
        return lst
    prev_node = nodes[prev_idx]
    prev_node.next = next_idx
    nodes[prev_idx] = prev_node
    next_node = nodes[next_idx]
    next_node.prev = prev_idx
    nodes[next_idx] = next_node
    node.prev = 0 - 1
    node.next = 0 - 1
    nodes[idx] = node
    lst.nodes = nodes
    return lst
@dataclass
class LRUCache:
    list: DoubleLinkedList
    capacity: int
    num_keys: int
    hits: int
    misses: int
    cache: Dict[str, int]

@dataclass
class GetResult:
    cache: LRUCache
    value: int
    ok: bool

def new_cache(cap):
    empty_map = {}
    return LRUCache(list=new_list(), capacity=cap, num_keys=0, hits=0, misses=0, cache=empty_map)
def lru_get(c, key):
    cache = c
    key_str = _str(key)
    if key_str in cache.cache:
        idx = cache.cache[key_str]
        if idx != 0 - 1:
            cache.hits = cache.hits + 1
            node = cache.list.nodes[idx]
            value = node.value
            cache.list = dll_remove(cache.list, idx)
            cache.list = dll_add(cache.list, idx)
            return GetResult(cache=cache, value=value, ok=True)
    cache.misses = cache.misses + 1
    return GetResult(cache=cache, value=0, ok=False)
def lru_put(c, key, value):
    cache = c
    key_str = _str(key)
    if not (key_str in cache.cache):
        if cache.num_keys >= cache.capacity:
            head_node = cache.list.nodes[cache.list.head]
            first_idx = head_node.next
            first_node = cache.list.nodes[first_idx]
            old_key = first_node.key
            cache.list = dll_remove(cache.list, first_idx)
            mdel = cache.cache
            mdel[_str(old_key)] = 0 - 1
            cache.cache = mdel
            cache.num_keys = cache.num_keys - 1
        nodes = cache.list.nodes
        new_node = Node(key=key, value=value, prev=0 - 1, next=0 - 1)
        nodes = _append(nodes, new_node)
        idx = len(nodes) - 1
        cache.list.nodes = nodes
        cache.list = dll_add(cache.list, idx)
        m = cache.cache
        m[key_str] = idx
        cache.cache = m
        cache.num_keys = cache.num_keys + 1
    else:
        m = cache.cache
        idx = m[key_str]
        nodes = cache.list.nodes
        node = nodes[idx]
        node.value = value
        nodes[idx] = node
        cache.list.nodes = nodes
        cache.list = dll_remove(cache.list, idx)
        cache.list = dll_add(cache.list, idx)
        cache.cache = m
    return cache
def cache_info(cache):
    return "CacheInfo(hits=" + _str(cache.hits) + ", misses=" + _str(cache.misses) + ", capacity=" + _str(cache.capacity) + ", current size=" + _str(cache.num_keys) + ")"
def print_result(res):
    if res.ok:
        print(_str(res.value))
    else:
        print("None")
def main():
    cache = new_cache(2)
    cache = lru_put(cache, 1, 1)
    cache = lru_put(cache, 2, 2)
    r1 = lru_get(cache, 1)
    cache = r1.cache
    print_result(r1)
    cache = lru_put(cache, 3, 3)
    r2 = lru_get(cache, 2)
    cache = r2.cache
    print_result(r2)
    cache = lru_put(cache, 4, 4)
    r3 = lru_get(cache, 1)
    cache = r3.cache
    print_result(r3)
    r4 = lru_get(cache, 3)
    cache = r4.cache
    print_result(r4)
    r5 = lru_get(cache, 4)
    cache = r5.cache
    print_result(r5)
    print(cache_info(cache))
main()

