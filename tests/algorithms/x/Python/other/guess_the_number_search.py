# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def get_avg(number_1, number_2):
        return (number_1 + number_2) // 2
    def guess_the_number(lower, higher, to_guess):
        if lower > higher:
            panic("argument value for lower and higher must be(lower > higher)")
        if not (lower < to_guess and to_guess < higher):
            panic("guess value must be within the range of lower and higher value")
        def answer(number):
            if number > to_guess:
                return "high"
            else:
                if number < to_guess:
                    return "low"
                else:
                    return "same"
        print("started...")
        last_lowest = lower
        last_highest = higher
        last_numbers = []
        while True:
            number = get_avg(last_lowest, last_highest)
            last_numbers = _append(last_numbers, number)
            resp = answer(number)
            if resp == "low":
                last_lowest = number
            else:
                if resp == "high":
                    last_highest = number
                else:
                    break
        print("guess the number : " + _str(last_numbers[len(last_numbers) - 1]))
        print("details : " + _str(last_numbers))
        return last_numbers
    guess_the_number(10, 1000, 17)
    guess_the_number(-10000, 10000, 7)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

