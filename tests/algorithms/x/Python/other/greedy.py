# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Thing:
    name: str
    value: float
    weight: float

def get_value(t):
    return t.value
def get_weight(t):
    return t.weight
def get_name(t):
    return t.name
def value_weight(t):
    return t.value / t.weight
def build_menu(names, values, weights):
    menu = []
    i = 0
    while i < len(values) and i < len(names) and i < len(weights):
        menu = _append(menu, Thing(name=names[i], value=values[i], weight=weights[i]))
        i = i + 1
    return menu
def sort_desc(items, key_func):
    arr = []
    i = 0
    while i < len(items):
        arr = _append(arr, items[i])
        i = i + 1
    j = 1
    while j < len(arr):
        key_item = arr[j]
        key_val = key_func(key_item)
        k = j - 1
        while k >= 0 and key_func(arr[k]) < key_val:
            arr[k + 1] = arr[k]
            k = k - 1
        arr[k + 1] = key_item
        j = j + 1
    return arr
@dataclass
class GreedyResult:
    items: [Thing]
    total_value: float

def greedy(items, max_cost, key_func):
    items_copy = sort_desc(items, key_func)
    result = []
    total_value = 0.0
    total_cost = 0.0
    i = 0
    while i < len(items_copy):
        it = items_copy[i]
        w = get_weight(it)
        if total_cost + w <= max_cost:
            result = _append(result, it)
            total_cost = total_cost + w
            total_value = total_value + get_value(it)
        i = i + 1
    return GreedyResult(items=result, total_value=total_value)
def thing_to_string(t):
    return "Thing(" + t.name + ", " + _str(t.value) + ", " + _str(t.weight) + ")"
def list_to_string(ts):
    s = "["
    i = 0
    while i < len(ts):
        s = s + thing_to_string(ts[i])
        if i < len(ts) - 1:
            s = s + ", "
        i = i + 1
    s = s + "]"
    return s
food = ["Burger", "Pizza", "Coca Cola", "Rice", "Sambhar", "Chicken", "Fries", "Milk"]
value = [80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0]
weight = [40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0]
foods = build_menu(food, value, weight)
print(list_to_string(foods))
res = greedy(foods, 500.0, get_value)
print(list_to_string(res.items))
print(_str(res.total_value))
