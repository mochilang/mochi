# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Int:
        value: int
    @dataclass
    class Str:
        value: str
    def from_int(x):
        return Int(value=x)
    def from_string(s):
        return Str(value=s)
    def item_to_string(it):
        return (_str(it.value) if isinstance(it, Int) else (it.value if isinstance(it, Str) else None))
    def alternative_list_arrange(first, second):
        len1 = len(first)
        len2 = len(second)
        abs_len = (len1 if len1 > len2 else len2)
        result = []
        i = 0
        while i < abs_len:
            if i < len1:
                result = _append(result, first[i])
            if i < len2:
                result = _append(result, second[i])
            i = i + 1
        return result
    def list_to_string(xs):
        s = "["
        i = 0
        while i < len(xs):
            s = s + item_to_string(xs[i])
            if i < len(xs) - 1:
                s = s + ", "
            i = i + 1
        s = s + "]"
        return s
    example1 = alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], [from_string("A"), from_string("B"), from_string("C")])
    print(list_to_string(example1))
    example2 = alternative_list_arrange([from_string("A"), from_string("B"), from_string("C")], [from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)])
    print(list_to_string(example2))
    example3 = alternative_list_arrange([from_string("X"), from_string("Y"), from_string("Z")], [from_int(9), from_int(8), from_int(7), from_int(6)])
    print(list_to_string(example3))
    example4 = alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], [])
    print(list_to_string(example4))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

