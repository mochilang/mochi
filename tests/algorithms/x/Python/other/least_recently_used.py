# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

@dataclass
class LRUCache:
    max_capacity: int
    store: [string]

def new_cache(n):
    if n < 0:
        panic("n should be an integer greater than 0.")
    cap = (2147483647 if n == 0 else n)
    return LRUCache(max_capacity=cap, store=[])
def remove_element(xs, x):
    res = []
    removed = False
    i = 0
    while i < len(xs):
        v = xs[i]
        if removed == False and v == x:
            removed = True
        else:
            res = res + [v]
        i = i + 1
    return res
def refer(cache, x):
    store = cache.store
    exists = False
    i = 0
    while i < len(store):
        if store[i] == x:
            exists = True
        i = i + 1
    if exists:
        store = remove_element(store, x)
    else:
        if len(store) == cache.max_capacity:
            new_store = []
            j = 0
            while j < len(store) - 1:
                new_store = new_store + [store[j]]
                j = j + 1
            store = new_store
    store = [x] + store
    return LRUCache(max_capacity=cache.max_capacity, store=store)
def display(cache):
    i = 0
    while i < len(cache.store):
        print(cache.store[i])
        i = i + 1
def repr_item(s):
    all_digits = True
    i = 0
    while i < len(s):
        ch = s[i]
        if ch < "0" or ch > "9":
            all_digits = False
        i = i + 1
    if all_digits:
        return s
    return "'" + s + "'"
def cache_repr(cache):
    res = "LRUCache(" + _str(cache.max_capacity) + ") => ["
    i = 0
    while i < len(cache.store):
        res = res + repr_item(cache.store[i])
        if i < len(cache.store) - 1:
            res = res + ", "
        i = i + 1
    res = res + "]"
    return res
lru = new_cache(4)
lru = refer(lru, "A")
lru = refer(lru, "2")
lru = refer(lru, "3")
lru = refer(lru, "A")
lru = refer(lru, "4")
lru = refer(lru, "5")
r = cache_repr(lru)
print(r)
if r != "LRUCache(4) => [5, 4, 'A', 3]":
    panic("Assertion error")
