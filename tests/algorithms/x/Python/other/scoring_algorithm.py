# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def get_data(source_data):
    data_lists = []
    i = 0
    while i < len(source_data):
        row = source_data[i]
        j = 0
        while j < len(row):
            if len(data_lists) < j + 1:
                empty = []
                data_lists = _append(data_lists, empty)
            data_lists[j] = _append(data_lists[j], row[j])
            j = j + 1
        i = i + 1
    return data_lists
def calculate_each_score(data_lists, weights):
    score_lists = []
    i = 0
    while i < len(data_lists):
        dlist = data_lists[i]
        weight = weights[i]
        mind = dlist[0]
        maxd = dlist[0]
        j = 1
        while j < len(dlist):
            val = dlist[j]
            if val < mind:
                mind = val
            if val > maxd:
                maxd = val
            j = j + 1
        score = []
        j = 0
        if weight == 0:
            while j < len(dlist):
                item = dlist[j]
                if maxd - mind == 0.0:
                    score = _append(score, 1.0)
                else:
                    score = _append(score, 1.0 - ((item - mind) / (maxd - mind)))
                j = j + 1
        else:
            while j < len(dlist):
                item = dlist[j]
                if maxd - mind == 0.0:
                    score = _append(score, 0.0)
                else:
                    score = _append(score, (item - mind) / (maxd - mind))
                j = j + 1
        score_lists = _append(score_lists, score)
        i = i + 1
    return score_lists
def generate_final_scores(score_lists):
    count = len(score_lists[0])
    final_scores = []
    i = 0
    while i < count:
        final_scores = _append(final_scores, 0.0)
        i = i + 1
    i = 0
    while i < len(score_lists):
        slist = score_lists[i]
        j = 0
        while j < len(slist):
            final_scores[j] = final_scores[j] + slist[j]
            j = j + 1
        i = i + 1
    return final_scores
def procentual_proximity(source_data, weights):
    data_lists = get_data(source_data)
    score_lists = calculate_each_score(data_lists, weights)
    final_scores = generate_final_scores(score_lists)
    i = 0
    while i < len(final_scores):
        source_data[i] = _append(source_data[i], final_scores[i])
        i = i + 1
    return source_data
vehicles = []
vehicles = _append(vehicles, [20.0, 60.0, 2012.0])
vehicles = _append(vehicles, [23.0, 90.0, 2015.0])
vehicles = _append(vehicles, [22.0, 50.0, 2011.0])
weights = [0, 0, 1]
result = procentual_proximity(vehicles, weights)
print(_str(result))
