# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def get_data(source_data):
        data_lists = []
        i = 0
        while i < len(source_data):
            row = source_data[i]
            j = 0
            while j < len(row):
                if len(data_lists) < j + 1:
                    empty = []
                    data_lists = _append(data_lists, empty)
                data_lists[j] = _append(data_lists[j], row[j])
                j = j + 1
            i = i + 1
        return data_lists
    def calculate_each_score(data_lists, weights):
        score_lists = []
        i = 0
        while i < len(data_lists):
            dlist = data_lists[i]
            weight = weights[i]
            mind = dlist[0]
            maxd = dlist[0]
            j = 1
            while j < len(dlist):
                val = dlist[j]
                if val < mind:
                    mind = val
                if val > maxd:
                    maxd = val
                j = j + 1
            score = []
            j = 0
            if weight == 0:
                while j < len(dlist):
                    item = dlist[j]
                    if maxd - mind == 0.0:
                        score = _append(score, 1.0)
                    else:
                        score = _append(score, 1.0 - ((item - mind) // (maxd - mind)))
                    j = j + 1
            else:
                while j < len(dlist):
                    item = dlist[j]
                    if maxd - mind == 0.0:
                        score = _append(score, 0.0)
                    else:
                        score = _append(score, (item - mind) // (maxd - mind))
                    j = j + 1
            score_lists = _append(score_lists, score)
            i = i + 1
        return score_lists
    def generate_final_scores(score_lists):
        count = len(score_lists[0])
        final_scores = []
        i = 0
        while i < count:
            final_scores = _append(final_scores, 0.0)
            i = i + 1
        i = 0
        while i < len(score_lists):
            slist = score_lists[i]
            j = 0
            while j < len(slist):
                final_scores[j] = final_scores[j] + slist[j]
                j = j + 1
            i = i + 1
        return final_scores
    def procentual_proximity(source_data, weights):
        data_lists = get_data(source_data)
        score_lists = calculate_each_score(data_lists, weights)
        final_scores = generate_final_scores(score_lists)
        i = 0
        while i < len(final_scores):
            source_data[i] = _append(source_data[i], final_scores[i])
            i = i + 1
        return source_data
    vehicles = []
    vehicles = _append(vehicles, [20.0, 60.0, 2012.0])
    vehicles = _append(vehicles, [23.0, 90.0, 2015.0])
    vehicles = _append(vehicles, [22.0, 50.0, 2011.0])
    weights = [0, 0, 1]
    result = procentual_proximity(vehicles, weights)
    print(_str(result))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

