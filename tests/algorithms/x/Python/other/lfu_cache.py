# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Entry:
    key: int
    val: int
    freq: int
    order: int

@dataclass
class LFUCache:
    entries: [Entry]
    capacity: int
    hits: int
    miss: int
    tick: int

@dataclass
class GetResult:
    cache: LFUCache
    value: int
    ok: bool

def lfu_new(cap):
    return LFUCache(entries=[], capacity=cap, hits=0, miss=0, tick=0)
def find_entry(entries, key):
    i = 0
    while i < len(entries):
        e = entries[i]
        if e.key == key:
            return i
        i = i + 1
    return 0 - 1
def lfu_get(cache, key):
    idx = find_entry(cache.entries, key)
    if idx == 0 - 1:
        new_cache = LFUCache(entries=cache.entries, capacity=cache.capacity, hits=cache.hits, miss=cache.miss + 1, tick=cache.tick)
        return GetResult(cache=new_cache, value=0, ok=False)
    entries = cache.entries
    e = entries[idx]
    e.freq = e.freq + 1
    new_tick = cache.tick + 1
    e.order = new_tick
    entries[idx] = e
    new_cache = LFUCache(entries=entries, capacity=cache.capacity, hits=cache.hits + 1, miss=cache.miss, tick=new_tick)
    return GetResult(cache=new_cache, value=e.val, ok=True)
def remove_lfu(entries):
    if len(entries) == 0:
        return entries
    min_idx = 0
    i = 1
    while i < len(entries):
        e = entries[i]
        m = entries[min_idx]
        if e.freq < m.freq or (e.freq == m.freq and e.order < m.order):
            min_idx = i
        i = i + 1
    res = []
    j = 0
    while j < len(entries):
        if j != min_idx:
            res = _append(res, entries[j])
        j = j + 1
    return res
def lfu_put(cache, key, value):
    entries = cache.entries
    idx = find_entry(entries, key)
    if idx != 0 - 1:
        e = entries[idx]
        e.val = value
        e.freq = e.freq + 1
        new_tick = cache.tick + 1
        e.order = new_tick
        entries[idx] = e
        return LFUCache(entries=entries, capacity=cache.capacity, hits=cache.hits, miss=cache.miss, tick=new_tick)
    if len(entries) >= cache.capacity:
        entries = remove_lfu(entries)
    new_tick = cache.tick + 1
    new_entry = Entry(key=key, val=value, freq=1, order=new_tick)
    entries = _append(entries, new_entry)
    return LFUCache(entries=entries, capacity=cache.capacity, hits=cache.hits, miss=cache.miss, tick=new_tick)
def cache_info(cache):
    return "CacheInfo(hits=" + _str(cache.hits) + ", misses=" + _str(cache.miss) + ", capacity=" + _str(cache.capacity) + ", current_size=" + _str(len(cache.entries)) + ")"
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        cache = lfu_new(2)
        cache = lfu_put(cache, 1, 1)
        cache = lfu_put(cache, 2, 2)
        r = lfu_get(cache, 1)
        cache = r.cache
        if r.ok:
            print(_str(r.value))
        else:
            print("None")
        cache = lfu_put(cache, 3, 3)
        r = lfu_get(cache, 2)
        cache = r.cache
        if r.ok:
            print(_str(r.value))
        else:
            print("None")
        cache = lfu_put(cache, 4, 4)
        r = lfu_get(cache, 1)
        cache = r.cache
        if r.ok:
            print(_str(r.value))
        else:
            print("None")
        r = lfu_get(cache, 3)
        cache = r.cache
        if r.ok:
            print(_str(r.value))
        else:
            print("None")
        r = lfu_get(cache, 4)
        cache = r.cache
        if r.ok:
            print(_str(r.value))
        else:
            print("None")
        print(cache_info(cache))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

