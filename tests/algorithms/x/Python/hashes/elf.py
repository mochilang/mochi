# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)

ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
def ord(ch):
    i = 0
    while i < len(ascii):
        if ascii[i:i + 1] == ch:
            return 32 + i
        i = i + 1
    return 0
def bit_and(a, b):
    ua = a
    ub = b
    res = 0
    bit = 1
    while ua > 0 or ub > 0:
        if ua % 2 == 1 and ub % 2 == 1:
            res = res + bit
        ua = int((ua // 2))
        ub = int((ub // 2))
        bit = bit * 2
    return res
def bit_xor(a, b):
    ua = a
    ub = b
    res = 0
    bit = 1
    while ua > 0 or ub > 0:
        abit = ua % 2
        bbit = ub % 2
        if abit != bbit:
            res = res + bit
        ua = int((ua // 2))
        ub = int((ub // 2))
        bit = bit * 2
    return res
def bit_not32(x):
    ux = x
    res = 0
    bit = 1
    count = 0
    while count < 32:
        if ux % 2 == 0:
            res = res + bit
        ux = int((ux // 2))
        bit = bit * 2
        count = count + 1
    return res
def elf_hash(data):
    hash_ = 0
    i = 0
    while i < len(data):
        c = ord(data[i:i + 1])
        hash_ = hash_ * 16 + c
        x = bit_and(hash_, 4026531840)
        if x != 0:
            hash_ = bit_xor(hash_, int((x // 16777216)))
        hash_ = bit_and(hash_, bit_not32(x))
        i = i + 1
    return hash_
print(str(elf_hash("lorem ipsum")))
