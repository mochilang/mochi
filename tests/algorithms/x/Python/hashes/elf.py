# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    ascii_ = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    def ord_(ch):
        i = 0
        while i < len(ascii_):
            if ascii_[i:i + 1] == ch:
                return 32 + i
            i = i + 1
        return 0
    def bit_and(a, b):
        ua = a
        ub = b
        res = 0
        bit = 1
        while ua > 0 or ub > 0:
            if ua % 2 == 1 and ub % 2 == 1:
                res = res + bit
            ua = int((ua // 2))
            ub = int((ub // 2))
            bit = bit * 2
        return res
    def bit_xor(a, b):
        ua = a
        ub = b
        res = 0
        bit = 1
        while ua > 0 or ub > 0:
            abit = ua % 2
            bbit = ub % 2
            if abit != bbit:
                res = res + bit
            ua = int((ua // 2))
            ub = int((ub // 2))
            bit = bit * 2
        return res
    def bit_not32(x):
        ux = x
        res = 0
        bit = 1
        count = 0
        while count < 32:
            if ux % 2 == 0:
                res = res + bit
            ux = int((ux // 2))
            bit = bit * 2
            count = count + 1
        return res
    def elf_hash(data):
        hash_ = 0
        i = 0
        while i < len(data):
            c = ord_(data[i:i + 1])
            hash_ = hash_ * 16 + c
            x = bit_and(hash_, 4026531840)
            if x != 0:
                hash_ = bit_xor(hash_, int((x // 16777216)))
            hash_ = bit_and(hash_, bit_not32(x))
            i = i + 1
        return hash_
    print(_str(elf_hash("lorem ipsum")))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

