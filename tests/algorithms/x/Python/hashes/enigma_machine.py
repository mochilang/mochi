# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
    def build_alphabet():
        result = []
        i = 0
        while i < len(ASCII):
            result = _append(result, ASCII[i])
            i = i + 1
        return result
    def range_list(n):
        lst = []
        i = 0
        while i < n:
            lst = _append(lst, i)
            i = i + 1
        return lst
    def reversed_range_list(n):
        lst = []
        i = n - 1
        while i >= 0:
            lst = _append(lst, i)
            i = i - 1
        return lst
    def index_of_char(lst, ch):
        i = 0
        while i < len(lst):
            if lst[i] == ch:
                return i
            i = i + 1
        return -1
    def index_of_int(lst, value):
        i = 0
        while i < len(lst):
            if lst[i] == value:
                return i
            i = i + 1
        return -1
    def enigma_encrypt(message, token):
        alphabets = build_alphabet()
        n = len(alphabets)
        gear_one = range_list(n)
        gear_two = range_list(n)
        gear_three = range_list(n)
        reflector = reversed_range_list(n)
        gear_one_pos = 0
        gear_two_pos = 0
        gear_three_pos = 0
        def rotator():
            nonlocal gear_one, gear_one_pos, gear_three, gear_three_pos, gear_two, gear_two_pos
            i = gear_one[0]
            gear_one = gear_one[1:]
            gear_one = _append(gear_one, i)
            gear_one_pos = gear_one_pos + 1
            if gear_one_pos % n == 0:
                i = gear_two[0]
                gear_two = gear_two[1:]
                gear_two = _append(gear_two, i)
                gear_two_pos = gear_two_pos + 1
                if gear_two_pos % n == 0:
                    i = gear_three[0]
                    gear_three = gear_three[1:]
                    gear_three = _append(gear_three, i)
                    gear_three_pos = gear_three_pos + 1
        def engine(ch):
            target = index_of_char(alphabets, ch)
            target = gear_one[target]
            target = gear_two[target]
            target = gear_three[target]
            target = reflector[target]
            target = index_of_int(gear_three, target)
            target = index_of_int(gear_two, target)
            target = index_of_int(gear_one, target)
            rotator()
            return alphabets[target]
        t = 0
        while t < token:
            rotator()
            t = t + 1
        result = ""
        idx = 0
        while idx < len(message):
            result = result + engine(message[idx])
            idx = idx + 1
        return result
    message = "HELLO WORLD"
    token = 123
    encoded = enigma_encrypt(message, token)
    print(encoded)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

