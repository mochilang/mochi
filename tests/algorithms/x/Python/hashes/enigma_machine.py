# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
def build_alphabet():
    result = []
    i = 0
    while i < len(ASCII):
        result = _append(result, ASCII[i])
        i = i + 1
    return result
def range_list(n):
    lst = []
    i = 0
    while i < n:
        lst = _append(lst, i)
        i = i + 1
    return lst
def reversed_range_list(n):
    lst = []
    i = n - 1
    while i >= 0:
        lst = _append(lst, i)
        i = i - 1
    return lst
def index_of_char(lst, ch):
    i = 0
    while i < len(lst):
        if lst[i] == ch:
            return i
        i = i + 1
    return -1
def index_of_int(lst, value):
    i = 0
    while i < len(lst):
        if lst[i] == value:
            return i
        i = i + 1
    return -1
def enigma_encrypt(message, token):
    alphabets = build_alphabet()
    n = len(alphabets)
    gear_one = range_list(n)
    gear_two = range_list(n)
    gear_three = range_list(n)
    reflector = reversed_range_list(n)
    gear_one_pos = 0
    gear_two_pos = 0
    gear_three_pos = 0
    def rotator():
        nonlocal gear_one, gear_one_pos, gear_three, gear_three_pos, gear_two, gear_two_pos
        i = gear_one[0]
        gear_one = gear_one[1:len(gear_one)]
        gear_one = _append(gear_one, i)
        gear_one_pos = gear_one_pos + 1
        if gear_one_pos % n == 0:
            i = gear_two[0]
            gear_two = gear_two[1:len(gear_two)]
            gear_two = _append(gear_two, i)
            gear_two_pos = gear_two_pos + 1
            if gear_two_pos % n == 0:
                i = gear_three[0]
                gear_three = gear_three[1:len(gear_three)]
                gear_three = _append(gear_three, i)
                gear_three_pos = gear_three_pos + 1
    def engine(ch):
        target = index_of_char(alphabets, ch)
        target = gear_one[target]
        target = gear_two[target]
        target = gear_three[target]
        target = reflector[target]
        target = index_of_int(gear_three, target)
        target = index_of_int(gear_two, target)
        target = index_of_int(gear_one, target)
        rotator()
        return alphabets[target]
    t = 0
    while t < token:
        rotator()
        t = t + 1
    result = ""
    idx = 0
    while idx < len(message):
        result = result + engine(message[idx])
        idx = idx + 1
    return result
message = "HELLO WORLD"
token = 123
encoded = enigma_encrypt(message, token)
print(encoded)
