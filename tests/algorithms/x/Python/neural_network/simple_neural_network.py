# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    seed = 1
    def rand():
        global seed
        seed = (seed * 1103515245 + 12345) % 2147483648
        return seed
    def randint(low, high):
        return (rand() % (high - low + 1)) + low
    def expApprox(x):
        y = x
        is_neg = False
        if x < 0.0:
            is_neg = True
            y = -x
        term = 1.0
        sum = 1.0
        n = 1
        while n < 30:
            term = term * y / (float(n))
            sum = sum + term
            n = n + 1
        if is_neg:
            return 1.0 / sum
        return sum
    def sigmoid(x):
        return 1.0 / (1.0 + expApprox(-x))
    def sigmoid_derivative(sig_val):
        return sig_val * (1.0 - sig_val)
    INITIAL_VALUE = 0.02
    def forward_propagation(expected, number_propagations):
        weight = 2.0 * (float(randint(1, 100))) - 1.0
        layer_1 = 0.0
        i = 0
        while i < number_propagations:
            layer_1 = sigmoid(INITIAL_VALUE * weight)
            layer_1_error = (float(expected) / 100.0) - layer_1
            layer_1_delta = layer_1_error * sigmoid_derivative(layer_1)
            weight = weight + INITIAL_VALUE * layer_1_delta
            i = i + 1
        return layer_1 * 100.0
    seed = 1
    result = forward_propagation(32, 450000)
    print(result)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

