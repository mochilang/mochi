# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import math
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def exp_taylor(x):
        term = 1.0
        sum_ = 1.0
        i = 1.0
        while i < 20.0:
            term = term * x / i
            sum_ = sum_ + term
            i = i + 1.0
        return sum_
    def sigmoid(vector):
        result = []
        i = 0
        while i < len(vector):
            x = vector[i]
            value = 1.0 / (1.0 + math.exp(-x))
            result = _append(result, value)
            i = i + 1
        return result
    def gaussian_error_linear_unit(vector):
        result = []
        i = 0
        while i < len(vector):
            x = vector[i]
            gelu = x * (1.0 / (1.0 + math.exp(-1.702 * x)))
            result = _append(result, gelu)
            i = i + 1
        return result
    sample = [-1.0, 1.0, 2.0]
    print(sigmoid(sample))
    print(gaussian_error_linear_unit(sample))
    print(gaussian_error_linear_unit([-3.0]))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

