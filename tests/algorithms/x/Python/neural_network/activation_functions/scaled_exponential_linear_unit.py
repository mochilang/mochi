# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import math
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def exp(x):
        term = 1.0
        sum = 1.0
        n = 1
        while n < 20:
            term = term * x / (float(n))
            sum = sum + term
            n = n + 1
        return sum
    def scaled_exponential_linear_unit(vector, alpha, lambda_):
        result = []
        i = 0
        while i < len(vector):
            x = vector[i]
            y = (lambda_ * x if x > 0.0 else lambda_ * alpha * (math.exp(x) - 1.0))
            result = _append(result, y)
            i = i + 1
        return result
    print(scaled_exponential_linear_unit([1.3, 3.7, 2.4], 1.6732, 1.0507))
    print(scaled_exponential_linear_unit([1.3, 4.7, 8.2], 1.6732, 1.0507))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

