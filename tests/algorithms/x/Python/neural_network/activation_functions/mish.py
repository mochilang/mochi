# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import math
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

def exp_approx(x):
    neg = False
    y = x
    if x < 0.0:
        neg = True
        y = -x
    term = 1.0
    sum = 1.0
    n = 1
    while n < 30:
        term = term * y / (float(n))
        sum = sum + term
        n = n + 1
    if neg:
        return 1.0 / sum
    return sum
def ln_series(x):
    t = (x - 1.0) / (x + 1.0)
    term = t
    acc = 0.0
    n = 1
    while n <= 19:
        acc = acc + term / (float(n))
        term = term * t * t
        n = n + 2
    return 2.0 * acc
def ln(x):
    y = x
    k = 0
    while y >= 10.0:
        y = y / 10.0
        k = k + 1
    while y < 1.0:
        y = y * 10.0
        k = k - 1
    return ln_series(y) + (float(k)) * ln_series(10.0)
def softplus(x):
    return math.log(1.0 + exp_approx(x))
def tanh_approx(x):
    return (2.0 / (1.0 + exp_approx(-2.0 * x))) - 1.0
def mish(vector):
    result = []
    i = 0
    while i < len(vector):
        x = vector[i]
        sp = softplus(x)
        y = x * tanh_approx(sp)
        result = _append(result, y)
        i = i + 1
    return result
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        v1 = [2.3, 0.6, -2.0, -3.8]
        v2 = [-9.2, -0.3, 0.45, -4.56]
        print(_str(mish(v1)))
        print(_str(mish(v2)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

