# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def exp_approx(x):
        sum = 1.0
        term = 1.0
        i = 1
        absx = (-x if x < 0.0 else x)
        while i <= 20:
            term = term * absx / (float(i))
            sum = sum + term
            i = i + 1
        if x < 0.0:
            return 1.0 / sum
        return sum
    def exponential_linear_unit(vector, alpha):
        result = []
        i = 0
        while i < len(vector):
            v = vector[i]
            if v > 0.0:
                result = _append(result, v)
            else:
                neg = alpha * (exp_approx(v) - 1.0)
                result = _append(result, neg)
            i = i + 1
        return result
    print(_str(exponential_linear_unit([2.3, 0.6, -2.0, -3.8], 0.3)))
    print(_str(exponential_linear_unit([-9.2, -0.3, 0.45, -4.56], 0.067)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

