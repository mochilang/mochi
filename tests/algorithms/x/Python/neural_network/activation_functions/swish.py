# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 09:25 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def exp_approx(x):
    sum_ = 1.0
    term = 1.0
    i = 1
    while i <= 20:
        term = term * x / (float(i))
        sum_ = sum_ + term
        i = i + 1
    return sum_
def sigmoid(vector):
    result = []
    i = 0
    while i < len(vector):
        v = vector[i]
        s = 1.0 / (1.0 + exp_approx(-v))
        result = _append(result, s)
        i = i + 1
    return result
def swish(vector, beta):
    result = []
    i = 0
    while i < len(vector):
        v = vector[i]
        s = 1.0 / (1.0 + exp_approx(-beta * v))
        result = _append(result, v * s)
        i = i + 1
    return result
def sigmoid_linear_unit(vector):
    return swish(vector, 1.0)
def approx_equal(a, b, eps):
    diff = (a - b if a > b else b - a)
    return diff < eps
def approx_equal_list(a, b, eps):
    if len(a) != len(b):
        return False
    i = 0
    while i < len(a):
        if not approx_equal(a[i], b[i], eps):
            return False
        i = i + 1
    return True
def test_swish():
    v = [-1.0, 1.0, 2.0]
    eps = 0.001
    if not approx_equal_list(sigmoid(v), [0.26894142, 0.73105858, 0.88079708], eps):
        panic("sigmoid incorrect")
    if not approx_equal_list(sigmoid_linear_unit(v), [-0.26894142, 0.73105858, 1.76159416], eps):
        panic("sigmoid_linear_unit incorrect")
    if not approx_equal_list(swish(v, 2.0), [-0.11920292, 0.88079708, 1.96402758], eps):
        panic("swish incorrect")
    if not approx_equal_list(swish([-2.0], 1.0), [-0.23840584], eps):
        panic("swish with parameter 1 incorrect")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_swish()
        print(_str(sigmoid([-1.0, 1.0, 2.0])))
        print(_str(sigmoid_linear_unit([-1.0, 1.0, 2.0])))
        print(_str(swish([-1.0, 1.0, 2.0], 2.0)))
        print(_str(swish([-2.0], 1.0)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

