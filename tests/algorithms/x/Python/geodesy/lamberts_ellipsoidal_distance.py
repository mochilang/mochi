# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    PI = 3.141592653589793
    EQUATORIAL_RADIUS = 6.378137e+06
    def to_radians(deg):
        return deg * PI / 180.0
    def sin_approx(x):
        term = x
        sum = x
        i = 1
        while i < 10:
            k1 = 2.0 * (float(i))
            k2 = k1 + 1.0
            term = -term * x * x / (k1 * k2)
            sum = sum + term
            i = i + 1
        return sum
    def cos_approx(x):
        term = 1.0
        sum = 1.0
        i = 1
        while i < 10:
            k1 = 2.0 * (float(i)) - 1.0
            k2 = 2.0 * (float(i))
            term = -term * x * x / (k1 * k2)
            sum = sum + term
            i = i + 1
        return sum
    def sqrt_approx(x):
        if x <= 0.0:
            return 0.0
        guess = x / 2.0
        i = 0
        while i < 20:
            guess = (guess + x / guess) / 2.0
            i = i + 1
        return guess
    def lamberts_ellipsoidal_distance(lat1, lon1, lat2, lon2):
        phi1 = to_radians(lat1)
        phi2 = to_radians(lat2)
        lambda1 = to_radians(lon1)
        lambda2 = to_radians(lon2)
        x = (lambda2 - lambda1) * cos_approx((phi1 + phi2) / 2.0)
        y = phi2 - phi1
        return EQUATORIAL_RADIUS * sqrt_approx(x * x + y * y)
    print(lamberts_ellipsoidal_distance(37.774856, -122.424227, 37.864742, -119.537521))
    print(lamberts_ellipsoidal_distance(37.774856, -122.424227, 40.713019, -74.012647))
    print(lamberts_ellipsoidal_distance(37.774856, -122.424227, 45.443012, 12.313071))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

