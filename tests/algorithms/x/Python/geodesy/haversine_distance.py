# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    PI = 3.141592653589793
    AXIS_A = 6.378137e+06
    AXIS_B = 6.356752314245e+06
    RADIUS = 6.378137e+06
    def to_radians(deg):
        return deg * PI / 180.0
    def sin_taylor(x):
        term = x
        sum = x
        i = 1
        while i < 10:
            k1 = 2.0 * (float(i))
            k2 = k1 + 1.0
            term = -term * x * x / (k1 * k2)
            sum = sum + term
            i = i + 1
        return sum
    def cos_taylor(x):
        term = 1.0
        sum = 1.0
        i = 1
        while i < 10:
            k1 = 2.0 * (float(i)) - 1.0
            k2 = 2.0 * (float(i))
            term = -term * x * x / (k1 * k2)
            sum = sum + term
            i = i + 1
        return sum
    def tan_approx(x):
        return sin_taylor(x) / cos_taylor(x)
    def sqrtApprox(x):
        guess = x / 2.0
        i = 0
        while i < 20:
            guess = (guess + x / guess) / 2.0
            i = i + 1
        return guess
    def atanApprox(x):
        if x > 1.0:
            return PI / 2.0 - x / (x * x + 0.28)
        if x < (-1.0):
            return -PI / 2.0 - x / (x * x + 0.28)
        return x / (1.0 + 0.28 * x * x)
    def atan2Approx(y, x):
        if x > 0.0:
            val = atanApprox(y / x)
            return val
        if x < 0.0:
            if y >= 0.0:
                return atanApprox(y / x) + PI
            return atanApprox(y / x) - PI
        if y > 0.0:
            return PI / 2.0
        if y < 0.0:
            return -PI / 2.0
        return 0.0
    def asinApprox(x):
        denom = sqrtApprox(1.0 - x * x)
        res = atan2Approx(x, denom)
        return res
    def haversine_distance(lat1, lon1, lat2, lon2):
        flattening = (AXIS_A - AXIS_B) / AXIS_A
        phi_1 = atanApprox((1.0 - flattening) * tan_approx(to_radians(lat1)))
        phi_2 = atanApprox((1.0 - flattening) * tan_approx(to_radians(lat2)))
        lambda_1 = to_radians(lon1)
        lambda_2 = to_radians(lon2)
        sin_sq_phi = sin_taylor((phi_2 - phi_1) / 2.0)
        sin_sq_lambda = sin_taylor((lambda_2 - lambda_1) / 2.0)
        sin_sq_phi = sin_sq_phi * sin_sq_phi
        sin_sq_lambda = sin_sq_lambda * sin_sq_lambda
        h_value = sqrtApprox(sin_sq_phi + cos_taylor(phi_1) * cos_taylor(phi_2) * sin_sq_lambda)
        return 2.0 * RADIUS * asinApprox(h_value)
    SAN_FRANCISCO = [37.774856, -122.424227]
    YOSEMITE = [37.864742, -119.537521]
    print(_str(haversine_distance(SAN_FRANCISCO[0], SAN_FRANCISCO[1], YOSEMITE[0], YOSEMITE[1])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

