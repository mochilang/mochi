# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:13 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    INF = 1000000000
    def breadth_first_search(graph, source, sink, parent):
        visited = []
        i = 0
        while i < len(graph):
            visited = _append(visited, False)
            i = i + 1
        queue = []
        queue = _append(queue, source)
        visited[source] = True
        head = 0
        while head < len(queue):
            u = queue[head]
            head = head + 1
            row = graph[u]
            ind = 0
            while ind < len(row):
                capacity = row[ind]
                if visited[ind] == False and capacity > 0:
                    queue = _append(queue, ind)
                    visited[ind] = True
                    parent[ind] = u
                ind = ind + 1
        return visited[sink]
    def ford_fulkerson(graph, source, sink):
        parent = []
        i = 0
        while i < len(graph):
            parent = _append(parent, -1)
            i = i + 1
        max_flow = 0
        while breadth_first_search(graph, source, sink, parent):
            path_flow = INF
            s = sink
            while s != source:
                prev = parent[s]
                cap = graph[prev][s]
                if cap < path_flow:
                    path_flow = cap
                s = prev
            max_flow = max_flow + path_flow
            v = sink
            while v != source:
                u = parent[v]
                graph[u][v] = graph[u][v] - path_flow
                graph[v][u] = graph[v][u] + path_flow
                v = u
            j = 0
            while j < len(parent):
                parent[j] = -1
                j = j + 1
        return max_flow
    graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]
    print(_str(ford_fulkerson(graph, 0, 5)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
