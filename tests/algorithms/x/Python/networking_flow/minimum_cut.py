# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def bfs(graph, s, t, parent):
    visited = []
    i = 0
    while i < len(graph):
        visited = _append(visited, False)
        i = i + 1
    queue = [s]
    head = 0
    visited[s] = True
    while head < len(queue):
        u = queue[head]
        head = head + 1
        ind = 0
        while ind < len(graph[u]):
            if visited[ind] == False and graph[u][ind] > 0:
                queue = _append(queue, ind)
                visited[ind] = True
                parent[ind] = u
            ind = ind + 1
    return visited[t]
def mincut(graph, source, sink):
    g = graph
    parent = []
    i = 0
    while i < len(g):
        parent = _append(parent, -1)
        i = i + 1
    temp = []
    i = 0
    while i < len(g):
        row = []
        j = 0
        while j < len(g[i]):
            row = _append(row, g[i][j])
            j = j + 1
        temp = _append(temp, row)
        i = i + 1
    while bfs(g, source, sink, parent):
        path_flow = 1000000000
        s = sink
        while s != source:
            p = parent[s]
            cap = g[p][s]
            if cap < path_flow:
                path_flow = cap
            s = p
        v = sink
        while v != source:
            u = parent[v]
            g[u][v] = g[u][v] - path_flow
            g[v][u] = g[v][u] + path_flow
            v = u
    res = []
    i = 0
    while i < len(g):
        j = 0
        while j < len(g[0]):
            if g[i][j] == 0 and temp[i][j] > 0:
                res = _append(res, [i, j])
            j = j + 1
        i = i + 1
    return res
test_graph = [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]
result = mincut(test_graph, 0, 5)
print(_str(result))
