# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def change_contrast(img, level):
        factor = (259.0 * ((float(level)) + 255.0)) // (255.0 * (259.0 - (float(level))))
        result = []
        i = 0
        while i < len(img):
            row = img[i]
            new_row = []
            j = 0
            while j < len(row):
                c = row[j]
                contrasted = int((128.0 + factor * ((float(c)) - 128.0)))
                clamped = (0 if contrasted < 0 else (255 if contrasted > 255 else contrasted))
                new_row = _append(new_row, clamped)
                j = j + 1
            result = _append(result, new_row)
            i = i + 1
        return result
    def print_image(img):
        i = 0
        while i < len(img):
            row = img[i]
            j = 0
            line = ""
            while j < len(row):
                line = line + str(row[j]) + " "
                j = j + 1
            print(line)
            i = i + 1
    image = [[100, 125, 150], [175, 200, 225], [50, 75, 100]]
    print("Original image:")
    print_image(image)
    contrasted = change_contrast(image, 170)
    print("After contrast:")
    print_image(contrasted)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
