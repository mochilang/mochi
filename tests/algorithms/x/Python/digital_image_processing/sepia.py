# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def normalize(value):
        if value > 255:
            return 255
        return value
    def to_grayscale(blue, green, red):
        gs = 0.2126 * (float(red)) + 0.587 * (float(green)) + 0.114 * (float(blue))
        return int(gs)
    def make_sepia(img, factor):
        pixel_h = len(img)
        pixel_v = len(img[0])
        i = 0
        while i < pixel_h:
            j = 0
            while j < pixel_v:
                pixel = img[i][j]
                grey = to_grayscale(pixel[0], pixel[1], pixel[2])
                img[i][j] = [normalize(grey), normalize(grey + factor), normalize(grey + 2 * factor)]
                j = j + 1
            i = i + 1
        return img
    image = [[[10, 20, 30], [40, 50, 60]], [[70, 80, 90], [200, 150, 100]]]
    sepia = make_sepia(image, 20)
    print(str(sepia))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
