# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def make_list(n, value):
        res = []
        i = 0
        while i < n:
            res = _append(res, value)
            i = i + 1
        return res
    def histogram_stretch(image):
        height = len(image)
        width = len(image[0])
        hist = make_list(256, 0)
        i = 0
        while i < height:
            j = 0
            while j < width:
                val = image[i][j]
                hist[val] = hist[val] + 1
                j = j + 1
            i = i + 1
        mapping = make_list(256, 0)
        cumulative = 0
        total = height * width
        h = 0
        while h < 256:
            cumulative = cumulative + hist[h]
            mapping[h] = (255 * cumulative) // total
            h = h + 1
        i = 0
        while i < height:
            j = 0
            while j < width:
                val = image[i][j]
                image[i][j] = mapping[val]
                j = j + 1
            i = i + 1
        return image
    def print_image(image):
        i = 0
        while i < len(image):
            print(image[i])
            i = i + 1
    img = [[52, 55, 61], [59, 79, 61], [85, 76, 62]]
    result = histogram_stretch(img)
    print_image(result)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
