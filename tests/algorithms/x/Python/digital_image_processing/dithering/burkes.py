# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def get_greyscale(blue, green, red):
    b = float(blue)
    g = float(green)
    r = float(red)
    return int((0.114 * b + 0.587 * g + 0.299 * r))
def zeros(h, w):
    table = []
    i = 0
    while i < h:
        row = []
        j = 0
        while j < w:
            row = _append(row, 0)
            j = j + 1
        table = _append(table, row)
        i = i + 1
    return table
def burkes_dither(img, threshold):
    height = len(img)
    width = len(img[0])
    error_table = zeros(height + 1, width + 4)
    output = []
    y = 0
    while y < height:
        row = []
        x = 0
        while x < width:
            px = img[y][x]
            grey = get_greyscale(px[0], px[1], px[2])
            total = grey + error_table[y][x + 2]
            new_val = 0
            current_error = 0
            if threshold > total:
                new_val = 0
                current_error = total
            else:
                new_val = 255
                current_error = total - 255
            row = _append(row, new_val)
            error_table[y][x + 3] = error_table[y][x + 3] + (8 * current_error) // 32
            error_table[y][x + 4] = error_table[y][x + 4] + (4 * current_error) // 32
            error_table[y + 1][x + 2] = error_table[y + 1][x + 2] + (8 * current_error) // 32
            error_table[y + 1][x + 3] = error_table[y + 1][x + 3] + (4 * current_error) // 32
            error_table[y + 1][x + 4] = error_table[y + 1][x + 4] + (2 * current_error) // 32
            error_table[y + 1][x + 1] = error_table[y + 1][x + 1] + (4 * current_error) // 32
            error_table[y + 1][x] = error_table[y + 1][x] + (2 * current_error) // 32
            x = x + 1
        output = _append(output, row)
        y = y + 1
    return output
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        img = [[[0, 0, 0], [64, 64, 64], [128, 128, 128], [192, 192, 192]], [[255, 255, 255], [200, 200, 200], [150, 150, 150], [100, 100, 100]], [[30, 144, 255], [255, 0, 0], [0, 255, 0], [0, 0, 255]], [[50, 100, 150], [80, 160, 240], [70, 140, 210], [60, 120, 180]]]
        result = burkes_dither(img, 128)
        y = 0
        while y < len(result):
            line = ""
            x = 0
            while x < len(result[y]):
                line = line + str(result[y][x])
                if x < len(result[y]) - 1:
                    line = line + " "
                x = x + 1
            print(line)
            y = y + 1
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
