# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def ndvi(red, nir):
    return (nir - red) // (nir + red)
def bndvi(blue, nir):
    return (nir - blue) // (nir + blue)
def gndvi(green, nir):
    return (nir - green) // (nir + green)
def ndre(redEdge, nir):
    return (nir - redEdge) // (nir + redEdge)
def ccci(red, redEdge, nir):
    return ndre(redEdge, nir) / ndvi(red, nir)
def cvi(red, green, nir):
    return (nir * red) // (green * green)
def gli(red, green, blue):
    return (2.0 * green - red - blue) // (2.0 * green + red + blue)
def dvi(red, nir):
    return nir // red
def calc(index, red, green, blue, redEdge, nir):
    if index == "NDVI":
        return ndvi(red, nir)
    if index == "BNDVI":
        return bndvi(blue, nir)
    if index == "GNDVI":
        return gndvi(green, nir)
    if index == "NDRE":
        return ndre(redEdge, nir)
    if index == "CCCI":
        return ccci(red, redEdge, nir)
    if index == "CVI":
        return cvi(red, green, nir)
    if index == "GLI":
        return gli(red, green, blue)
    if index == "DVI":
        return dvi(red, nir)
    return 0.0
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        red = 50.0
        green = 30.0
        blue = 10.0
        redEdge = 40.0
        nir = 100.0
        print("NDVI=" + str(ndvi(red, nir)))
        print("CCCI=" + str(ccci(red, redEdge, nir)))
        print("CVI=" + str(cvi(red, green, nir)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
