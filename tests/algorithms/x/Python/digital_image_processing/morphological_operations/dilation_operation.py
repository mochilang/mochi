# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def rgb_to_gray(rgb):
    result = []
    i = 0
    while i < len(rgb):
        row = []
        j = 0
        while j < len(rgb[i]):
            r = rgb[i][j][0]
            g = rgb[i][j][1]
            b = rgb[i][j][2]
            gray = 0.2989 * (1.0 * r) + 0.587 * (1.0 * g) + 0.114 * (1.0 * b)
            row = _append(row, gray)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def gray_to_binary(gray):
    result = []
    i = 0
    while i < len(gray):
        row = []
        j = 0
        while j < len(gray[i]):
            v = gray[i][j]
            if v > 127.0 and v <= 255.0:
                row = _append(row, 1)
            else:
                row = _append(row, 0)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def dilation(image, kernel):
    img_h = len(image)
    img_w = len(image[0])
    k_h = len(kernel)
    k_w = len(kernel[0])
    pad_h = k_h // 2
    pad_w = k_w // 2
    p_h = img_h + 2 * pad_h
    p_w = img_w + 2 * pad_w
    padded = []
    i = 0
    while i < p_h:
        row = []
        j = 0
        while j < p_w:
            row = _append(row, 0)
            j = j + 1
        padded = _append(padded, row)
        i = i + 1
    i = 0
    while i < img_h:
        j = 0
        while j < img_w:
            padded[pad_h + i][pad_w + j] = image[i][j]
            j = j + 1
        i = i + 1
    output = []
    i = 0
    while i < img_h:
        row = []
        j = 0
        while j < img_w:
            sum = 0
            ky = 0
            while ky < k_h:
                kx = 0
                while kx < k_w:
                    if kernel[ky][kx] == 1:
                        sum = sum + padded[i + ky][j + kx]
                    kx = kx + 1
                ky = ky + 1
            if sum > 0:
                row = _append(row, 1)
            else:
                row = _append(row, 0)
            j = j + 1
        output = _append(output, row)
        i = i + 1
    return output
def print_float_matrix(mat):
    i = 0
    while i < len(mat):
        line = ""
        j = 0
        while j < len(mat[i]):
            line = line + str(mat[i][j])
            if j < len(mat[i]) - 1:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 1
def print_int_matrix(mat):
    i = 0
    while i < len(mat):
        line = ""
        j = 0
        while j < len(mat[i]):
            line = line + str(mat[i][j])
            if j < len(mat[i]) - 1:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 1
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        rgb_example = [[[127, 255, 0]]]
        print_float_matrix(rgb_to_gray(rgb_example))
        gray_example = [[26.0, 255.0, 14.0], [5.0, 147.0, 20.0], [1.0, 200.0, 0.0]]
        print_int_matrix(gray_to_binary(gray_example))
        binary_image = [[0, 1, 0], [0, 1, 0], [0, 1, 0]]
        kernel = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]
        print_int_matrix(dilation(binary_image, kernel))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
