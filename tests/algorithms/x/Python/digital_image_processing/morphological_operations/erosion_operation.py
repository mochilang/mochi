# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def rgb_to_gray(rgb):
        gray = []
        i = 0
        while i < len(rgb):
            row = []
            j = 0
            while j < len(rgb[i]):
                r = float(rgb[i][j][0])
                g = float(rgb[i][j][1])
                b = float(rgb[i][j][2])
                value = 0.2989 * r + 0.587 * g + 0.114 * b
                row = _append(row, value)
                j = j + 1
            gray = _append(gray, row)
            i = i + 1
        return gray
    def gray_to_binary(gray):
        binary = []
        i = 0
        while i < len(gray):
            row = []
            j = 0
            while j < len(gray[i]):
                row = _append(row, gray[i][j] > 127.0 and gray[i][j] <= 255.0)
                j = j + 1
            binary = _append(binary, row)
            i = i + 1
        return binary
    def erosion(image, kernel):
        h = len(image)
        w = len(image[0])
        k_h = len(kernel)
        k_w = len(kernel[0])
        pad_y = k_h // 2
        pad_x = k_w // 2
        padded = []
        y = 0
        while y < h + 2 * pad_y:
            row = []
            x = 0
            while x < w + 2 * pad_x:
                row = _append(row, False)
                x = x + 1
            padded = _append(padded, row)
            y = y + 1
        y = 0
        while y < h:
            x = 0
            while x < w:
                padded[pad_y + y][pad_x + x] = image[y][x]
                x = x + 1
            y = y + 1
        output = []
        y = 0
        while y < h:
            row_out = []
            x = 0
            while x < w:
                sum = 0
                ky = 0
                while ky < k_h:
                    kx = 0
                    while kx < k_w:
                        if kernel[ky][kx] == 1 and padded[y + ky][x + kx]:
                            sum = sum + 1
                        kx = kx + 1
                    ky = ky + 1
                row_out = _append(row_out, sum == 5)
                x = x + 1
            output = _append(output, row_out)
            y = y + 1
        return output
    rgb_img = [[[127, 255, 0]]]
    print(str(rgb_to_gray(rgb_img)))
    gray_img = [[127.0, 255.0, 0.0]]
    print(str(gray_to_binary(gray_img)))
    img1 = [[True, True, False]]
    kernel1 = [[0, 1, 0]]
    print(str(erosion(img1, kernel1)))
    img2 = [[True, False, False]]
    kernel2 = [[1, 1, 0]]
    print(str(erosion(img2, kernel2)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
