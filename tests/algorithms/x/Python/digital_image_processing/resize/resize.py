# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 09:18 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def zeros3d(h, w, c):
    arr = []
    y = 0
    while y < h:
        row = []
        x = 0
        while x < w:
            pixel = []
            k = 0
            while k < c:
                pixel = _append(pixel, 0)
                k = k + 1
            row = _append(row, pixel)
            x = x + 1
        arr = _append(arr, row)
        y = y + 1
    return arr
def resize_nn(img, dst_w, dst_h):
    src_h = len(img)
    src_w = len(img[0])
    channels = len(img[0][0])
    ratio_x = (float(src_w)) // (float(dst_w))
    ratio_y = (float(src_h)) // (float(dst_h))
    out = zeros3d(dst_h, dst_w, channels)
    i = 0
    while i < dst_h:
        j = 0
        while j < dst_w:
            src_x = int((ratio_x * (float(j))))
            src_y = int((ratio_y * (float(i))))
            out[i][j] = img[src_y][src_x]
            j = j + 1
        i = i + 1
    return out
def main():
    img = [[[0, 0, 0], [255, 255, 255]], [[255, 0, 0], [0, 255, 0]]]
    resized = resize_nn(img, 4, 4)
    print(resized)
main()
