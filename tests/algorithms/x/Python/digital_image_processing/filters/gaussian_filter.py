# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 06:45 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

PI = 3.141592653589793
def expApprox(x):
    sum = 1.0
    term = 1.0
    n = 1
    while n < 10:
        term = term * x // (float(n))
        sum = sum + term
        n = n + 1
    return sum
def gen_gaussian_kernel(k_size, sigma):
    center = k_size // 2
    kernel = []
    i = 0
    while i < k_size:
        row = []
        j = 0
        while j < k_size:
            x = float((i - center))
            y = float((j - center))
            exponent = -((x * x + y * y) // (2.0 * sigma * sigma))
            value = (1.0 / (2.0 * PI * sigma)) * expApprox(exponent)
            row = _append(row, value)
            j = j + 1
        kernel = _append(kernel, row)
        i = i + 1
    return kernel
def gaussian_filter(image, k_size, sigma):
    height = len(image)
    width = len(image[0])
    dst_height = height - k_size + 1
    dst_width = width - k_size + 1
    kernel = gen_gaussian_kernel(k_size, sigma)
    dst = []
    i = 0
    while i < dst_height:
        row = []
        j = 0
        while j < dst_width:
            sum = 0.0
            ki = 0
            while ki < k_size:
                kj = 0
                while kj < k_size:
                    sum = sum + (float(image[i + ki][j + kj])) * kernel[ki][kj]
                    kj = kj + 1
                ki = ki + 1
            row = _append(row, int(sum))
            j = j + 1
        dst = _append(dst, row)
        i = i + 1
    return dst
def print_image(image):
    i = 0
    while i < len(image):
        print(image[i])
        i = i + 1
img = [[52, 55, 61, 59, 79], [62, 59, 55, 104, 94], [63, 65, 66, 113, 144], [68, 70, 70, 126, 154], [70, 72, 69, 128, 155]]
gaussian3 = gaussian_filter(img, 3, 1.0)
gaussian5 = gaussian_filter(img, 5, 0.8)
print_image(gaussian3)
print_image(gaussian5)
