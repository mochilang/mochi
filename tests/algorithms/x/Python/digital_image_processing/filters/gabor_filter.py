# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 09:18 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

PI = 3.141592653589793
def to_radians(deg):
    return deg * PI / 180.0
def sin_taylor(x):
    term = x
    sum = x
    i = 1
    while i < 10:
        k1 = 2.0 * (float(i))
        k2 = k1 + 1.0
        term = -term * x * x // (k1 * k2)
        sum = sum + term
        i = i + 1
    return sum
def cos_taylor(x):
    term = 1.0
    sum = 1.0
    i = 1
    while i < 10:
        k1 = 2.0 * (float(i)) - 1.0
        k2 = 2.0 * (float(i))
        term = -term * x * x // (k1 * k2)
        sum = sum + term
        i = i + 1
    return sum
def exp_taylor(x):
    term = 1.0
    sum = 1.0
    i = 1.0
    while i < 20.0:
        term = term * x // i
        sum = sum + term
        i = i + 1.0
    return sum
def gabor_filter_kernel(ksize, sigma, theta, lambd, gamma, psi):
    size = ksize
    if size % 2 == 0:
        size = size + 1
    gabor = []
    y = 0
    while y < size:
        row = []
        x = 0
        while x < size:
            px = float((x - (size // 2)))
            py = float((y - (size // 2)))
            rad = to_radians(theta)
            cos_theta = cos_taylor(rad)
            sin_theta = sin_taylor(rad)
            x_rot = cos_theta * px + sin_theta * py
            y_rot = -sin_theta * px + cos_theta * py
            exponent = -(x_rot * x_rot + gamma * gamma * y_rot * y_rot) // (2.0 * sigma * sigma)
            value = exp_taylor(exponent) * cos_taylor(2.0 * PI * x_rot // lambd + psi)
            row = _append(row, value)
            x = x + 1
        gabor = _append(gabor, row)
        y = y + 1
    return gabor
kernel = gabor_filter_kernel(3, 8.0, 0.0, 10.0, 0.0, 0.0)
print(kernel)
