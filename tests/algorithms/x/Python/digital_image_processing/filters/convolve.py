# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def pad_edge(image, pad_size):
        height = len(image)
        width = len(image[0])
        new_height = height + pad_size * 2
        new_width = width + pad_size * 2
        padded = []
        i = 0
        while i < new_height:
            row = []
            src_i = i
            if src_i < pad_size:
                src_i = 0
            if src_i >= height + pad_size:
                src_i = height - 1
            else:
                src_i = src_i - pad_size
            j = 0
            while j < new_width:
                src_j = j
                if src_j < pad_size:
                    src_j = 0
                if src_j >= width + pad_size:
                    src_j = width - 1
                else:
                    src_j = src_j - pad_size
                row = _append(row, image[src_i][src_j])
                j = j + 1
            padded = _append(padded, row)
            i = i + 1
        return padded
    def im2col(image, block_h, block_w):
        rows = len(image)
        cols = len(image[0])
        dst_height = rows - block_h + 1
        dst_width = cols - block_w + 1
        image_array = []
        i = 0
        while i < dst_height:
            j = 0
            while j < dst_width:
                window = []
                bi = 0
                while bi < block_h:
                    bj = 0
                    while bj < block_w:
                        window = _append(window, image[i + bi][j + bj])
                        bj = bj + 1
                    bi = bi + 1
                image_array = _append(image_array, window)
                j = j + 1
            i = i + 1
        return image_array
    def flatten(matrix):
        out = []
        i = 0
        while i < len(matrix):
            j = 0
            while j < len(matrix[i]):
                out = _append(out, matrix[i][j])
                j = j + 1
            i = i + 1
        return out
    def dot(a, b):
        sum = 0
        i = 0
        while i < len(a):
            sum = sum + a[i] * b[i]
            i = i + 1
        return sum
    def img_convolve(image, kernel):
        height = len(image)
        width = len(image[0])
        k_size = len(kernel)
        pad_size = k_size // 2
        padded = pad_edge(image, pad_size)
        image_array = im2col(padded, k_size, k_size)
        kernel_flat = flatten(kernel)
        dst = []
        idx = 0
        i = 0
        while i < height:
            row = []
            j = 0
            while j < width:
                val = dot(image_array[idx], kernel_flat)
                row = _append(row, val)
                idx = idx + 1
                j = j + 1
            dst = _append(dst, row)
            i = i + 1
        return dst
    def print_matrix(m):
        i = 0
        while i < len(m):
            line = ""
            j = 0
            while j < len(m[i]):
                if j > 0:
                    line = line + " "
                line = line + str(m[i][j])
                j = j + 1
            print(line)
            i = i + 1
    image = [[1, 2, 3, 0, 0], [4, 5, 6, 0, 0], [7, 8, 9, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
    laplace_kernel = [[0, 1, 0], [1, -4, 1], [0, 1, 0]]
    result = img_convolve(image, laplace_kernel)
    print_matrix(result)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
