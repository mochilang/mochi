# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    PI = 3.141592653589793
    def abs(x):
        if x < 0.0:
            return -x
        return x
    def sqrtApprox(x):
        if x <= 0.0:
            return 0.0
        guess = x
        i = 0
        while i < 10:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def expApprox(x):
        term = 1.0
        sum = 1.0
        n = 1
        while n < 10:
            term = term * x // (float(n))
            sum = sum + term
            n = n + 1
        return sum
    def vec_gaussian(mat, variance):
        i = 0
        out = []
        while i < len(mat):
            row = []
            j = 0
            while j < len(mat[i]):
                v = mat[i][j]
                e = -(v * v) // (2.0 * variance)
                row = row + [expApprox(e)]
                j = j + 1
            out = out + [row]
            i = i + 1
        return out
    def get_slice(img, x, y, kernel_size):
        half = kernel_size // 2
        i = x - half
        slice = []
        while i <= x + half:
            row = []
            j = y - half
            while j <= y + half:
                row = row + [img[i][j]]
                j = j + 1
            slice = slice + [row]
            i = i + 1
        return slice
    def get_gauss_kernel(kernel_size, spatial_variance):
        arr = []
        i = 0
        while i < kernel_size:
            row = []
            j = 0
            while j < kernel_size:
                di = float((i - (kernel_size // 2)))
                dj = float((j - (kernel_size // 2)))
                dist = sqrtApprox(di * di + dj * dj)
                row = row + [dist]
                j = j + 1
            arr = arr + [row]
            i = i + 1
        return vec_gaussian(arr, spatial_variance)
    def elementwise_sub(mat, value):
        res = []
        i = 0
        while i < len(mat):
            row = []
            j = 0
            while j < len(mat[i]):
                row = row + [mat[i][j] - value]
                j = j + 1
            res = res + [row]
            i = i + 1
        return res
    def elementwise_mul(a, b):
        res = []
        i = 0
        while i < len(a):
            row = []
            j = 0
            while j < len(a[i]):
                row = row + [a[i][j] * b[i][j]]
                j = j + 1
            res = res + [row]
            i = i + 1
        return res
    def matrix_sum(mat):
        total = 0.0
        i = 0
        while i < len(mat):
            j = 0
            while j < len(mat[i]):
                total = total + mat[i][j]
                j = j + 1
            i = i + 1
        return total
    def bilateral_filter(img, spatial_variance, intensity_variance, kernel_size):
        gauss_ker = get_gauss_kernel(kernel_size, spatial_variance)
        img_s = img
        center = img_s[kernel_size // 2][kernel_size // 2]
        img_i = elementwise_sub(img_s, center)
        img_ig = vec_gaussian(img_i, intensity_variance)
        weights = elementwise_mul(gauss_ker, img_ig)
        vals = elementwise_mul(img_s, weights)
        sum_weights = matrix_sum(weights)
        val = 0.0
        if sum_weights != 0.0:
            val = matrix_sum(vals) / sum_weights
        return val
    img = [[0.2, 0.3, 0.4], [0.3, 0.4, 0.5], [0.4, 0.5, 0.6]]
    result = bilateral_filter(img, 1.0, 1.0, 3)
    print(result)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
