# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def insertion_sort(a):
    i = 1
    while i < len(a):
        key = a[i]
        j = i - 1
        while j >= 0 and a[j] > key:
            a[j + 1] = a[j]
            j = j - 1
        a[j + 1] = key
        i = i + 1
    return a
def median_filter(gray_img, mask):
    rows = len(gray_img)
    cols = len(gray_img[0])
    bd = mask // 2
    result = []
    i = 0
    while i < rows:
        row = []
        j = 0
        while j < cols:
            row = _append(row, 0)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    i = bd
    while i < rows - bd:
        j = bd
        while j < cols - bd:
            kernel = []
            x = i - bd
            while x <= i + bd:
                y = j - bd
                while y <= j + bd:
                    kernel = _append(kernel, gray_img[x][y])
                    y = y + 1
                x = x + 1
            kernel = insertion_sort(kernel)
            idx = (mask * mask) // 2
            result[i][j] = kernel[idx]
            j = j + 1
        i = i + 1
    return result
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        img = [[10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10]]
        filtered = median_filter(img, 3)
        print(filtered)
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
