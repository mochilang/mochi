# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 06:45 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def make_matrix(rows, cols, value):
    result = []
    i = 0
    while i < rows:
        row = []
        j = 0
        while j < cols:
            row = _append(row, value)
            j = j + 1
        result = _append(result, row)
        i = i + 1
    return result
def my_laplacian(src, ksize):
    kernel = []
    if ksize == 1:
        kernel = [[0, -1, 0], [-1, 4, -1], [0, -1, 0]]
    else:
        if ksize == 3:
            kernel = [[0, 1, 0], [1, -4, 1], [0, 1, 0]]
        else:
            if ksize == 5:
                kernel = [[0, 0, -1, 0, 0], [0, -1, -2, -1, 0], [-1, -2, 16, -2, -1], [0, -1, -2, -1, 0], [0, 0, -1, 0, 0]]
            else:
                if ksize == 7:
                    kernel = [[0, 0, 0, -1, 0, 0, 0], [0, 0, -2, -3, -2, 0, 0], [0, -2, -7, -10, -7, -2, 0], [-1, -3, -10, 68, -10, -3, -1], [0, -2, -7, -10, -7, -2, 0], [0, 0, -2, -3, -2, 0, 0], [0, 0, 0, -1, 0, 0, 0]]
                else:
                    panic("ksize must be in (1, 3, 5, 7)")
    rows = len(src)
    cols = len(src[0])
    k = len(kernel)
    pad = k // 2
    output = make_matrix(rows, cols, 0)
    i = 0
    while i < rows:
        j = 0
        while j < cols:
            sum = 0
            ki = 0
            while ki < k:
                kj = 0
                while kj < k:
                    ii = i + ki - pad
                    jj = j + kj - pad
                    val = 0
                    if ii >= 0 and ii < rows and jj >= 0 and jj < cols:
                        val = src[ii][jj]
                    sum = sum + val * kernel[ki][kj]
                    kj = kj + 1
                ki = ki + 1
            output[i][j] = sum
            j = j + 1
        i = i + 1
    return output
image = [[0, 0, 0, 0, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 0, 0, 0, 0]]
result = my_laplacian(image, 3)
r = 0
while r < len(result):
    row_str = "["
    c = 0
    while c < len(result[r]):
        row_str = row_str + str(result[r][c])
        if c + 1 < len(result[r]):
            row_str = row_str + ", "
        c = c + 1
    row_str = row_str + "]"
    print(row_str)
    r = r + 1
