# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def get_neighbors_pixel(image, x, y, center):
        if x < 0 or y < 0:
            return 0
        if x >= len(image) or y >= len(image[0]):
            return 0
        if image[x][y] >= center:
            return 1
        return 0
    def local_binary_value(image, x, y):
        center = image[x][y]
        powers = [1, 2, 4, 8, 16, 32, 64, 128]
        neighbors = [get_neighbors_pixel(image, x - 1, y + 1, center), get_neighbors_pixel(image, x, y + 1, center), get_neighbors_pixel(image, x - 1, y, center), get_neighbors_pixel(image, x + 1, y + 1, center), get_neighbors_pixel(image, x + 1, y, center), get_neighbors_pixel(image, x + 1, y - 1, center), get_neighbors_pixel(image, x, y - 1, center), get_neighbors_pixel(image, x - 1, y - 1, center)]
        sum = 0
        i = 0
        while i < len(neighbors):
            sum = sum + neighbors[i] * powers[i]
            i = i + 1
        return sum
    image = [[10, 10, 10, 10, 10], [10, 20, 30, 20, 10], [10, 30, 40, 30, 10], [10, 20, 30, 20, 10], [10, 10, 10, 10, 10]]
    i = 0
    while i < len(image):
        j = 0
        line = ""
        while j < len(image[0]):
            value = local_binary_value(image, i, j)
            line = line + str(value)
            if j < len(image[0]) - 1:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 1
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
