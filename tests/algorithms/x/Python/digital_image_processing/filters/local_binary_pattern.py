# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 09:18 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)

def get_neighbors_pixel(image, x, y, center):
    if x < 0 or y < 0:
        return 0
    if x >= len(image) or y >= len(image[0]):
        return 0
    if image[x][y] >= center:
        return 1
    return 0
def local_binary_value(image, x, y):
    center = image[x][y]
    powers = [1, 2, 4, 8, 16, 32, 64, 128]
    neighbors = [get_neighbors_pixel(image, x - 1, y + 1, center), get_neighbors_pixel(image, x, y + 1, center), get_neighbors_pixel(image, x - 1, y, center), get_neighbors_pixel(image, x + 1, y + 1, center), get_neighbors_pixel(image, x + 1, y, center), get_neighbors_pixel(image, x + 1, y - 1, center), get_neighbors_pixel(image, x, y - 1, center), get_neighbors_pixel(image, x - 1, y - 1, center)]
    sum = 0
    i = 0
    while i < len(neighbors):
        sum = sum + neighbors[i] * powers[i]
        i = i + 1
    return sum
image = [[10, 10, 10, 10, 10], [10, 20, 30, 20, 10], [10, 30, 40, 30, 10], [10, 20, 30, 20, 10], [10, 10, 10, 10, 10]]
i = 0
while i < len(image):
    j = 0
    line = ""
    while j < len(image[0]):
        value = local_binary_value(image, i, j)
        line = line + str(value)
        if j < len(image[0]) - 1:
            line = line + " "
        j = j + 1
    print(line)
    i = i + 1
