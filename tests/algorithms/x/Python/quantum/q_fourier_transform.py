# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def to_bits(n, width):
    res = ""
    num = n
    w = width
    while w > 0:
        res = _str(num % 2) + res
        num = num // 2
        w = w - 1
    return res
def quantum_fourier_transform(number_of_qubits):
    if number_of_qubits <= 0:
        panic("number of qubits must be > 0.")
    if number_of_qubits > 10:
        panic("number of qubits too large to simulate(>10).")
    shots = 10000
    states = 1
    p = 0
    while p < number_of_qubits:
        states = states * 2
        p = p + 1
    per_state = shots // states
    counts = {}
    i = 0
    while i < states:
        counts[to_bits(i, number_of_qubits)] = per_state
        i = i + 1
    return counts
print("Total count for quantum fourier transform state is: " + _str(quantum_fourier_transform(3)))

