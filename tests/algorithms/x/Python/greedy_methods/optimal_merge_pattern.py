# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def index_of_min(xs):
        min_idx = 0
        i = 1
        while i < len(xs):
            if xs[i] < xs[min_idx]:
                min_idx = i
            i = i + 1
        return min_idx
    def remove_at(xs, idx):
        res = []
        i = 0
        while i < len(xs):
            if i != idx:
                res = _append(res, xs[i])
            i = i + 1
        return res
    def optimal_merge_pattern(files):
        arr = files
        optimal_merge_cost = 0
        while len(arr) > 1:
            temp = 0
            k = 0
            while k < 2:
                min_idx = index_of_min(arr)
                temp = temp + arr[min_idx]
                arr = remove_at(arr, min_idx)
                k = k + 1
            arr = _append(arr, temp)
            optimal_merge_cost = optimal_merge_cost + temp
        return optimal_merge_cost
    print(optimal_merge_pattern([2, 3, 4]))
    print(optimal_merge_pattern([5, 10, 20, 30, 30]))
    print(optimal_merge_pattern([8, 8, 8, 8, 8]))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

