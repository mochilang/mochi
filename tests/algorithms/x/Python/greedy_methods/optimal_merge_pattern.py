# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]

def index_of_min(xs):
    min_idx = 0
    i = 1
    while i < len(xs):
        if xs[i] < xs[min_idx]:
            min_idx = i
        i = i + 1
    return min_idx
def remove_at(xs, idx):
    res = []
    i = 0
    while i < len(xs):
        if i != idx:
            res = _append(res, xs[i])
        i = i + 1
    return res
def optimal_merge_pattern(files):
    arr = files
    optimal_merge_cost = 0
    while len(arr) > 1:
        temp = 0
        k = 0
        while k < 2:
            min_idx = index_of_min(arr)
            temp = temp + arr[min_idx]
            arr = remove_at(arr, min_idx)
            k = k + 1
        arr = _append(arr, temp)
        optimal_merge_cost = optimal_merge_cost + temp
    return optimal_merge_cost
print(optimal_merge_pattern([2, 3, 4]))
print(optimal_merge_pattern([5, 10, 20, 30, 30]))
print(optimal_merge_pattern([8, 8, 8, 8, 8]))

