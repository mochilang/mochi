# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Item:
    value: float
    weight: float

def sort_by_ratio_desc(arr):
    i = 1
    while i < len(arr):
        key = arr[i]
        j = i - 1
        while j >= 0:
            current = arr[j]
            if current.value / current.weight < key.value / key.weight:
                arr[j + 1] = current
                j = j - 1
            else:
                break
        arr[j + 1] = key
        i = i + 1
    return arr
def sum_first(arr, k):
    s = 0.0
    i = 0
    while i < k and i < len(arr):
        s = s + arr[i]
        i = i + 1
    return s
def frac_knapsack(vl, wt, w, n):
    items = []
    i = 0
    while i < len(vl) and i < len(wt):
        items = _append(items, Item(value=vl[i], weight=wt[i]))
        i = i + 1
    items = sort_by_ratio_desc(items)
    values = []
    weights = []
    i = 0
    while i < len(items):
        itm = items[i]
        values = _append(values, itm.value)
        weights = _append(weights, itm.weight)
        i = i + 1
    acc = []
    total = 0.0
    i = 0
    while i < len(weights):
        total = total + weights[i]
        acc = _append(acc, total)
        i = i + 1
    k = 0
    while k < len(acc) and w >= acc[k]:
        k = k + 1
    if k == 0:
        return 0.0
    if k >= len(values):
        return sum_first(values, len(values))
    if k != n:
        return sum_first(values, k) + (w - acc[k - 1]) * values[k] / weights[k]
    return sum_first(values, k)
vl = [60.0, 100.0, 120.0]
wt = [10.0, 20.0, 30.0]
result = frac_knapsack(vl, wt, 50.0, 3)
print(_str(result))

