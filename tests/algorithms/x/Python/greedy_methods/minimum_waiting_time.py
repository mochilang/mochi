# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def insertion_sort(a):
        i = 1
        while i < len(a):
            key = a[i]
            j = i - 1
            while j >= 0 and a[j] > key:
                a[j + 1] = a[j]
                j = j - 1
            a[j + 1] = key
            i = i + 1
        return a
    def minimum_waiting_time(queries):
        n = len(queries)
        if n == 0 or n == 1:
            return 0
        sorted_ = insertion_sort(queries)
        total = 0
        i = 0
        while i < n:
            total = total + sorted_[i] * (n - i - 1)
            i = i + 1
        return total
    print(minimum_waiting_time([3, 2, 1, 2, 6]))
    print(minimum_waiting_time([3, 2, 1]))
    print(minimum_waiting_time([1, 2, 3, 4]))
    print(minimum_waiting_time([5, 5, 5, 5]))
    print(minimum_waiting_time([]))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

