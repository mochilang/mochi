# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class KnapsackResult:
        max_value: float
        fractions: [float]
    def sort_by_ratio(index, ratio):
        i = 1
        while i < len(index):
            key = index[i]
            key_ratio = ratio[key]
            j = i - 1
            while j >= 0 and ratio[index[j]] < key_ratio:
                index[j + 1] = index[j]
                j = j - 1
            index[j + 1] = key
            i = i + 1
        return index
    def fractional_knapsack(value, weight, capacity):
        n = len(value)
        index = []
        i = 0
        while i < n:
            index = _append(index, i)
            i = i + 1
        ratio = []
        i = 0
        while i < n:
            ratio = _append(ratio, value[i] / weight[i])
            i = i + 1
        index = sort_by_ratio(index, ratio)
        fractions = []
        i = 0
        while i < n:
            fractions = _append(fractions, 0.0)
            i = i + 1
        max_value = 0.0
        idx = 0
        while idx < len(index):
            item = index[idx]
            if weight[item] <= capacity:
                fractions[item] = 1.0
                max_value = max_value + value[item]
                capacity = capacity - weight[item]
            else:
                fractions[item] = capacity / weight[item]
                max_value = max_value + value[item] * capacity / weight[item]
                break
            idx = idx + 1
        return KnapsackResult(max_value=max_value, fractions=fractions)
    v = [1.0, 3.0, 5.0, 7.0, 9.0]
    w = [0.9, 0.7, 0.5, 0.3, 0.1]
    print(dataclasses.asdict(fractional_knapsack(v, w, 5.0)))
    print(dataclasses.asdict(fractional_knapsack([1.0, 3.0, 5.0, 7.0], [0.9, 0.7, 0.5, 0.3], 30.0)))
    print(dataclasses.asdict(fractional_knapsack([], [], 30.0)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

