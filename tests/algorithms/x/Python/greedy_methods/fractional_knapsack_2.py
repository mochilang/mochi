# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class KnapsackResult:
    max_value: float
    fractions: [float]

def sort_by_ratio(index, ratio):
    i = 1
    while i < len(index):
        key = index[i]
        key_ratio = ratio[key]
        j = i - 1
        while j >= 0 and ratio[index[j]] < key_ratio:
            index[j + 1] = index[j]
            j = j - 1
        index[j + 1] = key
        i = i + 1
    return index
def fractional_knapsack(value, weight, capacity):
    n = len(value)
    index = []
    i = 0
    while i < n:
        index = _append(index, i)
        i = i + 1
    ratio = []
    i = 0
    while i < n:
        ratio = _append(ratio, value[i] / weight[i])
        i = i + 1
    index = sort_by_ratio(index, ratio)
    fractions = []
    i = 0
    while i < n:
        fractions = _append(fractions, 0.0)
        i = i + 1
    max_value = 0.0
    idx = 0
    while idx < len(index):
        item = index[idx]
        if weight[item] <= capacity:
            fractions[item] = 1.0
            max_value = max_value + value[item]
            capacity = capacity - weight[item]
        else:
            fractions[item] = capacity / weight[item]
            max_value = max_value + value[item] * capacity / weight[item]
            break
        idx = idx + 1
    return KnapsackResult(max_value=max_value, fractions=fractions)
v = [1.0, 3.0, 5.0, 7.0, 9.0]
w = [0.9, 0.7, 0.5, 0.3, 0.1]
print(dataclasses.asdict(fractional_knapsack(v, w, 5.0)))
print(dataclasses.asdict(fractional_knapsack([1.0, 3.0, 5.0, 7.0], [0.9, 0.7, 0.5, 0.3], 30.0)))
print(dataclasses.asdict(fractional_knapsack([], [], 30.0)))

