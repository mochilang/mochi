# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class GasStation:
        gas_quantity: int
        cost: int
    def get_gas_stations(gas_quantities, costs):
        stations = []
        i = 0
        while i < len(gas_quantities):
            stations = _append(stations, GasStation(gas_quantity=gas_quantities[i], cost=costs[i]))
            i = i + 1
        return stations
    def can_complete_journey(gas_stations):
        total_gas = 0
        total_cost = 0
        i = 0
        while i < len(gas_stations):
            total_gas = total_gas + gas_stations[i].gas_quantity
            total_cost = total_cost + gas_stations[i].cost
            i = i + 1
        if total_gas < total_cost:
            return -1
        start = 0
        net = 0
        i = 0
        while i < len(gas_stations):
            station = gas_stations[i]
            net = net + station.gas_quantity - station.cost
            if net < 0:
                start = i + 1
                net = 0
            i = i + 1
        return start
    example1 = get_gas_stations([1, 2, 3, 4, 5], [3, 4, 5, 1, 2])
    print(_str(can_complete_journey(example1)))
    example2 = get_gas_stations([2, 3, 4], [3, 4, 3])
    print(_str(can_complete_journey(example2)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

