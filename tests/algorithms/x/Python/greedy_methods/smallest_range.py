# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 09:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

@dataclass
class HeapItem:
    value: int
    list_idx: int
    elem_idx: int

INF = 1000000000
def smallest_range(nums):
    heap = []
    current_max = -INF
    i = 0
    while i < len(nums):
        first_val = nums[i][0]
        heap = _append(heap, HeapItem(value=first_val, list_idx=i, elem_idx=0))
        if first_val > current_max:
            current_max = first_val
        i = i + 1
    best = [-INF, INF]
    while len(heap) > 0:
        min_idx = 0
        j = 1
        while j < len(heap):
            hj = heap[j]
            hmin = heap[min_idx]
            if hj.value < hmin.value:
                min_idx = j
            j = j + 1
        item = heap[min_idx]
        new_heap = []
        k = 0
        while k < len(heap):
            if k != min_idx:
                new_heap = _append(new_heap, heap[k])
            k = k + 1
        heap = new_heap
        current_min = item.value
        if current_max - current_min < best[1] - best[0]:
            best = [current_min, current_max]
        if item.elem_idx == len(nums[item.list_idx]) - 1:
            break
        next_val = nums[item.list_idx][item.elem_idx + 1]
        heap = _append(heap, HeapItem(value=next_val, list_idx=item.list_idx, elem_idx=item.elem_idx + 1))
        if next_val > current_max:
            current_max = next_val
    return best
def list_to_string(arr):
    s = "["
    i = 0
    while i < len(arr):
        s = s + _str(arr[i])
        if i < len(arr) - 1:
            s = s + ", "
        i = i + 1
    return s + "]"
def main():
    result1 = smallest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]])
    print(list_to_string(result1))
    result2 = smallest_range([[1, 2, 3], [1, 2, 3], [1, 2, 3]])
    print(list_to_string(result2))
main()

