# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Item:
        weight: int
        value: int
    def ratio(item):
        return (float(item.value)) / (float(item.weight))
    def fractional_cover(items, capacity):
        if capacity < 0:
            panic("Capacity cannot be negative")
        total = 0.0
        remaining = capacity
        sorted_ = [it for it in sorted([it for it in items], key=lambda it: ratio(it), reverse=True)]
        idx = 0
        while idx < len(sorted_) and remaining > 0:
            item = sorted_[idx]
            take = (item.weight if item.weight < remaining else remaining)
            total = total + (float(take)) * ratio(item)
            remaining = remaining - take
            idx = idx + 1
        return total
    items1 = [Item(weight=10, value=60), Item(weight=20, value=100), Item(weight=30, value=120)]
    print(_str(fractional_cover(items1, 50)))
    items2 = [Item(weight=20, value=100), Item(weight=30, value=120), Item(weight=10, value=60)]
    print(_str(fractional_cover(items2, 25)))
    items3 = []
    print(_str(fractional_cover(items3, 50)))
    items4 = [Item(weight=10, value=60)]
    print(_str(fractional_cover(items4, 5)))
    print(_str(fractional_cover(items4, 1)))
    print(_str(fractional_cover(items4, 0)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

