# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:32 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)

@dataclass
class Item:
    weight: int
    value: int

def ratio(item):
    return (float(item.value)) // (float(item.weight))
def fractional_cover(items, capacity):
    if capacity < 0:
        panic("Capacity cannot be negative")
    total = 0.0
    remaining = capacity
    sorted = [it for it in sorted([it for it in items], key=lambda it: ratio(it), reverse=True)]
    idx = 0
    while idx < len(sorted) and remaining > 0:
        item = sorted[idx]
        take = (item.weight if item.weight < remaining else remaining)
        total = total + (float(take)) * ratio(item)
        remaining = remaining - take
        idx = idx + 1
    return total
items1 = [Item(weight=10, value=60), Item(weight=20, value=100), Item(weight=30, value=120)]
print(str(fractional_cover(items1, 50)))
items2 = [Item(weight=20, value=100), Item(weight=30, value=120), Item(weight=10, value=60)]
print(str(fractional_cover(items2, 25)))
items3 = []
print(str(fractional_cover(items3, 50)))
items4 = [Item(weight=10, value=60)]
print(str(fractional_cover(items4, 5)))
print(str(fractional_cover(items4, 1)))
print(str(fractional_cover(items4, 0)))
