# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    PI = 3.141592653589793
    def abs(x):
        if x < 0.0:
            return -x
        return x
    def to_radians(deg):
        return deg * PI / 180.0
    def sin_taylor(x):
        term = x
        sum = x
        i = 1
        while i < 10:
            k1 = 2.0 * (float(i))
            k2 = k1 + 1.0
            term = -term * x * x / (k1 * k2)
            sum = sum + term
            i = i + 1
        return sum
    def cos_taylor(x):
        term = 1.0
        sum = 1.0
        i = 1
        while i < 10:
            k1 = 2.0 * (float(i)) - 1.0
            k2 = 2.0 * (float(i))
            term = -term * x * x / (k1 * k2)
            sum = sum + term
            i = i + 1
        return sum
    def rect(mag, angle):
        c = cos_taylor(angle)
        s = sin_taylor(angle)
        return [mag * c, mag * s]
    def multiply(a, b):
        return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]]
    def apparent_power(voltage, current, voltage_angle, current_angle):
        vrad = to_radians(voltage_angle)
        irad = to_radians(current_angle)
        vrect = rect(voltage, vrad)
        irect = rect(current, irad)
        result = multiply(vrect, irect)
        return result
    def approx_equal(a, b, eps):
        return abs(a[0] - b[0]) < eps and abs(a[1] - b[1]) < eps
    # test zero phase
    s = apparent_power(100.0, 5.0, 0.0, 0.0)
    expected = [500.0, 0.0]
    assert approx_equal(s, expected, 0.001)
    # test orthogonal voltage
    s = apparent_power(100.0, 5.0, 90.0, 0.0)
    expected = [0.0, 500.0]
    assert approx_equal(s, expected, 0.5)
    # test negative angles
    s = apparent_power(100.0, 5.0, -45.0, -60.0)
    expected = [-129.40952255126027, -482.9629131445341]
    assert approx_equal(s, expected, 0.001)
    # test another case
    s = apparent_power(200.0, 10.0, -30.0, -90.0)
    expected = [-1000.0, -1732.0508075688776]
    assert approx_equal(s, expected, 0.001)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

