# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def ohms_law(voltage, current, resistance):
        zeros = 0
        if voltage == 0.0:
            zeros = zeros + 1
        if current == 0.0:
            zeros = zeros + 1
        if resistance == 0.0:
            zeros = zeros + 1
        if zeros != 1:
            print("One and only one argument must be 0")
            return {}
        if resistance < 0.0:
            print("Resistance cannot be negative")
            return {}
        if voltage == 0.0:
            return {"voltage": current * resistance}
        if current == 0.0:
            return {"current": voltage / resistance}
        return {"resistance": voltage / current}
    print(json.dumps(ohms_law(10.0, 0.0, 5.0), indent=2))
    print(json.dumps(ohms_law(-10.0, 1.0, 0.0), indent=2))
    print(json.dumps(ohms_law(0.0, -1.5, 2.0), indent=2))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

