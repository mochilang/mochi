# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import math
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def expApprox(x):
        if x < 0.0:
            return 1.0 / expApprox(-x)
        if x > 1.0:
            half = expApprox(x / 2.0)
            return half * half
        sum = 1.0
        term = 1.0
        n = 1
        while n < 20:
            term = term * x / (float(n))
            sum = sum + term
            n = n + 1
        return sum
    def floor(x):
        i = int(x)
        if (float(i)) > x:
            i = i - 1
        return float(i)
    def pow10(n):
        result = 1.0
        i = 0
        while i < n:
            result = result * 10.0
            i = i + 1
        return result
    def round(x, n):
        m = pow10(n)
        return math.floor(x * m + 0.5) / m
    def charging_inductor(source_voltage, resistance, inductance, time):
        if source_voltage <= 0.0:
            panic("Source voltage must be positive.")
        if resistance <= 0.0:
            panic("Resistance must be positive.")
        if inductance <= 0.0:
            panic("Inductance must be positive.")
        exponent = (-time * resistance) / inductance
        current = source_voltage / resistance * (1.0 - expApprox(exponent))
        return round(current, 3)
    print(charging_inductor(5.8, 1.5, 2.3, 2.0))
    print(charging_inductor(8.0, 5.0, 3.0, 2.0))
    print(charging_inductor(8.0, 5.0 * pow10(2), 3.0, 2.0))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

