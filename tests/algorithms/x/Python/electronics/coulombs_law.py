# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    COULOMBS_CONSTANT = 8.988e+09
    def abs(x):
        if x < 0.0:
            return -x
        return x
    def sqrtApprox(x):
        if x <= 0.0:
            return 0.0
        guess = x
        i = 0
        while i < 20:
            guess = (guess + x / guess) / 2.0
            i = i + 1
        return guess
    def coulombs_law(force, charge1, charge2, distance):
        charge_product = abs(charge1 * charge2)
        zero_count = 0
        if force == 0.0:
            zero_count = zero_count + 1
        if charge1 == 0.0:
            zero_count = zero_count + 1
        if charge2 == 0.0:
            zero_count = zero_count + 1
        if distance == 0.0:
            zero_count = zero_count + 1
        if zero_count != 1:
            panic("One and only one argument must be 0")
        if distance < 0.0:
            panic("Distance cannot be negative")
        if force == 0.0:
            f = COULOMBS_CONSTANT * charge_product / (distance * distance)
            return {"force": f}
        if charge1 == 0.0:
            c1 = abs(force) * (distance * distance) / (COULOMBS_CONSTANT * charge2)
            return {"charge1": c1}
        if charge2 == 0.0:
            c2 = abs(force) * (distance * distance) / (COULOMBS_CONSTANT * charge1)
            return {"charge2": c2}
        d = sqrtApprox(COULOMBS_CONSTANT * charge_product / abs(force))
        return {"distance": d}
    def print_map(m):
        for k in m:
            print("{\"" + k + "\": " + _str(m.get(k, 0.0)) + "}")
    print_map(coulombs_law(0.0, 3.0, 5.0, 2000.0))
    print_map(coulombs_law(10.0, 3.0, 5.0, 0.0))
    print_map(coulombs_law(10.0, 0.0, 5.0, 2000.0))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

