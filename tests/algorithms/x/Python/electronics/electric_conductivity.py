# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-13 07:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    ELECTRON_CHARGE = 1.6021e-19
    @dataclass
    class Result:
        kind: str
        value: float
    def electric_conductivity(conductivity, electron_conc, mobility):
        zero_count = 0
        if conductivity == 0.0:
            zero_count = zero_count + 1
        if electron_conc == 0.0:
            zero_count = zero_count + 1
        if mobility == 0.0:
            zero_count = zero_count + 1
        if zero_count != 1:
            panic("You cannot supply more or less than 2 values")
        if conductivity < 0.0:
            panic("Conductivity cannot be negative")
        if electron_conc < 0.0:
            panic("Electron concentration cannot be negative")
        if mobility < 0.0:
            panic("mobility cannot be negative")
        if conductivity == 0.0:
            return Result(kind="conductivity", value=mobility * electron_conc * ELECTRON_CHARGE)
        if electron_conc == 0.0:
            return Result(kind="electron_conc", value=conductivity / (mobility * ELECTRON_CHARGE))
        return Result(kind="mobility", value=conductivity / (electron_conc * ELECTRON_CHARGE))
    r1 = electric_conductivity(25.0, 100.0, 0.0)
    r2 = electric_conductivity(0.0, 1600.0, 200.0)
    r3 = electric_conductivity(1000.0, 0.0, 1200.0)
    print(r1.kind + " " + _str(r1.value))
    print(r2.kind + " " + _str(r2.value))
    print(r3.kind + " " + _str(r3.value))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

