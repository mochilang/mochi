# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class Result:
    name: str
    value: float

def absf(x):
    if x < 0.0:
        return -x
    return x
def pow10(n):
    p = 1.0
    i = 0
    while i < n:
        p = p * 10.0
        i = i + 1
    return p
def round_to(x, n):
    m = pow10(n)
    return floor(x * m + 0.5) / m
def electric_power(voltage, current, power):
    zeros = 0
    if voltage == 0.0:
        zeros = zeros + 1
    if current == 0.0:
        zeros = zeros + 1
    if power == 0.0:
        zeros = zeros + 1
    if zeros != 1:
        panic("Exactly one argument must be 0")
    else:
        if power < 0.0:
            panic("Power cannot be negative in any electrical/electronics system")
        else:
            if voltage == 0.0:
                return Result(name="voltage", value=power // current)
            else:
                if current == 0.0:
                    return Result(name="current", value=power // voltage)
                else:
                    if power == 0.0:
                        p = absf(voltage * current)
                        return Result(name="power", value=round_to(p, 2))
                    else:
                        panic("Unhandled case")
def str_result(r):
    return "Result(name='" + r.name + "', value=" + str(r.value) + ")"
r1 = electric_power(0.0, 2.0, 5.0)
print(str_result(r1))
r2 = electric_power(2.0, 2.0, 0.0)
print(str_result(r2))
r3 = electric_power(-2.0, 3.0, 0.0)
print(str_result(r3))
r4 = electric_power(2.2, 2.2, 0.0)
print(str_result(r4))
r5 = electric_power(2.0, 0.0, 6.0)
print(str_result(r5))
