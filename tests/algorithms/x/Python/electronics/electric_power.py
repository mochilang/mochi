# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import math
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Result:
        name: str
        value: float
    def absf(x):
        if x < 0.0:
            return -x
        return x
    def pow10(n):
        p = 1.0
        i = 0
        while i < n:
            p = p * 10.0
            i = i + 1
        return p
    def round_to(x, n):
        m = pow10(n)
        return math.floor(x * m + 0.5) / m
    def electric_power(voltage, current, power):
        zeros = 0
        if voltage == 0.0:
            zeros = zeros + 1
        if current == 0.0:
            zeros = zeros + 1
        if power == 0.0:
            zeros = zeros + 1
        if zeros != 1:
            panic("Exactly one argument must be 0")
        else:
            if power < 0.0:
                panic("Power cannot be negative in any electrical/electronics system")
            else:
                if voltage == 0.0:
                    return Result(name="voltage", value=power / current)
                else:
                    if current == 0.0:
                        return Result(name="current", value=power / voltage)
                    else:
                        if power == 0.0:
                            p = absf(voltage * current)
                            return Result(name="power", value=round_to(p, 2))
                        else:
                            panic("Unhandled case")
    def str_result(r):
        return "Result(name='" + r.name + "', value=" + _str(r.value) + ")"
    r1 = electric_power(0.0, 2.0, 5.0)
    print(str_result(r1))
    r2 = electric_power(2.0, 2.0, 0.0)
    print(str_result(r2))
    r3 = electric_power(-2.0, 3.0, 0.0)
    print(str_result(r3))
    r4 = electric_power(2.2, 2.2, 0.0)
    print(str_result(r4))
    r5 = electric_power(2.0, 0.0, 6.0)
    print(str_result(r5))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

