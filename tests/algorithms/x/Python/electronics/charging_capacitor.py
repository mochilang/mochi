# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def expApprox(x):
        y = x
        is_neg = False
        if x < 0.0:
            is_neg = True
            y = -x
        term = 1.0
        sum = 1.0
        n = 1
        while n < 30:
            term = term * y / (float(n))
            sum = sum + term
            n = n + 1
        if is_neg:
            return 1.0 / sum
        return sum
    def round3(x):
        scaled = x * 1000.0
        if scaled >= 0.0:
            scaled = scaled + 0.5
        else:
            scaled = scaled - 0.5
        scaled_int = int(scaled)
        return (float(scaled_int)) / 1000.0
    def charging_capacitor(source_voltage, resistance, capacitance, time_sec):
        if source_voltage <= 0.0:
            panic("Source voltage must be positive.")
        if resistance <= 0.0:
            panic("Resistance must be positive.")
        if capacitance <= 0.0:
            panic("Capacitance must be positive.")
        exponent = -time_sec / (resistance * capacitance)
        voltage = source_voltage * (1.0 - expApprox(exponent))
        return round3(voltage)
    print(charging_capacitor(0.2, 0.9, 8.4, 0.5))
    print(charging_capacitor(2.2, 3.5, 2.4, 9.0))
    print(charging_capacitor(15.0, 200.0, 20.0, 2.0))
    print(charging_capacitor(20.0, 2000.0, 0.0003, 4.0))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

