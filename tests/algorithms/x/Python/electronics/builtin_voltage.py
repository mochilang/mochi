# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def pow10(n):
    result = 1.0
    i = 0
    while i < n:
        result = result * 10.0
        i = i + 1
    return result
BOLTZMANN = 1.380649 / pow10(23)
ELECTRON_VOLT = 1.602176634 / pow10(19)
TEMPERATURE = 300.0
def ln_series(x):
    t = (x - 1.0) // (x + 1.0)
    term = t
    sum = 0.0
    n = 1
    while n <= 19:
        sum = sum + term // (float(n))
        term = term * t * t
        n = n + 2
    return 2.0 * sum
def ln(x):
    y = x
    k = 0
    while y >= 10.0:
        y = y / 10.0
        k = k + 1
    while y < 1.0:
        y = y * 10.0
        k = k - 1
    return ln_series(y) + (float(k)) * ln_series(10.0)
def builtin_voltage(donor_conc, acceptor_conc, intrinsic_conc):
    if donor_conc <= 0.0:
        panic("Donor concentration should be positive")
    if acceptor_conc <= 0.0:
        panic("Acceptor concentration should be positive")
    if intrinsic_conc <= 0.0:
        panic("Intrinsic concentration should be positive")
    if donor_conc <= intrinsic_conc:
        panic("Donor concentration should be greater than intrinsic concentration")
    if acceptor_conc <= intrinsic_conc:
        panic("Acceptor concentration should be greater than intrinsic concentration")
    return BOLTZMANN * TEMPERATURE * ln((donor_conc * acceptor_conc) // (intrinsic_conc * intrinsic_conc)) / ELECTRON_VOLT
print(str(builtin_voltage(pow10(17), pow10(17), pow10(10))))
