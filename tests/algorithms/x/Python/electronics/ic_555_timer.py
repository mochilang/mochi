# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def astable_frequency(resistance_1, resistance_2, capacitance):
        if resistance_1 <= 0.0 or resistance_2 <= 0.0 or capacitance <= 0.0:
            panic("All values must be positive")
        return (1.44 / ((resistance_1 + 2.0 * resistance_2) * capacitance)) * 1e+06
    def astable_duty_cycle(resistance_1, resistance_2):
        if resistance_1 <= 0.0 or resistance_2 <= 0.0:
            panic("All values must be positive")
        return (resistance_1 + resistance_2) / (resistance_1 + 2.0 * resistance_2) * 100.0
    print(astable_frequency(45.0, 45.0, 7.0))
    print(astable_duty_cycle(45.0, 45.0))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

