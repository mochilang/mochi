# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class CarrierResult:
    name: str
    value: float

def sqrtApprox(x):
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def carrier_concentration(electron_conc, hole_conc, intrinsic_conc):
    zero_count = 0
    if electron_conc == 0.0:
        zero_count = zero_count + 1
    if hole_conc == 0.0:
        zero_count = zero_count + 1
    if intrinsic_conc == 0.0:
        zero_count = zero_count + 1
    if zero_count != 1:
        panic("You cannot supply more or less than 2 values")
    if electron_conc < 0.0:
        panic("Electron concentration cannot be negative in a semiconductor")
    if hole_conc < 0.0:
        panic("Hole concentration cannot be negative in a semiconductor")
    if intrinsic_conc < 0.0:
        panic("Intrinsic concentration cannot be negative in a semiconductor")
    if electron_conc == 0.0:
        return CarrierResult(name="electron_conc", value=(intrinsic_conc * intrinsic_conc) // hole_conc)
    if hole_conc == 0.0:
        return CarrierResult(name="hole_conc", value=(intrinsic_conc * intrinsic_conc) // electron_conc)
    if intrinsic_conc == 0.0:
        return CarrierResult(name="intrinsic_conc", value=sqrtApprox(electron_conc * hole_conc))
    return CarrierResult(name="", value=-1.0)
r1 = carrier_concentration(25.0, 100.0, 0.0)
print(r1.name + ", " + str(r1.value))
r2 = carrier_concentration(0.0, 1600.0, 200.0)
print(r2.name + ", " + str(r2.value))
r3 = carrier_concentration(1000.0, 0.0, 1200.0)
print(r3.name + ", " + str(r3.value))
