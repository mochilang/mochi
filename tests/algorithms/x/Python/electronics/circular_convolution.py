# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]

def floor(x):
    i = int(x)
    if (float(i)) > x:
        i = i - 1
    return float(i)
def pow10(n):
    p = 1.0
    i = 0
    while i < n:
        p = p * 10.0
        i = i + 1
    return p
def roundn(x, n):
    m = pow10(n)
    return floor(x * m + 0.5) / m
def pad(signal, target):
    s = signal
    while len(s) < target:
        s = _append(s, 0.0)
    return s
def circular_convolution(a, b):
    n1 = len(a)
    n2 = len(b)
    n = (n1 if n1 > n2 else n2)
    x = pad(a, n)
    y = pad(b, n)
    res = []
    i = 0
    while i < n:
        sum = 0.0
        k = 0
        while k < n:
            j = (i - k) % n
            idx = (j + n if j < 0 else j)
            sum = sum + x[k] * y[idx]
            k = k + 1
        res = _append(res, roundn(sum, 2))
        i = i + 1
    return res
example1 = circular_convolution([2.0, 1.0, 2.0, -1.0], [1.0, 2.0, 3.0, 4.0])
print(str(example1))
example2 = circular_convolution([0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6], [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])
print(str(example2))
example3 = circular_convolution([-1.0, 1.0, 2.0, -2.0], [0.5, 1.0, -1.0, 2.0, 0.75])
print(str(example3))
example4 = circular_convolution([1.0, -1.0, 2.0, 3.0, -1.0], [1.0, 2.0, 3.0])
print(str(example4))
