# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import math
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def floor(x):
        i = int(x)
        if (float(i)) > x:
            i = i - 1
        return float(i)
    def pow10(n):
        p = 1.0
        i = 0
        while i < n:
            p = p * 10.0
            i = i + 1
        return p
    def roundn(x, n):
        m = pow10(n)
        return math.floor(x * m + 0.5) / m
    def pad(signal, target):
        s = signal
        while len(s) < target:
            s = _append(s, 0.0)
        return s
    def circular_convolution(a, b):
        n1 = len(a)
        n2 = len(b)
        n = (n1 if n1 > n2 else n2)
        x = pad(a, n)
        y = pad(b, n)
        res = []
        i = 0
        while i < n:
            sum = 0.0
            k = 0
            while k < n:
                j = (i - k) % n
                idx = (j + n if j < 0 else j)
                sum = sum + x[k] * y[idx]
                k = k + 1
            res = _append(res, roundn(sum, 2))
            i = i + 1
        return res
    example1 = circular_convolution([2.0, 1.0, 2.0, -1.0], [1.0, 2.0, 3.0, 4.0])
    print(_str(example1))
    example2 = circular_convolution([0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6], [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])
    print(_str(example2))
    example3 = circular_convolution([-1.0, 1.0, 2.0, -2.0], [0.5, 1.0, -1.0, 2.0, 0.75])
    print(_str(example3))
    example4 = circular_convolution([1.0, -1.0, 2.0, 3.0, -1.0], [1.0, 2.0, 3.0])
    print(_str(example4))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

