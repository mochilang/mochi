# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    valid_colors = ["Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White", "Gold", "Silver"]
    significant_figures_color_values = {"Black": 0, "Brown": 1, "Red": 2, "Orange": 3, "Yellow": 4, "Green": 5, "Blue": 6, "Violet": 7, "Grey": 8, "White": 9}
    multiplier_color_values = {"Black": 1.0, "Brown": 10.0, "Red": 100.0, "Orange": 1000.0, "Yellow": 10000.0, "Green": 100000.0, "Blue": 1e+06, "Violet": 1e+07, "Grey": 1e+08, "White": 1e+09, "Gold": 0.1, "Silver": 0.01}
    tolerance_color_values = {"Brown": 1.0, "Red": 2.0, "Orange": 0.05, "Yellow": 0.02, "Green": 0.5, "Blue": 0.25, "Violet": 0.1, "Grey": 0.01, "Gold": 5.0, "Silver": 10.0}
    temperature_coeffecient_color_values = {"Black": 250, "Brown": 100, "Red": 50, "Orange": 15, "Yellow": 25, "Green": 20, "Blue": 10, "Violet": 5, "Grey": 1}
    def contains(list, value):
        for c in list:
            if c == value:
                return True
        return False
    def get_significant_digits(colors):
        digit = 0
        for color in colors:
            if not (color in significant_figures_color_values):
                panic(color + " is not a valid color for significant figure bands")
            digit = digit * 10 + significant_figures_color_values.get(color, 0)
        return digit
    def get_multiplier(color):
        if not (color in multiplier_color_values):
            panic(color + " is not a valid color for multiplier band")
        return multiplier_color_values.get(color, 0.0)
    def get_tolerance(color):
        if not (color in tolerance_color_values):
            panic(color + " is not a valid color for tolerance band")
        return tolerance_color_values.get(color, 0.0)
    def get_temperature_coeffecient(color):
        if not (color in temperature_coeffecient_color_values):
            panic(color + " is not a valid color for temperature coeffecient band")
        return temperature_coeffecient_color_values.get(color, 0)
    def get_band_type_count(total, typ):
        if total == 3:
            if typ == "significant":
                return 2
            if typ == "multiplier":
                return 1
            panic(typ + " is not valid for a 3 band resistor")
        else:
            if total == 4:
                if typ == "significant":
                    return 2
                if typ == "multiplier":
                    return 1
                if typ == "tolerance":
                    return 1
                panic(typ + " is not valid for a 4 band resistor")
            else:
                if total == 5:
                    if typ == "significant":
                        return 3
                    if typ == "multiplier":
                        return 1
                    if typ == "tolerance":
                        return 1
                    panic(typ + " is not valid for a 5 band resistor")
                else:
                    if total == 6:
                        if typ == "significant":
                            return 3
                        if typ == "multiplier":
                            return 1
                        if typ == "tolerance":
                            return 1
                        if typ == "temp_coeffecient":
                            return 1
                        panic(typ + " is not valid for a 6 band resistor")
                    else:
                        panic(_str(total) + " is not a valid number of bands")
    def check_validity(number_of_bands, colors):
        if number_of_bands < 3 or number_of_bands > 6:
            panic("Invalid number of bands. Resistor bands must be 3 to 6")
        if number_of_bands != len(colors):
            panic("Expecting " + _str(number_of_bands) + " colors, provided " + _str(len(colors)) + " colors")
        for color in colors:
            if not contains(valid_colors, color):
                panic(color + " is not a valid color")
        return True
    def calculate_resistance(number_of_bands, color_code_list):
        check_validity(number_of_bands, color_code_list)
        sig_count = get_band_type_count(number_of_bands, "significant")
        significant_colors = color_code_list[0:sig_count]
        significant_digits = get_significant_digits(significant_colors)
        multiplier_color = color_code_list[sig_count]
        multiplier = get_multiplier(multiplier_color)
        tolerance = 20.0
        if number_of_bands >= 4:
            tolerance_color = color_code_list[sig_count + 1]
            tolerance = get_tolerance(tolerance_color)
        temp_coeff = 0
        if number_of_bands == 6:
            temp_color = color_code_list[sig_count + 2]
            temp_coeff = get_temperature_coeffecient(temp_color)
        resistance_value = multiplier * significant_digits
        resistance_str = _str(resistance_value)
        if resistance_value == int(resistance_value):
            resistance_str = _str(int(resistance_value))
        answer = resistance_str + "Ω ±" + _str(tolerance) + "% "
        if temp_coeff != 0:
            answer = answer + _str(temp_coeff) + " ppm/K"
        return answer
    # test 3 band resistor
    assert calculate_resistance(3, ["Black", "Blue", "Orange"]) == "6000Ω ±20% "
    # test 4 band resistor
    assert calculate_resistance(4, ["Orange", "Green", "Blue", "Gold"]) == "35000000Ω ±5% "
    # test 5 band resistor
    assert calculate_resistance(5, ["Violet", "Brown", "Grey", "Silver", "Green"]) == "7.18Ω ±0.5% "
    # test 6 band resistor
    assert calculate_resistance(6, ["Red", "Green", "Blue", "Yellow", "Orange", "Grey"]) == "2560000Ω ±0.05% 1 ppm/K"
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

