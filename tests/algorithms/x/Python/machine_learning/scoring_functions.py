# Code generated by Mochi transpiler.
# Version 0.10.67, generated on 2025-08-16 19:42 +0700
import json
import math
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    import builtins
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(float(builtins.round(v)))
        return builtins.format(v, ".15g")
    return builtins.str(v)

def absf(x):
    if x < 0.0:
        return 0.0 - x
    return x
def sqrtApprox(x):
    if x <= 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def ln_series(x):
    t = (x - 1.0) / (x + 1.0)
    term = t
    sum_ = 0.0
    n = 1
    while n <= 19:
        sum_ = sum_ + term / (float(n))
        term = term * t * t
        n = n + 2
    return 2.0 * sum_
def ln(x):
    y = x
    k = 0
    while y >= 10.0:
        y = y / 10.0
        k = k + 1
    while y < 1.0:
        y = y * 10.0
        k = k - 1
    return ln_series(y) + (float(k)) * ln_series(10.0)
def mae(predict, actual):
    sum_ = 0.0
    i = 0
    while i < len(predict):
        diff = predict[i] - actual[i]
        sum_ = sum_ + absf(diff)
        i = i + 1
    return sum_ / (float(len(predict)))
def mse(predict, actual):
    sum_ = 0.0
    i = 0
    while i < len(predict):
        diff = predict[i] - actual[i]
        sum_ = sum_ + diff * diff
        i = i + 1
    return sum_ / (float(len(predict)))
def rmse(predict, actual):
    return sqrtApprox(mse(predict, actual))
def rmsle(predict, actual):
    sum_ = 0.0
    i = 0
    while i < len(predict):
        lp = math.log(predict[i] + 1.0)
        la = math.log(actual[i] + 1.0)
        diff = lp - la
        sum_ = sum_ + diff * diff
        i = i + 1
    return sqrtApprox(sum_ / (float(len(predict))))
def mbd(predict, actual):
    diff_sum = 0.0
    actual_sum = 0.0
    i = 0
    while i < len(predict):
        diff_sum = diff_sum + (predict[i] - actual[i])
        actual_sum = actual_sum + actual[i]
        i = i + 1
    n = float(len(predict))
    numerator = diff_sum / n
    denominator = actual_sum / n
    return numerator / denominator * 100.0
def manual_accuracy(predict, actual):
    correct = 0
    i = 0
    while i < len(predict):
        if predict[i] == actual[i]:
            correct = correct + 1
        i = i + 1
    return (float(correct)) / (float(len(predict)))
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        actual = [1.0, 2.0, 3.0]
        predict = [1.0, 4.0, 3.0]
        print(_str(mae(predict, actual)))
        print(_str(mse(predict, actual)))
        print(_str(rmse(predict, actual)))
        print(_str(rmsle([10.0, 2.0, 30.0], [10.0, 10.0, 30.0])))
        print(_str(mbd([2.0, 3.0, 4.0], [1.0, 2.0, 3.0])))
        print(_str(mbd([0.0, 1.0, 1.0], [1.0, 2.0, 3.0])))
        print(_str(manual_accuracy(predict, actual)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

