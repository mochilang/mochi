# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 11:48 +0700
import math

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _str(v):
    if isinstance(v, float):
        if abs(v - round(v)) < 1e-9:
            return str(float(round(v)))
        return format(v, ".15g")
    return str(v)

def absf(x):
    if x < 0.0:
        return 0.0 - x
    return x
def sqrtApprox(x):
    if x <= 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def ln_series(x):
    t = (x - 1.0) / (x + 1.0)
    term = t
    sum_ = 0.0
    n = 1
    while n <= 19:
        sum_ = sum_ + term / (float(n))
        term = term * t * t
        n = n + 2
    return 2.0 * sum_
def ln(x):
    y = x
    k = 0
    while y >= 10.0:
        y = y / 10.0
        k = k + 1
    while y < 1.0:
        y = y * 10.0
        k = k - 1
    return ln_series(y) + (float(k)) * ln_series(10.0)
def mae(predict, actual):
    sum_ = 0.0
    i = 0
    while i < len(predict):
        diff = predict[i] - actual[i]
        sum_ = sum_ + absf(diff)
        i = i + 1
    return sum_ / (float(len(predict)))
def mse(predict, actual):
    sum_ = 0.0
    i = 0
    while i < len(predict):
        diff = predict[i] - actual[i]
        sum_ = sum_ + diff * diff
        i = i + 1
    return sum_ / (float(len(predict)))
def rmse(predict, actual):
    return sqrtApprox(mse(predict, actual))
def rmsle(predict, actual):
    sum_ = 0.0
    i = 0
    while i < len(predict):
        lp = math.log(predict[i] + 1.0)
        la = math.log(actual[i] + 1.0)
        diff = lp - la
        sum_ = sum_ + diff * diff
        i = i + 1
    return sqrtApprox(sum_ / (float(len(predict))))
def mbd(predict, actual):
    diff_sum = 0.0
    actual_sum = 0.0
    i = 0
    while i < len(predict):
        diff_sum = diff_sum + (predict[i] - actual[i])
        actual_sum = actual_sum + actual[i]
        i = i + 1
    n = float(len(predict))
    numerator = diff_sum / n
    denominator = actual_sum / n
    return numerator / denominator * 100.0
def manual_accuracy(predict, actual):
    correct = 0
    i = 0
    while i < len(predict):
        if predict[i] == actual[i]:
            correct = correct + 1
        i = i + 1
    return (float(correct)) / (float(len(predict)))
def main():
    actual = [1.0, 2.0, 3.0]
    predict = [1.0, 4.0, 3.0]
    print(_str(mae(predict, actual)))
    print(_str(mse(predict, actual)))
    print(_str(rmse(predict, actual)))
    print(_str(rmsle([10.0, 2.0, 30.0], [10.0, 10.0, 30.0])))
    print(_str(mbd([2.0, 3.0, 4.0], [1.0, 2.0, 3.0])))
    print(_str(mbd([0.0, 1.0, 1.0], [1.0, 2.0, 3.0])))
    print(_str(manual_accuracy(predict, actual)))
main()

