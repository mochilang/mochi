# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 11:48 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class SVC:
    weights: [float]
    bias: float
    lr: float
    lambda_: float
    epochs: int

def dot(a, b):
    s = 0.0
    i = 0
    while i < len(a):
        s = s + a[i] * b[i]
        i = i + 1
    return s
def new_svc(lr, lambda_, epochs):
    return SVC(weights=[], bias=0.0, lr=lr, lambda_=lambda_, epochs=epochs)
def fit(model, xs, ys):
    n_features = len(xs[0])
    w = []
    i = 0
    while i < n_features:
        w = _append(w, 0.0)
        i = i + 1
    b = 0.0
    epoch = 0
    while epoch < model.epochs:
        j = 0
        while j < len(xs):
            x = xs[j]
            y = float(ys[j])
            prod = dot(w, x) + b
            if y * prod < 1.0:
                k = 0
                while k < len(w):
                    w[k] = w[k] + model.lr * (y * x[k] - 2.0 * model.lambda_ * w[k])
                    k = k + 1
                b = b + model.lr * y
            else:
                k = 0
                while k < len(w):
                    w[k] = w[k] - model.lr * (2.0 * model.lambda_ * w[k])
                    k = k + 1
            j = j + 1
        epoch = epoch + 1
    return SVC(weights=w, bias=b, lr=model.lr, lambda_=model.lambda_, epochs=model.epochs)
def predict(model, x):
    s = dot(model.weights, x) + model.bias
    if s >= 0.0:
        return 1
    else:
        return -1
xs = [[0.0, 1.0], [0.0, 2.0], [1.0, 1.0], [1.0, 2.0]]
ys = [1, 1, -1, -1]
base = new_svc(0.01, 0.01, 1000)
model = fit(base, xs, ys)
print(predict(model, [0.0, 1.0]))
print(predict(model, [1.0, 1.0]))
print(predict(model, [2.0, 2.0]))

