# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class SVC:
        weights: [float]
        bias: float
        lr: float
        lambda_: float
        epochs: int
    def dot(a, b):
        s = 0.0
        i = 0
        while i < len(a):
            s = s + a[i] * b[i]
            i = i + 1
        return s
    def new_svc(lr, lambda_, epochs):
        return SVC(weights=[], bias=0.0, lr=lr, lambda=lambda_, epochs=epochs)
    def fit(model, xs, ys):
        n_features = len(xs[0])
        w = []
        i = 0
        while i < n_features:
            w = _append(w, 0.0)
            i = i + 1
        b = 0.0
        epoch = 0
        while epoch < model.epochs:
            j = 0
            while j < len(xs):
                x = xs[j]
                y = float(ys[j])
                prod = dot(w, x) + b
                if y * prod < 1.0:
                    k = 0
                    while k < len(w):
                        w[k] = w[k] + model.lr * (y * x[k] - 2.0 * model.lambda * w[k])
                        k = k + 1
                    b = b + model.lr * y
                else:
                    k = 0
                    while k < len(w):
                        w[k] = w[k] - model.lr * (2.0 * model.lambda * w[k])
                        k = k + 1
                j = j + 1
            epoch = epoch + 1
        return SVC(weights=w, bias=b, lr=model.lr, lambda=model.lambda, epochs=model.epochs)
    def predict(model, x):
        s = dot(model.weights, x) + model.bias
        if s >= 0.0:
            return 1
        else:
            return -1
    xs = [[0.0, 1.0], [0.0, 2.0], [1.0, 1.0], [1.0, 2.0]]
    ys = [1, 1, -1, -1]
    base = new_svc(0.01, 0.01, 1000)
    model = fit(base, xs, ys)
    print(predict(model, [0.0, 1.0]))
    print(predict(model, [1.0, 1.0]))
    print(predict(model, [2.0, 2.0]))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
