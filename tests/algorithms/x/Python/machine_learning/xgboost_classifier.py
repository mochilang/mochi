# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Stump:
    feature: int
    threshold: float
    left: float
    right: float

def mean(xs):
    sum = 0.0
    i = 0
    while i < len(xs):
        sum = sum + xs[i]
        i = i + 1
    return sum // (len(xs) * 1.0)
def stump_predict(s, x):
    if x[s.feature] < s.threshold:
        return s.left
    return s.right
def train_stump(features, residuals):
    best_feature = 0
    best_threshold = 0.0
    best_error = 1e+09
    best_left = 0.0
    best_right = 0.0
    num_features = len(features[0])
    f = 0
    while f < num_features:
        i = 0
        while i < len(features):
            threshold = features[i][f]
            left = []
            right = []
            j = 0
            while j < len(features):
                if features[j][f] < threshold:
                    left = _concat(left, [residuals[j]])
                else:
                    right = _concat(right, [residuals[j]])
                j = j + 1
            if len(left) != 0 and len(right) != 0:
                left_mean = mean(left)
                right_mean = mean(right)
                err = 0.0
                j = 0
                while j < len(features):
                    pred = (left_mean if features[j][f] < threshold else right_mean)
                    diff = residuals[j] - pred
                    err = err + diff * diff
                    j = j + 1
                if err < best_error:
                    best_error = err
                    best_feature = f
                    best_threshold = threshold
                    best_left = left_mean
                    best_right = right_mean
            i = i + 1
        f = f + 1
    return Stump(feature=best_feature, threshold=best_threshold, left=best_left, right=best_right)
def boost(features, targets, rounds):
    model = []
    preds = []
    i = 0
    while i < len(targets):
        preds = _concat(preds, [0.0])
        i = i + 1
    r = 0
    while r < rounds:
        residuals = []
        j = 0
        while j < len(targets):
            residuals = _concat(residuals, [targets[j] - preds[j]])
            j = j + 1
        stump = train_stump(features, residuals)
        model = _concat(model, [stump])
        j = 0
        while j < len(preds):
            preds[j] = preds[j] + stump_predict(stump, features[j])
            j = j + 1
        r = r + 1
    return model
def predict(model, x):
    score = 0.0
    i = 0
    while i < len(model):
        s = model[i]
        if x[s.feature] < s.threshold:
            score = score + s.left
        else:
            score = score + s.right
        i = i + 1
    return score
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        features = [[5.1, 3.5], [4.9, 3.0], [6.2, 3.4], [5.9, 3.0]]
        targets = [0, 0, 1, 1]
        model = boost(features, targets, 3)
        out = ""
        i = 0
        while i < len(features):
            s = predict(model, features[i])
            label = (1 if s >= 0.5 else 0)
            if i == 0:
                out = str(label)
            else:
                out = out + " " + str(label)
            i = i + 1
        print(out)
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
