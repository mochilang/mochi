# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 11:48 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if abs(v - round(v)) < 1e-9:
            return str(float(round(v)))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Itemset:
    items: [string]
    support: int

def load_data():
    return [["milk"], ["milk", "butter"], ["milk", "bread"], ["milk", "bread", "chips"]]
def contains_string(xs, s):
    for v in xs:
        if v == s:
            return True
    return False
def is_subset(candidate, transaction):
    for it in candidate:
        if not contains_string(transaction, it):
            return False
    return True
def lists_equal(a, b):
    if len(a) != len(b):
        return False
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def contains_list(itemset, item):
    for l in itemset:
        if lists_equal(l, item):
            return True
    return False
def count_list(itemset, item):
    c = 0
    for l in itemset:
        if lists_equal(l, item):
            c = c + 1
    return c
def slice_list(xs, start):
    res = []
    i = start
    while i < len(xs):
        res = _append(res, xs[i])
        i = i + 1
    return res
def combinations_lists(xs, k):
    result = []
    if k == 0:
        result = _append(result, [])
        return result
    i = 0
    while i < len(xs):
        head = xs[i]
        tail = slice_list(xs, i + 1)
        tail_combos = combinations_lists(tail, k - 1)
        for combo in tail_combos:
            new_combo = []
            new_combo = _append(new_combo, head)
            for c in combo:
                new_combo = _append(new_combo, c)
            result = _append(result, new_combo)
        i = i + 1
    return result
def prune(itemset, candidates, length):
    pruned = []
    for candidate in candidates:
        is_subsequence = True
        for item in candidate:
            if not contains_list(itemset, item) or count_list(itemset, item) < length - 1:
                is_subsequence = False
                break
        if is_subsequence:
            merged = []
            for item in candidate:
                for s in item:
                    if not contains_string(merged, s):
                        merged = _append(merged, s)
            pruned = _append(pruned, merged)
    return pruned
def sort_strings(xs):
    res = []
    for s in xs:
        res = _append(res, s)
    i = 0
    while i < len(res):
        j = i + 1
        while j < len(res):
            if res[j] < res[i]:
                tmp = res[i]
                res[i] = res[j]
                res[j] = tmp
            j = j + 1
        i = i + 1
    return res
def itemset_to_string(xs):
    s = "["
    i = 0
    while i < len(xs):
        if i > 0:
            s = s + ", "
        s = s + "'" + xs[i] + "'"
        i = i + 1
    s = s + "]"
    return s
def apriori(data, min_support):
    itemset = []
    for transaction in data:
        t = []
        for v in transaction:
            t = _append(t, v)
        itemset = _append(itemset, t)
    frequent = []
    length = 1
    while len(itemset) > 0:
        counts = []
        idx = 0
        while idx < len(itemset):
            counts = _append(counts, 0)
            idx = idx + 1
        for transaction in data:
            j = 0
            while j < len(itemset):
                candidate = itemset[j]
                if is_subset(candidate, transaction):
                    counts[j] = counts[j] + 1
                j = j + 1
        new_itemset = []
        k = 0
        while k < len(itemset):
            if counts[k] >= min_support:
                new_itemset = _append(new_itemset, itemset[k])
            k = k + 1
        itemset = new_itemset
        m = 0
        while m < len(itemset):
            sorted_item = sort_strings(itemset[m])
            frequent = _append(frequent, Itemset(items=sorted_item, support=counts[m]))
            m = m + 1
        length = length + 1
        combos = combinations_lists(itemset, length)
        itemset = prune(itemset, combos, length)
    return frequent
frequent_itemsets = apriori(load_data(), 2)
for fi in frequent_itemsets:
    print(itemset_to_string(fi.items) + ": " + _str(fi.support))

