# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def design_matrix(xs, degree):
        i = 0
        matrix = []
        while i < len(xs):
            row = []
            j = 0
            pow = 1.0
            while j <= degree:
                row = _append(row, pow)
                pow = pow * xs[i]
                j = j + 1
            matrix = _append(matrix, row)
            i = i + 1
        return matrix
    def transpose(matrix):
        rows = len(matrix)
        cols = len(matrix[0])
        j = 0
        result = []
        while j < cols:
            row = []
            i = 0
            while i < rows:
                row = _append(row, matrix[i][j])
                i = i + 1
            result = _append(result, row)
            j = j + 1
        return result
    def matmul(A, B):
        n = len(A)
        m = len(A[0])
        p = len(B[0])
        i = 0
        result = []
        while i < n:
            row = []
            k = 0
            while k < p:
                sum = 0.0
                j = 0
                while j < m:
                    sum = sum + A[i][j] * B[j][k]
                    j = j + 1
                row = _append(row, sum)
                k = k + 1
            result = _append(result, row)
            i = i + 1
        return result
    def matvec_mul(A, v):
        n = len(A)
        m = len(A[0])
        i = 0
        result = []
        while i < n:
            sum = 0.0
            j = 0
            while j < m:
                sum = sum + A[i][j] * v[j]
                j = j + 1
            result = _append(result, sum)
            i = i + 1
        return result
    def gaussian_elimination(A, b):
        n = len(A)
        M = []
        i = 0
        while i < n:
            M = _append(M, _append(A[i], b[i]))
            i = i + 1
        k = 0
        while k < n:
            j = k + 1
            while j < n:
                factor = M[j][k] // M[k][k]
                rowj = M[j]
                rowk = M[k]
                l = k
                while l <= n:
                    rowj[l] = rowj[l] - factor * rowk[l]
                    l = l + 1
                M[j] = rowj
                j = j + 1
            k = k + 1
        x = []
        t = 0
        while t < n:
            x = _append(x, 0.0)
            t = t + 1
        i2 = n - 1
        while i2 >= 0:
            sum = M[i2][n]
            j2 = i2 + 1
            while j2 < n:
                sum = sum - M[i2][j2] * x[j2]
                j2 = j2 + 1
            x[i2] = sum // M[i2][i2]
            i2 = i2 - 1
        return x
    def predict(xs, coeffs):
        i = 0
        result = []
        while i < len(xs):
            x = xs[i]
            j = 0
            pow = 1.0
            sum = 0.0
            while j < len(coeffs):
                sum = sum + coeffs[j] * pow
                pow = pow * x
                j = j + 1
            result = _append(result, sum)
            i = i + 1
        return result
    xs = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
    ys = []
    i = 0
    while i < len(xs):
        x = xs[i]
        ys = _append(ys, x * x * x - 2.0 * x * x + 3.0 * x - 5.0)
        i = i + 1
    X = design_matrix(xs, 3)
    Xt = transpose(X)
    XtX = matmul(Xt, X)
    Xty = matvec_mul(Xt, ys)
    coeffs = gaussian_elimination(XtX, Xty)
    print(str(coeffs))
    print(str(predict([-1.0], coeffs)))
    print(str(predict([-2.0], coeffs)))
    print(str(predict([6.0], coeffs)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
