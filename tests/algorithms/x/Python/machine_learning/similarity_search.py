# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 11:48 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if abs(v - round(v)) < 1e-9:
            return str(float(round(v)))
        return format(v, ".15g")
    return str(v)

@dataclass
class Neighbor:
    vector: [float]
    distance: float

def sqrt(x):
    if x <= 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 10:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def euclidean(a, b):
    sum_ = 0.0
    i = 0
    while i < len(a):
        diff = a[i] - b[i]
        sum_ = sum_ + diff * diff
        i = i + 1
    res = sqrt(sum_)
    return res
def similarity_search(dataset, value_array):
    dim = len(dataset[0])
    if dim != len(value_array[0]):
        return []
    result = []
    i = 0
    while i < len(value_array):
        value = value_array[i]
        dist = euclidean(value, dataset[0])
        vec = dataset[0]
        j = 1
        while j < len(dataset):
            d = euclidean(value, dataset[j])
            if d < dist:
                dist = d
                vec = dataset[j]
            j = j + 1
        nb = Neighbor(vector=vec, distance=dist)
        result = _append(result, nb)
        i = i + 1
    return result
def cosine_similarity(a, b):
    dot = 0.0
    norm_a = 0.0
    norm_b = 0.0
    i = 0
    while i < len(a):
        dot = dot + a[i] * b[i]
        norm_a = norm_a + a[i] * a[i]
        norm_b = norm_b + b[i] * b[i]
        i = i + 1
    if norm_a == 0.0 or norm_b == 0.0:
        return 0.0
    return dot / (sqrt(norm_a) * sqrt(norm_b))
dataset = [[0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]
value_array = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0]]
neighbors = similarity_search(dataset, value_array)
k = 0
while k < len(neighbors):
    n = neighbors[k]
    print("[" + _str(n.vector) + ", " + _str(n.distance) + "]")
    k = k + 1
print(_str(cosine_similarity([1.0, 2.0], [6.0, 32.0])))

