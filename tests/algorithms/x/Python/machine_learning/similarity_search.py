# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 09:58 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class Neighbor:
        vector: [float]
        distance: float
    def sqrt(x):
        if x <= 0.0:
            return 0.0
        guess = x
        i = 0
        while i < 10:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def euclidean(a, b):
        sum = 0.0
        i = 0
        while i < len(a):
            diff = a[i] - b[i]
            sum = sum + diff * diff
            i = i + 1
        res = sqrt(sum)
        return res
    def similarity_search(dataset, value_array):
        dim = len(dataset[0])
        if dim != len(value_array[0]):
            return []
        result = []
        i = 0
        while i < len(value_array):
            value = value_array[i]
            dist = euclidean(value, dataset[0])
            vec = dataset[0]
            j = 1
            while j < len(dataset):
                d = euclidean(value, dataset[j])
                if d < dist:
                    dist = d
                    vec = dataset[j]
                j = j + 1
            nb = Neighbor(vector=vec, distance=dist)
            result = _append(result, nb)
            i = i + 1
        return result
    def cosine_similarity(a, b):
        dot = 0.0
        norm_a = 0.0
        norm_b = 0.0
        i = 0
        while i < len(a):
            dot = dot + a[i] * b[i]
            norm_a = norm_a + a[i] * a[i]
            norm_b = norm_b + b[i] * b[i]
            i = i + 1
        if norm_a == 0.0 or norm_b == 0.0:
            return 0.0
        return dot // (sqrt(norm_a) * sqrt(norm_b))
    dataset = [[0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]
    value_array = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0]]
    neighbors = similarity_search(dataset, value_array)
    k = 0
    while k < len(neighbors):
        n = neighbors[k]
        print("[" + str(n.vector) + ", " + str(n.distance) + "]")
        k = k + 1
    print(str(cosine_similarity([1.0, 2.0], [6.0, 32.0])))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
