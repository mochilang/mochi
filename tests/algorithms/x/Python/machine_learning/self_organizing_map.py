# Code generated by Mochi transpiler.
# Version 0.10.67, generated on 2025-08-16 19:42 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    import builtins
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(float(builtins.round(v)))
        return builtins.format(v, ".15g")
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def get_winner(weights, sample):
    d0 = 0.0
    d1 = 0.0
    for i in range(0, len(sample)):
        diff0 = sample[i] - weights[0][i]
        diff1 = sample[i] - weights[1][i]
        d0 = d0 + diff0 * diff0
        d1 = d1 + diff1 * diff1
        return (0 if d0 > d1 else 1)
    return 0
def update(weights, sample, j, alpha):
    for i in range(0, len(weights)):
        weights[j][i] = weights[j][i] + alpha * (sample[i] - weights[j][i])
    return weights
def list_to_string(xs):
    s = "["
    i = 0
    while i < len(xs):
        s = s + _str(xs[i])
        if i < len(xs) - 1:
            s = s + ", "
        i = i + 1
    s = s + "]"
    return s
def matrix_to_string(m):
    s = "["
    i = 0
    while i < len(m):
        s = s + list_to_string(m[i])
        if i < len(m) - 1:
            s = s + ", "
        i = i + 1
    s = s + "]"
    return s
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        training_samples = [[1, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1]]
        weights = [[0.2, 0.6, 0.5, 0.9], [0.8, 0.4, 0.7, 0.3]]
        epochs = 3
        alpha = 0.5
        for _ in range(0, epochs):
            for j in range(0, len(training_samples)):
                sample = training_samples[j]
                winner = get_winner(weights, sample)
                weights = update(weights, sample, winner, alpha)
        sample = [0, 0, 0, 1]
        winner = get_winner(weights, sample)
        print("Clusters that the test sample belongs to : " + _str(winner))
        print("Weights that have been trained : " + matrix_to_string(weights))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

