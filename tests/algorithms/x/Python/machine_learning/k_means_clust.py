# Code generated by Mochi transpiler.
# Version 0.10.67, generated on 2025-08-16 21:23 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    import builtins
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(float(builtins.round(v)))
        return builtins.format(v, ".15g")
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class KMeansResult:
        centroids: [[float]]
        assignments: [int]
        heterogeneity: [float]
    def distance_sq(a, b):
        sum_ = 0.0
        for i in range(0, len(a)):
            diff = a[i] - b[i]
            sum_ = sum_ + diff * diff
        return sum_
    def assign_clusters(data, centroids):
        assignments = []
        for i in range(0, len(data)):
            best_idx = 0
            best = distance_sq(data[i], centroids[0])
            for j in range(1, len(centroids)):
                dist = distance_sq(data[i], centroids[j])
                if dist < best:
                    best = dist
                    best_idx = j
            assignments = _append(assignments, best_idx)
        return assignments
    def revise_centroids(data, k, assignment):
        dim = len(data[0])
        sums = []
        counts = []
        for i in range(0, k):
            row = []
            for j in range(0, dim):
                row = _append(row, 0.0)
            sums = _append(sums, row)
            counts = _append(counts, 0)
        for i in range(0, len(data)):
            c = assignment[i]
            counts[c] = counts[c] + 1
            for j in range(0, dim):
                sums[c][j] = sums[c][j] + data[i][j]
        centroids = []
        for i in range(0, k):
            row = []
            if counts[i] > 0:
                for j in range(0, dim):
                    row = _append(row, sums[i][j] / (float(counts[i])))
            else:
                for j in range(0, dim):
                    row = _append(row, 0.0)
            centroids = _append(centroids, row)
        return centroids
    def compute_heterogeneity(data, centroids, assignment):
        total = 0.0
        for i in range(0, len(data)):
            c = assignment[i]
            total = total + distance_sq(data[i], centroids[c])
        return total
    def lists_equal(a, b):
        if len(a) != len(b):
            return False
        for i in range(0, len(a)):
            if a[i] != b[i]:
                return False
        return True
    def kmeans(data, k, initial_centroids, max_iter):
        centroids = initial_centroids
        assignment = []
        prev = []
        heterogeneity = []
        iter_ = 0
        while iter_ < max_iter:
            assignment = assign_clusters(data, centroids)
            centroids = revise_centroids(data, k, assignment)
            h = compute_heterogeneity(data, centroids, assignment)
            heterogeneity = _append(heterogeneity, h)
            if iter_ > 0 and lists_equal(prev, assignment):
                break
            prev = assignment
            iter_ = iter_ + 1
        return KMeansResult(centroids=centroids, assignments=assignment, heterogeneity=heterogeneity)
    data = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]]
    k = 3
    initial_centroids = [data[0], data[2], data[5]]
    result = kmeans(data, k, initial_centroids, 10)
    print(_str(result.centroids))
    print(_str(result.assignments))
    print(_str(result.heterogeneity))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

