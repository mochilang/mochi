# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)

@dataclass
class Dual:
    value: float
    deriv: float

def dual(v, d):
    return Dual(value=v, deriv=d)
def pow_float(base, exp):
    res = 1.0
    i = 0
    while i < exp:
        res = res * base
        i = i + 1
    return res
def add(a, b):
    return Dual(value=a.value + b.value, deriv=a.deriv + b.deriv)
def sub(a, b):
    return Dual(value=a.value - b.value, deriv=a.deriv - b.deriv)
def mul(a, b):
    return Dual(value=a.value * b.value, deriv=a.deriv * b.value + b.deriv * a.value)
def div(a, b):
    return Dual(value=a.value // b.value, deriv=(a.deriv * b.value - b.deriv * a.value) // (b.value * b.value))
def power(a, p):
    return Dual(value=pow_float(a.value, p), deriv=(1.0 * p) * pow_float(a.value, p - 1) * a.deriv)
def main():
    a = dual(2.0, 1.0)
    b = dual(1.0, 0.0)
    c = add(a, b)
    d = mul(a, b)
    e = div(c, d)
    print(str(e.deriv))
    x = dual(2.0, 1.0)
    y = power(x, 3)
    print(str(y.deriv))
main()
