# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-16 11:48 +0700
import math

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _str(v):
    if isinstance(v, float):
        if abs(v - round(v)) < 1e-9:
            return str(float(round(v)))
        return format(v, ".15g")
    return str(v)

def floor(x):
    i = int(x)
    if (float(i)) > x:
        i = i - 1
    return float(i)
def pow10(n):
    result = 1.0
    i = 0
    while i < n:
        result = result * 10.0
        i = i + 1
    return result
def round(x, n):
    m = pow10(n)
    y = float(math.floor(x * m + 0.5))
    return y / m
def sqrtApprox(x):
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def mean(data):
    total = 0.0
    i = 0
    n = len(data)
    while i < n:
        total = total + data[i]
        i = i + 1
    return total / (float(n))
def stdev(data):
    n = len(data)
    if n <= 1:
        panic("data length must be > 1")
    m = mean(data)
    sum_sq = 0.0
    i = 0
    while i < n:
        diff = data[i] - m
        sum_sq = sum_sq + diff * diff
        i = i + 1
    return sqrtApprox(sum_sq / (float((n - 1))))
def normalization(data, ndigits):
    x_min = float(min(data))
    x_max = float(max(data))
    denom = x_max - x_min
    result = []
    i = 0
    n = len(data)
    while i < n:
        norm = (data[i] - x_min) / denom
        result = _append(result, round(norm, ndigits))
        i = i + 1
    return result
def standardization(data, ndigits):
    mu = mean(data)
    sigma = stdev(data)
    result = []
    i = 0
    n = len(data)
    while i < n:
        z = (data[i] - mu) / sigma
        result = _append(result, round(z, ndigits))
        i = i + 1
    return result
print(_str(normalization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)))
print(_str(normalization([5.0, 10.0, 15.0, 20.0, 25.0], 3)))
print(_str(standardization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)))
print(_str(standardization([5.0, 10.0, 15.0, 20.0, 25.0], 3)))

