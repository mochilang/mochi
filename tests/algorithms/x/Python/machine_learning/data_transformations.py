# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 18:28 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def floor(x):
        i = int(x)
        if (float(i)) > x:
            i = i - 1
        return float(i)
    def pow10(n):
        result = 1.0
        i = 0
        while i < n:
            result = result * 10.0
            i = i + 1
        return result
    def round(x, n):
        m = pow10(n)
        y = float(floor(x * m + 0.5))
        return y // m
    def sqrtApprox(x):
        guess = x
        i = 0
        while i < 20:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def mean(data):
        total = 0.0
        i = 0
        n = len(data)
        while i < n:
            total = total + data[i]
            i = i + 1
        return total / (float(n))
    def stdev(data):
        n = len(data)
        if n <= 1:
            panic("data length must be > 1")
        m = mean(data)
        sum_sq = 0.0
        i = 0
        while i < n:
            diff = data[i] - m
            sum_sq = sum_sq + diff * diff
            i = i + 1
        return sqrtApprox(sum_sq / (float((n - 1))))
    def normalization(data, ndigits):
        x_min = float(min(data))
        x_max = float(max(data))
        denom = x_max - x_min
        result = []
        i = 0
        n = len(data)
        while i < n:
            norm = (data[i] - x_min) / denom
            result = _append(result, round(norm, ndigits))
            i = i + 1
        return result
    def standardization(data, ndigits):
        mu = mean(data)
        sigma = stdev(data)
        result = []
        i = 0
        n = len(data)
        while i < n:
            z = (data[i] - mu) / sigma
            result = _append(result, round(z, ndigits))
            i = i + 1
        return result
    print(_str(normalization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)))
    print(_str(normalization([5.0, 10.0, 15.0, 20.0, 25.0], 3)))
    print(_str(standardization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3)))
    print(_str(standardization([5.0, 10.0, 15.0, 20.0, 25.0], 3)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

