# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def evaluate(item, target):
    score = 0
    i = 0
    while i < len(item) and i < len(target):
        if item[i:i + 1] == target[i:i + 1]:
            score = score + 1
        i = i + 1
    return score
@dataclass
class PairString:
    first: str
    second: str

def crossover(parent1, parent2):
    cut = len(parent1) // 2
    child1 = parent1[0:cut] + parent2[cut:len(parent2)]
    child2 = parent2[0:cut] + parent1[cut:len(parent1)]
    return PairString(first=child1, second=child2)
def mutate(child, genes):
    if len(child) == 0:
        return child
    gene = genes[0]
    return child[0:len(child) - 1] + gene
def main():
    print(str(evaluate("Helxo Worlx", "Hello World")))
    pair = crossover("123456", "abcdef")
    print(pair.first)
    print(pair.second)
    mut = mutate("123456", ["A", "B", "C", "D", "E", "F"])
    print(mut)
main()
