# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def evaluate(item, target):
    score = 0
    i = 0
    while i < len(item) and i < len(target):
        if item[i:i + 1] == target[i:i + 1]:
            score = score + 1
        i = i + 1
    return score
@dataclass
class PairString:
    first: str
    second: str

def crossover(parent1, parent2):
    cut = len(parent1) // 2
    child1 = parent1[0:cut] + parent2[cut:len(parent2)]
    child2 = parent2[0:cut] + parent1[cut:len(parent1)]
    return PairString(first=child1, second=child2)
def mutate(child, genes):
    if len(child) == 0:
        return child
    gene = genes[0]
    return child[0:len(child) - 1] + gene
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(_str(evaluate("Helxo Worlx", "Hello World")))
        pair = crossover("123456", "abcdef")
        print(pair.first)
        print(pair.second)
        mut = mutate("123456", ["A", "B", "C", "D", "E", "F"])
        print(mut)
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

