# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class BWTResult:
    bwt_string: str
    idx_original_string: int

def all_rotations(s):
    n = len(s)
    rotations = []
    i = 0
    while i < n:
        rotation = s[i:n] + s[0:i]
        rotations = _append(rotations, rotation)
        i = i + 1
    return rotations
def sort_strings(arr):
    n = len(arr)
    i = 1
    while i < n:
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j = j - 1
        arr[j + 1] = key
        i = i + 1
    return arr
def join_strings(arr):
    res = ""
    i = 0
    while i < len(arr):
        res = res + arr[i]
        i = i + 1
    return res
def bwt_transform(s):
    if s == "":
        panic("input string must not be empty")
    rotations = all_rotations(s)
    rotations = sort_strings(rotations)
    last_col = []
    i = 0
    while i < len(rotations):
        word = rotations[i]
        last_col = _append(last_col, word[len(word) - 1:len(word)])
        i = i + 1
    bwt_string = join_strings(last_col)
    idx = index_of(rotations, s)
    return BWTResult(bwt_string=bwt_string, idx_original_string=idx)
def index_of(arr, target):
    i = 0
    while i < len(arr):
        if arr[i] == target:
            return i
        i = i + 1
    return -1
def reverse_bwt(bwt_string, idx_original_string):
    if bwt_string == "":
        panic("bwt string must not be empty")
    n = len(bwt_string)
    if idx_original_string < 0 or idx_original_string >= n:
        panic("index out of range")
    ordered_rotations = []
    i = 0
    while i < n:
        ordered_rotations = _append(ordered_rotations, "")
        i = i + 1
    iter = 0
    while iter < n:
        j = 0
        while j < n:
            ch = bwt_string[j:j + 1]
            ordered_rotations[j] = ch + ordered_rotations[j]
            j = j + 1
        ordered_rotations = sort_strings(ordered_rotations)
        iter = iter + 1
    return ordered_rotations[idx_original_string]
s = "^BANANA"
result = bwt_transform(s)
print(result.bwt_string)
print(result.idx_original_string)
print(reverse_bwt(result.bwt_string, result.idx_original_string))
