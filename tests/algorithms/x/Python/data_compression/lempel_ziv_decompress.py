# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def list_contains(xs, v):
    i = 0
    while i < len(xs):
        if xs[i] == v:
            return True
        i = i + 1
    return False
def is_power_of_two(n):
    if n < 1:
        return False
    x = n
    while x > 1:
        if x % 2 != 0:
            return False
        x = x // 2
    return True
def bin_string(n):
    if n == 0:
        return "0"
    res = ""
    x = n
    while x > 0:
        bit = x % 2
        res = str(bit) + res
        x = x // 2
    return res
def decompress_data(data_bits):
    lexicon = {"0": "0", "1": "1"}
    keys = ["0", "1"]
    result = ""
    curr_string = ""
    index = 2
    i = 0
    while i < len(data_bits):
        curr_string = curr_string + data_bits[i:i + 1]
        if not list_contains(keys, curr_string):
            i = i + 1
            continue
        last_match_id = lexicon[curr_string]
        result = result + last_match_id
        lexicon[curr_string] = last_match_id + "0"
        if is_power_of_two(index):
            new_lex = {}
            new_keys = []
            j = 0
            while j < len(keys):
                curr_key = keys[j]
                new_lex["0" + curr_key] = lexicon[curr_key]
                new_keys = _append(new_keys, "0" + curr_key)
                j = j + 1
            lexicon = new_lex
            keys = new_keys
        new_key = bin_string(index)
        lexicon[new_key] = last_match_id + "1"
        keys = _append(keys, new_key)
        index = index + 1
        curr_string = ""
        i = i + 1
    return result
sample = "1011001"
decompressed = decompress_data(sample)
print(decompressed)
