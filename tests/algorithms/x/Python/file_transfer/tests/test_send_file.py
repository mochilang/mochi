# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class ConnMock:
    recv_called: int
    send_called: int
    close_called: int

def make_conn_mock():
    return ConnMock(recv_called=0, send_called=0, close_called=0)
def conn_recv(conn, size):
    conn.recv_called = conn.recv_called + 1
    return 0
def conn_send(conn, data):
    conn.send_called = conn.send_called + 1
def conn_close(conn):
    conn.close_called = conn.close_called + 1
@dataclass
class SocketMock:
    bind_called: int
    listen_called: int
    accept_called: int
    shutdown_called: int
    close_called: int
    conn: ConnMock

def make_socket_mock(conn):
    return SocketMock(bind_called=0, listen_called=0, accept_called=0, shutdown_called=0, close_called=0, conn=conn)
def socket_bind(sock):
    sock.bind_called = sock.bind_called + 1
def socket_listen(sock):
    sock.listen_called = sock.listen_called + 1
def socket_accept(sock):
    sock.accept_called = sock.accept_called + 1
    return sock.conn
def socket_shutdown(sock):
    sock.shutdown_called = sock.shutdown_called + 1
def socket_close(sock):
    sock.close_called = sock.close_called + 1
@dataclass
class FileMock:
    read_called: int
    data: [int]

def make_file_mock(values):
    return FileMock(read_called=0, data=values)
def file_read(f, size):
    if f.read_called < len(f.data):
        value = f.data[f.read_called]
        f.read_called = f.read_called + 1
        return value
    f.read_called = f.read_called + 1
    return 0
def file_open():
    return make_file_mock([1, 0])
def send_file(sock, f):
    socket_bind(sock)
    socket_listen(sock)
    conn = socket_accept(sock)
    _ = conn_recv(conn, 1024)
    data = file_read(f, 1024)
    while data != 0:
        conn_send(conn, data)
        data = file_read(f, 1024)
    conn_close(conn)
    socket_shutdown(sock)
    socket_close(sock)
def test_send_file_running_as_expected():
    conn = make_conn_mock()
    sock = make_socket_mock(conn)
    f = file_open()
    send_file(sock, f)
    if sock.bind_called == 1 and sock.listen_called == 1 and sock.accept_called == 1 and conn.recv_called == 1 and f.read_called >= 1 and conn.send_called == 1 and conn.close_called == 1 and sock.shutdown_called == 1 and sock.close_called == 1:
        return "pass"
    return "fail"
print(test_send_file_running_as_expected())
