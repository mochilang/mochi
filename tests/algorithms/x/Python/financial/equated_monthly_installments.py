# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def pow_float(base, exp):
        result = 1.0
        i = 0
        while i < exp:
            result = result * base
            i = i + 1
        return result
    def equated_monthly_installments(principal, rate_per_annum, years_to_repay):
        if principal <= 0.0:
            panic("Principal borrowed must be > 0")
        if rate_per_annum < 0.0:
            panic("Rate of interest must be >= 0")
        if years_to_repay <= 0:
            panic("Years to repay must be an integer > 0")
        rate_per_month = rate_per_annum / 12.0
        number_of_payments = years_to_repay * 12
        factor = pow_float(1.0 + rate_per_month, number_of_payments)
        return principal * rate_per_month * factor / (factor - 1.0)
    print(_str(equated_monthly_installments(25000.0, 0.12, 3)))
    print(_str(equated_monthly_installments(25000.0, 0.12, 10)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

