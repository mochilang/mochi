# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class SMAValue:
        value: float
        ok: bool
    def simple_moving_average(data, window_size):
        if window_size < 1:
            panic("Window size must be a positive integer")
        result = []
        window_sum = 0.0
        i = 0
        while i < len(data):
            window_sum = window_sum + data[i]
            if i >= window_size:
                window_sum = window_sum - data[i - window_size]
            if i >= window_size - 1:
                avg = window_sum / window_size
                result = _append(result, SMAValue(value=avg, ok=True))
            else:
                result = _append(result, SMAValue(value=0.0, ok=False))
            i = i + 1
        return result
    data = [10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0]
    window_size = 3
    sma_values = simple_moving_average(data, window_size)
    idx = 0
    while idx < len(sma_values):
        item = sma_values[idx]
        if item.ok:
            print("Day " + _str(idx + 1) + ": " + _str(item.value))
        else:
            print("Day " + _str(idx + 1) + ": Not enough data for SMA")
        idx = idx + 1
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

