# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def exponential_moving_average(stock_prices, window_size):
        if window_size <= 0:
            panic("window_size must be > 0")
        alpha = 2.0 / (1.0 + (float(window_size)))
        moving_average = 0.0
        result = []
        i = 0
        while i < len(stock_prices):
            price = stock_prices[i]
            if i <= window_size:
                if i == 0:
                    moving_average = price
                else:
                    moving_average = (moving_average + price) * 0.5
            else:
                moving_average = alpha * price + (1.0 - alpha) * moving_average
            result = _append(result, moving_average)
            i = i + 1
        return result
    stock_prices = [2.0, 5.0, 3.0, 8.2, 6.0, 9.0, 10.0]
    window_size = 3
    result = exponential_moving_average(stock_prices, window_size)
    print(_str(result))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

