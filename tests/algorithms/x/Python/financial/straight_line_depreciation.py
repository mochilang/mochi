# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def straight_line_depreciation(useful_years, purchase_value, residual_value):
        if useful_years < 1:
            panic("Useful years cannot be less than 1")
        if purchase_value < 0.0:
            panic("Purchase value cannot be less than zero")
        if purchase_value < residual_value:
            panic("Purchase value cannot be less than residual value")
        depreciable_cost = purchase_value - residual_value
        annual_expense = depreciable_cost / (1.0 * useful_years)
        expenses = []
        accumulated = 0.0
        period = 0
        while period < useful_years:
            if period != useful_years - 1:
                accumulated = accumulated + annual_expense
                expenses = _append(expenses, annual_expense)
            else:
                end_year_expense = depreciable_cost - accumulated
                expenses = _append(expenses, end_year_expense)
            period = period + 1
        return expenses
    print(_str(straight_line_depreciation(10, 1100.0, 100.0)))
    print(_str(straight_line_depreciation(6, 1250.0, 50.0)))
    print(_str(straight_line_depreciation(4, 1001.0, 0.0)))
    print(_str(straight_line_depreciation(11, 380.0, 50.0)))
    print(_str(straight_line_depreciation(1, 4985.0, 100.0)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

