# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def panic(msg):
    print(msg)
def powf(base, exp):
    result = 1.0
    i = 0
    while i < int(exp):
        result = result * base
        i = i + 1
    return result
def simple_interest(principal, daily_rate, days):
    if days <= 0.0:
        panic("days_between_payments must be > 0")
        return 0.0
    if daily_rate < 0.0:
        panic("daily_interest_rate must be >= 0")
        return 0.0
    if principal <= 0.0:
        panic("principal must be > 0")
        return 0.0
    return principal * daily_rate * days
def compound_interest(principal, nominal_rate, periods):
    if periods <= 0.0:
        panic("number_of_compounding_periods must be > 0")
        return 0.0
    if nominal_rate < 0.0:
        panic("nominal_annual_interest_rate_percentage must be >= 0")
        return 0.0
    if principal <= 0.0:
        panic("principal must be > 0")
        return 0.0
    return principal * (powf(1.0 + nominal_rate, periods) - 1.0)
def apr_interest(principal, apr, years):
    if years <= 0.0:
        panic("number_of_years must be > 0")
        return 0.0
    if apr < 0.0:
        panic("nominal_annual_percentage_rate must be >= 0")
        return 0.0
    if principal <= 0.0:
        panic("principal must be > 0")
        return 0.0
    return compound_interest(principal, apr / 365.0, years * 365.0)
def main():
    print(str(simple_interest(18000.0, 0.06, 3.0)))
    print(str(simple_interest(0.5, 0.06, 3.0)))
    print(str(simple_interest(18000.0, 0.01, 10.0)))
    print(str(compound_interest(10000.0, 0.05, 3.0)))
    print(str(compound_interest(10000.0, 0.05, 1.0)))
    print(str(apr_interest(10000.0, 0.05, 3.0)))
    print(str(apr_interest(10000.0, 0.05, 1.0)))
main()
