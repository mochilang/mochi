# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def panic(msg):
    print(msg)
def powf(base, exp):
    result = 1.0
    i = 0
    while i < int(exp):
        result = result * base
        i = i + 1
    return result
def simple_interest(principal, daily_rate, days):
    if days <= 0.0:
        panic("days_between_payments must be > 0")
        return 0.0
    if daily_rate < 0.0:
        panic("daily_interest_rate must be >= 0")
        return 0.0
    if principal <= 0.0:
        panic("principal must be > 0")
        return 0.0
    return principal * daily_rate * days
def compound_interest(principal, nominal_rate, periods):
    if periods <= 0.0:
        panic("number_of_compounding_periods must be > 0")
        return 0.0
    if nominal_rate < 0.0:
        panic("nominal_annual_interest_rate_percentage must be >= 0")
        return 0.0
    if principal <= 0.0:
        panic("principal must be > 0")
        return 0.0
    return principal * (powf(1.0 + nominal_rate, periods) - 1.0)
def apr_interest(principal, apr, years):
    if years <= 0.0:
        panic("number_of_years must be > 0")
        return 0.0
    if apr < 0.0:
        panic("nominal_annual_percentage_rate must be >= 0")
        return 0.0
    if principal <= 0.0:
        panic("principal must be > 0")
        return 0.0
    return compound_interest(principal, apr / 365.0, years * 365.0)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(_str(simple_interest(18000.0, 0.06, 3.0)))
        print(_str(simple_interest(0.5, 0.06, 3.0)))
        print(_str(simple_interest(18000.0, 0.01, 10.0)))
        print(_str(compound_interest(10000.0, 0.05, 3.0)))
        print(_str(compound_interest(10000.0, 0.05, 1.0)))
        print(_str(apr_interest(10000.0, 0.05, 3.0)))
        print(_str(apr_interest(10000.0, 0.05, 1.0)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

