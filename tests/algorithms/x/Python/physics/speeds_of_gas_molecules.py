# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 12:29 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    PI = 3.141592653589793
    R = 8.31446261815324
    def sqrt(x):
        if x <= 0.0:
            return 0.0
        guess = x
        i = 0
        while i < 20:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def avg_speed_of_molecule(temperature, molar_mass):
        if temperature < 0.0:
            panic("Absolute temperature cannot be less than 0 K")
        if molar_mass <= 0.0:
            panic("Molar mass should be greater than 0 kg/mol")
        expr = 8.0 * R * temperature / (PI * molar_mass)
        s = sqrt(expr)
        return s
    def mps_speed_of_molecule(temperature, molar_mass):
        if temperature < 0.0:
            panic("Absolute temperature cannot be less than 0 K")
        if molar_mass <= 0.0:
            panic("Molar mass should be greater than 0 kg/mol")
        expr = 2.0 * R * temperature / molar_mass
        s = sqrt(expr)
        return s
    print(_str(avg_speed_of_molecule(273.0, 0.028)))
    print(_str(avg_speed_of_molecule(300.0, 0.032)))
    print(_str(mps_speed_of_molecule(273.0, 0.028)))
    print(_str(mps_speed_of_molecule(300.0, 0.032)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

