# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    PI = 3.141592653589793
    TWO_PI = 6.283185307179586
    def _mod(x, m):
        return x - (float(int(x // m))) * m
    def sin_approx(x):
        y = _mod(x + PI, TWO_PI) - PI
        y2 = y * y
        y3 = y2 * y
        y5 = y3 * y2
        y7 = y5 * y2
        return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0
    def cos_approx(x):
        y = _mod(x + PI, TWO_PI) - PI
        y2 = y * y
        y4 = y2 * y2
        y6 = y4 * y2
        return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0
    def polar_force(magnitude, angle, radian_mode):
        theta = (angle if radian_mode else angle * PI / 180.0)
        return [magnitude * cos_approx(theta), magnitude * sin_approx(theta)]
    def abs_float(x):
        if x < 0.0:
            return -x
        else:
            return x
    def in_static_equilibrium(forces, location, eps):
        sum_moments = 0.0
        i = 0
        n = len(forces)
        while i < n:
            r = location[i]
            f = forces[i]
            moment = r[0] * f[1] - r[1] * f[0]
            sum_moments = sum_moments + moment
            i = i + 1
        return abs_float(sum_moments) < eps
    forces1 = [[1.0, 1.0], [-1.0, 2.0]]
    location1 = [[1.0, 0.0], [10.0, 0.0]]
    print(_str(in_static_equilibrium(forces1, location1, 0.1)))
    forces2 = [polar_force(718.4, 150.0, False), polar_force(879.54, 45.0, False), polar_force(100.0, -90.0, False)]
    location2 = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]
    print(_str(in_static_equilibrium(forces2, location2, 0.1)))
    forces3 = [polar_force(30.0 * 9.81, 15.0, False), polar_force(215.0, 135.0, False), polar_force(264.0, 60.0, False)]
    location3 = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]
    print(_str(in_static_equilibrium(forces3, location3, 0.1)))
    forces4 = [[0.0, -2000.0], [0.0, -1200.0], [0.0, 15600.0], [0.0, -12400.0]]
    location4 = [[0.0, 0.0], [6.0, 0.0], [10.0, 0.0], [12.0, 0.0]]
    print(_str(in_static_equilibrium(forces4, location4, 0.1)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

