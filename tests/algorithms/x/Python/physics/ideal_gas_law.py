# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    UNIVERSAL_GAS_CONSTANT = 8.314462
    def pressure_of_gas_system(moles, kelvin, volume):
        if moles < 0 or kelvin < 0 or volume < 0:
            panic("Invalid inputs. Enter positive value.")
        return moles * kelvin * UNIVERSAL_GAS_CONSTANT / volume
    def volume_of_gas_system(moles, kelvin, pressure):
        if moles < 0 or kelvin < 0 or pressure < 0:
            panic("Invalid inputs. Enter positive value.")
        return moles * kelvin * UNIVERSAL_GAS_CONSTANT / pressure
    def temperature_of_gas_system(moles, volume, pressure):
        if moles < 0 or volume < 0 or pressure < 0:
            panic("Invalid inputs. Enter positive value.")
        return pressure * volume / (moles * UNIVERSAL_GAS_CONSTANT)
    def moles_of_gas_system(kelvin, volume, pressure):
        if kelvin < 0 or volume < 0 or pressure < 0:
            panic("Invalid inputs. Enter positive value.")
        return pressure * volume / (kelvin * UNIVERSAL_GAS_CONSTANT)
    print(pressure_of_gas_system(2.0, 100.0, 5.0))
    print(volume_of_gas_system(0.5, 273.0, 0.004))
    print(temperature_of_gas_system(2.0, 100.0, 5.0))
    print(moles_of_gas_system(100.0, 5.0, 10.0))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

