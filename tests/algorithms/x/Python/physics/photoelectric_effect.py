# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def pow10(exp):
        result = 1.0
        i = 0
        while i < exp:
            result = result * 10.0
            i = i + 1
        return result
    PLANCK_CONSTANT_JS = 6.6261 / pow10(34)
    PLANCK_CONSTANT_EVS = 4.1357 / pow10(15)
    def maximum_kinetic_energy(frequency, work_function, in_ev):
        if frequency < 0.0:
            panic("Frequency can't be negative.")
        energy = (PLANCK_CONSTANT_EVS * frequency - work_function if in_ev else PLANCK_CONSTANT_JS * frequency - work_function)
        if energy > 0.0:
            return energy
        return 0.0
    print(_str(maximum_kinetic_energy(1e+06, 2.0, False)))
    print(_str(maximum_kinetic_energy(1e+06, 2.0, True)))
    print(_str(maximum_kinetic_energy(1e+16, 2.0, True)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

