# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def format2(x):
        sign = ("-" if x < 0.0 else "")
        y = (-x if x < 0.0 else x)
        m = 100.0
        scaled = y * m
        i = int(scaled)
        if scaled - (float(i)) >= 0.5:
            i = i + 1
        int_part = i // 100
        frac_part = i % 100
        frac_str = _str(frac_part)
        if frac_part < 10:
            frac_str = "0" + frac_str
        return sign + _str(int_part) + "." + frac_str
    K = 8.9875517923e+09
    def coulombs_law(q1, q2, radius):
        if radius <= 0.0:
            panic("radius must be positive")
        force = K * q1 * q2 / (radius * radius)
        return force
    print(format2(coulombs_law(15.5, 20.0, 15.0)))
    print(format2(coulombs_law(1.0, 15.0, 5.0)))
    print(format2(coulombs_law(20.0, -50.0, 15.0)))
    print(format2(coulombs_law(-5.0, -8.0, 10.0)))
    print(format2(coulombs_law(50.0, 100.0, 50.0)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

