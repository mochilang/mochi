# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)

def to_float(x):
    return x * 1.0
def round6(x):
    factor = 1e+06
    return float(int(x * factor + 0.5)) / factor
def sqrtApprox(x):
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def validate(values):
    if len(values) == 0:
        return False
    i = 0
    while i < len(values):
        if values[i] <= 0.0:
            return False
        i = i + 1
    return True
def effusion_ratio(m1, m2):
    if not validate([m1, m2]):
        print("ValueError: Molar mass values must greater than 0.")
        return 0.0
    return round6(sqrtApprox(m2 / m1))
def first_effusion_rate(rate, m1, m2):
    if not validate([rate, m1, m2]):
        print("ValueError: Molar mass and effusion rate values must greater than 0.")
        return 0.0
    return round6(rate * sqrtApprox(m2 / m1))
def second_effusion_rate(rate, m1, m2):
    if not validate([rate, m1, m2]):
        print("ValueError: Molar mass and effusion rate values must greater than 0.")
        return 0.0
    return round6(rate / sqrtApprox(m2 / m1))
def first_molar_mass(mass, r1, r2):
    if not validate([mass, r1, r2]):
        print("ValueError: Molar mass and effusion rate values must greater than 0.")
        return 0.0
    ratio = r1 / r2
    return round6(mass / (ratio * ratio))
def second_molar_mass(mass, r1, r2):
    if not validate([mass, r1, r2]):
        print("ValueError: Molar mass and effusion rate values must greater than 0.")
        return 0.0
    ratio = r1 / r2
    return round6((ratio * ratio) / mass)
print(effusion_ratio(2.016, 4.002))
print(first_effusion_rate(1.0, 2.016, 4.002))
print(second_effusion_rate(1.0, 2.016, 4.002))
print(first_molar_mass(2.0, 1.408943, 0.709752))
print(second_molar_mass(2.0, 1.408943, 0.709752))
