# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def to_float(x):
        return x * 1.0
    def round6(x):
        factor = 1e+06
        return float(int(x * factor + 0.5)) / factor
    def sqrtApprox(x):
        guess = x / 2.0
        i = 0
        while i < 20:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def validate(values):
        if len(values) == 0:
            return False
        i = 0
        while i < len(values):
            if values[i] <= 0.0:
                return False
            i = i + 1
        return True
    def effusion_ratio(m1, m2):
        if not validate([m1, m2]):
            print("ValueError: Molar mass values must greater than 0.")
            return 0.0
        return round6(sqrtApprox(m2 // m1))
    def first_effusion_rate(rate, m1, m2):
        if not validate([rate, m1, m2]):
            print("ValueError: Molar mass and effusion rate values must greater than 0.")
            return 0.0
        return round6(rate * sqrtApprox(m2 // m1))
    def second_effusion_rate(rate, m1, m2):
        if not validate([rate, m1, m2]):
            print("ValueError: Molar mass and effusion rate values must greater than 0.")
            return 0.0
        return round6(rate / sqrtApprox(m2 // m1))
    def first_molar_mass(mass, r1, r2):
        if not validate([mass, r1, r2]):
            print("ValueError: Molar mass and effusion rate values must greater than 0.")
            return 0.0
        ratio = r1 // r2
        return round6(mass // (ratio * ratio))
    def second_molar_mass(mass, r1, r2):
        if not validate([mass, r1, r2]):
            print("ValueError: Molar mass and effusion rate values must greater than 0.")
            return 0.0
        ratio = r1 // r2
        return round6((ratio * ratio) // mass)
    print(effusion_ratio(2.016, 4.002))
    print(first_effusion_rate(1.0, 2.016, 4.002))
    print(second_effusion_rate(1.0, 2.016, 4.002))
    print(first_molar_mass(2.0, 1.408943, 0.709752))
    print(second_molar_mass(2.0, 1.408943, 0.709752))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

