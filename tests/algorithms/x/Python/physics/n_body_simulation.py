# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Body:
    position_x: float
    position_y: float
    velocity_x: float
    velocity_y: float
    mass: float

def make_body(px, py, vx, vy, mass):
    return Body(position_x=px, position_y=py, velocity_x=vx, velocity_y=vy, mass=mass)
def update_velocity(body, force_x, force_y, delta_time):
    body.velocity_x = body.velocity_x + force_x * delta_time
    body.velocity_y = body.velocity_y + force_y * delta_time
    return body
def update_position(body, delta_time):
    body.position_x = body.position_x + body.velocity_x * delta_time
    body.position_y = body.position_y + body.velocity_y * delta_time
    return body
@dataclass
class BodySystem:
    bodies: [Body]
    gravitation_constant: float
    time_factor: float
    softening_factor: float

def make_body_system(bodies, g, tf, sf):
    return BodySystem(bodies=bodies, gravitation_constant=g, time_factor=tf, softening_factor=sf)
def sqrtApprox(x):
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def update_system(system, delta_time):
    bodies = system.bodies
    i = 0
    while i < len(bodies):
        body1 = bodies[i]
        force_x = 0.0
        force_y = 0.0
        j = 0
        while j < len(bodies):
            if i != j:
                body2 = bodies[j]
                dif_x = body2.position_x - body1.position_x
                dif_y = body2.position_y - body1.position_y
                distance_sq = dif_x * dif_x + dif_y * dif_y + system.softening_factor
                distance = sqrtApprox(distance_sq)
                denom = distance * distance * distance
                force_x = force_x + system.gravitation_constant * body2.mass * dif_x / denom
                force_y = force_y + system.gravitation_constant * body2.mass * dif_y / denom
            j = j + 1
        body1 = update_velocity(body1, force_x, force_y, delta_time * system.time_factor)
        bodies[i] = body1
        i = i + 1
    i = 0
    while i < len(bodies):
        body = bodies[i]
        body = update_position(body, delta_time * system.time_factor)
        bodies[i] = body
        i = i + 1
    system.bodies = bodies
    return system
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        b1 = make_body(0.0, 0.0, 0.0, 0.0, 1.0)
        b2 = make_body(10.0, 0.0, 0.0, 0.0, 1.0)
        sys1 = make_body_system([b1, b2], 1.0, 1.0, 0.0)
        sys1 = update_system(sys1, 1.0)
        b1_after = sys1.bodies[0]
        pos1x = b1_after.position_x
        pos1y = b1_after.position_y
        print(json.dumps({"x": pos1x, "y": pos1y}, indent=2))
        vel1x = b1_after.velocity_x
        vel1y = b1_after.velocity_y
        print(json.dumps({"vx": vel1x, "vy": vel1y}, indent=2))
        b3 = make_body(-10.0, 0.0, 0.0, 0.0, 1.0)
        b4 = make_body(10.0, 0.0, 0.0, 0.0, 4.0)
        sys2 = make_body_system([b3, b4], 1.0, 10.0, 0.0)
        sys2 = update_system(sys2, 1.0)
        b2_after = sys2.bodies[0]
        pos2x = b2_after.position_x
        pos2y = b2_after.position_y
        print(json.dumps({"x": pos2x, "y": pos2y}, indent=2))
        vel2x = b2_after.velocity_x
        vel2y = b2_after.velocity_y
        print(json.dumps({"vx": vel2x, "vy": vel2y}, indent=2))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

