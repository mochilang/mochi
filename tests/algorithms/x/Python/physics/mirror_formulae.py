# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

def abs_float(x):
    if x < 0.0:
        return -x
    return x
def isclose(a, b, tolerance):
    return abs_float(a - b) < tolerance
def focal_length(distance_of_object, distance_of_image):
    if distance_of_object == 0.0 or distance_of_image == 0.0:
        panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
    return 1.0 / ((1.0 / distance_of_object) + (1.0 / distance_of_image))
def object_distance(focal_length, distance_of_image):
    if distance_of_image == 0.0 or focal_length == 0.0:
        panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
    return 1.0 / ((1.0 / focal_length) - (1.0 / distance_of_image))
def image_distance(focal_length, distance_of_object):
    if distance_of_object == 0.0 or focal_length == 0.0:
        panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
    return 1.0 / ((1.0 / focal_length) - (1.0 / distance_of_object))
def test_focal_length():
    f1 = focal_length(10.0, 20.0)
    if not isclose(f1, 6.66666666666666, 1e-08):
        panic("focal_length test1 failed")
    f2 = focal_length(9.5, 6.7)
    if not isclose(f2, 3.929012346, 1e-08):
        panic("focal_length test2 failed")
def test_object_distance():
    u1 = object_distance(30.0, 20.0)
    if not isclose(u1, -60.0, 1e-08):
        panic("object_distance test1 failed")
    u2 = object_distance(10.5, 11.7)
    if not isclose(u2, 102.375, 1e-08):
        panic("object_distance test2 failed")
def test_image_distance():
    v1 = image_distance(10.0, 40.0)
    if not isclose(v1, 13.33333333, 1e-08):
        panic("image_distance test1 failed")
    v2 = image_distance(1.5, 6.7)
    if not isclose(v2, 1.932692308, 1e-08):
        panic("image_distance test2 failed")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_focal_length()
        test_object_distance()
        test_image_distance()
        print(_str(focal_length(10.0, 20.0)))
        print(_str(object_distance(30.0, 20.0)))
        print(_str(image_distance(10.0, 40.0)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

