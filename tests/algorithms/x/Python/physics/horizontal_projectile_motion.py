# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 18:18 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)

PI = 3.141592653589793
TWO_PI = 6.283185307179586
g = 9.80665
def _mod(x, m):
    return x - (float(int(x / m))) * m
def sin(x):
    y = _mod(x + PI, TWO_PI) - PI
    y2 = y * y
    y3 = y2 * y
    y5 = y3 * y2
    y7 = y5 * y2
    return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0
def deg_to_rad(deg):
    return deg * PI / 180.0
def floor(x):
    i = int(x)
    if (float(i)) > x:
        i = i - 1
    return float(i)
def pow10(n):
    result = 1.0
    i = 0
    while i < n:
        result = result * 10.0
        i = i + 1
    return result
def round(x, n):
    m = pow10(n)
    y = floor(x * m + 0.5)
    return y / m
def check_args(init_velocity, angle):
    if angle > 90.0 or angle < 1.0:
        panic("Invalid angle. Range is 1-90 degrees.")
    if init_velocity < 0.0:
        panic("Invalid velocity. Should be a positive number.")
def horizontal_distance(init_velocity, angle):
    check_args(init_velocity, angle)
    radians = deg_to_rad(2.0 * angle)
    return round((init_velocity * init_velocity * sin(radians)) / g, 2)
def max_height(init_velocity, angle):
    check_args(init_velocity, angle)
    radians = deg_to_rad(angle)
    s = sin(radians)
    return round((init_velocity * init_velocity * s * s) / (2.0 * g), 2)
def total_time(init_velocity, angle):
    check_args(init_velocity, angle)
    radians = deg_to_rad(angle)
    return round((2.0 * init_velocity * sin(radians)) / g, 2)
v0 = 25.0
angle = 20.0
print(horizontal_distance(v0, angle))
print(max_height(v0, angle))
print(total_time(v0, angle))
