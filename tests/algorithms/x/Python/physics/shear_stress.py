# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 18:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class Result:
        name: str
        value: float
    def shear_stress(stress, tangential_force, area):
        zeros = 0
        if stress == 0.0:
            zeros = zeros + 1
        if tangential_force == 0.0:
            zeros = zeros + 1
        if area == 0.0:
            zeros = zeros + 1
        if zeros != 1:
            panic("You cannot supply more or less than 2 values")
        else:
            if stress < 0.0:
                panic("Stress cannot be negative")
            else:
                if tangential_force < 0.0:
                    panic("Tangential Force cannot be negative")
                else:
                    if area < 0.0:
                        panic("Area cannot be negative")
                    else:
                        if stress == 0.0:
                            return Result(name="stress", value=tangential_force / area)
                        else:
                            if tangential_force == 0.0:
                                return Result(name="tangential_force", value=stress * area)
                            else:
                                return Result(name="area", value=tangential_force / stress)
    def str_result(r):
        return "Result(name='" + r.name + "', value=" + _str(r.value) + ")"
    r1 = shear_stress(25.0, 100.0, 0.0)
    print(str_result(r1))
    r2 = shear_stress(0.0, 1600.0, 200.0)
    print(str_result(r2))
    r3 = shear_stress(1000.0, 0.0, 1200.0)
    print(str_result(r3))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
