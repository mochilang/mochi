# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 18:18 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def pow(base, exp):
    result = 1.0
    i = 0
    while i < exp:
        result = result * base
        i = i + 1
    return result
def sqrt_approx(x):
    if x == 0.0:
        return 0.0
    guess = x / 2.0
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def hubble_parameter(hubble_constant, radiation_density, matter_density, dark_energy, redshift):
    parameters = [redshift, radiation_density, matter_density, dark_energy]
    i = 0
    while i < len(parameters):
        if parameters[i] < 0.0:
            panic("All input parameters must be positive")
        i = i + 1
    i = 1
    while i < 4:
        if parameters[i] > 1.0:
            panic("Relative densities cannot be greater than one")
        i = i + 1
    curvature = 1.0 - (matter_density + radiation_density + dark_energy)
    zp1 = redshift + 1.0
    e2 = radiation_density * pow(zp1, 4) + matter_density * pow(zp1, 3) + curvature * pow(zp1, 2) + dark_energy
    return hubble_constant * sqrt_approx(e2)
def test_hubble_parameter():
    h = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0)
    if h < 68.2999 or h > 68.3001:
        panic("hubble_parameter test failed")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_hubble_parameter()
        print(hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
