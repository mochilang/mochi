# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 12:29 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

def pow10(n):
    p = 1.0
    if n >= 0:
        i = 0
        while i < n:
            p = p * 10.0
            i = i + 1
    else:
        i = 0
        while i > n:
            p = p / 10.0
            i = i - 1
    return p
def floor(x):
    i = int(x)
    f = float(i)
    if f > x:
        return float((i - 1))
    return f
def format_scientific_3(x):
    if x == 0.0:
        return "0.000e+00"
    sign = ""
    num = x
    if num < 0.0:
        sign = "-"
        num = -num
    exp = 0
    while num >= 10.0:
        num = num / 10.0
        exp = exp + 1
    while num < 1.0:
        num = num * 10.0
        exp = exp - 1
    temp = floor(num * 1000.0 + 0.5)
    scaled = int(temp)
    if scaled == 10000:
        scaled = 1000
        exp = exp + 1
    int_part = scaled // 1000
    frac_part = scaled % 1000
    frac_str = _str(frac_part)
    while len(frac_str) < 3:
        frac_str = "0" + frac_str
    mantissa = _str(int_part) + "." + frac_str
    exp_sign = "+"
    exp_abs = exp
    if exp < 0:
        exp_sign = "-"
        exp_abs = -exp
    exp_str = _str(exp_abs)
    if exp_abs < 10:
        exp_str = "0" + exp_str
    return sign + mantissa + "e" + exp_sign + exp_str
def orbital_transfer_work(mass_central, mass_object, r_initial, r_final):
    G = 6.6743 * pow10(-11)
    if r_initial <= 0.0 or r_final <= 0.0:
        panic("Orbital radii must be greater than zero.")
    work = (G * mass_central * mass_object / 2.0) * (1.0 / r_initial - 1.0 / r_final)
    return format_scientific_3(work)
def test_orbital_transfer_work():
    if orbital_transfer_work(5.972 * pow10(24), 1000.0, 6.371 * pow10(6), 7.0 * pow10(6)) != "2.811e+09":
        panic("case1 failed")
    if orbital_transfer_work(5.972 * pow10(24), 500.0, 7.0 * pow10(6), 6.371 * pow10(6)) != "-1.405e+09":
        panic("case2 failed")
    if orbital_transfer_work(1.989 * pow10(30), 1000.0, 1.5 * pow10(11), 2.28 * pow10(11)) != "1.514e+11":
        panic("case3 failed")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_orbital_transfer_work()
        print(orbital_transfer_work(5.972 * pow10(24), 1000.0, 6.371 * pow10(6), 7.0 * pow10(6)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

