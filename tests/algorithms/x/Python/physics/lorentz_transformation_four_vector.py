# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    c = 2.99792458e+08
    def sqrtApprox(x):
        if x <= 0.0:
            return 0.0
        guess = x / 2.0
        i = 0
        while i < 20:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def beta(velocity):
        if velocity > c:
            panic("Speed must not exceed light speed 299,792,458 [m/s]!")
        if velocity < 1.0:
            panic("Speed must be greater than or equal to 1!")
        return velocity / c
    def gamma(velocity):
        b = beta(velocity)
        return 1.0 / sqrtApprox(1.0 - b * b)
    def transformation_matrix(velocity):
        g = gamma(velocity)
        b = beta(velocity)
        return [[g, -g * b, 0.0, 0.0], [-g * b, g, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]
    def mat_vec_mul(mat, vec):
        res = []
        i = 0
        while i < 4:
            row = mat[i]
            value = row[0] * vec[0] + row[1] * vec[1] + row[2] * vec[2] + row[3] * vec[3]
            res = res + [value]
            i = i + 1
        return res
    def transform(velocity, event):
        g = gamma(velocity)
        b = beta(velocity)
        ct = event[0] * c
        x = event[1]
        return [g * ct - g * b * x, -g * b * ct + g * x, event[2], event[3]]
    print(_str(beta(c)))
    print(_str(beta(1.99792458e+08)))
    print(_str(beta(100000.0)))
    print(_str(gamma(4.0)))
    print(_str(gamma(100000.0)))
    print(_str(gamma(3e+07)))
    print(_str(transformation_matrix(2.9979245e+07)))
    v = transform(2.9979245e+07, [1.0, 2.0, 3.0, 4.0])
    print(_str(v))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

