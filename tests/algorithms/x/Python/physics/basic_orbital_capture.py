# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 17:42 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

G = 6.6743e-11
C = 2.99792458e+08
PI = 3.141592653589793
def pow10(n):
    result = 1.0
    i = 0
    while i < n:
        result = result * 10.0
        i = i + 1
    return result
def sqrt(x):
    if x <= 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def abs(x):
    if x < 0.0:
        return -x
    return x
def capture_radii(target_body_radius, target_body_mass, projectile_velocity):
    if target_body_mass < 0.0:
        panic("Mass cannot be less than 0")
    if target_body_radius < 0.0:
        panic("Radius cannot be less than 0")
    if projectile_velocity > C:
        panic("Cannot go beyond speed of light")
    escape_velocity_squared = (2.0 * G * target_body_mass) / target_body_radius
    denom = projectile_velocity * projectile_velocity
    capture_radius = target_body_radius * sqrt(1.0 + escape_velocity_squared / denom)
    return capture_radius
def capture_area(capture_radius):
    if capture_radius < 0.0:
        panic("Cannot have a capture radius less than 0")
    sigma = PI * capture_radius * capture_radius
    return sigma
def run_tests():
    r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0)
    if abs(r - 1.720959069143714 * pow10(10)) > 1.0:
        panic("capture_radii failed")
    a = capture_area(r)
    if abs(a - 9.304455331801812 * pow10(20)) > 1.0:
        panic("capture_area failed")
def main():
    run_tests()
    r = capture_radii(6.957 * pow10(8), 1.99 * pow10(30), 25000.0)
    print(_str(r))
    print(_str(capture_area(r)))
main()
