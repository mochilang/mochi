# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Particle:
        x: float
        y: float
        z: float
        mass: float
    @dataclass
    class Coord3D:
        x: float
        y: float
        z: float
    def round2(x):
        scaled = x * 100.0
        rounded = float((int((scaled + 0.5))))
        return rounded / 100.0
    def center_of_mass(ps):
        if len(ps) == 0:
            panic("No particles provided")
        i = 0
        total_mass = 0.0
        while i < len(ps):
            p = ps[i]
            if p.mass <= 0.0:
                panic("Mass of all particles must be greater than 0")
            total_mass = total_mass + p.mass
            i = i + 1
        sum_x = 0.0
        sum_y = 0.0
        sum_z = 0.0
        i = 0
        while i < len(ps):
            p = ps[i]
            sum_x = sum_x + p.x * p.mass
            sum_y = sum_y + p.y * p.mass
            sum_z = sum_z + p.z * p.mass
            i = i + 1
        cm_x = round2(sum_x // total_mass)
        cm_y = round2(sum_y // total_mass)
        cm_z = round2(sum_z // total_mass)
        return Coord3D(x=cm_x, y=cm_y, z=cm_z)
    def coord_to_string(c):
        return "Coord3D(x=" + _str(c.x) + ", y=" + _str(c.y) + ", z=" + _str(c.z) + ")"
    r1 = center_of_mass([Particle(x=1.5, y=4.0, z=3.4, mass=4.0), Particle(x=5.0, y=6.8, z=7.0, mass=8.1), Particle(x=9.4, y=10.1, z=11.6, mass=12.0)])
    print(coord_to_string(r1))
    r2 = center_of_mass([Particle(x=1.0, y=2.0, z=3.0, mass=4.0), Particle(x=5.0, y=6.0, z=7.0, mass=8.0), Particle(x=9.0, y=10.0, z=11.0, mass=12.0)])
    print(coord_to_string(r2))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

