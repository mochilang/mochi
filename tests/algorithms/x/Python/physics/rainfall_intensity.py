# Code generated by Mochi transpiler.
# Version 0.10.61, generated on 2025-08-08 18:18 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float) and v.is_integer():
        return str(int(v))
    return str(v)

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def exp_approx(x):
        y = x
        is_neg = False
        if x < 0.0:
            is_neg = True
            y = -x
        term = 1.0
        sum = 1.0
        n = 1
        while n < 30:
            term = term * y / (float(n))
            sum = sum + term
            n = n + 1
        if is_neg:
            return 1.0 / sum
        return sum
    def ln_series(x):
        t = (x - 1.0) / (x + 1.0)
        term = t
        sum = 0.0
        n = 1
        while n <= 19:
            sum = sum + term / (float(n))
            term = term * t * t
            n = n + 2
        return 2.0 * sum
    def ln(x):
        y = x
        k = 0
        while y >= 10.0:
            y = y / 10.0
            k = k + 1
        while y < 1.0:
            y = y * 10.0
            k = k - 1
        return ln_series(y) + (float(k)) * ln_series(10.0)
    def powf(base, exponent):
        return exp_approx(exponent * ln(base))
    def rainfall_intensity(coefficient_k, coefficient_a, coefficient_b, coefficient_c, return_period, duration):
        if coefficient_k <= 0.0:
            panic("All parameters must be positive.")
        if coefficient_a <= 0.0:
            panic("All parameters must be positive.")
        if coefficient_b <= 0.0:
            panic("All parameters must be positive.")
        if coefficient_c <= 0.0:
            panic("All parameters must be positive.")
        if return_period <= 0.0:
            panic("All parameters must be positive.")
        if duration <= 0.0:
            panic("All parameters must be positive.")
        numerator = coefficient_k * powf(return_period, coefficient_a)
        denominator = powf(duration + coefficient_b, coefficient_c)
        return numerator / denominator
    r1 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 60.0)
    print(_str(r1))
    r2 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 30.0)
    print(_str(r2))
    r3 = rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 5.0, 60.0)
    print(_str(r3))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
