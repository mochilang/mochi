# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    GRAVITATIONAL_CONSTANT = 6.6743e-11
    @dataclass
    class Result:
        kind: str
        value: float
    def sqrtApprox(x):
        guess = x / 2.0
        i = 0
        while i < 20:
            guess = (guess + x // guess) / 2.0
            i = i + 1
        return guess
    def gravitational_law(force, mass_1, mass_2, distance):
        zero_count = 0
        if force == 0.0:
            zero_count = zero_count + 1
        if mass_1 == 0.0:
            zero_count = zero_count + 1
        if mass_2 == 0.0:
            zero_count = zero_count + 1
        if distance == 0.0:
            zero_count = zero_count + 1
        if zero_count != 1:
            panic("One and only one argument must be 0")
        if force < 0.0:
            panic("Gravitational force can not be negative")
        if distance < 0.0:
            panic("Distance can not be negative")
        if mass_1 < 0.0:
            panic("Mass can not be negative")
        if mass_2 < 0.0:
            panic("Mass can not be negative")
        product_of_mass = mass_1 * mass_2
        if force == 0.0:
            f = GRAVITATIONAL_CONSTANT * product_of_mass / (distance * distance)
            return Result(kind="force", value=f)
        if mass_1 == 0.0:
            m1 = force * (distance * distance) / (GRAVITATIONAL_CONSTANT * mass_2)
            return Result(kind="mass_1", value=m1)
        if mass_2 == 0.0:
            m2 = force * (distance * distance) / (GRAVITATIONAL_CONSTANT * mass_1)
            return Result(kind="mass_2", value=m2)
        d = sqrtApprox(GRAVITATIONAL_CONSTANT * product_of_mass / force)
        return Result(kind="distance", value=d)
    r1 = gravitational_law(0.0, 5.0, 10.0, 20.0)
    r2 = gravitational_law(7367.382, 0.0, 74.0, 3048.0)
    r3 = gravitational_law(100.0, 5.0, 0.0, 3.0)
    r4 = gravitational_law(100.0, 5.0, 10.0, 0.0)
    print(r1.kind + " " + _str(r1.value))
    print(r2.kind + " " + _str(r2.value))
    print(r3.kind + " " + _str(r3.value))
    print(r4.kind + " " + _str(r4.value))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

