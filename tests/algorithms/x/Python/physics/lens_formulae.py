# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def focal_length_of_lens(object_distance_from_lens, image_distance_from_lens):
        if object_distance_from_lens == 0.0 or image_distance_from_lens == 0.0:
            panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
        return 1.0 / ((1.0 / image_distance_from_lens) - (1.0 / object_distance_from_lens))
    def object_distance(focal_length_of_lens, image_distance_from_lens):
        if image_distance_from_lens == 0.0 or focal_length_of_lens == 0.0:
            panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
        return 1.0 / ((1.0 / image_distance_from_lens) - (1.0 / focal_length_of_lens))
    def image_distance(focal_length_of_lens, object_distance_from_lens):
        if object_distance_from_lens == 0.0 or focal_length_of_lens == 0.0:
            panic("Invalid inputs. Enter non zero values with respect to the sign convention.")
        return 1.0 / ((1.0 / object_distance_from_lens) + (1.0 / focal_length_of_lens))
    print(_str(focal_length_of_lens(10.0, 4.0)))
    print(_str(focal_length_of_lens(2.7, 5.8)))
    print(_str(object_distance(10.0, 40.0)))
    print(_str(object_distance(6.2, 1.5)))
    print(_str(image_distance(50.0, 40.0)))
    print(_str(image_distance(5.3, 7.9)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

