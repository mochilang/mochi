# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 15:27 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def doppler_effect(org_freq, wave_vel, obs_vel, src_vel):
    if wave_vel == src_vel:
        panic("division by zero implies vs=v and observer in front of the source")
    doppler_freq = (org_freq * (wave_vel + obs_vel)) // (wave_vel - src_vel)
    if doppler_freq <= 0.0:
        panic("non-positive frequency implies vs>v or v0>v (in the opposite direction)")
    return doppler_freq
def absf(x):
    if x < 0.0:
        return -x
    return x
def almost_equal(a, b, tol):
    return absf(a - b) <= tol
def test_doppler_effect():
    if not almost_equal(doppler_effect(100.0, 330.0, 10.0, 0.0), 103.03030303030303, 1e-07):
        panic("test 1 failed")
    if not almost_equal(doppler_effect(100.0, 330.0, -10.0, 0.0), 96.96969696969697, 1e-07):
        panic("test 2 failed")
    if not almost_equal(doppler_effect(100.0, 330.0, 0.0, 10.0), 103.125, 1e-07):
        panic("test 3 failed")
    if not almost_equal(doppler_effect(100.0, 330.0, 0.0, -10.0), 97.05882352941177, 1e-07):
        panic("test 4 failed")
    if not almost_equal(doppler_effect(100.0, 330.0, 10.0, 10.0), 106.25, 1e-07):
        panic("test 5 failed")
    if not almost_equal(doppler_effect(100.0, 330.0, -10.0, -10.0), 94.11764705882354, 1e-07):
        panic("test 6 failed")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_doppler_effect()
        print(doppler_effect(100.0, 330.0, 10.0, 0.0))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

