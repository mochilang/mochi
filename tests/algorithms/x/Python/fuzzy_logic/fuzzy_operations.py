# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class FuzzySet:
        name: str
        left_boundary: float
        peak: float
        right_boundary: float
    def stringify(fs):
        return fs.name + ": [" + _str(fs.left_boundary) + ", " + _str(fs.peak) + ", " + _str(fs.right_boundary) + "]"
    def max2(a, b):
        if a > b:
            return a
        return b
    def min2(a, b):
        if a < b:
            return a
        return b
    def complement(fs):
        return FuzzySet(name="Â¬" + fs.name, left_boundary=1.0 - fs.right_boundary, peak=1.0 - fs.left_boundary, right_boundary=1.0 - fs.peak)
    def intersection(a, b):
        return FuzzySet(name=a.name + " âˆ© " + b.name, left_boundary=max2(a.left_boundary, b.left_boundary), peak=min2(a.right_boundary, b.right_boundary), right_boundary=(a.peak + b.peak) / 2.0)
    def union(a, b):
        return FuzzySet(name=a.name + " U " + b.name, left_boundary=min2(a.left_boundary, b.left_boundary), peak=max2(a.right_boundary, b.right_boundary), right_boundary=(a.peak + b.peak) / 2.0)
    def membership(fs, x):
        if x <= fs.left_boundary or x >= fs.right_boundary:
            return 0.0
        if fs.left_boundary < x and x <= fs.peak:
            return (x - fs.left_boundary) / (fs.peak - fs.left_boundary)
        if fs.peak < x and x < fs.right_boundary:
            return (fs.right_boundary - x) / (fs.right_boundary - fs.peak)
        return 0.0
    sheru = FuzzySet(name="Sheru", left_boundary=0.4, peak=1.0, right_boundary=0.6)
    siya = FuzzySet(name="Siya", left_boundary=0.5, peak=1.0, right_boundary=0.7)
    print(stringify(sheru))
    print(stringify(siya))
    sheru_comp = complement(sheru)
    print(stringify(sheru_comp))
    inter = intersection(siya, sheru)
    print(stringify(inter))
    print("Sheru membership 0.5: " + _str(membership(sheru, 0.5)))
    print("Sheru membership 0.6: " + _str(membership(sheru, 0.6)))
    uni = union(siya, sheru)
    print(stringify(uni))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

