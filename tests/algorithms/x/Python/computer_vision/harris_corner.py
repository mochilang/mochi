# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def zeros(h, w):
    m = []
    y = 0
    while y < h:
        row = []
        x = 0
        while x < w:
            row = _append(row, 0.0)
            x = x + 1
        m = _append(m, row)
        y = y + 1
    return m
def gradient(img):
    h = len(img)
    w = len(img[0])
    dx = zeros(h, w)
    dy = zeros(h, w)
    y = 1
    while y < h - 1:
        x = 1
        while x < w - 1:
            dx[y][x] = (float(img[y][x + 1])) - (float(img[y][x - 1]))
            dy[y][x] = (float(img[y + 1][x])) - (float(img[y - 1][x]))
            x = x + 1
        y = y + 1
    return [dx, dy]
def harris(img, k, window, thresh):
    h = len(img)
    w = len(img[0])
    grads = gradient(img)
    dx = grads[0]
    dy = grads[1]
    ixx = zeros(h, w)
    iyy = zeros(h, w)
    ixy = zeros(h, w)
    y = 0
    while y < h:
        x = 0
        while x < w:
            gx = dx[y][x]
            gy = dy[y][x]
            ixx[y][x] = gx * gx
            iyy[y][x] = gy * gy
            ixy[y][x] = gx * gy
            x = x + 1
        y = y + 1
    offset = window // 2
    corners = []
    y = offset
    while y < h - offset:
        x = offset
        while x < w - offset:
            wxx = 0.0
            wyy = 0.0
            wxy = 0.0
            yy = y - offset
            while yy <= y + offset:
                xx = x - offset
                while xx <= x + offset:
                    wxx = wxx + ixx[yy][xx]
                    wyy = wyy + iyy[yy][xx]
                    wxy = wxy + ixy[yy][xx]
                    xx = xx + 1
                yy = yy + 1
            det = wxx * wyy - (wxy * wxy)
            trace = wxx + wyy
            r = det - k * (trace * trace)
            if r > thresh:
                corners = _append(corners, [x, y])
            x = x + 1
        y = y + 1
    return corners
img = [[1, 1, 1, 1, 1], [1, 255, 255, 255, 1], [1, 255, 0, 255, 1], [1, 255, 255, 255, 1], [1, 1, 1, 1, 1]]
corners = harris(img, 0.04, 3, 1e+10)
print(corners)
