# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def abs_int(n):
    if n < 0:
        return -n
    return n
def sqrt(x):
    if x <= 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 10:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def ln(x):
    if x <= 0.0:
        return 0.0
    e = 2.718281828
    n = 0
    y = x
    while y >= e:
        y = y // e
        n = n + 1
    while y <= 1.0 / e:
        y = y * e
        n = n - 1
    y = y - 1.0
    term = y
    result = 0.0
    k = 1
    while k <= 20:
        if k % 2 == 1:
            result = result + term // (1.0 * k)
        else:
            result = result - term // (1.0 * k)
        term = term * y
        k = k + 1
    return result + (1.0 * n)
def matrix_concurrency(image, coord):
    offset_x = coord[0]
    offset_y = coord[1]
    max_val = 0
    for r in range(0, len(image)):
        for c in range(0, len(image[r])):
            if image[r][c] > max_val:
                max_val = image[r][c]
    size = max_val + 1
    matrix = []
    for i in range(0, size):
        row = []
        for j in range(0, size):
            row = _append(row, 0.0)
        matrix = _append(matrix, row)
    for x in range(1, len(image) - 1):
        for y in range(1, len(image[x]) - 1):
            base = image[x][y]
            offset = image[x + offset_x][y + offset_y]
            matrix[base][offset] = matrix[base][offset] + 1.0
    total = 0.0
    for i in range(0, size):
        for j in range(0, size):
            total = total + matrix[i][j]
    if total == 0.0:
        return matrix
    for i in range(0, size):
        for j in range(0, size):
            matrix[i][j] = matrix[i][j] // total
    return matrix
def haralick_descriptors(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    maximum_prob = 0.0
    correlation = 0.0
    energy = 0.0
    contrast = 0.0
    dissimilarity = 0.0
    inverse_difference = 0.0
    homogeneity = 0.0
    entropy = 0.0
    i = 0
    while i < rows:
        j = 0
        while j < cols:
            val = matrix[i][j]
            if val > maximum_prob:
                maximum_prob = val
            correlation = correlation + (1.0 * i * j) * val
            energy = energy + val * val
            diff = i - j
            adiff = abs_int(diff)
            contrast = contrast + val * (1.0 * diff * diff)
            dissimilarity = dissimilarity + val * (1.0 * adiff)
            inverse_difference = inverse_difference + val // (1.0 + (1.0 * adiff))
            homogeneity = homogeneity + val // (1.0 + (1.0 * diff * diff))
            if val > 0.0:
                entropy = entropy - (val * ln(val))
            j = j + 1
        i = i + 1
    return [maximum_prob, correlation, energy, contrast, dissimilarity, inverse_difference, homogeneity, entropy]
image = [[0, 1, 0], [1, 0, 1], [0, 1, 0]]
glcm = matrix_concurrency(image, [0, 1])
descriptors = haralick_descriptors(glcm)
idx = 0
while idx < len(descriptors):
    print(str(descriptors[idx]))
    idx = idx + 1
