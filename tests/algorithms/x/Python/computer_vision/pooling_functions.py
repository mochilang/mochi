# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def maxpooling(arr, size, stride):
    n = len(arr)
    if n == 0 or len(arr[0]) != n:
        panic("The input array is not a square matrix")
    result = []
    i = 0
    while i + size <= n:
        row = []
        j = 0
        while j + size <= n:
            max_val = arr[i][j]
            r = i
            while r < i + size:
                c = j
                while c < j + size:
                    val = arr[r][c]
                    if val > max_val:
                        max_val = val
                    c = c + 1
                r = r + 1
            row = _append(row, max_val)
            j = j + stride
        result = _append(result, row)
        i = i + stride
    return result
def avgpooling(arr, size, stride):
    n = len(arr)
    if n == 0 or len(arr[0]) != n:
        panic("The input array is not a square matrix")
    result = []
    i = 0
    while i + size <= n:
        row = []
        j = 0
        while j + size <= n:
            sum = 0
            r = i
            while r < i + size:
                c = j
                while c < j + size:
                    sum = sum + arr[r][c]
                    c = c + 1
                r = r + 1
            row = _append(row, sum // (size * size))
            j = j + stride
        result = _append(result, row)
        i = i + stride
    return result
def print_matrix(mat):
    i = 0
    while i < len(mat):
        line = ""
        j = 0
        while j < len(mat[i]):
            line = line + str(mat[i][j])
            if j < len(mat[i]) - 1:
                line = line + " "
            j = j + 1
        print(line)
        i = i + 1
def main():
    arr1 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
    arr2 = [[147, 180, 122], [241, 76, 32], [126, 13, 157]]
    print_matrix(maxpooling(arr1, 2, 2))
    print_matrix(maxpooling(arr2, 2, 1))
    print_matrix(avgpooling(arr1, 2, 2))
    print_matrix(avgpooling(arr2, 2, 1))
main()
