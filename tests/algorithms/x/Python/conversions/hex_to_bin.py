# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def panic(msg):
    print(msg)
def trim_spaces(s):
    start = 0
    end = len(s)
    while start < end and s[start:start + 1] == " ":
        start = start + 1
    while end > start and s[end - 1:end] == " ":
        end = end - 1
    return s[start:end]
def hex_digit_value(ch):
    if ch == "0":
        return 0
    if ch == "1":
        return 1
    if ch == "2":
        return 2
    if ch == "3":
        return 3
    if ch == "4":
        return 4
    if ch == "5":
        return 5
    if ch == "6":
        return 6
    if ch == "7":
        return 7
    if ch == "8":
        return 8
    if ch == "9":
        return 9
    if ch == "a" or ch == "A":
        return 10
    if ch == "b" or ch == "B":
        return 11
    if ch == "c" or ch == "C":
        return 12
    if ch == "d" or ch == "D":
        return 13
    if ch == "e" or ch == "E":
        return 14
    if ch == "f" or ch == "F":
        return 15
    panic("Invalid value was passed to the function")
def hex_to_bin(hex_num):
    trimmed = trim_spaces(hex_num)
    if len(trimmed) == 0:
        panic("No value was passed to the function")
    s = trimmed
    is_negative = False
    if s[0:1] == "-":
        is_negative = True
        s = s[1:len(s)]
    int_num = 0
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        val = hex_digit_value(ch)
        int_num = int_num * 16 + val
        i = i + 1
    bin_str = ""
    n = int_num
    if n == 0:
        bin_str = "0"
    while n > 0:
        bin_str = str(n % 2) + bin_str
        n = n // 2
    result = int(bin_str)
    if is_negative:
        result = -result
    return result
print(str(hex_to_bin("AC")))
print(str(hex_to_bin("9A4")))
print(str(hex_to_bin("   12f   ")))
print(str(hex_to_bin("FfFf")))
print(str(hex_to_bin("-fFfF")))
