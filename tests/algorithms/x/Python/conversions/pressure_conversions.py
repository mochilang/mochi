# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class FromTo:
    from_factor: float
    to_factor: float

PRESSURE_CONVERSION = {"atm": FromTo(from_factor=1.0, to_factor=1.0), "pascal": FromTo(from_factor=9.8e-06, to_factor=101325.0), "bar": FromTo(from_factor=0.986923, to_factor=1.01325), "kilopascal": FromTo(from_factor=0.00986923, to_factor=101.325), "megapascal": FromTo(from_factor=9.86923, to_factor=0.101325), "psi": FromTo(from_factor=0.068046, to_factor=14.6959), "inHg": FromTo(from_factor=0.0334211, to_factor=29.9213), "torr": FromTo(from_factor=0.00131579, to_factor=760.0)}
def pressure_conversion(value, from_type, to_type):
    if not (from_type in PRESSURE_CONVERSION):
        keys = Object.keys(PRESSURE_CONVERSION).join(", ")
        panic("Invalid 'from_type' value: '" + from_type + "'  Supported values are:\n" + keys)
    if not (to_type in PRESSURE_CONVERSION):
        keys = Object.keys(PRESSURE_CONVERSION).join(", ")
        panic("Invalid 'to_type' value: '" + to_type + ".  Supported values are:\n" + keys)
    from_ = PRESSURE_CONVERSION.get(from_type)
    to = PRESSURE_CONVERSION.get(to_type)
    return value * from_.from_factor * to.to_factor
print(pressure_conversion(4.0, "atm", "pascal"))
print(pressure_conversion(1.0, "pascal", "psi"))
print(pressure_conversion(1.0, "bar", "atm"))
print(pressure_conversion(3.0, "kilopascal", "bar"))
print(pressure_conversion(2.0, "megapascal", "psi"))
print(pressure_conversion(4.0, "psi", "torr"))
print(pressure_conversion(1.0, "inHg", "atm"))
print(pressure_conversion(1.0, "torr", "psi"))
