# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

hex_digits = "0123456789abcdef"
def split_by_dot(s):
    res = []
    current = ""
    i = 0
    while i < len(s):
        c = s[i]
        if c == ".":
            res = _append(res, current)
            current = ""
        else:
            current = current + c
        i = i + 1
    res = _append(res, current)
    return res
def parse_decimal(s):
    if len(s) == 0:
        panic("Invalid IPv4 address format")
    value = 0
    i = 0
    while i < len(s):
        c = s[i]
        if c < "0" or c > "9":
            panic("Invalid IPv4 address format")
        value = value * 10 + (int(c))
        i = i + 1
    return value
def to_hex2(n):
    x = n
    res = ""
    while x > 0:
        d = x % 16
        res = hex_digits[d] + res
        x = x // 16
    while len(res) < 2:
        res = "0" + res
    return res
def ipv4_to_decimal(ipv4_address):
    parts = split_by_dot(ipv4_address)
    if len(parts) != 4:
        panic("Invalid IPv4 address format")
    result = 0
    i = 0
    while i < 4:
        oct = parse_decimal(parts[i])
        if oct < 0 or oct > 255:
            panic("Invalid IPv4 octet " + str(oct))
        result = result * 256 + oct
        i = i + 1
    return result
def alt_ipv4_to_decimal(ipv4_address):
    parts = split_by_dot(ipv4_address)
    if len(parts) != 4:
        panic("Invalid IPv4 address format")
    hex_str = ""
    i = 0
    while i < 4:
        oct = parse_decimal(parts[i])
        if oct < 0 or oct > 255:
            panic("Invalid IPv4 octet " + str(oct))
        hex_str = hex_str + to_hex2(oct)
        i = i + 1
    value = 0
    k = 0
    while k < len(hex_str):
        c = hex_str[k]
        digit = 0 - 1
        j = 0
        while j < len(hex_digits):
            if hex_digits[j] == c:
                digit = j
            j = j + 1
        if digit < 0:
            panic("Invalid hex digit")
        value = value * 16 + digit
        k = k + 1
    return value
def decimal_to_ipv4(decimal_ipv4):
    if decimal_ipv4 < 0 or decimal_ipv4 > 4294967295:
        panic("Invalid decimal IPv4 address")
    n = decimal_ipv4
    parts = []
    i = 0
    while i < 4:
        octet = n % 256
        parts = _append(parts, str(octet))
        n = n // 256
        i = i + 1
    res = ""
    j = len(parts) - 1
    while j >= 0:
        res = res + parts[j]
        if j > 0:
            res = res + "."
        j = j - 1
    return res
print(ipv4_to_decimal("192.168.0.1"))
print(ipv4_to_decimal("10.0.0.255"))
print(alt_ipv4_to_decimal("192.168.0.1"))
print(alt_ipv4_to_decimal("10.0.0.255"))
print(decimal_to_ipv4(3232235521))
print(decimal_to_ipv4(167772415))
