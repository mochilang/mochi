# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def strip_spaces(s):
    start = 0
    end = len(s) - 1
    while start < len(s) and s[start] == " ":
        start = start + 1
    while end >= start and s[end] == " ":
        end = end - 1
    res = ""
    i = start
    while i <= end:
        res = res + s[i]
        i = i + 1
    return res
def repeat_char(ch, count):
    res = ""
    i = 0
    while i < count:
        res = res + ch
        i = i + 1
    return res
def slice(s, start, end):
    res = ""
    i = start
    while i < end:
        res = res + s[i]
        i = i + 1
    return res
def bits_to_int(bits):
    value = 0
    i = 0
    while i < len(bits):
        value = value * 2
        if bits[i] == "1":
            value = value + 1
        i = i + 1
    return value
def bin_to_hexadecimal(binary_str):
    s = strip_spaces(binary_str)
    if len(s) == 0:
        panic("Empty string was passed to the function")
    is_negative = False
    if s[0] == "-":
        is_negative = True
        s = s[1:len(s)]
    i = 0
    while i < len(s):
        c = s[i]
        if c != "0" and c != "1":
            panic("Non-binary value was passed to the function")
        i = i + 1
    groups = (len(s) // 4) + 1
    pad_len = groups * 4 - len(s)
    s = repeat_char("0", pad_len) + s
    digits = "0123456789abcdef"
    res = "0x"
    j = 0
    while j < len(s):
        chunk = s[j:j + 4]
        val = bits_to_int(chunk)
        res = res + digits[val]
        j = j + 4
    if is_negative:
        return "-" + res
    return res
print(bin_to_hexadecimal("101011111"))
print(bin_to_hexadecimal(" 1010   "))
print(bin_to_hexadecimal("-11101"))
