# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

ones = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
teens = ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
short_powers = [15, 12, 9, 6, 3, 2]
short_units = ["quadrillion", "trillion", "billion", "million", "thousand", "hundred"]
long_powers = [15, 9, 6, 3, 2]
long_units = ["billiard", "milliard", "million", "thousand", "hundred"]
indian_powers = [14, 12, 7, 5, 3, 2]
indian_units = ["crore crore", "lakh crore", "crore", "lakh", "thousand", "hundred"]
def pow10(exp):
    res = 1
    i = 0
    while i < exp:
        res = res * 10
        i = i + 1
    return res
def max_value(system):
    if system == "short":
        return pow10(18) - 1
    if system == "long":
        return pow10(21) - 1
    if system == "indian":
        return pow10(19) - 1
    return 0
def join_words(words):
    res = ""
    i = 0
    while i < len(words):
        if i > 0:
            res = res + " "
        res = res + words[i]
        i = i + 1
    return res
def convert_small_number(num):
    if num < 0:
        return ""
    if num >= 100:
        return ""
    tens_digit = num // 10
    ones_digit = num % 10
    if tens_digit == 0:
        return ones[ones_digit]
    if tens_digit == 1:
        return teens[ones_digit]
    hyphen = ("-" if ones_digit > 0 else "")
    tail = (ones[ones_digit] if ones_digit > 0 else "")
    return tens[tens_digit] + hyphen + tail
def convert_number(num, system):
    word_groups = []
    n = num
    if n < 0:
        word_groups = _append(word_groups, "negative")
        n = -n
    if n > max_value(system):
        return ""
    powers = []
    units = []
    if system == "short":
        powers = short_powers
        units = short_units
    else:
        if system == "long":
            powers = long_powers
            units = long_units
        else:
            if system == "indian":
                powers = indian_powers
                units = indian_units
            else:
                return ""
    i = 0
    while i < len(powers):
        power = powers[i]
        unit = units[i]
        divisor = pow10(power)
        digit_group = n // divisor
        n = n % divisor
        if digit_group > 0:
            word_group = (convert_number(digit_group, system) if digit_group >= 100 else convert_small_number(digit_group))
            word_groups = _append(word_groups, word_group + " " + unit)
        i = i + 1
    if n > 0 or len(word_groups) == 0:
        word_groups = _append(word_groups, convert_small_number(n))
    joined = join_words(word_groups)
    return joined
print(convert_number(123456789012345, "short"))
print(convert_number(123456789012345, "long"))
print(convert_number(123456789012345, "indian"))
