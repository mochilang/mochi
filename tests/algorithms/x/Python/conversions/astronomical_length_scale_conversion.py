# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

UNIT_SYMBOL = {"meter": "m", "kilometer": "km", "megametre": "Mm", "gigametre": "Gm", "terametre": "Tm", "petametre": "Pm", "exametre": "Em", "zettametre": "Zm", "yottametre": "Ym"}
METRIC_CONVERSION = {"m": 0, "km": 3, "Mm": 6, "Gm": 9, "Tm": 12, "Pm": 15, "Em": 18, "Zm": 21, "Ym": 24}
ABBREVIATIONS = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"
def sanitize(unit):
    res = unit.lower()
    if len(res) > 0:
        last = res[len(res) - 1:len(res)]
        if last == "s":
            res = res[0:len(res) - 1]
    if res in UNIT_SYMBOL:
        return UNIT_SYMBOL.get(res)
    return res
def pow10(exp):
    if exp == 0:
        return 1.0
    e = exp
    res = 1.0
    if e < 0:
        e = -e
    i = 0
    while i < e:
        res = res * 10.0
        i = i + 1
    if exp < 0:
        return 1.0 / res
    return res
def length_conversion(value, from_type, to_type):
    from_sanitized = sanitize(from_type)
    to_sanitized = sanitize(to_type)
    if not (from_sanitized in METRIC_CONVERSION):
        panic("Invalid 'from_type' value: '" + from_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS)
    if not (to_sanitized in METRIC_CONVERSION):
        panic("Invalid 'to_type' value: '" + to_type + "'.\nConversion abbreviations are: " + ABBREVIATIONS)
    from_exp = METRIC_CONVERSION.get(from_sanitized)
    to_exp = METRIC_CONVERSION.get(to_sanitized)
    exponent = 0
    if from_exp > to_exp:
        exponent = from_exp - to_exp
    else:
        exponent = -(to_exp - from_exp)
    return value * pow10(exponent)
print(str(length_conversion(1.0, "meter", "kilometer")))
print(str(length_conversion(1.0, "meter", "megametre")))
print(str(length_conversion(1.0, "gigametre", "meter")))
print(str(length_conversion(1.0, "terametre", "zettametre")))
print(str(length_conversion(1.0, "yottametre", "zettametre")))
