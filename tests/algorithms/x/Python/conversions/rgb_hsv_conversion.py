# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def absf(x):
    if x < 0.0:
        return -x
    return x
def fmod(a, b):
    return a - b * int(a // b)
def roundf(x):
    if x >= 0.0:
        return int(x + 0.5)
    return int(x - 0.5)
def maxf(a, b, c):
    m = a
    if b > m:
        m = b
    if c > m:
        m = c
    return m
def minf(a, b, c):
    m = a
    if b < m:
        m = b
    if c < m:
        m = c
    return m
def hsv_to_rgb(hue, saturation, value):
    if hue < 0.0 or hue > 360.0:
        print("hue should be between 0 and 360")
        return []
    if saturation < 0.0 or saturation > 1.0:
        print("saturation should be between 0 and 1")
        return []
    if value < 0.0 or value > 1.0:
        print("value should be between 0 and 1")
        return []
    chroma = value * saturation
    hue_section = hue / 60.0
    second_largest_component = chroma * (1.0 - absf(fmod(hue_section, 2.0) - 1.0))
    match_value = value - chroma
    red = 0
    green = 0
    blue = 0
    if hue_section >= 0.0 and hue_section <= 1.0:
        red = roundf(255.0 * (chroma + match_value))
        green = roundf(255.0 * (second_largest_component + match_value))
        blue = roundf(255.0 * match_value)
    else:
        if hue_section > 1.0 and hue_section <= 2.0:
            red = roundf(255.0 * (second_largest_component + match_value))
            green = roundf(255.0 * (chroma + match_value))
            blue = roundf(255.0 * match_value)
        else:
            if hue_section > 2.0 and hue_section <= 3.0:
                red = roundf(255.0 * match_value)
                green = roundf(255.0 * (chroma + match_value))
                blue = roundf(255.0 * (second_largest_component + match_value))
            else:
                if hue_section > 3.0 and hue_section <= 4.0:
                    red = roundf(255.0 * match_value)
                    green = roundf(255.0 * (second_largest_component + match_value))
                    blue = roundf(255.0 * (chroma + match_value))
                else:
                    if hue_section > 4.0 and hue_section <= 5.0:
                        red = roundf(255.0 * (second_largest_component + match_value))
                        green = roundf(255.0 * match_value)
                        blue = roundf(255.0 * (chroma + match_value))
                    else:
                        red = roundf(255.0 * (chroma + match_value))
                        green = roundf(255.0 * match_value)
                        blue = roundf(255.0 * (second_largest_component + match_value))
    return [red, green, blue]
def rgb_to_hsv(red, green, blue):
    if red < 0 or red > 255:
        print("red should be between 0 and 255")
        return []
    if green < 0 or green > 255:
        print("green should be between 0 and 255")
        return []
    if blue < 0 or blue > 255:
        print("blue should be between 0 and 255")
        return []
    float_red = red / 255.0
    float_green = green / 255.0
    float_blue = blue / 255.0
    value = maxf(float_red, float_green, float_blue)
    min_val = minf(float_red, float_green, float_blue)
    chroma = value - min_val
    saturation = (0.0 if value == 0.0 else chroma // value)
    hue = 0.0
    if chroma == 0.0:
        hue = 0.0
    else:
        if value == float_red:
            hue = 60.0 * (0.0 + (float_green - float_blue) // chroma)
        else:
            if value == float_green:
                hue = 60.0 * (2.0 + (float_blue - float_red) // chroma)
            else:
                hue = 60.0 * (4.0 + (float_red - float_green) // chroma)
    hue = fmod(hue + 360.0, 360.0)
    return [hue, saturation, value]
def approximately_equal_hsv(hsv1, hsv2):
    check_hue = absf(hsv1[0] - hsv2[0]) < 0.2
    check_saturation = absf(hsv1[1] - hsv2[1]) < 0.002
    check_value = absf(hsv1[2] - hsv2[2]) < 0.002
    return check_hue and check_saturation and check_value
rgb = hsv_to_rgb(180.0, 0.5, 0.5)
print(str(rgb))
hsv = rgb_to_hsv(64, 128, 128)
print(str(hsv))
print(str(approximately_equal_hsv(hsv, [180.0, 0.5, 0.5])))
