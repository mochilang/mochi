# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class Prefix:
    name: str
    exp: int

si_positive = [Prefix(name="yotta", exp=24), Prefix(name="zetta", exp=21), Prefix(name="exa", exp=18), Prefix(name="peta", exp=15), Prefix(name="tera", exp=12), Prefix(name="giga", exp=9), Prefix(name="mega", exp=6), Prefix(name="kilo", exp=3), Prefix(name="hecto", exp=2), Prefix(name="deca", exp=1)]
si_negative = [Prefix(name="deci", exp=-1), Prefix(name="centi", exp=-2), Prefix(name="milli", exp=-3), Prefix(name="micro", exp=-6), Prefix(name="nano", exp=-9), Prefix(name="pico", exp=-12), Prefix(name="femto", exp=-15), Prefix(name="atto", exp=-18), Prefix(name="zepto", exp=-21), Prefix(name="yocto", exp=-24)]
binary_prefixes = [Prefix(name="yotta", exp=80), Prefix(name="zetta", exp=70), Prefix(name="exa", exp=60), Prefix(name="peta", exp=50), Prefix(name="tera", exp=40), Prefix(name="giga", exp=30), Prefix(name="mega", exp=20), Prefix(name="kilo", exp=10)]
def pow(base, exp):
    result = 1.0
    e = exp
    if e < 0:
        e = -e
        i = 0
        while i < e:
            result = result * base
            i = i + 1
        return 1.0 / result
    i = 0
    while i < e:
        result = result * base
        i = i + 1
    return result
def add_si_prefix(value):
    prefixes = []
    if value > 0.0:
        prefixes = si_positive
    else:
        prefixes = si_negative
    i = 0
    while i < len(prefixes):
        p = prefixes[i]
        num = value / pow(10.0, p.exp)
        if num > 1.0:
            return str(num) + " " + p.name
        i = i + 1
    return str(value)
def add_binary_prefix(value):
    i = 0
    while i < len(binary_prefixes):
        p = binary_prefixes[i]
        num = value / pow(2.0, p.exp)
        if num > 1.0:
            return str(num) + " " + p.name
        i = i + 1
    return str(value)
print(add_si_prefix(10000.0))
print(add_si_prefix(0.005))
print(add_binary_prefix(65536.0))
print(add_binary_prefix(512.0))
