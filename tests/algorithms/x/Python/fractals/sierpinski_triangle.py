# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Point:
        x: int
        y: int
    def get_mid(p1, p2):
        return Point(x=(p1.x + p2.x) / 2, y=(p1.y + p2.y) / 2)
    def point_to_string(p):
        return "(" + _str(p.x) + "," + _str(p.y) + ")"
    def triangle(v1, v2, v3, depth):
        print(point_to_string(v1) + " " + point_to_string(v2) + " " + point_to_string(v3))
        if depth == 0:
            return
        triangle(v1, get_mid(v1, v2), get_mid(v1, v3), depth - 1)
        triangle(v2, get_mid(v1, v2), get_mid(v2, v3), depth - 1)
        triangle(v3, get_mid(v3, v2), get_mid(v1, v3), depth - 1)
    triangle(Point(x=-175, y=-125), Point(x=0, y=175), Point(x=175, y=-125), 2)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

