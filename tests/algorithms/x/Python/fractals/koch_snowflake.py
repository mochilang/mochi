# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Vec:
        x: float
        y: float
    PI = 3.141592653589793
    TWO_PI = 6.283185307179586
    def _mod(x, m):
        return x - (float(int(x / m))) * m
    def sin(x):
        y = _mod(x + PI, TWO_PI) - PI
        y2 = y * y
        y3 = y2 * y
        y5 = y3 * y2
        y7 = y5 * y2
        return y - y3 / 6.0 + y5 / 120.0 - y7 / 5040.0
    def cos(x):
        y = _mod(x + PI, TWO_PI) - PI
        y2 = y * y
        y4 = y2 * y2
        y6 = y4 * y2
        return 1.0 - y2 / 2.0 + y4 / 24.0 - y6 / 720.0
    def rotate(v, angle_deg):
        theta = angle_deg * PI / 180.0
        c = cos(theta)
        s = sin(theta)
        return Vec(x=v.x * c - v.y * s, y=v.x * s + v.y * c)
    def iteration_step(vectors):
        new_vectors = []
        i = 0
        while i < len(vectors) - 1:
            start = vectors[i]
            end = vectors[i + 1]
            new_vectors = _append(new_vectors, start)
            dx = end.x - start.x
            dy = end.y - start.y
            one_third = Vec(x=start.x + dx / 3.0, y=start.y + dy / 3.0)
            mid = rotate(Vec(x=dx / 3.0, y=dy / 3.0), 60.0)
            peak = Vec(x=one_third.x + mid.x, y=one_third.y + mid.y)
            two_third = Vec(x=start.x + dx * 2.0 / 3.0, y=start.y + dy * 2.0 / 3.0)
            new_vectors = _append(new_vectors, one_third)
            new_vectors = _append(new_vectors, peak)
            new_vectors = _append(new_vectors, two_third)
            i = i + 1
        new_vectors = _append(new_vectors, vectors[len(vectors) - 1])
        return new_vectors
    def iterate(initial, steps):
        vectors = initial
        i = 0
        while i < steps:
            vectors = iteration_step(vectors)
            i = i + 1
        return vectors
    def vec_to_string(v):
        return "(" + _str(v.x) + ", " + _str(v.y) + ")"
    def vec_list_to_string(lst):
        res = "["
        i = 0
        while i < len(lst):
            res = res + vec_to_string(lst[i])
            if i < len(lst) - 1:
                res = res + ", "
            i = i + 1
        res = res + "]"
        return res
    VECTOR_1 = Vec(x=0.0, y=0.0)
    VECTOR_2 = Vec(x=0.5, y=0.8660254)
    VECTOR_3 = Vec(x=1.0, y=0.0)
    INITIAL_VECTORS = [VECTOR_1, VECTOR_2, VECTOR_3, VECTOR_1]
    example = iterate([VECTOR_1, VECTOR_3], 1)
    print(vec_list_to_string(example))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

