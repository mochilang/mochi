# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst

def repeat_char(c, count):
    s = ""
    i = 0
    while i < count:
        s = s + c
        i = i + 1
    return s
def vicsek(order):
    if order == 0:
        return ["#"]
    prev = vicsek(order - 1)
    size = len(prev)
    blank = repeat_char(" ", size)
    result = []
    i = 0
    while i < size:
        result = _append(result, blank + prev[i] + blank)
        i = i + 1
    i = 0
    while i < size:
        result = _append(result, prev[i] + prev[i] + prev[i])
        i = i + 1
    i = 0
    while i < size:
        result = _append(result, blank + prev[i] + blank)
        i = i + 1
    return result
def print_pattern(pattern):
    i = 0
    while i < len(pattern):
        print(pattern[i])
        i = i + 1
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        depth = 3
        pattern = vicsek(depth)
        print_pattern(pattern)
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

