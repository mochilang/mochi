# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def range_list(n):
    lst = []
    i = 0
    while i < n:
        lst = _append(lst, i)
        i = i + 1
    return lst
def min3(a, b, c):
    m = a
    if b < m:
        m = b
    if c < m:
        m = c
    return m
def levenshtein_distance(first_word, second_word):
    if len(first_word) < len(second_word):
        return levenshtein_distance(second_word, first_word)
    if len(second_word) == 0:
        return len(first_word)
    previous_row = range_list(len(second_word) + 1)
    i = 0
    while i < len(first_word):
        c1 = first_word[i]
        current_row = []
        current_row = _append(current_row, i + 1)
        j = 0
        while j < len(second_word):
            c2 = second_word[j]
            insertions = previous_row[j + 1] + 1
            deletions = current_row[j] + 1
            substitutions = previous_row[j] + ((0 if c1 == c2 else 1))
            min_val = min3(insertions, deletions, substitutions)
            current_row = _append(current_row, min_val)
            j = j + 1
        previous_row = current_row
        i = i + 1
    return previous_row[len(previous_row) - 1]
def levenshtein_distance_optimized(first_word, second_word):
    if len(first_word) < len(second_word):
        return levenshtein_distance_optimized(second_word, first_word)
    if len(second_word) == 0:
        return len(first_word)
    previous_row = range_list(len(second_word) + 1)
    i = 0
    while i < len(first_word):
        c1 = first_word[i]
        current_row = []
        current_row = _append(current_row, i + 1)
        k = 0
        while k < len(second_word):
            current_row = _append(current_row, 0)
            k = k + 1
        j = 0
        while j < len(second_word):
            c2 = second_word[j]
            insertions = previous_row[j + 1] + 1
            deletions = current_row[j] + 1
            substitutions = previous_row[j] + ((0 if c1 == c2 else 1))
            min_val = min3(insertions, deletions, substitutions)
            current_row[j + 1] = min_val
            j = j + 1
        previous_row = current_row
        i = i + 1
    return previous_row[len(previous_row) - 1]
def main():
    a = "kitten"
    b = "sitting"
    print(_str(levenshtein_distance(a, b)))
    print(_str(levenshtein_distance_optimized(a, b)))
main()

