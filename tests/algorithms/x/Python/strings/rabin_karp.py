# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

alphabet_size = 256
modulus = 1000003
def index_of_char(s, ch):
    i = 0
    while i < len(s):
        if s[i] == ch:
            return i
        i = i + 1
    return -1
def ord(ch):
    upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower = "abcdefghijklmnopqrstuvwxyz"
    digits = "0123456789"
    idx = index_of_char(upper, ch)
    if idx >= 0:
        return 65 + idx
    idx = index_of_char(lower, ch)
    if idx >= 0:
        return 97 + idx
    idx = index_of_char(digits, ch)
    if idx >= 0:
        return 48 + idx
    if ch == "ü":
        return 252
    if ch == "Ü":
        return 220
    if ch == " ":
        return 32
    return 0
def rabin_karp(pattern, text):
    p_len = len(pattern)
    t_len = len(text)
    if p_len > t_len:
        return False
    p_hash = 0
    t_hash = 0
    modulus_power = 1
    i = 0
    while i < p_len:
        p_hash = (ord(pattern[i]) + p_hash * alphabet_size) % modulus
        t_hash = (ord(text[i]) + t_hash * alphabet_size) % modulus
        if i != p_len - 1:
            modulus_power = (modulus_power * alphabet_size) % modulus
        i = i + 1
    j = 0
    while j <= t_len - p_len:
        if t_hash == p_hash and text[j:j + p_len] == pattern:
            return True
        if j == t_len - p_len:
            j = j + 1
            continue
        t_hash = ((t_hash - ord(text[j]) * modulus_power) * alphabet_size + ord(text[j + p_len])) % modulus
        if t_hash < 0:
            t_hash = t_hash + modulus
        j = j + 1
    return False
def test_rabin_karp():
    pattern1 = "abc1abc12"
    text1 = "alskfjaldsabc1abc1abc12k23adsfabcabc"
    text2 = "alskfjaldsk23adsfabcabc"
    if not rabin_karp(pattern1, text1) or rabin_karp(pattern1, text2):
        print("Failure")
        return
    pattern2 = "ABABX"
    text3 = "ABABZABABYABABX"
    if not rabin_karp(pattern2, text3):
        print("Failure")
        return
    pattern3 = "AAAB"
    text4 = "ABAAAAAB"
    if not rabin_karp(pattern3, text4):
        print("Failure")
        return
    pattern4 = "abcdabcy"
    text5 = "abcxabcdabxabcdabcdabcy"
    if not rabin_karp(pattern4, text5):
        print("Failure")
        return
    pattern5 = "Lü"
    text6 = "Lüsai"
    if not rabin_karp(pattern5, text6):
        print("Failure")
        return
    pattern6 = "Lue"
    if rabin_karp(pattern6, text6):
        print("Failure")
        return
    print("Success.")
test_rabin_karp()

