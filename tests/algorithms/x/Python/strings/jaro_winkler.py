# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:55 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def min_int(a, b):
        if a < b:
            return a
        else:
            return b
    def max_int(a, b):
        if a > b:
            return a
        else:
            return b
    def repeat_bool(n, value):
        res = []
        i = 0
        while i < n:
            res = _append(res, value)
            i = i + 1
        return res
    def set_bool(xs, idx, value):
        res = []
        i = 0
        while i < len(xs):
            if i == idx:
                res = _append(res, value)
            else:
                res = _append(res, xs[i])
            i = i + 1
        return res
    def jaro_winkler(s1, s2):
        len1 = len(s1)
        len2 = len(s2)
        limit = min_int(len1, len2) // 2
        match1 = repeat_bool(len1, False)
        match2 = repeat_bool(len2, False)
        matches = 0
        i = 0
        while i < len1:
            start = max_int(0, i - limit)
            end = min_int(i + limit + 1, len2)
            j = start
            while j < end:
                if not match2[j] and s1[i:i + 1] == s2[j:j + 1]:
                    match1 = set_bool(match1, i, True)
                    match2 = set_bool(match2, j, True)
                    matches = matches + 1
                    break
                j = j + 1
            i = i + 1
        if matches == 0:
            return 0.0
        transpositions = 0
        k = 0
        i = 0
        while i < len1:
            if match1[i]:
                while not match2[k]:
                    k = k + 1
                if s1[i:i + 1] != s2[k:k + 1]:
                    transpositions = transpositions + 1
                k = k + 1
            i = i + 1
        m = float(matches)
        jaro = ((m / (float(len1))) + (m / (float(len2))) + ((m - (float(transpositions)) / 2.0) / m)) / 3.0
        prefix_len = 0
        i = 0
        while i < 4 and i < len1 and i < len2:
            if s1[i:i + 1] == s2[i:i + 1]:
                prefix_len = prefix_len + 1
            else:
                break
            i = i + 1
        return jaro + 0.1 * (float(prefix_len)) * (1.0 - jaro)
    print(_str(jaro_winkler("hello", "world")))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

