# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:55 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def palindromic_string(input_string):
    max_length = 0
    new_input_string = ""
    output_string = ""
    n = len(input_string)
    i = 0
    while i < n - 1:
        new_input_string = new_input_string + input_string[i:i + 1] + "|"
        i = i + 1
    new_input_string = new_input_string + input_string[n - 1:n]
    left = 0
    right = 0
    length = []
    i = 0
    m = len(new_input_string)
    while i < m:
        length = _append(length, 1)
        i = i + 1
    start = 0
    j = 0
    while j < m:
        k = 1
        if j <= right:
            mirror = left + right - j
            k = length[mirror] / 2
            diff = right - j + 1
            if diff < k:
                k = diff
            if k < 1:
                k = 1
        while j - k >= 0 and j + k < m and new_input_string[j + k:j + k + 1] == new_input_string[j - k:j - k + 1]:
            k = k + 1
        length[j] = 2 * k - 1
        if j + k - 1 > right:
            left = j - k + 1
            right = j + k - 1
        if length[j] > max_length:
            max_length = length[j]
            start = j
        j = j + 1
    s = new_input_string[start - max_length / 2:start + max_length / 2 + 1]
    idx = 0
    while idx < len(s):
        ch = s[idx:idx + 1]
        if ch != "|":
            output_string = output_string + ch
        idx = idx + 1
    return output_string
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(palindromic_string("abbbaba"))
        print(palindromic_string("ababa"))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

