# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def ord(ch):
        lower = "abcdefghijklmnopqrstuvwxyz"
        upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        digits = "0123456789"
        i = 0
        while i < len(lower):
            if lower[i] == ch:
                return 97 + i
            i = i + 1
        i = 0
        while i < len(upper):
            if upper[i] == ch:
                return 65 + i
            i = i + 1
        i = 0
        while i < len(digits):
            if digits[i] == ch:
                return 48 + i
            i = i + 1
        if ch == " ":
            return 32
        if ch == "_":
            return 95
        if ch == ".":
            return 46
        if ch == "'":
            return 39
        return 0
    def lshift(num, k):
        result = num
        i = 0
        while i < k:
            result = result * 2
            i = i + 1
        return result
    def rshift(num, k):
        result = num
        i = 0
        while i < k:
            result = (result - (result % 2)) // 2
            i = i + 1
        return result
    def is_contains_unique_chars(input_str):
        bitmap = 0
        i = 0
        while i < len(input_str):
            code = ord(input_str[i])
            if rshift(bitmap, code) % 2 == 1:
                return False
            bitmap = bitmap + lshift(1, code)
            i = i + 1
        return True
    print(_str(is_contains_unique_chars("I_love.py")))
    print(_str(is_contains_unique_chars("I don't love Python")))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

