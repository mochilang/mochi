# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def make_matrix_bool(rows, cols, init):
    matrix = []
    for _ in range(0, rows):
        row = []
        for _2 in range(0, cols):
            row = _append(row, init)
        matrix = _append(matrix, row)
    return matrix
def match_pattern(input_string, pattern):
    len_string = len(input_string) + 1
    len_pattern = len(pattern) + 1
    dp = make_matrix_bool(len_string, len_pattern, False)
    row0 = dp[0]
    row0[0] = True
    dp[0] = row0
    j = 1
    while j < len_pattern:
        row0 = dp[0]
        if pattern[j - 1:j] == "*":
            row0[j] = row0[j - 2]
        else:
            row0[j] = False
        dp[0] = row0
        j = j + 1
    i = 1
    while i < len_string:
        row = dp[i]
        j2 = 1
        while j2 < len_pattern:
            s_char = input_string[i - 1:i]
            p_char = pattern[j2 - 1:j2]
            if s_char == p_char or p_char == ".":
                row[j2] = dp[i - 1][j2 - 1]
            else:
                if p_char == "*":
                    val = dp[i][j2 - 2]
                    prev_p = pattern[j2 - 2:j2 - 1]
                    if not val and (prev_p == s_char or prev_p == "."):
                        val = dp[i - 1][j2]
                    row[j2] = val
                else:
                    row[j2] = False
            j2 = j2 + 1
        dp[i] = row
        i = i + 1
    return dp[len_string - 1][len_pattern - 1]
def main():
    if not match_pattern("aab", "c*a*b"):
        panic("case1 failed")
    if match_pattern("dabc", "*abc"):
        panic("case2 failed")
    if match_pattern("aaa", "aa"):
        panic("case3 failed")
    if not match_pattern("aaa", "a.a"):
        panic("case4 failed")
    if match_pattern("aaab", "aa*"):
        panic("case5 failed")
    if not match_pattern("aaab", ".*"):
        panic("case6 failed")
    if match_pattern("a", "bbbb"):
        panic("case7 failed")
    if match_pattern("", "bbbb"):
        panic("case8 failed")
    if match_pattern("a", ""):
        panic("case9 failed")
    if not match_pattern("", ""):
        panic("case10 failed")
    print(_str(match_pattern("aab", "c*a*b")))
    print(_str(match_pattern("dabc", "*abc")))
    print(_str(match_pattern("aaa", "aa")))
    print(_str(match_pattern("aaa", "a.a")))
    print(_str(match_pattern("aaab", "aa*")))
    print(_str(match_pattern("aaab", ".*")))
    print(_str(match_pattern("a", "bbbb")))
    print(_str(match_pattern("", "bbbb")))
    print(_str(match_pattern("a", "")))
    print(_str(match_pattern("", "")))
main()

