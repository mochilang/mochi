# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

LOWER = "abcdefghijklmnopqrstuvwxyz"
UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
DIGITS = "0123456789"
def is_lower(ch):
    i = 0
    while i < len(LOWER):
        if LOWER[i] == ch:
            return True
        i = i + 1
    return False
def is_upper(ch):
    i = 0
    while i < len(UPPER):
        if UPPER[i] == ch:
            return True
        i = i + 1
    return False
def is_digit(ch):
    i = 0
    while i < len(DIGITS):
        if DIGITS[i] == ch:
            return True
        i = i + 1
    return False
def is_alpha(ch):
    if is_lower(ch):
        return True
    if is_upper(ch):
        return True
    return False
def is_alnum(ch):
    if is_alpha(ch):
        return True
    if is_digit(ch):
        return True
    return False
def to_lower(ch):
    i = 0
    while i < len(UPPER):
        if UPPER[i] == ch:
            return LOWER[i]
        i = i + 1
    return ch
def camel_to_snake_case(input_str):
    snake_str = ""
    i = 0
    prev_is_digit = False
    prev_is_alpha = False
    while i < len(input_str):
        ch = input_str[i]
        if is_upper(ch):
            snake_str = snake_str + "_" + to_lower(ch)
        else:
            if prev_is_digit and is_lower(ch):
                snake_str = snake_str + "_" + ch
            else:
                if prev_is_alpha and is_digit(ch):
                    snake_str = snake_str + "_" + ch
                else:
                    if not is_alnum(ch):
                        snake_str = snake_str + "_"
                    else:
                        snake_str = snake_str + ch
        prev_is_digit = is_digit(ch)
        prev_is_alpha = is_alpha(ch)
        i = i + 1
    if len(snake_str) > 0 and snake_str[0] == "_":
        snake_str = snake_str[1:len(snake_str)]
    return snake_str
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(camel_to_snake_case("someRandomString"))
        print(camel_to_snake_case("SomeRandomStr#ng"))
        print(camel_to_snake_case("123SomeRandom123String123"))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

