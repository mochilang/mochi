# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-24 08:57 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def is_valid(strand):
        i = 0
        while i < len(strand):
            ch = strand[i:i + 1]
            if ch != "A" and ch != "T" and ch != "C" and ch != "G":
                return False
            i = i + 1
        return True
    def dna(strand):
        if not is_valid(strand):
            print("ValueError: Invalid Strand")
            return ""
        result = ""
        i = 0
        while i < len(strand):
            ch = strand[i:i + 1]
            if ch == "A":
                result = result + "T"
            else:
                if ch == "T":
                    result = result + "A"
                else:
                    if ch == "C":
                        result = result + "G"
                    else:
                        result = result + "C"
            i = i + 1
        return result
    print(dna("GCTA"))
    print(dna("ATGC"))
    print(dna("CTGA"))
    print(dna("GFGG"))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

