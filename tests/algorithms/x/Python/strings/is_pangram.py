# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def is_pangram(input_str):
        letters = []
        i = 0
        while i < len(input_str):
            c = input_str[i].lower()
            is_new = not (c in letters)
            if c != " " and "a" <= c and c <= "z" and is_new:
                letters = _append(letters, c)
            i = i + 1
        return len(letters) == 26
    def is_pangram_faster(input_str):
        alphabet = "abcdefghijklmnopqrstuvwxyz"
        flag = []
        i = 0
        while i < 26:
            flag = _append(flag, False)
            i = i + 1
        j = 0
        while j < len(input_str):
            c = input_str[j].lower()
            k = 0
            while k < 26:
                if alphabet[k] == c:
                    flag[k] = True
                    break
                k = k + 1
            j = j + 1
        t = 0
        while t < 26:
            if not flag[t]:
                return False
            t = t + 1
        return True
    def is_pangram_fastest(input_str):
        s = input_str.lower()
        alphabet = "abcdefghijklmnopqrstuvwxyz"
        i = 0
        while i < len(alphabet):
            letter = alphabet[i]
            if not (letter in s):
                return False
            i = i + 1
        return True
    s1 = "The quick brown fox jumps over the lazy dog"
    s2 = "My name is Unknown"
    print(_str(is_pangram(s1)))
    print(_str(is_pangram(s2)))
    print(_str(is_pangram_faster(s1)))
    print(_str(is_pangram_faster(s2)))
    print(_str(is_pangram_fastest(s1)))
    print(_str(is_pangram_fastest(s2)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

