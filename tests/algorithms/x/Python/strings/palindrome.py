# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

@dataclass
class Case:
    text: str
    expected: bool

def reverse(s):
    res = ""
    i = len(s) - 1
    while i >= 0:
        res = res + s[i]
        i = i - 1
    return res
def is_palindrome(s):
    start_i = 0
    end_i = len(s) - 1
    while start_i < end_i:
        if s[start_i] == s[end_i]:
            start_i = start_i + 1
            end_i = end_i - 1
        else:
            return False
    return True
def is_palindrome_traversal(s):
    end = len(s) // 2
    n = len(s)
    i = 0
    while i < end:
        if s[i] != s[n - i - 1]:
            return False
        i = i + 1
    return True
def is_palindrome_recursive(s):
    if len(s) <= 1:
        return True
    if s[0] == s[len(s) - 1]:
        return is_palindrome_recursive(s[1:len(s) - 1])
    return False
def is_palindrome_slice(s):
    return s == reverse(s)
test_data = [Case(text="MALAYALAM", expected=True), Case(text="String", expected=False), Case(text="rotor", expected=True), Case(text="level", expected=True), Case(text="A", expected=True), Case(text="BB", expected=True), Case(text="ABC", expected=False), Case(text="amanaplanacanalpanama", expected=True)]
def main():
    for t in test_data:
        s = t.text
        expected = t.expected
        r1 = is_palindrome(s)
        r2 = is_palindrome_traversal(s)
        r3 = is_palindrome_recursive(s)
        r4 = is_palindrome_slice(s)
        if r1 != expected or r2 != expected or r3 != expected or r4 != expected:
            panic("algorithm mismatch")
        print(s + " " + _str(expected))
    print("a man a plan a canal panama")
main()

