# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

ETAOIN = "ETAOINSHRDLCUMWFGYPBVKJXQZ"
LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
def etaoin_index(letter):
    i = 0
    while i < len(ETAOIN):
        if ETAOIN[i:i + 1] == letter:
            return i
        i = i + 1
    return len(ETAOIN)
def get_letter_count(message):
    letter_count = {}
    i = 0
    while i < len(LETTERS):
        c = LETTERS[i:i + 1]
        letter_count[c] = 0
        i = i + 1
    msg = message.upper()
    j = 0
    while j < len(msg):
        ch = msg[j:j + 1]
        if ch in LETTERS:
            letter_count[ch] = letter_count.get(ch, None) + 1
        j = j + 1
    return letter_count
def get_frequency_order(message):
    letter_to_freq = get_letter_count(message)
    max_freq = 0
    i = 0
    while i < len(LETTERS):
        letter = LETTERS[i:i + 1]
        f = letter_to_freq.get(letter, 0)
        if f > max_freq:
            max_freq = f
        i = i + 1
    result = ""
    freq = max_freq
    while freq >= 0:
        group = []
        j = 0
        while j < len(LETTERS):
            letter = LETTERS[j:j + 1]
            if letter_to_freq.get(letter, 0) == freq:
                group = _append(group, letter)
            j = j + 1
        g_len = len(group)
        a = 0
        while a < g_len:
            b = 0
            while b < g_len - a - 1:
                g1 = group[b]
                g2 = group[b + 1]
                idx1 = etaoin_index(g1)
                idx2 = etaoin_index(g2)
                if idx1 < idx2:
                    tmp = group[b]
                    group[b] = group[b + 1]
                    group[b + 1] = tmp
                b = b + 1
            a = a + 1
        g = 0
        while g < len(group):
            result = result + group[g]
            g = g + 1
        freq = freq - 1
    return result
def english_freq_match_score(message):
    freq_order = get_frequency_order(message)
    top = freq_order[0:6]
    bottom = freq_order[len(freq_order) - 6:len(freq_order)]
    score = 0
    i = 0
    while i < 6:
        c = ETAOIN[i:i + 1]
        if c in top:
            score = score + 1
        i = i + 1
    j = len(ETAOIN) - 6
    while j < len(ETAOIN):
        c = ETAOIN[j:j + 1]
        if c in bottom:
            score = score + 1
        j = j + 1
    return score
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(get_frequency_order("Hello World"))
        print(english_freq_match_score("Hello World"))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

