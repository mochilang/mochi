# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def index_of(s, ch):
        i = 0
        while i < len(s):
            if s[i] == ch:
                return i
            i = i + 1
        return -1
    def ord(ch):
        upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        lower = "abcdefghijklmnopqrstuvwxyz"
        idx = index_of(upper, ch)
        if idx >= 0:
            return 65 + idx
        idx = index_of(lower, ch)
        if idx >= 0:
            return 97 + idx
        return -1
    def chr(n):
        upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        lower = "abcdefghijklmnopqrstuvwxyz"
        if n >= 65 and n < 91:
            return upper[n - 65:n - 64]
        if n >= 97 and n < 123:
            return lower[n - 97:n - 96]
        return "?"
    def to_lower_char(c):
        code = ord(c)
        if code >= 65 and code <= 90:
            return chr(code + 32)
        return c
    def is_alpha(c):
        code = ord(c)
        return (code >= 65 and code <= 90) or (code >= 97 and code <= 122)
    def is_isogram(s):
        seen = ""
        i = 0
        while i < len(s):
            ch = s[i]
            if not is_alpha(ch):
                panic("String must only contain alphabetic characters.")
            lower = to_lower_char(ch)
            if index_of(seen, lower) >= 0:
                return False
            seen = seen + lower
            i = i + 1
        return True
    print(_str(is_isogram("Uncopyrightable")))
    print(_str(is_isogram("allowance")))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

