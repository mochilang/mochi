# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def prefix_function(s):
    pi = []
    i = 0
    while i < len(s):
        pi = _append(pi, 0)
        i = i + 1
    i = 1
    while i < len(s):
        j = pi[i - 1]
        while j > 0 and s[i] != s[j]:
            j = pi[j - 1]
        if s[i] == s[j]:
            j = j + 1
        pi[i] = j
        i = i + 1
    return pi
def longest_prefix(s):
    pi = prefix_function(s)
    max_val = 0
    i = 0
    while i < len(pi):
        if pi[i] > max_val:
            max_val = pi[i]
        i = i + 1
    return max_val
def list_eq_int(a, b):
    if len(a) != len(b):
        return False
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def test_prefix_function():
    s1 = "aabcdaabc"
    expected1 = [0, 1, 0, 0, 0, 1, 2, 3, 4]
    r1 = prefix_function(s1)
    if not list_eq_int(r1, expected1):
        panic("prefix_function aabcdaabc failed")
    s2 = "asdasdad"
    expected2 = [0, 0, 0, 1, 2, 3, 4, 0]
    r2 = prefix_function(s2)
    if not list_eq_int(r2, expected2):
        panic("prefix_function asdasdad failed")
def test_longest_prefix():
    if longest_prefix("aabcdaabc") != 4:
        panic("longest_prefix example1 failed")
    if longest_prefix("asdasdad") != 4:
        panic("longest_prefix example2 failed")
    if longest_prefix("abcab") != 2:
        panic("longest_prefix example3 failed")
def main():
    test_prefix_function()
    test_longest_prefix()
    r1 = prefix_function("aabcdaabc")
    r2 = prefix_function("asdasdad")
    print(_str(r1))
    print(_str(r2))
    print(_str(longest_prefix("aabcdaabc")))
    print(_str(longest_prefix("abcab")))
main()

