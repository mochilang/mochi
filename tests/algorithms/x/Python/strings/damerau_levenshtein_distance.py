# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def damerau_levenshtein_distance(first_string, second_string):
        len1 = len(first_string)
        len2 = len(second_string)
        dp_matrix = []
        for _ in range(0, (len1 + 1)):
            row = []
            for _2 in range(0, (len2 + 1)):
                row = _append(row, 0)
            dp_matrix = _append(dp_matrix, row)
        for i in range(0, (len1 + 1)):
            row = dp_matrix[i]
            row[0] = i
            dp_matrix[i] = row
        first_row = dp_matrix[0]
        for j in range(0, (len2 + 1)):
            first_row[j] = j
        dp_matrix[0] = first_row
        for i in range(1, (len1 + 1)):
            row = dp_matrix[i]
            first_char = first_string[i - 1:i]
            for j in range(1, (len2 + 1)):
                second_char = second_string[j - 1:j]
                cost = (0 if first_char == second_char else 1)
                value = dp_matrix[i - 1][j] + 1
                insertion = row[j - 1] + 1
                if insertion < value:
                    value = insertion
                substitution = dp_matrix[i - 1][j - 1] + cost
                if substitution < value:
                    value = substitution
                row[j] = value
                if i > 1 and j > 1 and first_string[i - 1:i] == second_string[j - 2:j - 1] and first_string[i - 2:i - 1] == second_string[j - 1:j]:
                    transposition = dp_matrix[i - 2][j - 2] + cost
                    if transposition < row[j]:
                        row[j] = transposition
            dp_matrix[i] = row
        return dp_matrix[len1][len2]
    print(_str(damerau_levenshtein_distance("cat", "cut")))
    print(_str(damerau_levenshtein_distance("kitten", "sitting")))
    print(_str(damerau_levenshtein_distance("hello", "world")))
    print(_str(damerau_levenshtein_distance("book", "back")))
    print(_str(damerau_levenshtein_distance("container", "containment")))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

