# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class WordCount:
    word: str
    count: int

freq_map = {}
def heapify(arr, index, heap_size):
    largest = index
    left = 2 * index + 1
    right = 2 * index + 2
    if left < heap_size:
        left_item = arr[left]
        largest_item = arr[largest]
        if left_item.count > largest_item.count:
            largest = left
    if right < heap_size:
        right_item = arr[right]
        largest_item2 = arr[largest]
        if right_item.count > largest_item2.count:
            largest = right
    if largest != index:
        temp = arr[largest]
        arr[largest] = arr[index]
        arr[index] = temp
        heapify(arr, largest, heap_size)
def build_max_heap(arr):
    i = len(arr) // 2 - 1
    while i >= 0:
        heapify(arr, i, len(arr))
        i = i - 1
def top_k_frequent_words(words, k_value):
    global freq_map
    freq_map = {}
    i = 0
    while i < len(words):
        w = words[i]
        if w in freq_map:
            freq_map[w] = freq_map.get(w, None) + 1
        else:
            freq_map[w] = 1
        i = i + 1
    heap = []
    for w in freq_map:
        heap = _append(heap, WordCount(word=w, count=freq_map.get(w, None)))
    build_max_heap(heap)
    result = []
    heap_size = len(heap)
    limit = k_value
    if limit > heap_size:
        limit = heap_size
    j = 0
    while j < limit:
        item = heap[0]
        result = _append(result, item.word)
        heap[0] = heap[heap_size - 1]
        heap[heap_size - 1] = item
        heap_size = heap_size - 1
        heapify(heap, 0, heap_size)
        j = j + 1
    return result
def main():
    sample = ["a", "b", "c", "a", "c", "c"]
    print(top_k_frequent_words(sample, 3))
    print(top_k_frequent_words(sample, 2))
    print(top_k_frequent_words(sample, 1))
    print(top_k_frequent_words(sample, 0))
main()

