# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
    def char_to_lower(c):
        i = 0
        while i < len(LETTERS):
            if c == LETTERS[i:i + 1]:
                return LOWERCASE[i:i + 1]
            i = i + 1
        return c
    def normalize(input_str):
        res = ""
        i = 0
        while i < len(input_str):
            ch = input_str[i:i + 1]
            lc = char_to_lower(ch)
            if lc >= "a" and lc <= "z":
                res = res + lc
            i = i + 1
        return res
    def can_string_be_rearranged_as_palindrome_counter(input_str):
        s = normalize(input_str)
        freq = {}
        i = 0
        while i < len(s):
            ch = s[i:i + 1]
            if ch in freq:
                freq[ch] = freq.get(ch, None) + 1
            else:
                freq[ch] = 1
            i = i + 1
        odd = 0
        for key in freq:
            if freq.get(key, None) % 2 != 0:
                odd = odd + 1
        return odd < 2
    def can_string_be_rearranged_as_palindrome(input_str):
        s = normalize(input_str)
        if len(s) == 0:
            return True
        character_freq_dict = {}
        i = 0
        while i < len(s):
            character = s[i:i + 1]
            if character in character_freq_dict:
                character_freq_dict[character] = character_freq_dict.get(character, None) + 1
            else:
                character_freq_dict[character] = 1
            i = i + 1
        odd_char = 0
        for character_key in character_freq_dict:
            character_count = character_freq_dict.get(character_key, None)
            if character_count % 2 != 0:
                odd_char = odd_char + 1
        return not (odd_char > 1)
    print(("True" if can_string_be_rearranged_as_palindrome_counter("Momo") else "False"))
    print(("True" if can_string_be_rearranged_as_palindrome_counter("Mother") else "False"))
    print(("True" if can_string_be_rearranged_as_palindrome("Momo") else "False"))
    print(("True" if can_string_be_rearranged_as_palindrome("Mother") else "False"))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

