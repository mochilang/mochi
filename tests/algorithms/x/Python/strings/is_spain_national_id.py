# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)

DIGITS = "0123456789"
UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
LOWER = "abcdefghijklmnopqrstuvwxyz"
LOOKUP_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE"
ERROR_MSG = "Input must be a string of 8 numbers plus letter"
def to_upper(s):
    res = ""
    i = 0
    while i < len(s):
        ch = s[i]
        j = 0
        converted = ch
        while j < len(LOWER):
            if LOWER[j] == ch:
                converted = UPPER[j]
                break
            j = j + 1
        res = res + converted
        i = i + 1
    return res
def is_digit(ch):
    i = 0
    while i < len(DIGITS):
        if DIGITS[i] == ch:
            return True
        i = i + 1
    return False
def clean_id(spanish_id):
    upper_id = to_upper(spanish_id)
    cleaned = ""
    i = 0
    while i < len(upper_id):
        ch = upper_id[i]
        if ch != "-":
            cleaned = cleaned + ch
        i = i + 1
    return cleaned
def is_spain_national_id(spanish_id):
    sid = clean_id(spanish_id)
    if len(sid) != 9:
        panic(ERROR_MSG)
    i = 0
    while i < 8:
        if not is_digit(sid[i]):
            panic(ERROR_MSG)
        i = i + 1
    number = int(sid[0:8])
    letter = sid[8]
    if is_digit(letter):
        panic(ERROR_MSG)
    expected = LOOKUP_LETTERS[number % 23]
    return letter == expected
def main():
    print(("True" if is_spain_national_id("12345678Z") else "False"))
    print(("True" if is_spain_national_id("12345678z") else "False"))
    print(("True" if is_spain_national_id("12345678x") else "False"))
    print(("True" if is_spain_national_id("12345678I") else "False"))
    print(("True" if is_spain_national_id("12345678-Z") else "False"))
main()

