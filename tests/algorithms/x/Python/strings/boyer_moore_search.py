# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def match_in_pattern(pat, ch):
        i = len(pat) - 1
        while i >= 0:
            if pat[i:i + 1] == ch:
                return i
            i = i - 1
        return -1
    def mismatch_in_text(text, pat, current_pos):
        i = len(pat) - 1
        while i >= 0:
            if pat[i:i + 1] != text[current_pos + i:current_pos + i + 1]:
                return current_pos + i
            i = i - 1
        return -1
    def bad_character_heuristic(text, pat):
        textLen = len(text)
        patLen = len(pat)
        positions = []
        i = 0
        while i <= textLen - patLen:
            mismatch_index = mismatch_in_text(text, pat, i)
            if mismatch_index < 0:
                positions = _append(positions, i)
                i = i + 1
            else:
                ch = text[mismatch_index:mismatch_index + 1]
                match_index = match_in_pattern(pat, ch)
                if match_index < 0:
                    i = mismatch_index + 1
                else:
                    i = mismatch_index - match_index
        return positions
    # test boyer moore basic
    positions = bad_character_heuristic("ABAABA", "AB")
    assert positions == [0, 3]
    # test boyer moore example
    positions = bad_character_heuristic("THIS IS A TEST TEXT", "TEST")
    assert positions == [10]
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

