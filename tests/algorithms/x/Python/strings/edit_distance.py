# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def min3(a, b, c):
    m = a
    if b < m:
        m = b
    if c < m:
        m = c
    return m
def edit_distance(source, target):
    if len(source) == 0:
        return len(target)
    if len(target) == 0:
        return len(source)
    last_source = source[len(source) - 1:len(source)]
    last_target = target[len(target) - 1:len(target)]
    delta = (0 if last_source == last_target else 1)
    delete_cost = edit_distance(source[0:len(source) - 1], target) + 1
    insert_cost = edit_distance(source, target[0:len(target) - 1]) + 1
    replace_cost = edit_distance(source[0:len(source) - 1], target[0:len(target) - 1]) + delta
    return min3(delete_cost, insert_cost, replace_cost)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        result = edit_distance("ATCGCTG", "TAGCTAA")
        print(_str(result))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

