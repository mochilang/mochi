# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-24 08:57 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst


def _read_file(path):
    p = path
    if '_dataDir' in globals() and _dataDir and not os.path.exists(p):
        p = os.path.join(_dataDir, path)
    try:
        with open(p, 'r') as f:
            return f.read()
    except Exception:
        return ''

def split(s, sep):
    res = []
    current = ""
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch == sep:
            res = _append(res, current)
            current = ""
        else:
            current = current + ch
        i = i + 1
    res = _append(res, current)
    return res
def insertion_sort(arr):
    a = arr
    i = 1
    while i < len(a):
        key = a[i]
        j = i - 1
        while j >= 0 and a[j] > key:
            a[j + 1] = a[j]
            j = j - 1
        a[j + 1] = key
        i = i + 1
    return a
def sort_chars(word):
    chars = []
    i = 0
    while i < len(word):
        chars = _append(chars, word[i:i + 1])
        i = i + 1
    chars = insertion_sort(chars)
    res = ""
    i = 0
    while i < len(chars):
        res = res + chars[i]
        i = i + 1
    return res
def unique_sorted(words):
    seen = {}
    res = []
    for w in words:
        if w != "" and not_(w in seen):
            res = _append(res, w)
            seen[w] = True
    res = insertion_sort(res)
    return res
word_by_signature = {}
def build_map(words):
    global word_by_signature
    for w in words:
        sig = sort_chars(w)
        arr = []
        if sig in word_by_signature:
            arr = word_by_signature.get(sig, None)
        arr = _append(arr, w)
        word_by_signature[sig] = arr
def anagram(my_word):
    sig = sort_chars(my_word)
    if sig in word_by_signature:
        return word_by_signature.get(sig, None)
    return []
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        text = _read_file("words.txt")
        lines = text.split("\n")
        words = unique_sorted(lines)
        build_map(words)
        for w in words:
            anas = anagram(w)
            if len(anas) > 1:
                line = w + ":"
                i = 0
                while i < len(anas):
                    if i > 0:
                        line = line + ","
                    line = line + anas[i]
                    i = i + 1
                print(line)
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

