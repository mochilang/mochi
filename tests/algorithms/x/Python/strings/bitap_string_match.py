# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def pow2(n):
    res = 1
    i = 0
    while i < n:
        res = res * 2
        i = i + 1
    return res
def bit_and(a, b):
    x = a
    y = b
    res = 0
    bit = 1
    while x > 0 or y > 0:
        if x % 2 == 1 and y % 2 == 1:
            res = res + bit
        x = int((x // 2))
        y = int((y // 2))
        bit = bit * 2
    return res
def bit_or(a, b):
    x = a
    y = b
    res = 0
    bit = 1
    while x > 0 or y > 0:
        if x % 2 == 1 or y % 2 == 1:
            res = res + bit
        x = int((x // 2))
        y = int((y // 2))
        bit = bit * 2
    return res
def char_to_index(ch):
    letters = "abcdefghijklmnopqrstuvwxyz"
    i = 0
    while i < len(letters):
        if letters[i:i + 1] == ch:
            return i
        i = i + 1
    return 26
def bitap_string_match(text, pattern):
    if pattern == "":
        return 0
    m = len(pattern)
    if m > len(text):
        return -1
    limit = pow2(m + 1)
    all_ones = limit - 1
    pattern_mask = []
    i = 0
    while i < 27:
        pattern_mask = _append(pattern_mask, all_ones)
        i = i + 1
    i = 0
    while i < m:
        ch = pattern[i:i + 1]
        idx = char_to_index(ch)
        pattern_mask[idx] = bit_and(pattern_mask[idx], all_ones - pow2(i))
        i = i + 1
    state = all_ones - 1
    i = 0
    while i < len(text):
        ch = text[i:i + 1]
        idx = char_to_index(ch)
        state = bit_or(state, pattern_mask[idx])
        state = (state * 2) % limit
        if bit_and(state, pow2(m)) == 0:
            return i - m + 1
        i = i + 1
    return -1
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(_str(bitap_string_match("abdabababc", "ababc")))
        print(_str(bitap_string_match("abdabababc", "")))
        print(_str(bitap_string_match("abdabababc", "c")))
        print(_str(bitap_string_match("abdabababc", "fofosdfo")))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

