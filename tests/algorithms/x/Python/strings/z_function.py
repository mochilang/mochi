# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def z_function(s):
    z = []
    i = 0
    while i < len(s):
        z = _append(z, 0)
        i = i + 1
    l = 0
    r = 0
    i = 1
    while i < len(s):
        if i <= r:
            min_edge = r - i + 1
            zi = z[i - l]
            if zi < min_edge:
                min_edge = zi
            z[i] = min_edge
        while go_next(i, z, s):
            z[i] = z[i] + 1
        if i + z[i] - 1 > r:
            l = i
            r = i + z[i] - 1
        i = i + 1
    return z
def go_next(i, z, s):
    return i + z[i] < len(s) and s[z[i]] == s[i + z[i]]
def find_pattern(pattern, input_str):
    answer = 0
    z_res = z_function(pattern + input_str)
    i = 0
    while i < len(z_res):
        if z_res[i] >= len(pattern):
            answer = answer + 1
        i = i + 1
    return answer
def list_eq_int(a, b):
    if len(a) != len(b):
        return False
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def test_z_function():
    s1 = "abracadabra"
    expected1 = [0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1]
    r1 = z_function(s1)
    if not list_eq_int(r1, expected1):
        panic("z_function abracadabra failed")
    s2 = "aaaa"
    expected2 = [0, 3, 2, 1]
    r2 = z_function(s2)
    if not list_eq_int(r2, expected2):
        panic("z_function aaaa failed")
    s3 = "zxxzxxz"
    expected3 = [0, 0, 0, 4, 0, 0, 1]
    r3 = z_function(s3)
    if not list_eq_int(r3, expected3):
        panic("z_function zxxzxxz failed")
def test_find_pattern():
    if find_pattern("abr", "abracadabra") != 2:
        panic("find_pattern abr failed")
    if find_pattern("a", "aaaa") != 4:
        panic("find_pattern aaaa failed")
    if find_pattern("xz", "zxxzxxz") != 2:
        panic("find_pattern xz failed")
def main():
    test_z_function()
    test_find_pattern()
    r1 = z_function("abracadabra")
    r2 = z_function("aaaa")
    r3 = z_function("zxxzxxz")
    print(_str(r1))
    print(_str(r2))
    print(_str(r3))
    print(_str(find_pattern("abr", "abracadabra")))
    print(_str(find_pattern("a", "aaaa")))
    print(_str(find_pattern("xz", "zxxzxxz")))
main()

