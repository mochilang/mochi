# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def has_alpha(s):
        i = 0
        while i < len(s):
            c = s[i]
            if (c >= "a" and c <= "z") or (c >= "A" and c <= "Z"):
                return True
            i = i + 1
        return False
    def parse_decimal(s):
        value = 0
        i = 0
        while i < len(s):
            c = s[i]
            if c < "0" or c > "9":
                panic("Non-digit character encountered")
            value = value * 10 + (int(c))
            i = i + 1
        return value
    def get_barcode(barcode):
        if has_alpha(barcode):
            panic("Barcode '" + barcode + "' has alphabetic characters.")
        if len(barcode) > 0 and barcode[0] == "-":
            panic("The entered barcode has a negative value. Try again.")
        return parse_decimal(barcode)
    def get_check_digit(barcode):
        num = barcode // 10
        s = 0
        position = 0
        while num != 0:
            mult = (3 if position % 2 == 0 else 1)
            s = s + mult * (num % 10)
            num = num // 10
            position = position + 1
        return (10 - (s % 10)) % 10
    def is_valid(barcode):
        return len(_str(barcode)) == 13 and get_check_digit(barcode) == barcode % 10
    print(_str(get_check_digit(8718452538119)))
    print(_str(get_check_digit(87184523)))
    print(_str(get_check_digit(87193425381086)))
    res = []
    x = 0
    while x < 100:
        res = _append(res, get_check_digit(x))
        x = x + 10
    print(res)
    print(_str(is_valid(8718452538119)))
    print(_str(is_valid(87184525)))
    print(_str(is_valid(87193425381089)))
    print(_str(is_valid(0)))
    print(_str(get_barcode("8718452538119")))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

