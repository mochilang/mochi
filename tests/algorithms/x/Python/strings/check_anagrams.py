# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def strip_and_remove_spaces(s):
        start = 0
        end = len(s) - 1
        while start < len(s) and s[start] == " ":
            start = start + 1
        while end >= start and s[end] == " ":
            end = end - 1
        res = ""
        i = start
        while i <= end:
            ch = s[i]
            if ch != " ":
                res = res + ch
            i = i + 1
        return res
    def check_anagrams(a, b):
        s1 = a.lower()
        s2 = b.lower()
        s1 = strip_and_remove_spaces(s1)
        s2 = strip_and_remove_spaces(s2)
        if len(s1) != len(s2):
            return False
        count = {}
        i = 0
        while i < len(s1):
            c1 = s1[i]
            c2 = s2[i]
            if c1 in count:
                count[c1] = count.get(c1, None) + 1
            else:
                count[c1] = 1
            if c2 in count:
                count[c2] = count.get(c2, None) - 1
            else:
                count[c2] = -1
            i = i + 1
        for ch in count:
            if count.get(ch, None) != 0:
                return False
        return True
    def print_bool(b):
        if b:
            print(("True" if True else "False"))
        else:
            print(("True" if False else "False"))
    print_bool(check_anagrams("Silent", "Listen"))
    print_bool(check_anagrams("This is a string", "Is this a string"))
    print_bool(check_anagrams("This is    a      string", "Is     this a string"))
    print_bool(check_anagrams("There", "Their"))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

