# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-24 08:57 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def validate_initial_digits(cc):
    return cc[0:2] == "34" or cc[0:2] == "35" or cc[0:2] == "37" or cc[0:1] == "4" or cc[0:1] == "5" or cc[0:1] == "6"
def luhn_validation(cc):
    sum_ = 0
    double_digit = False
    i = len(cc) - 1
    while i >= 0:
        n = int(cc[i:i + 1])
        if double_digit:
            n = n * 2
            if n > 9:
                n = n - 9
        sum_ = sum_ + n
        double_digit = not double_digit
        i = i - 1
    return sum_ % 10 == 0
def is_digit_string(s):
    i = 0
    while i < len(s):
        c = s[i:i + 1]
        if c < "0" or c > "9":
            return False
        i = i + 1
    return True
def validate_credit_card_number(cc):
    error_message = cc + " is an invalid credit card number because"
    if not is_digit_string(cc):
        print(error_message + " it has nonnumerical characters.")
        return False
    if not (len(cc) >= 13 and len(cc) <= 16):
        print(error_message + " of its length.")
        return False
    if not validate_initial_digits(cc):
        print(error_message + " of its first two digits.")
        return False
    if not luhn_validation(cc):
        print(error_message + " it fails the Luhn check.")
        return False
    print(cc + " is a valid credit card number.")
    return True
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        validate_credit_card_number("4111111111111111")
        validate_credit_card_number("32323")
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

