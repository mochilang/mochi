# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    LETTERS_AND_SPACE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n"
    LOWER = "abcdefghijklmnopqrstuvwxyz"
    UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    def to_upper(s):
        res = ""
        i = 0
        while i < len(s):
            c = s[i:i + 1]
            j = 0
            up = c
            while j < len(LOWER):
                if c == LOWER[j:j + 1]:
                    up = UPPER[j:j + 1]
                    break
                j = j + 1
            res = res + up
            i = i + 1
        return res
    def char_in(chars, c):
        i = 0
        while i < len(chars):
            if chars[i:i + 1] == c:
                return True
            i = i + 1
        return False
    def remove_non_letters(message):
        res = ""
        i = 0
        while i < len(message):
            ch = message[i:i + 1]
            if char_in(LETTERS_AND_SPACE, ch):
                res = res + ch
            i = i + 1
        return res
    def split_spaces(text):
        res = []
        current = ""
        i = 0
        while i < len(text):
            ch = text[i:i + 1]
            if ch == " ":
                res = _append(res, current)
                current = ""
            else:
                current = current + ch
            i = i + 1
        res = _append(res, current)
        return res
    def load_dictionary():
        words = ["HELLO", "WORLD", "HOW", "ARE", "YOU", "THE", "QUICK", "BROWN", "FOX", "JUMPS", "OVER", "LAZY", "DOG"]
        dict = {}
        for w in words:
            dict[w] = True
        return dict
    ENGLISH_WORDS = load_dictionary()
    def get_english_count(message):
        upper = to_upper(message)
        cleaned = remove_non_letters(upper)
        possible = split_spaces(cleaned)
        matches = 0
        total = 0
        for w in possible:
            if w != "":
                total = total + 1
                if w in ENGLISH_WORDS:
                    matches = matches + 1
        if total == 0:
            return 0.0
        return (float(matches)) / (float(total))
    def is_english(message, word_percentage, letter_percentage):
        words_match = get_english_count(message) * 100.0 >= (float(word_percentage))
        num_letters = len(remove_non_letters(message))
        letters_pct = (0.0 if len(message) == 0 else (float(num_letters)) / (float(len(message))) * 100.0)
        letters_match = letters_pct >= (float(letter_percentage))
        return words_match and letters_match
    print(_str(is_english("Hello World", 20, 85)))
    print(_str(is_english("llold HorWd", 20, 85)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

