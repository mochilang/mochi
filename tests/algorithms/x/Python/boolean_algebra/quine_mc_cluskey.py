# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def compare_string(string1, string2):
    result = ""
    count = 0
    i = 0
    while i < len(string1):
        c1 = string1[i:i + 1]
        c2 = string2[i:i + 1]
        if c1 != c2:
            count = count + 1
            result = result + "_"
        else:
            result = result + c1
        i = i + 1
    if count > 1:
        return ""
    return result
def contains_string(arr, value):
    i = 0
    while i < len(arr):
        if arr[i] == value:
            return True
        i = i + 1
    return False
def unique_strings(arr):
    res = []
    i = 0
    while i < len(arr):
        if not contains_string(res, arr[i]):
            res = _append(res, arr[i])
        i = i + 1
    return res
def check(binary):
    pi = []
    current = binary
    while True:
        check1 = []
        i = 0
        while i < len(current):
            check1 = _append(check1, "$")
            i = i + 1
        temp = []
        i = 0
        while i < len(current):
            j = i + 1
            while j < len(current):
                k = compare_string(current[i], current[j])
                if k == "":
                    check1 = _set_index(check1, i, "*")
                    check1 = _set_index(check1, j, "*")
                    temp = _append(temp, "X")
                j = j + 1
            i = i + 1
        i = 0
        while i < len(current):
            if check1[i] == "$":
                pi = _append(pi, current[i])
            i = i + 1
        if len(temp) == 0:
            return pi
        current = unique_strings(temp)
def decimal_to_binary(no_of_variable, minterms):
    temp = []
    idx = 0
    while idx < len(minterms):
        minterm = minterms[idx]
        string = ""
        i = 0
        while i < no_of_variable:
            string = str(minterm % 2) + string
            minterm = minterm // 2
            i = i + 1
        temp = _append(temp, string)
        idx = idx + 1
    return temp
def is_for_table(string1, string2, count):
    count_n = 0
    i = 0
    while i < len(string1):
        c1 = string1[i:i + 1]
        c2 = string2[i:i + 1]
        if c1 != c2:
            count_n = count_n + 1
        i = i + 1
    return count_n == count
def count_ones(row):
    c = 0
    j = 0
    while j < len(row):
        if row[j] == 1:
            c = c + 1
        j = j + 1
    return c
def selection(chart, prime_implicants):
    temp = []
    select = []
    i = 0
    while i < len(chart):
        select = _append(select, 0)
        i = i + 1
    col = 0
    while col < len(chart[0]):
        count = 0
        row = 0
        while row < len(chart):
            if chart[row][col] == 1:
                count = count + 1
            row = row + 1
        if count == 1:
            rem = 0
            row = 0
            while row < len(chart):
                if chart[row][col] == 1:
                    rem = row
                row = row + 1
            select = _set_index(select, rem, 1)
        col = col + 1
    i = 0
    while i < len(select):
        if select[i] == 1:
            j = 0
            while j < len(chart[0]):
                if chart[i][j] == 1:
                    r = 0
                    while r < len(chart):
                        chart[r][j] = 0
                        r = r + 1
                j = j + 1
            temp = _append(temp, prime_implicants[i])
        i = i + 1
    while True:
        counts = []
        r = 0
        while r < len(chart):
            counts = _append(counts, count_ones(chart[r]))
            r = r + 1
        max_n = counts[0]
        rem = 0
        k = 1
        while k < len(counts):
            if counts[k] > max_n:
                max_n = counts[k]
                rem = k
            k = k + 1
        if max_n == 0:
            return temp
        temp = _append(temp, prime_implicants[rem])
        j = 0
        while j < len(chart[0]):
            if chart[rem][j] == 1:
                r2 = 0
                while r2 < len(chart):
                    chart[r2][j] = 0
                    r2 = r2 + 1
            j = j + 1
def count_char(s, ch):
    cnt = 0
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            cnt = cnt + 1
        i = i + 1
    return cnt
def prime_implicant_chart(prime_implicants, binary):
    chart = []
    i = 0
    while i < len(prime_implicants):
        row = []
        j = 0
        while j < len(binary):
            row = _append(row, 0)
            j = j + 1
        chart = _append(chart, row)
        i = i + 1
    i = 0
    while i < len(prime_implicants):
        count = count_char(prime_implicants[i], "_")
        j = 0
        while j < len(binary):
            if is_for_table(prime_implicants[i], binary[j], count):
                chart[i][j] = 1
            j = j + 1
        i = i + 1
    return chart
def main():
    no_of_variable = 3
    minterms = [1, 5, 7]
    binary = decimal_to_binary(no_of_variable, minterms)
    prime_implicants = check(binary)
    print("Prime Implicants are:")
    print(str(prime_implicants))
    chart = prime_implicant_chart(prime_implicants, binary)
    essential_prime_implicants = selection(chart, prime_implicants)
    print("Essential Prime Implicants are:")
    print(str(essential_prime_implicants))
main()
