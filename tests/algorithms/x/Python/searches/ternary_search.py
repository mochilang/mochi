# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

precision = 10
def lin_search(left, right, array, target):
    i = left
    while i < right:
        if array[i] == target:
            return i
        i = i + 1
    return -1
def ite_ternary_search(array, target):
    left = 0
    right = len(array) - 1
    while left <= right:
        if right - left < precision:
            idx = lin_search(left, right + 1, array, target)
            return idx
        one_third = left + ((right - left) // 3)
        two_third = right - ((right - left) // 3)
        if array[one_third] == target:
            return one_third
        if array[two_third] == target:
            return two_third
        if target < array[one_third]:
            right = one_third - 1
        else:
            if array[two_third] < target:
                left = two_third + 1
            else:
                left = one_third + 1
                right = two_third - 1
    return -1
def rec_ternary_search(left, right, array, target):
    if left <= right:
        if right - left < precision:
            idx = lin_search(left, right + 1, array, target)
            return idx
        one_third = left + ((right - left) // 3)
        two_third = right - ((right - left) // 3)
        if array[one_third] == target:
            return one_third
        if array[two_third] == target:
            return two_third
        if target < array[one_third]:
            return rec_ternary_search(left, one_third - 1, array, target)
        if array[two_third] < target:
            return rec_ternary_search(two_third + 1, right, array, target)
        return rec_ternary_search(one_third + 1, two_third - 1, array, target)
    return -1
def main():
    test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42]
    print(_str(ite_ternary_search(test_list, 3)))
    print(_str(ite_ternary_search(test_list, 13)))
    print(_str(rec_ternary_search(0, len(test_list) - 1, test_list, 3)))
    print(_str(rec_ternary_search(0, len(test_list) - 1, test_list, 13)))
main()

