# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def interpolation_search(arr, item):
    left = 0
    right = len(arr) - 1
    while left <= right:
        if arr[left] == arr[right]:
            if arr[left] == item:
                return left
            return -1
        point = left + (((item - arr[left]) * (right - left)) // (arr[right] - arr[left]))
        if point < 0 or point >= len(arr):
            return -1
        current = arr[point]
        if current == item:
            return point
        if point < left:
            right = left
            left = point
        else:
            if point > right:
                left = right
                right = point
            else:
                if item < current:
                    right = point - 1
                else:
                    left = point + 1
    return -1
def interpolation_search_recursive(arr, item, left, right):
    if left > right:
        return -1
    if arr[left] == arr[right]:
        if arr[left] == item:
            return left
        return -1
    point = left + (((item - arr[left]) * (right - left)) // (arr[right] - arr[left]))
    if point < 0 or point >= len(arr):
        return -1
    if arr[point] == item:
        return point
    if point < left:
        return interpolation_search_recursive(arr, item, point, left)
    if point > right:
        return interpolation_search_recursive(arr, item, right, left)
    if arr[point] > item:
        return interpolation_search_recursive(arr, item, left, point - 1)
    return interpolation_search_recursive(arr, item, point + 1, right)
def interpolation_search_by_recursion(arr, item):
    return interpolation_search_recursive(arr, item, 0, len(arr) - 1)
print(_str(interpolation_search([1, 2, 3, 4, 5], 2)))
print(_str(interpolation_search([1, 2, 3, 4, 5], 6)))
print(_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 5)))
print(_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 100)))
print(_str(interpolation_search_by_recursion([5, 5, 5, 5, 5], 3)))

