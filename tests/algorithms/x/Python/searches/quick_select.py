# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def partition(data, pivot):
    less = []
    equal = []
    greater = []
    for i in range(0, len(data)):
        v = data[int(i)]
        if v < pivot:
            less = _append(less, v)
        else:
            if v > pivot:
                greater = _append(greater, v)
            else:
                equal = _append(equal, v)
    return [less, equal, greater]
def quick_select(items, index):
    if index < 0 or index >= len(items):
        return -1
    pivot = items[int(len(items) // 2)]
    parts = partition(items, pivot)
    smaller = parts[0]
    equal = parts[1]
    larger = parts[2]
    count = len(equal)
    m = len(smaller)
    if m <= index and index < m + count:
        return pivot
    else:
        if index < m:
            return quick_select(smaller, index)
        else:
            return quick_select(larger, index - (m + count))
def median(items):
    n = len(items)
    mid = n // 2
    if n % 2 != 0:
        return 1.0 * quick_select(items, mid)
    else:
        low = quick_select(items, mid - 1)
        high = quick_select(items, mid)
        return (1.0 * (low + high)) / 2.0
print(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5)))
print(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 1)))
print(_str(quick_select([5, 4, 3, 2], 2)))
print(_str(quick_select([3, 5, 7, 10, 2, 12], 3)))
print(_str(median([3, 2, 2, 9, 9])))
print(_str(median([2, 2, 9, 9, 9, 3])))

