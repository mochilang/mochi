# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def fibonacci(k):
    if k < 0:
        panic("k must be >= 0")
    a = 0
    b = 1
    i = 0
    while i < k:
        tmp = a + b
        a = b
        b = tmp
        i = i + 1
    return a
def min_int(a, b):
    if a < b:
        return a
    else:
        return b
def fibonacci_search(arr, val):
    n = len(arr)
    m = 0
    while fibonacci(m) < n:
        m = m + 1
    offset = 0
    while m > 0:
        i = min_int(offset + fibonacci(m - 1), n - 1)
        item = arr[i]
        if item == val:
            return i
        else:
            if val < item:
                m = m - 1
            else:
                offset = offset + fibonacci(m - 1)
                m = m - 2
    return -1
example1 = [4, 5, 6, 7]
example2 = [-18, 2]
example3 = [0, 5, 10, 15, 20, 25, 30]
print(_str(fibonacci_search(example1, 4)))
print(_str(fibonacci_search(example1, -10)))
print(_str(fibonacci_search(example2, -18)))
print(_str(fibonacci_search(example3, 15)))
print(_str(fibonacci_search(example3, 17)))

