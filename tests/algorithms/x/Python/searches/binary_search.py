# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def is_sorted(arr):
    i = 1
    while i < len(arr):
        if arr[i - 1] > arr[i]:
            return False
        i = i + 1
    return True
def binary_search(sorted_collection, item):
    if not is_sorted(sorted_collection):
        return -1
    left = 0
    right = len(sorted_collection) - 1
    while left <= right:
        midpoint = left + (right - left) // 2
        current_item = sorted_collection[midpoint]
        if current_item == item:
            return midpoint
        if item < current_item:
            right = midpoint - 1
        else:
            left = midpoint + 1
    return -1
def binary_search_by_recursion(sorted_collection, item, left, right):
    if right < left:
        return -1
    midpoint = left + (right - left) // 2
    if sorted_collection[midpoint] == item:
        return midpoint
    if sorted_collection[midpoint] > item:
        return binary_search_by_recursion(sorted_collection, item, left, midpoint - 1)
    return binary_search_by_recursion(sorted_collection, item, midpoint + 1, right)
def exponential_search(sorted_collection, item):
    if not is_sorted(sorted_collection):
        return -1
    if len(sorted_collection) == 0:
        return -1
    bound = 1
    while bound < len(sorted_collection) and sorted_collection[bound] < item:
        bound = bound * 2
    left = bound // 2
    right = min([bound, len(sorted_collection) - 1])
    return binary_search_by_recursion(sorted_collection, item, left, right)
def main():
    data = [0, 5, 7, 10, 15]
    print(_str(binary_search(data, 0)))
    print(_str(binary_search(data, 15)))
    print(_str(binary_search(data, 5)))
    print(_str(binary_search(data, 6)))
    print(_str(binary_search_by_recursion(data, 0, 0, len(data) - 1)))
    print(_str(binary_search_by_recursion(data, 15, 0, len(data) - 1)))
    print(_str(binary_search_by_recursion(data, 5, 0, len(data) - 1)))
    print(_str(binary_search_by_recursion(data, 6, 0, len(data) - 1)))
    print(_str(exponential_search(data, 0)))
    print(_str(exponential_search(data, 15)))
    print(_str(exponential_search(data, 5)))
    print(_str(exponential_search(data, 6)))
main()

