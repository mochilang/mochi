# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def set_at_int(xs, idx, value):
    i = 0
    res = []
    while i < len(xs):
        if i == idx:
            res = _append(res, value)
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def sort_int(xs):
    res = xs
    i = 1
    while i < len(res):
        key = res[i]
        j = i - 1
        while j >= 0 and res[j] > key:
            res = set_at_int(res, j + 1, res[j])
            j = j - 1
        res = set_at_int(res, j + 1, key)
        i = i + 1
    return res
def median_of_five(arr):
    sorted = sort_int(arr)
    return sorted[int(len(sorted) // 2)]
def median_of_medians(arr):
    if len(arr) <= 5:
        return median_of_five(arr)
    medians = []
    i = 0
    while i < len(arr):
        if i + 5 <= len(arr):
            medians = _append(medians, median_of_five(arr[i:i + 5]))
        else:
            medians = _append(medians, median_of_five(arr[i:len(arr)]))
        i = i + 5
    return median_of_medians(medians)
def quick_select(arr, target):
    if target > len(arr):
        return -1
    x = median_of_medians(arr)
    left = []
    right = []
    check = False
    i = 0
    while i < len(arr):
        if arr[i] < x:
            left = _append(left, arr[i])
        else:
            if arr[i] > x:
                right = _append(right, arr[i])
            else:
                if arr[i] == x:
                    if not check:
                        check = True
                    else:
                        right = _append(right, arr[i])
                else:
                    right = _append(right, arr[i])
        i = i + 1
    rank_x = len(left) + 1
    answer = 0
    if rank_x == target:
        answer = x
    else:
        if rank_x > target:
            answer = quick_select(left, target)
        else:
            answer = quick_select(right, target - rank_x)
    return answer
def main():
    print(_str(median_of_five([5, 4, 3, 2])))
    print(_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5)))
main()

