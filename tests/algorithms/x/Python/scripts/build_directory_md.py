# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def split(s, sep):
    parts = []
    cur = ""
    i = 0
    while i < len(s):
        if len(sep) > 0 and i + len(sep) <= len(s) and s[i:i + len(sep)] == sep:
            parts = _append(parts, cur)
            cur = ""
            i = i + len(sep)
        else:
            cur = cur + s[i:i + 1]
            i = i + 1
    parts = _append(parts, cur)
    return parts
def join(xs, sep):
    res = ""
    i = 0
    while i < len(xs):
        if i > 0:
            res = res + sep
        res = res + xs[i]
        i = i + 1
    return res
def repeat(s, n):
    out = ""
    i = 0
    while i < n:
        out = out + s
        i = i + 1
    return out
def replace_char(s, old, new):
    out = ""
    i = 0
    while i < len(s):
        c = s[i:i + 1]
        if c == old:
            out = out + new
        else:
            out = out + c
        i = i + 1
    return out
def contains(s, sub):
    if len(sub) == 0:
        return True
    i = 0
    while i + len(sub) <= len(s):
        if s[i:i + len(sub)] == sub:
            return True
        i = i + 1
    return False
def file_extension(name):
    i = len(name) - 1
    while i >= 0:
        if name[i:i + 1] == ".":
            return name[i:]
        i = i - 1
    return ""
def remove_extension(name):
    i = len(name) - 1
    while i >= 0:
        if name[i:i + 1] == ".":
            return name[:i]
        i = i - 1
    return name
def title_case(s):
    out = ""
    cap = True
    i = 0
    while i < len(s):
        c = s[i:i + 1]
        if c == " ":
            out = out + c
            cap = True
        else:
            if cap:
                out = out + c.upper()
                cap = False
            else:
                out = out + c.lower()
        i = i + 1
    return out
def count_char(s, ch):
    cnt = 0
    i = 0
    while i < len(s):
        if s[i:i + 1] == ch:
            cnt = cnt + 1
        i = i + 1
    return cnt
def md_prefix(level):
    if level == 0:
        return "\n##"
    return "  " * level + "*"
def print_path(old_path, new_path):
    old_parts = old_path.split("/")
    new_parts = new_path.split("/")
    i = 0
    while i < len(new_parts):
        if (i >= len(old_parts) or old_parts[i] != new_parts[i]) and new_parts[i] != "":
            title = title_case(replace_char(new_parts[i], "_", " "))
            print(md_prefix(i) + " " + title)
        i = i + 1
    return new_path
def sort_strings(xs):
    arr = xs
    i = 0
    while i < len(arr):
        min_idx = i
        j = i + 1
        while j < len(arr):
            if arr[j] < arr[min_idx]:
                min_idx = j
            j = j + 1
        tmp = arr[i]
        arr[i] = arr[min_idx]
        arr[min_idx] = tmp
        i = i + 1
    return arr
def good_file_paths(paths):
    res = []
    for p in paths:
        parts = p.split("/")
        skip = False
        k = 0
        while k < len(parts) - 1:
            part = parts[k]
            if part == "scripts" or part[0:1] == "." or part[0:1] == "_" or contains(part, "venv"):
                skip = True
            k = k + 1
        if skip:
            continue
        filename = parts[len(parts) - 1]
        if filename == "__init__.py":
            continue
        ext = file_extension(filename)
        if ext == ".py" or ext == ".ipynb":
            res = _append(res, p)
    return res
def print_directory_md(paths):
    files = sort_strings(good_file_paths(paths))
    old_path = ""
    i = 0
    while i < len(files):
        fp = files[i]
        parts = fp.split("/")
        filename = parts[len(parts) - 1]
        filepath = ""
        if len(parts) > 1:
            filepath = join(parts[:len(parts) - 1], "/")
        if filepath != old_path:
            old_path = print_path(old_path, filepath)
        indent = 0
        if len(filepath) > 0:
            indent = count_char(filepath, "/") + 1
        url = replace_char(fp, " ", "%20")
        name = title_case(replace_char(remove_extension(filename), "_", " "))
        print(md_prefix(indent) + " [" + name + "](" + url + ")")
        i = i + 1
sample = ["data_structures/linked_list.py", "data_structures/binary_tree.py", "math/number_theory/prime_check.py", "math/number_theory/greatest_common_divisor.ipynb"]
print_directory_md(sample)

