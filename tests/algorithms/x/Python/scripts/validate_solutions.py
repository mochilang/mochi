# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import hashlib

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

HEX = "0123456789abcdef"
def byte_to_hex(b):
    hi = b // 16
    lo = b % 16
    return HEX[hi] + HEX[lo]
def bytes_to_hex(bs):
    res = ""
    i = 0
    while i < len(bs):
        res = res + byte_to_hex(bs[i])
        i = i + 1
    return res
def sha256_hex(s):
    return bytes_to_hex(list(hashlib.sha256(s.encode()).digest()))
def solution_001():
    total = 0
    n = 0
    while n < 1000:
        if n % 3 == 0 or n % 5 == 0:
            total = total + n
        n = n + 1
    return _str(total)
expected = sha256_hex("233168")
answer = solution_001()
computed = sha256_hex(answer)
if computed == expected:
    print("Problem 001 passed")
else:
    print("Problem 001 failed: " + computed + " != " + expected)

