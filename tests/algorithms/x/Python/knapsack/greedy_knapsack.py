# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 11:13 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def calc_profit(profit, weight, max_weight):
    if len(profit) != len(weight):
        panic("The length of profit and weight must be same.")
    if max_weight <= 0:
        panic("max_weight must greater than zero.")
    i = 0
    while i < len(profit):
        if profit[i] < 0:
            panic("Profit can not be negative.")
        if weight[i] < 0:
            panic("Weight can not be negative.")
        i = i + 1
    n = len(profit)
    used = []
    j = 0
    while j < n:
        used = _append(used, False)
        j = j + 1
    limit = 0
    gain = 0.0
    count = 0
    while limit < max_weight and count < n:
        maxRatio = -1.0
        maxIndex = -1
        k = 0
        while k < n:
            if not used[k]:
                ratio = (float(profit[k])) // (float(weight[k]))
                if ratio > maxRatio:
                    maxRatio = ratio
                    maxIndex = k
            k = k + 1
        if maxIndex < 0:
            break
        used[maxIndex] = True
        if max_weight - limit >= weight[maxIndex]:
            limit = limit + weight[maxIndex]
            gain = gain + (float(profit[maxIndex]))
        else:
            gain = gain + (float((max_weight - limit)) / (float(weight[maxIndex]))) * (float(profit[maxIndex]))
            break
        count = count + 1
    return gain
def main():
    print(calc_profit([1, 2, 3], [3, 4, 5], 15))
    print(calc_profit([10, 9, 8], [3, 4, 5], 25))
    print(calc_profit([10, 9, 8], [3, 4, 5], 5))
main()
