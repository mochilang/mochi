# Code generated by Mochi transpiler.
# Version 0.10.66, generated on 2025-08-15 15:17 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def calc_profit(profit, weight, max_weight):
    if len(profit) != len(weight):
        panic("The length of profit and weight must be same.")
    if max_weight <= 0:
        panic("max_weight must greater than zero.")
    i = 0
    while i < len(profit):
        if profit[i] < 0:
            panic("Profit can not be negative.")
        if weight[i] < 0:
            panic("Weight can not be negative.")
        i = i + 1
    n = len(profit)
    used = []
    j = 0
    while j < n:
        used = _append(used, False)
        j = j + 1
    limit = 0
    gain = 0.0
    count = 0
    while limit < max_weight and count < n:
        maxRatio = -1.0
        maxIndex = -1
        k = 0
        while k < n:
            if not used[k]:
                ratio = (float(profit[k])) / (float(weight[k]))
                if ratio > maxRatio:
                    maxRatio = ratio
                    maxIndex = k
            k = k + 1
        if maxIndex < 0:
            break
        used[maxIndex] = True
        if max_weight - limit >= weight[maxIndex]:
            limit = limit + weight[maxIndex]
            gain = gain + (float(profit[maxIndex]))
        else:
            gain = gain + (float((max_weight - limit)) / (float(weight[maxIndex]))) * (float(profit[maxIndex]))
            break
        count = count + 1
    return gain
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(calc_profit([1, 2, 3], [3, 4, 5], 15))
        print(calc_profit([10, 9, 8], [3, 4, 5], 25))
        print(calc_profit([10, 9, 8], [3, 4, 5], 5))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

