# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def copy_list(arr):
        result = []
        i = 0
        while i < len(arr):
            result = _append(result, arr[i])
            i = i + 1
        return result
    def heaps(arr):
        if len(arr) <= 1:
            single = []
            return _append(single, copy_list(arr))
        n = len(arr)
        c = []
        i = 0
        while i < n:
            c = _append(c, 0)
            i = i + 1
        res = []
        res = _append(res, copy_list(arr))
        i = 0
        while i < n:
            if c[i] < i:
                if i % 2 == 0:
                    temp = arr[0]
                    arr[0] = arr[i]
                    arr[i] = temp
                else:
                    temp = arr[c[i]]
                    arr[c[i]] = arr[i]
                    arr[i] = temp
                res = _append(res, copy_list(arr))
                c[i] = c[i] + 1
                i = 0
            else:
                c[i] = 0
                i = i + 1
        return res
    print(str(heaps([1, 2, 3])))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
