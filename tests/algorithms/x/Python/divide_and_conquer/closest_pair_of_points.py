# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 06:45 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def abs(x):
    if x < 0.0:
        return 0.0 - x
    return x
def sqrtApprox(x):
    guess = x
    i = 0
    while i < 20:
        guess = (guess + x // guess) / 2.0
        i = i + 1
    return guess
def euclidean_distance_sqr(p1, p2):
    dx = p1[0] - p2[0]
    dy = p1[1] - p2[1]
    return dx * dx + dy * dy
def column_based_sort(arr, column):
    points = arr
    i = 0
    while i < len(points):
        j = 0
        while j < len(points) - 1:
            if points[j][column] > points[j + 1][column]:
                tmp = points[j]
                points = _set_index(points, j, points[j + 1])
                points = _set_index(points, j + 1, tmp)
            j = j + 1
        i = i + 1
    return points
def dis_between_closest_pair(points, count, min_dis):
    i = 0
    while i < count - 1:
        j = i + 1
        while j < count:
            current = euclidean_distance_sqr(points[i], points[j])
            if current < min_dis:
                min_dis = current
            j = j + 1
        i = i + 1
    return min_dis
def dis_between_closest_in_strip(points, count, min_dis):
    i_start = 0
    if 6 < count - 1:
        i_start = 6
    else:
        i_start = count - 1
    i = i_start
    while i < count:
        j_start = 0
        if i - 6 > 0:
            j_start = i - 6
        j = j_start
        while j < i:
            current = euclidean_distance_sqr(points[i], points[j])
            if current < min_dis:
                min_dis = current
            j = j + 1
        i = i + 1
    return min_dis
def closest_pair_of_points_sqr(px, py, count):
    if count <= 3:
        return dis_between_closest_pair(px, count, 1e+18)
    mid = count // 2
    left = closest_pair_of_points_sqr(px, py[0:mid], mid)
    right = closest_pair_of_points_sqr(py, py[mid:count], count - mid)
    best = left
    if right < best:
        best = right
    strip = []
    i = 0
    while i < len(px):
        if abs(px[i][0] - px[mid][0]) < best:
            strip = _append(strip, px[i])
        i = i + 1
    strip_best = dis_between_closest_in_strip(strip, len(strip), best)
    if strip_best < best:
        best = strip_best
    return best
def closest_pair_of_points(points, count):
    points_sorted_on_x = column_based_sort(points, 0)
    points_sorted_on_y = column_based_sort(points, 1)
    dist_sqr = closest_pair_of_points_sqr(points_sorted_on_x, points_sorted_on_y, count)
    return sqrtApprox(dist_sqr)
points = [[2.0, 3.0], [12.0, 30.0], [40.0, 50.0], [5.0, 1.0], [12.0, 10.0], [3.0, 4.0]]
print("Distance: " + str(closest_pair_of_points(points, len(points))))
