# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def min_slice(a, start, end):
    m = a[start]
    i = start + 1
    while i < end:
        if a[i] < m:
            m = a[i]
        i = i + 1
    return m
def max_slice(a, start, end):
    m = a[start]
    i = start + 1
    while i < end:
        if a[i] > m:
            m = a[i]
        i = i + 1
    return m
def max_diff_range(a, start, end):
    if end - start == 1:
        v = a[start]
        return [v, v]
    mid = (start + end) // 2
    left = max_diff_range(a, start, mid)
    right = max_diff_range(a, mid, end)
    small1 = left[0]
    big1 = left[1]
    small2 = right[0]
    big2 = right[1]
    min_left = min_slice(a, start, mid)
    max_right = max_slice(a, mid, end)
    cross_diff = max_right - min_left
    left_diff = big1 - small1
    right_diff = big2 - small2
    if right_diff > cross_diff and right_diff > left_diff:
        return [small2, big2]
    else:
        if left_diff > cross_diff:
            return [small1, big1]
        else:
            return [min_left, max_right]
def max_difference(a):
    return max_diff_range(a, 0, len(a))
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        result = max_difference([5, 11, 2, 1, 7, 9, 0, 7])
        print(str(result))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
