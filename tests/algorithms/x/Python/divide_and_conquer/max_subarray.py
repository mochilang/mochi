# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class Result:
    start: int
    end: int
    sum: float

def max_cross_sum(arr, low, mid, high):
    left_sum = -1e+18
    max_left = -1
    sum = 0.0
    i = mid
    while i >= low:
        sum = sum + arr[i]
        if sum > left_sum:
            left_sum = sum
            max_left = i
        i = i - 1
    right_sum = -1e+18
    max_right = -1
    sum = 0.0
    i = mid + 1
    while i <= high:
        sum = sum + arr[i]
        if sum > right_sum:
            right_sum = sum
            max_right = i
        i = i + 1
    return Result(start=max_left, end=max_right, sum=left_sum + right_sum)
def max_subarray(arr, low, high):
    if len(arr) == 0:
        return Result(start=-1, end=-1, sum=0.0)
    if low == high:
        return Result(start=low, end=high, sum=arr[low])
    mid = (low + high) // 2
    left = max_subarray(arr, low, mid)
    right = max_subarray(arr, mid + 1, high)
    cross = max_cross_sum(arr, low, mid, high)
    if left.sum >= right.sum and left.sum >= cross.sum:
        return left
    if right.sum >= left.sum and right.sum >= cross.sum:
        return right
    return cross
def show(res):
    print("[" + str(res.start) + ", " + str(res.end) + ", " + str(res.sum) + "]")
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        nums1 = [-2.0, 1.0, -3.0, 4.0, -1.0, 2.0, 1.0, -5.0, 4.0]
        res1 = max_subarray(nums1, 0, len(nums1) - 1)
        show(res1)
        nums2 = [2.0, 8.0, 9.0]
        res2 = max_subarray(nums2, 0, len(nums2) - 1)
        show(res2)
        nums3 = [0.0, 0.0]
        res3 = max_subarray(nums3, 0, len(nums3) - 1)
        show(res3)
        nums4 = [-1.0, 0.0, 1.0]
        res4 = max_subarray(nums4, 0, len(nums4) - 1)
        show(res4)
        nums5 = [-2.0, -3.0, -1.0, -4.0, -6.0]
        res5 = max_subarray(nums5, 0, len(nums5) - 1)
        show(res5)
        nums6 = []
        res6 = max_subarray(nums6, 0, 0)
        show(res6)
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
