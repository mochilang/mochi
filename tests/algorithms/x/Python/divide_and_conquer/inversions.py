# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class InvResult:
        arr: [int]
        inv: int
    def slice_list(arr, start, end):
        res = []
        k = start
        while k < end:
            res = _append(res, arr[k])
            k = k + 1
        return res
    def count_inversions_bf(arr):
        n = len(arr)
        inv = 0
        i = 0
        while i < n - 1:
            j = i + 1
            while j < n:
                if arr[i] > arr[j]:
                    inv = inv + 1
                j = j + 1
            i = i + 1
        return inv
    def count_cross_inversions(p, q):
        r = []
        i = 0
        j = 0
        inv = 0
        while i < len(p) and j < len(q):
            if p[i] > q[j]:
                inv = inv + (len(p) - i)
                r = _append(r, q[j])
                j = j + 1
            else:
                r = _append(r, p[i])
                i = i + 1
        if i < len(p):
            r = _concat(r, slice_list(p, i, len(p)))
        else:
            r = _concat(r, slice_list(q, j, len(q)))
        return InvResult(arr=r, inv=inv)
    def count_inversions_recursive(arr):
        if len(arr) <= 1:
            return InvResult(arr=arr, inv=0)
        mid = len(arr) // 2
        p = slice_list(arr, 0, mid)
        q = slice_list(arr, mid, len(arr))
        res_p = count_inversions_recursive(p)
        res_q = count_inversions_recursive(q)
        res_cross = count_cross_inversions(res_p.arr, res_q.arr)
        total = res_p.inv + res_q.inv + res_cross.inv
        return InvResult(arr=res_cross.arr, inv=total)
    arr_1 = [10, 2, 1, 5, 5, 2, 11]
    nbf = count_inversions_bf(arr_1)
    nrec = count_inversions_recursive(arr_1).inv
    print("number of inversions = ", nbf)
    arr_1 = [1, 2, 2, 5, 5, 10, 11]
    nbf2 = count_inversions_bf(arr_1)
    nrec2 = count_inversions_recursive(arr_1).inv
    print("number of inversions = ", nbf2)
    arr_1 = []
    nbf3 = count_inversions_bf(arr_1)
    nrec3 = count_inversions_recursive(arr_1).inv
    print("number of inversions = ", nbf3)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
