# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class Point:
        x: int
        y: int
    def cross(o, a, b):
        return (a.x - o.x) * (b.y - o.y) - (a.y - o.y) * (b.x - o.x)
    def sortPoints(ps):
        arr = ps
        n = len(arr)
        i = 0
        while i < n:
            j = 0
            while j < n - 1:
                p = arr[j]
                q = arr[j + 1]
                if p.x > q.x or (p.x == q.x and p.y > q.y):
                    arr[j] = q
                    arr[j + 1] = p
                j = j + 1
            i = i + 1
        return arr
    def convex_hull(ps):
        ps = sortPoints(ps)
        lower = []
        for p in ps:
            while len(lower) >= 2 and cross(lower[len(lower) - 2], lower[len(lower) - 1], p) <= 0:
                lower = lower[:len(lower) - 1]
            lower = _append(lower, p)
        upper = []
        i = len(ps) - 1
        while i >= 0:
            p = ps[i]
            while len(upper) >= 2 and cross(upper[len(upper) - 2], upper[len(upper) - 1], p) <= 0:
                upper = upper[:len(upper) - 1]
            upper = _append(upper, p)
            i = i - 1
        hull = lower[:len(lower) - 1]
        j = 0
        while j < len(upper) - 1:
            hull = _append(hull, upper[j])
            j = j + 1
        return hull
    # test convex hull
    pts = [Point(x=0, y=3), Point(x=2, y=2), Point(x=1, y=1), Point(x=2, y=1), Point(x=3, y=0), Point(x=0, y=0), Point(x=3, y=3), Point(x=2, y=-1), Point(x=2, y=-4), Point(x=1, y=-3)]
    hull = convex_hull(pts)
    assert hull == [Point(x=0, y=0), Point(x=1, y=-3), Point(x=2, y=-4), Point(x=3, y=0), Point(x=3, y=3), Point(x=0, y=3)]
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
