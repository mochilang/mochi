# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def subarray(xs, start, end):
        result = []
        k = start
        while k < end:
            result = _append(result, xs[k])
            k = k + 1
        return result
    def merge(left_half, right_half):
        result = []
        i = 0
        j = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                result = _append(result, left_half[i])
                i = i + 1
            else:
                result = _append(result, right_half[j])
                j = j + 1
        while i < len(left_half):
            result = _append(result, left_half[i])
            i = i + 1
        while j < len(right_half):
            result = _append(result, right_half[j])
            j = j + 1
        return result
    def merge_sort(array):
        if len(array) <= 1:
            return array
        middle = len(array) // 2
        left_half = subarray(array, 0, middle)
        right_half = subarray(array, middle, len(array))
        sorted_left = merge_sort(left_half)
        sorted_right = merge_sort(right_half)
        return merge(sorted_left, sorted_right)
    print(str(merge_sort([5, 3, 1, 4, 2])))
    print(str(merge_sort([-2, 3, -10, 11, 99, 100000, 100, -200])))
    print(str(merge_sort([-200])))
    print(str(merge_sort([])))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
