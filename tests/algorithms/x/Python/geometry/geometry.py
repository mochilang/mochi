# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

PI = 3.141592653589793
@dataclass
class Angle:
    degrees: float

def make_angle(deg):
    if deg < 0.0 or deg > 360.0:
        panic("degrees must be between 0 and 360")
    return Angle(degrees=deg)
@dataclass
class Side:
    length: float
    angle: Angle
    next: int

def make_side(length, angle):
    if length <= 0.0:
        panic("length must be positive")
    return Side(length=length, angle=angle, next=-1)
@dataclass
class Ellipse:
    major: float
    minor: float

def ellipse_area(e):
    return PI * e.major * e.minor
def ellipse_perimeter(e):
    return PI * (e.major + e.minor)
@dataclass
class Circle:
    radius: float

def circle_area(c):
    e = Ellipse(major=c.radius, minor=c.radius)
    area = ellipse_area(e)
    return area
def circle_perimeter(c):
    e = Ellipse(major=c.radius, minor=c.radius)
    per = ellipse_perimeter(e)
    return per
def circle_diameter(c):
    return c.radius * 2.0
def circle_max_parts(num_cuts):
    if num_cuts < 0.0:
        panic("num_cuts must be positive")
    return (num_cuts + 2.0 + num_cuts * num_cuts) * 0.5
@dataclass
class Polygon:
    sides: [Side]

def make_polygon():
    s = []
    return Polygon(sides=s)
def polygon_add_side(p, s):
    p.sides = _append(p.sides, s)
def polygon_get_side(p, index):
    return p.sides[index]
def polygon_set_side(p, index, s):
    tmp = p.sides
    tmp[index] = s
    p.sides = tmp
@dataclass
class Rectangle:
    short_side: Side
    long_side: Side
    poly: Polygon

def make_rectangle(short_len, long_len):
    if short_len <= 0.0 or long_len <= 0.0:
        panic("length must be positive")
    short = make_side(short_len, make_angle(90.0))
    long = make_side(long_len, make_angle(90.0))
    p = make_polygon()
    polygon_add_side(p, short)
    polygon_add_side(p, long)
    return Rectangle(short_side=short, long_side=long, poly=p)
def rectangle_perimeter(r):
    return (r.short_side.length + r.long_side.length) * 2.0
def rectangle_area(r):
    return r.short_side.length * r.long_side.length
@dataclass
class Square:
    side: Side
    rect: Rectangle

def make_square(side_len):
    rect = make_rectangle(side_len, side_len)
    return Square(side=rect.short_side, rect=rect)
def square_perimeter(s):
    p = rectangle_perimeter(s.rect)
    return p
def square_area(s):
    a = rectangle_area(s.rect)
    return a
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        a = make_angle(90.0)
        print(a.degrees)
        s = make_side(5.0, a)
        print(s.length)
        e = Ellipse(major=5.0, minor=10.0)
        print(ellipse_area(e))
        print(ellipse_perimeter(e))
        c = Circle(radius=5.0)
        print(circle_area(c))
        print(circle_perimeter(c))
        print(circle_diameter(c))
        print(circle_max_parts(7.0))
        r = make_rectangle(5.0, 10.0)
        print(rectangle_perimeter(r))
        print(rectangle_area(r))
        q = make_square(5.0)
        print(square_perimeter(q))
        print(square_area(q))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

