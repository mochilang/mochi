# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    DIGITS = "0123456789"
    LOWER = "abcdefghijklmnopqrstuvwxyz"
    UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    def index_of(s, ch):
        i = 0
        while i < len(s):
            if s[i] == ch:
                return i
            i = i + 1
        return -1
    def is_digit(ch):
        return index_of(DIGITS, ch) >= 0
    def to_lower(ch):
        idx = index_of(UPPER, ch)
        if idx >= 0:
            return LOWER[idx:idx + 1]
        return ch
    def pad_left(s, width):
        res = s
        while len(res) < width:
            res = "0" + res
        return res
    def alphanum_key(s):
        key = []
        i = 0
        while i < len(s):
            if is_digit(s[i]):
                num = ""
                while i < len(s) and is_digit(s[i]):
                    num = num + s[i]
                    i = i + 1
                len_str = pad_left(_str(len(num)), 3)
                key = _append(key, "#" + len_str + num)
            else:
                seg = ""
                while i < len(s):
                    if is_digit(s[i]):
                        break
                    seg = seg + to_lower(s[i])
                    i = i + 1
                key = _append(key, seg)
        return key
    def compare_keys(a, b):
        i = 0
        while i < len(a) and i < len(b):
            if a[i] < b[i]:
                return -1
            if a[i] > b[i]:
                return 1
            i = i + 1
        if len(a) < len(b):
            return -1
        if len(a) > len(b):
            return 1
        return 0
    def natural_sort(arr):
        res = []
        keys = []
        k = 0
        while k < len(arr):
            res = _append(res, arr[k])
            keys = _append(keys, alphanum_key(arr[k]))
            k = k + 1
        i = 1
        while i < len(res):
            current = res[i]
            current_key = keys[i]
            j = i - 1
            while j >= 0 and compare_keys(keys[j], current_key) > 0:
                res[j + 1] = res[j]
                keys[j + 1] = keys[j]
                j = j - 1
            res[j + 1] = current
            keys[j + 1] = current_key
            i = i + 1
        return res
    example1 = ["2 ft 7 in", "1 ft 5 in", "10 ft 2 in", "2 ft 11 in", "7 ft 6 in"]
    print(_str(natural_sort(example1)))
    example2 = ["Elm11", "Elm12", "Elm2", "elm0", "elm1", "elm10", "elm13", "elm9"]
    print(_str(natural_sort(example2)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

