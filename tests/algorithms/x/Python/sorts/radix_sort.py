# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    RADIX = 10
    def make_buckets():
        buckets = []
        i = 0
        while i < RADIX:
            buckets = _append(buckets, [])
            i = i + 1
        return buckets
    def max_value(xs):
        max_val = xs[0]
        i = 1
        while i < len(xs):
            if xs[i] > max_val:
                max_val = xs[i]
            i = i + 1
        return max_val
    def radix_sort(list_of_ints):
        placement = 1
        max_digit = max_value(list_of_ints)
        while placement <= max_digit:
            buckets = make_buckets()
            i = 0
            while i < len(list_of_ints):
                value = list_of_ints[i]
                tmp = (value // placement) % RADIX
                buckets[tmp] = _append(buckets[tmp], value)
                i = i + 1
            a = 0
            b = 0
            while b < RADIX:
                bucket = buckets[b]
                j = 0
                while j < len(bucket):
                    list_of_ints[a] = bucket[j]
                    a = a + 1
                    j = j + 1
                b = b + 1
            placement = placement * RADIX
        return list_of_ints
    print(_str(radix_sort([0, 5, 3, 2, 2])))
    print(_str(radix_sort([1, 100, 10, 1000])))
    print(_str(radix_sort([15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

