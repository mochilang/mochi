# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def int_to_float(x):
    return x * 1.0
def floor_int(x):
    i = 0
    while int_to_float(i + 1) <= x:
        i = i + 1
    return i
def set_at_float(xs, idx, value):
    i = 0
    res = []
    while i < len(xs):
        if i == idx:
            res = _append(res, value)
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def set_at_list_float(xs, idx, value):
    i = 0
    res = []
    while i < len(xs):
        if i == idx:
            res = _append(res, value)
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def sort_float(xs):
    res = xs
    i = 1
    while i < len(res):
        key = res[i]
        j = i - 1
        while j >= 0 and res[j] > key:
            res = set_at_float(res, j + 1, res[j])
            j = j - 1
        res = set_at_float(res, j + 1, key)
        i = i + 1
    return res
def bucket_sort_with_count(xs, bucket_count):
    if len(xs) == 0 or bucket_count <= 0:
        return []
    min_value = xs[0]
    max_value = xs[0]
    i = 1
    while i < len(xs):
        if xs[i] < min_value:
            min_value = xs[i]
        if xs[i] > max_value:
            max_value = xs[i]
        i = i + 1
    if max_value == min_value:
        return xs
    bucket_size = (max_value - min_value) / int_to_float(bucket_count)
    buckets = []
    i = 0
    while i < bucket_count:
        buckets = _append(buckets, [])
        i = i + 1
    i = 0
    while i < len(xs):
        val = xs[i]
        idx = floor_int((val - min_value) // bucket_size)
        if idx < 0:
            idx = 0
        if idx >= bucket_count:
            idx = bucket_count - 1
        bucket = buckets[idx]
        bucket = _append(bucket, val)
        buckets = set_at_list_float(buckets, idx, bucket)
        i = i + 1
    result = []
    i = 0
    while i < len(buckets):
        sorted_bucket = sort_float(buckets[i])
        j = 0
        while j < len(sorted_bucket):
            result = _append(result, sorted_bucket[j])
            j = j + 1
        i = i + 1
    return result
def bucket_sort(xs):
    return bucket_sort_with_count(xs, 10)
print(_str(bucket_sort([-1.0, 2.0, -5.0, 0.0])))
print(_str(bucket_sort([9.0, 8.0, 7.0, 6.0, -12.0])))
print(_str(bucket_sort([0.4, 1.2, 0.1, 0.2, -0.9])))
print(_str(bucket_sort([])))
print(_str(bucket_sort([-1e+10, 1e+10])))

