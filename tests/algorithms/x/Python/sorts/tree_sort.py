# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Node:
        value: int
        left: int
        right: int
    @dataclass
    class TreeState:
        nodes: [Node]
        root: int
    def new_node(state, value):
        state.nodes = _append(state.nodes, Node(value=value, left=(-1), right=(-1)))
        return len(state.nodes) - 1
    def insert(state, value):
        if state.root == (-1):
            state.root = new_node(state, value)
            return
        current = state.root
        nodes = state.nodes
        while True:
            node = nodes[current]
            if value < node.value:
                if node.left == (-1):
                    idx = new_node(state, value)
                    nodes = state.nodes
                    node.left = idx
                    nodes[current] = node
                    state.nodes = nodes
                    return
                current = node.left
            else:
                if value > node.value:
                    if node.right == (-1):
                        idx = new_node(state, value)
                        nodes = state.nodes
                        node.right = idx
                        nodes[current] = node
                        state.nodes = nodes
                        return
                    current = node.right
                else:
                    return
    def inorder(state, idx):
        if idx == (-1):
            return []
        node = state.nodes[idx]
        result = inorder(state, node.left)
        result = _append(result, node.value)
        right_part = inorder(state, node.right)
        i = 0
        while i < len(right_part):
            result = _append(result, right_part[i])
            i = i + 1
        return result
    def tree_sort(arr):
        state = TreeState(nodes=[], root=(-1))
        i = 0
        while i < len(arr):
            insert(state, arr[i])
            i = i + 1
        if state.root == (-1):
            return []
        return inorder(state, state.root)
    print(_str(tree_sort([])))
    print(_str(tree_sort([1])))
    print(_str(tree_sort([1, 2])))
    print(_str(tree_sort([5, 2, 7])))
    print(_str(tree_sort([5, -4, 9, 2, 7])))
    print(_str(tree_sort([5, 6, 1, -1, 4, 37, 2, 7])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

