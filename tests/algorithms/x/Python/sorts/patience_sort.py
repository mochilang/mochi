# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def bisect_left(stacks, value):
        low = 0
        high = len(stacks)
        while low < high:
            mid = (low + high) // 2
            stack = stacks[mid]
            top_idx = len(stack) - 1
            top = stack[top_idx]
            if top < value:
                low = mid + 1
            else:
                high = mid
        return low
    def reverse_list(src):
        res = []
        i = len(src) - 1
        while i >= 0:
            res = _append(res, src[i])
            i = i - 1
        return res
    def patience_sort(collection):
        stacks = []
        i = 0
        while i < len(collection):
            element = collection[i]
            idx = bisect_left(stacks, element)
            if idx != len(stacks):
                stack = stacks[idx]
                stacks[idx] = _append(stack, element)
            else:
                new_stack = [element]
                stacks = _append(stacks, new_stack)
            i = i + 1
        i = 0
        while i < len(stacks):
            stacks[i] = reverse_list(stacks[i])
            i = i + 1
        indices = []
        i = 0
        while i < len(stacks):
            indices = _append(indices, 0)
            i = i + 1
        total = 0
        i = 0
        while i < len(stacks):
            total = total + len(stacks[i])
            i = i + 1
        result = []
        count = 0
        while count < total:
            min_val = 0
            min_stack = -1
            j = 0
            while j < len(stacks):
                idx = indices[j]
                if idx < len(stacks[j]):
                    val = stacks[j][idx]
                    if min_stack < 0:
                        min_val = val
                        min_stack = j
                    else:
                        if val < min_val:
                            min_val = val
                            min_stack = j
                j = j + 1
            result = _append(result, min_val)
            indices[min_stack] = indices[min_stack] + 1
            count = count + 1
        i = 0
        while i < len(result):
            collection[i] = result[i]
            i = i + 1
        return collection
    print(_str(patience_sort([1, 9, 5, 21, 17, 6])))
    print(_str(patience_sort([])))
    print(_str(patience_sort([-3, -17, -48])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

