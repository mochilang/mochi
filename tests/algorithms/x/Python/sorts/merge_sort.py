# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def subarray(xs, start, end):
        result = []
        i = start
        while i < end:
            result = _append(result, xs[i])
            i = i + 1
        return result
    def merge(left, right):
        result = []
        i = 0
        j = 0
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                result = _append(result, left[i])
                i = i + 1
            else:
                result = _append(result, right[j])
                j = j + 1
        while i < len(left):
            result = _append(result, left[i])
            i = i + 1
        while j < len(right):
            result = _append(result, right[j])
            j = j + 1
        return result
    def merge_sort(collection):
        if len(collection) <= 1:
            return collection
        mid_index = len(collection) // 2
        left = subarray(collection, 0, mid_index)
        right = subarray(collection, mid_index, len(collection))
        sorted_left = merge_sort(left)
        sorted_right = merge_sort(right)
        return merge(sorted_left, sorted_right)
    print(_str(merge_sort([0, 5, 3, 2, 2])))
    print(_str(merge_sort([])))
    print(_str(merge_sort([-2, -5, -45])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

