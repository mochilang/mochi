# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-24 08:57 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def heapify(arr, index, heap_size):
        largest = index
        left_index = 2 * index + 1
        right_index = 2 * index + 2
        if left_index < heap_size and arr[left_index] > arr[largest]:
            largest = left_index
        if right_index < heap_size and arr[right_index] > arr[largest]:
            largest = right_index
        if largest != index:
            temp = arr[largest]
            arr[largest] = arr[index]
            arr[index] = temp
            heapify(arr, largest, heap_size)
    def heap_sort(arr):
        n = len(arr)
        i = (n // 2) - 1
        while i >= 0:
            heapify(arr, i, n)
            i = i - 1
        i = n - 1
        while i > 0:
            temp = arr[0]
            arr[0] = arr[i]
            arr[i] = temp
            heapify(arr, 0, i)
            i = i - 1
        return arr
    data = [3, 7, 9, 28, 123, -5, 8, -30, -200, 0, 4]
    result = heap_sort(data)
    print(result)
    if _str(result) != _str([-200, -30, -5, 0, 3, 4, 7, 8, 9, 28, 123]):
        panic("Assertion error")
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

