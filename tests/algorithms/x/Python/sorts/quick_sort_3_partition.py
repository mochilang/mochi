# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def quick_sort_3partition(arr, left, right):
        if right <= left:
            return arr
        a = left
        i = left
        b = right
        pivot = arr[left]
        while i <= b:
            if arr[i] < pivot:
                temp = arr[a]
                arr[a] = arr[i]
                arr[i] = temp
                a = a + 1
                i = i + 1
            else:
                if arr[i] > pivot:
                    temp = arr[b]
                    arr[b] = arr[i]
                    arr[i] = temp
                    b = b - 1
                else:
                    i = i + 1
        arr = quick_sort_3partition(arr, left, a - 1)
        arr = quick_sort_3partition(arr, b + 1, right)
        return arr
    def quick_sort_lomuto_partition(arr, left, right):
        if left < right:
            pivot_index = lomuto_partition(arr, left, right)
            arr = quick_sort_lomuto_partition(arr, left, pivot_index - 1)
            arr = quick_sort_lomuto_partition(arr, pivot_index + 1, right)
        return arr
    def lomuto_partition(arr, left, right):
        pivot = arr[right]
        store_index = left
        i = left
        while i < right:
            if arr[i] < pivot:
                temp = arr[store_index]
                arr[store_index] = arr[i]
                arr[i] = temp
                store_index = store_index + 1
            i = i + 1
        temp = arr[right]
        arr[right] = arr[store_index]
        arr[store_index] = temp
        return store_index
    def three_way_radix_quicksort(arr):
        if len(arr) <= 1:
            return arr
        pivot = arr[0]
        less = []
        equal = []
        greater = []
        i = 0
        while i < len(arr):
            val = arr[i]
            if val < pivot:
                less = _append(less, val)
            else:
                if val > pivot:
                    greater = _append(greater, val)
                else:
                    equal = _append(equal, val)
            i = i + 1
        sorted_less = three_way_radix_quicksort(less)
        sorted_greater = three_way_radix_quicksort(greater)
        result = _concat(sorted_less, equal)
        result = _concat(result, sorted_greater)
        return result
    array1 = [5, -1, -1, 5, 5, 24, 0]
    array1 = quick_sort_3partition(array1, 0, len(array1) - 1)
    print(_str(array1))
    array2 = [9, 0, 2, 6]
    array2 = quick_sort_3partition(array2, 0, len(array2) - 1)
    print(_str(array2))
    array3 = []
    array3 = quick_sort_3partition(array3, 0, len(array3) - 1)
    print(_str(array3))
    nums1 = [0, 5, 3, 1, 2]
    nums1 = quick_sort_lomuto_partition(nums1, 0, len(nums1) - 1)
    print(_str(nums1))
    nums2 = []
    nums2 = quick_sort_lomuto_partition(nums2, 0, len(nums2) - 1)
    print(_str(nums2))
    nums3 = [-2, 5, 0, -4]
    nums3 = quick_sort_lomuto_partition(nums3, 0, len(nums3) - 1)
    print(_str(nums3))
    print(_str(three_way_radix_quicksort([])))
    print(_str(three_way_radix_quicksort([1])))
    print(_str(three_way_radix_quicksort([-5, -2, 1, -2, 0, 1])))
    print(_str(three_way_radix_quicksort([1, 2, 5, 1, 2, 0, 0, 5, 2, -1])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

