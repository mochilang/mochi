# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def copy_list(xs):
        res = []
        k = 0
        while k < len(xs):
            res = _append(res, xs[k])
            k = k + 1
        return res
    def insertion_sort(xs):
        arr = copy_list(xs)
        idx = 1
        while idx < len(arr):
            value = arr[idx]
            jdx = idx - 1
            while jdx >= 0 and arr[jdx] > value:
                arr[jdx + 1] = arr[jdx]
                jdx = jdx - 1
            arr[jdx + 1] = value
            idx = idx + 1
        return arr
    def merge(left, right):
        result = []
        i = 0
        j = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                result = _append(result, left[i])
                i = i + 1
            else:
                result = _append(result, right[j])
                j = j + 1
        while i < len(left):
            result = _append(result, left[i])
            i = i + 1
        while j < len(right):
            result = _append(result, right[j])
            j = j + 1
        return result
    def tim_sort(xs):
        n = len(xs)
        runs = []
        sorted_runs = []
        current = []
        current = _append(current, xs[0])
        i = 1
        while i < n:
            if xs[i] < xs[i - 1]:
                runs = _append(runs, copy_list(current))
                current = []
                current = _append(current, xs[i])
            else:
                current = _append(current, xs[i])
            i = i + 1
        runs = _append(runs, copy_list(current))
        r = 0
        while r < len(runs):
            sorted_runs = _append(sorted_runs, insertion_sort(runs[r]))
            r = r + 1
        result = []
        r = 0
        while r < len(sorted_runs):
            result = merge(result, sorted_runs[r])
            r = r + 1
        return result
    def list_to_string(xs):
        s = "["
        k = 0
        while k < len(xs):
            s = s + _str(xs[k])
            if k < len(xs) - 1:
                s = s + ", "
            k = k + 1
        return s + "]"
    sample = [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]
    sorted_sample = tim_sort(sample)
    print(list_to_string(sorted_sample))
    sample2 = [3, 2, 1]
    sorted_sample2 = tim_sort(sample2)
    print(list_to_string(sorted_sample2))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

