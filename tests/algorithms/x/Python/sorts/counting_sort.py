# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def max_val(arr):
    m = arr[0]
    i = 1
    while i < len(arr):
        if arr[i] > m:
            m = arr[i]
        i = i + 1
    return m
def min_val(arr):
    m = arr[0]
    i = 1
    while i < len(arr):
        if arr[i] < m:
            m = arr[i]
        i = i + 1
    return m
def counting_sort(collection):
    if len(collection) == 0:
        return []
    coll_len = len(collection)
    coll_max = max_val(collection)
    coll_min = min_val(collection)
    counting_arr_length = coll_max + 1 - coll_min
    counting_arr = []
    i = 0
    while i < counting_arr_length:
        counting_arr = _append(counting_arr, 0)
        i = i + 1
    i = 0
    while i < coll_len:
        number = collection[i]
        counting_arr[number - coll_min] = counting_arr[number - coll_min] + 1
        i = i + 1
    i = 1
    while i < counting_arr_length:
        counting_arr[i] = counting_arr[i] + counting_arr[i - 1]
        i = i + 1
    ordered = []
    i = 0
    while i < coll_len:
        ordered = _append(ordered, 0)
        i = i + 1
    idx = coll_len - 1
    while idx >= 0:
        number = collection[idx]
        pos = counting_arr[number - coll_min] - 1
        ordered[pos] = number
        counting_arr[number - coll_min] = counting_arr[number - coll_min] - 1
        idx = idx - 1
    return ordered
ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
def chr(code):
    if code == 10:
        return "\n"
    if code == 13:
        return "\r"
    if code == 9:
        return "\t"
    if code >= 32 and code < 127:
        return ascii_chars[code - 32:code - 31]
    return ""
def ord(ch):
    if ch == "\n":
        return 10
    if ch == "\r":
        return 13
    if ch == "\t":
        return 9
    i = 0
    while i < len(ascii_chars):
        if ascii_chars[i:i + 1] == ch:
            return 32 + i
        i = i + 1
    return 0
def counting_sort_string(s):
    codes = []
    i = 0
    while i < len(s):
        codes = _append(codes, ord(s[i:i + 1]))
        i = i + 1
    sorted_codes = counting_sort(codes)
    res = ""
    i = 0
    while i < len(sorted_codes):
        res = res + chr(sorted_codes[i])
        i = i + 1
    return res
example1 = counting_sort([0, 5, 3, 2, 2])
print(_str(example1))
example2 = counting_sort([])
print(_str(example2))
example3 = counting_sort([-2, -5, -45])
print(_str(example3))
print(counting_sort_string("thisisthestring"))

