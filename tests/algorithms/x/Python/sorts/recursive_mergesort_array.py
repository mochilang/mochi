# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-24 08:57 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def subarray(xs, start, end):
        result = []
        k = start
        while k < end:
            result = _append(result, xs[k])
            k = k + 1
        return result
    def merge(arr):
        if len(arr) > 1:
            middle_length = len(arr) // 2
            left_array = subarray(arr, 0, middle_length)
            right_array = subarray(arr, middle_length, len(arr))
            left_size = len(left_array)
            right_size = len(right_array)
            merge(left_array)
            merge(right_array)
            left_index = 0
            right_index = 0
            index = 0
            while left_index < left_size and right_index < right_size:
                if left_array[left_index] < right_array[right_index]:
                    arr[index] = left_array[left_index]
                    left_index = left_index + 1
                else:
                    arr[index] = right_array[right_index]
                    right_index = right_index + 1
                index = index + 1
            while left_index < left_size:
                arr[index] = left_array[left_index]
                left_index = left_index + 1
                index = index + 1
            while right_index < right_size:
                arr[index] = right_array[right_index]
                right_index = right_index + 1
                index = index + 1
        return arr
    print(_str(merge([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])))
    print(_str(merge([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])))
    print(_str(merge([10, 22, 1, 2, 3, 9, 15, 23])))
    print(_str(merge([100])))
    print(_str(merge([])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

