# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def subarray(xs, start, end):
    result = []
    k = start
    while k < end:
        result = _append(result, xs[k])
        k = k + 1
    return result
def merge(left_half, right_half):
    result = []
    i = 0
    j = 0
    while i < len(left_half) and j < len(right_half):
        if left_half[i] < right_half[j]:
            result = _append(result, left_half[i])
            i = i + 1
        else:
            result = _append(result, right_half[j])
            j = j + 1
    while i < len(left_half):
        result = _append(result, left_half[i])
        i = i + 1
    while j < len(right_half):
        result = _append(result, right_half[j])
        j = j + 1
    return result
def merge_sort(array):
    if len(array) <= 1:
        return array
    middle = len(array) // 2
    left_half = subarray(array, 0, middle)
    right_half = subarray(array, middle, len(array))
    sorted_left = merge_sort(left_half)
    sorted_right = merge_sort(right_half)
    return merge(sorted_left, sorted_right)
def split_into_blocks(data, block_size):
    blocks = []
    i = 0
    while i < len(data):
        end = (i + block_size if i + block_size < len(data) else len(data))
        block = subarray(data, i, end)
        sorted_block = merge_sort(block)
        blocks = _append(blocks, sorted_block)
        i = end
    return blocks
def merge_blocks(blocks):
    num_blocks = len(blocks)
    indices = []
    i = 0
    while i < num_blocks:
        indices = _append(indices, 0)
        i = i + 1
    result = []
    done = False
    while not done:
        done = True
        min_val = 0
        min_block = 0 - 1
        j = 0
        while j < num_blocks:
            idx = indices[j]
            if idx < len(blocks[j]):
                val = blocks[j][idx]
                if min_block == (0 - 1) or val < min_val:
                    min_val = val
                    min_block = j
                done = False
            j = j + 1
        if not done:
            result = _append(result, min_val)
            indices[min_block] = indices[min_block] + 1
    return result
def external_sort(data, block_size):
    blocks = split_into_blocks(data, block_size)
    return merge_blocks(blocks)
def main():
    data = [7, 1, 5, 3, 9, 2, 6, 4, 8, 0]
    sorted_data = external_sort(data, 3)
    print(sorted_data)
main()

