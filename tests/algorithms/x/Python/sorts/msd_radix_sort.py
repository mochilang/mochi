# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def get_bit_length(n):
        if n == 0:
            return 1
        length = 0
        num = n
        while num > 0:
            length = length + 1
            num = num // 2
        return length
    def max_bit_length(nums):
        i = 0
        max_len = 0
        while i < len(nums):
            l = get_bit_length(nums[i])
            if l > max_len:
                max_len = l
            i = i + 1
        return max_len
    def get_bit(num, pos):
        n = num
        i = 0
        while i < pos:
            n = n // 2
            i = i + 1
        return n % 2
    def _msd_radix_sort(nums, bit_position):
        if bit_position == 0 or len(nums) <= 1:
            return nums
        zeros = []
        ones = []
        i = 0
        while i < len(nums):
            num = nums[i]
            if get_bit(num, bit_position - 1) == 1:
                ones = _append(ones, num)
            else:
                zeros = _append(zeros, num)
            i = i + 1
        zeros = _msd_radix_sort(zeros, bit_position - 1)
        ones = _msd_radix_sort(ones, bit_position - 1)
        res = zeros
        i = 0
        while i < len(ones):
            res = _append(res, ones[i])
            i = i + 1
        return res
    def msd_radix_sort(nums):
        if len(nums) == 0:
            return []
        i = 0
        while i < len(nums):
            if nums[i] < 0:
                panic("All numbers must be positive")
            i = i + 1
        bits = max_bit_length(nums)
        result = _msd_radix_sort(nums, bits)
        return result
    def msd_radix_sort_inplace(nums):
        return msd_radix_sort(nums)
    ex1 = [40, 12, 1, 100, 4]
    sorted1 = msd_radix_sort(ex1)
    print(_str(sorted1))
    ex2 = []
    sorted2 = msd_radix_sort(ex2)
    print(_str(sorted2))
    ex3 = [123, 345, 123, 80]
    sorted3 = msd_radix_sort(ex3)
    print(_str(sorted3))
    ex4 = [1209, 834598, 1, 540402, 45]
    sorted4 = msd_radix_sort(ex4)
    print(_str(sorted4))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

