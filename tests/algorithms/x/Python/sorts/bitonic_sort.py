# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def set_at_int(xs, idx, value):
    res = []
    i = 0
    while i < len(xs):
        if i == idx:
            res = _append(res, value)
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def comp_and_swap(arr, i, j, dir):
    res = arr
    xi = arr[i]
    xj = arr[j]
    if (dir == 1 and xi > xj) or (dir == 0 and xi < xj):
        res = set_at_int(res, i, xj)
        res = set_at_int(res, j, xi)
    return res
def bitonic_merge(arr, low, length, dir):
    res = arr
    if length > 1:
        mid = length // 2
        k = low
        while k < low + mid:
            res = comp_and_swap(res, k, k + mid, dir)
            k = k + 1
        res = bitonic_merge(res, low, mid, dir)
        res = bitonic_merge(res, low + mid, mid, dir)
    return res
def bitonic_sort(arr, low, length, dir):
    res = arr
    if length > 1:
        mid = length // 2
        res = bitonic_sort(res, low, mid, 1)
        res = bitonic_sort(res, low + mid, mid, 0)
        res = bitonic_merge(res, low, length, dir)
    return res
def main():
    data = [12, 34, 92, -23, 0, -121, -167, 145]
    asc = bitonic_sort(data, 0, len(data), 1)
    print(_str(asc))
    desc = bitonic_merge(asc, 0, len(asc), 0)
    print(_str(desc))
main()

