# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def odd_even_sort(xs):
    arr = []
    i = 0
    while i < len(xs):
        arr = _append(arr, xs[i])
        i = i + 1
    n = len(arr)
    sorted = False
    while sorted == False:
        sorted = True
        j = 0
        while j < n - 1:
            if arr[j] > arr[j + 1]:
                tmp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = tmp
                sorted = False
            j = j + 2
        j = 1
        while j < n - 1:
            if arr[j] > arr[j + 1]:
                tmp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = tmp
                sorted = False
            j = j + 2
    return arr
def print_list(xs):
    i = 0
    out = ""
    while i < len(xs):
        if i > 0:
            out = out + " "
        out = out + _str(xs[i])
        i = i + 1
    print(out)
def test_odd_even_sort():
    a = [5, 4, 3, 2, 1]
    r1 = odd_even_sort(a)
    if r1[0] != 1 or r1[1] != 2 or r1[2] != 3 or r1[3] != 4 or r1[4] != 5:
        panic("case1 failed")
    b = []
    r2 = odd_even_sort(b)
    if len(r2) != 0:
        panic("case2 failed")
    c = [-10, -1, 10, 2]
    r3 = odd_even_sort(c)
    if r3[0] != (-10) or r3[1] != (-1) or r3[2] != 2 or r3[3] != 10:
        panic("case3 failed")
    d = [1, 2, 3, 4]
    r4 = odd_even_sort(d)
    if r4[0] != 1 or r4[1] != 2 or r4[2] != 3 or r4[3] != 4:
        panic("case4 failed")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_odd_even_sort()
        sample = [5, 4, 3, 2, 1]
        sorted = odd_even_sort(sample)
        print_list(sorted)
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

