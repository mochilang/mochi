# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def make_list(n, value):
        result = []
        i = 0
        while i < n:
            result = _append(result, value)
            i = i + 1
        return result
    def min_value(arr):
        m = arr[0]
        i = 1
        while i < len(arr):
            if arr[i] < m:
                m = arr[i]
            i = i + 1
        return m
    def max_value(arr):
        m = arr[0]
        i = 1
        while i < len(arr):
            if arr[i] > m:
                m = arr[i]
            i = i + 1
        return m
    def pigeon_sort(array):
        if len(array) == 0:
            return array
        mn = min_value(array)
        mx = max_value(array)
        holes_range = mx - mn + 1
        holes = make_list(holes_range, 0)
        holes_repeat = make_list(holes_range, 0)
        i = 0
        while i < len(array):
            index = array[i] - mn
            holes[index] = array[i]
            holes_repeat[index] = holes_repeat[index] + 1
            i = i + 1
        array_index = 0
        h = 0
        while h < holes_range:
            while holes_repeat[h] > 0:
                array[array_index] = holes[h]
                array_index = array_index + 1
                holes_repeat[h] = holes_repeat[h] - 1
            h = h + 1
        return array
    print(_str(pigeon_sort([0, 5, 3, 2, 2])))
    print(_str(pigeon_sort([])))
    print(_str(pigeon_sort([-2, -5, -45])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

