# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def merge(a, low, mid, high):
        left = a[low:mid]
        right = a[mid:high + 1]
        result = []
        while len(left) > 0 and len(right) > 0:
            if left[0] <= right[0]:
                result = _append(result, left[0])
                left = left[1:]
            else:
                result = _append(result, right[0])
                right = right[1:]
        i = 0
        while i < len(left):
            result = _append(result, left[i])
            i = i + 1
        i = 0
        while i < len(right):
            result = _append(result, right[i])
            i = i + 1
        i = 0
        while i < len(result):
            a[low + i] = result[i]
            i = i + 1
        return a
    def iter_merge_sort(items):
        n = len(items)
        if n <= 1:
            return items
        arr = items[0:]
        p = 2
        while p <= n:
            i = 0
            while i < n:
                high = i + p - 1
                if high >= n:
                    high = n - 1
                low = i
                mid = (low + high + 1) // 2
                arr = merge(arr, low, mid, high)
                i = i + p
            if p * 2 >= n:
                mid2 = i - p
                arr = merge(arr, 0, mid2, n - 1)
                break
            p = p * 2
        return arr
    def list_to_string(arr):
        s = "["
        i = 0
        while i < len(arr):
            s = s + _str(arr[i])
            if i < len(arr) - 1:
                s = s + ", "
            i = i + 1
        return s + "]"
    print(list_to_string(iter_merge_sort([5, 9, 8, 7, 1, 2, 7])))
    print(list_to_string(iter_merge_sort([1])))
    print(list_to_string(iter_merge_sort([2, 1])))
    print(list_to_string(iter_merge_sort([4, 3, 2, 1])))
    print(list_to_string(iter_merge_sort([5, 4, 3, 2, 1])))
    print(list_to_string(iter_merge_sort([-2, -9, -1, -4])))
    print(list_to_string(iter_merge_sort([])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

