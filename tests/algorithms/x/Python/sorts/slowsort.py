# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def swap(seq, i, j):
        temp = seq[i]
        seq[i] = seq[j]
        seq[j] = temp
    def slowsort_recursive(seq, start, end_index):
        if start >= end_index:
            return
        mid = (start + end_index) // 2
        slowsort_recursive(seq, start, mid)
        slowsort_recursive(seq, mid + 1, end_index)
        if seq[end_index] < seq[mid]:
            swap(seq, end_index, mid)
        slowsort_recursive(seq, start, end_index - 1)
    def slow_sort(seq):
        if len(seq) > 0:
            slowsort_recursive(seq, 0, len(seq) - 1)
        return seq
    seq1 = [1, 6, 2, 5, 3, 4, 4, 5]
    print(_str(slow_sort(seq1)))
    seq2 = []
    print(_str(slow_sort(seq2)))
    seq3 = [2]
    print(_str(slow_sort(seq3)))
    seq4 = [1, 2, 3, 4]
    print(_str(slow_sort(seq4)))
    seq5 = [4, 3, 2, 1]
    print(_str(slow_sort(seq5)))
    seq6 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
    slowsort_recursive(seq6, 2, 7)
    print(_str(seq6))
    seq7 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
    slowsort_recursive(seq7, 0, 4)
    print(_str(seq7))
    seq8 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
    slowsort_recursive(seq8, 5, len(seq8) - 1)
    print(_str(seq8))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

