# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def pigeonhole_sort(arr):
        if len(arr) == 0:
            return arr
        min_val = int(min(arr))
        max_val = int(max(arr))
        size = max_val - min_val + 1
        holes = []
        i = 0
        while i < size:
            holes = _append(holes, 0)
            i = i + 1
        i = 0
        while i < len(arr):
            x = arr[i]
            index = x - min_val
            holes[index] = holes[index] + 1
            i = i + 1
        sorted_index = 0
        count = 0
        while count < size:
            while holes[count] > 0:
                arr[sorted_index] = count + min_val
                holes[count] = holes[count] - 1
                sorted_index = sorted_index + 1
            count = count + 1
        return arr
    example = [8, 3, 2, 7, 4, 6, 8]
    result = pigeonhole_sort(example)
    output = "Sorted order is:"
    j = 0
    while j < len(result):
        output = output + " " + _str(result[j])
        j = j + 1
    print(output)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

