# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def list_min(xs):
    i = 1
    m = xs[0]
    while i < len(xs):
        if xs[i] < m:
            m = xs[i]
        i = i + 1
    return m
def list_max(xs):
    i = 1
    m = xs[0]
    while i < len(xs):
        if xs[i] > m:
            m = xs[i]
        i = i + 1
    return m
def remove_once(xs, value):
    res = []
    removed = False
    i = 0
    while i < len(xs):
        if not removed and xs[i] == value:
            removed = True
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def reverse_list(xs):
    res = []
    i = len(xs) - 1
    while i >= 0:
        res = _append(res, xs[i])
        i = i - 1
    return res
def merge_sort(collection):
    start = []
    end = []
    coll = collection
    while len(coll) > 1:
        mn = list_min(coll)
        mx = list_max(coll)
        start = _append(start, mn)
        end = _append(end, mx)
        coll = remove_once(coll, mn)
        coll = remove_once(coll, mx)
    end = reverse_list(end)
    return _concat(_concat(start, coll), end)
def test_merge_sort():
    if merge_sort([0, 5, 3, 2, 2]) != [0, 2, 2, 3, 5]:
        panic("case1 failed")
    if merge_sort([]) != []:
        panic("case2 failed")
    if merge_sort([-2, -5, -45]) != [-45, -5, -2]:
        panic("case3 failed")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_merge_sort()
        print(_str(merge_sort([0, 5, 3, 2, 2])))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

