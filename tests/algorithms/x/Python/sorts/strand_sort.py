# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def merge(xs, ys, reverse):
        result = []
        i = 0
        j = 0
        while i < len(xs) and j < len(ys):
            if reverse:
                if xs[i] > ys[j]:
                    result = _append(result, xs[i])
                    i = i + 1
                else:
                    result = _append(result, ys[j])
                    j = j + 1
            else:
                if xs[i] < ys[j]:
                    result = _append(result, xs[i])
                    i = i + 1
                else:
                    result = _append(result, ys[j])
                    j = j + 1
        while i < len(xs):
            result = _append(result, xs[i])
            i = i + 1
        while j < len(ys):
            result = _append(result, ys[j])
            j = j + 1
        return result
    def strand_sort_rec(arr, reverse, solution):
        if len(arr) == 0:
            return solution
        sublist = []
        remaining = []
        sublist = _append(sublist, arr[0])
        last = arr[0]
        k = 1
        while k < len(arr):
            item = arr[k]
            if reverse:
                if item < last:
                    sublist = _append(sublist, item)
                    last = item
                else:
                    remaining = _append(remaining, item)
            else:
                if item > last:
                    sublist = _append(sublist, item)
                    last = item
                else:
                    remaining = _append(remaining, item)
            k = k + 1
        solution = merge(solution, sublist, reverse)
        return strand_sort_rec(remaining, reverse, solution)
    def strand_sort(arr, reverse):
        return strand_sort_rec(arr, reverse, [])
    print(_str(strand_sort([4, 3, 5, 1, 2], False)))
    print(_str(strand_sort([4, 3, 5, 1, 2], True)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

