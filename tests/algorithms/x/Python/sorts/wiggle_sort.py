# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def swap(xs, i, j):
        res = []
        k = 0
        while k < len(xs):
            if k == i:
                res = _append(res, xs[j])
            else:
                if k == j:
                    res = _append(res, xs[i])
                else:
                    res = _append(res, xs[k])
            k = k + 1
        return res
    def wiggle_sort(nums):
        i = 0
        res = nums
        while i < len(res):
            j = (len(res) - 1 if i == 0 else i - 1)
            prev = res[j]
            curr = res[i]
            if (i % 2 == 1) == (prev > curr):
                res = swap(res, j, i)
            i = i + 1
        return res
    print(_str(wiggle_sort([3.0, 5.0, 2.0, 1.0, 6.0, 4.0])))
    print(_str(wiggle_sort([0.0, 5.0, 3.0, 2.0, 2.0])))
    print(_str(wiggle_sort([])))
    print(_str(wiggle_sort([-2.0, -5.0, -45.0])))
    print(_str(wiggle_sort([-2.1, -5.68, -45.11])))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

