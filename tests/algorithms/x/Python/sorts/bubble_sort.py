# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def bubble_sort_iterative(collection):
    n = len(collection)
    while n > 0:
        swapped = False
        j = 0
        while j < n - 1:
            if collection[j] > collection[j + 1]:
                temp = collection[j]
                collection[j] = collection[j + 1]
                collection[j + 1] = temp
                swapped = True
            j = j + 1
        if not swapped:
            break
        n = n - 1
    return collection
def bubble_sort_recursive(collection):
    n = len(collection)
    swapped = False
    i = 0
    while i < n - 1:
        if collection[i] > collection[i + 1]:
            temp = collection[i]
            collection[i] = collection[i + 1]
            collection[i + 1] = temp
            swapped = True
        i = i + 1
    if swapped:
        return bubble_sort_recursive(collection)
    return collection
def copy_list(xs):
    out = []
    i = 0
    while i < len(xs):
        out = _append(out, xs[i])
        i = i + 1
    return out
def list_eq(a, b):
    if len(a) != len(b):
        return False
    k = 0
    while k < len(a):
        if a[k] != b[k]:
            return False
        k = k + 1
    return True
def test_bubble_sort():
    example = [0, 5, 2, 3, 2]
    expected = [0, 2, 2, 3, 5]
    if not list_eq(bubble_sort_iterative(copy_list(example)), expected):
        panic("iterative failed")
    if not list_eq(bubble_sort_recursive(copy_list(example)), expected):
        panic("recursive failed")
    empty = []
    if len(bubble_sort_iterative(copy_list(empty))) != 0:
        panic("empty iterative failed")
    if len(bubble_sort_recursive(copy_list(empty))) != 0:
        panic("empty recursive failed")
def main():
    test_bubble_sort()
    arr = [5, 1, 4, 2, 8]
    print(_str(bubble_sort_iterative(copy_list(arr))))
    print(_str(bubble_sort_recursive(copy_list(arr))))
main()

