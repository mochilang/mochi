# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-24 08:57 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def binary_search_insertion_from(sorted_list, item, start):
    left = start
    right = len(sorted_list) - 1
    while left <= right:
        middle = (left + right) // 2
        if left == right:
            if sorted_list[middle] < item:
                left = middle + 1
            break
        else:
            if sorted_list[middle] < item:
                left = middle + 1
            else:
                right = middle - 1
    result = []
    i = 0
    while i < left:
        result = _append(result, sorted_list[i])
        i = i + 1
    result = _append(result, item)
    while i < len(sorted_list):
        result = _append(result, sorted_list[i])
        i = i + 1
    return result
def binary_search_insertion(sorted_list, item):
    return binary_search_insertion_from(sorted_list, item, 0)
def merge(left, right):
    result = []
    i = 0
    j = 0
    while i < len(left) and j < len(right):
        if left[i][0] < right[j][0]:
            result = _append(result, left[i])
            i = i + 1
        else:
            result = _append(result, right[j])
            j = j + 1
    while i < len(left):
        result = _append(result, left[i])
        i = i + 1
    while j < len(right):
        result = _append(result, right[j])
        j = j + 1
    return result
def sortlist_2d(list_2d):
    length = len(list_2d)
    if length <= 1:
        return list_2d
    middle = length // 2
    left = []
    i = 0
    while i < middle:
        left = _append(left, list_2d[i])
        i = i + 1
    right = []
    j = middle
    while j < length:
        right = _append(right, list_2d[j])
        j = j + 1
    return merge(sortlist_2d(left), sortlist_2d(right))
def merge_insertion_sort(collection):
    if len(collection) <= 1:
        return collection
    two_paired_list = []
    has_last_odd_item = False
    i = 0
    while i < len(collection):
        if i == len(collection) - 1:
            has_last_odd_item = True
        else:
            a = collection[i]
            b = collection[i + 1]
            if a < b:
                two_paired_list = _append(two_paired_list, [a, b])
            else:
                two_paired_list = _append(two_paired_list, [b, a])
        i = i + 2
    sorted_list_2d = sortlist_2d(two_paired_list)
    result = []
    i = 0
    while i < len(sorted_list_2d):
        result = _append(result, sorted_list_2d[i][0])
        i = i + 1
    result = _append(result, sorted_list_2d[len(sorted_list_2d) - 1][1])
    if has_last_odd_item:
        result = binary_search_insertion(result, collection[len(collection) - 1])
    inserted_before = False
    idx = 0
    while idx < len(sorted_list_2d) - 1:
        if has_last_odd_item and result[idx] == collection[len(collection) - 1]:
            inserted_before = True
        pivot = sorted_list_2d[idx][1]
        if inserted_before:
            result = binary_search_insertion_from(result, pivot, idx + 2)
        else:
            result = binary_search_insertion_from(result, pivot, idx + 1)
        idx = idx + 1
    return result
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        example1 = [0, 5, 3, 2, 2]
        example2 = [99]
        example3 = [-2, -5, -45]
        print(_str(merge_insertion_sort(example1)))
        print(_str(merge_insertion_sort(example2)))
        print(_str(merge_insertion_sort(example3)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

