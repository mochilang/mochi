# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 17:23 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def binary_search_insertion_from(sorted_list, item, start):
    left = start
    right = len(sorted_list) - 1
    while left <= right:
        middle = (left + right) // 2
        if left == right:
            if sorted_list[middle] < item:
                left = middle + 1
            break
        else:
            if sorted_list[middle] < item:
                left = middle + 1
            else:
                right = middle - 1
    result = []
    i = 0
    while i < left:
        result = _append(result, sorted_list[i])
        i = i + 1
    result = _append(result, item)
    while i < len(sorted_list):
        result = _append(result, sorted_list[i])
        i = i + 1
    return result
def binary_search_insertion(sorted_list, item):
    return binary_search_insertion_from(sorted_list, item, 0)
def merge(left, right):
    result = []
    i = 0
    j = 0
    while i < len(left) and j < len(right):
        if left[i][0] < right[j][0]:
            result = _append(result, left[i])
            i = i + 1
        else:
            result = _append(result, right[j])
            j = j + 1
    while i < len(left):
        result = _append(result, left[i])
        i = i + 1
    while j < len(right):
        result = _append(result, right[j])
        j = j + 1
    return result
def sortlist_2d(list_2d):
    length = len(list_2d)
    if length <= 1:
        return list_2d
    middle = length // 2
    left = []
    i = 0
    while i < middle:
        left = _append(left, list_2d[i])
        i = i + 1
    right = []
    j = middle
    while j < length:
        right = _append(right, list_2d[j])
        j = j + 1
    return merge(sortlist_2d(left), sortlist_2d(right))
def merge_insertion_sort(collection):
    if len(collection) <= 1:
        return collection
    two_paired_list = []
    has_last_odd_item = False
    i = 0
    while i < len(collection):
        if i == len(collection) - 1:
            has_last_odd_item = True
        else:
            a = collection[i]
            b = collection[i + 1]
            if a < b:
                two_paired_list = _append(two_paired_list, [a, b])
            else:
                two_paired_list = _append(two_paired_list, [b, a])
        i = i + 2
    sorted_list_2d = sortlist_2d(two_paired_list)
    result = []
    i = 0
    while i < len(sorted_list_2d):
        result = _append(result, sorted_list_2d[i][0])
        i = i + 1
    result = _append(result, sorted_list_2d[len(sorted_list_2d) - 1][1])
    if has_last_odd_item:
        result = binary_search_insertion(result, collection[len(collection) - 1])
    inserted_before = False
    idx = 0
    while idx < len(sorted_list_2d) - 1:
        if has_last_odd_item and result[idx] == collection[len(collection) - 1]:
            inserted_before = True
        pivot = sorted_list_2d[idx][1]
        if inserted_before:
            result = binary_search_insertion_from(result, pivot, idx + 2)
        else:
            result = binary_search_insertion_from(result, pivot, idx + 1)
        idx = idx + 1
    return result
def main():
    example1 = [0, 5, 3, 2, 2]
    example2 = [99]
    example3 = [-2, -5, -45]
    print(_str(merge_insertion_sort(example1)))
    print(_str(merge_insertion_sort(example2)))
    print(_str(merge_insertion_sort(example3)))
main()

