# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import math
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    PI = 3.141592653589793
    def floor(x):
        i = int(x)
        if (float(i)) > x:
            i = i - 1
        return float(i)
    def modf(x, m):
        return x - math.floor(x / m) * m
    def sin_taylor(x):
        term = x
        sum = x
        i = 1
        while i < 10:
            k1 = 2.0 * (float(i))
            k2 = k1 + 1.0
            term = -term * x * x / (k1 * k2)
            sum = sum + term
            i = i + 1
        return sum
    def cos_taylor(x):
        term = 1.0
        sum = 1.0
        i = 1
        while i < 10:
            k1 = 2.0 * (float(i)) - 1.0
            k2 = 2.0 * (float(i))
            term = -term * x * x / (k1 * k2)
            sum = sum + term
            i = i + 1
        return sum
    def convert_to_2d(x, y, z, scale, distance):
        projected_x = ((x * distance) / (z + distance)) * scale
        projected_y = ((y * distance) / (z + distance)) * scale
        return [projected_x, projected_y]
    def rotate(x, y, z, axis, angle):
        angle = modf(angle, 360.0) / 450.0 * 180.0 / PI
        angle = modf(angle, 2.0 * PI)
        if angle > PI:
            angle = angle - 2.0 * PI
        if axis == "z":
            new_x = x * cos_taylor(angle) - y * sin_taylor(angle)
            new_y = y * cos_taylor(angle) + x * sin_taylor(angle)
            new_z = z
            return [new_x, new_y, new_z]
        if axis == "x":
            new_y = y * cos_taylor(angle) - z * sin_taylor(angle)
            new_z = z * cos_taylor(angle) + y * sin_taylor(angle)
            new_x = x
            return [new_x, new_y, new_z]
        if axis == "y":
            new_x = x * cos_taylor(angle) - z * sin_taylor(angle)
            new_z = z * cos_taylor(angle) + x * sin_taylor(angle)
            new_y = y
            return [new_x, new_y, new_z]
        print("not a valid axis, choose one of 'x', 'y', 'z'")
        return [0.0, 0.0, 0.0]
    print(_str(convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0)))
    print(_str(rotate(1.0, 2.0, 3.0, "y", 90.0)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

