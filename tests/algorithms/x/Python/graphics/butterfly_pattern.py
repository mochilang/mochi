# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def repeat_char(ch, count):
        result = ""
        i = 0
        while i < count:
            result = result + ch
            i = i + 1
        return result
    def butterfly_pattern(n):
        lines = []
        i = 1
        while i < n:
            left = repeat_char("*", i)
            mid = repeat_char(" ", 2 * (n - i) - 1)
            right = repeat_char("*", i)
            lines = _append(lines, left + mid + right)
            i = i + 1
        lines = _append(lines, repeat_char("*", 2 * n - 1))
        j = n - 1
        while j > 0:
            left = repeat_char("*", j)
            mid = repeat_char(" ", 2 * (n - j) - 1)
            right = repeat_char("*", j)
            lines = _append(lines, left + mid + right)
            j = j - 1
        out = ""
        k = 0
        while k < len(lines):
            if k > 0:
                out = out + "\n"
            out = out + lines[k]
            k = k + 1
        return out
    print(butterfly_pattern(3))
    print(butterfly_pattern(5))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

