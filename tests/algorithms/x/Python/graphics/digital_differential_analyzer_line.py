# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:38 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class Point:
    x: int
    y: int

def abs_int(n):
    if n < 0:
        return -n
    return n
def round_int(x):
    return int((x + 0.5))
def digital_differential_analyzer_line(p1, p2):
    dx = p2.x - p1.x
    dy = p2.y - p1.y
    abs_dx = abs_int(dx)
    abs_dy = abs_int(dy)
    steps = (abs_dx if abs_dx > abs_dy else abs_dy)
    x_increment = (float(dx)) // (float(steps))
    y_increment = (float(dy)) // (float(steps))
    coordinates = []
    x = float(p1.x)
    y = float(p1.y)
    i = 0
    while i < steps:
        x = x + x_increment
        y = y + y_increment
        point = Point(x=round_int(x), y=round_int(y))
        coordinates = _append(coordinates, point)
        i = i + 1
    return coordinates
def main():
    result = digital_differential_analyzer_line(Point(x=1, y=1), Point(x=4, y=4))
    print([dataclasses.asdict(_x) for _x in result])
main()
