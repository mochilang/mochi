# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst

@dataclass
class Point:
    x: int
    y: int

def abs_int(n):
    if n < 0:
        return -n
    return n
def round_int(x):
    return int((x + 0.5))
def digital_differential_analyzer_line(p1, p2):
    dx = p2.x - p1.x
    dy = p2.y - p1.y
    abs_dx = abs_int(dx)
    abs_dy = abs_int(dy)
    steps = (abs_dx if abs_dx > abs_dy else abs_dy)
    x_increment = (float(dx)) / (float(steps))
    y_increment = (float(dy)) / (float(steps))
    coordinates = []
    x = float(p1.x)
    y = float(p1.y)
    i = 0
    while i < steps:
        x = x + x_increment
        y = y + y_increment
        point = Point(x=round_int(x), y=round_int(y))
        coordinates = _append(coordinates, point)
        i = i + 1
    return coordinates
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        result = digital_differential_analyzer_line(Point(x=1, y=1), Point(x=4, y=4))
        print([dataclasses.asdict(_x) for _x in result])
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

