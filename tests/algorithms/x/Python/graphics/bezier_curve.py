# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-14 10:00 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def n_choose_k(n, k):
        if k < 0 or k > n:
            return 0.0
        if k == 0 or k == n:
            return 1.0
        result = 1.0
        i = 1
        while i <= k:
            result = result * (1.0 * (n - k + i)) / (1.0 * i)
            i = i + 1
        return result
    def pow_float(base, exp):
        result = 1.0
        i = 0
        while i < exp:
            result = result * base
            i = i + 1
        return result
    def basis_function(points, t):
        degree = len(points) - 1
        res = []
        i = 0
        while i <= degree:
            coef = n_choose_k(degree, i)
            term = pow_float(1.0 - t, degree - i) * pow_float(t, i)
            res = _append(res, coef * term)
            i = i + 1
        return res
    def bezier_point(points, t):
        basis = basis_function(points, t)
        x = 0.0
        y = 0.0
        i = 0
        while i < len(points):
            x = x + basis[i] * points[i][0]
            y = y + basis[i] * points[i][1]
            i = i + 1
        return [x, y]
    control = [[1.0, 1.0], [1.0, 2.0]]
    print(_str(basis_function(control, 0.0)))
    print(_str(basis_function(control, 1.0)))
    print(_str(bezier_point(control, 0.0)))
    print(_str(bezier_point(control, 1.0)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

