# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:55 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict, Any
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _fetch(url: str, opts: dict[str, Any] | None) -> Any:
    import urllib.request, urllib.parse, json
    method = 'GET'
    data = None
    headers = {}
    timeout = None
    if opts:
        method = opts.get('method', method)
        if 'body' in opts:
            data = json.dumps(opts['body']).encode()
        if 'headers' in opts:
            for k, v in dict(opts['headers']).items():
                headers[k] = str(v)
        if 'query' in opts:
            q = urllib.parse.urlencode({k: str(v) for k, v in dict(opts['query']).items()})
            sep = '&' if '?' in url else '?'
            url = url + sep + q
        timeout = opts.get('timeout', None)
    req = urllib.request.Request(url, data=data, headers=headers, method=method)
    with urllib.request.urlopen(req, timeout=timeout) as resp:
        text = resp.read()
    return json.loads(text)


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    LIMIT = 10
    TODAY_MS = 1.7050176e+12
    API_URL = "https://www.forbes.com/forbesapi/person/rtb/0/position/true.json?fields=personName,gender,source,countryOfCitizenship,birthDate,finalWorth&limit=" + _str(LIMIT)
    @dataclass
    class Person:
        finalWorth: float
        personName: str
        source: str
        countryOfCitizenship: str
        gender: str
        birthDate: float
    @dataclass
    class PersonsWrapper:
        personsLists: [Person]
        count: int
    @dataclass
    class Response:
        personList: PersonsWrapper
    def round1(value):
        if value >= 0.0:
            scaled = int((value * 10.0 + 0.5))
            return (float(scaled)) / 10.0
        scaled = int((value * 10.0 - 0.5))
        return (float(scaled)) / 10.0
    def years_old(birth_ms, today_ms):
        ms_per_year = 3.15576e+10
        return int(((today_ms - birth_ms) / ms_per_year))
    def get_forbes_real_time_billionaires():
        response = _fetch(API_URL, None)
        out = []
        for person in response.personList.personsLists:
            worth_billion = round1(person.finalWorth / 1000.0)
            age_years = years_old(person.birthDate, TODAY_MS)
            entry = {"Name": person.personName, "Source": person.source, "Country": person.countryOfCitizenship, "Gender": person.gender, "Worth ($)": _str(worth_billion) + " Billion", "Age": _str(age_years)}
            out = _append(out, entry)
        return out
    def display_billionaires(list):
        for b in list:
            print(b.get("Name", "") + " | " + b.get("Source", "") + " | " + b.get("Country", "") + " | " + b.get("Gender", "") + " | " + b.get("Worth ($)", "") + " | " + b.get("Age", ""))
    display_billionaires(get_forbes_real_time_billionaires())
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

