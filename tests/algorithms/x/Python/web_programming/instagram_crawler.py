# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

@dataclass
class EdgeCount:
    count: int

@dataclass
class UserData:
    username: str
    full_name: str
    biography: str
    business_email: str
    external_url: str
    edge_followed_by: EdgeCount
    edge_follow: EdgeCount
    edge_owner_to_timeline_media: EdgeCount
    profile_pic_url_hd: str
    is_verified: bool
    is_private: bool

def index_of(s, sub):
    i = 0
    while i <= len(s) - len(sub):
        if s[i:i + len(sub)] == sub:
            return i
        i = i + 1
    return -1
def parse_int(s):
    value = 0
    i = 0
    while i < len(s):
        value = value * 10 + (int(s[i]))
        i = i + 1
    return value
def extract_string(text, key):
    pattern = "\"" + key + "\":\""
    start = index_of(text, pattern) + len(pattern)
    end = start
    while end < len(text) and text[end:end + 1] != "\"":
        end = end + 1
    return text[start:end]
def extract_int(text, key):
    pattern = "\"" + key + "\":{\"count\":"
    start = index_of(text, pattern) + len(pattern)
    end = start
    while end < len(text):
        ch = text[end]
        if ch < "0" or ch > "9":
            break
        end = end + 1
    digits = text[start:end]
    num = parse_int(digits)
    return num
def extract_bool(text, key):
    pattern = "\"" + key + "\":"
    start = index_of(text, pattern) + len(pattern)
    val = text[start:start + 5]
    first = val[0]
    if first == "t":
        return True
    return False
def extract_user_profile(script):
    return UserData(username=extract_string(script, "username"), full_name=extract_string(script, "full_name"), biography=extract_string(script, "biography"), business_email=extract_string(script, "business_email"), external_url=extract_string(script, "external_url"), edge_followed_by=EdgeCount(count=extract_int(script, "edge_followed_by")), edge_follow=EdgeCount(count=extract_int(script, "edge_follow")), edge_owner_to_timeline_media=EdgeCount(count=extract_int(script, "edge_owner_to_timeline_media")), profile_pic_url_hd=extract_string(script, "profile_pic_url_hd"), is_verified=extract_bool(script, "is_verified"), is_private=extract_bool(script, "is_private"))
sample_script = "{\"entry_data\":{\"ProfilePage\":[{\"graphql\":{\"user\":{\"username\":\"github\",\"full_name\":\"GitHub\",\"biography\":\"Built for developers.\",\"business_email\":\"support@github.com\",\"external_url\":\"https://github.com/readme\",\"edge_followed_by\":{\"count\":120000},\"edge_follow\":{\"count\":16},\"edge_owner_to_timeline_media\":{\"count\":150},\"profile_pic_url_hd\":\"https://instagram.com/pic.jpg\",\"is_verified\":true,\"is_private\":false}}}]}}"
user = extract_user_profile(sample_script)
print(user.full_name + " (" + user.username + ") is " + user.biography)
print("number_of_posts = " + _str(user.edge_owner_to_timeline_media.count))
print("number_of_followers = " + _str(user.edge_followed_by.count))
print("number_of_followings = " + _str(user.edge_follow.count))
print("email = " + user.business_email)
print("website = " + user.external_url)
print("profile_picture_url = " + user.profile_pic_url_hd)
print("is_verified = " + _str(user.is_verified))
print("is_private = " + _str(user.is_private))

