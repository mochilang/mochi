# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class Request:
    method: str
    post: Dict[str, str]

def http_post(secret, client):
    success = secret == "secretKey" and client == "clientKey"
    return {"success": success}
def authenticate(username, password):
    return username == "user" and password == "pass"
def login(_user):
    pass
def render(page):
    return "render:" + page
def redirect(url):
    return "redirect:" + url
def login_using_recaptcha(request):
    secret_key = "secretKey"
    if request.method != "POST":
        return render("login.html")
    username = request.post.get("username")
    password = request.post.get("password")
    client_key = request.post.get("g-recaptcha-response")
    response = http_post(secret_key, client_key)
    if response.get("success", False):
        if authenticate(username, password):
            login(username)
            return redirect("/your-webpage")
    return render("login.html")
get_request = Request(method="GET", post={})
print(login_using_recaptcha(get_request))
ok_request = Request(method="POST", post={"username": "user", "password": "pass", "g-recaptcha-response": "clientKey"})
print(login_using_recaptcha(ok_request))
bad_request = Request(method="POST", post={"username": "user", "password": "wrong", "g-recaptcha-response": "clientKey"})
print(login_using_recaptcha(bad_request))

