# Code generated by Mochi transpiler.
# Version 0.10.65, generated on 2025-08-13 16:39 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

AUTHENTICATED_USER_ENDPOINT = "https://api.github.com/user"
@dataclass
class GitHubUser:
    login: str
    id: int

def get_header(hs, key):
    i = 0
    while i < len(hs):
        pair = hs[i]
        if pair[0] == key:
            return pair[1]
        i = i + 1
    return ""
def mock_response(url, headers):
    if url != AUTHENTICATED_USER_ENDPOINT:
        panic("wrong url")
    auth = get_header(headers, "Authorization")
    if len(auth) == 0:
        panic("missing Authorization")
    if auth[0:6] != "token ":
        panic("bad token prefix")
    accept = get_header(headers, "Accept")
    if len(accept) == 0:
        panic("missing Accept")
    return GitHubUser(login="test", id=1)
def fetch_github_info(auth_token):
    headers = [["Authorization", "token " + auth_token], ["Accept", "application/vnd.github.v3+json"]]
    return mock_response(AUTHENTICATED_USER_ENDPOINT, headers)
def test_fetch_github_info():
    result = fetch_github_info("token")
    if result.login != "test":
        panic("login mismatch")
    if result.id != 1:
        panic("id mismatch")
    print(result.login)
    print(_str(result.id))
def main():
    test_fetch_github_info()
main()

