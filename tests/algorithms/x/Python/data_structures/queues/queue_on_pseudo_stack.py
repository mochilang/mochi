# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class Queue:
    stack: [int]
    length: int

def empty_queue():
    return Queue(stack=[], length=0)
def put(q, item):
    s = _append(q.stack, item)
    return Queue(stack=s, length=q.length + 1)
def drop_first(xs):
    res = []
    i = 1
    while i < len(xs):
        res = _append(res, xs[i])
        i = i + 1
    return res
def drop_last(xs):
    res = []
    i = 0
    while i < len(xs) - 1:
        res = _append(res, xs[i])
        i = i + 1
    return res
def rotate(q, rotation):
    s = q.stack
    i = 0
    while i < rotation and len(s) > 0:
        temp = s[0]
        s = drop_first(s)
        s = _append(s, temp)
        i = i + 1
    return Queue(stack=s, length=q.length)
@dataclass
class GetResult:
    queue: Queue
    value: int

def get(q):
    if q.length == 0:
        panic("queue empty")
    q1 = rotate(q, 1)
    v = q1.stack[q1.length - 1]
    s = drop_last(q1.stack)
    q2 = Queue(stack=s, length=q1.length)
    q2 = rotate(q2, q2.length - 1)
    q2 = Queue(stack=q2.stack, length=q2.length - 1)
    return GetResult(queue=q2, value=v)
@dataclass
class FrontResult:
    queue: Queue
    value: int

def front(q):
    r = get(q)
    q2 = put(r.queue, r.value)
    q2 = rotate(q2, q2.length - 1)
    return FrontResult(queue=q2, value=r.value)
def size(q):
    return q.length
def to_string(q):
    s = "<"
    if q.length > 0:
        s = s + str(q.stack[0])
        i = 1
        while i < q.length:
            s = s + ", " + str(q.stack[i])
            i = i + 1
    s = s + ">"
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        q = empty_queue()
        q = put(q, 1)
        q = put(q, 2)
        q = put(q, 3)
        print(to_string(q))
        g = get(q)
        q = g.queue
        print(g.value)
        print(to_string(q))
        f = front(q)
        q = f.queue
        print(f.value)
        print(to_string(q))
        print(size(q))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
