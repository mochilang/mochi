# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class CircularQueue:
    data: List[str]
    next_: List[int]
    prev: List[int]
    front: int
    rear: int

@dataclass
class DequeueResult:
    queue: CircularQueue
    value: str

def create_queue(capacity):
    data = []
    next_ = []
    prev = []
    i = 0
    while i < capacity:
        data = _append(data, "")
        next_ = _append(next_, (i + 1) % capacity)
        prev = _append(prev, (i - 1 + capacity) % capacity)
        i = i + 1
    return CircularQueue(data=data, next_=next_, prev=prev, front=0, rear=0)
def is_empty(q):
    return q.front == q.rear and q.data[q.front] == ""
def check_can_perform(q):
    if is_empty(q):
        panic("Empty Queue")
def check_is_full(q):
    if q.next_[q.rear] == q.front:
        panic("Full Queue")
def peek(q):
    check_can_perform(q)
    return q.data[q.front]
def enqueue(q, value):
    check_is_full(q)
    if not is_empty(q):
        q.rear = q.next_[q.rear]
    data = q.data
    data[q.rear] = value
    q.data = data
    return q
def dequeue(q):
    check_can_perform(q)
    data = q.data
    val = data[q.front]
    data[q.front] = ""
    q.data = data
    if q.front != q.rear:
        q.front = q.next_[q.front]
    return DequeueResult(queue=q, value=val)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        q = create_queue(3)
        print(_str(is_empty(q)))
        q = enqueue(q, "a")
        q = enqueue(q, "b")
        print(peek(q))
        res = dequeue(q)
        q = res.queue
        print(res.value)
        res = dequeue(q)
        q = res.queue
        print(res.value)
        print(_str(is_empty(q)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

