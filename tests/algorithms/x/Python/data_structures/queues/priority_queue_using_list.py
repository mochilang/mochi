# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def panic(msg):
    print(msg)
@dataclass
class FixedPriorityQueue:
    queues: [[int]]

def fpq_new():
    return FixedPriorityQueue(queues=[[], [], []])
def fpq_enqueue(fpq, priority, data):
    if priority < 0 or priority >= len(fpq.queues):
        panic("Valid priorities are 0, 1, and 2")
        return fpq
    if len(fpq.queues[priority]) >= 100:
        panic("Maximum queue size is 100")
        return fpq
    qs = fpq.queues
    qs[priority] = _append(qs[priority], data)
    fpq.queues = qs
    return fpq
@dataclass
class FPQDequeueResult:
    queue: FixedPriorityQueue
    value: int

def fpq_dequeue(fpq):
    qs = fpq.queues
    i = 0
    while i < len(qs):
        q = qs[i]
        if len(q) > 0:
            val = q[0]
            new_q = []
            j = 1
            while j < len(q):
                new_q = _append(new_q, q[j])
                j = j + 1
            qs[i] = new_q
            fpq.queues = qs
            return FPQDequeueResult(queue=fpq, value=val)
        i = i + 1
    panic("All queues are empty")
    return FPQDequeueResult(queue=fpq, value=0)
def fpq_to_string(fpq):
    lines = []
    i = 0
    while i < len(fpq.queues):
        q_str = "["
        q = fpq.queues[i]
        j = 0
        while j < len(q):
            if j > 0:
                q_str = q_str + ", "
            q_str = q_str + str(q[j])
            j = j + 1
        q_str = q_str + "]"
        lines = _append(lines, "Priority " + str(i) + ": " + q_str)
        i = i + 1
    res = ""
    i = 0
    while i < len(lines):
        if i > 0:
            res = res + "\n"
        res = res + lines[i]
        i = i + 1
    return res
@dataclass
class ElementPriorityQueue:
    queue: [int]

def epq_new():
    return ElementPriorityQueue(queue=[])
def epq_enqueue(epq, data):
    if len(epq.queue) >= 100:
        panic("Maximum queue size is 100")
        return epq
    epq.queue = _append(epq.queue, data)
    return epq
@dataclass
class EPQDequeueResult:
    queue: ElementPriorityQueue
    value: int

def epq_dequeue(epq):
    if len(epq.queue) == 0:
        panic("The queue is empty")
        return EPQDequeueResult(queue=epq, value=0)
    min_val = epq.queue[0]
    idx = 0
    i = 1
    while i < len(epq.queue):
        v = epq.queue[i]
        if v < min_val:
            min_val = v
            idx = i
        i = i + 1
    new_q = []
    i = 0
    while i < len(epq.queue):
        if i != idx:
            new_q = _append(new_q, epq.queue[i])
        i = i + 1
    epq.queue = new_q
    return EPQDequeueResult(queue=epq, value=min_val)
def epq_to_string(epq):
    return str(epq.queue)
def fixed_priority_queue():
    fpq = fpq_new()
    fpq = fpq_enqueue(fpq, 0, 10)
    fpq = fpq_enqueue(fpq, 1, 70)
    fpq = fpq_enqueue(fpq, 0, 100)
    fpq = fpq_enqueue(fpq, 2, 1)
    fpq = fpq_enqueue(fpq, 2, 5)
    fpq = fpq_enqueue(fpq, 1, 7)
    fpq = fpq_enqueue(fpq, 2, 4)
    fpq = fpq_enqueue(fpq, 1, 64)
    fpq = fpq_enqueue(fpq, 0, 128)
    print(fpq_to_string(fpq))
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
    print(fpq_to_string(fpq))
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
    res = fpq_dequeue(fpq)
    fpq = res.queue
    print(res.value)
def element_priority_queue():
    epq = epq_new()
    epq = epq_enqueue(epq, 10)
    epq = epq_enqueue(epq, 70)
    epq = epq_enqueue(epq, 100)
    epq = epq_enqueue(epq, 1)
    epq = epq_enqueue(epq, 5)
    epq = epq_enqueue(epq, 7)
    epq = epq_enqueue(epq, 4)
    epq = epq_enqueue(epq, 64)
    epq = epq_enqueue(epq, 128)
    print(epq_to_string(epq))
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
    print(epq_to_string(epq))
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
    res = epq_dequeue(epq)
    epq = res.queue
    print(res.value)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        fixed_priority_queue()
        element_priority_queue()
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
