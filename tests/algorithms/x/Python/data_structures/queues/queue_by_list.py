# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class Queue:
        entries: [int]
    @dataclass
    class GetResult:
        queue: Queue
        value: int
    def new_queue(items):
        return Queue(entries=items)
    def len_queue(q):
        return len(q.entries)
    def str_queue(q):
        s = "Queue(("
        i = 0
        while i < len(q.entries):
            s = s + str(q.entries[i])
            if i < len(q.entries) - 1:
                s = s + ", "
            i = i + 1
        s = s + "))"
        return s
    def put(q, item):
        e = q.entries
        e = _append(e, item)
        return Queue(entries=e)
    def get(q):
        if len(q.entries) == 0:
            panic("Queue is empty")
        value = q.entries[0]
        new_entries = []
        i = 1
        while i < len(q.entries):
            new_entries = _append(new_entries, q.entries[i])
            i = i + 1
        return GetResult(queue=Queue(entries=new_entries), value=value)
    def rotate(q, rotation):
        e = q.entries
        r = 0
        while r < rotation:
            if len(e) > 0:
                first = e[0]
                rest = []
                i = 1
                while i < len(e):
                    rest = _append(rest, e[i])
                    i = i + 1
                rest = _append(rest, first)
                e = rest
            r = r + 1
        return Queue(entries=e)
    def get_front(q):
        return q.entries[0]
    q = new_queue([])
    print(len_queue(q))
    q = put(q, 10)
    q = put(q, 20)
    q = put(q, 30)
    q = put(q, 40)
    print(str_queue(q))
    res = get(q)
    q = res.queue
    print(res.value)
    print(str_queue(q))
    q = rotate(q, 2)
    print(str_queue(q))
    front = get_front(q)
    print(front)
    print(str_queue(q))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
