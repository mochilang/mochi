# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class Deque:
    data: [int]

def empty_deque():
    return Deque(data=[])
def push_back(dq, value):
    return Deque(data=_append(dq.data, value))
def push_front(dq, value):
    res = [value]
    i = 0
    while i < len(dq.data):
        res = _append(res, dq.data[i])
        i = i + 1
    return Deque(data=res)
def extend_back(dq, values):
    res = dq.data
    i = 0
    while i < len(values):
        res = _append(res, values[i])
        i = i + 1
    return Deque(data=res)
def extend_front(dq, values):
    res = []
    i = len(values) - 1
    while i >= 0:
        res = _append(res, values[i])
        i = i - 1
    j = 0
    while j < len(dq.data):
        res = _append(res, dq.data[j])
        j = j + 1
    return Deque(data=res)
@dataclass
class PopResult:
    deque: Deque
    value: int

def pop_back(dq):
    if len(dq.data) == 0:
        panic("pop from empty deque")
    res = []
    i = 0
    while i < len(dq.data) - 1:
        res = _append(res, dq.data[i])
        i = i + 1
    return PopResult(deque=Deque(data=res), value=dq.data[len(dq.data) - 1])
def pop_front(dq):
    if len(dq.data) == 0:
        panic("popleft from empty deque")
    res = []
    i = 1
    while i < len(dq.data):
        res = _append(res, dq.data[i])
        i = i + 1
    return PopResult(deque=Deque(data=res), value=dq.data[0])
def is_empty(dq):
    return len(dq.data) == 0
def length(dq):
    return len(dq.data)
def to_string(dq):
    if len(dq.data) == 0:
        return "[]"
    s = "[" + str(dq.data[0])
    i = 1
    while i < len(dq.data):
        s = s + ", " + str(dq.data[i])
        i = i + 1
    return s + "]"
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        dq = empty_deque()
        dq = push_back(dq, 2)
        dq = push_front(dq, 1)
        dq = extend_back(dq, [3, 4])
        dq = extend_front(dq, [0])
        print(to_string(dq))
        r = pop_back(dq)
        dq = r.deque
        print(r.value)
        r = pop_front(dq)
        dq = r.deque
        print(r.value)
        print(to_string(dq))
        print(("True" if is_empty(empty_deque()) else "False"))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
