# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Node:
        data: str
        next_: int
    @dataclass
    class LinkedQueue:
        nodes: List[Node]
        front: int
        rear: int
    def new_queue():
        return LinkedQueue(nodes=[], front=0 - 1, rear=0 - 1)
    def is_empty(q):
        return q.front == 0 - 1
    def put(q, item):
        node = Node(data=item, next_=0 - 1)
        q.nodes = _append(q.nodes, node)
        idx = len(q.nodes) - 1
        if q.front == 0 - 1:
            q.front = idx
            q.rear = idx
        else:
            nodes = q.nodes
            nodes[q.rear].next = idx
            q.nodes = nodes
            q.rear = idx
    def get(q):
        if is_empty(q):
            panic("dequeue from empty queue")
        idx = q.front
        node = q.nodes[idx]
        q.front = node.next_
        if q.front == 0 - 1:
            q.rear = 0 - 1
        return node.data
    def length(q):
        count = 0
        idx = q.front
        while idx != 0 - 1:
            count = count + 1
            idx = q.nodes[idx].next_
        return count
    def to_string(q):
        res = ""
        idx = q.front
        first = True
        while idx != 0 - 1:
            node = q.nodes[idx]
            if first:
                res = node.data
                first = False
            else:
                res = res + " <- " + node.data
            idx = node.next_
        return res
    def clear(q):
        q.nodes = []
        q.front = 0 - 1
        q.rear = 0 - 1
    queue = new_queue()
    print(_str(is_empty(queue)))
    put(queue, "5")
    put(queue, "9")
    put(queue, "python")
    print(_str(is_empty(queue)))
    print(get(queue))
    put(queue, "algorithms")
    print(get(queue))
    print(get(queue))
    print(get(queue))
    print(_str(is_empty(queue)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

