# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class CircularQueue:
    data: [int]
    front: int
    rear: int
    size: int
    capacity: int

def create_queue(capacity):
    arr = []
    i = 0
    while i < capacity:
        arr = _append(arr, 0)
        i = i + 1
    return CircularQueue(data=arr, front=0, rear=0, size=0, capacity=capacity)
def length(q):
    return q.size
def is_empty(q):
    return q.size == 0
def front(q):
    if is_empty(q):
        return 0
    return q.data[q.front]
def enqueue(q, value):
    if q.size >= q.capacity:
        panic("QUEUE IS FULL")
    arr = q.data
    arr[q.rear] = value
    q.data = arr
    q.rear = (q.rear + 1) % q.capacity
    q.size = q.size + 1
    return q
@dataclass
class DequeueResult:
    queue: CircularQueue
    value: int

def dequeue(q):
    if q.size == 0:
        panic("UNDERFLOW")
    value = q.data[q.front]
    arr2 = q.data
    arr2[q.front] = 0
    q.data = arr2
    q.front = (q.front + 1) % q.capacity
    q.size = q.size - 1
    return DequeueResult(queue=q, value=value)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        q = create_queue(5)
        print(("True" if is_empty(q) else "False"))
        q = enqueue(q, 10)
        print(("True" if is_empty(q) else "False"))
        q = enqueue(q, 20)
        q = enqueue(q, 30)
        print(front(q))
        r = dequeue(q)
        q = r.queue
        print(r.value)
        print(front(q))
        print(length(q))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
