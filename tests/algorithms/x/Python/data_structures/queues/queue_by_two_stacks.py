# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Queue:
        stack1: List[int]
        stack2: List[int]
    @dataclass
    class GetResult:
        queue: Queue
        value: int
    def new_queue(items):
        return Queue(stack1=items, stack2=[])
    def len_queue(q):
        return len(q.stack1) + len(q.stack2)
    def str_queue(q):
        items = []
        i = len(q.stack2) - 1
        while i >= 0:
            items = _append(items, q.stack2[i])
            i = i - 1
        j = 0
        while j < len(q.stack1):
            items = _append(items, q.stack1[j])
            j = j + 1
        s = "Queue(("
        k = 0
        while k < len(items):
            s = s + _str(items[k])
            if k < len(items) - 1:
                s = s + ", "
            k = k + 1
        s = s + "))"
        return s
    def put(q, item):
        s1 = q.stack1
        s1 = _append(s1, item)
        return Queue(stack1=s1, stack2=q.stack2)
    def get(q):
        s1 = q.stack1
        s2 = q.stack2
        if len(s2) == 0:
            while len(s1) > 0:
                idx = len(s1) - 1
                v = s1[idx]
                new_s1 = []
                i = 0
                while i < idx:
                    new_s1 = _append(new_s1, s1[i])
                    i = i + 1
                s1 = new_s1
                s2 = _append(s2, v)
        if len(s2) == 0:
            panic("Queue is empty")
        idx2 = len(s2) - 1
        value = s2[idx2]
        new_s2 = []
        j = 0
        while j < idx2:
            new_s2 = _append(new_s2, s2[j])
            j = j + 1
        s2 = new_s2
        return GetResult(queue=Queue(stack1=s1, stack2=s2), value=value)
    q = new_queue([10, 20, 30])
    r1 = get(q)
    q = r1.queue
    print(r1.value)
    q = put(q, 40)
    r2 = get(q)
    q = r2.queue
    print(r2.value)
    r3 = get(q)
    q = r3.queue
    print(r3.value)
    print(len_queue(q))
    r4 = get(q)
    q = r4.queue
    print(r4.value)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

