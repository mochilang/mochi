# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    NIL = 0 - 1
    seed = 1
    def set_seed(s):
        global seed
        seed = s
    def randint(a, b):
        global seed
        seed = (seed * 1103515245 + 12345) % 2147483648
        return (seed % (b - a + 1)) + a
    def rand_bool():
        return randint(0, 1) == 1
    nodes = []
    root = NIL
    def new_heap():
        global nodes, root
        nodes = []
        root = NIL
    def merge(r1, r2):
        if r1 == NIL:
            return r2
        if r2 == NIL:
            return r1
        if nodes[r1].get("value") > nodes[r2].get("value"):
            tmp = r1
            r1 = r2
            r2 = tmp
        if rand_bool():
            tmp = nodes[r1].get("left")
            nodes[r1]["left"] = nodes[r1].get("right")
            nodes[r1]["right"] = tmp
        nodes[r1]["left"] = merge(nodes[r1].get("left"), r2)
        return r1
    def insert(value):
        global nodes, root
        node = {"value": value, "left": NIL, "right": NIL}
        nodes = _append(nodes, node)
        idx = len(nodes) - 1
        root = merge(root, idx)
    def top():
        if root == NIL:
            return 0
        return nodes[root].get("value")
    def pop():
        global root
        result = top()
        l = nodes[root].get("left")
        r = nodes[root].get("right")
        root = merge(l, r)
        return result
    def is_empty():
        return root == NIL
    def to_sorted_list():
        res = []
        while not is_empty():
            res = _append(res, pop())
        return res
    set_seed(1)
    new_heap()
    insert(2)
    insert(3)
    insert(1)
    insert(5)
    insert(1)
    insert(7)
    print(to_sorted_list())
    new_heap()
    insert(1)
    insert(-1)
    insert(0)
    print(to_sorted_list())
    new_heap()
    insert(3)
    insert(1)
    insert(3)
    insert(7)
    print(pop())
    print(pop())
    print(pop())
    print(pop())
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
