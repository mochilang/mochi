# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class Heap:
        arr: [[int]]
        pos_map: Dict[int, int]
        size: int
        key: Callable[[int], int]
    def new_heap(key):
        return Heap(arr=[], pos_map={}, size=0, key=key)
    def parent(i):
        if i > 0:
            return (i - 1) // 2
        return -1
    def left(i, size):
        l = 2 * i + 1
        if l < size:
            return l
        return -1
    def right(i, size):
        r = 2 * i + 2
        if r < size:
            return r
        return -1
    def swap(h, i, j):
        arr = h.arr
        item_i = arr[i][0]
        item_j = arr[j][0]
        pm = h.pos_map
        pm[item_i] = j + 1
        pm[item_j] = i + 1
        h.pos_map = pm
        tmp = arr[i]
        arr[i] = arr[j]
        arr[j] = tmp
        h.arr = arr
    def cmp(h, i, j):
        arr = h.arr
        return arr[i][1] < arr[j][1]
    def get_valid_parent(h, i):
        vp = i
        l = left(i, h.size)
        if l != 0 - 1 and cmp(h, l, vp) == False:
            vp = l
        r = right(i, h.size)
        if r != 0 - 1 and cmp(h, r, vp) == False:
            vp = r
        return vp
    def heapify_up(h, index):
        idx = index
        p = parent(idx)
        while p != 0 - 1 and cmp(h, idx, p) == False:
            swap(h, idx, p)
            idx = p
            p = parent(p)
    def heapify_down(h, index):
        idx = index
        vp = get_valid_parent(h, idx)
        while vp != idx:
            swap(h, idx, vp)
            idx = vp
            vp = get_valid_parent(h, idx)
    def update_item(h, item, item_value):
        pm = h.pos_map
        if pm[item] == 0:
            return
        index = pm[item] - 1
        arr = h.arr
        arr[index] = [item, h.key(item_value)]
        h.arr = arr
        h.pos_map = pm
        heapify_up(h, index)
        heapify_down(h, index)
    def delete_item(h, item):
        pm = h.pos_map
        if pm[item] == 0:
            return
        index = pm[item] - 1
        pm[item] = 0
        arr = h.arr
        last_index = h.size - 1
        if index != last_index:
            arr[index] = arr[last_index]
            moved = arr[index][0]
            pm[moved] = index + 1
        h.size = h.size - 1
        h.arr = arr
        h.pos_map = pm
        if h.size > index:
            heapify_up(h, index)
            heapify_down(h, index)
    def insert_item(h, item, item_value):
        arr = h.arr
        arr_len = len(arr)
        if arr_len == h.size:
            arr = _append(arr, [item, h.key(item_value)])
        else:
            arr[h.size] = [item, h.key(item_value)]
        pm = h.pos_map
        pm[item] = h.size + 1
        h.size = h.size + 1
        h.arr = arr
        h.pos_map = pm
        heapify_up(h, h.size - 1)
    def get_top(h):
        arr = h.arr
        if h.size > 0:
            return arr[0]
        return []
    def extract_top(h):
        top = get_top(h)
        if len(top) > 0:
            delete_item(h, top[0])
        return top
    def identity(x):
        return x
    def negate(x):
        return 0 - x
    h = new_heap(identity)
    insert_item(h, 5, 34)
    insert_item(h, 6, 31)
    insert_item(h, 7, 37)
    print(str(get_top(h)))
    print(str(extract_top(h)))
    print(str(extract_top(h)))
    print(str(extract_top(h)))
    h = new_heap(negate)
    insert_item(h, 5, 34)
    insert_item(h, 6, 31)
    insert_item(h, 7, 37)
    print(str(get_top(h)))
    print(str(extract_top(h)))
    print(str(extract_top(h)))
    print(str(extract_top(h)))
    insert_item(h, 8, 45)
    insert_item(h, 9, 40)
    insert_item(h, 10, 50)
    print(str(get_top(h)))
    update_item(h, 10, 30)
    print(str(get_top(h)))
    delete_item(h, 10)
    print(str(get_top(h)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
