# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 23:57 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def parent_index(child_idx):
    if child_idx > 0:
        return (child_idx - 1) // 2
    return -1
def left_child_idx(parent_idx):
    return 2 * parent_idx + 1
def right_child_idx(parent_idx):
    return 2 * parent_idx + 2
def max_heapify(h, heap_size, index):
    largest = index
    left = left_child_idx(index)
    right = right_child_idx(index)
    if left < heap_size and h[left] > h[largest]:
        largest = left
    if right < heap_size and h[right] > h[largest]:
        largest = right
    if largest != index:
        temp = h[index]
        h[index] = h[largest]
        h[largest] = temp
        max_heapify(h, heap_size, largest)
def build_max_heap(h):
    heap_size = len(h)
    i = (heap_size // 2) - 1
    while i >= 0:
        max_heapify(h, heap_size, i)
        i = i - 1
    return heap_size
def extract_max(h, heap_size):
    max_value = h[0]
    h[0] = h[heap_size - 1]
    max_heapify(h, heap_size - 1, 0)
    return max_value
def insert(h, heap_size, value):
    if heap_size < len(h):
        h[heap_size] = value
    else:
        h = _append(h, value)
    heap_size = heap_size + 1
    idx = (heap_size - 1) // 2
    while idx >= 0:
        max_heapify(h, heap_size, idx)
        idx = (idx - 1) // 2
    return heap_size
def heap_sort(h, heap_size):
    size = heap_size
    j = size - 1
    while j > 0:
        temp = h[0]
        h[0] = h[j]
        h[j] = temp
        size = size - 1
        max_heapify(h, size, 0)
        j = j - 1
def heap_to_string(h, heap_size):
    s = "["
    i = 0
    while i < heap_size:
        s = s + _str(h[i])
        if i < heap_size - 1:
            s = s + ", "
        i = i + 1
    s = s + "]"
    return s
heap = [103.0, 9.0, 1.0, 7.0, 11.0, 15.0, 25.0, 201.0, 209.0, 107.0, 5.0]
size = build_max_heap(heap)
print(heap_to_string(heap, size))
m = extract_max(heap, size)
size = size - 1
print(_str(m))
print(heap_to_string(heap, size))
size = insert(heap, size, 100.0)
print(heap_to_string(heap, size))
heap_sort(heap, size)
print(heap_to_string(heap, size))

