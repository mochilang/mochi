# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    heap = [0]
    size = 0
    def swap_up(i):
        temp = heap[i]
        idx = i
        while (idx // 2) > 0:
            if heap[idx] > heap[idx // 2]:
                heap = _set_index(heap, idx, heap[idx // 2])
                heap = _set_index(heap, idx // 2, temp)
            idx = idx // 2
    def insert(value):
        global heap, size
        heap = _append(heap, value)
        size = size + 1
        swap_up(size)
    def swap_down(i):
        idx = i
        while size >= 2 * idx:
            bigger_child = (2 * idx if 2 * idx + 1 > size else (2 * idx if heap[2 * idx] > heap[2 * idx + 1] else 2 * idx + 1))
            temp = heap[idx]
            if heap[idx] < heap[bigger_child]:
                heap = _set_index(heap, idx, heap[bigger_child])
                heap = _set_index(heap, bigger_child, temp)
            idx = bigger_child
    def shrink():
        global heap
        new_heap = []
        i = 0
        while i <= size:
            new_heap = _append(new_heap, heap[i])
            i = i + 1
        heap = new_heap
    def pop():
        global size
        max_value = heap[1]
        heap = _set_index(heap, 1, heap[size])
        size = size - 1
        shrink()
        swap_down(1)
        return max_value
    def get_list():
        out = []
        i = 1
        while i <= size:
            out = _append(out, heap[i])
            i = i + 1
        return out
    def len():
        return size
    insert(6)
    insert(10)
    insert(15)
    insert(12)
    print(pop())
    print(pop())
    print(get_list())
    print(len())
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
