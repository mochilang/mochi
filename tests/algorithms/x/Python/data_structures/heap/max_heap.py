# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 23:17 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

heap = [0]
size = 0
def swap_up(i):
    global heap
    temp = heap[i]
    idx = i
    while (idx // 2) > 0:
        if heap[idx] > heap[int(idx // 2)]:
            heap = _set_index(heap, idx, heap[int(idx // 2)])
            heap = _set_index(heap, idx // 2, temp)
        idx = idx // 2
def insert(value):
    global heap, size
    heap = _append(heap, value)
    size = size + 1
    swap_up(size)
def swap_down(i):
    global heap
    idx = i
    while size >= 2 * idx:
        bigger_child = (2 * idx if 2 * idx + 1 > size else (2 * idx if heap[2 * idx] > heap[2 * idx + 1] else 2 * idx + 1))
        temp = heap[idx]
        if heap[idx] < heap[bigger_child]:
            heap = _set_index(heap, idx, heap[bigger_child])
            heap = _set_index(heap, bigger_child, temp)
        idx = bigger_child
def shrink():
    global heap
    new_heap = []
    i = 0
    while i <= size:
        new_heap = _append(new_heap, heap[i])
        i = i + 1
    heap = new_heap
def pop():
    global heap, size
    max_value = heap[1]
    heap = _set_index(heap, 1, heap[size])
    size = size - 1
    shrink()
    swap_down(1)
    return max_value
def get_list():
    out = []
    i = 1
    while i <= size:
        out = _append(out, heap[i])
        i = i + 1
    return out
def len_():
    return size
insert(6)
insert(10)
insert(15)
insert(12)
print(pop())
print(pop())
print(get_list())
print(len_())

