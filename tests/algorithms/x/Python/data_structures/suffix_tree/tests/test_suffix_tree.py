# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 09:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)

@dataclass
class SuffixTree:
    text: str

def suffix_tree_new(text):
    return SuffixTree(text=text)
def suffix_tree_search(st, pattern):
    if len(pattern) == 0:
        return True
    i = 0
    n = len(st.text)
    m = len(pattern)
    while i <= n - m:
        j = 0
        found = True
        while j < m:
            if st.text[i + j] != pattern[j]:
                found = False
                break
            j = j + 1
        if found:
            return True
        i = i + 1
    return False
text = "banana"
st = suffix_tree_new(text)
patterns_exist = ["ana", "ban", "na"]
i = 0
while i < len(patterns_exist):
    print(str(suffix_tree_search(st, patterns_exist[i])))
    i = i + 1
patterns_none = ["xyz", "apple", "cat"]
i = 0
while i < len(patterns_none):
    print(str(suffix_tree_search(st, patterns_none[i])))
    i = i + 1
print(str(suffix_tree_search(st, "")))
print(str(suffix_tree_search(st, text)))
substrings = ["ban", "ana", "a", "na"]
i = 0
while i < len(substrings):
    print(str(suffix_tree_search(st, substrings[i])))
    i = i + 1
