# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class SuffixTree:
        text: str
    def suffix_tree_new(text):
        return SuffixTree(text=text)
    def suffix_tree_search(st, pattern):
        if len(pattern) == 0:
            return True
        i = 0
        n = len(st.text)
        m = len(pattern)
        while i <= n - m:
            j = 0
            found = True
            while j < m:
                if st.text[i + j] != pattern[j]:
                    found = False
                    break
                j = j + 1
            if found:
                return True
            i = i + 1
        return False
    text = "banana"
    st = suffix_tree_new(text)
    patterns_exist = ["ana", "ban", "na"]
    i = 0
    while i < len(patterns_exist):
        print(_str(suffix_tree_search(st, patterns_exist[i])))
        i = i + 1
    patterns_none = ["xyz", "apple", "cat"]
    i = 0
    while i < len(patterns_none):
        print(_str(suffix_tree_search(st, patterns_none[i])))
        i = i + 1
    print(_str(suffix_tree_search(st, "")))
    print(_str(suffix_tree_search(st, text)))
    substrings = ["ban", "ana", "a", "na"]
    i = 0
    while i < len(substrings):
        print(_str(suffix_tree_search(st, substrings[i])))
        i = i + 1
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

