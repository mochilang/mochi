# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class Node:
        children: Dict[str, int]
        is_end_of_string: bool
        start: int
        end: int
    @dataclass
    class SuffixTree:
        text: str
        nodes: [Node]
    def new_node():
        return Node(children={}, is_end_of_string=False, start=-1, end=-1)
    def has_key(m, k):
        for key in m:
            if key == k:
                return True
        return False
    def add_suffix(tree, suffix, index):
        nodes = tree.nodes
        node_idx = 0
        j = 0
        while j < len(suffix):
            ch = suffix[j]
            node = nodes[node_idx]
            children = node.children
            if not has_key(children, ch):
                nodes = _append(nodes, new_node())
                new_idx = len(nodes) - 1
                children[ch] = new_idx
            node.children = children
            nodes[node_idx] = node
            node_idx = children[ch]
            j = j + 1
        node = nodes[node_idx]
        node.is_end_of_string = True
        node.start = index
        node.end = index + len(suffix) - 1
        nodes[node_idx] = node
        tree.nodes = nodes
        return tree
    def build_suffix_tree(tree):
        text = tree.text
        n = len(text)
        i = 0
        t = tree
        while i < n:
            suffix = ""
            k = i
            while k < n:
                suffix = suffix + text[k]
                k = k + 1
            t = add_suffix(t, suffix, i)
            i = i + 1
        return t
    def new_suffix_tree(text):
        tree = SuffixTree(text=text, nodes=[])
        tree.nodes = _append(tree.nodes, new_node())
        tree = build_suffix_tree(tree)
        return tree
    def search(tree, pattern):
        node_idx = 0
        i = 0
        nodes = tree.nodes
        while i < len(pattern):
            ch = pattern[i]
            node = nodes[node_idx]
            children = node.children
            if not has_key(children, ch):
                return False
            node_idx = children[ch]
            i = i + 1
        return True
    st = new_suffix_tree("bananas")
    print(str(search(st, "ana")))
    print(str(search(st, "apple")))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
