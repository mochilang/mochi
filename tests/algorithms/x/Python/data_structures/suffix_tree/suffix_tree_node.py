# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 09:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)

@dataclass
class SuffixTreeNode:
    children: Dict[str, int]
    is_end_of_string: bool
    start: int
    end: int
    suffix_link: int

def new_suffix_tree_node(children, is_end_of_string, start, end, suffix_link):
    return SuffixTreeNode(children=children, is_end_of_string=is_end_of_string, start=start, end=end, suffix_link=suffix_link)
def empty_suffix_tree_node():
    return new_suffix_tree_node({}, False, 0 - 1, 0 - 1, 0 - 1)
def has_key(m, k):
    for key in m:
        if key == k:
            return True
    return False
root = new_suffix_tree_node({"a": 1}, False, 0 - 1, 0 - 1, 0 - 1)
leaf = new_suffix_tree_node({}, True, 0, 2, 0)
nodes = [root, leaf]
root_check = nodes[0]
leaf_check = nodes[1]
print(str(has_key(root_check.children, "a")))
print(str(leaf_check.is_end_of_string))
print(str(leaf_check.start))
print(str(leaf_check.end))
print(str(leaf_check.suffix_link))
