# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class SuffixTree:
    text: str

def new_suffix_tree(text):
    return SuffixTree(text=text)
def search(tree, pattern):
    n = len(tree.text)
    m = len(pattern)
    if m == 0:
        return True
    if m > n:
        return False
    i = 0
    while i <= n - m:
        if tree.text[i:i + m] == pattern:
            return True
        i = i + 1
    return False
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        text = "monkey banana"
        suffix_tree = new_suffix_tree(text)
        patterns = ["ana", "ban", "na", "xyz", "mon"]
        i = 0
        while i < len(patterns):
            pattern = patterns[i]
            found = search(suffix_tree, pattern)
            print("Pattern '" + pattern + "' found: " + str(found))
            i = i + 1
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
