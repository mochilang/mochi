# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 09:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)

@dataclass
class SuffixTree:
    text: str

def new_suffix_tree(text):
    return SuffixTree(text=text)
def search(tree, pattern):
    n = len(tree.text)
    m = len(pattern)
    if m == 0:
        return True
    if m > n:
        return False
    i = 0
    while i <= n - m:
        if tree.text[i:i + m] == pattern:
            return True
        i = i + 1
    return False
def main():
    text = "monkey banana"
    suffix_tree = new_suffix_tree(text)
    patterns = ["ana", "ban", "na", "xyz", "mon"]
    i = 0
    while i < len(patterns):
        pattern = patterns[i]
        found = search(suffix_tree, pattern)
        print("Pattern '" + pattern + "' found: " + str(found))
        i = i + 1
main()
