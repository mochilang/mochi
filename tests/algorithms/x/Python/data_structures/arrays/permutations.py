# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def tail(xs):
    res = []
    i = 1
    while i < len(xs):
        res = _append(res, xs[i])
        i = i + 1
    return res
def rotate_left(xs):
    if len(xs) == 0:
        return xs
    res = []
    i = 1
    while i < len(xs):
        res = _append(res, xs[i])
        i = i + 1
    res = _append(res, xs[0])
    return res
def permute_recursive(nums):
    if len(nums) == 0:
        base = []
        return _append(base, [])
    result = []
    current = nums
    count = 0
    while count < len(nums):
        n = current[0]
        rest = tail(current)
        perms = permute_recursive(rest)
        j = 0
        while j < len(perms):
            perm = _append(perms[j], n)
            result = _append(result, perm)
            j = j + 1
        current = rotate_left(current)
        count = count + 1
    return result
def swap(xs, i, j):
    res = []
    k = 0
    while k < len(xs):
        if k == i:
            res = _append(res, xs[j])
        else:
            if k == j:
                res = _append(res, xs[i])
            else:
                res = _append(res, xs[k])
        k = k + 1
    return res
def permute_backtrack_helper(nums, start, output):
    if start == len(nums) - 1:
        return _append(output, nums)
    i = start
    res = output
    while i < len(nums):
        swapped = swap(nums, start, i)
        res = permute_backtrack_helper(swapped, start + 1, res)
        i = i + 1
    return res
def permute_backtrack(nums):
    output = []
    return permute_backtrack_helper(nums, 0, output)
print(str(permute_recursive([1, 2, 3])))
print(str(permute_backtrack([1, 2, 3])))
