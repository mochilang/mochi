# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

@dataclass
class PrefixSum:
    prefix_sum: [int]

def make_prefix_sum(arr):
    prefix = []
    running = 0
    i = 0
    while i < len(arr):
        running = running + arr[i]
        prefix = _append(prefix, running)
        i = i + 1
    return PrefixSum(prefix_sum=prefix)
def get_sum(ps, start, end):
    prefix = ps.prefix_sum
    if len(prefix) == 0:
        panic("The array is empty.")
    if start < 0 or end >= len(prefix) or start > end:
        panic("Invalid range specified.")
    if start == 0:
        return prefix[end]
    return prefix[end] - prefix[start - 1]
def contains_sum(ps, target_sum):
    prefix = ps.prefix_sum
    sums = [0]
    i = 0
    while i < len(prefix):
        sum_item = prefix[i]
        j = 0
        while j < len(sums):
            if sums[j] == sum_item - target_sum:
                return True
            j = j + 1
        sums = _append(sums, sum_item)
        i = i + 1
    return False
ps = make_prefix_sum([1, 2, 3])
print(str(get_sum(ps, 0, 2)))
print(str(get_sum(ps, 1, 2)))
print(str(get_sum(ps, 2, 2)))
print(str(contains_sum(ps, 6)))
print(str(contains_sum(ps, 5)))
print(str(contains_sum(ps, 3)))
print(str(contains_sum(ps, 4)))
print(str(contains_sum(ps, 7)))
ps2 = make_prefix_sum([1, -2, 3])
print(str(contains_sum(ps2, 2)))
