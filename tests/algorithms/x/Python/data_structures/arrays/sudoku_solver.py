# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def string_to_grid(s):
    grid = []
    i = 0
    while i < 9:
        row = []
        j = 0
        while j < 9:
            ch = s[i * 9 + j:i * 9 + j + 1]
            val = 0
            if ch != "0" and ch != ".":
                val = int(ch)
            row = _append(row, val)
            j = j + 1
        grid = _append(grid, row)
        i = i + 1
    return grid
def print_grid(grid):
    for r in range(0, 9):
        line = ""
        for c in range(0, 9):
            line = line + str(grid[r][c])
            if c < 8:
                line = line + " "
        print(line)
def is_safe(grid, row, column, n):
    for i in range(0, 9):
        if grid[row][i] == n or grid[i][column] == n:
            return False
    for i in range(0, 3):
        for j in range(0, 3):
            if grid[(row - row % 3) + i][(column - column % 3) + j] == n:
                return False
    return True
def find_empty(grid):
    for i in range(0, 9):
        for j in range(0, 9):
            if grid[i][j] == 0:
                return [i, j]
    return []
def solve(grid):
    loc = find_empty(grid)
    if len(loc) == 0:
        return True
    row = loc[0]
    column = loc[1]
    for digit in range(1, 10):
        if is_safe(grid, row, column, digit):
            grid[row][column] = digit
            if solve(grid):
                return True
            grid[row][column] = 0
    return False
puzzle = "003020600900305001001806400008102900700000008006708200002609500800203009005010300"
grid = string_to_grid(puzzle)
print("Original grid:")
print_grid(grid)
if solve(grid):
    print("\nSolved grid:")
    print_grid(grid)
else:
    print("\nNo solution found")
