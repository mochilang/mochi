# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def sortFloats(xs):
    arr = xs
    i = 0
    while i < len(arr):
        j = 0
        while j < len(arr) - 1:
            if arr[j] > arr[j + 1]:
                t = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = t
            j = j + 1
        i = i + 1
    return arr
def find_median_sorted_arrays(nums1, nums2):
    if len(nums1) == 0 and len(nums2) == 0:
        panic("Both input arrays are empty.")
    merged = []
    i = 0
    while i < len(nums1):
        merged = _append(merged, nums1[i])
        i = i + 1
    j = 0
    while j < len(nums2):
        merged = _append(merged, nums2[j])
        j = j + 1
    sorted = sortFloats(merged)
    total = len(sorted)
    if total % 2 == 1:
        return sorted[total // 2]
    middle1 = sorted[(total // 2) - 1]
    middle2 = sorted[total // 2]
    return (middle1 + middle2) / 2.0
print(find_median_sorted_arrays([1.0, 3.0], [2.0]))
print(find_median_sorted_arrays([1.0, 2.0], [3.0, 4.0]))
print(find_median_sorted_arrays([0.0, 0.0], [0.0, 0.0]))
print(find_median_sorted_arrays([], [1.0]))
print(find_median_sorted_arrays([-1000.0], [1000.0]))
print(find_median_sorted_arrays([-1.1, -2.2], [-3.3, -4.4]))
