# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def pow2(n):
    result = 1
    i = 0
    while i < n:
        result = result * 2
        i = i + 1
    return result
def int_log2(n):
    v = n
    res = 0
    while v > 1:
        v = v // 2
        res = res + 1
    return res
def build_sparse_table(number_list):
    if len(number_list) == 0:
        panic("empty number list not allowed")
    length = len(number_list)
    row = int_log2(length) + 1
    sparse_table = []
    j = 0
    while j < row:
        inner = []
        i = 0
        while i < length:
            inner = _append(inner, 0)
            i = i + 1
        sparse_table = _append(sparse_table, inner)
        j = j + 1
    i = 0
    while i < length:
        sparse_table[0][i] = number_list[i]
        i = i + 1
    j = 1
    while pow2(j) <= length:
        i = 0
        while i + pow2(j) - 1 < length:
            left = sparse_table[j - 1][i + pow2(j - 1)]
            right = sparse_table[j - 1][i]
            if left < right:
                sparse_table[j][i] = left
            else:
                sparse_table[j][i] = right
            i = i + 1
        j = j + 1
    return sparse_table
def query(sparse_table, left_bound, right_bound):
    if left_bound < 0 or right_bound >= len(sparse_table[0]):
        panic("list index out of range")
    interval = right_bound - left_bound + 1
    j = int_log2(interval)
    val1 = sparse_table[j][right_bound - pow2(j) + 1]
    val2 = sparse_table[j][left_bound]
    if val1 < val2:
        return val1
    return val2
st1 = build_sparse_table([8, 1, 0, 3, 4, 9, 3])
print(str(st1))
st2 = build_sparse_table([3, 1, 9])
print(str(st2))
print(str(query(st1, 0, 4)))
print(str(query(st1, 4, 6)))
print(str(query(st2, 2, 2)))
print(str(query(st2, 0, 1)))
