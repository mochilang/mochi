# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

INF = 1e+09
seed = 1
def rand_float():
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483648
    return (float(seed)) / 2.147483648e+09
def hypercube_points(num_points, cube_size, num_dimensions):
    pts = []
    i = 0
    while i < num_points:
        p = []
        j = 0
        while j < num_dimensions:
            v = cube_size * rand_float()
            p = _append(p, v)
            j = j + 1
        pts = _append(pts, p)
        i = i + 1
    return pts
def build_kdtree(points, depth):
    return points
def distance_sq(a, b):
    sum = 0.0
    i = 0
    while i < len(a):
        d = a[i] - b[i]
        sum = sum + d * d
        i = i + 1
    return sum
def nearest_neighbour_search(points, query):
    if len(points) == 0:
        return {"index": -1.0, "dist": INF, "visited": 0.0}
    nearest_idx = 0
    nearest_dist = INF
    visited = 0
    i = 0
    while i < len(points):
        d = distance_sq(query, points[i])
        visited = visited + 1
        if d < nearest_dist:
            nearest_dist = d
            nearest_idx = i
        i = i + 1
    return {"index": float(nearest_idx), "dist": nearest_dist, "visited": float(visited)}
def test_build_cases():
    empty_pts = []
    tree0 = build_kdtree(empty_pts, 0)
    if len(tree0) == 0:
        print("case1 true")
    else:
        print("case1 false")
    pts1 = hypercube_points(10, 10.0, 2)
    tree1 = build_kdtree(pts1, 2)
    if len(tree1) > 0 and len(tree1[0]) == 2:
        print("case2 true")
    else:
        print("case2 false")
    pts2 = hypercube_points(10, 10.0, 3)
    tree2 = build_kdtree(pts2, -2)
    if len(tree2) > 0 and len(tree2[0]) == 3:
        print("case3 true")
    else:
        print("case3 false")
def test_search():
    pts = hypercube_points(10, 10.0, 2)
    tree = build_kdtree(pts, 0)
    qp = hypercube_points(1, 10.0, 2)[0]
    res = nearest_neighbour_search(tree, qp)
    if res.get("index") != (-1.0) and res.get("dist") >= 0.0 and res.get("visited") > 0.0:
        print("search true")
    else:
        print("search false")
def test_edge():
    empty_pts = []
    tree = build_kdtree(empty_pts, 0)
    query = [0.0, 0.0]
    res = nearest_neighbour_search(tree, query)
    if res.get("index") == (-1.0) and res.get("dist") > 1e+08 and res.get("visited") == 0.0:
        print("edge true")
    else:
        print("edge false")
def main():
    global seed
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        seed = 1
        test_build_cases()
        test_search()
        test_edge()
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
