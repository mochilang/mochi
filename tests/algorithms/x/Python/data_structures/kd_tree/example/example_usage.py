# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Node:
    point: [float]
    left: int
    right: int

@dataclass
class BuildResult:
    index: int
    nodes: [Node]

seed = 1
def rand():
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483648
    return seed
def random():
    return (1.0 * rand()) / 2.147483648e+09
def hypercube_points(num_points, cube_size, num_dimensions):
    pts = []
    i = 0
    while i < num_points:
        p = []
        j = 0
        while j < num_dimensions:
            p = _append(p, cube_size * random())
            j = j + 1
        pts = _append(pts, p)
        i = i + 1
    return pts
def sort_points(points, axis):
    n = len(points)
    i = 1
    while i < n:
        key = points[i]
        j = i - 1
        while j >= 0 and points[j][axis] > key[axis]:
            points[j + 1] = points[j]
            j = j - 1
        points[j + 1] = key
        i = i + 1
    return points
def sublist(arr, start, end):
    res = []
    i = start
    while i < end:
        res = _append(res, arr[i])
        i = i + 1
    return res
def shift_nodes(nodes, offset):
    i = 0
    while i < len(nodes):
        if nodes[i].left != 0 - 1:
            nodes[i].left = nodes[i].left + offset
        if nodes[i].right != 0 - 1:
            nodes[i].right = nodes[i].right + offset
        i = i + 1
    return nodes
def build_kdtree(points, depth):
    if len(points) == 0:
        return BuildResult(index=0 - 1, nodes=[])
    k = len(points[0])
    axis = depth % k
    points = sort_points(points, axis)
    median = len(points) // 2
    left_points = sublist(points, 0, median)
    right_points = sublist(points, median + 1, len(points))
    left_res = build_kdtree(left_points, depth + 1)
    right_res = build_kdtree(right_points, depth + 1)
    offset = len(left_res.nodes) + 1
    shifted_right = shift_nodes(right_res.nodes, offset)
    nodes = left_res.nodes
    left_index = left_res.index
    right_index = (0 - 1 if right_res.index == 0 - 1 else right_res.index + offset)
    nodes = _append(nodes, Node(point=points[median], left=left_index, right=right_index))
    nodes = _concat(nodes, shifted_right)
    root_index = len(left_res.nodes)
    return BuildResult(index=root_index, nodes=nodes)
def square_distance(a, b):
    sum = 0.0
    i = 0
    while i < len(a):
        diff = a[i] - b[i]
        sum = sum + diff * diff
        i = i + 1
    return sum
@dataclass
class SearchResult:
    point: [float]
    dist: float
    visited: int

def nearest_neighbour_search(tree, root, query_point):
    nearest_point = []
    nearest_dist = 0.0
    visited = 0
    i = 0
    while i < len(tree):
        node = tree[i]
        dist = square_distance(query_point, node.point)
        visited = visited + 1
        if visited == 1 or dist < nearest_dist:
            nearest_point = node.point
            nearest_dist = dist
        i = i + 1
    return SearchResult(point=nearest_point, dist=nearest_dist, visited=visited)
def list_to_string(arr):
    s = "["
    i = 0
    while i < len(arr):
        s = s + str(arr[i])
        if i < len(arr) - 1:
            s = s + ", "
        i = i + 1
    return s + "]"
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        num_points = 5000
        cube_size = 10.0
        num_dimensions = 10
        pts = hypercube_points(num_points, cube_size, num_dimensions)
        build = build_kdtree(pts, 0)
        root = build.index
        tree = build.nodes
        query = []
        i = 0
        while i < num_dimensions:
            query = _append(query, random())
            i = i + 1
        res = nearest_neighbour_search(tree, root, query)
        print("Query point: " + list_to_string(query))
        print("Nearest point: " + list_to_string(res.point))
        print("Distance: " + str(res.dist))
        print("Nodes visited: " + str(res.visited))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
