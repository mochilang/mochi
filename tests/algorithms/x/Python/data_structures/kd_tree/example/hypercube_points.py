# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    seed = 1
    def rand():
        global seed
        seed = (seed * 1103515245 + 12345) % 2147483648
        return seed
    def random():
        return (float(rand())) / 2.147483648e+09
    def hypercube_points(num_points, hypercube_size, num_dimensions):
        points = []
        i = 0
        while i < num_points:
            point = []
            j = 0
            while j < num_dimensions:
                value = hypercube_size * random()
                point = _append(point, value)
                j = j + 1
            points = _append(points, point)
            i = i + 1
        return points
    pts = hypercube_points(3, 1.0, 2)
    print(pts)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

