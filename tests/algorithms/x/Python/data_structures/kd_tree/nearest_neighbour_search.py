# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class KDNode:
        point: [float]
        left: int
        right: int
    @dataclass
    class SearchResult:
        point: [float]
        distance: float
        nodes_visited: int
    def square_distance(a, b):
        i = 0
        total = 0.0
        while i < len(a):
            diff = a[i] - b[i]
            total = total + diff * diff
            i = i + 1
        return total
    def search(nodes, index, query_point, depth, best):
        if index == (-1):
            return best
        result = best
        result.nodes_visited = result.nodes_visited + 1
        node = nodes[index]
        current_point = node.point
        current_dist = square_distance(query_point, current_point)
        if len(result.point) == 0 or current_dist < result.distance:
            result.point = current_point
            result.distance = current_dist
        k = len(query_point)
        axis = depth % k
        nearer = node.left
        further = node.right
        if query_point[axis] > current_point[axis]:
            nearer = node.right
            further = node.left
        result = search(nodes, nearer, query_point, depth + 1, result)
        diff = query_point[axis] - current_point[axis]
        if diff * diff < result.distance:
            result = search(nodes, further, query_point, depth + 1, result)
        return result
    def nearest_neighbour_search(nodes, root, query_point):
        initial = SearchResult(point=[], distance=1e+30, nodes_visited=0)
        return search(nodes, root, query_point, 0, initial)
    nodes = [KDNode(point=[9.0, 1.0], left=1, right=4), KDNode(point=[2.0, 7.0], left=2, right=3), KDNode(point=[3.0, 6.0], left=-1, right=-1), KDNode(point=[6.0, 12.0], left=-1, right=-1), KDNode(point=[17.0, 15.0], left=5, right=6), KDNode(point=[13.0, 15.0], left=-1, right=-1), KDNode(point=[10.0, 19.0], left=-1, right=-1)]
    queries = [[9.0, 2.0], [12.0, 15.0], [1.0, 3.0]]
    q = 0
    while q < len(queries):
        res = nearest_neighbour_search(nodes, 0, queries[q])
        print(str(res.point) + " " + str(res.distance) + " " + str(res.nodes_visited) + "\n")
        q = q + 1
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
