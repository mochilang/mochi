# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class KDNode:
        point: List[float]
        left: int
        right: int
    tree = []
    def sort_points(points, axis):
        arr = points
        i = 0
        while i < len(arr):
            j = 0
            while j < len(arr) - 1:
                if arr[j][axis] > arr[j + 1][axis]:
                    tmp = arr[j]
                    arr[j] = arr[j + 1]
                    arr[j + 1] = tmp
                j = j + 1
            i = i + 1
        return arr
    def build_kdtree(points, depth):
        global tree
        if len(points) == 0:
            return 0 - 1
        k = len(points[0])
        axis = depth % k
        sorted_ = sort_points(points, axis)
        median_idx = len(sorted_) // 2
        left_points = sorted_[0:median_idx]
        right_points = sorted_[median_idx + 1:]
        idx = len(tree)
        tree = _append(tree, KDNode(point=sorted_[median_idx], left=0 - 1, right=0 - 1))
        left_idx = build_kdtree(left_points, depth + 1)
        right_idx = build_kdtree(right_points, depth + 1)
        node = tree[idx]
        node.left = left_idx
        node.right = right_idx
        tree = _set_index(tree, idx, node)
        return idx
    pts = [[2.0, 3.0], [5.0, 4.0], [9.0, 6.0], [4.0, 7.0], [8.0, 1.0], [7.0, 2.0]]
    root = build_kdtree(pts, 0)
    print(_str(tree))
    print(root)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

