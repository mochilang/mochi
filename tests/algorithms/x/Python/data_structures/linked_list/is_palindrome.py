# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst

def is_palindrome(values):
    stack = []
    fast = 0
    slow = 0
    n = len(values)
    while fast < n and fast + 1 < n:
        stack = _append(stack, values[slow])
        slow = slow + 1
        fast = fast + 2
    if fast == n - 1:
        slow = slow + 1
    i = len(stack) - 1
    while slow < n:
        if stack[i] != values[slow]:
            return False
        i = i - 1
        slow = slow + 1
    return True
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        print(("True" if is_palindrome([]) else "False"))
        print(("True" if is_palindrome([1]) else "False"))
        print(("True" if is_palindrome([1, 2]) else "False"))
        print(("True" if is_palindrome([1, 2, 1]) else "False"))
        print(("True" if is_palindrome([1, 2, 2, 1]) else "False"))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

