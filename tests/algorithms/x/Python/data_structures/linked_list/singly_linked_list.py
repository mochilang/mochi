# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class SinglyLinkedList:
    data: [int]

def empty_list():
    return SinglyLinkedList(data=[])
def length(list):
    return len(list.data)
def is_empty(list):
    return len(list.data) == 0
def to_string(list):
    if len(list.data) == 0:
        return ""
    s = str(list.data[0])
    i = 1
    while i < len(list.data):
        s = s + " -> " + str(list.data[i])
        i = i + 1
    return s
def insert_nth(list, index, value):
    if index < 0 or index > len(list.data):
        panic("index out of range")
    res = []
    i = 0
    while i < index:
        res = _append(res, list.data[i])
        i = i + 1
    res = _append(res, value)
    while i < len(list.data):
        res = _append(res, list.data[i])
        i = i + 1
    return SinglyLinkedList(data=res)
def insert_head(list, value):
    return insert_nth(list, 0, value)
def insert_tail(list, value):
    return insert_nth(list, len(list.data), value)
@dataclass
class DeleteResult:
    list: SinglyLinkedList
    value: int

def delete_nth(list, index):
    if index < 0 or index >= len(list.data):
        panic("index out of range")
    res = []
    val = 0
    i = 0
    while i < len(list.data):
        if i == index:
            val = list.data[i]
        else:
            res = _append(res, list.data[i])
        i = i + 1
    return DeleteResult(list=SinglyLinkedList(data=res), value=val)
def delete_head(list):
    return delete_nth(list, 0)
def delete_tail(list):
    return delete_nth(list, len(list.data) - 1)
def get_item(list, index):
    if index < 0 or index >= len(list.data):
        panic("index out of range")
    return list.data[index]
def set_item(list, index, value):
    if index < 0 or index >= len(list.data):
        panic("index out of range")
    res = []
    i = 0
    while i < len(list.data):
        if i == index:
            res = _append(res, value)
        else:
            res = _append(res, list.data[i])
        i = i + 1
    return SinglyLinkedList(data=res)
def reverse_list(list):
    res = []
    i = len(list.data) - 1
    while i >= 0:
        res = _append(res, list.data[i])
        i = i - 1
    return SinglyLinkedList(data=res)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        lst = empty_list()
        i = 1
        while i <= 5:
            lst = insert_tail(lst, i)
            i = i + 1
        print(to_string(lst))
        lst = insert_head(lst, 0)
        print(to_string(lst))
        del_ = delete_head(lst)
        lst = del_.list
        print(str(del_.value))
        del_ = delete_tail(lst)
        lst = del_.list
        print(str(del_.value))
        del_ = delete_nth(lst, 2)
        lst = del_.list
        print(str(del_.value))
        lst = set_item(lst, 1, 99)
        print(str(get_item(lst, 1)))
        lst = reverse_list(lst)
        print(to_string(lst))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
