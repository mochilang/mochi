# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class LinkedList:
    next: [int]
    head: int

NULL = 0 - 1
def empty_list():
    return LinkedList(next=[], head=NULL)
def add_node(list, value):
    nexts = list.next
    new_index = len(nexts)
    nexts = _append(nexts, NULL)
    if list.head == NULL:
        return LinkedList(next=nexts, head=new_index)
    last = list.head
    while nexts[last] != NULL:
        last = nexts[last]
    new_nexts = []
    i = 0
    while i < len(nexts):
        if i == last:
            new_nexts = _append(new_nexts, new_index)
        else:
            new_nexts = _append(new_nexts, nexts[i])
        i = i + 1
    return LinkedList(next=new_nexts, head=list.head)
def set_next(list, index, next_index):
    nexts = list.next
    new_nexts = []
    i = 0
    while i < len(nexts):
        if i == index:
            new_nexts = _append(new_nexts, next_index)
        else:
            new_nexts = _append(new_nexts, nexts[i])
        i = i + 1
    return LinkedList(next=new_nexts, head=list.head)
def detect_cycle(list):
    if list.head == NULL:
        return False
    nexts = list.next
    slow = list.head
    fast = list.head
    while fast != NULL and nexts[fast] != NULL:
        slow = nexts[slow]
        fast = nexts[nexts[fast]]
        if slow == fast:
            return True
    return False
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        ll = empty_list()
        ll = add_node(ll, 1)
        ll = add_node(ll, 2)
        ll = add_node(ll, 3)
        ll = add_node(ll, 4)
        ll = set_next(ll, 3, 1)
        print(("True" if detect_cycle(ll) else "False"))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
