# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class LinkedList:
    data: [int]

def empty_list():
    return LinkedList(data=[])
def append_value(list, value):
    d = list.data
    d = _append(d, value)
    return LinkedList(data=d)
def extend_list(list, items):
    result = list
    i = 0
    while i < len(items):
        result = append_value(result, items[i])
        i = i + 1
    return result
def to_string(list):
    if len(list.data) == 0:
        return ""
    s = str(list.data[0])
    i = 1
    while i < len(list.data):
        s = s + " -> " + str(list.data[i])
        i = i + 1
    return s
def make_linked_list(items):
    if len(items) == 0:
        panic("The Elements List is empty")
    ll = empty_list()
    ll = extend_list(ll, items)
    return ll
def in_reverse(list):
    if len(list.data) == 0:
        return ""
    i = len(list.data) - 1
    s = str(list.data[i])
    i = i - 1
    while i >= 0:
        s = s + " <- " + str(list.data[i])
        i = i - 1
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        linked_list = make_linked_list([14, 52, 14, 12, 43])
        print("Linked List:  " + to_string(linked_list))
        print("Reverse List: " + in_reverse(linked_list))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
