# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

@dataclass
class Node:
    data: int
    next_: int

def has_loop(nodes, head):
    slow = head
    fast = head
    while fast != 0 - 1:
        fast_node1 = nodes[fast]
        if fast_node1.next_ == 0 - 1:
            return False
        fast_node2 = nodes[fast_node1.next_]
        if fast_node2.next_ == 0 - 1:
            return False
        slow_node = nodes[slow]
        slow = slow_node.next_
        fast = fast_node2.next_
        if slow == fast:
            return True
    return False
def make_nodes(values):
    nodes = []
    i = 0
    while i < len(values):
        next_idx = (0 - 1 if i == len(values) - 1 else i + 1)
        nodes = _append(nodes, Node(data=values[i], next_=next_idx))
        i = i + 1
    return nodes
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        list1 = make_nodes([1, 2, 3, 4])
        print(_str(has_loop(list1, 0)))
        list1[3].next = 1
        print(_str(has_loop(list1, 0)))
        list2 = make_nodes([5, 6, 5, 6])
        print(_str(has_loop(list2, 0)))
        list3 = make_nodes([1])
        print(_str(has_loop(list3, 0)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

