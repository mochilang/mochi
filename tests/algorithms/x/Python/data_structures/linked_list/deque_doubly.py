# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Node:
    data: str
    prev: int
    next: int

@dataclass
class LinkedDeque:
    nodes: [Node]
    header: int
    trailer: int
    size: int

def new_deque():
    nodes = []
    nodes = _append(nodes, Node(data="", prev=-1, next=1))
    nodes = _append(nodes, Node(data="", prev=0, next=-1))
    return LinkedDeque(nodes=nodes, header=0, trailer=1, size=0)
def is_empty(d):
    return d.size == 0
def front(d):
    if is_empty(d):
        panic("List is empty")
    head = d.nodes[d.header]
    idx = head.next
    node = d.nodes[idx]
    return node.data
def back(d):
    if is_empty(d):
        panic("List is empty")
    tail = d.nodes[d.trailer]
    idx = tail.prev
    node = d.nodes[idx]
    return node.data
def insert(d, pred, value, succ):
    nodes = d.nodes
    new_idx = len(nodes)
    nodes = _append(nodes, Node(data=value, prev=pred, next=succ))
    pred_node = nodes[pred]
    pred_node.next = new_idx
    nodes[pred] = pred_node
    succ_node = nodes[succ]
    succ_node.prev = new_idx
    nodes[succ] = succ_node
    d.nodes = nodes
    d.size = d.size + 1
    return d
@dataclass
class DeleteResult:
    deque: LinkedDeque
    value: str

def delete(d, idx):
    nodes = d.nodes
    node = nodes[idx]
    pred = node.prev
    succ = node.next
    pred_node = nodes[pred]
    pred_node.next = succ
    nodes[pred] = pred_node
    succ_node = nodes[succ]
    succ_node.prev = pred
    nodes[succ] = succ_node
    val = node.data
    d.nodes = nodes
    d.size = d.size - 1
    return DeleteResult(deque=d, value=val)
def add_first(d, value):
    head = d.nodes[d.header]
    succ = head.next
    return insert(d, d.header, value, succ)
def add_last(d, value):
    tail = d.nodes[d.trailer]
    pred = tail.prev
    return insert(d, pred, value, d.trailer)
def remove_first(d):
    if is_empty(d):
        panic("remove_first from empty list")
    head = d.nodes[d.header]
    idx = head.next
    return delete(d, idx)
def remove_last(d):
    if is_empty(d):
        panic("remove_first from empty list")
    tail = d.nodes[d.trailer]
    idx = tail.prev
    return delete(d, idx)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        d = new_deque()
        d = add_first(d, "A")
        print(front(d))
        d = add_last(d, "B")
        print(back(d))
        r = remove_first(d)
        d = r.deque
        print(r.value)
        r = remove_last(d)
        d = r.deque
        print(r.value)
        print(str(is_empty(d)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
