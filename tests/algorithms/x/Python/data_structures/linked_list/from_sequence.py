# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

@dataclass
class Node:
    data: int
    next_: int

NIL = 0 - 1
nodes = []
def make_linked_list(elements):
    global nodes
    if len(elements) == 0:
        panic("The Elements List is empty")
    nodes = []
    nodes = _append(nodes, Node(data=elements[0], next_=NIL))
    head = 0
    current = head
    i = 1
    while i < len(elements):
        nodes = _append(nodes, Node(data=elements[i], next_=NIL))
        nodes[current].next = len(nodes) - 1
        current = len(nodes) - 1
        i = i + 1
    return head
def node_to_string(head):
    s = ""
    index = head
    while index != NIL:
        node = nodes[index]
        s = s + "<" + _str(node.data) + "> ---> "
        index = node.next_
    s = s + "<END>"
    return s
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        list_data = [1, 3, 5, 32, 44, 12, 43]
        print("List: " + _str(list_data))
        print("Creating Linked List from List.")
        head = make_linked_list(list_data)
        print("Linked List:")
        print(node_to_string(head))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

