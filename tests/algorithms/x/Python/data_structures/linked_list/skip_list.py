# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

NIL = 0 - 1
MAX_LEVEL = 6
P = 0.5
seed = 1
def random():
    global seed
    seed = (seed * 13 + 7) % 100
    return (float(seed)) / 100.0
def random_level():
    lvl = 1
    while random() < P and lvl < MAX_LEVEL:
        lvl = lvl + 1
    return lvl
def empty_forward():
    f = []
    i = 0
    while i < MAX_LEVEL:
        f = _append(f, NIL)
        i = i + 1
    return f
node_keys = []
node_vals = []
node_forwards = []
level = 1
def init():
    global level, node_forwards, node_keys, node_vals
    node_keys = [-1]
    node_vals = [0]
    node_forwards = [empty_forward()]
    level = 1
def insert(key, value):
    global level, node_forwards, node_keys, node_vals
    update = []
    i = 0
    while i < MAX_LEVEL:
        update = _append(update, 0)
        i = i + 1
    x = 0
    i = level - 1
    while i >= 0:
        while node_forwards[x][i] != NIL and node_keys[node_forwards[x][i]] < key:
            x = node_forwards[x][i]
        update[i] = x
        i = i - 1
    x = node_forwards[x][0]
    if x != NIL and node_keys[x] == key:
        node_vals = _set_index(node_vals, x, value)
        return
    lvl = random_level()
    if lvl > level:
        j = level
        while j < lvl:
            update[j] = 0
            j = j + 1
        level = lvl
    node_keys = _append(node_keys, key)
    node_vals = _append(node_vals, value)
    forwards = empty_forward()
    idx = len(node_keys) - 1
    i = 0
    while i < lvl:
        forwards[i] = node_forwards[update[i]][i]
        node_forwards[update[i]][i] = idx
        i = i + 1
    node_forwards = _append(node_forwards, forwards)
def find(key):
    x = 0
    i = level - 1
    while i >= 0:
        while node_forwards[x][i] != NIL and node_keys[node_forwards[x][i]] < key:
            x = node_forwards[x][i]
        i = i - 1
    x = node_forwards[x][0]
    if x != NIL and node_keys[x] == key:
        return node_vals[x]
    return -1
def delete(key):
    global level
    update = []
    i = 0
    while i < MAX_LEVEL:
        update = _append(update, 0)
        i = i + 1
    x = 0
    i = level - 1
    while i >= 0:
        while node_forwards[x][i] != NIL and node_keys[node_forwards[x][i]] < key:
            x = node_forwards[x][i]
        update[i] = x
        i = i - 1
    x = node_forwards[x][0]
    if x == NIL or node_keys[x] != key:
        return
    i = 0
    while i < level:
        if node_forwards[update[i]][i] == x:
            node_forwards[update[i]][i] = node_forwards[x][i]
        i = i + 1
    while level > 1 and node_forwards[0][level - 1] == NIL:
        level = level - 1
def to_string():
    s = ""
    x = node_forwards[0][0]
    while x != NIL:
        if s != "":
            s = s + " -> "
        s = s + str(node_keys[x]) + ":" + str(node_vals[x])
        x = node_forwards[x][0]
    return s
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        init()
        insert(2, 2)
        insert(4, 4)
        insert(6, 4)
        insert(4, 5)
        insert(8, 4)
        insert(9, 4)
        delete(4)
        print(to_string())
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
