# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class LinkedList:
    data: [int]

def empty_list():
    return LinkedList(data=[])
def push(list, value):
    res = [value]
    res = _concat(res, list.data)
    return LinkedList(data=res)
def swap_nodes(list, v1, v2):
    if v1 == v2:
        return list
    idx1 = 0 - 1
    idx2 = 0 - 1
    i = 0
    while i < len(list.data):
        if list.data[i] == v1 and idx1 == 0 - 1:
            idx1 = i
        if list.data[i] == v2 and idx2 == 0 - 1:
            idx2 = i
        i = i + 1
    if idx1 == 0 - 1 or idx2 == 0 - 1:
        return list
    res = list.data
    temp = res[idx1]
    res[idx1] = res[idx2]
    res[idx2] = temp
    return LinkedList(data=res)
def to_string(list):
    return str(list.data)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        ll = empty_list()
        i = 5
        while i > 0:
            ll = push(ll, i)
            i = i - 1
        print("Original Linked List: " + to_string(ll))
        ll = swap_nodes(ll, 1, 4)
        print("Modified Linked List: " + to_string(ll))
        print("After swapping the nodes whose data is 1 and 4.")
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
