# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class SortedLinkedList:
    values: [int]

def sort_list(nums):
    arr = []
    i = 0
    while i < len(nums):
        arr = _append(arr, nums[i])
        i = i + 1
    j = 0
    while j < len(arr):
        k = j + 1
        while k < len(arr):
            if arr[k] < arr[j]:
                tmp = arr[j]
                arr[j] = arr[k]
                arr[k] = tmp
            k = k + 1
        j = j + 1
    return arr
def make_sorted_linked_list(ints):
    return SortedLinkedList(values=sort_list(ints))
def len_sll(sll):
    return len(sll.values)
def str_sll(sll):
    res = ""
    i = 0
    while i < len(sll.values):
        res = res + str(sll.values[i])
        if i + 1 < len(sll.values):
            res = res + " -> "
        i = i + 1
    return res
def merge_lists(a, b):
    combined = []
    i = 0
    while i < len(a.values):
        combined = _append(combined, a.values[i])
        i = i + 1
    i = 0
    while i < len(b.values):
        combined = _append(combined, b.values[i])
        i = i + 1
    return make_sorted_linked_list(combined)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        test_data_odd = [3, 9, -11, 0, 7, 5, 1, -1]
        test_data_even = [4, 6, 2, 0, 8, 10, 3, -2]
        sll_one = make_sorted_linked_list(test_data_odd)
        sll_two = make_sorted_linked_list(test_data_even)
        merged = merge_lists(sll_one, sll_two)
        print(str(len_sll(merged)))
        print(str_sll(merged))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
