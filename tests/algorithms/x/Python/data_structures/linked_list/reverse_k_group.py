# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

@dataclass
class LinkedList:
    data: List[int]

def to_string(list_):
    if len(list_.data) == 0:
        return ""
    s = _str(list_.data[0])
    i = 1
    while i < len(list_.data):
        s = s + " -> " + _str(list_.data[i])
        i = i + 1
    return s
def reverse_k_nodes(list_, k):
    if k <= 1:
        return list_
    res = []
    i = 0
    while i < len(list_.data):
        j = 0
        group = []
        while j < k and i + j < len(list_.data):
            group = _append(group, list_.data[i + j])
            j = j + 1
        if len(group) == k:
            g = k - 1
            while g >= 0:
                res = _append(res, group[g])
                g = g - 1
        else:
            g = 0
            while g < len(group):
                res = _append(res, group[g])
                g = g + 1
        i = i + k
    return LinkedList(data=res)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        ll = LinkedList(data=[1, 2, 3, 4, 5])
        print("Original Linked List: " + to_string(ll))
        k = 2
        ll = reverse_k_nodes(ll, k)
        print("After reversing groups of size " + _str(k) + ": " + to_string(ll))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

