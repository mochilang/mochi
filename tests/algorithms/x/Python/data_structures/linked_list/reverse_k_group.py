# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class LinkedList:
    data: [int]

def to_string(list):
    if len(list.data) == 0:
        return ""
    s = str(list.data[0])
    i = 1
    while i < len(list.data):
        s = s + " -> " + str(list.data[i])
        i = i + 1
    return s
def reverse_k_nodes(list, k):
    if k <= 1:
        return list
    res = []
    i = 0
    while i < len(list.data):
        j = 0
        group = []
        while j < k and i + j < len(list.data):
            group = _append(group, list.data[i + j])
            j = j + 1
        if len(group) == k:
            g = k - 1
            while g >= 0:
                res = _append(res, group[g])
                g = g - 1
        else:
            g = 0
            while g < len(group):
                res = _append(res, group[g])
                g = g + 1
        i = i + k
    return LinkedList(data=res)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        ll = LinkedList(data=[1, 2, 3, 4, 5])
        print("Original Linked List: " + to_string(ll))
        k = 2
        ll = reverse_k_nodes(ll, k)
        print("After reversing groups of size " + str(k) + ": " + to_string(ll))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
