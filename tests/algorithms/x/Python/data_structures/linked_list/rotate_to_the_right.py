# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def list_to_string(xs):
    if len(xs) == 0:
        return ""
    s = _str(xs[0])
    i = 1
    while i < len(xs):
        s = s + "->" + _str(xs[i])
        i = i + 1
    return s
def insert_node(xs, data):
    return _append(xs, data)
def rotate_to_the_right(xs, places):
    if len(xs) == 0:
        panic("The linked list is empty.")
    n = len(xs)
    k = places % n
    if k == 0:
        return xs
    split = n - k
    res = []
    i = split
    while i < n:
        res = _append(res, xs[i])
        i = i + 1
    j = 0
    while j < split:
        res = _append(res, xs[j])
        j = j + 1
    return res
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        head = []
        head = insert_node(head, 5)
        head = insert_node(head, 1)
        head = insert_node(head, 2)
        head = insert_node(head, 4)
        head = insert_node(head, 3)
        print("Original list: " + list_to_string(head))
        places = 3
        new_head = rotate_to_the_right(head, places)
        print("After " + _str(places) + " iterations: " + list_to_string(new_head))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

