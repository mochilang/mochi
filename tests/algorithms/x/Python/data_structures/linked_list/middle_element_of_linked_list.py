# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class List:
    data: [int]

def empty_list():
    return List(data=[])
def push(lst, value):
    res = [value]
    i = 0
    while i < len(lst.data):
        res = _append(res, lst.data[i])
        i = i + 1
    return List(data=res)
def middle_element(lst):
    n = len(lst.data)
    if n == 0:
        print("No element found.")
        return 0
    slow = 0
    fast = 0
    while fast + 1 < n:
        fast = fast + 2
        slow = slow + 1
    return lst.data[slow]
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        lst = empty_list()
        middle_element(lst)
        lst = push(lst, 5)
        print(5)
        lst = push(lst, 6)
        print(6)
        lst = push(lst, 8)
        print(8)
        lst = push(lst, 8)
        print(8)
        lst = push(lst, 10)
        print(10)
        lst = push(lst, 12)
        print(12)
        lst = push(lst, 17)
        print(17)
        lst = push(lst, 7)
        print(7)
        lst = push(lst, 3)
        print(3)
        lst = push(lst, 20)
        print(20)
        lst = push(lst, -20)
        print(-20)
        print(middle_element(lst))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
