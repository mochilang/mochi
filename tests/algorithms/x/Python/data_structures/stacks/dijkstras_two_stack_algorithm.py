# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def is_digit(ch):
        return ch == "0" or ch == "1" or ch == "2" or ch == "3" or ch == "4" or ch == "5" or ch == "6" or ch == "7" or ch == "8" or ch == "9"
    def slice_without_last_int(xs):
        res = []
        i = 0
        while i < len(xs) - 1:
            res = _append(res, xs[i])
            i = i + 1
        return res
    def slice_without_last_string(xs):
        res = []
        i = 0
        while i < len(xs) - 1:
            res = _append(res, xs[i])
            i = i + 1
        return res
    def dijkstras_two_stack_algorithm(equation):
        operand_stack = []
        operator_stack = []
        idx = 0
        while idx < len(equation):
            ch = equation[idx:idx + 1]
            if is_digit(ch):
                operand_stack = _append(operand_stack, int(ch))
            else:
                if ch == "+" or ch == "-" or ch == "*" or ch == "/":
                    operator_stack = _append(operator_stack, ch)
                else:
                    if ch == ")":
                        opr = operator_stack[len(operator_stack) - 1]
                        operator_stack = slice_without_last_string(operator_stack)
                        num1 = operand_stack[len(operand_stack) - 1]
                        operand_stack = slice_without_last_int(operand_stack)
                        num2 = operand_stack[len(operand_stack) - 1]
                        operand_stack = slice_without_last_int(operand_stack)
                        total = (num2 + num1 if opr == "+" else (num2 - num1 if opr == "-" else (num2 * num1 if opr == "*" else num2 // num1)))
                        operand_stack = _append(operand_stack, total)
            idx = idx + 1
        return operand_stack[len(operand_stack) - 1]
    equation = "(5 + ((4 * 2) * (2 + 3)))"
    print(equation + " = " + str(dijkstras_two_stack_algorithm(equation)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
