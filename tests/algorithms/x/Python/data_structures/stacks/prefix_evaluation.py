# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def split_custom(s, sep):
        res = []
        current = ""
        i = 0
        while i < len(s):
            ch = s[i:i + 1]
            if ch == sep:
                res = _append(res, current)
                current = ""
            else:
                current = current + ch
            i = i + 1
        res = _append(res, current)
        return res
    def tokenize(s):
        parts = split_custom(s, " ")
        res = []
        i = 0
        while i < len(parts):
            p = parts[i]
            if p != "":
                res = _append(res, p)
            i = i + 1
        return res
    def is_digit(ch):
        return ch >= "0" and ch <= "9"
    def is_operand(token):
        if token == "":
            return False
        i = 0
        while i < len(token):
            ch = token[i:i + 1]
            if not is_digit(ch):
                return False
            i = i + 1
        return True
    def to_int(token):
        res = 0
        i = 0
        while i < len(token):
            res = res * 10 + (int(token[i:i + 1]))
            i = i + 1
        return res
    def apply_op(op, a, b):
        if op == "+":
            return a + b
        if op == "-":
            return a - b
        if op == "*":
            return a * b
        if op == "/":
            return a / b
        return 0.0
    def evaluate(expression):
        tokens = tokenize(expression)
        stack = []
        i = len(tokens) - 1
        while i >= 0:
            token = tokens[i]
            if token != "":
                if is_operand(token):
                    stack = _append(stack, (float(to_int(token))))
                else:
                    o1 = stack[len(stack) - 1]
                    o2 = stack[len(stack) - 2]
                    stack = stack[0:len(stack) - 2]
                    res = apply_op(token, o1, o2)
                    stack = _append(stack, res)
            i = i - 1
        return stack[0]
    def eval_rec(tokens, pos):
        token = tokens[pos]
        next_ = pos + 1
        if is_operand(token):
            return [(float(to_int(token))), (float(next_))]
        left = eval_rec(tokens, next_)
        a = left[0]
        p1 = int(left[1])
        right = eval_rec(tokens, p1)
        b = right[0]
        p2 = right[1]
        return [apply_op(token, a, b), p2]
    def evaluate_recursive(expression):
        tokens = tokenize(expression)
        res = eval_rec(tokens, 0)
        return res[0]
    test_expression = "+ 9 * 2 6"
    print(_str(evaluate(test_expression)))
    test_expression2 = "/ * 10 2 + 4 1 "
    print(_str(evaluate(test_expression2)))
    test_expression3 = "+ * 2 3 / 8 4"
    print(_str(evaluate_recursive(test_expression3)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

