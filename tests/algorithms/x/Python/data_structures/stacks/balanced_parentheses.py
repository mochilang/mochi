# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def pop_last(xs):
        res = []
        i = 0
        while i < len(xs) - 1:
            res = _append(res, xs[i])
            i = i + 1
        return res
    def balanced_parentheses(s):
        stack = []
        pairs = {"(": ")", "[": "]", "{": "}"}
        i = 0
        while i < len(s):
            ch = s[i]
            if ch in pairs:
                stack = _append(stack, ch)
            else:
                if ch == ")" or ch == "]" or ch == "}":
                    if len(stack) == 0:
                        return False
                    top = stack[len(stack) - 1]
                    if pairs[top] != ch:
                        return False
                    stack = pop_last(stack)
            i = i + 1
        return len(stack) == 0
    tests = ["([]{})", "[()]{}{[()()]()}", "[(])", "1+2*3-4", ""]
    idx = 0
    while idx < len(tests):
        print(("True" if balanced_parentheses(tests[idx]) else "False"))
        idx = idx + 1
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
