# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class StackWithQueues:
        main_queue: [int]
        temp_queue: [int]
    def make_stack():
        return StackWithQueues(main_queue=[], temp_queue=[])
    def push(s, item):
        s.temp_queue = _append(s.temp_queue, item)
        while len(s.main_queue) > 0:
            s.temp_queue = _append(s.temp_queue, s.main_queue[0])
            s.main_queue = s.main_queue[1:len(s.main_queue)]
        new_main = s.temp_queue
        s.temp_queue = s.main_queue
        s.main_queue = new_main
    def pop(s):
        if len(s.main_queue) == 0:
            panic("pop from empty stack")
        item = s.main_queue[0]
        s.main_queue = s.main_queue[1:len(s.main_queue)]
        return item
    def peek(s):
        if len(s.main_queue) == 0:
            panic("peek from empty stack")
        return s.main_queue[0]
    def is_empty(s):
        return len(s.main_queue) == 0
    stack = make_stack()
    push(stack, 1)
    push(stack, 2)
    push(stack, 3)
    print(str(peek(stack)))
    print(str(pop(stack)))
    print(str(peek(stack)))
    print(str(pop(stack)))
    print(str(pop(stack)))
    print(str(is_empty(stack)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
