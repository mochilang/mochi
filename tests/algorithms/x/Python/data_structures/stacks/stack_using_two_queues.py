# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 06:45 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class StackWithQueues:
    main_queue: [int]
    temp_queue: [int]

def make_stack():
    return StackWithQueues(main_queue=[], temp_queue=[])
def push(s, item):
    s.temp_queue = _append(s.temp_queue, item)
    while len(s.main_queue) > 0:
        s.temp_queue = _append(s.temp_queue, s.main_queue[0])
        s.main_queue = s.main_queue[1:len(s.main_queue)]
    new_main = s.temp_queue
    s.temp_queue = s.main_queue
    s.main_queue = new_main
def pop(s):
    if len(s.main_queue) == 0:
        panic("pop from empty stack")
    item = s.main_queue[0]
    s.main_queue = s.main_queue[1:len(s.main_queue)]
    return item
def peek(s):
    if len(s.main_queue) == 0:
        panic("peek from empty stack")
    return s.main_queue[0]
def is_empty(s):
    return len(s.main_queue) == 0
stack = make_stack()
push(stack, 1)
push(stack, 2)
push(stack, 3)
print(str(peek(stack)))
print(str(pop(stack)))
print(str(peek(stack)))
print(str(pop(stack)))
print(str(pop(stack)))
print(str(is_empty(stack)))
