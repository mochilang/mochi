# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 06:45 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

def slice_without_last(xs):
    res = []
    i = 0
    while i < len(xs) - 1:
        res = _append(res, xs[i])
        i = i + 1
    return res
def parse_float(token):
    sign = 1.0
    idx = 0
    if len(token) > 0:
        first = token[0:1]
        if first == "-":
            sign = -1.0
            idx = 1
        else:
            if first == "+":
                idx = 1
    int_part = 0
    while idx < len(token) and token[idx:idx + 1] != ".":
        int_part = int_part * 10 + int(token[idx:idx + 1])
        idx = idx + 1
    result = 1.0 * int_part
    if idx < len(token) and token[idx:idx + 1] == ".":
        idx = idx + 1
        place = 0.1
        while idx < len(token):
            digit = int(token[idx:idx + 1])
            result = result + place * (1.0 * digit)
            place = place / 10.0
            idx = idx + 1
    return sign * result
def pow_float(base, exp):
    result = 1.0
    i = 0
    e = int(exp)
    while i < e:
        result = result * base
        i = i + 1
    return result
def apply_op(a, b, op):
    if op == "+":
        return a + b
    if op == "-":
        return a - b
    if op == "*":
        return a * b
    if op == "/":
        return a // b
    if op == "^":
        return pow_float(a, b)
    return 0.0
def evaluate(tokens):
    if len(tokens) == 0:
        return 0.0
    stack = []
    for token in tokens:
        if token == "+" or token == "-" or token == "*" or token == "/" or token == "^":
            if (token == "+" or token == "-") and len(stack) < 2:
                b = stack[len(stack) - 1]
                stack = slice_without_last(stack)
                if token == "-":
                    stack = _append(stack, 0.0 - b)
                else:
                    stack = _append(stack, b)
            else:
                b = stack[len(stack) - 1]
                stack = slice_without_last(stack)
                a = stack[len(stack) - 1]
                stack = slice_without_last(stack)
                result = apply_op(a, b, token)
                stack = _append(stack, result)
        else:
            stack = _append(stack, parse_float(token))
    if len(stack) != 1:
        panic("Invalid postfix expression")
    return stack[0]
print(str(evaluate(["2", "1", "+", "3", "*"])))
print(str(evaluate(["4", "13", "5", "/", "+"])))
print(str(evaluate(["5", "6", "9", "*", "+"])))
print(str(evaluate(["2", "-", "3", "+"])))
print(str(evaluate([])))
