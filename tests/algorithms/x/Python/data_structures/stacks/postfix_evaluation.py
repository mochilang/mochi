# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def slice_without_last(xs):
        res = []
        i = 0
        while i < len(xs) - 1:
            res = _append(res, xs[i])
            i = i + 1
        return res
    def parse_float(token):
        sign = 1.0
        idx = 0
        if len(token) > 0:
            first = token[0:1]
            if first == "-":
                sign = -1.0
                idx = 1
            else:
                if first == "+":
                    idx = 1
        int_part = 0
        while idx < len(token) and token[idx:idx + 1] != ".":
            int_part = int_part * 10 + int(token[idx:idx + 1])
            idx = idx + 1
        result = 1.0 * int_part
        if idx < len(token) and token[idx:idx + 1] == ".":
            idx = idx + 1
            place = 0.1
            while idx < len(token):
                digit = int(token[idx:idx + 1])
                result = result + place * (1.0 * digit)
                place = place / 10.0
                idx = idx + 1
        return sign * result
    def pow_float(base, exp):
        result = 1.0
        i = 0
        e = int(exp)
        while i < e:
            result = result * base
            i = i + 1
        return result
    def apply_op(a, b, op):
        if op == "+":
            return a + b
        if op == "-":
            return a - b
        if op == "*":
            return a * b
        if op == "/":
            return a // b
        if op == "^":
            return pow_float(a, b)
        return 0.0
    def evaluate(tokens):
        if len(tokens) == 0:
            return 0.0
        stack = []
        for token in tokens:
            if token == "+" or token == "-" or token == "*" or token == "/" or token == "^":
                if (token == "+" or token == "-") and len(stack) < 2:
                    b = stack[len(stack) - 1]
                    stack = slice_without_last(stack)
                    if token == "-":
                        stack = _append(stack, 0.0 - b)
                    else:
                        stack = _append(stack, b)
                else:
                    b = stack[len(stack) - 1]
                    stack = slice_without_last(stack)
                    a = stack[len(stack) - 1]
                    stack = slice_without_last(stack)
                    result = apply_op(a, b, token)
                    stack = _append(stack, result)
            else:
                stack = _append(stack, parse_float(token))
        if len(stack) != 1:
            panic("Invalid postfix expression")
        return stack[0]
    print(str(evaluate(["2", "1", "+", "3", "*"])))
    print(str(evaluate(["4", "13", "5", "/", "+"])))
    print(str(evaluate(["5", "6", "9", "*", "+"])))
    print(str(evaluate(["2", "-", "3", "+"])))
    print(str(evaluate([])))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
