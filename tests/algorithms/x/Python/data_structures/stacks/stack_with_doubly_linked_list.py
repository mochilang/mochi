# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 06:45 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Node:
    data: int
    next: int
    prev: int

@dataclass
class Stack:
    nodes: [Node]
    head: int

def empty_stack():
    return Stack(nodes=[], head=0 - 1)
def push(stack, value):
    nodes = stack.nodes
    idx = len(nodes)
    new_node = Node(data=value, next=stack.head, prev=0 - 1)
    nodes = _append(nodes, new_node)
    if stack.head != 0 - 1:
        head_node = nodes[stack.head]
        head_node.prev = idx
        nodes[stack.head] = head_node
    return Stack(nodes=nodes, head=idx)
@dataclass
class PopResult:
    stack: Stack
    value: int
    ok: bool

def pop(stack):
    if stack.head == 0 - 1:
        return PopResult(stack=stack, value=0, ok=False)
    nodes = stack.nodes
    head_node = nodes[stack.head]
    value = head_node.data
    next_idx = head_node.next
    if next_idx != 0 - 1:
        next_node = nodes[next_idx]
        next_node.prev = 0 - 1
        nodes[next_idx] = next_node
    new_stack = Stack(nodes=nodes, head=next_idx)
    return PopResult(stack=new_stack, value=value, ok=True)
@dataclass
class TopResult:
    value: int
    ok: bool

def top(stack):
    if stack.head == 0 - 1:
        return TopResult(value=0, ok=False)
    node = stack.nodes[stack.head]
    return TopResult(value=node.data, ok=True)
def size(stack):
    count = 0
    idx = stack.head
    while idx != 0 - 1:
        count = count + 1
        node = stack.nodes[idx]
        idx = node.next
    return count
def is_empty(stack):
    return stack.head == 0 - 1
def print_stack(stack):
    print("stack elements are:")
    idx = stack.head
    s = ""
    while idx != 0 - 1:
        node = stack.nodes[idx]
        s = s + str(node.data) + "->"
        idx = node.next
    if len(s) > 0:
        print(s)
def main():
    stack = empty_stack()
    print("Stack operations using Doubly LinkedList")
    stack = push(stack, 4)
    stack = push(stack, 5)
    stack = push(stack, 6)
    stack = push(stack, 7)
    print_stack(stack)
    t = top(stack)
    if t.ok:
        print("Top element is " + str(t.value))
    else:
        print("Top element is None")
    print("Size of the stack is " + str(size(stack)))
    p = pop(stack)
    stack = p.stack
    p = pop(stack)
    stack = p.stack
    print_stack(stack)
    print("stack is empty: " + str(is_empty(stack)))
main()
