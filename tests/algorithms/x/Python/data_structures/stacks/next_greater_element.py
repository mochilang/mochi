# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 06:45 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


def _append(lst, v):
    return (lst or []) + [v]

arr = [-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0]
expected = [-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0]
def next_greatest_element_slow(xs):
    res = []
    i = 0
    while i < len(xs):
        next = -1.0
        j = i + 1
        while j < len(xs):
            if xs[i] < xs[j]:
                next = xs[j]
                break
            j = j + 1
        res = _append(res, next)
        i = i + 1
    return res
def next_greatest_element_fast(xs):
    res = []
    i = 0
    while i < len(xs):
        next = -1.0
        j = i + 1
        while j < len(xs):
            inner = xs[j]
            if xs[i] < inner:
                next = inner
                break
            j = j + 1
        res = _append(res, next)
        i = i + 1
    return res
def set_at_float(xs, idx, value):
    i = 0
    res = []
    while i < len(xs):
        if i == idx:
            res = _append(res, value)
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def next_greatest_element(xs):
    res = []
    k = 0
    while k < len(xs):
        res = _append(res, -1.0)
        k = k + 1
    stack = []
    i = 0
    while i < len(xs):
        while len(stack) > 0 and xs[i] > xs[stack[len(stack) - 1]]:
            idx = stack[len(stack) - 1]
            stack = stack[0:len(stack) - 1]
            res = set_at_float(res, idx, xs[i])
        stack = _append(stack, i)
        i = i + 1
    return res
print(str(next_greatest_element_slow(arr)))
print(str(next_greatest_element_fast(arr)))
print(str(next_greatest_element(arr)))
