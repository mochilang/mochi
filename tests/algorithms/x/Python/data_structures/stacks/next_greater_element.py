# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    arr = [-10.0, -5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, 3.0, 4.0, -21.0, -10.0, -5.0, -1.0, 0.0]
    expected = [-5.0, 0.0, 5.0, 5.1, 11.0, 13.0, 21.0, -1.0, 4.0, -1.0, -10.0, -5.0, -1.0, 0.0, -1.0]
    def next_greatest_element_slow(xs):
        res = []
        i = 0
        while i < len(xs):
            next_ = -1.0
            j = i + 1
            while j < len(xs):
                if xs[i] < xs[j]:
                    next_ = xs[j]
                    break
                j = j + 1
            res = _append(res, next_)
            i = i + 1
        return res
    def next_greatest_element_fast(xs):
        res = []
        i = 0
        while i < len(xs):
            next_ = -1.0
            j = i + 1
            while j < len(xs):
                inner = xs[j]
                if xs[i] < inner:
                    next_ = inner
                    break
                j = j + 1
            res = _append(res, next_)
            i = i + 1
        return res
    def set_at_float(xs, idx, value):
        i = 0
        res = []
        while i < len(xs):
            if i == idx:
                res = _append(res, value)
            else:
                res = _append(res, xs[i])
            i = i + 1
        return res
    def next_greatest_element(xs):
        res = []
        k = 0
        while k < len(xs):
            res = _append(res, -1.0)
            k = k + 1
        stack = []
        i = 0
        while i < len(xs):
            while len(stack) > 0 and xs[i] > xs[stack[len(stack) - 1]]:
                idx = stack[len(stack) - 1]
                stack = stack[0:len(stack) - 1]
                res = set_at_float(res, idx, xs[i])
            stack = _append(stack, i)
            i = i + 1
        return res
    print(_str(next_greatest_element_slow(arr)))
    print(_str(next_greatest_element_fast(arr)))
    print(_str(next_greatest_element(arr)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

