# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

PRECEDENCES = {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}
ASSOCIATIVITIES = {"+": "LR", "-": "LR", "*": "LR", "/": "LR", "^": "RL"}
def precedence(ch):
    if ch in PRECEDENCES:
        return PRECEDENCES.get(ch)
    return -1
def associativity(ch):
    if ch in ASSOCIATIVITIES:
        return ASSOCIATIVITIES.get(ch)
    return ""
def balanced_parentheses(expr):
    count = 0
    i = 0
    while i < len(expr):
        ch = expr[i:i + 1]
        if ch == "(":
            count = count + 1
        if ch == ")":
            count = count - 1
            if count < 0:
                return False
        i = i + 1
    return count == 0
def is_letter(ch):
    return ("a" <= ch and ch <= "z") or ("A" <= ch and ch <= "Z")
def is_digit(ch):
    return "0" <= ch and ch <= "9"
def is_alnum(ch):
    return is_letter(ch) or is_digit(ch)
def infix_to_postfix(expression):
    if balanced_parentheses(expression) == False:
        panic("Mismatched parentheses")
    stack = []
    postfix = []
    i = 0
    while i < len(expression):
        ch = expression[i:i + 1]
        if is_alnum(ch):
            postfix = _append(postfix, ch)
        else:
            if ch == "(":
                stack = _append(stack, ch)
            else:
                if ch == ")":
                    while len(stack) > 0 and stack[len(stack) - 1] != "(":
                        postfix = _append(postfix, stack[len(stack) - 1])
                        stack = stack[0:len(stack) - 1]
                    if len(stack) > 0:
                        stack = stack[0:len(stack) - 1]
                else:
                    if ch == " ":
                        pass
                    else:
                        while True:
                            if len(stack) == 0:
                                stack = _append(stack, ch)
                                break
                            cp = precedence(ch)
                            tp = precedence(stack[len(stack) - 1])
                            if cp > tp:
                                stack = _append(stack, ch)
                                break
                            if cp < tp:
                                postfix = _append(postfix, stack[len(stack) - 1])
                                stack = stack[0:len(stack) - 1]
                                continue
                            if associativity(ch) == "RL":
                                stack = _append(stack, ch)
                                break
                            postfix = _append(postfix, stack[len(stack) - 1])
                            stack = stack[0:len(stack) - 1]
        i = i + 1
    while len(stack) > 0:
        postfix = _append(postfix, stack[len(stack) - 1])
        stack = stack[0:len(stack) - 1]
    res = ""
    j = 0
    while j < len(postfix):
        if j > 0:
            res = res + " "
        res = res + postfix[j]
        j = j + 1
    return res
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        expression = "a+b*(c^d-e)^(f+g*h)-i"
        print(expression)
        print(infix_to_postfix(expression))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
