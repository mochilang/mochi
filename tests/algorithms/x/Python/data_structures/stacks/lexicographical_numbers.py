# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def lexical_order(max_number):
        result = []
        stack = [1]
        while len(stack) > 0:
            idx = len(stack) - 1
            num = stack[idx]
            stack = stack[0:idx]
            if num > max_number:
                continue
            result = _append(result, num)
            if num % 10 != 9:
                stack = _append(stack, num + 1)
            stack = _append(stack, num * 10)
        return result
    def join_ints(xs):
        res = ""
        i = 0
        while i < len(xs):
            if i > 0:
                res = res + " "
            res = res + str(xs[i])
            i = i + 1
        return res
    print(join_ints(lexical_order(13)))
    print(str(lexical_order(1)))
    print(join_ints(lexical_order(20)))
    print(join_ints(lexical_order(25)))
    print(str(lexical_order(12)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
