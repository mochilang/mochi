# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst

@dataclass
class Node:
    value: str
    next_: int

@dataclass
class Stack:
    nodes: List[Node]
    top: int

def empty_stack():
    return Stack(nodes=[], top=(-1))
def is_empty(stack):
    return stack.top == (-1)
def push(stack, item):
    new_node = Node(value=item, next_=stack.top)
    new_nodes = stack.nodes
    new_nodes = _append(new_nodes, new_node)
    new_top = len(new_nodes) - 1
    return Stack(nodes=new_nodes, top=new_top)
@dataclass
class PopResult:
    stack: Stack
    value: str

def pop(stack):
    if stack.top == (-1):
        panic("pop from empty stack")
    node = (stack.nodes[stack.top])
    new_top = node.next_
    new_stack = Stack(nodes=stack.nodes, top=new_top)
    return PopResult(stack=new_stack, value=node.value)
def peek(stack):
    if stack.top == (-1):
        panic("peek from empty stack")
    node = (stack.nodes[stack.top])
    return node.value
def clear(stack):
    return Stack(nodes=[], top=(-1))
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        stack = empty_stack()
        print(("True" if is_empty(stack) else "False"))
        stack = push(stack, "5")
        stack = push(stack, "9")
        stack = push(stack, "python")
        print(("True" if is_empty(stack) else "False"))
        res = pop(stack)
        stack = res.stack
        print(res.value)
        stack = push(stack, "algorithms")
        res = pop(stack)
        stack = res.stack
        print(res.value)
        res = pop(stack)
        stack = res.stack
        print(res.value)
        res = pop(stack)
        stack = res.stack
        print(res.value)
        print(("True" if is_empty(stack) else "False"))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

