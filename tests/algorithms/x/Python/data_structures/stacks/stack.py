# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class Stack:
    items: [int]
    limit: int

def make_stack(limit):
    return Stack(items=[], limit=limit)
def is_empty(s):
    return len(s.items) == 0
def size(s):
    return len(s.items)
def is_full(s):
    return len(s.items) >= s.limit
def push(s, item):
    if is_full(s):
        panic("stack overflow")
    s.items = _append(s.items, item)
def pop(s):
    if is_empty(s):
        panic("stack underflow")
    n = len(s.items)
    val = s.items[n - 1]
    s.items = s.items[0:n - 1]
    return val
def peek(s):
    if is_empty(s):
        panic("peek from empty stack")
    return s.items[len(s.items) - 1]
def contains(s, item):
    i = 0
    while i < len(s.items):
        if s.items[i] == item:
            return True
        i = i + 1
    return False
def stack_repr(s):
    return str(s.items)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        s = make_stack(5)
        print(str(is_empty(s)))
        push(s, 0)
        push(s, 1)
        push(s, 2)
        print(str(peek(s)))
        print(str(size(s)))
        print(str(is_full(s)))
        push(s, 3)
        push(s, 4)
        print(str(is_full(s)))
        print(stack_repr(s))
        print(str(pop(s)))
        print(str(peek(s)))
        print(str(1 in s))
        print(str(9 in s))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
