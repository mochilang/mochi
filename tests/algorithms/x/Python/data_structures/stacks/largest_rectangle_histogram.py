# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-07 08:18 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def largest_rectangle_area(heights):
        stack = []
        max_area = 0
        hs = heights
        hs = _append(hs, 0)
        i = 0
        while i < len(hs):
            while len(stack) > 0 and hs[i] < hs[stack[len(stack) - 1]]:
                top = stack[len(stack) - 1]
                stack = stack[0:len(stack) - 1]
                height = hs[top]
                width = i
                if len(stack) > 0:
                    width = i - stack[len(stack) - 1] - 1
                area = height * width
                if area > max_area:
                    max_area = area
            stack = _append(stack, i)
            i = i + 1
        return max_area
    print(str(largest_rectangle_area([2, 1, 5, 6, 2, 3])))
    print(str(largest_rectangle_area([2, 4])))
    print(str(largest_rectangle_area([6, 2, 5, 4, 5, 1, 6])))
    print(str(largest_rectangle_area([1])))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
