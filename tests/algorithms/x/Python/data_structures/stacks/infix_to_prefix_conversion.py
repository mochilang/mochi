# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 22:16 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    lst.append(v)
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    PRIORITY = {"^": 3, "*": 2, "/": 2, "%": 2, "+": 1, "-": 1}
    LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    DIGITS = "0123456789"
    def is_alpha(ch):
        i = 0
        while i < len(LETTERS):
            if LETTERS[i] == ch:
                return True
            i = i + 1
        return False
    def is_digit(ch):
        i = 0
        while i < len(DIGITS):
            if DIGITS[i] == ch:
                return True
            i = i + 1
        return False
    def reverse_string(s):
        out = ""
        i = len(s) - 1
        while i >= 0:
            out = out + s[i]
            i = i - 1
        return out
    def infix_to_postfix(infix):
        stack = []
        post = []
        i = 0
        while i < len(infix):
            x = infix[i]
            if is_alpha(x) or is_digit(x):
                post = _append(post, x)
            else:
                if x == "(":
                    stack = _append(stack, x)
                else:
                    if x == ")":
                        if len(stack) == 0:
                            panic("list index out of range")
                        while stack[len(stack) - 1] != "(":
                            post = _append(post, stack[len(stack) - 1])
                            stack = stack[0:len(stack) - 1]
                        stack = stack[0:len(stack) - 1]
                    else:
                        if len(stack) == 0:
                            stack = _append(stack, x)
                        else:
                            while len(stack) > 0 and stack[len(stack) - 1] != "(" and PRIORITY.get(x, 0) <= PRIORITY.get(stack[len(stack) - 1], 0):
                                post = _append(post, stack[len(stack) - 1])
                                stack = stack[0:len(stack) - 1]
                            stack = _append(stack, x)
            i = i + 1
        while len(stack) > 0:
            if stack[len(stack) - 1] == "(":
                panic("invalid expression")
            post = _append(post, stack[len(stack) - 1])
            stack = stack[0:len(stack) - 1]
        res = ""
        j = 0
        while j < len(post):
            res = res + post[j]
            j = j + 1
        return res
    def infix_to_prefix(infix):
        reversed_ = ""
        i = len(infix) - 1
        while i >= 0:
            ch = infix[i]
            if ch == "(":
                reversed_ = reversed_ + ")"
            else:
                if ch == ")":
                    reversed_ = reversed_ + "("
                else:
                    reversed_ = reversed_ + ch
            i = i - 1
        postfix = infix_to_postfix(reversed_)
        prefix = reverse_string(postfix)
        return prefix
    # test simple expression
    assert infix_to_prefix("a+b^c") == "+a^bc"
    # test complex expression
    assert infix_to_prefix("1*((-a)*2+b)") == "*1+*-a2b"
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

