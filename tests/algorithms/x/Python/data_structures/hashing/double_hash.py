# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def is_prime(n):
        if n < 2:
            return False
        i = 2
        while i * i <= n:
            if n % i == 0:
                return False
            i = i + 1
        return True
    def prev_prime(n):
        p = n - 1
        while p >= 2:
            if is_prime(p):
                return p
            p = p - 1
        return 1
    def create_table(size):
        vals = []
        i = 0
        while i < size:
            vals = _append(vals, (-1))
            i = i + 1
        return vals
    def hash1(size, key):
        return key % size
    def hash2(prime, key):
        return prime - (key % prime)
    def insert_double_hash(values, size, prime, value):
        vals = values
        idx = hash1(size, value)
        step = hash2(prime, value)
        count = 0
        while vals[idx] != (-1) and count < size:
            idx = (idx + step) % size
            count = count + 1
        if vals[idx] == (-1):
            vals[idx] = value
        return vals
    def table_keys(values):
        res = {}
        i = 0
        while i < len(values):
            if values[i] != (-1):
                res[i] = values[i]
            i = i + 1
        return res
    def run_example(size, data):
        prime = prev_prime(size)
        table = create_table(size)
        i = 0
        while i < len(data):
            table = insert_double_hash(table, size, prime, data[i])
            i = i + 1
        print(_str(table_keys(table)))
    run_example(3, [10, 20, 30])
    run_example(4, [10, 20, 30])
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

