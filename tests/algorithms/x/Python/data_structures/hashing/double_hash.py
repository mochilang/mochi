# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:44 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def is_prime(n):
    if n < 2:
        return False
    i = 2
    while i * i <= n:
        if n % i == 0:
            return False
        i = i + 1
    return True
def prev_prime(n):
    p = n - 1
    while p >= 2:
        if is_prime(p):
            return p
        p = p - 1
    return 1
def create_table(size):
    vals = []
    i = 0
    while i < size:
        vals = _append(vals, (-1))
        i = i + 1
    return vals
def hash1(size, key):
    return key % size
def hash2(prime, key):
    return prime - (key % prime)
def insert_double_hash(values, size, prime, value):
    vals = values
    idx = hash1(size, value)
    step = hash2(prime, value)
    count = 0
    while vals[idx] != (-1) and count < size:
        idx = (idx + step) % size
        count = count + 1
    if vals[idx] == (-1):
        vals[idx] = value
    return vals
def table_keys(values):
    res = {}
    i = 0
    while i < len(values):
        if values[i] != (-1):
            res[i] = values[i]
        i = i + 1
    return res
def run_example(size, data):
    prime = prev_prime(size)
    table = create_table(size)
    i = 0
    while i < len(data):
        table = insert_double_hash(table, size, prime, data[i])
        i = i + 1
    print(str(table_keys(table)))
run_example(3, [10, 20, 30])
run_example(4, [10, 20, 30])
