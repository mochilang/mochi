# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

ascii_ = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
def ord(ch):
    i = 0
    while i < len(ascii):
        if ascii[i:i + 1] == ch:
            return 32 + i
        i = i + 1
    return 0
@dataclass
class Bloom:
    size: int
    bits: List[int]

def new_bloom(size):
    bits = []
    i = 0
    while i < size:
        bits = _append(bits, 0)
        i = i + 1
    return Bloom(size=size, bits=bits)
def hash1(value, size):
    h = 0
    i = 0
    while i < len(value):
        h = (h * 31 + ord(value[i:i + 1])) % size
        i = i + 1
    return h
def hash2(value, size):
    h = 0
    i = 0
    while i < len(value):
        h = (h * 131 + ord(value[i:i + 1])) % size
        i = i + 1
    return h
def hash_positions(value, size):
    h1 = hash1(value, size)
    h2 = hash2(value, size)
    res = []
    res = _append(res, h1)
    res = _append(res, h2)
    return res
def bloom_add(b, value):
    pos = hash_positions(value, b.size)
    bits = b.bits
    i = 0
    while i < len(pos):
        idx = b.size - 1 - pos[i]
        bits[idx] = 1
        i = i + 1
    return Bloom(size=b.size, bits=bits)
def bloom_exists(b, value):
    pos = hash_positions(value, b.size)
    i = 0
    while i < len(pos):
        idx = b.size - 1 - pos[i]
        if b.bits[idx] != 1:
            return False
        i = i + 1
    return True
def bitstring(b):
    res = ""
    i = 0
    while i < b.size:
        res = res + _str(b.bits[i])
        i = i + 1
    return res
def format_hash(b, value):
    pos = hash_positions(value, b.size)
    bits = []
    i = 0
    while i < b.size:
        bits = _append(bits, 0)
        i = i + 1
    i = 0
    while i < len(pos):
        idx = b.size - 1 - pos[i]
        bits[idx] = 1
        i = i + 1
    res = ""
    i = 0
    while i < b.size:
        res = res + _str(bits[i])
        i = i + 1
    return res
def estimated_error_rate(b):
    ones = 0
    i = 0
    while i < b.size:
        if b.bits[i] == 1:
            ones = ones + 1
        i = i + 1
    frac = (float(ones)) / (float(b.size))
    return frac * frac
def any_in(b, items):
    i = 0
    while i < len(items):
        if bloom_exists(b, items[i]):
            return True
        i = i + 1
    return False
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        bloom = new_bloom(8)
        print(bitstring(bloom))
        print(("True" if bloom_exists(bloom, "Titanic") else "False"))
        bloom = bloom_add(bloom, "Titanic")
        print(bitstring(bloom))
        print(("True" if bloom_exists(bloom, "Titanic") else "False"))
        bloom = bloom_add(bloom, "Avatar")
        print(("True" if bloom_exists(bloom, "Avatar") else "False"))
        print(format_hash(bloom, "Avatar"))
        print(bitstring(bloom))
        not_present = ["The Godfather", "Interstellar", "Parasite", "Pulp Fiction"]
        i = 0
        while i < len(not_present):
            film = not_present[i]
            print(film + ":" + format_hash(bloom, film))
            i = i + 1
        print(("True" if any_in(bloom, not_present) else "False"))
        print(("True" if bloom_exists(bloom, "Ratatouille") else "False"))
        print(format_hash(bloom, "Ratatouille"))
        print(_str(estimated_error_rate(bloom)))
        bloom = bloom_add(bloom, "The Godfather")
        print(_str(estimated_error_rate(bloom)))
        print(bitstring(bloom))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

