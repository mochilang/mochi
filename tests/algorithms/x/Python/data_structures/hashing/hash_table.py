# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:44 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]

@dataclass
class HashTable:
    size_table: int
    values: [int]
    filled: [bool]
    charge_factor: int
    lim_charge: float

def repeat_int(n, val):
    res = []
    i = 0
    while i < n:
        res = _append(res, val)
        i = i + 1
    return res
def repeat_bool(n, val):
    res = []
    i = 0
    while i < n:
        res = _append(res, val)
        i = i + 1
    return res
def set_int(xs, idx, value):
    res = []
    i = 0
    while i < len(xs):
        if i == idx:
            res = _append(res, value)
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def set_bool(xs, idx, value):
    res = []
    i = 0
    while i < len(xs):
        if i == idx:
            res = _append(res, value)
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def create_table(size_table, charge_factor, lim_charge):
    return HashTable(size_table=size_table, values=repeat_int(size_table, 0), filled=repeat_bool(size_table, False), charge_factor=charge_factor, lim_charge=lim_charge)
def hash_function(ht, key):
    k = key % ht.size_table
    if k < 0:
        k = k + ht.size_table
    return k
def is_prime(n):
    if n < 2:
        return False
    if n % 2 == 0:
        return n == 2
    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i = i + 2
    return True
def next_prime(value, factor):
    candidate = value * factor + 1
    while not is_prime(candidate):
        candidate = candidate + 1
    return candidate
def set_value(ht, key, data):
    new_values = set_int(ht.values, key, data)
    new_filled = set_bool(ht.filled, key, True)
    return HashTable(size_table=ht.size_table, values=new_values, filled=new_filled, charge_factor=ht.charge_factor, lim_charge=ht.lim_charge)
def collision_resolution(ht, key):
    new_key = hash_function(ht, key + 1)
    steps = 0
    while ht.filled[new_key]:
        new_key = hash_function(ht, new_key + 1)
        steps = steps + 1
        if steps >= ht.size_table:
            return -1
    return new_key
def rehashing(ht):
    survivors = []
    i = 0
    while i < len(ht.values):
        if ht.filled[i]:
            survivors = _append(survivors, ht.values[i])
        i = i + 1
    new_size = next_prime(ht.size_table, 2)
    new_ht = create_table(new_size, ht.charge_factor, ht.lim_charge)
    i = 0
    while i < len(survivors):
        new_ht = insert_data(new_ht, survivors[i])
        i = i + 1
    return new_ht
def insert_data(ht, data):
    key = hash_function(ht, data)
    if not ht.filled[key]:
        return set_value(ht, key, data)
    if ht.values[key] == data:
        return ht
    new_key = collision_resolution(ht, key)
    if new_key >= 0:
        return set_value(ht, new_key, data)
    resized = rehashing(ht)
    return insert_data(resized, data)
def keys(ht):
    res = []
    i = 0
    while i < len(ht.values):
        if ht.filled[i]:
            res = _append(res, [i, ht.values[i]])
        i = i + 1
    return res
def main():
    ht = create_table(3, 1, 0.75)
    ht = insert_data(ht, 17)
    ht = insert_data(ht, 18)
    ht = insert_data(ht, 99)
    print(keys(ht))
main()
