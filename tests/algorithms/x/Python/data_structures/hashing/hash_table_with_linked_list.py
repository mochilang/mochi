# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class HashTableWithLinkedList:
    size_table: int
    charge_factor: int
    values: List[List[int]]
    keys: Dict[int, List[int]]

def make_table(size_table, charge_factor):
    vals = []
    i = 0
    while i < size_table:
        vals = _append(vals, [])
        i = i + 1
    return HashTableWithLinkedList(size_table=size_table, charge_factor=charge_factor, values=vals, keys={})
def hash_function(ht, key):
    res = key % ht.size_table
    if res < 0:
        res = res + ht.size_table
    return res
def prepend(lst, value):
    result = [value]
    i = 0
    while i < len(lst):
        result = _append(result, lst[i])
        i = i + 1
    return result
def set_value(ht, key, data):
    current = ht.values[key]
    updated = prepend(current, data)
    vals = ht.values
    vals[key] = updated
    ht.values = vals
    ks = ht.keys
    ks[key] = updated
    ht.keys = ks
def count_empty(ht):
    count = 0
    i = 0
    while i < len(ht.values):
        if len(ht.values[i]) == 0:
            count = count + 1
        i = i + 1
    return count
def balanced_factor(ht):
    total = 0
    i = 0
    while i < len(ht.values):
        total = total + (ht.charge_factor - len(ht.values[i]))
        i = i + 1
    return (float(total)) / (float(ht.size_table)) * (float(ht.charge_factor))
def collision_resolution(ht, key):
    if not (len(ht.values[key]) == ht.charge_factor and count_empty(ht) == 0):
        return key
    new_key = (key + 1) % ht.size_table
    steps = 0
    while len(ht.values[new_key]) == ht.charge_factor and steps < ht.size_table - 1:
        new_key = (new_key + 1) % ht.size_table
        steps = steps + 1
    if len(ht.values[new_key]) < ht.charge_factor:
        return new_key
    return -1
def insert(ht, data):
    key = hash_function(ht, data)
    if len(ht.values[key]) == 0 or len(ht.values[key]) < ht.charge_factor:
        set_value(ht, key, data)
        return
    dest = collision_resolution(ht, key)
    if dest >= 0:
        set_value(ht, dest, data)
    else:
        print("table full")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        ht = make_table(3, 2)
        insert(ht, 10)
        insert(ht, 20)
        insert(ht, 30)
        insert(ht, 40)
        insert(ht, 50)
        print(_str(ht.values))
        print(_str(balanced_factor(ht)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

