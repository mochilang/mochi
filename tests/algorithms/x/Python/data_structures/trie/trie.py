# Code generated by Mochi transpiler.
# Version 0.10.60, generated on 2025-08-08 10:08 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise Exception(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    @dataclass
    class Node:
        children: Dict[str, int]
        is_leaf: bool
    @dataclass
    class Trie:
        nodes: [Node]
    def new_trie():
        return Trie(nodes=[Node(children={}, is_leaf=False)])
    def remove_key(m, k):
        out = {}
        for key in m:
            if key != k:
                out[key] = m.get(key, 0)
        return out
    def insert(trie, word):
        nodes = trie.nodes
        curr = 0
        i = 0
        while i < len(word):
            ch = word[i]
            child_idx = -1
            children = nodes[curr].children
            if ch in children:
                child_idx = children[ch]
            else:
                new_node = Node(children={}, is_leaf=False)
                nodes = _append(nodes, new_node)
                child_idx = len(nodes) - 1
                new_children = children
                new_children[ch] = child_idx
                node = nodes[curr]
                node.children = new_children
                nodes[curr] = node
            curr = child_idx
            i = i + 1
        node = nodes[curr]
        node.is_leaf = True
        nodes[curr] = node
        trie.nodes = nodes
    def insert_many(trie, words):
        for w in words:
            insert(trie, w)
    def find(trie, word):
        nodes = trie.nodes
        curr = 0
        i = 0
        while i < len(word):
            ch = word[i]
            children = nodes[curr].children
            if not (ch in children):
                return False
            curr = children[ch]
            i = i + 1
        node = nodes[curr]
        return node.is_leaf
    def delete(trie, word):
        nodes = trie.nodes
        def _delete(idx, pos):
            if pos == len(word):
                node = nodes[idx]
                if node.is_leaf == False:
                    return False
                node.is_leaf = False
                nodes[idx] = node
                return len(node.children) == 0
            node = nodes[idx]
            children = node.children
            ch = word[pos]
            if not (ch in children):
                return False
            child_idx = children[ch]
            should_delete = _delete(child_idx, pos + 1)
            node = nodes[idx]
            if should_delete:
                new_children = remove_key(node.children, ch)
                node.children = new_children
                nodes[idx] = node
                return len(new_children) == 0 and node.is_leaf == False
            nodes[idx] = node
            return False
        _delete(0, 0)
        trie.nodes = nodes
    def print_words(trie):
        def dfs(idx, word):
            node = trie.nodes[idx]
            if node.is_leaf:
                print(word)
            for key in node.children:
                dfs(node.children[key], word + key)
        dfs(0, "")
    def test_trie():
        words = ["banana", "bananas", "bandana", "band", "apple", "all", "beast"]
        trie = new_trie()
        insert_many(trie, words)
        ok = True
        for w in words:
            ok = ok and find(trie, w)
        ok = ok and find(trie, "banana")
        t = find(trie, "bandanas")
        ok = ok and (t == False)
        t2 = find(trie, "apps")
        ok = ok and (t2 == False)
        ok = ok and find(trie, "apple")
        ok = ok and find(trie, "all")
        delete(trie, "all")
        t3 = find(trie, "all")
        ok = ok and (t3 == False)
        delete(trie, "banana")
        t4 = find(trie, "banana")
        ok = ok and (t4 == False)
        ok = ok and find(trie, "bananas")
        return ok
    def print_results(msg, passes):
        if passes:
            print(msg + " works!")
        else:
            print(msg + " doesn't work :(")
    trie = new_trie()
    print_results("Testing trie functionality", test_trie())
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
