# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

Empty = None
@dataclass
class Node:
    left: TreeNode
    value: int
    right: TreeNode

@dataclass
class BuildResult:
    node: TreeNode
    next_: int

def digit(ch):
    digits = "0123456789"
    i = 0
    while i < len(digits):
        if digits[i:i + 1] == ch:
            return i
        i = i + 1
    return 0
def to_int(s):
    i = 0
    sign = 1
    if len(s) > 0 and s[0:1] == "-":
        sign = -1
        i = 1
    num = 0
    while i < len(s):
        ch = s[i:i + 1]
        num = num * 10 + digit(ch)
        i = i + 1
    return sign * num
def split(s, sep):
    res = []
    current = ""
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch == sep:
            res = _append(res, current)
            current = ""
        else:
            current = current + ch
        i = i + 1
    res = _append(res, current)
    return res
def serialize(node):
    return ("null" if node == Empty else (_str(node.value) + "," + serialize(node.left) + "," + serialize(node.right) if isinstance(node, Node) else None))
def build(nodes, idx):
    value = nodes[idx]
    if value == "null":
        return BuildResult(node=Empty(), next_=idx + 1)
    left_res = build(nodes, idx + 1)
    right_res = build(nodes, left_res.next_)
    node = Node(left=left_res.node, value=to_int(value), right=right_res.node)
    return BuildResult(node=node, next_=right_res.next_)
def deserialize(data):
    nodes = data.split(",")
    res = build(nodes, 0)
    return res.node
def five_tree():
    left_child = Node(value=2, left=Empty(), right=Empty())
    right_left = Node(value=4, left=Empty(), right=Empty())
    right_right = Node(value=5, left=Empty(), right=Empty())
    right_child = Node(value=3, left=right_left, right=right_right)
    return Node(value=1, left=left_child, right=right_child)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        root = five_tree()
        serial = serialize(root)
        print(serial)
        rebuilt = deserialize(serial)
        serial2 = serialize(rebuilt)
        print(serial2)
        print((1 if serial == serial2 else 0))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

