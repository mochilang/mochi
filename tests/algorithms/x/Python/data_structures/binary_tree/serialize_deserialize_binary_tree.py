# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

Empty = None
@dataclass
class Node:
    left: TreeNode
    value: int
    right: TreeNode

@dataclass
class BuildResult:
    node: TreeNode
    next: int

def digit(ch):
    digits = "0123456789"
    i = 0
    while i < len(digits):
        if digits[i:i + 1] == ch:
            return i
        i = i + 1
    return 0
def to_int(s):
    i = 0
    sign = 1
    if len(s) > 0 and s[0:1] == "-":
        sign = -1
        i = 1
    num = 0
    while i < len(s):
        ch = s[i:i + 1]
        num = num * 10 + digit(ch)
        i = i + 1
    return sign * num
def split(s, sep):
    res = []
    current = ""
    i = 0
    while i < len(s):
        ch = s[i:i + 1]
        if ch == sep:
            res = _append(res, current)
            current = ""
        else:
            current = current + ch
        i = i + 1
    res = _append(res, current)
    return res
def serialize(node):
    return ("null" if node == Empty else (str(node.value) + "," + serialize(node.left) + "," + serialize(node.right) if isinstance(node, Node) else None))
def build(nodes, idx):
    value = nodes[idx]
    if value == "null":
        return BuildResult(node=Empty(), next=idx + 1)
    left_res = build(nodes, idx + 1)
    right_res = build(nodes, left_res.next)
    node = Node(left=left_res.node, value=to_int(value), right=right_res.node)
    return BuildResult(node=node, next=right_res.next)
def deserialize(data):
    nodes = data.split(",")
    res = build(nodes, 0)
    return res.node
def five_tree():
    left_child = Node(value=2, left=Empty(), right=Empty())
    right_left = Node(value=4, left=Empty(), right=Empty())
    right_right = Node(value=5, left=Empty(), right=Empty())
    right_child = Node(value=3, left=right_left, right=right_right)
    return Node(value=1, left=left_child, right=right_child)
def main():
    root = five_tree()
    serial = serialize(root)
    print(serial)
    rebuilt = deserialize(serial)
    serial2 = serialize(rebuilt)
    print(serial2)
    print((1 if serial == serial2 else 0))
main()
