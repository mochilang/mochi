# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class Node:
    val: int
    left: int
    right: int

@dataclass
class Info:
    is_bst: bool
    min_val: int
    max_val: int
    total: int
    best: int

def min_int(a, b):
    if a < b:
        return a
    return b
def max_int(a, b):
    if a > b:
        return a
    return b
def solver(nodes, idx):
    if idx == 0 - 1:
        return Info(is_bst=True, min_val=2147483647, max_val=-2147483648, total=0, best=0)
    node = nodes[idx]
    left_info = solver(nodes, node.left)
    right_info = solver(nodes, node.right)
    current_best = max_int(left_info.best, right_info.best)
    if left_info.is_bst and right_info.is_bst and left_info.max_val < node.val and node.val < right_info.min_val:
        sum_val = left_info.total + right_info.total + node.val
        current_best = max_int(current_best, sum_val)
        return Info(is_bst=True, min_val=min_int(left_info.min_val, node.val), max_val=max_int(right_info.max_val, node.val), total=sum_val, best=current_best)
    return Info(is_bst=False, min_val=0, max_val=0, total=0, best=current_best)
def max_sum_bst(nodes, root):
    info = solver(nodes, root)
    return info.best
def main():
    t1_nodes = [Node(val=4, left=1, right=0 - 1), Node(val=3, left=2, right=3), Node(val=1, left=0 - 1, right=0 - 1), Node(val=2, left=0 - 1, right=0 - 1)]
    print(max_sum_bst(t1_nodes, 0))
    t2_nodes = [Node(val=-4, left=1, right=2), Node(val=-2, left=0 - 1, right=0 - 1), Node(val=-5, left=0 - 1, right=0 - 1)]
    print(max_sum_bst(t2_nodes, 0))
    t3_nodes = [Node(val=1, left=1, right=2), Node(val=4, left=3, right=4), Node(val=3, left=5, right=6), Node(val=2, left=0 - 1, right=0 - 1), Node(val=4, left=0 - 1, right=0 - 1), Node(val=2, left=0 - 1, right=0 - 1), Node(val=5, left=7, right=8), Node(val=4, left=0 - 1, right=0 - 1), Node(val=6, left=0 - 1, right=0 - 1)]
    print(max_sum_bst(t3_nodes, 0))
main()
