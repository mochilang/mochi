# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def make_symmetric_tree():
    return [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [4, -1, -1], [3, -1, -1]]
def make_asymmetric_tree():
    return [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [3, -1, -1], [4, -1, -1]]
def is_symmetric_tree(tree):
    stack = [tree[0][1], tree[0][2]]
    while len(stack) >= 2:
        left = stack[len(stack) - 2]
        right = stack[len(stack) - 1]
        stack = stack[0:len(stack) - 2]
        if left == (-1) and right == (-1):
            continue
        if left == (-1) or right == (-1):
            return False
        lnode = tree[left]
        rnode = tree[right]
        if lnode[0] != rnode[0]:
            return False
        stack = _append(stack, lnode[1])
        stack = _append(stack, rnode[2])
        stack = _append(stack, lnode[2])
        stack = _append(stack, rnode[1])
    return True
symmetric_tree = make_symmetric_tree()
asymmetric_tree = make_asymmetric_tree()
print(str(is_symmetric_tree(symmetric_tree)))
print(str(is_symmetric_tree(asymmetric_tree)))
