# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def build(arr, combine):
        n = len(arr)
        st = []
        i = 0
        while i < 2 * n:
            st = _append(st, 0)
            i = i + 1
        i = 0
        while i < n:
            st[n + i] = arr[i]
            i = i + 1
        i = n - 1
        while i > 0:
            st[i] = combine(st[i * 2], st[i * 2 + 1])
            i = i - 1
        return st
    def update(st, n, combine, p, v):
        idx = p + n
        st[idx] = v
        while idx > 1:
            idx = int((idx // 2))
            st[idx] = combine(st[idx * 2], st[idx * 2 + 1])
    def query(st, n, combine, left, right):
        l = left + n
        r = right + n
        res = 0
        has = False
        while l <= r:
            if l % 2 == 1:
                if not has:
                    res = st[l]
                    has = True
                else:
                    res = combine(res, st[l])
                l = l + 1
            if r % 2 == 0:
                if not has:
                    res = st[r]
                    has = True
                else:
                    res = combine(res, st[r])
                r = r - 1
            l = int((l // 2))
            r = int((r // 2))
        return res
    def add(a, b):
        return a + b
    def min_int(a, b):
        if a < b:
            return a
        else:
            return b
    def max_int(a, b):
        if a > b:
            return a
        else:
            return b
    arr1 = [1, 2, 3]
    st1 = build(arr1, add)
    print(_str(query(st1, len(arr1), add, 0, 2)))
    arr2 = [3, 1, 2]
    st2 = build(arr2, min_int)
    print(_str(query(st2, len(arr2), min_int, 0, 2)))
    arr3 = [2, 3, 1]
    st3 = build(arr3, max_int)
    print(_str(query(st3, len(arr3), max_int, 0, 2)))
    arr4 = [1, 5, 7, -1, 6]
    n4 = len(arr4)
    st4 = build(arr4, add)
    update(st4, n4, add, 1, -1)
    update(st4, n4, add, 2, 3)
    print(_str(query(st4, n4, add, 1, 2)))
    print(_str(query(st4, n4, add, 1, 1)))
    update(st4, n4, add, 4, 1)
    print(_str(query(st4, n4, add, 3, 4)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

