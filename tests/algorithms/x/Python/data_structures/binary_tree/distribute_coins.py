# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class TreeNode:
    data: int
    left: int
    right: int

def count_nodes(nodes, idx):
    if idx == 0:
        return 0
    node = nodes[idx]
    return count_nodes(nodes, node.left) + count_nodes(nodes, node.right) + 1
def count_coins(nodes, idx):
    if idx == 0:
        return 0
    node = nodes[idx]
    return count_coins(nodes, node.left) + count_coins(nodes, node.right) + node.data
total_moves = 0
def iabs(x):
    if x < 0:
        return -x
    return x
def dfs(nodes, idx):
    global total_moves
    if idx == 0:
        return 0
    node = nodes[idx]
    left_excess = dfs(nodes, node.left)
    right_excess = dfs(nodes, node.right)
    abs_left = iabs(left_excess)
    abs_right = iabs(right_excess)
    total_moves = total_moves + abs_left + abs_right
    return node.data + left_excess + right_excess - 1
def distribute_coins(nodes, root):
    global total_moves
    if root == 0:
        return 0
    if count_nodes(nodes, root) != count_coins(nodes, root):
        panic("The nodes number should be same as the number of coins")
    total_moves = 0
    dfs(nodes, root)
    return total_moves
def main():
    example1 = [TreeNode(data=0, left=0, right=0), TreeNode(data=3, left=2, right=3), TreeNode(data=0, left=0, right=0), TreeNode(data=0, left=0, right=0)]
    example2 = [TreeNode(data=0, left=0, right=0), TreeNode(data=0, left=2, right=3), TreeNode(data=3, left=0, right=0), TreeNode(data=0, left=0, right=0)]
    example3 = [TreeNode(data=0, left=0, right=0), TreeNode(data=0, left=2, right=3), TreeNode(data=0, left=0, right=0), TreeNode(data=3, left=0, right=0)]
    print(distribute_coins(example1, 1))
    print(distribute_coins(example2, 1))
    print(distribute_coins(example3, 1))
    print(distribute_coins([TreeNode(data=0, left=0, right=0)], 0))
main()
