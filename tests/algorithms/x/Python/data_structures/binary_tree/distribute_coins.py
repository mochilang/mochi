# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

@dataclass
class TreeNode:
    data: int
    left: int
    right: int

def count_nodes(nodes, idx):
    if idx == 0:
        return 0
    node = nodes[idx]
    return count_nodes(nodes, node.left) + count_nodes(nodes, node.right) + 1
def count_coins(nodes, idx):
    if idx == 0:
        return 0
    node = nodes[idx]
    return count_coins(nodes, node.left) + count_coins(nodes, node.right) + node.data
total_moves = 0
def iabs(x):
    if x < 0:
        return -x
    return x
def dfs(nodes, idx):
    global total_moves
    if idx == 0:
        return 0
    node = nodes[idx]
    left_excess = dfs(nodes, node.left)
    right_excess = dfs(nodes, node.right)
    abs_left = iabs(left_excess)
    abs_right = iabs(right_excess)
    total_moves = total_moves + abs_left + abs_right
    return node.data + left_excess + right_excess - 1
def distribute_coins(nodes, root):
    global total_moves
    if root == 0:
        return 0
    if count_nodes(nodes, root) != count_coins(nodes, root):
        panic("The nodes number should be same as the number of coins")
    total_moves = 0
    dfs(nodes, root)
    return total_moves
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        example1 = [TreeNode(data=0, left=0, right=0), TreeNode(data=3, left=2, right=3), TreeNode(data=0, left=0, right=0), TreeNode(data=0, left=0, right=0)]
        example2 = [TreeNode(data=0, left=0, right=0), TreeNode(data=0, left=2, right=3), TreeNode(data=3, left=0, right=0), TreeNode(data=0, left=0, right=0)]
        example3 = [TreeNode(data=0, left=0, right=0), TreeNode(data=0, left=2, right=3), TreeNode(data=0, left=0, right=0), TreeNode(data=3, left=0, right=0)]
        print(distribute_coins(example1, 1))
        print(distribute_coins(example2, 1))
        print(distribute_coins(example3, 1))
        print(distribute_coins([TreeNode(data=0, left=0, right=0)], 0))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

