# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

LABEL = 0
COLOR = 1
PARENT = 2
LEFT = 3
RIGHT = 4
NEG_ONE = -1
@dataclass
class RBTree:
    nodes: List[List[int]]
    root: int

def make_tree():
    return RBTree(nodes=[], root=-1)
def rotate_left(t, x):
    nodes = t.nodes
    y = nodes[x][RIGHT]
    yLeft = nodes[y][LEFT]
    nodes[x][RIGHT] = yLeft
    if yLeft != NEG_ONE:
        nodes[yLeft][PARENT] = x
    xParent = nodes[x][PARENT]
    nodes[y][PARENT] = xParent
    if xParent == NEG_ONE:
        t.root = y
    else:
        if x == nodes[xParent][LEFT]:
            nodes[xParent][LEFT] = y
        else:
            nodes[xParent][RIGHT] = y
    nodes[y][LEFT] = x
    nodes[x][PARENT] = y
    t.nodes = nodes
    return t
def rotate_right(t, x):
    nodes = t.nodes
    y = nodes[x][LEFT]
    yRight = nodes[y][RIGHT]
    nodes[x][LEFT] = yRight
    if yRight != NEG_ONE:
        nodes[yRight][PARENT] = x
    xParent = nodes[x][PARENT]
    nodes[y][PARENT] = xParent
    if xParent == NEG_ONE:
        t.root = y
    else:
        if x == nodes[xParent][RIGHT]:
            nodes[xParent][RIGHT] = y
        else:
            nodes[xParent][LEFT] = y
    nodes[y][RIGHT] = x
    nodes[x][PARENT] = y
    t.nodes = nodes
    return t
def insert_fix(t, z):
    nodes = t.nodes
    while z != t.root and nodes[nodes[z][PARENT]][COLOR] == 1:
        if nodes[z][PARENT] == nodes[nodes[nodes[z][PARENT]][PARENT]][LEFT]:
            y = nodes[nodes[nodes[z][PARENT]][PARENT]][RIGHT]
            if y != NEG_ONE and nodes[y][COLOR] == 1:
                nodes[nodes[z][PARENT]][COLOR] = 0
                nodes[y][COLOR] = 0
                gp = nodes[nodes[z][PARENT]][PARENT]
                nodes[gp][COLOR] = 1
                z = gp
            else:
                if z == nodes[nodes[z][PARENT]][RIGHT]:
                    z = nodes[z][PARENT]
                    t.nodes = nodes
                    t = rotate_left(t, z)
                    nodes = t.nodes
                nodes[nodes[z][PARENT]][COLOR] = 0
                gp = nodes[nodes[z][PARENT]][PARENT]
                nodes[gp][COLOR] = 1
                t.nodes = nodes
                t = rotate_right(t, gp)
                nodes = t.nodes
        else:
            y = nodes[nodes[nodes[z][PARENT]][PARENT]][LEFT]
            if y != NEG_ONE and nodes[y][COLOR] == 1:
                nodes[nodes[z][PARENT]][COLOR] = 0
                nodes[y][COLOR] = 0
                gp = nodes[nodes[z][PARENT]][PARENT]
                nodes[gp][COLOR] = 1
                z = gp
            else:
                if z == nodes[nodes[z][PARENT]][LEFT]:
                    z = nodes[z][PARENT]
                    t.nodes = nodes
                    t = rotate_right(t, z)
                    nodes = t.nodes
                nodes[nodes[z][PARENT]][COLOR] = 0
                gp = nodes[nodes[z][PARENT]][PARENT]
                nodes[gp][COLOR] = 1
                t.nodes = nodes
                t = rotate_left(t, gp)
                nodes = t.nodes
    nodes = t.nodes
    nodes[t.root][COLOR] = 0
    t.nodes = nodes
    return t
def tree_insert(t, v):
    nodes = t.nodes
    node = [v, 1, -1, -1, -1]
    nodes = _append(nodes, node)
    idx = len(nodes) - 1
    y = NEG_ONE
    x = t.root
    while x != NEG_ONE:
        y = x
        if v < nodes[x][LABEL]:
            x = nodes[x][LEFT]
        else:
            x = nodes[x][RIGHT]
    nodes[idx][PARENT] = y
    if y == NEG_ONE:
        t.root = idx
    else:
        if v < nodes[y][LABEL]:
            nodes[y][LEFT] = idx
        else:
            nodes[y][RIGHT] = idx
    t.nodes = nodes
    t = insert_fix(t, idx)
    return t
def inorder(t, x, acc):
    if x == NEG_ONE:
        return acc
    acc = inorder(t, t.nodes[x][LEFT], acc)
    acc = _append(acc, t.nodes[x][LABEL])
    acc = inorder(t, t.nodes[x][RIGHT], acc)
    return acc
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        t = make_tree()
        values = [10, 20, 30, 15, 25, 5, 1]
        i = 0
        while i < len(values):
            t = tree_insert(t, values[i])
            i = i + 1
        res = []
        res = inorder(t, t.root, res)
        print(_str(res))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

