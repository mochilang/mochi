# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

NIL = 0 - 1
node_values = []
node_priors = []
node_lefts = []
node_rights = []
seed = 1
def random():
    global seed
    seed = (seed * 13 + 7) % 100
    return (float(seed)) / 100.0
def new_node(value):
    global node_lefts, node_priors, node_rights, node_values
    node_values = _append(node_values, value)
    node_priors = _append(node_priors, random())
    node_lefts = _append(node_lefts, NIL)
    node_rights = _append(node_rights, NIL)
    return len(node_values) - 1
@dataclass
class SplitResult:
    left: int
    right: int

def split(root, value):
    global node_lefts, node_rights
    if root == NIL:
        return SplitResult(left=NIL, right=NIL)
    if value < node_values[root]:
        res = node_lefts[root].split(value)
        node_lefts = _set_index(node_lefts, root, res.right)
        return SplitResult(left=res.left, right=root)
    res = node_rights[root].split(value)
    node_rights = _set_index(node_rights, root, res.left)
    return SplitResult(left=root, right=res.right)
def merge(left, right):
    global node_lefts, node_rights
    if left == NIL:
        return right
    if right == NIL:
        return left
    if node_priors[left] < node_priors[right]:
        node_rights = _set_index(node_rights, left, merge(node_rights[left], right))
        return left
    node_lefts = _set_index(node_lefts, right, merge(left, node_lefts[right]))
    return right
def insert(root, value):
    node = new_node(value)
    res = root.split(value)
    return merge(merge(res.left, node), res.right)
def erase(root, value):
    res1 = root.split(value - 1)
    res2 = res1.right.split(value)
    return merge(res1.left, res2.right)
def inorder(i, acc):
    if i == NIL:
        return acc
    left_acc = inorder(node_lefts[i], acc)
    with_node = _append(left_acc, node_values[i])
    return inorder(node_rights[i], with_node)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        root = NIL
        root = insert(root, 1)
        print(_str(inorder(root, [])))
        root = insert(root, 3)
        root = insert(root, 5)
        root = insert(root, 17)
        root = insert(root, 19)
        root = insert(root, 2)
        root = insert(root, 16)
        root = insert(root, 4)
        root = insert(root, 0)
        print(_str(inorder(root, [])))
        root = insert(root, 4)
        root = insert(root, 4)
        root = insert(root, 4)
        print(_str(inorder(root, [])))
        root = erase(root, 0)
        print(_str(inorder(root, [])))
        root = erase(root, 4)
        print(_str(inorder(root, [])))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

