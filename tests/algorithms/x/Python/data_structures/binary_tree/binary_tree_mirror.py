# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def binary_tree_mirror_dict(tree, root):
    if (root == 0) or (not (root in tree)):
        return
    children = tree.get(root, [])
    left = children[0]
    right = children[1]
    tree[root] = [right, left]
    binary_tree_mirror_dict(tree, left)
    binary_tree_mirror_dict(tree, right)
def binary_tree_mirror(binary_tree, root):
    if len(binary_tree) == 0:
        panic("binary tree cannot be empty")
    if not (root in binary_tree):
        panic("root " + _str(root) + " is not present in the binary_tree")
    tree_copy = {}
    for k in binary_tree:
        tree_copy[k] = binary_tree.get(k, [])
    binary_tree_mirror_dict(tree_copy, root)
    return tree_copy
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        binary_tree = {1: [2, 3], 2: [4, 5], 3: [6, 7], 7: [8, 9]}
        print("Binary tree: " + _str(binary_tree))
        mirrored = binary_tree_mirror(binary_tree, 1)
        print("Binary tree mirror: " + _str(mirrored))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

