# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def binary_tree_mirror_dict(tree, root):
    if (root == 0) or (not (root in tree)):
        return
    children = tree[root]
    left = children[0]
    right = children[1]
    tree[root] = [right, left]
    binary_tree_mirror_dict(tree, left)
    binary_tree_mirror_dict(tree, right)
def binary_tree_mirror(binary_tree, root):
    if len(binary_tree) == 0:
        panic("binary tree cannot be empty")
    if not (root in binary_tree):
        panic("root " + str(root) + " is not present in the binary_tree")
    tree_copy = {}
    for k in binary_tree:
        tree_copy[k] = binary_tree[k]
    binary_tree_mirror_dict(tree_copy, root)
    return tree_copy
def main():
    binary_tree = {1: [2, 3], 2: [4, 5], 3: [6, 7], 7: [8, 9]}
    print("Binary tree: " + str(binary_tree))
    mirrored = binary_tree_mirror(binary_tree, 1)
    print("Binary tree mirror: " + str(mirrored))
main()
