# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Node:
    data: int
    left: int
    right: int

@dataclass
class TreeState:
    nodes: [Node]
    root: int

def new_node(state, value):
    state.nodes = _append(state.nodes, Node(data=value, left=(-1), right=(-1)))
    return len(state.nodes) - 1
def insert(state, value):
    if state.root == (-1):
        state.root = new_node(state, value)
        return
    current = state.root
    nodes = state.nodes
    while True:
        node = nodes[current]
        if value < node.data:
            if node.left == (-1):
                node.left = new_node(state, value)
                nodes[current] = node
                state.nodes = nodes
                return
            current = node.left
        else:
            if node.right == (-1):
                node.right = new_node(state, value)
                nodes[current] = node
                state.nodes = nodes
                return
            current = node.right
def inorder(state, idx):
    if idx == (-1):
        return []
    node = state.nodes[idx]
    result = inorder(state, node.left)
    result = _append(result, node.data)
    right_part = inorder(state, node.right)
    i = 0
    while i < len(right_part):
        result = _append(result, right_part[i])
        i = i + 1
    return result
def make_tree():
    state = TreeState(nodes=[], root=(-1))
    insert(state, 15)
    insert(state, 10)
    insert(state, 25)
    insert(state, 6)
    insert(state, 14)
    insert(state, 20)
    insert(state, 60)
    return state
def main():
    state = make_tree()
    print("Printing values of binary search tree in Inorder Traversal.")
    print(inorder(state, state.root))
main()
# test inorder traversal
state = make_tree()
assert inorder(state, state.root) == [6, 10, 14, 15, 20, 25, 60]
