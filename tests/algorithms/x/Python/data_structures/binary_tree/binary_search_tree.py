# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def create_node(value):
    return [value, None, None]
def insert(node, value):
    if node == None:
        return create_node(value)
    if value < node[0]:
        node[1] = insert(node[1], value)
    else:
        if value > node[0]:
            node[2] = insert(node[2], value)
    return node
def search(node, value):
    if node == None:
        return False
    if value == node[0]:
        return True
    if value < node[0]:
        return search(node[1], value)
    return search(node[2], value)
def inorder(node, acc):
    if node == None:
        return acc
    left_acc = inorder(node[1], acc)
    with_node = _append(left_acc, node[0])
    return inorder(node[2], with_node)
def find_min(node):
    current = node
    while current[1] != None:
        current = current[1]
    return current[0]
def find_max(node):
    current = node
    while current[2] != None:
        current = current[2]
    return current[0]
def delete(node, value):
    if node == None:
        return None
    if value < node[0]:
        node[1] = delete(node[1], value)
    else:
        if value > node[0]:
            node[2] = delete(node[2], value)
        else:
            if node[1] == None:
                return node[2]
            if node[2] == None:
                return node[1]
            min_val = find_min(node[2])
            node[0] = min_val
            node[2] = delete(node[2], min_val)
    return node
def main():
    root = None
    nums = [8, 3, 6, 1, 10, 14, 13, 4, 7]
    for v in nums:
        root = insert(root, v)
    print(str(inorder(root, [])))
    print(("True" if search(root, 6) else "False"))
    print(("True" if search(root, 20) else "False"))
    print(find_min(root))
    print(find_max(root))
    root = delete(root, 6)
    print(str(inorder(root, [])))
main()
