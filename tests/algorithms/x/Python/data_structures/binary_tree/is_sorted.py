# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

NONE = 0 - 1
@dataclass
class Tree:
    data: [float]
    left: [int]
    right: [int]

def inorder(tree, index):
    res = []
    if index == NONE:
        return res
    left_idx = tree.left[index]
    if left_idx != NONE:
        res = _concat(res, inorder(tree, left_idx))
    res = _append(res, tree.data[index])
    right_idx = tree.right[index]
    if right_idx != NONE:
        res = _concat(res, inorder(tree, right_idx))
    return res
def is_sorted(tree, index):
    if index == NONE:
        return True
    left_idx = tree.left[index]
    if left_idx != NONE:
        if tree.data[index] < tree.data[left_idx]:
            return False
        if not is_sorted(tree, left_idx):
            return False
    right_idx = tree.right[index]
    if right_idx != NONE:
        if tree.data[index] > tree.data[right_idx]:
            return False
        if not is_sorted(tree, right_idx):
            return False
    return True
tree1 = Tree(data=[2.1, 2.0, 2.2], left=[1, NONE, NONE], right=[2, NONE, NONE])
print("Tree " + str(inorder(tree1, 0)) + " is sorted: " + str(is_sorted(tree1, 0)))
tree2 = Tree(data=[2.1, 2.0, 2.0], left=[1, NONE, NONE], right=[2, NONE, NONE])
print("Tree " + str(inorder(tree2, 0)) + " is sorted: " + str(is_sorted(tree2, 0)))
tree3 = Tree(data=[2.1, 2.0, 2.1], left=[1, NONE, NONE], right=[2, NONE, NONE])
print("Tree " + str(inorder(tree3, 0)) + " is sorted: " + str(is_sorted(tree3, 0)))
