# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    NONE = 0 - 1
    @dataclass
    class Tree:
        data: List[float]
        left: List[int]
        right: List[int]
    def inorder(tree, index):
        res = []
        if index == NONE:
            return res
        left_idx = tree.left[index]
        if left_idx != NONE:
            res = _concat(res, inorder(tree, left_idx))
        res = _append(res, tree.data[index])
        right_idx = tree.right[index]
        if right_idx != NONE:
            res = _concat(res, inorder(tree, right_idx))
        return res
    def is_sorted(tree, index):
        if index == NONE:
            return True
        left_idx = tree.left[index]
        if left_idx != NONE:
            if tree.data[index] < tree.data[left_idx]:
                return False
            if not is_sorted(tree, left_idx):
                return False
        right_idx = tree.right[index]
        if right_idx != NONE:
            if tree.data[index] > tree.data[right_idx]:
                return False
            if not is_sorted(tree, right_idx):
                return False
        return True
    tree1 = Tree(data=[2.1, 2.0, 2.2], left=[1, NONE, NONE], right=[2, NONE, NONE])
    print("Tree " + _str(inorder(tree1, 0)) + " is sorted: " + _str(is_sorted(tree1, 0)))
    tree2 = Tree(data=[2.1, 2.0, 2.0], left=[1, NONE, NONE], right=[2, NONE, NONE])
    print("Tree " + _str(inorder(tree2, 0)) + " is sorted: " + _str(is_sorted(tree2, 0)))
    tree3 = Tree(data=[2.1, 2.0, 2.1], left=[1, NONE, NONE], right=[2, NONE, NONE])
    print("Tree " + _str(inorder(tree3, 0)) + " is sorted: " + _str(is_sorted(tree3, 0)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

