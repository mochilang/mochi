# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

@dataclass
class Node:
    key: int
    left: int
    right: int

def inorder(nodes, idx):
    if idx == (-1):
        return []
    node = nodes[idx]
    result = inorder(nodes, node.left)
    result = _append(result, node.key)
    result = _concat(result, inorder(nodes, node.right))
    return result
def floor_ceiling(nodes, idx, key):
    floor_val = None
    ceiling_val = None
    current = idx
    while current != (-1):
        node = nodes[current]
        if node.key == key:
            floor_val = node.key
            ceiling_val = node.key
            break
        if key < node.key:
            ceiling_val = node.key
            current = node.left
        else:
            floor_val = node.key
            current = node.right
    return [floor_val, ceiling_val]
tree = [Node(key=10, left=1, right=2), Node(key=5, left=3, right=4), Node(key=20, left=5, right=6), Node(key=3, left=-1, right=-1), Node(key=7, left=-1, right=-1), Node(key=15, left=-1, right=-1), Node(key=25, left=-1, right=-1)]
print(str(inorder(tree, 0)))
print(str(floor_ceiling(tree, 0, 8)))
print(str(floor_ceiling(tree, 0, 14)))
print(str(floor_ceiling(tree, 0, -1)))
print(str(floor_ceiling(tree, 0, 30)))
