# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Node:
        key: int
        left: int
        right: int
    def inorder(nodes, idx):
        if idx == (-1):
            return []
        node = nodes[idx]
        result = inorder(nodes, node.left)
        result = _append(result, node.key)
        result = _concat(result, inorder(nodes, node.right))
        return result
    def floor_ceiling(nodes, idx, key):
        floor_val = None
        ceiling_val = None
        current = idx
        while current != (-1):
            node = nodes[current]
            if node.key == key:
                floor_val = node.key
                ceiling_val = node.key
                break
            if key < node.key:
                ceiling_val = node.key
                current = node.left
            else:
                floor_val = node.key
                current = node.right
        return [floor_val, ceiling_val]
    tree = [Node(key=10, left=1, right=2), Node(key=5, left=3, right=4), Node(key=20, left=5, right=6), Node(key=3, left=-1, right=-1), Node(key=7, left=-1, right=-1), Node(key=15, left=-1, right=-1), Node(key=25, left=-1, right=-1)]
    print(_str(inorder(tree, 0)))
    print(_str(floor_ceiling(tree, 0, 8)))
    print(_str(floor_ceiling(tree, 0, 14)))
    print(_str(floor_ceiling(tree, 0, -1)))
    print(_str(floor_ceiling(tree, 0, 30)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

