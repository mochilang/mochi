# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

node_data = [0]
left_child = [0]
right_child = [0]
def new_node(value):
    global left_child, node_data, right_child
    node_data = _append(node_data, value)
    left_child = _append(left_child, 0)
    right_child = _append(right_child, 0)
    return len(node_data) - 1
def build_tree():
    root = new_node(1)
    n2 = new_node(2)
    n5 = new_node(5)
    n3 = new_node(3)
    n4 = new_node(4)
    n6 = new_node(6)
    left_child = _set_index(left_child, root, n2)
    right_child = _set_index(right_child, root, n5)
    left_child = _set_index(left_child, n2, n3)
    right_child = _set_index(right_child, n2, n4)
    right_child = _set_index(right_child, n5, n6)
    return root
def flatten(root):
    if root == 0:
        return []
    res = [node_data[root]]
    left_vals = flatten(left_child[root])
    right_vals = flatten(right_child[root])
    i = 0
    while i < len(left_vals):
        res = _append(res, left_vals[i])
        i = i + 1
    i = 0
    while i < len(right_vals):
        res = _append(res, right_vals[i])
        i = i + 1
    return res
def display(values):
    s = ""
    i = 0
    while i < len(values):
        if i == 0:
            s = str(values[i])
        else:
            s = s + " " + str(values[i])
        i = i + 1
    print(s)
print("Flattened Linked List:")
root = build_tree()
vals = flatten(root)
display(vals)
