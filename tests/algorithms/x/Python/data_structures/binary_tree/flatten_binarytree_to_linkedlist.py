# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    node_data = [0]
    left_child = [0]
    right_child = [0]
    def new_node(value):
        global left_child, node_data, right_child
        node_data = _append(node_data, value)
        left_child = _append(left_child, 0)
        right_child = _append(right_child, 0)
        return len(node_data) - 1
    def build_tree():
        global left_child, right_child
        root = new_node(1)
        n2 = new_node(2)
        n5 = new_node(5)
        n3 = new_node(3)
        n4 = new_node(4)
        n6 = new_node(6)
        left_child = _set_index(left_child, root, n2)
        right_child = _set_index(right_child, root, n5)
        left_child = _set_index(left_child, n2, n3)
        right_child = _set_index(right_child, n2, n4)
        right_child = _set_index(right_child, n5, n6)
        return root
    def flatten(root):
        if root == 0:
            return []
        res = [node_data[root]]
        left_vals = flatten(left_child[root])
        right_vals = flatten(right_child[root])
        i = 0
        while i < len(left_vals):
            res = _append(res, left_vals[i])
            i = i + 1
        i = 0
        while i < len(right_vals):
            res = _append(res, right_vals[i])
            i = i + 1
        return res
    def display(values):
        s = ""
        i = 0
        while i < len(values):
            if i == 0:
                s = _str(values[i])
            else:
                s = s + " " + _str(values[i])
            i = i + 1
        print(s)
    print("Flattened Linked List:")
    root = build_tree()
    vals = flatten(root)
    display(vals)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

