# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

NIL = 0 - 1
nodes = []
def new_node(value):
    global nodes
    node = {"data": value, "left": NIL, "right": NIL, "height": 1}
    nodes = _append(nodes, node)
    return len(nodes) - 1
def get_height(i):
    if i == NIL:
        return 0
    return nodes[i].get("height")
def my_max(a, b):
    if a > b:
        return a
    return b
def update_height(i):
    nodes[i]["height"] = my_max(get_height(nodes[i].get("left")), get_height(nodes[i].get("right"))) + 1
def right_rotation(i):
    left = nodes[i].get("left")
    nodes[i]["left"] = nodes[left].get("right")
    nodes[left]["right"] = i
    update_height(i)
    update_height(left)
    return left
def left_rotation(i):
    right = nodes[i].get("right")
    nodes[i]["right"] = nodes[right].get("left")
    nodes[right]["left"] = i
    update_height(i)
    update_height(right)
    return right
def lr_rotation(i):
    nodes[i]["left"] = left_rotation(nodes[i].get("left"))
    return right_rotation(i)
def rl_rotation(i):
    nodes[i]["right"] = right_rotation(nodes[i].get("right"))
    return left_rotation(i)
def insert_node(i, value):
    if i == NIL:
        return new_node(value)
    if value < nodes[i].get("data"):
        nodes[i]["left"] = insert_node(nodes[i].get("left"), value)
        if get_height(nodes[i].get("left")) - get_height(nodes[i].get("right")) == 2:
            if value < nodes[nodes[i].get("left")].get("data"):
                i = right_rotation(i)
            else:
                i = lr_rotation(i)
    else:
        nodes[i]["right"] = insert_node(nodes[i].get("right"), value)
        if get_height(nodes[i].get("right")) - get_height(nodes[i].get("left")) == 2:
            if value < nodes[nodes[i].get("right")].get("data"):
                i = rl_rotation(i)
            else:
                i = left_rotation(i)
    update_height(i)
    return i
def get_left_most(i):
    cur = i
    while nodes[cur].get("left") != NIL:
        cur = nodes[cur].get("left")
    return nodes[cur].get("data")
def del_node(i, value):
    if i == NIL:
        return NIL
    if value < nodes[i].get("data"):
        nodes[i]["left"] = del_node(nodes[i].get("left"), value)
    else:
        if value > nodes[i].get("data"):
            nodes[i]["right"] = del_node(nodes[i].get("right"), value)
        else:
            if nodes[i].get("left") != NIL and nodes[i].get("right") != NIL:
                temp = get_left_most(nodes[i].get("right"))
                nodes[i]["data"] = temp
                nodes[i]["right"] = del_node(nodes[i].get("right"), temp)
            else:
                if nodes[i].get("left") != NIL:
                    i = nodes[i].get("left")
                else:
                    i = nodes[i].get("right")
    if i == NIL:
        return NIL
    lh = get_height(nodes[i].get("left"))
    rh = get_height(nodes[i].get("right"))
    if rh - lh == 2:
        if get_height(nodes[nodes[i].get("right")].get("right")) > get_height(nodes[nodes[i].get("right")].get("left")):
            i = left_rotation(i)
        else:
            i = rl_rotation(i)
    else:
        if lh - rh == 2:
            if get_height(nodes[nodes[i].get("left")].get("left")) > get_height(nodes[nodes[i].get("left")].get("right")):
                i = right_rotation(i)
            else:
                i = lr_rotation(i)
    update_height(i)
    return i
def inorder(i):
    if i == NIL:
        return ""
    left = inorder(nodes[i].get("left"))
    right = inorder(nodes[i].get("right"))
    res = str(nodes[i].get("data"))
    if left != "":
        res = left + " " + res
    if right != "":
        res = res + " " + right
    return res
def main():
    global nodes
    nodes = []
    root = NIL
    root = insert_node(root, 4)
    root = insert_node(root, 2)
    root = insert_node(root, 3)
    print(inorder(root))
    print(str(get_height(root)))
    root = del_node(root, 3)
    print(inorder(root))
main()
