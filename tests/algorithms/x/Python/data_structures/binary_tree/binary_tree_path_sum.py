# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

Empty = None
@dataclass
class Node:
    left: Tree
    value: int
    right: Tree

def dfs(node, target, current):
    return (0 if node == Empty else (((1 if current + v == target else 0)) + dfs(node.left, target, current + node.value) + dfs(node.right, target, current + node.value) if isinstance(node, Node) else None))
def path_sum(node, target):
    return (0 if node == Empty else (dfs(node, target, 0) + path_sum(node.left, target) + path_sum(node.right, target) if isinstance(node, Node) else None))
def sample_tree_one():
    return Node(value=10, left=Node(value=5, left=Node(value=3, left=Node(value=3, left=Empty, right=Empty), right=Node(value=-2, left=Empty, right=Empty)), right=Node(value=2, left=Empty, right=Node(value=1, left=Empty, right=Empty))), right=Node(value=-3, left=Empty, right=Node(value=11, left=Empty, right=Empty)))
def sample_tree_two():
    return Node(value=10, left=Node(value=5, left=Node(value=3, left=Node(value=3, left=Empty, right=Empty), right=Node(value=-2, left=Empty, right=Empty)), right=Node(value=2, left=Empty, right=Node(value=1, left=Empty, right=Empty))), right=Node(value=-3, left=Empty, right=Node(value=10, left=Empty, right=Empty)))
def main():
    tree1 = sample_tree_one()
    print(path_sum(tree1, 8))
    print(path_sum(tree1, 7))
    tree2 = sample_tree_two()
    print(path_sum(tree2, 8))
main()
