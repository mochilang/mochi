# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

Empty = None
@dataclass
class Node:
    left: Tree
    value: int
    right: Tree

def dfs(node, target, current):
    return (0 if node == Empty else (((1 if current + v == target else 0)) + dfs(node.left, target, current + node.value) + dfs(node.right, target, current + node.value) if isinstance(node, Node) else None))
def path_sum(node, target):
    return (0 if node == Empty else (dfs(node, target, 0) + path_sum(node.left, target) + path_sum(node.right, target) if isinstance(node, Node) else None))
def sample_tree_one():
    return Node(value=10, left=Node(value=5, left=Node(value=3, left=Node(value=3, left=Empty, right=Empty), right=Node(value=-2, left=Empty, right=Empty)), right=Node(value=2, left=Empty, right=Node(value=1, left=Empty, right=Empty))), right=Node(value=-3, left=Empty, right=Node(value=11, left=Empty, right=Empty)))
def sample_tree_two():
    return Node(value=10, left=Node(value=5, left=Node(value=3, left=Node(value=3, left=Empty, right=Empty), right=Node(value=-2, left=Empty, right=Empty)), right=Node(value=2, left=Empty, right=Node(value=1, left=Empty, right=Empty))), right=Node(value=-3, left=Empty, right=Node(value=10, left=Empty, right=Empty)))
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        tree1 = sample_tree_one()
        print(path_sum(tree1, 8))
        print(path_sum(tree1, 7))
        tree2 = sample_tree_two()
        print(path_sum(tree2, 8))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

