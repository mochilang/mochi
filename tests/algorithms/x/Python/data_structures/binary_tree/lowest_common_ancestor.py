# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def pow2(exp):
    res = 1
    i = 0
    while i < exp:
        res = res * 2
        i = i + 1
    return res
def create_sparse(max_node, parent):
    j = 1
    while pow2(j) < max_node:
        i = 1
        while i <= max_node:
            parent[j][i] = parent[j - 1][parent[j - 1][i]]
            i = i + 1
        j = j + 1
    return parent
def lowest_common_ancestor(u, v, level, parent):
    if level[u] < level[v]:
        temp = u
        u = v
        v = temp
    i = 18
    while i >= 0:
        if level[u] - pow2(i) >= level[v]:
            u = parent[i][u]
        i = i - 1
    if u == v:
        return u
    i = 18
    while i >= 0:
        pu = parent[i][u]
        pv = parent[i][v]
        if pu != 0 and pu != pv:
            u = pu
            v = pv
        i = i - 1
    return parent[0][u]
def breadth_first_search(level, parent, max_node, graph, root):
    level[root] = 0
    q = []
    q = _append(q, root)
    head = 0
    while head < len(q):
        u = q[head]
        head = head + 1
        adj = graph[u]
        j = 0
        while j < len(adj):
            v = adj[j]
            if level[v] == 0 - 1:
                level[v] = level[u] + 1
                parent[0][v] = u
                q = _append(q, v)
            j = j + 1
def main():
    max_node = 13
    parent = []
    i = 0
    while i < 20:
        row = []
        j = 0
        while j < max_node + 10:
            row = _append(row, 0)
            j = j + 1
        parent = _append(parent, row)
        i = i + 1
    level = []
    i = 0
    while i < max_node + 10:
        level = _append(level, 0 - 1)
        i = i + 1
    graph = {}
    graph[1] = [2, 3, 4]
    graph[2] = [5]
    graph[3] = [6, 7]
    graph[4] = [8]
    graph[5] = [9, 10]
    graph[6] = [11]
    graph[7] = []
    graph[8] = [12, 13]
    graph[9] = []
    graph[10] = []
    graph[11] = []
    graph[12] = []
    graph[13] = []
    breadth_first_search(level, parent, max_node, graph, 1)
    parent = create_sparse(max_node, parent)
    print("LCA of node 1 and 3 is: " + str(lowest_common_ancestor(1, 3, level, parent)))
    print("LCA of node 5 and 6 is: " + str(lowest_common_ancestor(5, 6, level, parent)))
    print("LCA of node 7 and 11 is: " + str(lowest_common_ancestor(7, 11, level, parent)))
    print("LCA of node 6 and 7 is: " + str(lowest_common_ancestor(6, 7, level, parent)))
    print("LCA of node 4 and 12 is: " + str(lowest_common_ancestor(4, 12, level, parent)))
    print("LCA of node 8 and 8 is: " + str(lowest_common_ancestor(8, 8, level, parent)))
main()
