# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class Tree:
        values: List[int]
        lefts: List[int]
        rights: List[int]
        root: int
    NIL = 0 - 1
    def make_tree():
        return Tree(values=[3, 9, 20, 15, 7], lefts=[1, NIL, 3, NIL, NIL], rights=[2, NIL, 4, NIL, NIL], root=0)
    def index_of(xs, x):
        i = 0
        while i < len(xs):
            if xs[i] == x:
                return i
            i = i + 1
        return NIL
    def sort_pairs(hds, vals):
        i = 0
        while i < len(hds):
            j = i
            while j > 0 and hds[j - 1] > hds[j]:
                hd_tmp = hds[j - 1]
                hds[j - 1] = hds[j]
                hds[j] = hd_tmp
                val_tmp = vals[j - 1]
                vals[j - 1] = vals[j]
                vals[j] = val_tmp
                j = j - 1
            i = i + 1
    def right_view(t):
        res = []
        queue = [t.root]
        while len(queue) > 0:
            size = len(queue)
            i = 0
            while i < size:
                idx = queue[i]
                if t.lefts[idx] != NIL:
                    queue = _append(queue, t.lefts[idx])
                if t.rights[idx] != NIL:
                    queue = _append(queue, t.rights[idx])
                i = i + 1
            res = _append(res, t.values[queue[size - 1]])
            queue = queue[size:]
        return res
    def left_view(t):
        res = []
        queue = [t.root]
        while len(queue) > 0:
            size = len(queue)
            i = 0
            while i < size:
                idx = queue[i]
                if t.lefts[idx] != NIL:
                    queue = _append(queue, t.lefts[idx])
                if t.rights[idx] != NIL:
                    queue = _append(queue, t.rights[idx])
                i = i + 1
            res = _append(res, t.values[queue[0]])
            queue = queue[size:]
        return res
    @dataclass
    class Pair:
        idx: int
        hd: int
    def top_view(t):
        hds = []
        vals = []
        queue_idx = [t.root]
        queue_hd = [0]
        while len(queue_idx) > 0:
            idx = queue_idx[0]
            queue_idx = queue_idx[1:]
            hd = queue_hd[0]
            queue_hd = queue_hd[1:]
            if index_of(hds, hd) == NIL:
                hds = _append(hds, hd)
                vals = _append(vals, t.values[idx])
            if t.lefts[idx] != NIL:
                queue_idx = _append(queue_idx, t.lefts[idx])
                queue_hd = _append(queue_hd, hd - 1)
            if t.rights[idx] != NIL:
                queue_idx = _append(queue_idx, t.rights[idx])
                queue_hd = _append(queue_hd, hd + 1)
        sort_pairs(hds, vals)
        return vals
    def bottom_view(t):
        hds = []
        vals = []
        queue_idx = [t.root]
        queue_hd = [0]
        while len(queue_idx) > 0:
            idx = queue_idx[0]
            queue_idx = queue_idx[1:]
            hd = queue_hd[0]
            queue_hd = queue_hd[1:]
            pos = index_of(hds, hd)
            if pos == NIL:
                hds = _append(hds, hd)
                vals = _append(vals, t.values[idx])
            else:
                vals[pos] = t.values[idx]
            if t.lefts[idx] != NIL:
                queue_idx = _append(queue_idx, t.lefts[idx])
                queue_hd = _append(queue_hd, hd - 1)
            if t.rights[idx] != NIL:
                queue_idx = _append(queue_idx, t.rights[idx])
                queue_hd = _append(queue_hd, hd + 1)
        sort_pairs(hds, vals)
        return vals
    tree = make_tree()
    print(right_view(tree))
    print(left_view(tree))
    print(top_view(tree))
    print(bottom_view(tree))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

