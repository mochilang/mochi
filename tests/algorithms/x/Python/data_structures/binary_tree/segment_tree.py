# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

A = []
N = 0
st = []
def left_child(idx):
    return idx * 2
def right_child(idx):
    return idx * 2 + 1
def build(idx, left, right):
    global st
    if left == right:
        st = _set_index(st, idx, A[left])
    else:
        mid = (left + right) // 2
        build(left_child(idx), left, mid)
        build(right_child(idx), mid + 1, right)
        left_val = st[left_child(idx)]
        right_val = st[right_child(idx)]
        st = _set_index(st, idx, (left_val if left_val > right_val else right_val))
def update_recursive(idx, left, right, a, b, val):
    global st
    if right < a or left > b:
        return True
    if left == right:
        st = _set_index(st, idx, val)
        return True
    mid = (left + right) // 2
    update_recursive(left_child(idx), left, mid, a, b, val)
    update_recursive(right_child(idx), mid + 1, right, a, b, val)
    left_val = st[left_child(idx)]
    right_val = st[right_child(idx)]
    st = _set_index(st, idx, (left_val if left_val > right_val else right_val))
    return True
def update(a, b, val):
    return update_recursive(1, 0, N - 1, a - 1, b - 1, val)
NEG_INF = -1000000000
def query_recursive(idx, left, right, a, b):
    if right < a or left > b:
        return NEG_INF
    if left >= a and right <= b:
        return st[idx]
    mid = (left + right) // 2
    q1 = query_recursive(left_child(idx), left, mid, a, b)
    q2 = query_recursive(right_child(idx), mid + 1, right, a, b)
    return (q1 if q1 > q2 else q2)
def query(a, b):
    return query_recursive(1, 0, N - 1, a - 1, b - 1)
def show_data():
    i = 0
    show_list = []
    while i < N:
        show_list = _append(show_list, query(i + 1, i + 1))
        i = i + 1
    print(show_list)
def main():
    global A, N, st
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8]
        N = len(A)
        i = 0
        while i < 4 * N:
            st = _append(st, 0)
            i = i + 1
        if N > 0:
            build(1, 0, N - 1)
        print(query(4, 6))
        print(query(7, 11))
        print(query(7, 12))
        update(1, 3, 111)
        print(query(1, 15))
        update(7, 8, 235)
        show_data()
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

