# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    Leaf = None
    @dataclass
    class Node:
        left: Tree
        value: int
        right: Tree
    def merge_two_binary_trees(t1, t2):
        return (t2 if t1 == Leaf else ((t1 if t2 == Leaf else (Node(left=merge_two_binary_trees(l1, l2), value=v1 + v2, right=merge_two_binary_trees(r1, r2)) if isinstance(t2, Node) else None)) if isinstance(t1, Node) else None))
    def is_leaf(t):
        return (True if t == Leaf else False)
    def get_left(t):
        return (t.left if isinstance(t, Node) else Leaf())
    def get_right(t):
        return (t.right if isinstance(t, Node) else Leaf())
    def get_value(t):
        return (t.value if isinstance(t, Node) else 0)
    def print_preorder(t):
        if not is_leaf(t):
            v = get_value(t)
            l = get_left(t)
            r = get_right(t)
            print(v)
            print_preorder(l)
            print_preorder(r)
    tree1 = Node(left=Node(left=Node(left=Leaf(), value=4, right=Leaf()), value=2, right=Leaf()), value=1, right=Node(left=Leaf(), value=3, right=Leaf()))
    tree2 = Node(left=Node(left=Leaf(), value=4, right=Node(left=Leaf(), value=9, right=Leaf())), value=2, right=Node(left=Leaf(), value=6, right=Node(left=Leaf(), value=5, right=Leaf())))
    print("Tree1 is:")
    print_preorder(tree1)
    print("Tree2 is:")
    print_preorder(tree2)
    merged_tree = merge_two_binary_trees(tree1, tree2)
    print("Merged Tree is:")
    print_preorder(merged_tree)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

