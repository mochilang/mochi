# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

Leaf = None
@dataclass
class Node:
    left: Tree
    value: int
    right: Tree

def merge_two_binary_trees(t1, t2):
    return (t2 if t1 == Leaf else ((t1 if t2 == Leaf else (Node(left=merge_two_binary_trees(l1, l2), value=v1 + v2, right=merge_two_binary_trees(r1, r2)) if isinstance(t2, Node) else None)) if isinstance(t1, Node) else None))
def is_leaf(t):
    return (True if t == Leaf else False)
def get_left(t):
    return (t.left if isinstance(t, Node) else Leaf())
def get_right(t):
    return (t.right if isinstance(t, Node) else Leaf())
def get_value(t):
    return (t.value if isinstance(t, Node) else 0)
def print_preorder(t):
    if not is_leaf(t):
        v = get_value(t)
        l = get_left(t)
        r = get_right(t)
        print(v)
        print_preorder(l)
        print_preorder(r)
tree1 = Node(left=Node(left=Node(left=Leaf(), value=4, right=Leaf()), value=2, right=Leaf()), value=1, right=Node(left=Leaf(), value=3, right=Leaf()))
tree2 = Node(left=Node(left=Leaf(), value=4, right=Node(left=Leaf(), value=9, right=Leaf())), value=2, right=Node(left=Leaf(), value=6, right=Node(left=Leaf(), value=5, right=Leaf())))
print("Tree1 is:")
print_preorder(tree1)
print("Tree2 is:")
print_preorder(tree2)
merged_tree = merge_two_binary_trees(tree1, tree2)
print("Merged Tree is:")
print_preorder(merged_tree)
