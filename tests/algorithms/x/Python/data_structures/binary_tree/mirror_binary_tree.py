# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Tree:
    values: List[int]
    left: List[int]
    right: List[int]
    root: int

def mirror_node(left, right, idx):
    if idx == (-1):
        return
    temp = left[idx]
    left[idx] = right[idx]
    right[idx] = temp
    mirror_node(left, right, left[idx])
    mirror_node(left, right, right[idx])
def mirror(tree):
    mirror_node(tree.left, tree.right, tree.root)
    return tree
def inorder(tree, idx):
    if idx == (-1):
        return []
    left_vals = inorder(tree, tree.left[idx])
    right_vals = inorder(tree, tree.right[idx])
    return _concat(_concat(left_vals, [tree.values[idx]]), right_vals)
def make_tree_zero():
    return Tree(values=[0], left=[-1], right=[-1], root=0)
def make_tree_seven():
    return Tree(values=[1, 2, 3, 4, 5, 6, 7], left=[1, 3, 5, -1, -1, -1, -1], right=[2, 4, 6, -1, -1, -1, -1], root=0)
def make_tree_nine():
    return Tree(values=[1, 2, 3, 4, 5, 6, 7, 8, 9], left=[1, 3, -1, 6, -1, -1, -1, -1, -1], right=[2, 4, 5, 7, 8, -1, -1, -1, -1], root=0)
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        names = ["zero", "seven", "nine"]
        trees = [make_tree_zero(), make_tree_seven(), make_tree_nine()]
        i = 0
        while i < len(trees):
            tree = trees[i]
            print("      The " + names[i] + " tree: " + _str(inorder(tree, tree.root)))
            mirrored = mirror(tree)
            print("Mirror of " + names[i] + " tree: " + _str(inorder(mirrored, mirrored.root)))
            i = i + 1
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))
main()

