# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Tree:
    values: [int]
    left: [int]
    right: [int]
    root: int

def mirror_node(left, right, idx):
    if idx == (-1):
        return
    temp = left[idx]
    left[idx] = right[idx]
    right[idx] = temp
    mirror_node(left, right, left[idx])
    mirror_node(left, right, right[idx])
def mirror(tree):
    mirror_node(tree.left, tree.right, tree.root)
    return tree
def inorder(tree, idx):
    if idx == (-1):
        return []
    left_vals = inorder(tree, tree.left[idx])
    right_vals = inorder(tree, tree.right[idx])
    return _concat(_concat(left_vals, [tree.values[idx]]), right_vals)
def make_tree_zero():
    return Tree(values=[0], left=[-1], right=[-1], root=0)
def make_tree_seven():
    return Tree(values=[1, 2, 3, 4, 5, 6, 7], left=[1, 3, 5, -1, -1, -1, -1], right=[2, 4, 6, -1, -1, -1, -1], root=0)
def make_tree_nine():
    return Tree(values=[1, 2, 3, 4, 5, 6, 7, 8, 9], left=[1, 3, -1, 6, -1, -1, -1, -1, -1], right=[2, 4, 5, 7, 8, -1, -1, -1, -1], root=0)
def main():
    names = ["zero", "seven", "nine"]
    trees = [make_tree_zero(), make_tree_seven(), make_tree_nine()]
    i = 0
    while i < len(trees):
        tree = trees[i]
        print("      The " + names[i] + " tree: " + str(inorder(tree, tree.root)))
        mirrored = mirror(tree)
        print("Mirror of " + names[i] + " tree: " + str(inorder(mirrored, mirrored.root)))
        i = i + 1
main()
