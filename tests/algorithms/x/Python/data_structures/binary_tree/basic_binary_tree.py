# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

@dataclass
class Node:
    data: int
    left: int
    right: int

def inorder(nodes, index, acc):
    if index == 0 - 1:
        return acc
    node = nodes[index]
    res = inorder(nodes, node.left, acc)
    res = _append(res, node.data)
    res = inorder(nodes, node.right, res)
    return res
def size(nodes, index):
    if index == 0 - 1:
        return 0
    node = nodes[index]
    return 1 + size(nodes, node.left) + size(nodes, node.right)
def depth(nodes, index):
    if index == 0 - 1:
        return 0
    node = nodes[index]
    left_depth = depth(nodes, node.left)
    right_depth = depth(nodes, node.right)
    if left_depth > right_depth:
        return left_depth + 1
    return right_depth + 1
def is_full(nodes, index):
    if index == 0 - 1:
        return True
    node = nodes[index]
    if node.left == 0 - 1 and node.right == 0 - 1:
        return True
    if node.left != 0 - 1 and node.right != 0 - 1:
        return is_full(nodes, node.left) and is_full(nodes, node.right)
    return False
def small_tree():
    arr = []
    arr = _append(arr, Node(data=2, left=1, right=2))
    arr = _append(arr, Node(data=1, left=0 - 1, right=0 - 1))
    arr = _append(arr, Node(data=3, left=0 - 1, right=0 - 1))
    return arr
def medium_tree():
    arr = []
    arr = _append(arr, Node(data=4, left=1, right=4))
    arr = _append(arr, Node(data=2, left=2, right=3))
    arr = _append(arr, Node(data=1, left=0 - 1, right=0 - 1))
    arr = _append(arr, Node(data=3, left=0 - 1, right=0 - 1))
    arr = _append(arr, Node(data=5, left=0 - 1, right=5))
    arr = _append(arr, Node(data=6, left=0 - 1, right=6))
    arr = _append(arr, Node(data=7, left=0 - 1, right=0 - 1))
    return arr
small = small_tree()
print(size(small, 0))
print(inorder(small, 0, []))
print(depth(small, 0))
print(("True" if is_full(small, 0) else "False"))
medium = medium_tree()
print(size(medium, 0))
print(inorder(medium, 0, []))
print(depth(medium, 0))
print(("True" if is_full(medium, 0) else "False"))
