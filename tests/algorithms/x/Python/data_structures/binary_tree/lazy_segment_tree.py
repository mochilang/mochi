# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def init_int_array(n):
    arr = []
    i = 0
    while i < 4 * n + 5:
        arr = _append(arr, 0)
        i = i + 1
    return arr
def init_bool_array(n):
    arr = []
    i = 0
    while i < 4 * n + 5:
        arr = _append(arr, False)
        i = i + 1
    return arr
def left(idx):
    return idx * 2
def right(idx):
    return idx * 2 + 1
def build(segment_tree, idx, l, r, a):
    if l == r:
        segment_tree = _set_index(segment_tree, idx, a[l - 1])
    else:
        mid = (l + r) // 2
        build(segment_tree, left(idx), l, mid, a)
        build(segment_tree, right(idx), mid + 1, r, a)
        lv = segment_tree[left(idx)]
        rv = segment_tree[right(idx)]
        if lv > rv:
            segment_tree = _set_index(segment_tree, idx, lv)
        else:
            segment_tree = _set_index(segment_tree, idx, rv)
def update(segment_tree, lazy, flag, idx, l, r, a, b, val):
    if flag[idx]:
        segment_tree = _set_index(segment_tree, idx, lazy[idx])
        flag = _set_index(flag, idx, False)
        if l != r:
            lazy = _set_index(lazy, left(idx), lazy[idx])
            lazy = _set_index(lazy, right(idx), lazy[idx])
            flag = _set_index(flag, left(idx), True)
            flag = _set_index(flag, right(idx), True)
    if r < a or l > b:
        return
    if l >= a and r <= b:
        segment_tree = _set_index(segment_tree, idx, val)
        if l != r:
            lazy = _set_index(lazy, left(idx), val)
            lazy = _set_index(lazy, right(idx), val)
            flag = _set_index(flag, left(idx), True)
            flag = _set_index(flag, right(idx), True)
        return
    mid = (l + r) // 2
    update(segment_tree, lazy, flag, left(idx), l, mid, a, b, val)
    update(segment_tree, lazy, flag, right(idx), mid + 1, r, a, b, val)
    lv = segment_tree[left(idx)]
    rv = segment_tree[right(idx)]
    if lv > rv:
        segment_tree = _set_index(segment_tree, idx, lv)
    else:
        segment_tree = _set_index(segment_tree, idx, rv)
NEG_INF = -1000000000
def query(segment_tree, lazy, flag, idx, l, r, a, b):
    if flag[idx]:
        segment_tree = _set_index(segment_tree, idx, lazy[idx])
        flag = _set_index(flag, idx, False)
        if l != r:
            lazy = _set_index(lazy, left(idx), lazy[idx])
            lazy = _set_index(lazy, right(idx), lazy[idx])
            flag = _set_index(flag, left(idx), True)
            flag = _set_index(flag, right(idx), True)
    if r < a or l > b:
        return NEG_INF
    if l >= a and r <= b:
        return segment_tree[idx]
    mid = (l + r) // 2
    q1 = query(segment_tree, lazy, flag, left(idx), l, mid, a, b)
    q2 = query(segment_tree, lazy, flag, right(idx), mid + 1, r, a, b)
    if q1 > q2:
        return q1
    else:
        return q2
def segtree_to_string(segment_tree, lazy, flag, n):
    res = "["
    i = 1
    while i <= n:
        v = query(segment_tree, lazy, flag, 1, 1, n, i, i)
        res = res + str(v)
        if i < n:
            res = res + ", "
        i = i + 1
    res = res + "]"
    return res
A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8]
n = 15
segment_tree = init_int_array(n)
lazy = init_int_array(n)
flag = init_bool_array(n)
build(segment_tree, 1, 1, n, A)
print(query(segment_tree, lazy, flag, 1, 1, n, 4, 6))
print(query(segment_tree, lazy, flag, 1, 1, n, 7, 11))
print(query(segment_tree, lazy, flag, 1, 1, n, 7, 12))
update(segment_tree, lazy, flag, 1, 1, n, 1, 3, 111)
print(query(segment_tree, lazy, flag, 1, 1, n, 1, 15))
update(segment_tree, lazy, flag, 1, 1, n, 7, 8, 235)
print(segtree_to_string(segment_tree, lazy, flag, n))
