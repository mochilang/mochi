# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def binomial_coefficient(n, k):
        result = 1
        kk = k
        if k > n - k:
            kk = n - k
        for i in range(0, kk):
            result = result * (n - i)
            result = result / (i + 1)
        return result
    def catalan_number(node_count):
        return binomial_coefficient(2 * node_count, node_count) // (node_count + 1)
    def factorial(n):
        if n < 0:
            print("factorial() not defined for negative values")
            return 0
        result = 1
        for i in range(1, (n + 1)):
            result = result * i
        return result
    def binary_tree_count(node_count):
        return catalan_number(node_count) * factorial(node_count)
    print("Enter the number of nodes:")
    input_str = input()
    node_count = int(input_str)
    if node_count <= 0:
        print("We need some nodes to work with.")
    else:
        bst = catalan_number(node_count)
        bt = binary_tree_count(node_count)
        print("Given", node_count, "nodes, there are", bt, "binary trees and", bst, "binary search trees.")
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

