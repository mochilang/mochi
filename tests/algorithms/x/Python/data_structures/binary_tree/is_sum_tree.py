# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

@dataclass
class Node:
    value: int
    left: int
    right: int

def tree_sum(nodes, idx):
    if idx == (-1):
        return 0
    node = nodes[idx]
    return node.value + tree_sum(nodes, node.left) + tree_sum(nodes, node.right)
def is_sum_node(nodes, idx):
    node = nodes[idx]
    if node.left == (-1) and node.right == (-1):
        return True
    left_sum = tree_sum(nodes, node.left)
    right_sum = tree_sum(nodes, node.right)
    if node.value != left_sum + right_sum:
        return False
    left_ok = True
    if node.left != (-1):
        left_ok = is_sum_node(nodes, node.left)
    right_ok = True
    if node.right != (-1):
        right_ok = is_sum_node(nodes, node.right)
    return left_ok and right_ok
def build_a_tree():
    return [Node(value=11, left=1, right=2), Node(value=2, left=3, right=4), Node(value=29, left=5, right=6), Node(value=1, left=(-1), right=(-1)), Node(value=7, left=(-1), right=(-1)), Node(value=15, left=(-1), right=(-1)), Node(value=40, left=7, right=(-1)), Node(value=35, left=(-1), right=(-1))]
def build_a_sum_tree():
    return [Node(value=26, left=1, right=2), Node(value=10, left=3, right=4), Node(value=3, left=(-1), right=5), Node(value=4, left=(-1), right=(-1)), Node(value=6, left=(-1), right=(-1)), Node(value=3, left=(-1), right=(-1))]
# test non sum tree
tree = build_a_tree()
assert is_sum_node(tree, 0) == False
# test sum tree
tree = build_a_sum_tree()
assert is_sum_node(tree, 0) == True
