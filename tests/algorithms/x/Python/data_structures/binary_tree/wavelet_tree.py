# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:12 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Node:
    minn: int
    maxx: int
    map_left: [int]
    left: int
    right: int

nodes = []
def make_list(length, value):
    lst = []
    i = 0
    while i < length:
        lst = _append(lst, value)
        i = i + 1
    return lst
def min_list(arr):
    m = arr[0]
    i = 1
    while i < len(arr):
        if arr[i] < m:
            m = arr[i]
        i = i + 1
    return m
def max_list(arr):
    m = arr[0]
    i = 1
    while i < len(arr):
        if arr[i] > m:
            m = arr[i]
        i = i + 1
    return m
def build_tree(arr):
    global nodes
    n = Node(minn=min_list(arr), maxx=max_list(arr), map_left=make_list(len(arr), 0), left=-1, right=-1)
    if n.minn == n.maxx:
        nodes = _append(nodes, n)
        return len(nodes) - 1
    pivot = (n.minn + n.maxx) // 2
    left_arr = []
    right_arr = []
    i = 0
    while i < len(arr):
        num = arr[i]
        if num <= pivot:
            left_arr = _append(left_arr, num)
        else:
            right_arr = _append(right_arr, num)
        ml = n.map_left
        ml[i] = len(left_arr)
        n.map_left = ml
        i = i + 1
    if len(left_arr) > 0:
        n.left = build_tree(left_arr)
    if len(right_arr) > 0:
        n.right = build_tree(right_arr)
    nodes = _append(nodes, n)
    return len(nodes) - 1
def rank_till_index(node_idx, num, index):
    if index < 0 or node_idx < 0:
        return 0
    node = nodes[node_idx]
    if node.minn == node.maxx:
        if node.minn == num:
            return index + 1
        else:
            return 0
    pivot = (node.minn + node.maxx) // 2
    if num <= pivot:
        return rank_till_index(node.left, num, node.map_left[index] - 1)
    else:
        return rank_till_index(node.right, num, index - node.map_left[index])
def rank(node_idx, num, start, end):
    if start > end:
        return 0
    rank_till_end = rank_till_index(node_idx, num, end)
    rank_before_start = rank_till_index(node_idx, num, start - 1)
    return rank_till_end - rank_before_start
def quantile(node_idx, index, start, end):
    if index > (end - start) or start > end or node_idx < 0:
        return -1
    node = nodes[node_idx]
    if node.minn == node.maxx:
        return node.minn
    left_start = (0 if start == 0 else node.map_left[start - 1])
    num_left = node.map_left[end] - left_start
    if num_left > index:
        return quantile(node.left, index, left_start, node.map_left[end] - 1)
    else:
        return quantile(node.right, index - num_left, start - left_start, end - node.map_left[end])
def range_counting(node_idx, start, end, start_num, end_num):
    if start > end or node_idx < 0 or start_num > end_num:
        return 0
    node = nodes[node_idx]
    if node.minn > end_num or node.maxx < start_num:
        return 0
    if start_num <= node.minn and node.maxx <= end_num:
        return end - start + 1
    left = range_counting(node.left, (0 if start == 0 else node.map_left[start - 1]), node.map_left[end] - 1, start_num, end_num)
    right = range_counting(node.right, start - ((0 if start == 0 else node.map_left[start - 1])), end - node.map_left[end], start_num, end_num)
    return left + right
test_array = [2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7]
root = build_tree(test_array)
print("rank_till_index 6 at 6 -> " + str(rank_till_index(root, 6, 6)))
print("rank 6 in [3,13] -> " + str(rank(root, 6, 3, 13)))
print("quantile index 2 in [2,5] -> " + str(quantile(root, 2, 2, 5)))
print("range_counting [3,7] in [1,10] -> " + str(range_counting(root, 1, 10, 3, 7)))
