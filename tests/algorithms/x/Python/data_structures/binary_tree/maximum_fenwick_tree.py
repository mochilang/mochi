# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def zeros(n):
        res = []
        i = 0
        while i < n:
            res = _append(res, 0)
            i = i + 1
        return res
    def update(arr, idx, value):
        arr = _set_index(arr, idx, value)
    def query(arr, left, right):
        result = 0
        i = left
        while i < right:
            if arr[i] > result:
                result = arr[i]
            i = i + 1
        return result
    arr = [0, 0, 0, 0, 0]
    print(query(arr, 0, 5))
    update(arr, 4, 100)
    print(query(arr, 0, 5))
    update(arr, 4, 0)
    update(arr, 2, 20)
    print(query(arr, 0, 5))
    update(arr, 4, 10)
    print(query(arr, 2, 5))
    print(query(arr, 1, 5))
    update(arr, 2, 0)
    print(query(arr, 0, 5))
    arr = zeros(10000)
    update(arr, 255, 30)
    print(query(arr, 0, 10000))
    arr = zeros(6)
    update(arr, 5, 1)
    print(query(arr, 5, 6))
    arr = zeros(6)
    update(arr, 0, 1000)
    print(query(arr, 0, 1))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

