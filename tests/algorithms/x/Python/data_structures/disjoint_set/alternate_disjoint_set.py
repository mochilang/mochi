# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 22:44 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class DisjointSet:
    set_counts: [int]
    max_set: int
    ranks: [int]
    parents: [int]

def max_list(xs):
    m = xs[0]
    i = 1
    while i < len(xs):
        if xs[i] > m:
            m = xs[i]
        i = i + 1
    return m
def disjoint_set_new(set_counts):
    max_set = max_list(set_counts)
    num_sets = len(set_counts)
    ranks = []
    parents = []
    i = 0
    while i < num_sets:
        ranks = _append(ranks, 1)
        parents = _append(parents, i)
        i = i + 1
    return DisjointSet(set_counts=set_counts, max_set=max_set, ranks=ranks, parents=parents)
def get_parent(ds, idx):
    if ds.parents[idx] == idx:
        return idx
    parents = ds.parents
    parents[idx] = get_parent(ds, parents[idx])
    ds.parents = parents
    return ds.parents[idx]
def merge(ds, src, dst):
    src_parent = get_parent(ds, src)
    dst_parent = get_parent(ds, dst)
    if src_parent == dst_parent:
        return False
    if ds.ranks[dst_parent] >= ds.ranks[src_parent]:
        counts = ds.set_counts
        counts[dst_parent] = counts[dst_parent] + counts[src_parent]
        counts[src_parent] = 0
        ds.set_counts = counts
        parents = ds.parents
        parents[src_parent] = dst_parent
        ds.parents = parents
        if ds.ranks[dst_parent] == ds.ranks[src_parent]:
            ranks = ds.ranks
            ranks[dst_parent] = ranks[dst_parent] + 1
            ds.ranks = ranks
        joined = ds.set_counts[dst_parent]
        if joined > ds.max_set:
            ds.max_set = joined
    else:
        counts = ds.set_counts
        counts[src_parent] = counts[src_parent] + counts[dst_parent]
        counts[dst_parent] = 0
        ds.set_counts = counts
        parents = ds.parents
        parents[dst_parent] = src_parent
        ds.parents = parents
        joined = ds.set_counts[src_parent]
        if joined > ds.max_set:
            ds.max_set = joined
    return True
ds = disjoint_set_new([1, 1, 1])
print(("True" if merge(ds, 1, 2) else "False"))
print(("True" if merge(ds, 0, 2) else "False"))
print(("True" if merge(ds, 0, 1) else "False"))
print(get_parent(ds, 0))
print(get_parent(ds, 1))
print(ds.max_set)
