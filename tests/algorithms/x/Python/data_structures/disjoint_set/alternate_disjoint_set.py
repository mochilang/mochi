# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class DisjointSet:
        set_counts: List[int]
        max_set: int
        ranks: List[int]
        parents: List[int]
    def max_list(xs):
        m = xs[0]
        i = 1
        while i < len(xs):
            if xs[i] > m:
                m = xs[i]
            i = i + 1
        return m
    def disjoint_set_new(set_counts):
        max_set = max_list(set_counts)
        num_sets = len(set_counts)
        ranks = []
        parents = []
        i = 0
        while i < num_sets:
            ranks = _append(ranks, 1)
            parents = _append(parents, i)
            i = i + 1
        return DisjointSet(set_counts=set_counts, max_set=max_set, ranks=ranks, parents=parents)
    def get_parent(ds, idx):
        if ds.parents[idx] == idx:
            return idx
        parents = ds.parents
        parents[idx] = get_parent(ds, parents[idx])
        ds.parents = parents
        return ds.parents[idx]
    def merge(ds, src, dst):
        src_parent = get_parent(ds, src)
        dst_parent = get_parent(ds, dst)
        if src_parent == dst_parent:
            return False
        if ds.ranks[dst_parent] >= ds.ranks[src_parent]:
            counts = ds.set_counts
            counts[dst_parent] = counts[dst_parent] + counts[src_parent]
            counts[src_parent] = 0
            ds.set_counts = counts
            parents = ds.parents
            parents[src_parent] = dst_parent
            ds.parents = parents
            if ds.ranks[dst_parent] == ds.ranks[src_parent]:
                ranks = ds.ranks
                ranks[dst_parent] = ranks[dst_parent] + 1
                ds.ranks = ranks
            joined = ds.set_counts[dst_parent]
            if joined > ds.max_set:
                ds.max_set = joined
        else:
            counts = ds.set_counts
            counts[src_parent] = counts[src_parent] + counts[dst_parent]
            counts[dst_parent] = 0
            ds.set_counts = counts
            parents = ds.parents
            parents[dst_parent] = src_parent
            ds.parents = parents
            joined = ds.set_counts[src_parent]
            if joined > ds.max_set:
                ds.max_set = joined
        return True
    ds = disjoint_set_new([1, 1, 1])
    print(("True" if merge(ds, 1, 2) else "False"))
    print(("True" if merge(ds, 0, 2) else "False"))
    print(("True" if merge(ds, 0, 1) else "False"))
    print(get_parent(ds, 0))
    print(get_parent(ds, 1))
    print(ds.max_set)
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

