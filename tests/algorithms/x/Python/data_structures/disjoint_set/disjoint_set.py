# Code generated by Mochi transpiler.
# Version 0.10.72, generated on 2025-08-24 16:59 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    @dataclass
    class DS:
        parent: List[int]
        rank: List[int]
    @dataclass
    class FindResult:
        ds: DS
        root: int
    def make_set(ds, x):
        p = ds.parent
        r = ds.rank
        p[x] = x
        r[x] = 0
        return DS(parent=p, rank=r)
    def find_set(ds, x):
        if ds.parent[x] == x:
            return FindResult(ds=ds, root=x)
        res = find_set(ds, ds.parent[x])
        p = res.ds.parent
        p[x] = res.root
        return FindResult(ds=DS(parent=p, rank=res.ds.rank), root=res.root)
    def union_set(ds, x, y):
        fx = find_set(ds, x)
        ds1 = fx.ds
        x_root = fx.root
        fy = find_set(ds1, y)
        ds2 = fy.ds
        y_root = fy.root
        if x_root == y_root:
            return ds2
        p = ds2.parent
        r = ds2.rank
        if r[x_root] > r[y_root]:
            p[y_root] = x_root
        else:
            p[x_root] = y_root
            if r[x_root] == r[y_root]:
                r[y_root] = r[y_root] + 1
        return DS(parent=p, rank=r)
    def same_python_set(a, b):
        if a < 3 and b < 3:
            return True
        if a >= 3 and a < 6 and b >= 3 and b < 6:
            return True
        return False
    ds = DS(parent=[], rank=[])
    i = 0
    while i < 6:
        ds.parent = _append(ds.parent, 0)
        ds.rank = _append(ds.rank, 0)
        ds = make_set(ds, i)
        i = i + 1
    ds = union_set(ds, 0, 1)
    ds = union_set(ds, 1, 2)
    ds = union_set(ds, 3, 4)
    ds = union_set(ds, 3, 5)
    i = 0
    while i < 6:
        j = 0
        while j < 6:
            res_i = find_set(ds, i)
            ds = res_i.ds
            root_i = res_i.root
            res_j = find_set(ds, j)
            ds = res_j.ds
            root_j = res_j.root
            same = same_python_set(i, j)
            root_same = root_i == root_j
            if same:
                if not root_same:
                    panic("nodes should be in same set")
            else:
                if root_same:
                    panic("nodes should be in different sets")
            j = j + 1
        i = i + 1
    i = 0
    while i < 6:
        res = find_set(ds, i)
        ds = res.ds
        print(_str(res.root))
        i = i + 1
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

