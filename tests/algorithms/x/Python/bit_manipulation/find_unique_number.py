# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 18:11 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def bit_xor(a, b):
    ua = a
    ub = b
    res = 0
    bit = 1
    while ua > 0 or ub > 0:
        abit = ua % 2
        bbit = ub % 2
        if (abit == 1 and bbit == 0) or (abit == 0 and bbit == 1):
            res = res + bit
        ua = int((ua // 2))
        ub = int((ub // 2))
        bit = bit * 2
    return res
def find_unique_number(arr):
    if len(arr) == 0:
        panic("input list must not be empty")
    result = 0
    for num in arr:
        result = bit_xor(result, num)
    return result
print(str(find_unique_number([1, 1, 2, 2, 3])))
print(str(find_unique_number([4, 5, 4, 6, 6])))
print(str(find_unique_number([7])))
