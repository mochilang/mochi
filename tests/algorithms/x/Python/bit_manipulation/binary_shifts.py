# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 18:11 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def repeat_char(ch, count):
    res = ""
    i = 0
    while i < count:
        res = res + ch
        i = i + 1
    return res
def abs_int(n):
    if n < 0:
        return -n
    return n
def pow2(exp):
    res = 1
    i = 0
    while i < exp:
        res = res * 2
        i = i + 1
    return res
def to_binary_no_prefix(n):
    v = n
    if v < 0:
        v = -v
    if v == 0:
        return "0"
    res = ""
    while v > 0:
        res = str(v % 2) + res
        v = v // 2
    return res
def logical_left_shift(number, shift_amount):
    if number < 0 or shift_amount < 0:
        panic("both inputs must be positive integers")
    binary_number = "0b" + to_binary_no_prefix(number)
    return binary_number + repeat_char("0", shift_amount)
def logical_right_shift(number, shift_amount):
    if number < 0 or shift_amount < 0:
        panic("both inputs must be positive integers")
    binary_number = to_binary_no_prefix(number)
    if shift_amount >= len(binary_number):
        return "0b0"
    shifted = binary_number[0:len(binary_number) - shift_amount]
    return "0b" + shifted
def arithmetic_right_shift(number, shift_amount):
    binary_number = ""
    if number >= 0:
        binary_number = "0" + to_binary_no_prefix(number)
    else:
        length = len(to_binary_no_prefix(-number))
        intermediate = abs_int(number) - pow2(length)
        bin_repr = to_binary_no_prefix(intermediate)
        binary_number = "1" + repeat_char("0", length - len(bin_repr)) + bin_repr
    if shift_amount >= len(binary_number):
        sign = binary_number[0:1]
        return "0b" + repeat_char(sign, len(binary_number))
    sign = binary_number[0:1]
    shifted = binary_number[0:len(binary_number) - shift_amount]
    return "0b" + repeat_char(sign, shift_amount) + shifted
def main():
    print(logical_left_shift(17, 2))
    print(logical_right_shift(1983, 4))
    print(arithmetic_right_shift(-17, 2))
main()
