# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 18:11 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def bit_and(a, b):
    ua = a
    ub = b
    res = 0
    bit = 1
    while ua > 0 or ub > 0:
        if ua % 2 == 1 and ub % 2 == 1:
            res = res + bit
        ua = int((ua // 2))
        ub = int((ub // 2))
        bit = bit * 2
    return res
def count_bits_kernighan(n):
    if n < 0:
        panic("the value of input must not be negative")
    num = n
    result = 0
    while num != 0:
        num = bit_and(num, num - 1)
        result = result + 1
    return result
def count_bits_modulo(n):
    if n < 0:
        panic("the value of input must not be negative")
    num = n
    result = 0
    while num != 0:
        if num % 2 == 1:
            result = result + 1
        num = int((num // 2))
    return result
def main():
    numbers = [25, 37, 21, 58, 0, 256]
    i = 0
    while i < len(numbers):
        print(str(count_bits_kernighan(numbers[i])))
        i = i + 1
    i = 0
    while i < len(numbers):
        print(str(count_bits_modulo(numbers[i])))
        i = i + 1
main()
