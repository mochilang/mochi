# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def pad_left_num(n):
    s = str(n)
    while len(s) < 5:
        s = " " + s
    return s
def to_binary(n):
    sign = ""
    num = n
    if num < 0:
        sign = "-"
        num = 0 - num
    bits = ""
    while num > 0:
        bits = str(num % 2) + bits
        num = (num - (num % 2)) / 2
    if bits == "":
        bits = "0"
    min_width = 8
    while len(bits) < (min_width - len(sign)):
        bits = "0" + bits
    return sign + bits
def show_bits(before, after):
    return pad_left_num(before) + ": " + to_binary(before) + "\n" + pad_left_num(after) + ": " + to_binary(after)
def lshift(num, k):
    result = num
    i = 0
    while i < k:
        result = result * 2
        i = i + 1
    return result
def rshift(num, k):
    result = num
    i = 0
    while i < k:
        result = (result - (result % 2)) // 2
        i = i + 1
    return result
def swap_odd_even_bits(num):
    n = num
    if n < 0:
        n = n + 4294967296
    result = 0
    i = 0
    while i < 32:
        bit1 = rshift(n, i) % 2
        bit2 = rshift(n, i + 1) % 2
        result = result + lshift(bit1, i + 1) + lshift(bit2, i)
        i = i + 2
    return result
def main():
    nums = [-1, 0, 1, 2, 3, 4, 23, 24]
    i = 0
    while i < len(nums):
        n = nums[i]
        print(show_bits(n, swap_odd_even_bits(n)))
        print("")
        i = i + 1
main()
