# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 18:11 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

def repeat_char(ch, times):
    res = ""
    i = 0
    while i < times:
        res = res + ch
        i = i + 1
    return res
def to_binary(n):
    if n == 0:
        return "0"
    res = ""
    v = n
    while v > 0:
        res = str(v % 2) + res
        v = v // 2
    return res
def pow2(exp):
    res = 1
    i = 0
    while i < exp:
        res = res * 2
        i = i + 1
    return res
def twos_complement(number):
    if number > 0:
        panic("input must be a negative integer")
    if number == 0:
        return "0b0"
    abs_number = (-number if number < 0 else number)
    binary_number_length = len(to_binary(abs_number))
    complement_value = pow2(binary_number_length) - abs_number
    complement_binary = to_binary(complement_value)
    padding = repeat_char("0", binary_number_length - len(complement_binary))
    twos_complement_number = "1" + padding + complement_binary
    return "0b" + twos_complement_number
print(twos_complement(0))
print(twos_complement(-1))
print(twos_complement(-5))
print(twos_complement(-17))
print(twos_complement(-207))
