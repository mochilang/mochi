# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def gcd(a, b):
    x = (-a if a < 0 else a)
    y = (-b if b < 0 else b)
    while y != 0:
        t = x % y
        x = y
        y = t
    return x
def extended_gcd(a, b):
    if b == 0:
        return [a, 1, 0]
    res = extended_gcd(b, a % b)
    d = res[0]
    p = res[1]
    q = res[2]
    x = q
    y = p - q * (a // b)
    return [d, x, y]
def diophantine(a, b, c):
    d = gcd(a, b)
    if c % d != 0:
        panic("No solution")
    eg = extended_gcd(a, b)
    r = c // d
    x = eg[1] * r
    y = eg[2] * r
    return [x, y]
def diophantine_all_soln(a, b, c, n):
    base = diophantine(a, b, c)
    x0 = base[0]
    y0 = base[1]
    d = gcd(a, b)
    p = a // d
    q = b // d
    sols = []
    i = 0
    while i < n:
        x = x0 + i * q
        y = y0 - i * p
        sols = _append(sols, [x, y])
        i = i + 1
    return sols
s1 = diophantine(10, 6, 14)
print(str(s1))
sols = diophantine_all_soln(10, 6, 14, 4)
j = 0
while j < len(sols):
    print(str(sols[j]))
    j = j + 1
print(str(diophantine(391, 299, -69)))
print(str(extended_gcd(10, 6)))
print(str(extended_gcd(7, 5)))
