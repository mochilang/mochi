# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

seed = 1
NEG_ONE = -1
def rand():
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483648
    return seed
def randint(a, b):
    r = rand()
    return a + r % (b - a + 1)
def random():
    return (1.0 * rand()) / 2.147483648e+09
def construct_highway(number_of_cells, frequency, initial_speed, random_frequency, random_speed, max_speed):
    row = []
    i = 0
    while i < number_of_cells:
        row = _append(row, -1)
        i = i + 1
    highway = []
    highway = _append(highway, row)
    i = 0
    if initial_speed < 0:
        initial_speed = 0
    while i < number_of_cells:
        speed = initial_speed
        if random_speed:
            speed = randint(0, max_speed)
        highway[0][i] = speed
        step = frequency
        if random_frequency:
            step = randint(1, max_speed * 2)
        i = i + step
    return highway
def get_distance(highway_now, car_index):
    distance = 0
    i = car_index + 1
    while i < len(highway_now):
        if highway_now[i] > NEG_ONE:
            return distance
        distance = distance + 1
        i = i + 1
    return distance + get_distance(highway_now, -1)
def update(highway_now, probability, max_speed):
    number_of_cells = len(highway_now)
    next_highway = []
    i = 0
    while i < number_of_cells:
        next_highway = _append(next_highway, -1)
        i = i + 1
    car_index = 0
    while car_index < number_of_cells:
        speed = highway_now[car_index]
        if speed > NEG_ONE:
            new_speed = speed + 1
            if new_speed > max_speed:
                new_speed = max_speed
            dn = get_distance(highway_now, car_index) - 1
            if new_speed > dn:
                new_speed = dn
            if random() < probability:
                new_speed = new_speed - 1
                if new_speed < 0:
                    new_speed = 0
            next_highway = _set_index(next_highway, car_index, new_speed)
        car_index = car_index + 1
    return next_highway
def simulate(highway, number_of_update, probability, max_speed):
    number_of_cells = len(highway[0])
    i = 0
    while i < number_of_update:
        next_speeds = update(highway[i], probability, max_speed)
        real_next = []
        j = 0
        while j < number_of_cells:
            real_next = _append(real_next, -1)
            j = j + 1
        k = 0
        while k < number_of_cells:
            speed = next_speeds[k]
            if speed > NEG_ONE:
                index = (k + speed) % number_of_cells
                real_next = _set_index(real_next, index, speed)
            k = k + 1
        highway = _append(highway, real_next)
        i = i + 1
    return highway
def main():
    ex1 = simulate(construct_highway(6, 3, 0, False, False, 2), 2, 0.0, 2)
    print(str(ex1))
    ex2 = simulate(construct_highway(5, 2, -2, False, False, 2), 3, 0.0, 2)
    print(str(ex2))
main()
