# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def format_ruleset(ruleset):
    rs = ruleset
    bits_rev = []
    i = 0
    while i < 8:
        bits_rev = _append(bits_rev, rs % 2)
        rs = rs // 2
        i = i + 1
    bits = []
    j = len(bits_rev) - 1
    while j >= 0:
        bits = _append(bits, bits_rev[j])
        j = j - 1
    return bits
def new_generation(cells, rules, time):
    population = len(cells[0])
    next_generation = []
    i = 0
    while i < population:
        left_neighbor = (0 if i == 0 else cells[time][i - 1])
        right_neighbor = (0 if i == population - 1 else cells[time][i + 1])
        center = cells[time][i]
        idx = 7 - (left_neighbor * 4 + center * 2 + right_neighbor)
        next_generation = _append(next_generation, rules[idx])
        i = i + 1
    return next_generation
def cells_to_string(row):
    result = ""
    i = 0
    while i < len(row):
        if row[i] == 1:
            result = result + "#"
        else:
            result = result + "."
        i = i + 1
    return result
initial = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
cells = [initial]
rules = format_ruleset(30)
time = 0
while time < 16:
    next = new_generation(cells, rules, time)
    cells = _append(cells, next)
    time = time + 1
t = 0
while t < len(cells):
    print(cells_to_string(cells[t]))
    t = t + 1
