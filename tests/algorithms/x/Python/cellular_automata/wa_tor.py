# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

WIDTH = 10
HEIGHT = 10
PREY_INITIAL_COUNT = 20
PREY_REPRODUCTION_TIME = 5
PREDATOR_INITIAL_COUNT = 5
PREDATOR_REPRODUCTION_TIME = 20
PREDATOR_INITIAL_ENERGY = 15
PREDATOR_FOOD_VALUE = 5
TYPE_PREY = 0
TYPE_PREDATOR = 1
seed = 123456789
def rand():
    global seed
    seed = (seed * 1103515245 + 12345) % 2147483648
    return seed
def rand_range(max):
    return rand() % max
def shuffle(list_int):
    i = len(list_int) - 1
    while i > 0:
        j = rand_range(i + 1)
        tmp = list_int[i]
        list_int = _set_index(list_int, i, list_int[j])
        list_int = _set_index(list_int, j, tmp)
        i = i - 1
    return list_int
def create_board():
    board = []
    r = 0
    while r < HEIGHT:
        row = []
        c = 0
        while c < WIDTH:
            row = _append(row, 0)
            c = c + 1
        board = _append(board, row)
        r = r + 1
    return board
def create_prey(r, c):
    return [TYPE_PREY, r, c, PREY_REPRODUCTION_TIME, 0, 1]
def create_predator(r, c):
    return [TYPE_PREDATOR, r, c, PREDATOR_REPRODUCTION_TIME, PREDATOR_INITIAL_ENERGY, 1]
board = create_board()
entities = []
def empty_cell(r, c):
    return board[r][c] == 0
def add_entity(typ):
    global entities
    while True:
        r = rand_range(HEIGHT)
        c = rand_range(WIDTH)
        if empty_cell(r, c):
            if typ == TYPE_PREY:
                board[r][c] = 1
                entities = _append(entities, create_prey(r, c))
            else:
                board[r][c] = 2
                entities = _append(entities, create_predator(r, c))
            return
def setup():
    i = 0
    while i < PREY_INITIAL_COUNT:
        add_entity(TYPE_PREY)
        i = i + 1
    i = 0
    while i < PREDATOR_INITIAL_COUNT:
        add_entity(TYPE_PREDATOR)
        i = i + 1
dr = [-1, 0, 1, 0]
dc = [0, 1, 0, -1]
def inside(r, c):
    return r >= 0 and r < HEIGHT and c >= 0 and c < WIDTH
def find_prey(r, c):
    i = 0
    while i < len(entities):
        e = entities[i]
        if e[5] == 1 and e[0] == TYPE_PREY and e[1] == r and e[2] == c:
            return i
        i = i + 1
    return -1
def step_world():
    global entities
    i = 0
    while i < len(entities):
        e = entities[i]
        if e[5] == 0:
            i = i + 1
            continue
        typ = e[0]
        row = e[1]
        col = e[2]
        repro = e[3]
        energy = e[4]
        dirs = [0, 1, 2, 3]
        dirs = shuffle(dirs)
        moved = False
        old_r = row
        old_c = col
        if typ == TYPE_PREDATOR:
            j = 0
            ate = False
            while j < 4:
                d = dirs[j]
                nr = row + dr[d]
                nc = col + dc[d]
                if inside(nr, nc) and board[nr][nc] == 1:
                    prey_index = find_prey(nr, nc)
                    if prey_index >= 0:
                        entities[prey_index][5] = 0
                    board[nr][nc] = 2
                    board[row][col] = 0
                    e = _set_index(e, 1, nr)
                    e = _set_index(e, 2, nc)
                    e = _set_index(e, 4, energy + PREDATOR_FOOD_VALUE - 1)
                    moved = True
                    ate = True
                    break
                j = j + 1
            if not ate:
                j = 0
                while j < 4:
                    d = dirs[j]
                    nr = row + dr[d]
                    nc = col + dc[d]
                    if inside(nr, nc) and board[nr][nc] == 0:
                        board[nr][nc] = 2
                        board[row][col] = 0
                        e = _set_index(e, 1, nr)
                        e = _set_index(e, 2, nc)
                        moved = True
                        break
                    j = j + 1
                e = _set_index(e, 4, energy - 1)
            if e[4] <= 0:
                e = _set_index(e, 5, 0)
                board[e[1]][e[2]] = 0
        else:
            j = 0
            while j < 4:
                d = dirs[j]
                nr = row + dr[d]
                nc = col + dc[d]
                if inside(nr, nc) and board[nr][nc] == 0:
                    board[nr][nc] = 1
                    board[row][col] = 0
                    e = _set_index(e, 1, nr)
                    e = _set_index(e, 2, nc)
                    moved = True
                    break
                j = j + 1
        if e[5] == 1:
            if moved and repro <= 0:
                if typ == TYPE_PREY:
                    board[old_r][old_c] = 1
                    entities = _append(entities, create_prey(old_r, old_c))
                    e = _set_index(e, 3, PREY_REPRODUCTION_TIME)
                else:
                    board[old_r][old_c] = 2
                    entities = _append(entities, create_predator(old_r, old_c))
                    e = _set_index(e, 3, PREDATOR_REPRODUCTION_TIME)
            else:
                e = _set_index(e, 3, repro - 1)
        i = i + 1
    alive = []
    k = 0
    while k < len(entities):
        e2 = entities[k]
        if e2[5] == 1:
            alive = _append(alive, e2)
        k = k + 1
    entities = alive
def count_entities(typ):
    cnt = 0
    i = 0
    while i < len(entities):
        if entities[i][0] == typ and entities[i][5] == 1:
            cnt = cnt + 1
        i = i + 1
    return cnt
setup()
t = 0
while t < 10:
    step_world()
    t = t + 1
print("Prey: " + str(count_entities(TYPE_PREY)))
print("Predators: " + str(count_entities(TYPE_PREDATOR)))
