# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:44 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def count_alive_neighbours(board, row, col):
    size = len(board)
    alive = 0
    dr = -1
    while dr < 2:
        dc = -1
        while dc < 2:
            nr = row + dr
            nc = col + dc
            if not (dr == 0 and dc == 0) and nr >= 0 and nr < size and nc >= 0 and nc < size:
                if board[nr][nc]:
                    alive = alive + 1
            dc = dc + 1
        dr = dr + 1
    return alive
def next_state(current, alive):
    state = current
    if current:
        if alive < 2:
            state = False
        else:
            if alive == 2 or alive == 3:
                state = True
            else:
                state = False
    else:
        if alive == 3:
            state = True
    return state
def step(board):
    size = len(board)
    new_board = []
    r = 0
    while r < size:
        new_row = []
        c = 0
        while c < size:
            alive = count_alive_neighbours(board, r, c)
            cell = board[r][c]
            updated = next_state(cell, alive)
            new_row = _append(new_row, updated)
            c = c + 1
        new_board = _append(new_board, new_row)
        r = r + 1
    return new_board
def show(board):
    r = 0
    while r < len(board):
        line = ""
        c = 0
        while c < len(board[r]):
            if board[r][c]:
                line = line + "#"
            else:
                line = line + "."
            c = c + 1
        print(line)
        r = r + 1
glider = [[False, True, False, False, False], [False, False, True, False, False], [True, True, True, False, False], [False, False, False, False, False], [False, False, False, False, False]]
board = glider
print("Initial")
show(board)
i = 0
while i < 4:
    board = step(board)
    print("\nStep " + str(i + 1))
    show(board)
    i = i + 1
