# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 17:33 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def create_board(n):
        board = []
        i = 0
        while i < n:
            row = []
            j = 0
            while j < n:
                row = _append(row, 0)
                j = j + 1
            board = _append(board, row)
            i = i + 1
        return board
    def is_safe(board, row, column):
        n = len(board)
        i = 0
        while i < row:
            if board[i][column] == 1:
                return False
            i = i + 1
        i = row - 1
        j = column - 1
        while i >= 0 and j >= 0:
            if board[i][j] == 1:
                return False
            i = i - 1
            j = j - 1
        i = row - 1
        j = column + 1
        while i >= 0 and j < n:
            if board[i][j] == 1:
                return False
            i = i - 1
            j = j + 1
        return True
    def row_string(row):
        s = ""
        j = 0
        while j < len(row):
            if row[j] == 1:
                s = s + "Q "
            else:
                s = s + ". "
            j = j + 1
        return s
    def printboard(board):
        i = 0
        while i < len(board):
            print(row_string(board[i]))
            i = i + 1
    def solve(board, row):
        if row >= len(board):
            printboard(board)
            print("")
            return 1
        count = 0
        i = 0
        while i < len(board):
            if is_safe(board, row, i):
                board[row][i] = 1
                count = count + solve(board, row + 1)
                board[row][i] = 0
            i = i + 1
        return count
    def n_queens(n):
        board = create_board(n)
        total = solve(board, 0)
        print("The total number of solutions are: " + str(total))
        return total
    n_queens(4)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
