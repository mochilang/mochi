# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 18:11 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def repeat_bool(times):
    res = []
    i = 0
    while i < times:
        res = _append(res, False)
        i = i + 1
    return res
def set_bool(xs, idx, value):
    res = []
    i = 0
    while i < len(xs):
        if i == idx:
            res = _append(res, value)
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def create_state_space_tree(sequence, current, index, used):
    if index == len(sequence):
        print(str(current))
        return
    i = 0
    while i < len(sequence):
        if not used[i]:
            next_current = _append(current, sequence[i])
            next_used = set_bool(used, i, True)
            create_state_space_tree(sequence, next_current, index + 1, next_used)
        i = i + 1
def generate_all_permutations(sequence):
    used = repeat_bool(len(sequence))
    create_state_space_tree(sequence, [], 0, used)
sequence = [3, 1, 2, 4]
generate_all_permutations(sequence)
sequence_2 = ["A", "B", "C"]
generate_all_permutations(sequence_2)
