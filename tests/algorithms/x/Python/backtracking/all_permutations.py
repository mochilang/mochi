# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 17:33 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def repeat_bool(times):
        res = []
        i = 0
        while i < times:
            res = _append(res, False)
            i = i + 1
        return res
    def set_bool(xs, idx, value):
        res = []
        i = 0
        while i < len(xs):
            if i == idx:
                res = _append(res, value)
            else:
                res = _append(res, xs[i])
            i = i + 1
        return res
    def create_state_space_tree(sequence, current, index, used):
        if index == len(sequence):
            print(str(current))
            return
        i = 0
        while i < len(sequence):
            if not used[i]:
                next_current = _append(current, sequence[i])
                next_used = set_bool(used, i, True)
                create_state_space_tree(sequence, next_current, index + 1, next_used)
            i = i + 1
    def generate_all_permutations(sequence):
        used = repeat_bool(len(sequence))
        create_state_space_tree(sequence, [], 0, used)
    sequence = [3, 1, 2, 4]
    generate_all_permutations(sequence)
    sequence_2 = ["A", "B", "C"]
    generate_all_permutations(sequence_2)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
