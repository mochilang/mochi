# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 17:33 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def contains(xs, x):
    i = 0
    while i < len(xs):
        if xs[i] == x:
            return True
        i = i + 1
    return False
def get_point_key(len_board, len_board_column, row, column):
    return len_board * len_board_column * row + column
def search_from(board, word, row, column, word_index, visited):
    if board[row][column] != word[word_index:word_index + 1]:
        return False
    if word_index == len(word) - 1:
        return True
    len_board = len(board)
    len_board_column = len(board[0])
    dir_i = [0, 0, -1, 1]
    dir_j = [1, -1, 0, 0]
    k = 0
    while k < 4:
        next_i = row + dir_i[k]
        next_j = column + dir_j[k]
        if not (0 <= next_i and next_i < len_board and 0 <= next_j and next_j < len_board_column):
            k = k + 1
            continue
        key = get_point_key(len_board, len_board_column, next_i, next_j)
        if key in visited:
            k = k + 1
            continue
        new_visited = _append(visited, key)
        if search_from(board, word, next_i, next_j, word_index + 1, new_visited):
            return True
        k = k + 1
    return False
def word_exists(board, word):
    len_board = len(board)
    len_board_column = len(board[0])
    i = 0
    while i < len_board:
        j = 0
        while j < len_board_column:
            key = get_point_key(len_board, len_board_column, i, j)
            visited = _append([], key)
            if search_from(board, word, i, j, 0, visited):
                return True
            j = j + 1
        i = i + 1
    return False
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        board = [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]]
        print(("True" if word_exists(board, "ABCCED") else "False"))
        print(("True" if word_exists(board, "SEE") else "False"))
        print(("True" if word_exists(board, "ABCB") else "False"))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
