# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:35 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def valid_connection(graph, next_ver, curr_ind, path):
    if graph[path[curr_ind - 1]][next_ver] == 0:
        return False
    for v in path:
        if v == next_ver:
            return False
    return True
def util_hamilton_cycle(graph, path, curr_ind):
    if curr_ind == len(graph):
        return graph[path[curr_ind - 1]][path[0]] == 1
    next_ver = 0
    while next_ver < len(graph):
        if valid_connection(graph, next_ver, curr_ind, path):
            path = _set_index(path, curr_ind, next_ver)
            if util_hamilton_cycle(graph, path, curr_ind + 1):
                return True
            path = _set_index(path, curr_ind, -1)
        next_ver = next_ver + 1
    return False
def hamilton_cycle(graph, start_index):
    path = []
    i = 0
    while i < len(graph) + 1:
        path = _set_index(path, i, -1)
        i = i + 1
    path = _set_index(path, 0, start_index)
    last = len(path) - 1
    path = _set_index(path, last, start_index)
    if util_hamilton_cycle(graph, path, 1):
        return path
    return []
# test case 1
graph = [[0, 1, 0, 1, 0], [1, 0, 1, 1, 1], [0, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 1, 1, 1, 0]]
assert hamilton_cycle(graph, 0) == [0, 1, 2, 4, 3, 0]
# test case 2
graph = [[0, 1, 0, 1, 0], [1, 0, 1, 1, 1], [0, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 1, 1, 1, 0]]
assert hamilton_cycle(graph, 3) == [3, 0, 1, 2, 4, 3]
# test case 3
graph = [[0, 1, 0, 1, 0], [1, 0, 1, 1, 1], [0, 1, 0, 0, 1], [1, 1, 0, 0, 0], [0, 1, 1, 0, 0]]
assert hamilton_cycle(graph, 4) == []
