# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 18:11 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def valid_coloring(neighbours, colored_vertices, color):
    i = 0
    while i < len(neighbours):
        if neighbours[i] == 1 and colored_vertices[i] == color:
            return False
        i = i + 1
    return True
def util_color(graph, max_colors, colored_vertices, index):
    if index == len(graph):
        return True
    c = 0
    while c < max_colors:
        if valid_coloring(graph[index], colored_vertices, c):
            colored_vertices = _set_index(colored_vertices, index, c)
            if util_color(graph, max_colors, colored_vertices, index + 1):
                return True
            colored_vertices = _set_index(colored_vertices, index, -1)
        c = c + 1
    return False
def color(graph, max_colors):
    colored_vertices = []
    i = 0
    while i < len(graph):
        colored_vertices = _append(colored_vertices, -1)
        i = i + 1
    if util_color(graph, max_colors, colored_vertices, 0):
        return colored_vertices
    return []
graph = [[0, 1, 0, 0, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0]]
print(color(graph, 3))
print("\n")
print(len(color(graph, 2)))
