# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 17:33 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def valid_coloring(neighbours, colored_vertices, color):
        i = 0
        while i < len(neighbours):
            if neighbours[i] == 1 and colored_vertices[i] == color:
                return False
            i = i + 1
        return True
    def util_color(graph, max_colors, colored_vertices, index):
        if index == len(graph):
            return True
        c = 0
        while c < max_colors:
            if valid_coloring(graph[index], colored_vertices, c):
                colored_vertices = _set_index(colored_vertices, index, c)
                if util_color(graph, max_colors, colored_vertices, index + 1):
                    return True
                colored_vertices = _set_index(colored_vertices, index, -1)
            c = c + 1
        return False
    def color(graph, max_colors):
        colored_vertices = []
        i = 0
        while i < len(graph):
            colored_vertices = _append(colored_vertices, -1)
            i = i + 1
        if util_color(graph, max_colors, colored_vertices, 0):
            return colored_vertices
        return []
    graph = [[0, 1, 0, 0, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0]]
    print(color(graph, 3))
    print("\n")
    print(len(color(graph, 2)))
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
