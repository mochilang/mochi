# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:35 +0700
import json

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def sum_list(nums):
    s = 0
    for n in nums:
        s = s + n
    return s
def create_state_space_tree(nums, max_sum, num_index, path, curr_sum, remaining_sum):
    result = []
    if curr_sum > max_sum or curr_sum + remaining_sum < max_sum:
        return result
    if curr_sum == max_sum:
        result = _append(result, path)
        return result
    index = num_index
    while index < len(nums):
        value = nums[index]
        subres = create_state_space_tree(nums, max_sum, index + 1, _append(path, value), curr_sum + value, remaining_sum - value)
        j = 0
        while j < len(subres):
            result = _append(result, subres[j])
            j = j + 1
        index = index + 1
    return result
def generate_sum_of_subsets_solutions(nums, max_sum):
    total = sum_list(nums)
    return create_state_space_tree(nums, max_sum, 0, [], 0, total)
def main():
    print(json.dumps(generate_sum_of_subsets_solutions([3, 34, 4, 12, 5, 2], 9), indent=2))
main()
