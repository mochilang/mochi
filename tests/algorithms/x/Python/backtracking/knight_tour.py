# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 15:56 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def get_valid_pos(position, n):
    y = position[0]
    x = position[1]
    positions = [[y + 1, x + 2], [y - 1, x + 2], [y + 1, x - 2], [y - 1, x - 2], [y + 2, x + 1], [y + 2, x - 1], [y - 2, x + 1], [y - 2, x - 1]]
    permissible = []
    for idx in range(0, len(positions)):
        inner = positions[idx]
        y_test = inner[0]
        x_test = inner[1]
        if y_test >= 0 and y_test < n and x_test >= 0 and x_test < n:
            permissible = _append(permissible, inner)
    return permissible
def is_complete(board):
    for i in range(0, len(board)):
        row = board[i]
        for j in range(0, len(row)):
            if row[j] == 0:
                return False
    return True
def open_knight_tour_helper(board, pos, curr):
    if is_complete(board):
        return True
    moves = get_valid_pos(pos, len(board))
    for i in range(0, len(moves)):
        position = moves[i]
        y = position[0]
        x = position[1]
        if board[y][x] == 0:
            board[y][x] = curr + 1
            if open_knight_tour_helper(board, position, curr + 1):
                return True
            board[y][x] = 0
    return False
def open_knight_tour(n):
    board = []
    for i in range(0, n):
        row = []
        for j in range(0, n):
            row = _append(row, 0)
        board = _append(board, row)
    for i in range(0, n):
        for j in range(0, n):
            board[i][j] = 1
            if open_knight_tour_helper(board, [i, j], 1):
                return board
            board[i][j] = 0
    print("Open Knight Tour cannot be performed on a board of size " + str(n))
    return board
board = open_knight_tour(1)
print(board[0][0])
