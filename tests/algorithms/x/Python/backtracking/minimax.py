# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 17:33 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

def minimax(depth, node_index, is_max, scores, height):
    if depth < 0:
        panic("Depth cannot be less than 0")
    if len(scores) == 0:
        panic("Scores cannot be empty")
    if depth == height:
        return scores[node_index]
    if is_max:
        left = minimax(depth + 1, node_index * 2, False, scores, height)
        right = minimax(depth + 1, node_index * 2 + 1, False, scores, height)
        if left > right:
            return left
        else:
            return right
    left = minimax(depth + 1, node_index * 2, True, scores, height)
    right = minimax(depth + 1, node_index * 2 + 1, True, scores, height)
    if left < right:
        return left
    else:
        return right
def tree_height(n):
    h = 0
    v = n
    while v > 1:
        v = v // 2
        h = h + 1
    return h
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        scores = [90, 23, 6, 33, 21, 65, 123, 34423]
        height = tree_height(len(scores))
        print("Optimal value : " + str(minimax(0, 0, True, scores, height)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
