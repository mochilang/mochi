# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 17:33 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def get_value(keys, values, key):
    i = 0
    while i < len(keys):
        if keys[i] == key:
            return values[i]
        i = i + 1
    return None
def contains_value(values, value):
    i = 0
    while i < len(values):
        if values[i] == value:
            return True
        i = i + 1
    return False
def backtrack(pattern, input_string, pi, si, keys, values):
    if pi == len(pattern) and si == len(input_string):
        return True
    if pi == len(pattern) or si == len(input_string):
        return False
    ch = pattern[pi:pi + 1]
    mapped = get_value(keys, values, ch)
    if mapped != None:
        if input_string[si:si + len(mapped)] == mapped:
            return backtrack(pattern, input_string, pi + 1, si + len(mapped), keys, values)
        return False
    end = si + 1
    while end <= len(input_string):
        substr = input_string[si:end]
        if contains_value(values, substr):
            end = end + 1
            continue
        new_keys = _append(keys, ch)
        new_values = _append(values, substr)
        if backtrack(pattern, input_string, pi + 1, end, new_keys, new_values):
            return True
        end = end + 1
    return False
def match_word_pattern(pattern, input_string):
    keys = []
    values = []
    return backtrack(pattern, input_string, 0, 0, keys, values)
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        print(("True" if match_word_pattern("aba", "GraphTreesGraph") else "False"))
        print(("True" if match_word_pattern("xyx", "PythonRubyPython") else "False"))
        print(("True" if match_word_pattern("GG", "PythonJavaPython") else "False"))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
