# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 16:21 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _set_index(lst, i, v):
    if isinstance(lst, dict):
        lst[i] = v
        return lst
    if lst is None:
        lst = []
    if i >= len(lst):
        lst.extend([None] * (i - len(lst) + 1))
    lst[i] = v
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def is_valid(puzzle, word, row, col, vertical):
        for i in range(0, len(word)):
            if vertical:
                if row + i >= len(puzzle) or puzzle[row + i][col] != "":
                    return False
            else:
                if col + i >= len(puzzle[0]) or puzzle[row][col + i] != "":
                    return False
        return True
    def place_word(puzzle, word, row, col, vertical):
        for i in range(0, len(word)):
            ch = word[i]
            if vertical:
                _set_index(puzzle[row + i], col, ch)
            else:
                _set_index(puzzle[row], col + i, ch)
    def remove_word(puzzle, word, row, col, vertical):
        for i in range(0, len(word)):
            if vertical:
                _set_index(puzzle[row + i], col, "")
            else:
                _set_index(puzzle[row], col + i, "")
    def solve_crossword(puzzle, words, used):
        for row in range(0, len(puzzle)):
            for col in range(0, len(puzzle[0])):
                if puzzle[row][col] == "":
                    for i in range(0, len(words)):
                        if not used[i]:
                            word = words[i]
                            for vertical in [True, False]:
                                if is_valid(puzzle, word, row, col, vertical):
                                    place_word(puzzle, word, row, col, vertical)
                                    _set_index(used, i, True)
                                    if solve_crossword(puzzle, words, used):
                                        return True
                                    _set_index(used, i, False)
                                    remove_word(puzzle, word, row, col, vertical)
                    return False
        return True
    puzzle = [["", "", ""], ["", "", ""], ["", "", ""]]
    words = ["cat", "dog", "car"]
    used = [False, False, False]
    if solve_crossword(puzzle, words, used):
        print("Solution found:")
        for row in puzzle:
            print(row)
    else:
        print("No solution found:")
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
