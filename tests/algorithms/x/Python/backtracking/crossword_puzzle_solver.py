# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:35 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def is_valid(puzzle, word, row, col, vertical):
    for i in range(0, len(word)):
        if vertical:
            if row + i >= len(puzzle) or puzzle[row + i][col] != "":
                return False
        else:
            if col + i >= len(puzzle[0]) or puzzle[row][col + i] != "":
                return False
    return True
def place_word(puzzle, word, row, col, vertical):
    for i in range(0, len(word)):
        ch = word[i]
        if vertical:
            puzzle[row + i][col] = ch
        else:
            puzzle[row][col + i] = ch
def remove_word(puzzle, word, row, col, vertical):
    for i in range(0, len(word)):
        if vertical:
            puzzle[row + i][col] = ""
        else:
            puzzle[row][col + i] = ""
def solve_crossword(puzzle, words, used):
    for row in range(0, len(puzzle)):
        for col in range(0, len(puzzle[0])):
            if puzzle[row][col] == "":
                for i in range(0, len(words)):
                    if not used[i]:
                        word = words[i]
                        for vertical in [True, False]:
                            if is_valid(puzzle, word, row, col, vertical):
                                place_word(puzzle, word, row, col, vertical)
                                used = _set_index(used, i, True)
                                if solve_crossword(puzzle, words, used):
                                    return True
                                used = _set_index(used, i, False)
                                remove_word(puzzle, word, row, col, vertical)
                return False
    return True
puzzle = [["", "", ""], ["", "", ""], ["", "", ""]]
words = ["cat", "dog", "car"]
used = [False, False, False]
if solve_crossword(puzzle, words, used):
    print("Solution found:")
    for row in puzzle:
        print(row)
else:
    print("No solution found:")
