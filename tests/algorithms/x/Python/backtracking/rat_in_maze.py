# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:35 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def run_maze(maze, i, j, dr, dc, sol):
    size = len(maze)
    if i == dr and j == dc and maze[i][j] == 0:
        sol[i][j] = 0
        return True
    lower_flag = (i >= 0) and (j >= 0)
    upper_flag = (i < size) and (j < size)
    if lower_flag and upper_flag:
        block_flag = (sol[i][j] == 1) and (maze[i][j] == 0)
        if block_flag:
            sol[i][j] = 0
            if run_maze(maze, i + 1, j, dr, dc, sol) or run_maze(maze, i, j + 1, dr, dc, sol) or run_maze(maze, i - 1, j, dr, dc, sol) or run_maze(maze, i, j - 1, dr, dc, sol):
                return True
            sol[i][j] = 1
            return False
    return False
def solve_maze(maze, sr, sc, dr, dc):
    size = len(maze)
    if not (0 <= sr and sr < size and 0 <= sc and sc < size and 0 <= dr and dr < size and 0 <= dc and dc < size):
        panic("Invalid source or destination coordinates")
    sol = []
    i = 0
    while i < size:
        row = []
        j = 0
        while j < size:
            row = _append(row, 1)
            j = j + 1
        sol = _append(sol, row)
        i = i + 1
    solved = run_maze(maze, sr, sc, dr, dc, sol)
    if solved:
        return sol
    else:
        panic("No solution exists!")
maze = [[0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [0, 0, 1, 0, 0], [1, 0, 0, 1, 0]]
n = len(maze) - 1
print(str(solve_maze(maze, 0, 0, n, n)))
