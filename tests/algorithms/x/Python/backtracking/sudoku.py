# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 16:35 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def is_safe(grid, row, column, n):
        for i in range(0, 9):
            if grid[row][i] == n or grid[i][column] == n:
                return False
        for i in range(0, 3):
            for j in range(0, 3):
                if grid[(row - row % 3) + i][(column - column % 3) + j] == n:
                    return False
        return True
    def find_empty_location(grid):
        for i in range(0, 9):
            for j in range(0, 9):
                if grid[i][j] == 0:
                    return [i, j]
        return []
    def sudoku(grid):
        loc = find_empty_location(grid)
        if len(loc) == 0:
            return True
        row = loc[0]
        column = loc[1]
        for digit in range(1, 10):
            if is_safe(grid, row, column, digit):
                grid[row][column] = digit
                if sudoku(grid):
                    return True
                grid[row][column] = 0
        return False
    def print_solution(grid):
        for r in range(0, len(grid)):
            line = ""
            for c in range(0, len(grid[r])):
                line = line + str(grid[r][c])
                if c < len(grid[r]) - 1:
                    line = line + " "
            print(line)
    initial_grid = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]
    no_solution = [[5, 0, 6, 5, 0, 8, 4, 0, 3], [5, 2, 0, 0, 0, 0, 0, 0, 2], [1, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]
    examples = [initial_grid, no_solution]
    idx = 0
    while idx < len(examples):
        print("\nExample grid:\n====================")
        print_solution(examples[idx])
        print("\nExample grid solution:")
        if sudoku(examples[idx]):
            print_solution(examples[idx])
        else:
            print("Cannot find a solution.")
        idx = idx + 1
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
