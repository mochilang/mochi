# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 17:33 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

alphabet = "abcdefghijklmnopqrstuvwxyz"
def contains(xs, x):
    i = 0
    while i < len(xs):
        if xs[i] == x:
            return True
        i = i + 1
    return False
def remove_item(xs, x):
    res = []
    removed = False
    i = 0
    while i < len(xs):
        if not removed and xs[i] == x:
            removed = True
        else:
            res = _append(res, xs[i])
        i = i + 1
    return res
def word_ladder(current, path, target, words):
    if current == target:
        return path
    i = 0
    while i < len(current):
        j = 0
        while j < len(alphabet):
            c = alphabet[j:j + 1]
            transformed = current[0:i] + c + current[i + 1:len(current)]
            if transformed in words:
                new_words = remove_item(words, transformed)
                new_path = _append(path, transformed)
                result = word_ladder(transformed, new_path, target, new_words)
                if len(result) > 0:
                    return result
            j = j + 1
        i = i + 1
    return []
def main():
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    _bench_start = _now()
    try:
        w1 = ["hot", "dot", "dog", "lot", "log", "cog"]
        print(str(word_ladder("hit", ["hit"], "cog", w1)))
        w2 = ["hot", "dot", "dog", "lot", "log"]
        print(str(word_ladder("hit", ["hit"], "cog", w2)))
        w3 = ["load", "goad", "gold", "lead", "lord"]
        print(str(word_ladder("lead", ["lead"], "gold", w3)))
        w4 = ["came", "cage", "code", "cade", "gave"]
        print(str(word_ladder("game", ["game"], "code", w4)))
    finally:
        _bench_end = _now()
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()
