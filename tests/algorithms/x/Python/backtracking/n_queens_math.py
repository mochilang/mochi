# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 16:35 +0700
import json
import os
import resource
import time

import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

_bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
_bench_start = _now()
try:
    def contains(xs, x):
        i = 0
        while i < len(xs):
            if xs[i] == x:
                return True
            i = i + 1
        return False
    def repeat(s, times):
        result = ""
        i = 0
        while i < times:
            result = result + s
            i = i + 1
        return result
    def build_board(pos, n):
        board = []
        i = 0
        while i < len(pos):
            col = pos[i]
            line = ". " * col + "Q " + ". " * (n - 1 - col)
            board = _append(board, line)
            i = i + 1
        return board
    def depth_first_search(pos, dr, dl, n):
        row = len(pos)
        if row == n:
            single = []
            single = _append(single, build_board(pos, n))
            return single
        boards = []
        col = 0
        while col < n:
            if col in pos or row - col in dr or row + col in dl:
                col = col + 1
                continue
            result = depth_first_search(_append(pos, col), _append(dr, row - col), _append(dl, row + col), n)
            boards = _concat(boards, result)
            col = col + 1
        return boards
    def n_queens_solution(n):
        boards = depth_first_search([], [], [], n)
        i = 0
        while i < len(boards):
            j = 0
            while j < len(boards[i]):
                print(boards[i][j])
                j = j + 1
            print("")
            i = i + 1
        print(len(boards), "solutions were found.")
        return len(boards)
    n_queens_solution(4)
finally:
    _bench_end = _now()
    _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
