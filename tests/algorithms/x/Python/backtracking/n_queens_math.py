# Code generated by Mochi transpiler.
# Version 0.10.59, generated on 2025-08-06 20:35 +0700
import sys
sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _concat(a, b):
    if a is None:
        return b
    if b is None:
        return a
    return a + b


def _append(lst, v):
    if lst is None:
        return [v]
    return lst + [v]

def contains(xs, x):
    i = 0
    while i < len(xs):
        if xs[i] == x:
            return True
        i = i + 1
    return False
def repeat(s, times):
    result = ""
    i = 0
    while i < times:
        result = result + s
        i = i + 1
    return result
def build_board(pos, n):
    board = []
    i = 0
    while i < len(pos):
        col = pos[i]
        line = ". " * col + "Q " + ". " * (n - 1 - col)
        board = _append(board, line)
        i = i + 1
    return board
def depth_first_search(pos, dr, dl, n):
    row = len(pos)
    if row == n:
        single = []
        single = _append(single, build_board(pos, n))
        return single
    boards = []
    col = 0
    while col < n:
        if col in pos or row - col in dr or row + col in dl:
            col = col + 1
            continue
        result = depth_first_search(_append(pos, col), _append(dr, row - col), _append(dl, row + col), n)
        boards = _concat(boards, result)
        col = col + 1
    return boards
def n_queens_solution(n):
    boards = depth_first_search([], [], [], n)
    i = 0
    while i < len(boards):
        j = 0
        while j < len(boards[i]):
            print(boards[i][j])
            j = j + 1
        print("")
        i = i + 1
    print(len(boards), "solutions were found.")
    return len(boards)
n_queens_solution(4)
