# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def join_digits(xs):
    s = ""
    i = 0
    while i < len(xs):
        s = s + xs[i]
        i = i + 1
    return s
def digits_to_int(xs):
    return int(join_digits(xs))
def contains_int(xs, value):
    i = 0
    while i < len(xs):
        if xs[i] == value:
            return True
        i = i + 1
    return False
def remove_at(xs, idx):
    res = []
    i = 0
    while i < len(xs):
        if i != idx:
            res = _append(res, xs[i])
        i = i + 1
    return res
def is_combination_valid(comb):
    prod = digits_to_int(comb[5:9])
    mul2 = digits_to_int(comb[0:2])
    mul3 = digits_to_int(comb[2:5])
    if mul2 * mul3 == prod:
        return True
    mul1 = digits_to_int(comb[0:1])
    mul4 = digits_to_int(comb[1:5])
    return mul1 * mul4 == prod
def search(prefix, remaining, products):
    if len(remaining) == 0:
        if is_combination_valid(prefix):
            p = digits_to_int(prefix[5:9])
            if not contains_int(products, p):
                products = _append(products, p)
        return products
    i = 0
    while i < len(remaining):
        next_prefix = _append(prefix, remaining[i])
        next_remaining = remove_at(remaining, i)
        products = search(next_prefix, next_remaining, products)
        i = i + 1
    return products
digits = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
products = []
products = search([], digits, products)
total = 0
i = 0
while i < len(products):
    total = total + products[i]
    i = i + 1
print(_str(total))

