# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
from __future__ import annotations
from dataclasses import dataclass
from typing import List, Dict
import dataclasses
import json

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

@dataclass
class Name:
    name: str

def ord_letter(ch):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    i = 0
    while i < len(alphabet):
        if alphabet[i:i + 1] == ch:
            return i + 1
        i = i + 1
    return 0
def name_value(name):
    total = 0
    i = 0
    while i < len(name):
        total = total + ord_letter(name[i:i + 1])
        i = i + 1
    return total
def bubble_sort(arr):
    n = len(arr)
    i = 0
    while i < n:
        j = 0
        while j < n - i - 1:
            if arr[j] > arr[j + 1]:
                temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
            j = j + 1
        i = i + 1
    return arr
rows = [json.loads(line) for line in open("/workspace/mochi/tests/github/TheAlgorithms/Mochi/project_euler/problem_022/p022_names.jsonl")]
names = []
for r in rows:
    names = _append(names, r.name)
names = bubble_sort(names)
total = 0
i = 0
while i < len(names):
    total = total + (i + 1) * name_value(names[i])
    i = i + 1
print(_str(total))

