# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def parse_names(line):
    names = []
    current = ""
    i = 0
    while i < len(line):
        ch = line[i:i + 1]
        if ch == ",":
            names = _append(names, current)
            current = ""
        else:
            if ch != "\"":
                current = current + ch
        i = i + 1
    names = _append(names, current)
    return names
def insertion_sort(arr):
    a = arr
    i = 1
    while i < len(a):
        key = a[i]
        j = i - 1
        while j >= 0 and a[j] > key:
            a[j + 1] = a[j]
            j = j - 1
        a[j + 1] = key
        i = i + 1
    return a
def letter_value(ch):
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    idx = 0
    while idx < len(alphabet):
        if alphabet[idx:idx + 1] == ch:
            return idx + 1
        idx = idx + 1
    return 0
def name_score(name):
    score = 0
    i = 0
    while i < len(name):
        score = score + letter_value(name[i:i + 1])
        i = i + 1
    return score
def main():
    line = input()
    names = insertion_sort(parse_names(line))
    total = 0
    i = 0
    while i < len(names):
        total = total + (i + 1) * name_score(names[i])
        i = i + 1
    print(_str(total))
main()

