# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def int_sqrt(n):
    r = 0
    while (r + 1) * (r + 1) <= n:
        r = r + 1
    return r
def is_prime(number):
    if 1 < number and number < 4:
        return True
    if number < 2 or number % 2 == 0 or number % 3 == 0:
        return False
    i = 5
    limit = int_sqrt(number)
    while i <= limit:
        if number % i == 0 or number % (i + 2) == 0:
            return False
        i = i + 6
    return True
def compute_nums(n):
    if n <= 0:
        panic("n must be >= 0")
    list_nums = []
    num = 3
    while len(list_nums) < n:
        if not is_prime(num):
            i = 0
            found = False
            while 2 * i * i <= num:
                rem = num - 2 * i * i
                if is_prime(rem):
                    found = True
                    break
                i = i + 1
            if not found:
                list_nums = _append(list_nums, num)
        num = num + 2
    return list_nums
def solution():
    return compute_nums(1)[0]
print(_str(solution()))

