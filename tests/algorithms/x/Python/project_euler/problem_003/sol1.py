# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 12:29 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

def is_prime(number):
    if number > 1 and number < 4:
        return True
    if number < 2 or number % 2 == 0 or number % 3 == 0:
        return False
    i = 5
    while i * i <= number:
        if number % i == 0 or number % (i + 2) == 0:
            return False
        i = i + 6
    return True
def solution(n):
    num = n
    if num <= 0:
        print("Parameter n must be greater than or equal to one.")
        return 0
    if is_prime(num):
        return num
    while num % 2 == 0:
        num = num / 2
        if is_prime(num):
            return num
    max_number = 1
    i = 3
    while i * i <= num:
        if num % i == 0:
            if is_prime(num / i):
                max_number = num / i
                break
            else:
                if is_prime(i):
                    max_number = i
        i = i + 2
    return max_number
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        result = solution(600851475143)
        print("solution() = " + _str(result))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

