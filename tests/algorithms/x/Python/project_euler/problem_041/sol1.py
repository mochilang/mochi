# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def is_prime(number):
    if (1 < number) and (number < 4):
        return True
    else:
        if (number < 2) or (number % 2 == 0) or (number % 3 == 0):
            return False
    i = 5
    while i * i <= number:
        if (number % i == 0) or (number % (i + 2) == 0):
            return False
        i = i + 6
    return True
def remove_at(xs, index):
    res = []
    i = 0
    while i < len(xs):
        if i != index:
            res = _append(res, xs[i])
        i = i + 1
    return res
def collect_primes(nums, current, primes):
    if len(nums) == 0:
        if is_prime(current):
            primes = _append(primes, current)
        return primes
    i = 0
    res = primes
    while i < len(nums):
        digit = nums[i]
        remaining = remove_at(nums, i)
        res = collect_primes(remaining, current * 10 + digit, res)
        i = i + 1
    return res
def max_list(nums):
    m = 0
    i = 0
    while i < len(nums):
        if nums[i] > m:
            m = nums[i]
        i = i + 1
    return m
def solution(n):
    digits = []
    i = 1
    while i <= n:
        digits = _append(digits, i)
        i = i + 1
    primes = collect_primes(digits, 0, [])
    if len(primes) == 0:
        return 0
    return max_list(primes)
print("solution() = " + _str(solution(7)))

