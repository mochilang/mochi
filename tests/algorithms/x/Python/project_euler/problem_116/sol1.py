# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def solution(length):
    ways = []
    i = 0
    while i <= length:
        row = []
        row = _append(row, 0)
        row = _append(row, 0)
        row = _append(row, 0)
        ways = _append(ways, row)
        i = i + 1
    row_length = 0
    while row_length <= length:
        tile_length = 2
        while tile_length <= 4:
            tile_start = 0
            while tile_start <= row_length - tile_length:
                remaining = row_length - tile_start - tile_length
                ways[row_length][tile_length - 2] = ways[row_length][tile_length - 2] + ways[remaining][tile_length - 2] + 1
                tile_start = tile_start + 1
            tile_length = tile_length + 1
        row_length = row_length + 1
    total = 0
    j = 0
    while j < 3:
        total = total + ways[length][j]
        j = j + 1
    return total
print(solution(5))
print(solution(50))

