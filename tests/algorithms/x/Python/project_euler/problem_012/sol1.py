# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def count_divisors(n):
    m = n
    n_divisors = 1
    i = 2
    while i * i <= m:
        multiplicity = 0
        while m % i == 0:
            m = m // i
            multiplicity = multiplicity + 1
        n_divisors = n_divisors * (multiplicity + 1)
        i = i + 1
    if m > 1:
        n_divisors = n_divisors * 2
    return n_divisors
def solution():
    t_num = 1
    i = 1
    while True:
        i = i + 1
        t_num = t_num + i
        if count_divisors(t_num) > 500:
            break
    return t_num
print(_str(solution()))

