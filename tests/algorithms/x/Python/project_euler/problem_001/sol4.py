# Code generated by Mochi transpiler.
# Version 0.10.62, generated on 2025-08-09 16:36 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def contains(xs, value):
    i = 0
    while i < len(xs):
        if xs[i] == value:
            return True
        i = i + 1
    return False
def solution(n):
    zmulti = []
    xmulti = []
    temp = 1
    while True:
        result = 3 * temp
        if result < n:
            zmulti = _append(zmulti, result)
            temp = temp + 1
        else:
            break
    temp = 1
    while True:
        result = 5 * temp
        if result < n:
            xmulti = _append(xmulti, result)
            temp = temp + 1
        else:
            break
    collection = []
    i = 0
    while i < len(zmulti):
        v = zmulti[i]
        if not contains(collection, v):
            collection = _append(collection, v)
        i = i + 1
    i = 0
    while i < len(xmulti):
        v = xmulti[i]
        if not contains(collection, v):
            collection = _append(collection, v)
        i = i + 1
    total = 0
    i = 0
    while i < len(collection):
        total = total + collection[i]
        i = i + 1
    return total
def test_solution():
    if solution(3) != 0:
        panic("solution(3) failed")
    if solution(4) != 3:
        panic("solution(4) failed")
    if solution(10) != 23:
        panic("solution(10) failed")
    if solution(600) != 83700:
        panic("solution(600) failed")
def main():
    if resource:
        _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_start = 0
    _bench_start = _now()
    try:
        test_solution()
        print("solution() = " + _str(solution(1000)))
    finally:
        _bench_end = _now()
        if resource:
            _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
        else:
            _bench_mem_end = 0
        print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))
main()

