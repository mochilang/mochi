# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

DIGIT_FACTORIALS = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
def sum_of_digit_factorial(n):
    if n == 0:
        return DIGIT_FACTORIALS[0]
    total = 0
    num = n
    while num > 0:
        digit = num % 10
        total = total + DIGIT_FACTORIALS[digit]
        num = num // 10
    return total
def solution():
    limit = 7 * DIGIT_FACTORIALS[9] + 1
    total = 0
    i = 3
    while i < limit:
        if sum_of_digit_factorial(i) == i:
            total = total + i
        i = i + 1
    return total
print(_str(solution()))

