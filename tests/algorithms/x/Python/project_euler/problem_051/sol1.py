# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def parse_int(s):
    value = 0
    i = 0
    while i < len(s):
        value = value * 10 + (int(s[i]))
        i = i + 1
    return value
def digit_replacements(number):
    num_str = _str(number)
    counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    i = 0
    while i < len(num_str):
        d = (int(num_str[i]))
        counts[d] = counts[d] + 1
        i = i + 1
    result = []
    digits = "0123456789"
    digit = 0
    while digit < 10:
        if counts[digit] > 1:
            family = []
            repl = 0
            while repl < 10:
                new_str = ""
                j = 0
                while j < len(num_str):
                    c = num_str[j]
                    if c == digits[digit]:
                        new_str = new_str + digits[repl]
                    else:
                        new_str = new_str + c
                    j = j + 1
                family = _append(family, parse_int(new_str))
                repl = repl + 1
            result = _append(result, family)
        digit = digit + 1
    return result
def is_prime(num):
    if num < 2:
        return False
    if num % 2 == 0:
        return num == 2
    i = 3
    while i * i <= num:
        if num % i == 0:
            return False
        i = i + 2
    return True
def solution(family_length):
    candidate = 121313
    if not is_prime(candidate):
        return -1
    reps = digit_replacements(candidate)
    r = 0
    while r < len(reps):
        family = reps[r]
        count = 0
        min_prime = 0
        first = True
        i = 0
        while i < len(family):
            num = family[i]
            if is_prime(num):
                if first:
                    min_prime = num
                    first = False
                else:
                    if num < min_prime:
                        min_prime = num
                count = count + 1
            i = i + 1
        if count == family_length:
            return min_prime
        r = r + 1
    return -1
print(_str(solution(8)))

