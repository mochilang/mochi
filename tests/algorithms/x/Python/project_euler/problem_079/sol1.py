# Code generated by Mochi transpiler.
# Version 0.10.63, generated on 2025-08-11 16:20 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


def _append(lst, v):
    return (lst or []) + [v]


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

def parse_int(s):
    value = 0
    i = 0
    while i < len(s):
        c = s[i]
        value = value * 10 + (int(c))
        i = i + 1
    return value
def join(xs):
    s = ""
    i = 0
    while i < len(xs):
        s = s + xs[i]
        i = i + 1
    return s
def contains(xs, c):
    i = 0
    while i < len(xs):
        if xs[i] == c:
            return True
        i = i + 1
    return False
def index_of(xs, c):
    i = 0
    while i < len(xs):
        if xs[i] == c:
            return i
        i = i + 1
    return -1
def remove_at(xs, idx):
    res = []
    i = 0
    while i < len(xs):
        if i != idx:
            res = _append(res, xs[i])
        i = i + 1
    return res
def unique_chars(logins):
    chars = []
    i = 0
    while i < len(logins):
        login = logins[i]
        j = 0
        while j < len(login):
            c = login[j]
            if not contains(chars, c):
                chars = _append(chars, c)
            j = j + 1
        i = i + 1
    return chars
def satisfies(permutation, logins):
    i = 0
    while i < len(logins):
        login = logins[i]
        i0 = index_of(permutation, login[0])
        i1 = index_of(permutation, login[1])
        i2 = index_of(permutation, login[2])
        if not (i0 < i1 and i1 < i2):
            return False
        i = i + 1
    return True
def search(chars, current, logins):
    if len(chars) == 0:
        if satisfies(current, logins):
            return join(current)
        return ""
    i = 0
    while i < len(chars):
        c = chars[i]
        rest = remove_at(chars, i)
        next = _append(current, c)
        res = search(rest, next, logins)
        if res != "":
            return res
        i = i + 1
    return ""
def find_secret_passcode(logins):
    chars = unique_chars(logins)
    s = search(chars, [], logins)
    if s == "":
        return -1
    return parse_int(s)
logins1 = ["135", "259", "235", "189", "690", "168", "120", "136", "289", "589", "160", "165", "580", "369", "250", "280"]
print(_str(find_secret_passcode(logins1)))
logins2 = ["426", "281", "061", "819", "268", "406", "420", "428", "209", "689", "019", "421", "469", "261", "681", "201"]
print(_str(find_secret_passcode(logins2)))

