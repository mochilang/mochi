# Code generated by Mochi transpiler.
# Version 0.10.70, generated on 2025-08-22 23:09 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.format(v, ".17g")
    return builtins.str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def xor(a, b):
        res = 0
        bit = 1
        x = a
        y = b
        while x > 0 or y > 0:
            abit = x % 2
            bbit = y % 2
            if abit != bbit:
                res = res + bit
            x = x // 2
            y = y // 2
            bit = bit * 2
        return res
    ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    def chr_(code):
        if code == 10:
            return "\n"
        if code == 13:
            return "\r"
        if code == 9:
            return "\t"
        if code >= 32 and code < 127:
            return ascii_chars[code - 32:code - 31]
        return ""
    def ord_(ch):
        if ch == "\n":
            return 10
        if ch == "\r":
            return 13
        if ch == "\t":
            return 9
        i = 0
        while i < len(ascii_chars):
            if ascii_chars[i:i + 1] == ch:
                return 32 + i
            i = i + 1
        return 0
    def is_valid_ascii(code):
        if code >= 32 and code <= 126:
            return True
        if code == 9 or code == 10 or code == 13:
            return True
        return False
    LOWERCASE_INTS = []
    i = 97
    while i <= 122:
        LOWERCASE_INTS = _append(LOWERCASE_INTS, i)
        i = i + 1
    COMMON_WORDS = ["the", "be", "to", "of", "and", "in", "that", "have"]
    def try_key(ciphertext, key):
        decoded = ""
        i = 0
        klen = len(key)
        while i < len(ciphertext):
            decodedchar = xor(ciphertext[i], key[i % klen])
            if not is_valid_ascii(decodedchar):
                return None
            decoded = decoded + chr(decodedchar)
            i = i + 1
        return decoded
    def filter_valid_chars(ciphertext):
        possibles = []
        i = 0
        while i < len(LOWERCASE_INTS):
            j = 0
            while j < len(LOWERCASE_INTS):
                k = 0
                while k < len(LOWERCASE_INTS):
                    key = [LOWERCASE_INTS[i], LOWERCASE_INTS[j], LOWERCASE_INTS[k]]
                    decoded = try_key(ciphertext, key)
                    if decoded != None:
                        possibles = _append(possibles, decoded)
                    k = k + 1
                j = j + 1
            i = i + 1
        return possibles
    def contains(s, sub):
        n = len(s)
        m = len(sub)
        if m == 0:
            return True
        i = 0
        while i <= n - m:
            j = 0
            is_match = True
            while j < m:
                if s[i + j] != sub[j]:
                    is_match = False
                    break
                j = j + 1
            if is_match:
                return True
            i = i + 1
        return False
    def filter_common_word(possibles, common_word):
        res = []
        i = 0
        while i < len(possibles):
            p = possibles[i]
            if contains(p.lower(), common_word):
                res = _append(res, p)
            i = i + 1
        return res
    def solution(ciphertext):
        possibles = filter_valid_chars(ciphertext)
        i = 0
        while i < len(COMMON_WORDS):
            word = COMMON_WORDS[i]
            possibles = filter_common_word(possibles, word)
            if len(possibles) == 1:
                break
            i = i + 1
        decoded_text = possibles[0]
        sum_ = 0
        j = 0
        while j < len(decoded_text):
            sum_ = sum_ + ord(decoded_text[j:j + 1])
            j = j + 1
        return sum_
    ciphertext = [17, 6, 1, 69, 12, 1, 69, 26, 11, 69, 1, 2, 69, 15, 10, 1, 78, 13, 11, 78, 16, 13, 15, 16, 69, 6, 5, 19, 11]
    print(_str(solution(ciphertext)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": (_bench_mem_end - _bench_mem_start)*1024, "name": "main"}, indent=2))

