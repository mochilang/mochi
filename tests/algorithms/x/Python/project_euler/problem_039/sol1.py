# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def int_sqrt(n):
    low = 0
    high = n
    while low <= high:
        mid = (low + high) // 2
        sq = mid * mid
        if sq == n:
            return mid
        if sq < n:
            low = mid + 1
        else:
            high = mid - 1
    return high
def pythagorean_triple(max_perimeter):
    triplets = {}
    base = 1
    while base <= max_perimeter:
        perpendicular = base
        while perpendicular <= max_perimeter:
            hyp_sq = base * base + perpendicular * perpendicular
            hyp = int_sqrt(hyp_sq)
            if hyp * hyp == hyp_sq:
                perimeter = base + perpendicular + hyp
                if perimeter <= max_perimeter:
                    if perimeter in triplets:
                        triplets[perimeter] = triplets.get(perimeter, None) + 1
                    else:
                        triplets[perimeter] = 1
            perpendicular = perpendicular + 1
        base = base + 1
    return triplets
def max_perimeter(counts):
    best_p = 0
    max_count = 0
    for p in counts:
        count = counts.get(p, 0)
        if (count > max_count) or ((count == max_count) and (p > best_p)):
            max_count = count
            best_p = p
    return best_p
def solution(n):
    triplets = pythagorean_triple(n)
    return max_perimeter(triplets)
def main():
    s200 = max_perimeter(pythagorean_triple(200))
    s100 = max_perimeter(pythagorean_triple(100))
    print(_str(s100))
    print(_str(s200))
    best = max_perimeter(pythagorean_triple(1000))
    print(_str(best))
    print("Perimeter " + _str(best) + " has maximum solutions")
main()

