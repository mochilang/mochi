# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def solution(n):
    counters = []
    i = 0
    while i <= n:
        counters = _append(counters, 0)
        i = i + 1
    counters[1] = 1
    largest_number = 1
    pre_counter = 1
    start = 2
    while start < n:
        number = start
        counter = 0
        while True:
            if number < len(counters) and counters[number] != 0:
                counter = counter + counters[number]
                break
            if number % 2 == 0:
                number = number // 2
            else:
                number = 3 * number + 1
            counter = counter + 1
        if start < len(counters) and counters[start] == 0:
            counters[start] = counter
        if counter > pre_counter:
            largest_number = start
            pre_counter = counter
        start = start + 1
    return largest_number
input_str = input()
n = int(input_str)
print(_str(solution(n)))

