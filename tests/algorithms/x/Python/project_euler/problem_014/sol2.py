# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

collatz_cache = {1: 1}
def collatz_length(n):
    global collatz_cache
    num = n
    sequence = []
    while not (num in collatz_cache):
        sequence = _append(sequence, num)
        if num % 2 == 0:
            num = int((num // 2))
        else:
            num = 3 * num + 1
    length = collatz_cache.get(num, 0)
    i = len(sequence) - 1
    while i >= 0:
        length = length + 1
        collatz_cache[sequence[i]] = length
        i = i - 1
    return length
def solution(limit):
    max_len = 0
    max_start = 1
    i = 1
    while i < limit:
        length = collatz_length(i)
        if length > max_len:
            max_len = length
            max_start = i
        i = i + 1
    return max_start
input_str = input()
limit = int(input_str)
print(solution(limit))

