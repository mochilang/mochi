# Code generated by Mochi transpiler.
# Version 0.10.62, generated on 2025-08-09 16:36 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _append(lst, v):
    return (lst or []) + [v]


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    collatz_cache = {1: 1}
    def collatz_length(n):
        num = n
        sequence = []
        while not (num in collatz_cache):
            sequence = _append(sequence, num)
            if num % 2 == 0:
                num = int((num // 2))
            else:
                num = 3 * num + 1
        length = collatz_cache.get(num, 0)
        i = len(sequence) - 1
        while i >= 0:
            length = length + 1
            collatz_cache[sequence[i]] = length
            i = i - 1
        return length
    def solution(limit):
        max_len = 0
        max_start = 1
        i = 1
        while i < limit:
            length = collatz_length(i)
            if length > max_len:
                max_len = length
                max_start = i
            i = i + 1
        return max_start
    input_str = input()
    limit = int(input_str)
    print(solution(limit))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

