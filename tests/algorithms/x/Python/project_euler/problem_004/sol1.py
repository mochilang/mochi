# Code generated by Mochi transpiler.
# Version 0.10.64, generated on 2025-08-12 12:29 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".17g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def is_palindrome(num):
        s = _str(num)
        i = 0
        j = len(s) - 1
        while i < j:
            if s[i:i + 1] != s[j:j + 1]:
                return False
            i = i + 1
            j = j - 1
        return True
    def solution(n):
        number = n - 1
        while number > 9999:
            if is_palindrome(number):
                divisor = 999
                while divisor > 99:
                    if number % divisor == 0:
                        other = number // divisor
                        if len(_str(other)) == 3:
                            return number
                    divisor = divisor - 1
            number = number - 1
        print("That number is larger than our acceptable range.")
        return 0
    print("solution() = " + _str(solution(998001)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

