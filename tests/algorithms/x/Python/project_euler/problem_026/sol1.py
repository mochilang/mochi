# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def contains(lst, val):
    for x in lst:
        if x == val:
            return True
    return False
def solution(numerator, limit):
    the_digit = 1
    longest_len = 0
    for d in range(numerator, limit):
        remainders = []
        rem = numerator
        count = 1
        while count <= limit:
            if contains(remainders, rem):
                if longest_len < len(remainders):
                    longest_len = len(remainders)
                    the_digit = d
            else:
                remainders = _append(remainders, rem)
                rem = rem * 10 % d
            count = count + 1
    return the_digit
def main():
    print(_str(solution(1, 10)))
    print(_str(solution(10, 100)))
    print(_str(solution(10, 1000)))
main()

