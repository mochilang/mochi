# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def is_prime(number):
    if 1 < number and number < 4:
        return True
    if number < 2 or number % 2 == 0 or number % 3 == 0:
        return False
    i = 5
    while i * i <= number:
        if number % i == 0 or number % (i + 2) == 0:
            return False
        i = i + 6
    return True
def list_truncated_nums(n):
    str_num = _str(n)
    list_nums = [n]
    i = 1
    length = len(str_num)
    while i < length:
        right = int(str_num[i:length])
        left = int(str_num[0:length - i])
        list_nums = _append(list_nums, right)
        list_nums = _append(list_nums, left)
        i = i + 1
    return list_nums
def validate(n):
    s = _str(n)
    length = len(s)
    if length > 3:
        last3 = int(s[length - 3:length])
        first3 = int(s[0:3])
        if not (is_prime(last3) and is_prime(first3)):
            return False
    return True
def compute_truncated_primes(count):
    list_truncated_primes = []
    num = 13
    while len(list_truncated_primes) != count:
        if validate(num):
            list_nums = list_truncated_nums(num)
            all_prime = True
            j = 0
            while j < len(list_nums):
                if not is_prime(list_nums[j]):
                    all_prime = False
                    break
                j = j + 1
            if all_prime:
                list_truncated_primes = _append(list_truncated_primes, num)
        num = num + 2
    return list_truncated_primes
def solution():
    primes = compute_truncated_primes(11)
    total = 0
    i = 0
    while i < len(primes):
        total = total + primes[i]
        i = i + 1
    return total
print("sum(compute_truncated_primes(11)) = " + _str(solution()))

