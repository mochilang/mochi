# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def run(n):
    limit = 200000
    counts = {}
    p = 2
    while p <= limit:
        if not (p in counts):
            m = p
            while m <= limit:
                if m in counts:
                    counts[m] = counts.get(m, None) + 1
                else:
                    counts[m] = 1
                m = m + p
        p = p + 1
    streak = 0
    num = 2
    while num <= limit:
        c = (counts.get(num, None) if num in counts else 0)
        if c == n:
            streak = streak + 1
            if streak == n:
                result = []
                start = num - n + 1
                j = 0
                while j < n:
                    result = _append(result, start + j)
                    j = j + 1
                return result
        else:
            streak = 0
        num = num + 1
    return []
def solution(n):
    res = run(n)
    return res[0]
print(_str(solution(4)))

