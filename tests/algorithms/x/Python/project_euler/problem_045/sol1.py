# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import math

import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def to_float(x):
    return x * 1.0
def sqrt(x):
    if x <= 0.0:
        return 0.0
    guess = x
    i = 0
    while i < 10:
        guess = (guess + x / guess) / 2.0
        i = i + 1
    return guess
def floor(x):
    n = 0
    y = x
    while y >= 1.0:
        y = y - 1.0
        n = n + 1
    return n
def hexagonal_num(n):
    return n * (2 * n - 1)
def is_pentagonal(n):
    root = sqrt(1.0 + 24.0 * float(n))
    val = (1.0 + root) / 6.0
    return val == float(math.floor(val))
def solution(start):
    idx = start
    num = hexagonal_num(idx)
    while not is_pentagonal(num):
        idx = idx + 1
        num = hexagonal_num(idx)
    return num
def test_hexagonal_num():
    if hexagonal_num(143) != 40755:
        panic("hexagonal_num(143) failed")
    if hexagonal_num(21) != 861:
        panic("hexagonal_num(21) failed")
    if hexagonal_num(10) != 190:
        panic("hexagonal_num(10) failed")
def test_is_pentagonal():
    if not is_pentagonal(330):
        panic("330 should be pentagonal")
    if is_pentagonal(7683):
        panic("7683 should not be pentagonal")
    if not is_pentagonal(2380):
        panic("2380 should be pentagonal")
def test_solution():
    if solution(144) != 1533776805:
        panic("solution failed")
test_hexagonal_num()
test_is_pentagonal()
test_solution()
print(_str(solution(144)) + " = ")

