# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def is_palindrome_str(s):
    i = 0
    j = len(s) - 1
    while i < j:
        if s[i:i + 1] != s[j:j + 1]:
            return False
        i = i + 1
        j = j - 1
    return True
def to_binary(n):
    if n == 0:
        return "0"
    res = ""
    x = n
    while x > 0:
        res = _str(x % 2) + res
        x = x // 2
    return res
def solution(n):
    total = 0
    i = 1
    while i < n:
        dec = _str(i)
        bin_ = to_binary(i)
        if is_palindrome_str(dec) and is_palindrome_str(bin_):
            total = total + i
        i = i + 1
    return total
print(solution(1000000))
print(solution(500000))
print(solution(100000))
print(solution(1000))
print(solution(100))
print(solution(10))
print(solution(2))
print(solution(1))

