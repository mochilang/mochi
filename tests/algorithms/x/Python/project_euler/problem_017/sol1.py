# Code generated by Mochi transpiler.
# Version 0.10.62, generated on 2025-08-09 16:36 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())


def _str(v):
    if isinstance(v, float):
        if v.is_integer():
            return str(int(v))
        return format(v, ".15g")
    return str(v)

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def solution(n):
        ones_counts = [0, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8]
        tens_counts = [0, 0, 6, 6, 5, 5, 5, 7, 6, 6]
        count = 0
        i = 1
        while i <= n:
            if i < 1000:
                if i >= 100:
                    count = count + ones_counts[i // 100] + 7
                    if i % 100 != 0:
                        count = count + 3
                remainder = i % 100
                if remainder > 0 and remainder < 20:
                    count = count + ones_counts[remainder]
                else:
                    count = count + ones_counts[i % 10]
                    count = count + tens_counts[(remainder - i % 10) // 10]
            else:
                count = count + ones_counts[i // 1000] + 8
            i = i + 1
        return count
    print(_str(solution(1000)))
    print(_str(solution(5)))
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

