# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def solution(n):
    ones_counts = [0, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8]
    tens_counts = [0, 0, 6, 6, 5, 5, 5, 7, 6, 6]
    count = 0
    i = 1
    while i <= n:
        if i < 1000:
            if i >= 100:
                count = count + ones_counts[int(i // 100)] + 7
                if i % 100 != 0:
                    count = count + 3
            remainder = i % 100
            if remainder > 0 and remainder < 20:
                count = count + ones_counts[remainder]
            else:
                count = count + ones_counts[i % 10]
                count = count + tens_counts[int((remainder - i % 10) // 10)]
        else:
            count = count + ones_counts[int(i // 1000)] + 8
        i = i + 1
    return count
print(_str(solution(1000)))
print(_str(solution(5)))

