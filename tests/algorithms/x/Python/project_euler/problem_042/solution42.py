# Code generated by Mochi transpiler.
# Version 0.10.70, generated on 2025-08-22 15:25 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.format(v, ".17g")
    return builtins.str(v)


def _read_file(path):
    p = path
    if '_dataDir' in globals() and _dataDir and not os.path.exists(p):
        p = os.path.join(_dataDir, path)
    try:
        with open(p, 'r') as f:
            return f.read()
    except Exception:
        return ''

def triangular_numbers(limit):
    res = []
    n = 1
    while n <= limit:
        res = _append(res, (n * (n + 1)) // 2)
        n = n + 1
    return res
def parse_words(text):
    words = []
    current = ""
    i = 0
    while i < len(text):
        c = text[i:i + 1]
        if c == ",":
            words = _append(words, current)
            current = ""
        else:
            if c == "\"":
                pass
            else:
                if c == "\r" or c == "\n":
                    pass
                else:
                    current = current + c
        i = i + 1
    if len(current) > 0:
        words = _append(words, current)
    return words
def word_value(word):
    total = 0
    i = 0
    while i < len(word):
        total = total + ord(word[i:i + 1]) - 64
        i = i + 1
    return total
def contains(xs, target):
    for x in xs:
        if x == target:
            return True
    return False
def solution():
    text = _read_file("words.txt")
    words = parse_words(text)
    tri = triangular_numbers(100)
    count = 0
    for w in words:
        v = word_value(w)
        if contains(tri, v):
            count = count + 1
    return count
print(_str(solution()))

