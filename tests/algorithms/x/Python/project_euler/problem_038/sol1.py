# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def is_9_pandigital(n):
    digits = []
    i = 0
    while i < 10:
        digits = _append(digits, 0)
        i = i + 1
    count = 0
    x = n
    while x > 0:
        digit = x % 10
        if digit == 0:
            return False
        if digits[digit] == 1:
            return False
        digits[digit] = 1
        x = x // 10
        count = count + 1
    return count == 9 and digits[1] == 1 and digits[2] == 1 and digits[3] == 1 and digits[4] == 1 and digits[5] == 1 and digits[6] == 1 and digits[7] == 1 and digits[8] == 1 and digits[9] == 1
def solution():
    base_num = 9999
    while base_num >= 5000:
        candidate = 100002 * base_num
        if is_9_pandigital(candidate):
            return candidate
        base_num = base_num - 1
    base_num = 333
    while base_num >= 100:
        candidate = 1002003 * base_num
        if is_9_pandigital(candidate):
            return candidate
        base_num = base_num - 1
    return 0
print("solution() = " + _str(solution()))

