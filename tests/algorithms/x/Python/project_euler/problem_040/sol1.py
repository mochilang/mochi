# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)

def solution():
    targets = [1, 10, 100, 1000, 10000, 100000, 1000000]
    idx = 0
    product = 1
    count = 0
    i = 1
    while idx < len(targets):
        s = _str(i)
        j = 0
        while j < len(s):
            count = count + 1
            if count == targets[idx]:
                product = product * (int(s[j]))
                idx = idx + 1
                if idx == len(targets):
                    break
            j = j + 1
        i = i + 1
    return product
def test_solution():
    if solution() != 210:
        panic("solution failed")
def main():
    test_solution()
    print(_str(solution()))
main()

