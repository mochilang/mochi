# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def solution(power):
    digits = []
    digits = _append(digits, 1)
    i = 0
    while i < power:
        carry = 0
        j = 0
        while j < len(digits):
            v = digits[j] * 2 + carry
            digits[j] = v % 10
            carry = v / 10
            j = j + 1
        if carry > 0:
            digits = _append(digits, carry)
        i = i + 1
    sum_ = 0
    k = 0
    while k < len(digits):
        sum_ = sum_ + digits[k]
        k = k + 1
    return sum_
print(_str(solution(1000)))
print(_str(solution(50)))
print(_str(solution(20)))
print(_str(solution(15)))

