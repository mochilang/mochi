# Code generated by Mochi transpiler.
# Version 0.10.62, generated on 2025-08-09 16:36 +0700
import json
import time

try:
    import resource
except Exception:
    resource = None
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def panic(msg):
    raise RuntimeError(msg)


_now_seed = 0
_now_seeded = False
s = os.getenv("MOCHI_NOW_SEED")
if s and s != "":
    try:
        _now_seed = int(s)
        _now_seeded = True
    except Exception:
        pass

def _now():
    global _now_seed
    if _now_seeded:
        _now_seed = (_now_seed * 1664525 + 1013904223) % 2147483647
        return _now_seed
    return int(time.time_ns())

if resource:
    _bench_mem_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
else:
    _bench_mem_start = 0
_bench_start = _now()
try:
    def is_leap(year):
        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
            return True
        return False
    def count_sundays():
        days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        day = 6
        month = 1
        year = 1901
        sundays = 0
        while year < 2001:
            day = day + 7
            if is_leap(year):
                if day > days_per_month[month - 1] and month != 2:
                    month = month + 1
                    day = day - days_per_month[month - 2]
                else:
                    if day > 29 and month == 2:
                        month = month + 1
                        day = day - 29
            else:
                if day > days_per_month[month - 1]:
                    month = month + 1
                    day = day - days_per_month[month - 2]
            if month > 12:
                year = year + 1
                month = 1
            if year < 2001 and day == 1:
                sundays = sundays + 1
        return sundays
    print(count_sundays())
finally:
    _bench_end = _now()
    if resource:
        _bench_mem_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss
    else:
        _bench_mem_end = 0
    print(json.dumps({"duration_us": (_bench_end - _bench_start)//1000, "memory_bytes": _bench_mem_end*1024, "name": "main"}, indent=2))

