# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

LIMIT = 10000
sieve = []
i = 0
while i <= LIMIT:
    sieve = _append(sieve, True)
    i = i + 1
p = 2
while p * p <= LIMIT:
    if sieve[p]:
        j = p * p
        while j <= LIMIT:
            sieve = _set_index(sieve, j, False)
            j = j + p
    p = p + 1
def is_prime(n):
    return sieve[n]
def contains_an_even_digit(n):
    s = _str(n)
    idx = 0
    while idx < len(s):
        c = s[idx]
        if c == "0" or c == "2" or c == "4" or c == "6" or c == "8":
            return True
        idx = idx + 1
    return False
def parse_int(s):
    value = 0
    k = 0
    while k < len(s):
        ch = s[k]
        value = value * 10 + (int(ch))
        k = k + 1
    return value
def find_circular_primes(limit):
    result = [2]
    num = 3
    while num <= limit:
        if is_prime(num) and (contains_an_even_digit(num) == False):
            s = _str(num)
            all_prime = True
            j = 0
            while j < len(s):
                rotated_str = s[j:len(s)] + s[0:j]
                rotated = parse_int(rotated_str)
                if not is_prime(rotated):
                    all_prime = False
                    break
                j = j + 1
            if all_prime:
                result = _append(result, num)
        num = num + 2
    return result
def solution():
    return len(find_circular_primes(LIMIT))
print("len(find_circular_primes()) = " + _str(solution()))

