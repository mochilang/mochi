# Code generated by Mochi transpiler.
# Version 0.10.71, generated on 2025-08-23 15:31 +0700
import sys
if hasattr(sys, "set_int_max_str_digits"):
    sys.set_int_max_str_digits(0)
if hasattr(sys, "setrecursionlimit"):
    sys.setrecursionlimit(1000000)
import os
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))


def _append(lst, v):
    if lst is None:
        lst = []
    return lst + [v]


import builtins
def _str(v):
    if isinstance(v, float):
        if abs(v - builtins.round(v)) < 1e-9:
            return builtins.str(int(builtins.round(v)))
        return builtins.str(v)
    return builtins.str(v)


def _set_index(lst, idx, val):
    if lst is None:
        lst = []
    if idx >= len(lst):
        lst.extend([None] * (idx - len(lst) + 1))
    lst[idx] = val
    return lst

def digits_count(n):
    counts = []
    i = 0
    while i < 10:
        counts = _append(counts, 0)
        i = i + 1
    x = n
    if x == 0:
        counts[0] = counts[0] + 1
    while x > 0:
        d = x % 10
        counts[d] = counts[d] + 1
        x = x // 10
    return counts
def equal_lists(a, b):
    i = 0
    while i < len(a):
        if a[i] != b[i]:
            return False
        i = i + 1
    return True
def solution():
    i = 1
    while True:
        c = digits_count(i)
        if equal_lists(c, digits_count(2 * i)) and equal_lists(c, digits_count(3 * i)) and equal_lists(c, digits_count(4 * i)) and equal_lists(c, digits_count(5 * i)) and equal_lists(c, digits_count(6 * i)):
            return i
        i = i + 1
print(_str(solution()))

