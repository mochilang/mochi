compile: exit status 1
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c: In function ‘new_network’:
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:138: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                          ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:152: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                        ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:166: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                      ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:180: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                    ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:81: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                 ^
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:257: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                 ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:271: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                               ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:285: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                             ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:299: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                                           ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:200: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                        ^
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:376: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                                                                                                                        ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:390: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                                                                                                                                      ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:404: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                                                                                                                                                    ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:418: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                                                                                                                                                                  ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:319: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                                                               ^
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:685: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:699: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:713: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:628: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:790: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:804: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:818: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:733: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:895: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:909: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:923: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:838: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:1000: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:1014: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:1028: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:943: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:1307: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:1250: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:1384: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:1327: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:1461: error: incompatible types when assigning to type ‘double *’ from type ‘double’
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |~~
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:130:1404: warning: assignment to ‘double *’ from incompatible pointer type ‘double **’ [-Wincompatible-pointer-types]
  130 |     return (Network){.w1 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp[3] = 0.4; tmp;}); tmp[1] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.5; tmp[1] = 0.6; tmp[2] = 0.7; tmp[3] = 0.8; tmp;}); tmp[2] = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = 0.9; tmp[1] = 1.0; tmp[2] = 1.1; tmp[3] = 1.2; tmp;}); tmp;}), .w1_len = 3, .w1_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 4; tmp[1] = 4; tmp[2] = 4; tmp;}), .w1_lens_len = 3, .w2 = ({double** tmp = malloc(4 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.1; tmp[1] = 0.2; tmp[2] = 0.3; tmp;}); tmp[1] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.4; tmp[1] = 0.5; tmp[2] = 0.6; tmp;}); tmp[2] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 0.7; tmp[1] = 0.8; tmp[2] = 0.9; tmp;}); tmp[3] = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = 1.0; tmp[1] = 1.1; tmp[2] = 1.2; tmp;}); tmp;}), .w2_len = 4, .w2_lens = ({size_t *tmp = malloc(4 * sizeof(size_t)); tmp[0] = 3; tmp[1] = 3; tmp[2] = 3; tmp[3] = 3; tmp;}), .w2_lens_len = 4, .w3 = ({double** tmp = malloc(3 * sizeof(double*)); tmp[0] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.1; tmp;}); tmp[1] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.2; tmp;}); tmp[2] = ({double** tmp = malloc(1 * sizeof(double*)); tmp[0] = 0.3; tmp;}); tmp;}), .w3_len = 3, .w3_lens = ({size_t *tmp = malloc(3 * sizeof(size_t)); tmp[0] = 1; tmp[1] = 1; tmp[2] = 1; tmp;}), .w3_lens_len = 3};
      |
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c: In function ‘train’:
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:185:283: error: ‘net’ is a pointer; did you mean to use ‘->’?
  185 |                     sum1 = sum1 + (inp[(int)({long long _mochi_idx = i; _mochi_idx < 0 ? inp_len + _mochi_idx : _mochi_idx;})] * net->w1[(int)({long long _mochi_idx = i; _mochi_idx < 0 ? net->w1_len + _mochi_idx : _mochi_idx;})][(int)({long long _mochi_idx = j; _mochi_idx < 0 ? net.w1_lens[i] + _mochi_idx : _mochi_idx;})]);
      |                                                                                                                                                                                                                                                                                           ^
      |                                                                                                                                                                                                                                                                                           ->
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:198:293: error: ‘net’ is a pointer; did you mean to use ‘->’?
  198 |                     sum2 = sum2 + (hidden1[(int)({long long _mochi_idx = j2; _mochi_idx < 0 ? hidden1_len + _mochi_idx : _mochi_idx;})] * net->w2[(int)({long long _mochi_idx = j2; _mochi_idx < 0 ? net->w2_len + _mochi_idx : _mochi_idx;})][(int)({long long _mochi_idx = k; _mochi_idx < 0 ? net.w2_lens[j2] + _mochi_idx : _mochi_idx;})]);
      |                                                                                                                                                                                                                                                                                                     ^
      |                                                                                                                                                                                                                                                                                                     ->
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:207:291: error: ‘net’ is a pointer; did you mean to use ‘->’?
  207 |                 sum3 = sum3 + (hidden2[(int)({long long _mochi_idx = k3; _mochi_idx < 0 ? hidden2_len + _mochi_idx : _mochi_idx;})] * net->w3[(int)({long long _mochi_idx = k3; _mochi_idx < 0 ? net->w3_len + _mochi_idx : _mochi_idx;})][(int)({long long _mochi_idx = 0LL; _mochi_idx < 0 ? net.w3_lens[k3] + _mochi_idx : _mochi_idx;})]);
      |                                                                                                                                                                                                                                                                                                   ^
      |                                                                                                                                                                                                                                                                                                   ->
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:220:39: error: ‘net’ is a pointer; did you mean to use ‘->’?
  220 |                 size_t w3row_len = net.w3_lens[k4];
      |                                       ^
      |                                       ->
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:235:37: error: ‘net’ is a pointer; did you mean to use ‘->’?
  235 |                 size_t row_len = net.w3_lens[k5];
      |                                     ^
      |                                     ->
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:247:39: error: ‘net’ is a pointer; did you mean to use ‘->’?
  247 |                 size_t w2row_len = net.w2_lens[j];
      |                                       ^
      |                                       ->
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:269:42: error: ‘net’ is a pointer; did you mean to use ‘->’?
  269 |                     size_t row2_len = net.w2_lens[j];
      |                                          ^
      |                                          ->
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:283:39: error: ‘net’ is a pointer; did you mean to use ‘->’?
  283 |                 size_t w1row_len = net.w1_lens[i2];
      |                                       ^
      |                                       ->
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c: In function ‘example’:
/workspace/mochi/tests/algorithms/x/C/neural_network/two_hidden_layers_neural_network.c:337:62: error: cast specifies array type
  337 |     train(&net, inputs, inputs_len, inputs_lens, inputs_len, (double[])outputs, outputs_len, 10LL);
      |                                                              ^
