;; Generated by Mochi Scheme transpiler on 2025-08-14 15:52 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start19 (
        current-jiffy
      )
    )
     (
      jps22 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        create_graph vertices edges directed
      )
       (
        let (
          (
            adj (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break2
              )
               (
                letrec (
                  (
                    loop1 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                v (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                hash-table-set! adj v (
                                  _list
                                )
                              )
                            )
                          )
                           (
                            loop1 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop1 vertices
                )
              )
            )
          )
           (
            call/cc (
              lambda (
                break4
              )
               (
                letrec (
                  (
                    loop3 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                e (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    s (
                                      cond (
                                        (
                                          string? e
                                        )
                                         (
                                          _substring e 0 (
                                            + 0 1
                                          )
                                        )
                                      )
                                       (
                                        (
                                          hash-table? e
                                        )
                                         (
                                          hash-table-ref e 0
                                        )
                                      )
                                       (
                                        else (
                                          list-ref-safe e 0
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        d (
                                          cond (
                                            (
                                              string? e
                                            )
                                             (
                                              _substring e 1 (
                                                + 1 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? e
                                            )
                                             (
                                              hash-table-ref e 1
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe e 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          not (
                                            cond (
                                              (
                                                string? adj
                                              )
                                               (
                                                if (
                                                  string-contains adj s
                                                )
                                                 #t #f
                                              )
                                            )
                                             (
                                              (
                                                hash-table? adj
                                              )
                                               (
                                                if (
                                                  hash-table-exists? adj s
                                                )
                                                 #t #f
                                              )
                                            )
                                             (
                                              else (
                                                if (
                                                  member s adj
                                                )
                                                 #t #f
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            hash-table-set! adj s (
                                              _list
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                       (
                                        if (
                                          not (
                                            cond (
                                              (
                                                string? adj
                                              )
                                               (
                                                if (
                                                  string-contains adj d
                                                )
                                                 #t #f
                                              )
                                            )
                                             (
                                              (
                                                hash-table? adj
                                              )
                                               (
                                                if (
                                                  hash-table-exists? adj d
                                                )
                                                 #t #f
                                              )
                                            )
                                             (
                                              else (
                                                if (
                                                  member d adj
                                                )
                                                 #t #f
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            hash-table-set! adj d (
                                              _list
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                       (
                                        hash-table-set! adj s (
                                          append (
                                            hash-table-ref/default adj s (
                                              void
                                            )
                                          )
                                           (
                                            _list d
                                          )
                                        )
                                      )
                                       (
                                        if (
                                          not directed
                                        )
                                         (
                                          begin (
                                            hash-table-set! adj d (
                                              append (
                                                hash-table-ref/default adj d (
                                                  void
                                                )
                                              )
                                               (
                                                _list s
                                              )
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop3 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop3 edges
                )
              )
            )
          )
           (
            alist->hash-table (
              _list (
                cons "adj" adj
              )
               (
                cons "directed" directed
              )
            )
          )
        )
      )
    )
     (
      define (
        add_vertex graph v
      )
       (
        begin (
          if (
            cond (
              (
                string? (
                  hash-table-ref graph "adj"
                )
              )
               (
                if (
                  string-contains (
                    hash-table-ref graph "adj"
                  )
                   v
                )
                 #t #f
              )
            )
             (
              (
                hash-table? (
                  hash-table-ref graph "adj"
                )
              )
               (
                if (
                  hash-table-exists? (
                    hash-table-ref graph "adj"
                  )
                   v
                )
                 #t #f
              )
            )
             (
              else (
                if (
                  member v (
                    hash-table-ref graph "adj"
                  )
                )
                 #t #f
              )
            )
          )
           (
            begin (
              panic "vertex exists"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              adj (
                alist->hash-table (
                  _list
                )
              )
            )
          )
           (
            begin (
              call/cc (
                lambda (
                  break6
                )
                 (
                  letrec (
                    (
                      loop5 (
                        lambda (
                          xs
                        )
                         (
                          if (
                            null? xs
                          )
                           (
                            void
                          )
                           (
                            begin (
                              let (
                                (
                                  k (
                                    car xs
                                  )
                                )
                              )
                               (
                                begin (
                                  hash-table-set! adj k (
                                    hash-table-ref/default (
                                      hash-table-ref graph "adj"
                                    )
                                     k (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop5 (
                                cdr xs
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    loop5 (
                      hash-table-keys (
                        hash-table-ref graph "adj"
                      )
                    )
                  )
                )
              )
            )
             (
              hash-table-set! adj v (
                _list
              )
            )
             (
              alist->hash-table (
                _list (
                  cons "adj" adj
                )
                 (
                  cons "directed" (
                    hash-table-ref graph "directed"
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        remove_from_list lst value
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop7 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len lst
                          )
                        )
                         (
                          begin (
                            if (
                              not (
                                equal? (
                                  list-ref-safe lst i
                                )
                                 value
                              )
                            )
                             (
                              begin (
                                set! res (
                                  append res (
                                    _list (
                                      list-ref-safe lst i
                                    )
                                  )
                                )
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop7
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop7
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        remove_key m key
      )
       (
        let (
          (
            res (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break9
              )
               (
                letrec (
                  (
                    loop8 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                k (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                if (
                                  not (
                                    equal? k key
                                  )
                                )
                                 (
                                  begin (
                                    hash-table-set! res k (
                                      hash-table-ref/default m k (
                                        void
                                      )
                                    )
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                           (
                            loop8 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop8 (
                    hash-table-keys m
                  )
                )
              )
            )
          )
           res
        )
      )
    )
     (
      define (
        add_edge graph s d
      )
       (
        begin (
          if (
            or (
              not (
                cond (
                  (
                    string? (
                      hash-table-ref graph "adj"
                    )
                  )
                   (
                    if (
                      string-contains (
                        hash-table-ref graph "adj"
                      )
                       s
                    )
                     #t #f
                  )
                )
                 (
                  (
                    hash-table? (
                      hash-table-ref graph "adj"
                    )
                  )
                   (
                    if (
                      hash-table-exists? (
                        hash-table-ref graph "adj"
                      )
                       s
                    )
                     #t #f
                  )
                )
                 (
                  else (
                    if (
                      member s (
                        hash-table-ref graph "adj"
                      )
                    )
                     #t #f
                  )
                )
              )
            )
             (
              not (
                cond (
                  (
                    string? (
                      hash-table-ref graph "adj"
                    )
                  )
                   (
                    if (
                      string-contains (
                        hash-table-ref graph "adj"
                      )
                       d
                    )
                     #t #f
                  )
                )
                 (
                  (
                    hash-table? (
                      hash-table-ref graph "adj"
                    )
                  )
                   (
                    if (
                      hash-table-exists? (
                        hash-table-ref graph "adj"
                      )
                       d
                    )
                     #t #f
                  )
                )
                 (
                  else (
                    if (
                      member d (
                        hash-table-ref graph "adj"
                      )
                    )
                     #t #f
                  )
                )
              )
            )
          )
           (
            begin (
              panic "vertex missing"
            )
          )
           (
            void
          )
        )
         (
          if (
            contains_edge graph s d
          )
           (
            begin (
              panic "edge exists"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              adj (
                alist->hash-table (
                  _list
                )
              )
            )
          )
           (
            begin (
              call/cc (
                lambda (
                  break11
                )
                 (
                  letrec (
                    (
                      loop10 (
                        lambda (
                          xs
                        )
                         (
                          if (
                            null? xs
                          )
                           (
                            void
                          )
                           (
                            begin (
                              let (
                                (
                                  k (
                                    car xs
                                  )
                                )
                              )
                               (
                                begin (
                                  hash-table-set! adj k (
                                    hash-table-ref/default (
                                      hash-table-ref graph "adj"
                                    )
                                     k (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop10 (
                                cdr xs
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    loop10 (
                      hash-table-keys (
                        hash-table-ref graph "adj"
                      )
                    )
                  )
                )
              )
            )
             (
              let (
                (
                  list_s (
                    hash-table-ref/default adj s (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  set! list_s (
                    append list_s (
                      _list d
                    )
                  )
                )
                 (
                  hash-table-set! adj s list_s
                )
                 (
                  if (
                    not (
                      hash-table-ref graph "directed"
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          list_d (
                            hash-table-ref/default adj d (
                              void
                            )
                          )
                        )
                      )
                       (
                        begin (
                          set! list_d (
                            append list_d (
                              _list s
                            )
                          )
                        )
                         (
                          hash-table-set! adj d list_d
                        )
                      )
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  alist->hash-table (
                    _list (
                      cons "adj" adj
                    )
                     (
                      cons "directed" (
                        hash-table-ref graph "directed"
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        remove_edge graph s d
      )
       (
        begin (
          if (
            or (
              not (
                cond (
                  (
                    string? (
                      hash-table-ref graph "adj"
                    )
                  )
                   (
                    if (
                      string-contains (
                        hash-table-ref graph "adj"
                      )
                       s
                    )
                     #t #f
                  )
                )
                 (
                  (
                    hash-table? (
                      hash-table-ref graph "adj"
                    )
                  )
                   (
                    if (
                      hash-table-exists? (
                        hash-table-ref graph "adj"
                      )
                       s
                    )
                     #t #f
                  )
                )
                 (
                  else (
                    if (
                      member s (
                        hash-table-ref graph "adj"
                      )
                    )
                     #t #f
                  )
                )
              )
            )
             (
              not (
                cond (
                  (
                    string? (
                      hash-table-ref graph "adj"
                    )
                  )
                   (
                    if (
                      string-contains (
                        hash-table-ref graph "adj"
                      )
                       d
                    )
                     #t #f
                  )
                )
                 (
                  (
                    hash-table? (
                      hash-table-ref graph "adj"
                    )
                  )
                   (
                    if (
                      hash-table-exists? (
                        hash-table-ref graph "adj"
                      )
                       d
                    )
                     #t #f
                  )
                )
                 (
                  else (
                    if (
                      member d (
                        hash-table-ref graph "adj"
                      )
                    )
                     #t #f
                  )
                )
              )
            )
          )
           (
            begin (
              panic "vertex missing"
            )
          )
           (
            void
          )
        )
         (
          if (
            not (
              contains_edge graph s d
            )
          )
           (
            begin (
              panic "edge missing"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              adj (
                alist->hash-table (
                  _list
                )
              )
            )
          )
           (
            begin (
              call/cc (
                lambda (
                  break13
                )
                 (
                  letrec (
                    (
                      loop12 (
                        lambda (
                          xs
                        )
                         (
                          if (
                            null? xs
                          )
                           (
                            void
                          )
                           (
                            begin (
                              let (
                                (
                                  k (
                                    car xs
                                  )
                                )
                              )
                               (
                                begin (
                                  hash-table-set! adj k (
                                    hash-table-ref/default (
                                      hash-table-ref graph "adj"
                                    )
                                     k (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop12 (
                                cdr xs
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    loop12 (
                      hash-table-keys (
                        hash-table-ref graph "adj"
                      )
                    )
                  )
                )
              )
            )
             (
              hash-table-set! adj s (
                remove_from_list (
                  hash-table-ref/default adj s (
                    void
                  )
                )
                 d
              )
            )
             (
              if (
                not (
                  hash-table-ref graph "directed"
                )
              )
               (
                begin (
                  hash-table-set! adj d (
                    remove_from_list (
                      hash-table-ref/default adj d (
                        void
                      )
                    )
                     s
                  )
                )
              )
               (
                void
              )
            )
             (
              alist->hash-table (
                _list (
                  cons "adj" adj
                )
                 (
                  cons "directed" (
                    hash-table-ref graph "directed"
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        remove_vertex graph v
      )
       (
        begin (
          if (
            not (
              cond (
                (
                  string? (
                    hash-table-ref graph "adj"
                  )
                )
                 (
                  if (
                    string-contains (
                      hash-table-ref graph "adj"
                    )
                     v
                  )
                   #t #f
                )
              )
               (
                (
                  hash-table? (
                    hash-table-ref graph "adj"
                  )
                )
                 (
                  if (
                    hash-table-exists? (
                      hash-table-ref graph "adj"
                    )
                     v
                  )
                   #t #f
                )
              )
               (
                else (
                  if (
                    member v (
                      hash-table-ref graph "adj"
                    )
                  )
                   #t #f
                )
              )
            )
          )
           (
            begin (
              panic "vertex missing"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              adj (
                alist->hash-table (
                  _list
                )
              )
            )
          )
           (
            begin (
              call/cc (
                lambda (
                  break15
                )
                 (
                  letrec (
                    (
                      loop14 (
                        lambda (
                          xs
                        )
                         (
                          if (
                            null? xs
                          )
                           (
                            void
                          )
                           (
                            begin (
                              let (
                                (
                                  k (
                                    car xs
                                  )
                                )
                              )
                               (
                                begin (
                                  if (
                                    not (
                                      equal? k v
                                    )
                                  )
                                   (
                                    begin (
                                      hash-table-set! adj k (
                                        remove_from_list (
                                          hash-table-ref/default (
                                            hash-table-ref graph "adj"
                                          )
                                           k (
                                            void
                                          )
                                        )
                                         v
                                      )
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                             (
                              loop14 (
                                cdr xs
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    loop14 (
                      hash-table-keys (
                        hash-table-ref graph "adj"
                      )
                    )
                  )
                )
              )
            )
             (
              alist->hash-table (
                _list (
                  cons "adj" adj
                )
                 (
                  cons "directed" (
                    hash-table-ref graph "directed"
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        contains_vertex graph v
      )
       (
        cond (
          (
            string? (
              hash-table-ref graph "adj"
            )
          )
           (
            if (
              string-contains (
                hash-table-ref graph "adj"
              )
               v
            )
             #t #f
          )
        )
         (
          (
            hash-table? (
              hash-table-ref graph "adj"
            )
          )
           (
            if (
              hash-table-exists? (
                hash-table-ref graph "adj"
              )
               v
            )
             #t #f
          )
        )
         (
          else (
            if (
              member v (
                hash-table-ref graph "adj"
              )
            )
             #t #f
          )
        )
      )
    )
     (
      define (
        contains_edge graph s d
      )
       (
        call/cc (
          lambda (
            ret16
          )
           (
            begin (
              if (
                or (
                  not (
                    cond (
                      (
                        string? (
                          hash-table-ref graph "adj"
                        )
                      )
                       (
                        if (
                          string-contains (
                            hash-table-ref graph "adj"
                          )
                           s
                        )
                         #t #f
                      )
                    )
                     (
                      (
                        hash-table? (
                          hash-table-ref graph "adj"
                        )
                      )
                       (
                        if (
                          hash-table-exists? (
                            hash-table-ref graph "adj"
                          )
                           s
                        )
                         #t #f
                      )
                    )
                     (
                      else (
                        if (
                          member s (
                            hash-table-ref graph "adj"
                          )
                        )
                         #t #f
                      )
                    )
                  )
                )
                 (
                  not (
                    cond (
                      (
                        string? (
                          hash-table-ref graph "adj"
                        )
                      )
                       (
                        if (
                          string-contains (
                            hash-table-ref graph "adj"
                          )
                           d
                        )
                         #t #f
                      )
                    )
                     (
                      (
                        hash-table? (
                          hash-table-ref graph "adj"
                        )
                      )
                       (
                        if (
                          hash-table-exists? (
                            hash-table-ref graph "adj"
                          )
                           d
                        )
                         #t #f
                      )
                    )
                     (
                      else (
                        if (
                          member d (
                            hash-table-ref graph "adj"
                          )
                        )
                         #t #f
                      )
                    )
                  )
                )
              )
               (
                begin (
                  panic "vertex missing"
                )
              )
               (
                void
              )
            )
             (
              call/cc (
                lambda (
                  break18
                )
                 (
                  letrec (
                    (
                      loop17 (
                        lambda (
                          xs
                        )
                         (
                          if (
                            null? xs
                          )
                           (
                            void
                          )
                           (
                            begin (
                              let (
                                (
                                  x (
                                    car xs
                                  )
                                )
                              )
                               (
                                begin (
                                  if (
                                    equal? x d
                                  )
                                   (
                                    begin (
                                      ret16 #t
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                             (
                              loop17 (
                                cdr xs
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    loop17 (
                      hash-table-ref/default (
                        hash-table-ref graph "adj"
                      )
                       s (
                        void
                      )
                    )
                  )
                )
              )
            )
             (
              ret16 #f
            )
          )
        )
      )
    )
     (
      define (
        clear_graph graph
      )
       (
        alist->hash-table (
          _list (
            cons "adj" (
              alist->hash-table (
                _list
              )
            )
          )
           (
            cons "directed" (
              hash-table-ref graph "directed"
            )
          )
        )
      )
    )
     (
      define (
        to_string graph
      )
       (
        to-str-space (
          hash-table-ref graph "adj"
        )
      )
    )
     (
      define (
        main
      )
       (
        let (
          (
            vertices (
              _list "1" "2" "3" "4"
            )
          )
        )
         (
          begin (
            let (
              (
                edges (
                  _list (
                    _list "1" "2"
                  )
                   (
                    _list "2" "3"
                  )
                   (
                    _list "3" "4"
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    g (
                      create_graph vertices edges #f
                    )
                  )
                )
                 (
                  begin (
                    _display (
                      if (
                        string? (
                          to_string g
                        )
                      )
                       (
                        to_string g
                      )
                       (
                        to-str (
                          to_string g
                        )
                      )
                    )
                  )
                   (
                    newline
                  )
                   (
                    set! g (
                      add_vertex g "5"
                    )
                  )
                   (
                    set! g (
                      add_edge g "4" "5"
                    )
                  )
                   (
                    _display (
                      if (
                        string? (
                          to-str-space (
                            contains_edge g "4" "5"
                          )
                        )
                      )
                       (
                        to-str-space (
                          contains_edge g "4" "5"
                        )
                      )
                       (
                        to-str (
                          to-str-space (
                            contains_edge g "4" "5"
                          )
                        )
                      )
                    )
                  )
                   (
                    newline
                  )
                   (
                    set! g (
                      remove_edge g "1" "2"
                    )
                  )
                   (
                    set! g (
                      remove_vertex g "3"
                    )
                  )
                   (
                    _display (
                      if (
                        string? (
                          to_string g
                        )
                      )
                       (
                        to_string g
                      )
                       (
                        to-str (
                          to_string g
                        )
                      )
                    )
                  )
                   (
                    newline
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end20 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur21 (
              quotient (
                * (
                  - end20 start19
                )
                 1000000
              )
               jps22
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur21
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
