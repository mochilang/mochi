;; Generated by Mochi Scheme transpiler on 2025-08-14 17:09 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start11 (
        current-jiffy
      )
    )
     (
      jps14 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        new_graph
      )
       (
        alist->hash-table (
          _list (
            cons "edges" (
              _list
            )
          )
           (
            cons "num_nodes" 0
          )
        )
      )
    )
     (
      define (
        add_edge g u v w
      )
       (
        let (
          (
            es (
              hash-table-ref g "edges"
            )
          )
        )
         (
          begin (
            set! es (
              append es (
                _list (
                  alist->hash-table (
                    _list (
                      cons "u" u
                    )
                     (
                      cons "v" v
                    )
                     (
                      cons "w" w
                    )
                  )
                )
              )
            )
          )
           (
            let (
              (
                n (
                  hash-table-ref g "num_nodes"
                )
              )
            )
             (
              begin (
                if (
                  > u n
                )
                 (
                  begin (
                    set! n u
                  )
                )
                 (
                  void
                )
              )
               (
                if (
                  > v n
                )
                 (
                  begin (
                    set! n v
                  )
                )
                 (
                  void
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "edges" es
                  )
                   (
                    cons "num_nodes" n
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        make_ds n
      )
       (
        let (
          (
            parent (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                rank (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop1 (
                          lambda (
                            
                          )
                           (
                            if (
                              <= i n
                            )
                             (
                              begin (
                                set! parent (
                                  append parent (
                                    _list i
                                  )
                                )
                              )
                               (
                                set! rank (
                                  append rank (
                                    _list 0
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop1
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop1
                    )
                  )
                   (
                    alist->hash-table (
                      _list (
                        cons "parent" parent
                      )
                       (
                        cons "rank" rank
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        find_set ds x
      )
       (
        call/cc (
          lambda (
            ret2
          )
           (
            begin (
              if (
                equal? (
                  list-ref-safe (
                    hash-table-ref ds "parent"
                  )
                   x
                )
                 x
              )
               (
                begin (
                  ret2 (
                    alist->hash-table (
                      _list (
                        cons "ds" ds
                      )
                       (
                        cons "root" x
                      )
                    )
                  )
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  res (
                    find_set ds (
                      list-ref-safe (
                        hash-table-ref ds "parent"
                      )
                       x
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      p (
                        hash-table-ref (
                          hash-table-ref res "ds"
                        )
                         "parent"
                      )
                    )
                  )
                   (
                    begin (
                      list-set-safe! p x (
                        hash-table-ref res "root"
                      )
                    )
                     (
                      ret2 (
                        alist->hash-table (
                          _list (
                            cons "ds" (
                              alist->hash-table (
                                _list (
                                  cons "parent" p
                                )
                                 (
                                  cons "rank" (
                                    hash-table-ref (
                                      hash-table-ref res "ds"
                                    )
                                     "rank"
                                  )
                                )
                              )
                            )
                          )
                           (
                            cons "root" (
                              hash-table-ref res "root"
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        union_set ds x y
      )
       (
        call/cc (
          lambda (
            ret3
          )
           (
            let (
              (
                fx (
                  find_set ds x
                )
              )
            )
             (
              begin (
                let (
                  (
                    ds1 (
                      hash-table-ref fx "ds"
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        x_root (
                          hash-table-ref fx "root"
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            fy (
                              find_set ds1 y
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                ds2 (
                                  hash-table-ref fy "ds"
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    y_root (
                                      hash-table-ref fy "root"
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      equal? x_root y_root
                                    )
                                     (
                                      begin (
                                        ret3 ds2
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                   (
                                    let (
                                      (
                                        p (
                                          hash-table-ref ds2 "parent"
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            r (
                                              hash-table-ref ds2 "rank"
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              _gt (
                                                cond (
                                                  (
                                                    string? r
                                                  )
                                                   (
                                                    _substring r x_root (
                                                      + x_root 1
                                                    )
                                                  )
                                                )
                                                 (
                                                  (
                                                    hash-table? r
                                                  )
                                                   (
                                                    hash-table-ref r x_root
                                                  )
                                                )
                                                 (
                                                  else (
                                                    list-ref-safe r x_root
                                                  )
                                                )
                                              )
                                               (
                                                cond (
                                                  (
                                                    string? r
                                                  )
                                                   (
                                                    _substring r y_root (
                                                      + y_root 1
                                                    )
                                                  )
                                                )
                                                 (
                                                  (
                                                    hash-table? r
                                                  )
                                                   (
                                                    hash-table-ref r y_root
                                                  )
                                                )
                                                 (
                                                  else (
                                                    list-ref-safe r y_root
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                list-set-safe! p y_root x_root
                                              )
                                            )
                                             (
                                              begin (
                                                list-set-safe! p x_root y_root
                                              )
                                               (
                                                if (
                                                  equal? (
                                                    cond (
                                                      (
                                                        string? r
                                                      )
                                                       (
                                                        _substring r x_root (
                                                          + x_root 1
                                                        )
                                                      )
                                                    )
                                                     (
                                                      (
                                                        hash-table? r
                                                      )
                                                       (
                                                        hash-table-ref r x_root
                                                      )
                                                    )
                                                     (
                                                      else (
                                                        list-ref-safe r x_root
                                                      )
                                                    )
                                                  )
                                                   (
                                                    cond (
                                                      (
                                                        string? r
                                                      )
                                                       (
                                                        _substring r y_root (
                                                          + y_root 1
                                                        )
                                                      )
                                                    )
                                                     (
                                                      (
                                                        hash-table? r
                                                      )
                                                       (
                                                        hash-table-ref r y_root
                                                      )
                                                    )
                                                     (
                                                      else (
                                                        list-ref-safe r y_root
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    list-set-safe! r y_root (
                                                      _add (
                                                        cond (
                                                          (
                                                            string? r
                                                          )
                                                           (
                                                            _substring r y_root (
                                                              + y_root 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            hash-table? r
                                                          )
                                                           (
                                                            hash-table-ref r y_root
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            list-ref-safe r y_root
                                                          )
                                                        )
                                                      )
                                                       1
                                                    )
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                           (
                                            ret3 (
                                              alist->hash-table (
                                                _list (
                                                  cons "parent" p
                                                )
                                                 (
                                                  cons "rank" r
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        sort_edges edges
      )
       (
        let (
          (
            arr edges
          )
        )
         (
          begin (
            let (
              (
                i 1
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break5
                  )
                   (
                    letrec (
                      (
                        loop4 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len arr
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    key (
                                      list-ref-safe arr i
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        j (
                                          - i 1
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        call/cc (
                                          lambda (
                                            break7
                                          )
                                           (
                                            letrec (
                                              (
                                                loop6 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      >= j 0
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            temp (
                                                              list-ref-safe arr j
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            if (
                                                              or (
                                                                > (
                                                                  hash-table-ref temp "w"
                                                                )
                                                                 (
                                                                  hash-table-ref key "w"
                                                                )
                                                              )
                                                               (
                                                                and (
                                                                  equal? (
                                                                    hash-table-ref temp "w"
                                                                  )
                                                                   (
                                                                    hash-table-ref key "w"
                                                                  )
                                                                )
                                                                 (
                                                                  or (
                                                                    > (
                                                                      hash-table-ref temp "u"
                                                                    )
                                                                     (
                                                                      hash-table-ref key "u"
                                                                    )
                                                                  )
                                                                   (
                                                                    and (
                                                                      equal? (
                                                                        hash-table-ref temp "u"
                                                                      )
                                                                       (
                                                                        hash-table-ref key "u"
                                                                      )
                                                                    )
                                                                     (
                                                                      > (
                                                                        hash-table-ref temp "v"
                                                                      )
                                                                       (
                                                                        hash-table-ref key "v"
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                list-set-safe! arr (
                                                                  + j 1
                                                                )
                                                                 temp
                                                              )
                                                               (
                                                                set! j (
                                                                  - j 1
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                break7 (
                                                                  void
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop6
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop6
                                            )
                                          )
                                        )
                                      )
                                       (
                                        list-set-safe! arr (
                                          + j 1
                                        )
                                         key
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop4
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop4
                    )
                  )
                )
              )
               arr
            )
          )
        )
      )
    )
     (
      define (
        kruskal g
      )
       (
        let (
          (
            edges (
              sort_edges (
                hash-table-ref g "edges"
              )
            )
          )
        )
         (
          begin (
            let (
              (
                ds (
                  make_ds (
                    hash-table-ref g "num_nodes"
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    mst_edges (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            added 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop8 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      and (
                                        < added (
                                          - (
                                            hash-table-ref g "num_nodes"
                                          )
                                           1
                                        )
                                      )
                                       (
                                        < i (
                                          _len edges
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            e (
                                              cond (
                                                (
                                                  string? edges
                                                )
                                                 (
                                                  _substring edges i (
                                                    + i 1
                                                  )
                                                )
                                              )
                                               (
                                                (
                                                  hash-table? edges
                                                )
                                                 (
                                                  hash-table-ref edges i
                                                )
                                              )
                                               (
                                                else (
                                                  list-ref-safe edges i
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                           (
                                            let (
                                              (
                                                fu (
                                                  find_set ds (
                                                    hash-table-ref e "u"
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! ds (
                                                  hash-table-ref fu "ds"
                                                )
                                              )
                                               (
                                                let (
                                                  (
                                                    ru (
                                                      hash-table-ref fu "root"
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        fv (
                                                          find_set ds (
                                                            hash-table-ref e "v"
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! ds (
                                                          hash-table-ref fv "ds"
                                                        )
                                                      )
                                                       (
                                                        let (
                                                          (
                                                            rv (
                                                              hash-table-ref fv "root"
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            if (
                                                              not (
                                                                equal? ru rv
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                set! mst_edges (
                                                                  append mst_edges (
                                                                    _list e
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                set! added (
                                                                  + added 1
                                                                )
                                                              )
                                                               (
                                                                set! ds (
                                                                  union_set ds ru rv
                                                                )
                                                              )
                                                            )
                                                             (
                                                              void
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop8
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop8
                            )
                          )
                           (
                            alist->hash-table (
                              _list (
                                cons "edges" mst_edges
                              )
                               (
                                cons "num_nodes" (
                                  hash-table-ref g "num_nodes"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        print_mst g
      )
       (
        let (
          (
            es (
              sort_edges (
                hash-table-ref g "edges"
              )
            )
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break10
              )
               (
                letrec (
                  (
                    loop9 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                e (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                _display (
                                  if (
                                    string? (
                                      string-append (
                                        string-append (
                                          string-append (
                                            string-append (
                                              to-str-space (
                                                hash-table-ref e "u"
                                              )
                                            )
                                             "-"
                                          )
                                           (
                                            to-str-space (
                                              hash-table-ref e "v"
                                            )
                                          )
                                        )
                                         ":"
                                      )
                                       (
                                        to-str-space (
                                          hash-table-ref e "w"
                                        )
                                      )
                                    )
                                  )
                                   (
                                    string-append (
                                      string-append (
                                        string-append (
                                          string-append (
                                            to-str-space (
                                              hash-table-ref e "u"
                                            )
                                          )
                                           "-"
                                        )
                                         (
                                          to-str-space (
                                            hash-table-ref e "v"
                                          )
                                        )
                                      )
                                       ":"
                                    )
                                     (
                                      to-str-space (
                                        hash-table-ref e "w"
                                      )
                                    )
                                  )
                                   (
                                    to-str (
                                      string-append (
                                        string-append (
                                          string-append (
                                            string-append (
                                              to-str-space (
                                                hash-table-ref e "u"
                                              )
                                            )
                                             "-"
                                          )
                                           (
                                            to-str-space (
                                              hash-table-ref e "v"
                                            )
                                          )
                                        )
                                         ":"
                                      )
                                       (
                                        to-str-space (
                                          hash-table-ref e "w"
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                newline
                              )
                            )
                          )
                           (
                            loop9 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop9 es
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        let (
          (
            g (
              new_graph
            )
          )
        )
         (
          begin (
            set! g (
              add_edge g 1 2 1
            )
          )
           (
            set! g (
              add_edge g 2 3 2
            )
          )
           (
            set! g (
              add_edge g 3 4 1
            )
          )
           (
            set! g (
              add_edge g 3 5 100
            )
          )
           (
            set! g (
              add_edge g 4 5 5
            )
          )
           (
            let (
              (
                mst (
                  kruskal g
                )
              )
            )
             (
              begin (
                print_mst mst
              )
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end12 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur13 (
              quotient (
                * (
                  - end12 start11
                )
                 1000000
              )
               jps14
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur13
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
