;; Generated by Mochi Scheme transpiler on 2025-08-14 15:52 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time) (srfi 98))
(define _now_seeded #f)
(define _now_seed 0)
(define (now)
  (when (not _now_seeded)
    (let ((s (get-environment-variable "MOCHI_NOW_SEED")))
      (when (and s (string->number s))
        (set! _now_seed (string->number s))
        (set! _now_seeded #t))))
  (if _now_seeded
      (begin
        (set! _now_seed (modulo (+ (* _now_seed 1664525) 1013904223) 2147483647))
        _now_seed)
      (exact (floor (* (current-second) 1000000000))))
)
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start54 (
        current-jiffy
      )
    )
     (
      jps57 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        list_contains_int xs x
      )
       (
        call/cc (
          lambda (
            ret1
          )
           (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len xs
                          )
                        )
                         (
                          begin (
                            if (
                              equal? (
                                list-ref-safe xs i
                              )
                               x
                            )
                             (
                              begin (
                                ret1 #t
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               (
                ret1 #f
              )
            )
          )
        )
      )
    )
     (
      define (
        edge_exists edges w v
      )
       (
        call/cc (
          lambda (
            ret3
          )
           (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop4 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len edges
                          )
                        )
                         (
                          begin (
                            if (
                              and (
                                equal? (
                                  cond (
                                    (
                                      string? (
                                        list-ref-safe edges i
                                      )
                                    )
                                     (
                                      _substring (
                                        list-ref-safe edges i
                                      )
                                       0 (
                                        + 0 1
                                      )
                                    )
                                  )
                                   (
                                    (
                                      hash-table? (
                                        list-ref-safe edges i
                                      )
                                    )
                                     (
                                      hash-table-ref (
                                        list-ref-safe edges i
                                      )
                                       0
                                    )
                                  )
                                   (
                                    else (
                                      list-ref-safe (
                                        list-ref-safe edges i
                                      )
                                       0
                                    )
                                  )
                                )
                                 w
                              )
                               (
                                equal? (
                                  cond (
                                    (
                                      string? (
                                        list-ref-safe edges i
                                      )
                                    )
                                     (
                                      _substring (
                                        list-ref-safe edges i
                                      )
                                       1 (
                                        + 1 1
                                      )
                                    )
                                  )
                                   (
                                    (
                                      hash-table? (
                                        list-ref-safe edges i
                                      )
                                    )
                                     (
                                      hash-table-ref (
                                        list-ref-safe edges i
                                      )
                                       1
                                    )
                                  )
                                   (
                                    else (
                                      list-ref-safe (
                                        list-ref-safe edges i
                                      )
                                       1
                                    )
                                  )
                                )
                                 v
                              )
                            )
                             (
                              begin (
                                ret3 #t
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop4
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop4
                )
              )
               (
                ret3 #f
              )
            )
          )
        )
      )
    )
     (
      define (
        first_key m
      )
       (
        call/cc (
          lambda (
            ret5
          )
           (
            begin (
              call/cc (
                lambda (
                  break7
                )
                 (
                  letrec (
                    (
                      loop6 (
                        lambda (
                          xs
                        )
                         (
                          if (
                            null? xs
                          )
                           (
                            void
                          )
                           (
                            begin (
                              let (
                                (
                                  k (
                                    car xs
                                  )
                                )
                              )
                               (
                                begin (
                                  ret5 k
                                )
                              )
                            )
                             (
                              loop6 (
                                cdr xs
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    loop6 (
                      hash-table-keys m
                    )
                  )
                )
              )
            )
             (
              ret5 0
            )
          )
        )
      )
    )
     (
      define (
        rand_range low high
      )
       (
        + (
          _mod (
            now
          )
           (
            - high low
          )
        )
         low
      )
    )
     (
      define (
        dg_make_graph
      )
       (
        alist->hash-table (
          _list (
            cons "graph" (
              alist->hash-table (
                _list
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_add_pair g u v w
      )
       (
        begin (
          if (
            cond (
              (
                string? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  string-contains (
                    hash-table-ref g "graph"
                  )
                   u
                )
                 #t #f
              )
            )
             (
              (
                hash-table? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  hash-table-exists? (
                    hash-table-ref g "graph"
                  )
                   u
                )
                 #t #f
              )
            )
             (
              else (
                if (
                  member u (
                    hash-table-ref g "graph"
                  )
                )
                 #t #f
              )
            )
          )
           (
            begin (
              let (
                (
                  edges (
                    hash-table-ref/default (
                      hash-table-ref g "graph"
                    )
                     u (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  if (
                    not (
                      edge_exists edges w v
                    )
                  )
                   (
                    begin (
                      set! edges (
                        append edges (
                          _list (
                            _list w v
                          )
                        )
                      )
                    )
                     (
                      let (
                        (
                          m (
                            hash-table-ref g "graph"
                          )
                        )
                      )
                       (
                        begin (
                          hash-table-set! m u edges
                        )
                         (
                          hash-table-set! g "graph" m
                        )
                      )
                    )
                  )
                   (
                    void
                  )
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  m0 (
                    hash-table-ref g "graph"
                  )
                )
              )
               (
                begin (
                  hash-table-set! m0 u (
                    _list (
                      _list w v
                    )
                  )
                )
                 (
                  hash-table-set! g "graph" m0
                )
              )
            )
          )
        )
         (
          if (
            not (
              cond (
                (
                  string? (
                    hash-table-ref g "graph"
                  )
                )
                 (
                  if (
                    string-contains (
                      hash-table-ref g "graph"
                    )
                     v
                  )
                   #t #f
                )
              )
               (
                (
                  hash-table? (
                    hash-table-ref g "graph"
                  )
                )
                 (
                  if (
                    hash-table-exists? (
                      hash-table-ref g "graph"
                    )
                     v
                  )
                   #t #f
                )
              )
               (
                else (
                  if (
                    member v (
                      hash-table-ref g "graph"
                    )
                  )
                   #t #f
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  m1 (
                    hash-table-ref g "graph"
                  )
                )
              )
               (
                begin (
                  hash-table-set! m1 v (
                    _list
                  )
                )
                 (
                  hash-table-set! g "graph" m1
                )
              )
            )
          )
           (
            void
          )
        )
      )
    )
     (
      define (
        dg_remove_pair g u v
      )
       (
        if (
          cond (
            (
              string? (
                hash-table-ref g "graph"
              )
            )
             (
              if (
                string-contains (
                  hash-table-ref g "graph"
                )
                 u
              )
               #t #f
            )
          )
           (
            (
              hash-table? (
                hash-table-ref g "graph"
              )
            )
             (
              if (
                hash-table-exists? (
                  hash-table-ref g "graph"
                )
                 u
              )
               #t #f
            )
          )
           (
            else (
              if (
                member u (
                  hash-table-ref g "graph"
                )
              )
               #t #f
            )
          )
        )
         (
          begin (
            let (
              (
                edges (
                  hash-table-ref/default (
                    hash-table-ref g "graph"
                  )
                   u (
                    void
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    new_edges (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop8 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len edges
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      not (
                                        equal? (
                                          cond (
                                            (
                                              string? (
                                                list-ref-safe edges i
                                              )
                                            )
                                             (
                                              _substring (
                                                list-ref-safe edges i
                                              )
                                               1 (
                                                + 1 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? (
                                                list-ref-safe edges i
                                              )
                                            )
                                             (
                                              hash-table-ref (
                                                list-ref-safe edges i
                                              )
                                               1
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe (
                                                list-ref-safe edges i
                                              )
                                               1
                                            )
                                          )
                                        )
                                         v
                                      )
                                    )
                                     (
                                      begin (
                                        set! new_edges (
                                          append new_edges (
                                            _list (
                                              list-ref-safe edges i
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop8
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop8
                        )
                      )
                       (
                        let (
                          (
                            m (
                              hash-table-ref g "graph"
                            )
                          )
                        )
                         (
                          begin (
                            hash-table-set! m u new_edges
                          )
                           (
                            hash-table-set! g "graph" m
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
         (
          void
        )
      )
    )
     (
      define (
        dg_all_nodes g
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break10
              )
               (
                letrec (
                  (
                    loop9 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                k (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                set! res (
                                  append res (
                                    _list k
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop9 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop9 (
                    hash-table-keys (
                      hash-table-ref g "graph"
                    )
                  )
                )
              )
            )
          )
           res
        )
      )
    )
     (
      define (
        dg_dfs_util g node visited order d
      )
       (
        call/cc (
          lambda (
            ret11
          )
           (
            begin (
              hash-table-set! visited node #t
            )
             (
              set! order (
                append order (
                  _list node
                )
              )
            )
             (
              if (
                and (
                  not (
                    equal? d (
                      - 1
                    )
                  )
                )
                 (
                  equal? node d
                )
              )
               (
                begin (
                  ret11 order
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  edges (
                    hash-table-ref/default (
                      hash-table-ref g "graph"
                    )
                     node (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop12 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i (
                                  _len edges
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      neigh (
                                        cond (
                                          (
                                            string? (
                                              list-ref-safe edges i
                                            )
                                          )
                                           (
                                            _substring (
                                              list-ref-safe edges i
                                            )
                                             1 (
                                              + 1 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? (
                                              list-ref-safe edges i
                                            )
                                          )
                                           (
                                            hash-table-ref (
                                              list-ref-safe edges i
                                            )
                                             1
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe (
                                              list-ref-safe edges i
                                            )
                                             1
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      if (
                                        not (
                                          cond (
                                            (
                                              string? visited
                                            )
                                             (
                                              if (
                                                string-contains visited neigh
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            (
                                              hash-table? visited
                                            )
                                             (
                                              if (
                                                hash-table-exists? visited neigh
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            else (
                                              if (
                                                member neigh visited
                                              )
                                               #t #f
                                            )
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          set! order (
                                            dg_dfs_util g neigh visited order d
                                          )
                                        )
                                         (
                                          if (
                                            and (
                                              not (
                                                equal? d (
                                                  - 1
                                                )
                                              )
                                            )
                                             (
                                              equal? (
                                                list-ref-safe order (
                                                  - (
                                                    _len order
                                                  )
                                                   1
                                                )
                                              )
                                               d
                                            )
                                          )
                                           (
                                            begin (
                                              ret11 order
                                            )
                                          )
                                           (
                                            void
                                          )
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop12
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop12
                      )
                    )
                     (
                      ret11 order
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_dfs g s d
      )
       (
        call/cc (
          lambda (
            ret13
          )
           (
            begin (
              if (
                equal? s d
              )
               (
                begin (
                  ret13 (
                    _list
                  )
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  start (
                    if (
                      equal? s (
                        - 2
                      )
                    )
                     (
                      first_key (
                        hash-table-ref g "graph"
                      )
                    )
                     s
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      visited (
                        alist->hash-table (
                          _list
                        )
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          order (
                            _list
                          )
                        )
                      )
                       (
                        begin (
                          set! order (
                            dg_dfs_util g start visited order d
                          )
                        )
                         (
                          ret13 order
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_bfs g s
      )
       (
        let (
          (
            queue (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                visited (
                  alist->hash-table (
                    _list
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    order (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        start (
                          if (
                            equal? s (
                              - 2
                            )
                          )
                           (
                            first_key (
                              hash-table-ref g "graph"
                            )
                          )
                           s
                        )
                      )
                    )
                     (
                      begin (
                        set! queue (
                          append queue (
                            _list start
                          )
                        )
                      )
                       (
                        hash-table-set! visited start #t
                      )
                       (
                        letrec (
                          (
                            loop14 (
                              lambda (
                                
                              )
                               (
                                if (
                                  > (
                                    _len queue
                                  )
                                   0
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        node (
                                          list-ref-safe queue 0
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! queue (
                                          take (
                                            drop queue 1
                                          )
                                           (
                                            - (
                                              _len queue
                                            )
                                             1
                                          )
                                        )
                                      )
                                       (
                                        set! order (
                                          append order (
                                            _list node
                                          )
                                        )
                                      )
                                       (
                                        let (
                                          (
                                            edges (
                                              hash-table-ref/default (
                                                hash-table-ref g "graph"
                                              )
                                               node (
                                                void
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                i 0
                                              )
                                            )
                                             (
                                              begin (
                                                letrec (
                                                  (
                                                    loop15 (
                                                      lambda (
                                                        
                                                      )
                                                       (
                                                        if (
                                                          < i (
                                                            _len edges
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                neigh (
                                                                  cond (
                                                                    (
                                                                      string? (
                                                                        list-ref-safe edges i
                                                                      )
                                                                    )
                                                                     (
                                                                      _substring (
                                                                        list-ref-safe edges i
                                                                      )
                                                                       1 (
                                                                        + 1 1
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    (
                                                                      hash-table? (
                                                                        list-ref-safe edges i
                                                                      )
                                                                    )
                                                                     (
                                                                      hash-table-ref (
                                                                        list-ref-safe edges i
                                                                      )
                                                                       1
                                                                    )
                                                                  )
                                                                   (
                                                                    else (
                                                                      list-ref-safe (
                                                                        list-ref-safe edges i
                                                                      )
                                                                       1
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                if (
                                                                  not (
                                                                    cond (
                                                                      (
                                                                        string? visited
                                                                      )
                                                                       (
                                                                        if (
                                                                          string-contains visited neigh
                                                                        )
                                                                         #t #f
                                                                      )
                                                                    )
                                                                     (
                                                                      (
                                                                        hash-table? visited
                                                                      )
                                                                       (
                                                                        if (
                                                                          hash-table-exists? visited neigh
                                                                        )
                                                                         #t #f
                                                                      )
                                                                    )
                                                                     (
                                                                      else (
                                                                        if (
                                                                          member neigh visited
                                                                        )
                                                                         #t #f
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    set! queue (
                                                                      append queue (
                                                                        _list neigh
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    hash-table-set! visited neigh #t
                                                                  )
                                                                )
                                                                 (
                                                                  void
                                                                )
                                                              )
                                                               (
                                                                set! i (
                                                                  + i 1
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            loop15
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop15
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop14
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop14
                        )
                      )
                       order
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_in_degree g u
      )
       (
        let (
          (
            count 0
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break17
              )
               (
                letrec (
                  (
                    loop16 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                k (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    edges (
                                      hash-table-ref/default (
                                        hash-table-ref g "graph"
                                      )
                                       k (
                                        void
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        i 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop18 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < i (
                                                    _len edges
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      equal? (
                                                        cond (
                                                          (
                                                            string? (
                                                              list-ref-safe edges i
                                                            )
                                                          )
                                                           (
                                                            _substring (
                                                              list-ref-safe edges i
                                                            )
                                                             1 (
                                                              + 1 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            hash-table? (
                                                              list-ref-safe edges i
                                                            )
                                                          )
                                                           (
                                                            hash-table-ref (
                                                              list-ref-safe edges i
                                                            )
                                                             1
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            list-ref-safe (
                                                              list-ref-safe edges i
                                                            )
                                                             1
                                                          )
                                                        )
                                                      )
                                                       u
                                                    )
                                                     (
                                                      begin (
                                                        set! count (
                                                          + count 1
                                                        )
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    set! i (
                                                      + i 1
                                                    )
                                                  )
                                                   (
                                                    loop18
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop18
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop16 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop16 (
                    hash-table-keys (
                      hash-table-ref g "graph"
                    )
                  )
                )
              )
            )
          )
           count
        )
      )
    )
     (
      define (
        dg_out_degree g u
      )
       (
        call/cc (
          lambda (
            ret19
          )
           (
            begin (
              if (
                cond (
                  (
                    string? (
                      hash-table-ref g "graph"
                    )
                  )
                   (
                    if (
                      string-contains (
                        hash-table-ref g "graph"
                      )
                       u
                    )
                     #t #f
                  )
                )
                 (
                  (
                    hash-table? (
                      hash-table-ref g "graph"
                    )
                  )
                   (
                    if (
                      hash-table-exists? (
                        hash-table-ref g "graph"
                      )
                       u
                    )
                     #t #f
                  )
                )
                 (
                  else (
                    if (
                      member u (
                        hash-table-ref g "graph"
                      )
                    )
                     #t #f
                  )
                )
              )
               (
                begin (
                  ret19 (
                    _len (
                      hash-table-ref/default (
                        hash-table-ref g "graph"
                      )
                       u (
                        void
                      )
                    )
                  )
                )
              )
               (
                void
              )
            )
             (
              ret19 0
            )
          )
        )
      )
    )
     (
      define (
        dg_topo_util g node visited stack
      )
       (
        begin (
          hash-table-set! visited node #t
        )
         (
          let (
            (
              edges (
                hash-table-ref/default (
                  hash-table-ref g "graph"
                )
                 node (
                  void
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  i 0
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop20 (
                        lambda (
                          
                        )
                         (
                          if (
                            < i (
                              _len edges
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  neigh (
                                    cond (
                                      (
                                        string? (
                                          list-ref-safe edges i
                                        )
                                      )
                                       (
                                        _substring (
                                          list-ref-safe edges i
                                        )
                                         1 (
                                          + 1 1
                                        )
                                      )
                                    )
                                     (
                                      (
                                        hash-table? (
                                          list-ref-safe edges i
                                        )
                                      )
                                       (
                                        hash-table-ref (
                                          list-ref-safe edges i
                                        )
                                         1
                                      )
                                    )
                                     (
                                      else (
                                        list-ref-safe (
                                          list-ref-safe edges i
                                        )
                                         1
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                begin (
                                  if (
                                    not (
                                      cond (
                                        (
                                          string? visited
                                        )
                                         (
                                          if (
                                            string-contains visited neigh
                                          )
                                           #t #f
                                        )
                                      )
                                       (
                                        (
                                          hash-table? visited
                                        )
                                         (
                                          if (
                                            hash-table-exists? visited neigh
                                          )
                                           #t #f
                                        )
                                      )
                                       (
                                        else (
                                          if (
                                            member neigh visited
                                          )
                                           #t #f
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      set! stack (
                                        dg_topo_util g neigh visited stack
                                      )
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                              )
                            )
                             (
                              loop20
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop20
                  )
                )
                 (
                  set! stack (
                    append stack (
                      _list node
                    )
                  )
                )
                 stack
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_topological_sort g
      )
       (
        let (
          (
            visited (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            let (
              (
                stack (
                  _list
                )
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break22
                  )
                   (
                    letrec (
                      (
                        loop21 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    k (
                                      car xs
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      not (
                                        cond (
                                          (
                                            string? visited
                                          )
                                           (
                                            if (
                                              string-contains visited k
                                            )
                                             #t #f
                                          )
                                        )
                                         (
                                          (
                                            hash-table? visited
                                          )
                                           (
                                            if (
                                              hash-table-exists? visited k
                                            )
                                             #t #f
                                          )
                                        )
                                         (
                                          else (
                                            if (
                                              member k visited
                                            )
                                             #t #f
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! stack (
                                          dg_topo_util g k visited stack
                                        )
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                               (
                                loop21 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop21 (
                        hash-table-keys (
                          hash-table-ref g "graph"
                        )
                      )
                    )
                  )
                )
              )
               (
                let (
                  (
                    res (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i (
                          - (
                            _len stack
                          )
                           1
                        )
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop23 (
                              lambda (
                                
                              )
                               (
                                if (
                                  >= i 0
                                )
                                 (
                                  begin (
                                    set! res (
                                      append res (
                                        _list (
                                          list-ref-safe stack i
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      - i 1
                                    )
                                  )
                                   (
                                    loop23
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop23
                        )
                      )
                       res
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_cycle_util g node visited rec res
      )
       (
        begin (
          hash-table-set! visited node #t
        )
         (
          hash-table-set! rec node #t
        )
         (
          let (
            (
              edges (
                hash-table-ref/default (
                  hash-table-ref g "graph"
                )
                 node (
                  void
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  i 0
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop24 (
                        lambda (
                          
                        )
                         (
                          if (
                            < i (
                              _len edges
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  neigh (
                                    cond (
                                      (
                                        string? (
                                          list-ref-safe edges i
                                        )
                                      )
                                       (
                                        _substring (
                                          list-ref-safe edges i
                                        )
                                         1 (
                                          + 1 1
                                        )
                                      )
                                    )
                                     (
                                      (
                                        hash-table? (
                                          list-ref-safe edges i
                                        )
                                      )
                                       (
                                        hash-table-ref (
                                          list-ref-safe edges i
                                        )
                                         1
                                      )
                                    )
                                     (
                                      else (
                                        list-ref-safe (
                                          list-ref-safe edges i
                                        )
                                         1
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                begin (
                                  if (
                                    not (
                                      cond (
                                        (
                                          string? visited
                                        )
                                         (
                                          if (
                                            string-contains visited neigh
                                          )
                                           #t #f
                                        )
                                      )
                                       (
                                        (
                                          hash-table? visited
                                        )
                                         (
                                          if (
                                            hash-table-exists? visited neigh
                                          )
                                           #t #f
                                        )
                                      )
                                       (
                                        else (
                                          if (
                                            member neigh visited
                                          )
                                           #t #f
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      set! res (
                                        dg_cycle_util g neigh visited rec res
                                      )
                                    )
                                  )
                                   (
                                    if (
                                      hash-table-ref/default rec neigh (
                                        void
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          not (
                                            list_contains_int res neigh
                                          )
                                        )
                                         (
                                          begin (
                                            set! res (
                                              append res (
                                                _list neigh
                                              )
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                       (
                                        if (
                                          not (
                                            list_contains_int res node
                                          )
                                        )
                                         (
                                          begin (
                                            set! res (
                                              append res (
                                                _list node
                                              )
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                              )
                            )
                             (
                              loop24
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop24
                  )
                )
                 (
                  hash-table-set! rec node #f
                )
                 res
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_cycle_nodes g
      )
       (
        let (
          (
            visited (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            let (
              (
                rec (
                  alist->hash-table (
                    _list
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    res (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    call/cc (
                      lambda (
                        break26
                      )
                       (
                        letrec (
                          (
                            loop25 (
                              lambda (
                                xs
                              )
                               (
                                if (
                                  null? xs
                                )
                                 (
                                  void
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        k (
                                          car xs
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          not (
                                            cond (
                                              (
                                                string? visited
                                              )
                                               (
                                                if (
                                                  string-contains visited k
                                                )
                                                 #t #f
                                              )
                                            )
                                             (
                                              (
                                                hash-table? visited
                                              )
                                               (
                                                if (
                                                  hash-table-exists? visited k
                                                )
                                                 #t #f
                                              )
                                            )
                                             (
                                              else (
                                                if (
                                                  member k visited
                                                )
                                                 #t #f
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            set! res (
                                              dg_cycle_util g k visited rec res
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop25 (
                                      cdr xs
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          loop25 (
                            hash-table-keys (
                              hash-table-ref g "graph"
                            )
                          )
                        )
                      )
                    )
                  )
                   res
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_has_cycle_util g node visited rec
      )
       (
        call/cc (
          lambda (
            ret27
          )
           (
            begin (
              hash-table-set! visited node #t
            )
             (
              hash-table-set! rec node #t
            )
             (
              let (
                (
                  edges (
                    hash-table-ref/default (
                      hash-table-ref g "graph"
                    )
                     node (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop28 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i (
                                  _len edges
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      neigh (
                                        cond (
                                          (
                                            string? (
                                              list-ref-safe edges i
                                            )
                                          )
                                           (
                                            _substring (
                                              list-ref-safe edges i
                                            )
                                             1 (
                                              + 1 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? (
                                              list-ref-safe edges i
                                            )
                                          )
                                           (
                                            hash-table-ref (
                                              list-ref-safe edges i
                                            )
                                             1
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe (
                                              list-ref-safe edges i
                                            )
                                             1
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      if (
                                        not (
                                          cond (
                                            (
                                              string? visited
                                            )
                                             (
                                              if (
                                                string-contains visited neigh
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            (
                                              hash-table? visited
                                            )
                                             (
                                              if (
                                                hash-table-exists? visited neigh
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            else (
                                              if (
                                                member neigh visited
                                              )
                                               #t #f
                                            )
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          if (
                                            dg_has_cycle_util g neigh visited rec
                                          )
                                           (
                                            begin (
                                              ret27 #t
                                            )
                                          )
                                           (
                                            void
                                          )
                                        )
                                      )
                                       (
                                        if (
                                          hash-table-ref/default rec neigh (
                                            void
                                          )
                                        )
                                         (
                                          begin (
                                            ret27 #t
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop28
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop28
                      )
                    )
                     (
                      hash-table-set! rec node #f
                    )
                     (
                      ret27 #f
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_has_cycle g
      )
       (
        call/cc (
          lambda (
            ret29
          )
           (
            let (
              (
                visited (
                  alist->hash-table (
                    _list
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    rec (
                      alist->hash-table (
                        _list
                      )
                    )
                  )
                )
                 (
                  begin (
                    call/cc (
                      lambda (
                        break31
                      )
                       (
                        letrec (
                          (
                            loop30 (
                              lambda (
                                xs
                              )
                               (
                                if (
                                  null? xs
                                )
                                 (
                                  void
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        k (
                                          car xs
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          not (
                                            cond (
                                              (
                                                string? visited
                                              )
                                               (
                                                if (
                                                  string-contains visited k
                                                )
                                                 #t #f
                                              )
                                            )
                                             (
                                              (
                                                hash-table? visited
                                              )
                                               (
                                                if (
                                                  hash-table-exists? visited k
                                                )
                                                 #t #f
                                              )
                                            )
                                             (
                                              else (
                                                if (
                                                  member k visited
                                                )
                                                 #t #f
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              dg_has_cycle_util g k visited rec
                                            )
                                             (
                                              begin (
                                                ret29 #t
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop30 (
                                      cdr xs
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          loop30 (
                            hash-table-keys (
                              hash-table-ref g "graph"
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    ret29 #f
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_fill_graph_randomly g c
      )
       (
        let (
          (
            count c
          )
        )
         (
          begin (
            if (
              equal? count (
                - 1
              )
            )
             (
              begin (
                set! count (
                  rand_range 10 10010
                )
              )
            )
             (
              void
            )
          )
           (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop32 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i count
                        )
                         (
                          begin (
                            let (
                              (
                                edge_count (
                                  rand_range 1 103
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    j 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop33 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              _lt j edge_count
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    n (
                                                      rand_range 0 count
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      not (
                                                        equal? n i
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        dg_add_pair g i n 1
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                loop33
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop33
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop32
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop32
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_dfs_time g s e
      )
       (
        let (
          (
            begin (
              now
            )
          )
        )
         (
          begin (
            dg_dfs g s e
          )
           (
            let (
              (
                end (
                  now
                )
              )
            )
             (
              begin (
                - end begin
              )
            )
          )
        )
      )
    )
     (
      define (
        dg_bfs_time g s
      )
       (
        let (
          (
            begin (
              now
            )
          )
        )
         (
          begin (
            dg_bfs g s
          )
           (
            let (
              (
                end (
                  now
                )
              )
            )
             (
              begin (
                - end begin
              )
            )
          )
        )
      )
    )
     (
      define (
        g_make_graph
      )
       (
        alist->hash-table (
          _list (
            cons "graph" (
              alist->hash-table (
                _list
              )
            )
          )
        )
      )
    )
     (
      define (
        g_add_pair g u v w
      )
       (
        begin (
          if (
            cond (
              (
                string? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  string-contains (
                    hash-table-ref g "graph"
                  )
                   u
                )
                 #t #f
              )
            )
             (
              (
                hash-table? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  hash-table-exists? (
                    hash-table-ref g "graph"
                  )
                   u
                )
                 #t #f
              )
            )
             (
              else (
                if (
                  member u (
                    hash-table-ref g "graph"
                  )
                )
                 #t #f
              )
            )
          )
           (
            begin (
              let (
                (
                  edges (
                    hash-table-ref/default (
                      hash-table-ref g "graph"
                    )
                     u (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  if (
                    not (
                      edge_exists edges w v
                    )
                  )
                   (
                    begin (
                      set! edges (
                        append edges (
                          _list (
                            _list w v
                          )
                        )
                      )
                    )
                     (
                      let (
                        (
                          m (
                            hash-table-ref g "graph"
                          )
                        )
                      )
                       (
                        begin (
                          hash-table-set! m u edges
                        )
                         (
                          hash-table-set! g "graph" m
                        )
                      )
                    )
                  )
                   (
                    void
                  )
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  m0 (
                    hash-table-ref g "graph"
                  )
                )
              )
               (
                begin (
                  hash-table-set! m0 u (
                    _list (
                      _list w v
                    )
                  )
                )
                 (
                  hash-table-set! g "graph" m0
                )
              )
            )
          )
        )
         (
          if (
            cond (
              (
                string? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  string-contains (
                    hash-table-ref g "graph"
                  )
                   v
                )
                 #t #f
              )
            )
             (
              (
                hash-table? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  hash-table-exists? (
                    hash-table-ref g "graph"
                  )
                   v
                )
                 #t #f
              )
            )
             (
              else (
                if (
                  member v (
                    hash-table-ref g "graph"
                  )
                )
                 #t #f
              )
            )
          )
           (
            begin (
              let (
                (
                  edges2 (
                    hash-table-ref/default (
                      hash-table-ref g "graph"
                    )
                     v (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  if (
                    not (
                      edge_exists edges2 w u
                    )
                  )
                   (
                    begin (
                      set! edges2 (
                        append edges2 (
                          _list (
                            _list w u
                          )
                        )
                      )
                    )
                     (
                      let (
                        (
                          m2 (
                            hash-table-ref g "graph"
                          )
                        )
                      )
                       (
                        begin (
                          hash-table-set! m2 v edges2
                        )
                         (
                          hash-table-set! g "graph" m2
                        )
                      )
                    )
                  )
                   (
                    void
                  )
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  m3 (
                    hash-table-ref g "graph"
                  )
                )
              )
               (
                begin (
                  hash-table-set! m3 v (
                    _list (
                      _list w u
                    )
                  )
                )
                 (
                  hash-table-set! g "graph" m3
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        g_remove_pair g u v
      )
       (
        begin (
          if (
            cond (
              (
                string? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  string-contains (
                    hash-table-ref g "graph"
                  )
                   u
                )
                 #t #f
              )
            )
             (
              (
                hash-table? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  hash-table-exists? (
                    hash-table-ref g "graph"
                  )
                   u
                )
                 #t #f
              )
            )
             (
              else (
                if (
                  member u (
                    hash-table-ref g "graph"
                  )
                )
                 #t #f
              )
            )
          )
           (
            begin (
              let (
                (
                  edges (
                    hash-table-ref/default (
                      hash-table-ref g "graph"
                    )
                     u (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      new_edges (
                        _list
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          i 0
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop34 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    < i (
                                      _len edges
                                    )
                                  )
                                   (
                                    begin (
                                      if (
                                        not (
                                          equal? (
                                            cond (
                                              (
                                                string? (
                                                  list-ref-safe edges i
                                                )
                                              )
                                               (
                                                _substring (
                                                  list-ref-safe edges i
                                                )
                                                 1 (
                                                  + 1 1
                                                )
                                              )
                                            )
                                             (
                                              (
                                                hash-table? (
                                                  list-ref-safe edges i
                                                )
                                              )
                                               (
                                                hash-table-ref (
                                                  list-ref-safe edges i
                                                )
                                                 1
                                              )
                                            )
                                             (
                                              else (
                                                list-ref-safe (
                                                  list-ref-safe edges i
                                                )
                                                 1
                                              )
                                            )
                                          )
                                           v
                                        )
                                      )
                                       (
                                        begin (
                                          set! new_edges (
                                            append new_edges (
                                              _list (
                                                list-ref-safe edges i
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 1
                                      )
                                    )
                                     (
                                      loop34
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop34
                          )
                        )
                         (
                          let (
                            (
                              m (
                                hash-table-ref g "graph"
                              )
                            )
                          )
                           (
                            begin (
                              hash-table-set! m u new_edges
                            )
                             (
                              hash-table-set! g "graph" m
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
           (
            void
          )
        )
         (
          if (
            cond (
              (
                string? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  string-contains (
                    hash-table-ref g "graph"
                  )
                   v
                )
                 #t #f
              )
            )
             (
              (
                hash-table? (
                  hash-table-ref g "graph"
                )
              )
               (
                if (
                  hash-table-exists? (
                    hash-table-ref g "graph"
                  )
                   v
                )
                 #t #f
              )
            )
             (
              else (
                if (
                  member v (
                    hash-table-ref g "graph"
                  )
                )
                 #t #f
              )
            )
          )
           (
            begin (
              let (
                (
                  edges2 (
                    hash-table-ref/default (
                      hash-table-ref g "graph"
                    )
                     v (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      new_edges2 (
                        _list
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          j 0
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop35 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    < j (
                                      _len edges2
                                    )
                                  )
                                   (
                                    begin (
                                      if (
                                        not (
                                          equal? (
                                            cond (
                                              (
                                                string? (
                                                  list-ref-safe edges2 j
                                                )
                                              )
                                               (
                                                _substring (
                                                  list-ref-safe edges2 j
                                                )
                                                 1 (
                                                  + 1 1
                                                )
                                              )
                                            )
                                             (
                                              (
                                                hash-table? (
                                                  list-ref-safe edges2 j
                                                )
                                              )
                                               (
                                                hash-table-ref (
                                                  list-ref-safe edges2 j
                                                )
                                                 1
                                              )
                                            )
                                             (
                                              else (
                                                list-ref-safe (
                                                  list-ref-safe edges2 j
                                                )
                                                 1
                                              )
                                            )
                                          )
                                           u
                                        )
                                      )
                                       (
                                        begin (
                                          set! new_edges2 (
                                            append new_edges2 (
                                              _list (
                                                list-ref-safe edges2 j
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                     (
                                      set! j (
                                        + j 1
                                      )
                                    )
                                     (
                                      loop35
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop35
                          )
                        )
                         (
                          let (
                            (
                              m2 (
                                hash-table-ref g "graph"
                              )
                            )
                          )
                           (
                            begin (
                              hash-table-set! m2 v new_edges2
                            )
                             (
                              hash-table-set! g "graph" m2
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
           (
            void
          )
        )
      )
    )
     (
      define (
        g_all_nodes g
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break37
              )
               (
                letrec (
                  (
                    loop36 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                k (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                set! res (
                                  append res (
                                    _list k
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop36 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop36 (
                    hash-table-keys (
                      hash-table-ref g "graph"
                    )
                  )
                )
              )
            )
          )
           res
        )
      )
    )
     (
      define (
        g_dfs_util g node visited order d
      )
       (
        call/cc (
          lambda (
            ret38
          )
           (
            begin (
              hash-table-set! visited node #t
            )
             (
              set! order (
                append order (
                  _list node
                )
              )
            )
             (
              if (
                and (
                  not (
                    equal? d (
                      - 1
                    )
                  )
                )
                 (
                  equal? node d
                )
              )
               (
                begin (
                  ret38 order
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  edges (
                    hash-table-ref/default (
                      hash-table-ref g "graph"
                    )
                     node (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop39 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i (
                                  _len edges
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      neigh (
                                        cond (
                                          (
                                            string? (
                                              list-ref-safe edges i
                                            )
                                          )
                                           (
                                            _substring (
                                              list-ref-safe edges i
                                            )
                                             1 (
                                              + 1 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? (
                                              list-ref-safe edges i
                                            )
                                          )
                                           (
                                            hash-table-ref (
                                              list-ref-safe edges i
                                            )
                                             1
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe (
                                              list-ref-safe edges i
                                            )
                                             1
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      if (
                                        not (
                                          cond (
                                            (
                                              string? visited
                                            )
                                             (
                                              if (
                                                string-contains visited neigh
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            (
                                              hash-table? visited
                                            )
                                             (
                                              if (
                                                hash-table-exists? visited neigh
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            else (
                                              if (
                                                member neigh visited
                                              )
                                               #t #f
                                            )
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          set! order (
                                            g_dfs_util g neigh visited order d
                                          )
                                        )
                                         (
                                          if (
                                            and (
                                              not (
                                                equal? d (
                                                  - 1
                                                )
                                              )
                                            )
                                             (
                                              equal? (
                                                list-ref-safe order (
                                                  - (
                                                    _len order
                                                  )
                                                   1
                                                )
                                              )
                                               d
                                            )
                                          )
                                           (
                                            begin (
                                              ret38 order
                                            )
                                          )
                                           (
                                            void
                                          )
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop39
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop39
                      )
                    )
                     (
                      ret38 order
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        g_dfs g s d
      )
       (
        call/cc (
          lambda (
            ret40
          )
           (
            begin (
              if (
                equal? s d
              )
               (
                begin (
                  ret40 (
                    _list
                  )
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  start (
                    if (
                      equal? s (
                        - 2
                      )
                    )
                     (
                      first_key (
                        hash-table-ref g "graph"
                      )
                    )
                     s
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      visited (
                        alist->hash-table (
                          _list
                        )
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          order (
                            _list
                          )
                        )
                      )
                       (
                        begin (
                          set! order (
                            g_dfs_util g start visited order d
                          )
                        )
                         (
                          ret40 order
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        g_bfs g s
      )
       (
        let (
          (
            queue (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                visited (
                  alist->hash-table (
                    _list
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    order (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        start (
                          if (
                            equal? s (
                              - 2
                            )
                          )
                           (
                            first_key (
                              hash-table-ref g "graph"
                            )
                          )
                           s
                        )
                      )
                    )
                     (
                      begin (
                        set! queue (
                          append queue (
                            _list start
                          )
                        )
                      )
                       (
                        hash-table-set! visited start #t
                      )
                       (
                        letrec (
                          (
                            loop41 (
                              lambda (
                                
                              )
                               (
                                if (
                                  > (
                                    _len queue
                                  )
                                   0
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        node (
                                          list-ref-safe queue 0
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! queue (
                                          take (
                                            drop queue 1
                                          )
                                           (
                                            - (
                                              _len queue
                                            )
                                             1
                                          )
                                        )
                                      )
                                       (
                                        set! order (
                                          append order (
                                            _list node
                                          )
                                        )
                                      )
                                       (
                                        let (
                                          (
                                            edges (
                                              hash-table-ref/default (
                                                hash-table-ref g "graph"
                                              )
                                               node (
                                                void
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                i 0
                                              )
                                            )
                                             (
                                              begin (
                                                letrec (
                                                  (
                                                    loop42 (
                                                      lambda (
                                                        
                                                      )
                                                       (
                                                        if (
                                                          < i (
                                                            _len edges
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                neigh (
                                                                  cond (
                                                                    (
                                                                      string? (
                                                                        list-ref-safe edges i
                                                                      )
                                                                    )
                                                                     (
                                                                      _substring (
                                                                        list-ref-safe edges i
                                                                      )
                                                                       1 (
                                                                        + 1 1
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    (
                                                                      hash-table? (
                                                                        list-ref-safe edges i
                                                                      )
                                                                    )
                                                                     (
                                                                      hash-table-ref (
                                                                        list-ref-safe edges i
                                                                      )
                                                                       1
                                                                    )
                                                                  )
                                                                   (
                                                                    else (
                                                                      list-ref-safe (
                                                                        list-ref-safe edges i
                                                                      )
                                                                       1
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                if (
                                                                  not (
                                                                    cond (
                                                                      (
                                                                        string? visited
                                                                      )
                                                                       (
                                                                        if (
                                                                          string-contains visited neigh
                                                                        )
                                                                         #t #f
                                                                      )
                                                                    )
                                                                     (
                                                                      (
                                                                        hash-table? visited
                                                                      )
                                                                       (
                                                                        if (
                                                                          hash-table-exists? visited neigh
                                                                        )
                                                                         #t #f
                                                                      )
                                                                    )
                                                                     (
                                                                      else (
                                                                        if (
                                                                          member neigh visited
                                                                        )
                                                                         #t #f
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    set! queue (
                                                                      append queue (
                                                                        _list neigh
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    hash-table-set! visited neigh #t
                                                                  )
                                                                )
                                                                 (
                                                                  void
                                                                )
                                                              )
                                                               (
                                                                set! i (
                                                                  + i 1
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            loop42
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop42
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop41
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop41
                        )
                      )
                       order
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        g_degree g u
      )
       (
        call/cc (
          lambda (
            ret43
          )
           (
            begin (
              if (
                cond (
                  (
                    string? (
                      hash-table-ref g "graph"
                    )
                  )
                   (
                    if (
                      string-contains (
                        hash-table-ref g "graph"
                      )
                       u
                    )
                     #t #f
                  )
                )
                 (
                  (
                    hash-table? (
                      hash-table-ref g "graph"
                    )
                  )
                   (
                    if (
                      hash-table-exists? (
                        hash-table-ref g "graph"
                      )
                       u
                    )
                     #t #f
                  )
                )
                 (
                  else (
                    if (
                      member u (
                        hash-table-ref g "graph"
                      )
                    )
                     #t #f
                  )
                )
              )
               (
                begin (
                  ret43 (
                    _len (
                      hash-table-ref/default (
                        hash-table-ref g "graph"
                      )
                       u (
                        void
                      )
                    )
                  )
                )
              )
               (
                void
              )
            )
             (
              ret43 0
            )
          )
        )
      )
    )
     (
      define (
        g_cycle_util g node visited parent res
      )
       (
        begin (
          hash-table-set! visited node #t
        )
         (
          let (
            (
              edges (
                hash-table-ref/default (
                  hash-table-ref g "graph"
                )
                 node (
                  void
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  i 0
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop44 (
                        lambda (
                          
                        )
                         (
                          if (
                            < i (
                              _len edges
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  neigh (
                                    cond (
                                      (
                                        string? (
                                          list-ref-safe edges i
                                        )
                                      )
                                       (
                                        _substring (
                                          list-ref-safe edges i
                                        )
                                         1 (
                                          + 1 1
                                        )
                                      )
                                    )
                                     (
                                      (
                                        hash-table? (
                                          list-ref-safe edges i
                                        )
                                      )
                                       (
                                        hash-table-ref (
                                          list-ref-safe edges i
                                        )
                                         1
                                      )
                                    )
                                     (
                                      else (
                                        list-ref-safe (
                                          list-ref-safe edges i
                                        )
                                         1
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                begin (
                                  if (
                                    not (
                                      cond (
                                        (
                                          string? visited
                                        )
                                         (
                                          if (
                                            string-contains visited neigh
                                          )
                                           #t #f
                                        )
                                      )
                                       (
                                        (
                                          hash-table? visited
                                        )
                                         (
                                          if (
                                            hash-table-exists? visited neigh
                                          )
                                           #t #f
                                        )
                                      )
                                       (
                                        else (
                                          if (
                                            member neigh visited
                                          )
                                           #t #f
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      set! res (
                                        g_cycle_util g neigh visited node res
                                      )
                                    )
                                  )
                                   (
                                    if (
                                      not (
                                        equal? neigh parent
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          not (
                                            list_contains_int res neigh
                                          )
                                        )
                                         (
                                          begin (
                                            set! res (
                                              append res (
                                                _list neigh
                                              )
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                       (
                                        if (
                                          not (
                                            list_contains_int res node
                                          )
                                        )
                                         (
                                          begin (
                                            set! res (
                                              append res (
                                                _list node
                                              )
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                              )
                            )
                             (
                              loop44
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop44
                  )
                )
                 res
              )
            )
          )
        )
      )
    )
     (
      define (
        g_cycle_nodes g
      )
       (
        let (
          (
            visited (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            let (
              (
                res (
                  _list
                )
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break46
                  )
                   (
                    letrec (
                      (
                        loop45 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    k (
                                      car xs
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      not (
                                        cond (
                                          (
                                            string? visited
                                          )
                                           (
                                            if (
                                              string-contains visited k
                                            )
                                             #t #f
                                          )
                                        )
                                         (
                                          (
                                            hash-table? visited
                                          )
                                           (
                                            if (
                                              hash-table-exists? visited k
                                            )
                                             #t #f
                                          )
                                        )
                                         (
                                          else (
                                            if (
                                              member k visited
                                            )
                                             #t #f
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! res (
                                          g_cycle_util g k visited (
                                            - 1
                                          )
                                           res
                                        )
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                               (
                                loop45 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop45 (
                        hash-table-keys (
                          hash-table-ref g "graph"
                        )
                      )
                    )
                  )
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        g_has_cycle_util g node visited parent
      )
       (
        call/cc (
          lambda (
            ret47
          )
           (
            begin (
              hash-table-set! visited node #t
            )
             (
              let (
                (
                  edges (
                    hash-table-ref/default (
                      hash-table-ref g "graph"
                    )
                     node (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop48 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i (
                                  _len edges
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      neigh (
                                        cond (
                                          (
                                            string? (
                                              list-ref-safe edges i
                                            )
                                          )
                                           (
                                            _substring (
                                              list-ref-safe edges i
                                            )
                                             1 (
                                              + 1 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? (
                                              list-ref-safe edges i
                                            )
                                          )
                                           (
                                            hash-table-ref (
                                              list-ref-safe edges i
                                            )
                                             1
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe (
                                              list-ref-safe edges i
                                            )
                                             1
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      if (
                                        not (
                                          cond (
                                            (
                                              string? visited
                                            )
                                             (
                                              if (
                                                string-contains visited neigh
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            (
                                              hash-table? visited
                                            )
                                             (
                                              if (
                                                hash-table-exists? visited neigh
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            else (
                                              if (
                                                member neigh visited
                                              )
                                               #t #f
                                            )
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          if (
                                            g_has_cycle_util g neigh visited node
                                          )
                                           (
                                            begin (
                                              ret47 #t
                                            )
                                          )
                                           (
                                            void
                                          )
                                        )
                                      )
                                       (
                                        if (
                                          not (
                                            equal? neigh parent
                                          )
                                        )
                                         (
                                          begin (
                                            ret47 #t
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop48
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop48
                      )
                    )
                     (
                      ret47 #f
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        g_has_cycle g
      )
       (
        call/cc (
          lambda (
            ret49
          )
           (
            let (
              (
                visited (
                  alist->hash-table (
                    _list
                  )
                )
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break51
                  )
                   (
                    letrec (
                      (
                        loop50 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    k (
                                      car xs
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      not (
                                        cond (
                                          (
                                            string? visited
                                          )
                                           (
                                            if (
                                              string-contains visited k
                                            )
                                             #t #f
                                          )
                                        )
                                         (
                                          (
                                            hash-table? visited
                                          )
                                           (
                                            if (
                                              hash-table-exists? visited k
                                            )
                                             #t #f
                                          )
                                        )
                                         (
                                          else (
                                            if (
                                              member k visited
                                            )
                                             #t #f
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          g_has_cycle_util g k visited (
                                            - 1
                                          )
                                        )
                                         (
                                          begin (
                                            ret49 #t
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                               (
                                loop50 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop50 (
                        hash-table-keys (
                          hash-table-ref g "graph"
                        )
                      )
                    )
                  )
                )
              )
               (
                ret49 #f
              )
            )
          )
        )
      )
    )
     (
      define (
        g_fill_graph_randomly g c
      )
       (
        let (
          (
            count c
          )
        )
         (
          begin (
            if (
              equal? count (
                - 1
              )
            )
             (
              begin (
                set! count (
                  rand_range 10 10010
                )
              )
            )
             (
              void
            )
          )
           (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop52 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i count
                        )
                         (
                          begin (
                            let (
                              (
                                edge_count (
                                  rand_range 1 103
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    j 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop53 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              _lt j edge_count
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    n (
                                                      rand_range 0 count
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      not (
                                                        equal? n i
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        g_add_pair g i n 1
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                loop53
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop53
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop52
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop52
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        g_dfs_time g s e
      )
       (
        let (
          (
            begin (
              now
            )
          )
        )
         (
          begin (
            g_dfs g s e
          )
           (
            let (
              (
                end (
                  now
                )
              )
            )
             (
              begin (
                - end begin
              )
            )
          )
        )
      )
    )
     (
      define (
        g_bfs_time g s
      )
       (
        let (
          (
            begin (
              now
            )
          )
        )
         (
          begin (
            g_bfs g s
          )
           (
            let (
              (
                end (
                  now
                )
              )
            )
             (
              begin (
                - end begin
              )
            )
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        let (
          (
            dg (
              dg_make_graph
            )
          )
        )
         (
          begin (
            dg_add_pair dg 0 1 5
          )
           (
            dg_add_pair dg 0 2 3
          )
           (
            dg_add_pair dg 1 3 2
          )
           (
            dg_add_pair dg 2 3 4
          )
           (
            _display (
              if (
                string? (
                  to-str-space (
                    dg_dfs dg (
                      - 2
                    )
                     (
                      - 1
                    )
                  )
                )
              )
               (
                to-str-space (
                  dg_dfs dg (
                    - 2
                  )
                   (
                    - 1
                  )
                )
              )
               (
                to-str (
                  to-str-space (
                    dg_dfs dg (
                      - 2
                    )
                     (
                      - 1
                    )
                  )
                )
              )
            )
          )
           (
            newline
          )
           (
            _display (
              if (
                string? (
                  to-str-space (
                    dg_bfs dg (
                      - 2
                    )
                  )
                )
              )
               (
                to-str-space (
                  dg_bfs dg (
                    - 2
                  )
                )
              )
               (
                to-str (
                  to-str-space (
                    dg_bfs dg (
                      - 2
                    )
                  )
                )
              )
            )
          )
           (
            newline
          )
           (
            _display (
              if (
                string? (
                  to-str-space (
                    dg_in_degree dg 3
                  )
                )
              )
               (
                to-str-space (
                  dg_in_degree dg 3
                )
              )
               (
                to-str (
                  to-str-space (
                    dg_in_degree dg 3
                  )
                )
              )
            )
          )
           (
            newline
          )
           (
            _display (
              if (
                string? (
                  to-str-space (
                    dg_out_degree dg 0
                  )
                )
              )
               (
                to-str-space (
                  dg_out_degree dg 0
                )
              )
               (
                to-str (
                  to-str-space (
                    dg_out_degree dg 0
                  )
                )
              )
            )
          )
           (
            newline
          )
           (
            _display (
              if (
                string? (
                  to-str-space (
                    dg_topological_sort dg
                  )
                )
              )
               (
                to-str-space (
                  dg_topological_sort dg
                )
              )
               (
                to-str (
                  to-str-space (
                    dg_topological_sort dg
                  )
                )
              )
            )
          )
           (
            newline
          )
           (
            _display (
              if (
                string? (
                  to-str-space (
                    dg_has_cycle dg
                  )
                )
              )
               (
                to-str-space (
                  dg_has_cycle dg
                )
              )
               (
                to-str (
                  to-str-space (
                    dg_has_cycle dg
                  )
                )
              )
            )
          )
           (
            newline
          )
           (
            let (
              (
                ug (
                  g_make_graph
                )
              )
            )
             (
              begin (
                g_add_pair ug 0 1 1
              )
               (
                g_add_pair ug 1 2 1
              )
               (
                g_add_pair ug 2 0 1
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        g_dfs ug (
                          - 2
                        )
                         (
                          - 1
                        )
                      )
                    )
                  )
                   (
                    to-str-space (
                      g_dfs ug (
                        - 2
                      )
                       (
                        - 1
                      )
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        g_dfs ug (
                          - 2
                        )
                         (
                          - 1
                        )
                      )
                    )
                  )
                )
              )
               (
                newline
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        g_bfs ug (
                          - 2
                        )
                      )
                    )
                  )
                   (
                    to-str-space (
                      g_bfs ug (
                        - 2
                      )
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        g_bfs ug (
                          - 2
                        )
                      )
                    )
                  )
                )
              )
               (
                newline
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        g_degree ug 1
                      )
                    )
                  )
                   (
                    to-str-space (
                      g_degree ug 1
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        g_degree ug 1
                      )
                    )
                  )
                )
              )
               (
                newline
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        g_has_cycle ug
                      )
                    )
                  )
                   (
                    to-str-space (
                      g_has_cycle ug
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        g_has_cycle ug
                      )
                    )
                  )
                )
              )
               (
                newline
              )
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end55 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur56 (
              quotient (
                * (
                  - end55 start54
                )
                 1000000
              )
               jps57
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur56
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
