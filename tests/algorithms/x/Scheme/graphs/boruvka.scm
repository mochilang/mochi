;; Generated by Mochi Scheme transpiler on 2025-08-14 10:00 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start12 (
        current-jiffy
      )
    )
     (
      jps15 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        new_graph num_nodes
      )
       (
        alist->hash-table (
          _list (
            cons "num_nodes" num_nodes
          )
           (
            cons "edges" (
              _list
            )
          )
           (
            cons "component" (
              alist->hash-table (
                _list
              )
            )
          )
        )
      )
    )
     (
      define (
        add_edge g u v w
      )
       (
        let (
          (
            es (
              hash-table-ref g "edges"
            )
          )
        )
         (
          begin (
            set! es (
              append es (
                _list (
                  alist->hash-table (
                    _list (
                      cons "u" u
                    )
                     (
                      cons "v" v
                    )
                     (
                      cons "w" w
                    )
                  )
                )
              )
            )
          )
           (
            alist->hash-table (
              _list (
                cons "num_nodes" (
                  hash-table-ref g "num_nodes"
                )
              )
               (
                cons "edges" es
              )
               (
                cons "component" (
                  hash-table-ref g "component"
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        find_component g node
      )
       (
        call/cc (
          lambda (
            ret1
          )
           (
            begin (
              if (
                equal? (
                  hash-table-ref/default (
                    hash-table-ref g "component"
                  )
                   node (
                    void
                  )
                )
                 node
              )
               (
                begin (
                  ret1 node
                )
              )
               (
                void
              )
            )
             (
              ret1 (
                find_component g (
                  hash-table-ref/default (
                    hash-table-ref g "component"
                  )
                   node (
                    void
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        set_component g node
      )
       (
        begin (
          if (
            not (
              equal? (
                hash-table-ref/default (
                  hash-table-ref g "component"
                )
                 node (
                  void
                )
              )
               node
            )
          )
           (
            begin (
              let (
                (
                  comp (
                    hash-table-ref g "component"
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      k 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop2 (
                            lambda (
                              
                            )
                             (
                              if (
                                < k (
                                  hash-table-ref g "num_nodes"
                                )
                              )
                               (
                                begin (
                                  hash-table-set! comp k (
                                    find_component g k
                                  )
                                )
                                 (
                                  set! k (
                                    + k 1
                                  )
                                )
                                 (
                                  loop2
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop2
                      )
                    )
                     (
                      set! g (
                        alist->hash-table (
                          _list (
                            cons "num_nodes" (
                              hash-table-ref g "num_nodes"
                            )
                          )
                           (
                            cons "edges" (
                              hash-table-ref g "edges"
                            )
                          )
                           (
                            cons "component" comp
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
           (
            void
          )
        )
         g
      )
    )
     (
      define (
        union g component_size u v
      )
       (
        let (
          (
            comp_size component_size
          )
        )
         (
          begin (
            let (
              (
                comp (
                  hash-table-ref g "component"
                )
              )
            )
             (
              begin (
                if (
                  <= (
                    list-ref-safe comp_size u
                  )
                   (
                    list-ref-safe comp_size v
                  )
                )
                 (
                  begin (
                    hash-table-set! comp u v
                  )
                   (
                    list-set-safe! comp_size v (
                      + (
                        list-ref-safe comp_size v
                      )
                       (
                        list-ref-safe comp_size u
                      )
                    )
                  )
                   (
                    set! g (
                      alist->hash-table (
                        _list (
                          cons "num_nodes" (
                            hash-table-ref g "num_nodes"
                          )
                        )
                         (
                          cons "edges" (
                            hash-table-ref g "edges"
                          )
                        )
                         (
                          cons "component" comp
                        )
                      )
                    )
                  )
                   (
                    set! g (
                      set_component g u
                    )
                  )
                )
                 (
                  begin (
                    hash-table-set! comp v u
                  )
                   (
                    list-set-safe! comp_size u (
                      + (
                        list-ref-safe comp_size u
                      )
                       (
                        list-ref-safe comp_size v
                      )
                    )
                  )
                   (
                    set! g (
                      alist->hash-table (
                        _list (
                          cons "num_nodes" (
                            hash-table-ref g "num_nodes"
                          )
                        )
                         (
                          cons "edges" (
                            hash-table-ref g "edges"
                          )
                        )
                         (
                          cons "component" comp
                        )
                      )
                    )
                  )
                   (
                    set! g (
                      set_component g v
                    )
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "graph" g
                  )
                   (
                    cons "component_size" comp_size
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        create_empty_edges n
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop3 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i n
                        )
                         (
                          begin (
                            set! res (
                              append res (
                                _list (
                                  alist->hash-table (
                                    _list (
                                      cons "u" (
                                        - 0 1
                                      )
                                    )
                                     (
                                      cons "v" (
                                        - 0 1
                                      )
                                    )
                                     (
                                      cons "w" (
                                        - 0 1
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop3
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop3
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        boruvka g
      )
       (
        let (
          (
            component_size (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop4 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            hash-table-ref g "num_nodes"
                          )
                        )
                         (
                          begin (
                            set! component_size (
                              append component_size (
                                _list 1
                              )
                            )
                          )
                           (
                            let (
                              (
                                comp (
                                  hash-table-ref g "component"
                                )
                              )
                            )
                             (
                              begin (
                                hash-table-set! comp i i
                              )
                               (
                                set! g (
                                  alist->hash-table (
                                    _list (
                                      cons "num_nodes" (
                                        hash-table-ref g "num_nodes"
                                      )
                                    )
                                     (
                                      cons "edges" (
                                        hash-table-ref g "edges"
                                      )
                                    )
                                     (
                                      cons "component" comp
                                    )
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                            )
                          )
                           (
                            loop4
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop4
                )
              )
               (
                let (
                  (
                    mst_weight 0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        num_components (
                          hash-table-ref g "num_nodes"
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            minimum_weight_edge (
                              create_empty_edges (
                                hash-table-ref g "num_nodes"
                              )
                            )
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop5 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      > num_components 1
                                    )
                                     (
                                      begin (
                                        call/cc (
                                          lambda (
                                            break7
                                          )
                                           (
                                            letrec (
                                              (
                                                loop6 (
                                                  lambda (
                                                    xs
                                                  )
                                                   (
                                                    if (
                                                      null? xs
                                                    )
                                                     (
                                                      void
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            e (
                                                              car xs
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                u (
                                                                  hash-table-ref e "u"
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                let (
                                                                  (
                                                                    v (
                                                                      hash-table-ref e "v"
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    let (
                                                                      (
                                                                        w (
                                                                          hash-table-ref e "w"
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        let (
                                                                          (
                                                                            u_comp (
                                                                              hash-table-ref/default (
                                                                                hash-table-ref g "component"
                                                                              )
                                                                               u (
                                                                                void
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            let (
                                                                              (
                                                                                v_comp (
                                                                                  hash-table-ref/default (
                                                                                    hash-table-ref g "component"
                                                                                  )
                                                                                   v (
                                                                                    void
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                if (
                                                                                  not (
                                                                                    equal? u_comp v_comp
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    let (
                                                                                      (
                                                                                        current_u (
                                                                                          cond (
                                                                                            (
                                                                                              string? minimum_weight_edge
                                                                                            )
                                                                                             (
                                                                                              _substring minimum_weight_edge u_comp (
                                                                                                + u_comp 1
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            (
                                                                                              hash-table? minimum_weight_edge
                                                                                            )
                                                                                             (
                                                                                              hash-table-ref minimum_weight_edge u_comp
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            else (
                                                                                              list-ref-safe minimum_weight_edge u_comp
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      begin (
                                                                                        if (
                                                                                          or (
                                                                                            equal? (
                                                                                              hash-table-ref current_u "u"
                                                                                            )
                                                                                             (
                                                                                              - 0 1
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            _gt (
                                                                                              hash-table-ref current_u "w"
                                                                                            )
                                                                                             w
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          begin (
                                                                                            list-set-safe! minimum_weight_edge u_comp (
                                                                                              alist->hash-table (
                                                                                                _list (
                                                                                                  cons "u" u
                                                                                                )
                                                                                                 (
                                                                                                  cons "v" v
                                                                                                )
                                                                                                 (
                                                                                                  cons "w" w
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          void
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        let (
                                                                                          (
                                                                                            current_v (
                                                                                              cond (
                                                                                                (
                                                                                                  string? minimum_weight_edge
                                                                                                )
                                                                                                 (
                                                                                                  _substring minimum_weight_edge v_comp (
                                                                                                    + v_comp 1
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                               (
                                                                                                (
                                                                                                  hash-table? minimum_weight_edge
                                                                                                )
                                                                                                 (
                                                                                                  hash-table-ref minimum_weight_edge v_comp
                                                                                                )
                                                                                              )
                                                                                               (
                                                                                                else (
                                                                                                  list-ref-safe minimum_weight_edge v_comp
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          begin (
                                                                                            if (
                                                                                              or (
                                                                                                equal? (
                                                                                                  hash-table-ref current_v "u"
                                                                                                )
                                                                                                 (
                                                                                                  - 0 1
                                                                                                )
                                                                                              )
                                                                                               (
                                                                                                _gt (
                                                                                                  hash-table-ref current_v "w"
                                                                                                )
                                                                                                 w
                                                                                              )
                                                                                            )
                                                                                             (
                                                                                              begin (
                                                                                                list-set-safe! minimum_weight_edge v_comp (
                                                                                                  alist->hash-table (
                                                                                                    _list (
                                                                                                      cons "u" u
                                                                                                    )
                                                                                                     (
                                                                                                      cons "v" v
                                                                                                    )
                                                                                                     (
                                                                                                      cons "w" w
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                             (
                                                                                              void
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  void
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop6 (
                                                          cdr xs
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop6 (
                                                hash-table-ref g "edges"
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        call/cc (
                                          lambda (
                                            break9
                                          )
                                           (
                                            letrec (
                                              (
                                                loop8 (
                                                  lambda (
                                                    xs
                                                  )
                                                   (
                                                    if (
                                                      null? xs
                                                    )
                                                     (
                                                      void
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            e (
                                                              car xs
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            if (
                                                              not (
                                                                equal? (
                                                                  hash-table-ref e "u"
                                                                )
                                                                 (
                                                                  - 0 1
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                let (
                                                                  (
                                                                    u (
                                                                      hash-table-ref e "u"
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    let (
                                                                      (
                                                                        v (
                                                                          hash-table-ref e "v"
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        let (
                                                                          (
                                                                            w (
                                                                              hash-table-ref e "w"
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            let (
                                                                              (
                                                                                u_comp (
                                                                                  hash-table-ref/default (
                                                                                    hash-table-ref g "component"
                                                                                  )
                                                                                   u (
                                                                                    void
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                let (
                                                                                  (
                                                                                    v_comp (
                                                                                      hash-table-ref/default (
                                                                                        hash-table-ref g "component"
                                                                                      )
                                                                                       v (
                                                                                        void
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    if (
                                                                                      not (
                                                                                        equal? u_comp v_comp
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      begin (
                                                                                        set! mst_weight (
                                                                                          _add mst_weight w
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        let (
                                                                                          (
                                                                                            res (
                                                                                              union g component_size u_comp v_comp
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          begin (
                                                                                            set! g (
                                                                                              hash-table-ref res "graph"
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            set! component_size (
                                                                                              hash-table-ref res "component_size"
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            _display (
                                                                                              if (
                                                                                                string? (
                                                                                                  string-append (
                                                                                                    string-append (
                                                                                                      string-append (
                                                                                                        string-append "Added edge [" (
                                                                                                          to-str-space u
                                                                                                        )
                                                                                                      )
                                                                                                       " - "
                                                                                                    )
                                                                                                     (
                                                                                                      to-str-space v
                                                                                                    )
                                                                                                  )
                                                                                                   "]"
                                                                                                )
                                                                                              )
                                                                                               (
                                                                                                string-append (
                                                                                                  string-append (
                                                                                                    string-append (
                                                                                                      string-append "Added edge [" (
                                                                                                        to-str-space u
                                                                                                      )
                                                                                                    )
                                                                                                     " - "
                                                                                                  )
                                                                                                   (
                                                                                                    to-str-space v
                                                                                                  )
                                                                                                )
                                                                                                 "]"
                                                                                              )
                                                                                               (
                                                                                                to-str (
                                                                                                  string-append (
                                                                                                    string-append (
                                                                                                      string-append (
                                                                                                        string-append "Added edge [" (
                                                                                                          to-str-space u
                                                                                                        )
                                                                                                      )
                                                                                                       " - "
                                                                                                    )
                                                                                                     (
                                                                                                      to-str-space v
                                                                                                    )
                                                                                                  )
                                                                                                   "]"
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            newline
                                                                                          )
                                                                                           (
                                                                                            _display (
                                                                                              if (
                                                                                                string? (
                                                                                                  string-append "Added weight: " (
                                                                                                    to-str-space w
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                               (
                                                                                                string-append "Added weight: " (
                                                                                                  to-str-space w
                                                                                                )
                                                                                              )
                                                                                               (
                                                                                                to-str (
                                                                                                  string-append "Added weight: " (
                                                                                                    to-str-space w
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            newline
                                                                                          )
                                                                                           (
                                                                                            _display (
                                                                                              if (
                                                                                                string? ""
                                                                                              )
                                                                                               "" (
                                                                                                to-str ""
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            newline
                                                                                          )
                                                                                           (
                                                                                            set! num_components (
                                                                                              - num_components 1
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      void
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              void
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop8 (
                                                          cdr xs
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop8 minimum_weight_edge
                                            )
                                          )
                                        )
                                      )
                                       (
                                        set! minimum_weight_edge (
                                          create_empty_edges (
                                            hash-table-ref g "num_nodes"
                                          )
                                        )
                                      )
                                       (
                                        loop5
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop5
                            )
                          )
                           (
                            _display (
                              if (
                                string? (
                                  string-append "The total weight of the minimal spanning tree is: " (
                                    to-str-space mst_weight
                                  )
                                )
                              )
                               (
                                string-append "The total weight of the minimal spanning tree is: " (
                                  to-str-space mst_weight
                                )
                              )
                               (
                                to-str (
                                  string-append "The total weight of the minimal spanning tree is: " (
                                    to-str-space mst_weight
                                  )
                                )
                              )
                            )
                          )
                           (
                            newline
                          )
                           mst_weight
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        let (
          (
            g (
              new_graph 8
            )
          )
        )
         (
          begin (
            let (
              (
                edges (
                  _list (
                    _list 0 1 10
                  )
                   (
                    _list 0 2 6
                  )
                   (
                    _list 0 3 5
                  )
                   (
                    _list 1 3 15
                  )
                   (
                    _list 2 3 4
                  )
                   (
                    _list 3 4 8
                  )
                   (
                    _list 4 5 10
                  )
                   (
                    _list 4 6 6
                  )
                   (
                    _list 4 7 5
                  )
                   (
                    _list 5 7 15
                  )
                   (
                    _list 6 7 4
                  )
                )
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break11
                  )
                   (
                    letrec (
                      (
                        loop10 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    e (
                                      car xs
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    set! g (
                                      add_edge g (
                                        cond (
                                          (
                                            string? e
                                          )
                                           (
                                            _substring e 0 (
                                              + 0 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? e
                                          )
                                           (
                                            hash-table-ref e 0
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe e 0
                                          )
                                        )
                                      )
                                       (
                                        cond (
                                          (
                                            string? e
                                          )
                                           (
                                            _substring e 1 (
                                              + 1 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? e
                                          )
                                           (
                                            hash-table-ref e 1
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe e 1
                                          )
                                        )
                                      )
                                       (
                                        cond (
                                          (
                                            string? e
                                          )
                                           (
                                            _substring e 2 (
                                              + 2 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? e
                                          )
                                           (
                                            hash-table-ref e 2
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe e 2
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop10 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop10 edges
                    )
                  )
                )
              )
               (
                boruvka g
              )
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end13 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur14 (
              quotient (
                * (
                  - end13 start12
                )
                 1000000
              )
               jps15
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur14
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
