;; Generated by Mochi Scheme transpiler on 2025-08-13 16:46 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start10 (
        current-jiffy
      )
    )
     (
      jps13 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        uf_make n
      )
       (
        let (
          (
            p (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                r (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop1 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i n
                            )
                             (
                              begin (
                                set! p (
                                  append p (
                                    _list i
                                  )
                                )
                              )
                               (
                                set! r (
                                  append r (
                                    _list 0
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop1
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop1
                    )
                  )
                   (
                    alist->hash-table (
                      _list (
                        cons "parent" p
                      )
                       (
                        cons "rank" r
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        uf_find uf x
      )
       (
        call/cc (
          lambda (
            ret2
          )
           (
            let (
              (
                p (
                  hash-table-ref uf "parent"
                )
              )
            )
             (
              begin (
                if (
                  not (
                    equal? (
                      list-ref-safe p x
                    )
                     x
                  )
                )
                 (
                  begin (
                    let (
                      (
                        res (
                          uf_find (
                            alist->hash-table (
                              _list (
                                cons "parent" p
                              )
                               (
                                cons "rank" (
                                  hash-table-ref uf "rank"
                                )
                              )
                            )
                          )
                           (
                            list-ref-safe p x
                          )
                        )
                      )
                    )
                     (
                      begin (
                        set! p (
                          hash-table-ref (
                            hash-table-ref res "uf"
                          )
                           "parent"
                        )
                      )
                       (
                        list-set-safe! p x (
                          hash-table-ref res "root"
                        )
                      )
                       (
                        ret2 (
                          alist->hash-table (
                            _list (
                              cons "root" (
                                hash-table-ref res "root"
                              )
                            )
                             (
                              cons "uf" (
                                alist->hash-table (
                                  _list (
                                    cons "parent" p
                                  )
                                   (
                                    cons "rank" (
                                      hash-table-ref (
                                        hash-table-ref res "uf"
                                      )
                                       "rank"
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  void
                )
              )
               (
                ret2 (
                  alist->hash-table (
                    _list (
                      cons "root" x
                    )
                     (
                      cons "uf" uf
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        uf_union uf x y
      )
       (
        call/cc (
          lambda (
            ret3
          )
           (
            let (
              (
                fr1 (
                  uf_find uf x
                )
              )
            )
             (
              begin (
                let (
                  (
                    uf1 (
                      hash-table-ref fr1 "uf"
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        root1 (
                          hash-table-ref fr1 "root"
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            fr2 (
                              uf_find uf1 y
                            )
                          )
                        )
                         (
                          begin (
                            set! uf1 (
                              hash-table-ref fr2 "uf"
                            )
                          )
                           (
                            let (
                              (
                                root2 (
                                  hash-table-ref fr2 "root"
                                )
                              )
                            )
                             (
                              begin (
                                if (
                                  equal? root1 root2
                                )
                                 (
                                  begin (
                                    ret3 uf1
                                  )
                                )
                                 (
                                  void
                                )
                              )
                               (
                                let (
                                  (
                                    p (
                                      hash-table-ref uf1 "parent"
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        r (
                                          hash-table-ref uf1 "rank"
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          _gt (
                                            cond (
                                              (
                                                string? r
                                              )
                                               (
                                                _substring r root1 (
                                                  + root1 1
                                                )
                                              )
                                            )
                                             (
                                              (
                                                hash-table? r
                                              )
                                               (
                                                hash-table-ref r root1
                                              )
                                            )
                                             (
                                              else (
                                                list-ref-safe r root1
                                              )
                                            )
                                          )
                                           (
                                            cond (
                                              (
                                                string? r
                                              )
                                               (
                                                _substring r root2 (
                                                  + root2 1
                                                )
                                              )
                                            )
                                             (
                                              (
                                                hash-table? r
                                              )
                                               (
                                                hash-table-ref r root2
                                              )
                                            )
                                             (
                                              else (
                                                list-ref-safe r root2
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            list-set-safe! p root2 root1
                                          )
                                        )
                                         (
                                          if (
                                            _lt (
                                              cond (
                                                (
                                                  string? r
                                                )
                                                 (
                                                  _substring r root1 (
                                                    + root1 1
                                                  )
                                                )
                                              )
                                               (
                                                (
                                                  hash-table? r
                                                )
                                                 (
                                                  hash-table-ref r root1
                                                )
                                              )
                                               (
                                                else (
                                                  list-ref-safe r root1
                                                )
                                              )
                                            )
                                             (
                                              cond (
                                                (
                                                  string? r
                                                )
                                                 (
                                                  _substring r root2 (
                                                    + root2 1
                                                  )
                                                )
                                              )
                                               (
                                                (
                                                  hash-table? r
                                                )
                                                 (
                                                  hash-table-ref r root2
                                                )
                                              )
                                               (
                                                else (
                                                  list-ref-safe r root2
                                                )
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              list-set-safe! p root1 root2
                                            )
                                          )
                                           (
                                            begin (
                                              list-set-safe! p root2 root1
                                            )
                                             (
                                              list-set-safe! r root1 (
                                                _add (
                                                  cond (
                                                    (
                                                      string? r
                                                    )
                                                     (
                                                      _substring r root1 (
                                                        + root1 1
                                                      )
                                                    )
                                                  )
                                                   (
                                                    (
                                                      hash-table? r
                                                    )
                                                     (
                                                      hash-table-ref r root1
                                                    )
                                                  )
                                                   (
                                                    else (
                                                      list-ref-safe r root1
                                                    )
                                                  )
                                                )
                                                 1
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        ret3 (
                                          alist->hash-table (
                                            _list (
                                              cons "parent" p
                                            )
                                             (
                                              cons "rank" r
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        boruvka n edges
      )
       (
        let (
          (
            uf (
              uf_make n
            )
          )
        )
         (
          begin (
            let (
              (
                num_components n
              )
            )
             (
              begin (
                let (
                  (
                    mst (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop4 (
                          lambda (
                            
                          )
                           (
                            if (
                              > num_components 1
                            )
                             (
                              begin (
                                let (
                                  (
                                    cheap (
                                      _list
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        i 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop5 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < i n
                                                )
                                                 (
                                                  begin (
                                                    set! cheap (
                                                      append cheap (
                                                        _list (
                                                          - 0 1
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! i (
                                                      + i 1
                                                    )
                                                  )
                                                   (
                                                    loop5
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop5
                                        )
                                      )
                                       (
                                        let (
                                          (
                                            idx 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop6 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < idx (
                                                        _len edges
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            e (
                                                              list-ref-safe edges idx
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                fr1 (
                                                                  uf_find uf (
                                                                    hash-table-ref e "u"
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                set! uf (
                                                                  hash-table-ref fr1 "uf"
                                                                )
                                                              )
                                                               (
                                                                let (
                                                                  (
                                                                    set1 (
                                                                      hash-table-ref fr1 "root"
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    let (
                                                                      (
                                                                        fr2 (
                                                                          uf_find uf (
                                                                            hash-table-ref e "v"
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        set! uf (
                                                                          hash-table-ref fr2 "uf"
                                                                        )
                                                                      )
                                                                       (
                                                                        let (
                                                                          (
                                                                            set2 (
                                                                              hash-table-ref fr2 "root"
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            if (
                                                                              not (
                                                                                equal? set1 set2
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                if (
                                                                                  or (
                                                                                    equal? (
                                                                                      list-ref-safe cheap set1
                                                                                    )
                                                                                     (
                                                                                      - 0 1
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    > (
                                                                                      hash-table-ref (
                                                                                        list-ref-safe edges (
                                                                                          list-ref-safe cheap set1
                                                                                        )
                                                                                      )
                                                                                       "w"
                                                                                    )
                                                                                     (
                                                                                      hash-table-ref e "w"
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    list-set-safe! cheap set1 idx
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  void
                                                                                )
                                                                              )
                                                                               (
                                                                                if (
                                                                                  or (
                                                                                    equal? (
                                                                                      list-ref-safe cheap set2
                                                                                    )
                                                                                     (
                                                                                      - 0 1
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    > (
                                                                                      hash-table-ref (
                                                                                        list-ref-safe edges (
                                                                                          list-ref-safe cheap set2
                                                                                        )
                                                                                      )
                                                                                       "w"
                                                                                    )
                                                                                     (
                                                                                      hash-table-ref e "w"
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    list-set-safe! cheap set2 idx
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  void
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              void
                                                                            )
                                                                          )
                                                                           (
                                                                            set! idx (
                                                                              + idx 1
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop6
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop6
                                            )
                                          )
                                           (
                                            let (
                                              (
                                                v 0
                                              )
                                            )
                                             (
                                              begin (
                                                letrec (
                                                  (
                                                    loop7 (
                                                      lambda (
                                                        
                                                      )
                                                       (
                                                        if (
                                                          < v n
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                idxe (
                                                                  list-ref-safe cheap v
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                if (
                                                                  not (
                                                                    equal? idxe (
                                                                      - 0 1
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    let (
                                                                      (
                                                                        e (
                                                                          list-ref-safe edges idxe
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        let (
                                                                          (
                                                                            fr1 (
                                                                              uf_find uf (
                                                                                hash-table-ref e "u"
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            set! uf (
                                                                              hash-table-ref fr1 "uf"
                                                                            )
                                                                          )
                                                                           (
                                                                            let (
                                                                              (
                                                                                set1 (
                                                                                  hash-table-ref fr1 "root"
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                let (
                                                                                  (
                                                                                    fr2 (
                                                                                      uf_find uf (
                                                                                        hash-table-ref e "v"
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    set! uf (
                                                                                      hash-table-ref fr2 "uf"
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    let (
                                                                                      (
                                                                                        set2 (
                                                                                          hash-table-ref fr2 "root"
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      begin (
                                                                                        if (
                                                                                          not (
                                                                                            equal? set1 set2
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          begin (
                                                                                            set! mst (
                                                                                              append mst (
                                                                                                _list e
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            set! uf (
                                                                                              uf_union uf set1 set2
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            set! num_components (
                                                                                              - num_components 1
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          void
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  void
                                                                )
                                                              )
                                                               (
                                                                set! v (
                                                                  + v 1
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            loop7
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop7
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop4
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop4
                    )
                  )
                   mst
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        let (
          (
            edges (
              _list (
                alist->hash-table (
                  _list (
                    cons "u" 0
                  )
                   (
                    cons "v" 1
                  )
                   (
                    cons "w" 1
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "u" 0
                  )
                   (
                    cons "v" 2
                  )
                   (
                    cons "w" 2
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "u" 2
                  )
                   (
                    cons "v" 3
                  )
                   (
                    cons "w" 3
                  )
                )
              )
            )
          )
        )
         (
          begin (
            let (
              (
                mst (
                  boruvka 4 edges
                )
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break9
                  )
                   (
                    letrec (
                      (
                        loop8 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    e (
                                      car xs
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    _display (
                                      if (
                                        string? (
                                          string-append (
                                            string-append (
                                              string-append (
                                                string-append (
                                                  to-str-space (
                                                    hash-table-ref e "u"
                                                  )
                                                )
                                                 " - "
                                              )
                                               (
                                                to-str-space (
                                                  hash-table-ref e "v"
                                                )
                                              )
                                            )
                                             " : "
                                          )
                                           (
                                            to-str-space (
                                              hash-table-ref e "w"
                                            )
                                          )
                                        )
                                      )
                                       (
                                        string-append (
                                          string-append (
                                            string-append (
                                              string-append (
                                                to-str-space (
                                                  hash-table-ref e "u"
                                                )
                                              )
                                               " - "
                                            )
                                             (
                                              to-str-space (
                                                hash-table-ref e "v"
                                              )
                                            )
                                          )
                                           " : "
                                        )
                                         (
                                          to-str-space (
                                            hash-table-ref e "w"
                                          )
                                        )
                                      )
                                       (
                                        to-str (
                                          string-append (
                                            string-append (
                                              string-append (
                                                string-append (
                                                  to-str-space (
                                                    hash-table-ref e "u"
                                                  )
                                                )
                                                 " - "
                                              )
                                               (
                                                to-str-space (
                                                  hash-table-ref e "v"
                                                )
                                              )
                                            )
                                             " : "
                                          )
                                           (
                                            to-str-space (
                                              hash-table-ref e "w"
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    newline
                                  )
                                )
                              )
                               (
                                loop8 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop8 mst
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end11 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur12 (
              quotient (
                * (
                  - end11 start10
                )
                 1000000
              )
               jps13
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur12
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
