;; Generated by Mochi Scheme transpiler on 2025-08-13 16:46 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start11 (
        current-jiffy
      )
    )
     (
      jps14 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        make_graph vertices edges directed
      )
       (
        let (
          (
            g (
              alist->hash-table (
                _list (
                  cons "directed" directed
                )
                 (
                  cons "vertex_to_index" (
                    alist->hash-table (
                      _list
                    )
                  )
                )
                 (
                  cons "adj_matrix" (
                    _list
                  )
                )
              )
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop1 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len vertices
                          )
                        )
                         (
                          begin (
                            add_vertex g (
                              list-ref-safe vertices i
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop1
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop1
                )
              )
               (
                let (
                  (
                    j 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop2 (
                          lambda (
                            
                          )
                           (
                            if (
                              < j (
                                _len edges
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    e (
                                      list-ref-safe edges j
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    add_edge g (
                                      list-ref-safe e 0
                                    )
                                     (
                                      list-ref-safe e 1
                                    )
                                  )
                                   (
                                    set! j (
                                      + j 1
                                    )
                                  )
                                )
                              )
                               (
                                loop2
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop2
                    )
                  )
                   g
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        contains_vertex g v
      )
       (
        cond (
          (
            string? (
              hash-table-ref g "vertex_to_index"
            )
          )
           (
            if (
              string-contains (
                hash-table-ref g "vertex_to_index"
              )
               v
            )
             #t #f
          )
        )
         (
          (
            hash-table? (
              hash-table-ref g "vertex_to_index"
            )
          )
           (
            if (
              hash-table-exists? (
                hash-table-ref g "vertex_to_index"
              )
               v
            )
             #t #f
          )
        )
         (
          else (
            if (
              member v (
                hash-table-ref g "vertex_to_index"
              )
            )
             #t #f
          )
        )
      )
    )
     (
      define (
        add_vertex g v
      )
       (
        begin (
          if (
            contains_vertex g v
          )
           (
            begin (
              panic "vertex already exists"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              matrix (
                hash-table-ref g "adj_matrix"
              )
            )
          )
           (
            begin (
              let (
                (
                  i 0
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop3 (
                        lambda (
                          
                        )
                         (
                          if (
                            < i (
                              _len matrix
                            )
                          )
                           (
                            begin (
                              list-set-safe! matrix i (
                                append (
                                  list-ref-safe matrix i
                                )
                                 (
                                  _list 0
                                )
                              )
                            )
                             (
                              set! i (
                                + i 1
                              )
                            )
                             (
                              loop3
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop3
                  )
                )
                 (
                  let (
                    (
                      row (
                        _list
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          j 0
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop4 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    < j (
                                      + (
                                        _len matrix
                                      )
                                       1
                                    )
                                  )
                                   (
                                    begin (
                                      set! row (
                                        append row (
                                          _list 0
                                        )
                                      )
                                    )
                                     (
                                      set! j (
                                        + j 1
                                      )
                                    )
                                     (
                                      loop4
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop4
                          )
                        )
                         (
                          set! matrix (
                            append matrix (
                              _list row
                            )
                          )
                        )
                         (
                          hash-table-set! g "adj_matrix" matrix
                        )
                         (
                          let (
                            (
                              idx_map (
                                hash-table-ref g "vertex_to_index"
                              )
                            )
                          )
                           (
                            begin (
                              hash-table-set! idx_map v (
                                - (
                                  _len matrix
                                )
                                 1
                              )
                            )
                             (
                              hash-table-set! g "vertex_to_index" idx_map
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        remove_key m k
      )
       (
        let (
          (
            out (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break6
              )
               (
                letrec (
                  (
                    loop5 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                key (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                if (
                                  not (
                                    equal? key k
                                  )
                                )
                                 (
                                  begin (
                                    hash-table-set! out key (
                                      hash-table-ref/default m key (
                                        void
                                      )
                                    )
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                           (
                            loop5 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop5 (
                    hash-table-keys m
                  )
                )
              )
            )
          )
           out
        )
      )
    )
     (
      define (
        decrement_indices m start
      )
       (
        let (
          (
            out (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break8
              )
               (
                letrec (
                  (
                    loop7 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                key (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    idx (
                                      hash-table-ref/default m key (
                                        void
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      > idx start
                                    )
                                     (
                                      begin (
                                        hash-table-set! out key (
                                          - idx 1
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        hash-table-set! out key idx
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop7 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop7 (
                    hash-table-keys m
                  )
                )
              )
            )
          )
           out
        )
      )
    )
     (
      define (
        remove_vertex g v
      )
       (
        begin (
          if (
            not (
              contains_vertex g v
            )
          )
           (
            begin (
              panic "vertex does not exist"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              idx (
                hash-table-ref/default (
                  hash-table-ref g "vertex_to_index"
                )
                 v (
                  void
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  new_matrix (
                    _list
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop9 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i (
                                  _len (
                                    hash-table-ref g "adj_matrix"
                                  )
                                )
                              )
                               (
                                begin (
                                  if (
                                    not (
                                      equal? i idx
                                    )
                                  )
                                   (
                                    begin (
                                      let (
                                        (
                                          row (
                                            list-ref-safe (
                                              hash-table-ref g "adj_matrix"
                                            )
                                             i
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          let (
                                            (
                                              new_row (
                                                _list
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  j 0
                                                )
                                              )
                                               (
                                                begin (
                                                  letrec (
                                                    (
                                                      loop10 (
                                                        lambda (
                                                          
                                                        )
                                                         (
                                                          if (
                                                            < j (
                                                              _len row
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              if (
                                                                not (
                                                                  equal? j idx
                                                                )
                                                              )
                                                               (
                                                                begin (
                                                                  set! new_row (
                                                                    append new_row (
                                                                      _list (
                                                                        list-ref-safe row j
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                void
                                                              )
                                                            )
                                                             (
                                                              set! j (
                                                                + j 1
                                                              )
                                                            )
                                                             (
                                                              loop10
                                                            )
                                                          )
                                                           (
                                                            void
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop10
                                                  )
                                                )
                                                 (
                                                  set! new_matrix (
                                                    append new_matrix (
                                                      _list new_row
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                                 (
                                  loop9
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop9
                      )
                    )
                     (
                      hash-table-set! g "adj_matrix" new_matrix
                    )
                     (
                      let (
                        (
                          m (
                            remove_key (
                              hash-table-ref g "vertex_to_index"
                            )
                             v
                          )
                        )
                      )
                       (
                        begin (
                          hash-table-set! g "vertex_to_index" (
                            decrement_indices m idx
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        add_edge g u v
      )
       (
        begin (
          if (
            not (
              and (
                contains_vertex g u
              )
               (
                contains_vertex g v
              )
            )
          )
           (
            begin (
              panic "missing vertex"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              i (
                hash-table-ref/default (
                  hash-table-ref g "vertex_to_index"
                )
                 u (
                  void
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  j (
                    hash-table-ref/default (
                      hash-table-ref g "vertex_to_index"
                    )
                     v (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      matrix (
                        hash-table-ref g "adj_matrix"
                      )
                    )
                  )
                   (
                    begin (
                      list-set-safe! (
                        list-ref-safe matrix i
                      )
                       j 1
                    )
                     (
                      if (
                        not (
                          hash-table-ref g "directed"
                        )
                      )
                       (
                        begin (
                          list-set-safe! (
                            list-ref-safe matrix j
                          )
                           i 1
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      hash-table-set! g "adj_matrix" matrix
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        remove_edge g u v
      )
       (
        begin (
          if (
            not (
              and (
                contains_vertex g u
              )
               (
                contains_vertex g v
              )
            )
          )
           (
            begin (
              panic "missing vertex"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              i (
                hash-table-ref/default (
                  hash-table-ref g "vertex_to_index"
                )
                 u (
                  void
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  j (
                    hash-table-ref/default (
                      hash-table-ref g "vertex_to_index"
                    )
                     v (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      matrix (
                        hash-table-ref g "adj_matrix"
                      )
                    )
                  )
                   (
                    begin (
                      list-set-safe! (
                        list-ref-safe matrix i
                      )
                       j 0
                    )
                     (
                      if (
                        not (
                          hash-table-ref g "directed"
                        )
                      )
                       (
                        begin (
                          list-set-safe! (
                            list-ref-safe matrix j
                          )
                           i 0
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      hash-table-set! g "adj_matrix" matrix
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        contains_edge g u v
      )
       (
        begin (
          if (
            not (
              and (
                contains_vertex g u
              )
               (
                contains_vertex g v
              )
            )
          )
           (
            begin (
              panic "missing vertex"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              i (
                hash-table-ref/default (
                  hash-table-ref g "vertex_to_index"
                )
                 u (
                  void
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  j (
                    hash-table-ref/default (
                      hash-table-ref g "vertex_to_index"
                    )
                     v (
                      void
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      matrix (
                        hash-table-ref g "adj_matrix"
                      )
                    )
                  )
                   (
                    begin (
                      equal? (
                        cond (
                          (
                            string? (
                              list-ref-safe matrix i
                            )
                          )
                           (
                            _substring (
                              list-ref-safe matrix i
                            )
                             j (
                              + j 1
                            )
                          )
                        )
                         (
                          (
                            hash-table? (
                              list-ref-safe matrix i
                            )
                          )
                           (
                            hash-table-ref (
                              list-ref-safe matrix i
                            )
                             j
                          )
                        )
                         (
                          else (
                            list-ref-safe (
                              list-ref-safe matrix i
                            )
                             j
                          )
                        )
                      )
                       1
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        clear_graph g
      )
       (
        begin (
          hash-table-set! g "vertex_to_index" (
            alist->hash-table (
              _list
            )
          )
        )
         (
          hash-table-set! g "adj_matrix" (
            _list
          )
        )
      )
    )
     (
      let (
        (
          g (
            make_graph (
              _list 1 2 3
            )
             (
              _list (
                _list 1 2
              )
               (
                _list 2 3
              )
            )
             #f
          )
        )
      )
       (
        begin (
          _display (
            if (
              string? (
                to-str-space (
                  hash-table-ref g "adj_matrix"
                )
              )
            )
             (
              to-str-space (
                hash-table-ref g "adj_matrix"
              )
            )
             (
              to-str (
                to-str-space (
                  hash-table-ref g "adj_matrix"
                )
              )
            )
          )
        )
         (
          newline
        )
         (
          _display (
            if (
              string? (
                to-str-space (
                  contains_edge g 1 2
                )
              )
            )
             (
              to-str-space (
                contains_edge g 1 2
              )
            )
             (
              to-str (
                to-str-space (
                  contains_edge g 1 2
                )
              )
            )
          )
        )
         (
          newline
        )
         (
          _display (
            if (
              string? (
                to-str-space (
                  contains_edge g 2 1
                )
              )
            )
             (
              to-str-space (
                contains_edge g 2 1
              )
            )
             (
              to-str (
                to-str-space (
                  contains_edge g 2 1
                )
              )
            )
          )
        )
         (
          newline
        )
         (
          remove_edge g 1 2
        )
         (
          _display (
            if (
              string? (
                to-str-space (
                  contains_edge g 1 2
                )
              )
            )
             (
              to-str-space (
                contains_edge g 1 2
              )
            )
             (
              to-str (
                to-str-space (
                  contains_edge g 1 2
                )
              )
            )
          )
        )
         (
          newline
        )
         (
          remove_vertex g 2
        )
         (
          _display (
            if (
              string? (
                to-str-space (
                  hash-table-ref g "adj_matrix"
                )
              )
            )
             (
              to-str-space (
                hash-table-ref g "adj_matrix"
              )
            )
             (
              to-str (
                to-str-space (
                  hash-table-ref g "adj_matrix"
                )
              )
            )
          )
        )
         (
          newline
        )
      )
    )
     (
      let (
        (
          end12 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur13 (
              quotient (
                * (
                  - end12 start11
                )
                 1000000
              )
               jps14
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur13
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
