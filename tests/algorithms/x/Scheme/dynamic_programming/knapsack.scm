;; Generated by Mochi Scheme transpiler on 2025-08-13 07:12 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start9 (
        current-jiffy
      )
    )
     (
      jps12 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          f (
            void
          )
        )
      )
       (
        begin (
          define (
            max_int a b
          )
           (
            if (
              > a b
            )
             (
              begin a
            )
             (
              begin b
            )
          )
        )
         (
          define (
            init_f n w
          )
           (
            let (
              (
                table (
                  void
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop1 (
                          lambda (
                            
                          )
                           (
                            if (
                              <= i n
                            )
                             (
                              begin (
                                let (
                                  (
                                    row (
                                      void
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        j 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop2 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  <= j w
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      or (
                                                        equal? i 0
                                                      )
                                                       (
                                                        equal? j 0
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! row (
                                                          append row (
                                                            _list 0
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! row (
                                                          append row (
                                                            _list (
                                                              - 1
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                   (
                                                    loop2
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop2
                                        )
                                      )
                                       (
                                        set! table (
                                          append table (
                                            _list row
                                          )
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop1
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop1
                    )
                  )
                   table
                )
              )
            )
          )
        )
         (
          define (
            mf_knapsack i wt val j
          )
           (
            begin (
              if (
                < (
                  cond (
                    (
                      string? (
                        list-ref-safe f i
                      )
                    )
                     (
                      _substring (
                        list-ref-safe f i
                      )
                       j (
                        + j 1
                      )
                    )
                  )
                   (
                    (
                      hash-table? (
                        list-ref-safe f i
                      )
                    )
                     (
                      hash-table-ref (
                        list-ref-safe f i
                      )
                       j
                    )
                  )
                   (
                    else (
                      list-ref-safe (
                        list-ref-safe f i
                      )
                       j
                    )
                  )
                )
                 0
              )
               (
                begin (
                  if (
                    < j (
                      list-ref-safe wt (
                        - i 1
                      )
                    )
                  )
                   (
                    begin (
                      list-set-safe! (
                        list-ref-safe f i
                      )
                       j (
                        mf_knapsack (
                          - i 1
                        )
                         wt val j
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          without_item (
                            mf_knapsack (
                              - i 1
                            )
                             wt val j
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              with_item (
                                _add (
                                  mf_knapsack (
                                    - i 1
                                  )
                                   wt val (
                                    - j (
                                      list-ref-safe wt (
                                        - i 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  list-ref-safe val (
                                    - i 1
                                  )
                                )
                              )
                            )
                          )
                           (
                            begin (
                              list-set-safe! (
                                list-ref-safe f i
                              )
                               j (
                                max_int without_item with_item
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
               (
                void
              )
            )
             (
              cond (
                (
                  string? (
                    list-ref-safe f i
                  )
                )
                 (
                  _substring (
                    list-ref-safe f i
                  )
                   j (
                    + j 1
                  )
                )
              )
               (
                (
                  hash-table? (
                    list-ref-safe f i
                  )
                )
                 (
                  hash-table-ref (
                    list-ref-safe f i
                  )
                   j
                )
              )
               (
                else (
                  list-ref-safe (
                    list-ref-safe f i
                  )
                   j
                )
              )
            )
          )
        )
         (
          define (
            create_matrix rows cols
          )
           (
            let (
              (
                matrix (
                  void
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop3 (
                          lambda (
                            
                          )
                           (
                            if (
                              <= i rows
                            )
                             (
                              begin (
                                let (
                                  (
                                    row (
                                      void
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        j 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop4 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  <= j cols
                                                )
                                                 (
                                                  begin (
                                                    set! row (
                                                      append row (
                                                        _list 0
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                   (
                                                    loop4
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop4
                                        )
                                      )
                                       (
                                        set! matrix (
                                          append matrix (
                                            _list row
                                          )
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop3
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop3
                    )
                  )
                   matrix
                )
              )
            )
          )
        )
         (
          define (
            knapsack w wt val n
          )
           (
            let (
              (
                dp (
                  create_matrix n w
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 1
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop5 (
                          lambda (
                            
                          )
                           (
                            if (
                              <= i n
                            )
                             (
                              begin (
                                let (
                                  (
                                    w_ 1
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop6 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              <= w_ w
                                            )
                                             (
                                              begin (
                                                if (
                                                  <= (
                                                    list-ref-safe wt (
                                                      - i 1
                                                    )
                                                  )
                                                   w_
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        include (
                                                          + (
                                                            list-ref-safe val (
                                                              - i 1
                                                            )
                                                          )
                                                           (
                                                            cond (
                                                              (
                                                                string? (
                                                                  list-ref-safe dp (
                                                                    - i 1
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                _substring (
                                                                  list-ref-safe dp (
                                                                    - i 1
                                                                  )
                                                                )
                                                                 (
                                                                  - w_ (
                                                                    list-ref-safe wt (
                                                                      - i 1
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  + (
                                                                    - w_ (
                                                                      list-ref-safe wt (
                                                                        - i 1
                                                                      )
                                                                    )
                                                                  )
                                                                   1
                                                                )
                                                              )
                                                            )
                                                             (
                                                              (
                                                                hash-table? (
                                                                  list-ref-safe dp (
                                                                    - i 1
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                hash-table-ref (
                                                                  list-ref-safe dp (
                                                                    - i 1
                                                                  )
                                                                )
                                                                 (
                                                                  - w_ (
                                                                    list-ref-safe wt (
                                                                      - i 1
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              else (
                                                                list-ref-safe (
                                                                  list-ref-safe dp (
                                                                    - i 1
                                                                  )
                                                                )
                                                                 (
                                                                  - w_ (
                                                                    list-ref-safe wt (
                                                                      - i 1
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            exclude (
                                                              cond (
                                                                (
                                                                  string? (
                                                                    list-ref-safe dp (
                                                                      - i 1
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  _substring (
                                                                    list-ref-safe dp (
                                                                      - i 1
                                                                    )
                                                                  )
                                                                   w_ (
                                                                    + w_ 1
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                (
                                                                  hash-table? (
                                                                    list-ref-safe dp (
                                                                      - i 1
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  hash-table-ref (
                                                                    list-ref-safe dp (
                                                                      - i 1
                                                                    )
                                                                  )
                                                                   w_
                                                                )
                                                              )
                                                               (
                                                                else (
                                                                  list-ref-safe (
                                                                    list-ref-safe dp (
                                                                      - i 1
                                                                    )
                                                                  )
                                                                   w_
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            list-set-safe! (
                                                              list-ref-safe dp i
                                                            )
                                                             w_ (
                                                              max_int include exclude
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    list-set-safe! (
                                                      list-ref-safe dp i
                                                    )
                                                     w_ (
                                                      cond (
                                                        (
                                                          string? (
                                                            list-ref-safe dp (
                                                              - i 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          _substring (
                                                            list-ref-safe dp (
                                                              - i 1
                                                            )
                                                          )
                                                           w_ (
                                                            + w_ 1
                                                          )
                                                        )
                                                      )
                                                       (
                                                        (
                                                          hash-table? (
                                                            list-ref-safe dp (
                                                              - i 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          hash-table-ref (
                                                            list-ref-safe dp (
                                                              - i 1
                                                            )
                                                          )
                                                           w_
                                                        )
                                                      )
                                                       (
                                                        else (
                                                          list-ref-safe (
                                                            list-ref-safe dp (
                                                              - i 1
                                                            )
                                                          )
                                                           w_
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                set! w_ (
                                                  + w_ 1
                                                )
                                              )
                                               (
                                                loop6
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop6
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                               (
                                loop5
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop5
                    )
                  )
                   dp
                )
              )
            )
          )
        )
         (
          define (
            construct_solution dp wt i j optimal_set
          )
           (
            call/cc (
              lambda (
                ret7
              )
               (
                begin (
                  if (
                    and (
                      > i 0
                    )
                     (
                      > j 0
                    )
                  )
                   (
                    begin (
                      if (
                        equal? (
                          cond (
                            (
                              string? (
                                list-ref-safe dp (
                                  - i 1
                                )
                              )
                            )
                             (
                              _substring (
                                list-ref-safe dp (
                                  - i 1
                                )
                              )
                               j (
                                + j 1
                              )
                            )
                          )
                           (
                            (
                              hash-table? (
                                list-ref-safe dp (
                                  - i 1
                                )
                              )
                            )
                             (
                              hash-table-ref (
                                list-ref-safe dp (
                                  - i 1
                                )
                              )
                               j
                            )
                          )
                           (
                            else (
                              list-ref-safe (
                                list-ref-safe dp (
                                  - i 1
                                )
                              )
                               j
                            )
                          )
                        )
                         (
                          cond (
                            (
                              string? (
                                list-ref-safe dp i
                              )
                            )
                             (
                              _substring (
                                list-ref-safe dp i
                              )
                               j (
                                + j 1
                              )
                            )
                          )
                           (
                            (
                              hash-table? (
                                list-ref-safe dp i
                              )
                            )
                             (
                              hash-table-ref (
                                list-ref-safe dp i
                              )
                               j
                            )
                          )
                           (
                            else (
                              list-ref-safe (
                                list-ref-safe dp i
                              )
                               j
                            )
                          )
                        )
                      )
                       (
                        begin (
                          ret7 (
                            construct_solution dp wt (
                              - i 1
                            )
                             j optimal_set
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              with_prev (
                                construct_solution dp wt (
                                  - i 1
                                )
                                 (
                                  - j (
                                    list-ref-safe wt (
                                      - i 1
                                    )
                                  )
                                )
                                 optimal_set
                              )
                            )
                          )
                           (
                            begin (
                              ret7 (
                                append with_prev (
                                  _list i
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  ret7 optimal_set
                )
              )
            )
          )
        )
         (
          define (
            knapsack_with_example_solution w wt val
          )
           (
            let (
              (
                num_items (
                  _len wt
                )
              )
            )
             (
              begin (
                let (
                  (
                    dp_table (
                      knapsack w wt val num_items
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        optimal_val (
                          cond (
                            (
                              string? (
                                cond (
                                  (
                                    string? dp_table
                                  )
                                   (
                                    _substring dp_table num_items (
                                      + num_items 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? dp_table
                                  )
                                   (
                                    hash-table-ref dp_table num_items
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe dp_table num_items
                                  )
                                )
                              )
                            )
                             (
                              _substring (
                                cond (
                                  (
                                    string? dp_table
                                  )
                                   (
                                    _substring dp_table num_items (
                                      + num_items 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? dp_table
                                  )
                                   (
                                    hash-table-ref dp_table num_items
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe dp_table num_items
                                  )
                                )
                              )
                               w (
                                + w 1
                              )
                            )
                          )
                           (
                            (
                              hash-table? (
                                cond (
                                  (
                                    string? dp_table
                                  )
                                   (
                                    _substring dp_table num_items (
                                      + num_items 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? dp_table
                                  )
                                   (
                                    hash-table-ref dp_table num_items
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe dp_table num_items
                                  )
                                )
                              )
                            )
                             (
                              hash-table-ref (
                                cond (
                                  (
                                    string? dp_table
                                  )
                                   (
                                    _substring dp_table num_items (
                                      + num_items 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? dp_table
                                  )
                                   (
                                    hash-table-ref dp_table num_items
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe dp_table num_items
                                  )
                                )
                              )
                               w
                            )
                          )
                           (
                            else (
                              list-ref-safe (
                                cond (
                                  (
                                    string? dp_table
                                  )
                                   (
                                    _substring dp_table num_items (
                                      + num_items 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? dp_table
                                  )
                                   (
                                    hash-table-ref dp_table num_items
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe dp_table num_items
                                  )
                                )
                              )
                               w
                            )
                          )
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            subset (
                              construct_solution dp_table wt num_items w (
                                _list
                              )
                            )
                          )
                        )
                         (
                          begin (
                            alist->hash-table (
                              _list (
                                cons "value" optimal_val
                              )
                               (
                                cons "subset" subset
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            format_set xs
          )
           (
            let (
              (
                res "{"
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop8 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len xs
                              )
                            )
                             (
                              begin (
                                set! res (
                                  string-append res (
                                    to-str-space (
                                      list-ref-safe xs i
                                    )
                                  )
                                )
                              )
                               (
                                if (
                                  < (
                                    + i 1
                                  )
                                   (
                                    _len xs
                                  )
                                )
                                 (
                                  begin (
                                    set! res (
                                      string-append res ", "
                                    )
                                  )
                                )
                                 (
                                  void
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop8
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop8
                    )
                  )
                   (
                    set! res (
                      string-append res "}"
                    )
                  )
                   res
                )
              )
            )
          )
        )
         (
          let (
            (
              val_list (
                _list 3 2 4 4
              )
            )
          )
           (
            begin (
              let (
                (
                  wt_list (
                    _list 4 3 2 3
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      n 4
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          w_cap 6
                        )
                      )
                       (
                        begin (
                          set! f (
                            init_f n w_cap
                          )
                        )
                         (
                          let (
                            (
                              dp_table (
                                knapsack w_cap wt_list val_list n
                              )
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  optimal_solution (
                                    cond (
                                      (
                                        string? (
                                          cond (
                                            (
                                              string? dp_table
                                            )
                                             (
                                              _substring dp_table n (
                                                + n 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? dp_table
                                            )
                                             (
                                              hash-table-ref dp_table n
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe dp_table n
                                            )
                                          )
                                        )
                                      )
                                       (
                                        _substring (
                                          cond (
                                            (
                                              string? dp_table
                                            )
                                             (
                                              _substring dp_table n (
                                                + n 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? dp_table
                                            )
                                             (
                                              hash-table-ref dp_table n
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe dp_table n
                                            )
                                          )
                                        )
                                         w_cap (
                                          + w_cap 1
                                        )
                                      )
                                    )
                                     (
                                      (
                                        hash-table? (
                                          cond (
                                            (
                                              string? dp_table
                                            )
                                             (
                                              _substring dp_table n (
                                                + n 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? dp_table
                                            )
                                             (
                                              hash-table-ref dp_table n
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe dp_table n
                                            )
                                          )
                                        )
                                      )
                                       (
                                        hash-table-ref (
                                          cond (
                                            (
                                              string? dp_table
                                            )
                                             (
                                              _substring dp_table n (
                                                + n 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? dp_table
                                            )
                                             (
                                              hash-table-ref dp_table n
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe dp_table n
                                            )
                                          )
                                        )
                                         w_cap
                                      )
                                    )
                                     (
                                      else (
                                        list-ref-safe (
                                          cond (
                                            (
                                              string? dp_table
                                            )
                                             (
                                              _substring dp_table n (
                                                + n 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? dp_table
                                            )
                                             (
                                              hash-table-ref dp_table n
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe dp_table n
                                            )
                                          )
                                        )
                                         w_cap
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                begin (
                                  _display (
                                    if (
                                      string? optimal_solution
                                    )
                                     optimal_solution (
                                      to-str optimal_solution
                                    )
                                  )
                                )
                                 (
                                  newline
                                )
                                 (
                                  _display (
                                    if (
                                      string? (
                                        mf_knapsack n wt_list val_list w_cap
                                      )
                                    )
                                     (
                                      mf_knapsack n wt_list val_list w_cap
                                    )
                                     (
                                      to-str (
                                        mf_knapsack n wt_list val_list w_cap
                                      )
                                    )
                                  )
                                )
                                 (
                                  newline
                                )
                                 (
                                  let (
                                    (
                                      example (
                                        knapsack_with_example_solution w_cap wt_list val_list
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      _display (
                                        if (
                                          string? (
                                            string-append "optimal_value = " (
                                              to-str-space (
                                                hash-table-ref example "value"
                                              )
                                            )
                                          )
                                        )
                                         (
                                          string-append "optimal_value = " (
                                            to-str-space (
                                              hash-table-ref example "value"
                                            )
                                          )
                                        )
                                         (
                                          to-str (
                                            string-append "optimal_value = " (
                                              to-str-space (
                                                hash-table-ref example "value"
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      newline
                                    )
                                     (
                                      _display (
                                        if (
                                          string? (
                                            string-append "An optimal subset corresponding to the optimal value " (
                                              format_set (
                                                hash-table-ref example "subset"
                                              )
                                            )
                                          )
                                        )
                                         (
                                          string-append "An optimal subset corresponding to the optimal value " (
                                            format_set (
                                              hash-table-ref example "subset"
                                            )
                                          )
                                        )
                                         (
                                          to-str (
                                            string-append "An optimal subset corresponding to the optimal value " (
                                              format_set (
                                                hash-table-ref example "subset"
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      newline
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end10 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur11 (
              quotient (
                * (
                  - end10 start9
                )
                 1000000
              )
               jps12
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur11
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
