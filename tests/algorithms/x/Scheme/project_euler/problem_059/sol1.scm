;; Generated by Mochi Scheme transpiler on 2025-08-16 14:44 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start21 (
        current-jiffy
      )
    )
     (
      jps24 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        xor a b
      )
       (
        let (
          (
            res 0
          )
        )
         (
          begin (
            let (
              (
                bit 1
              )
            )
             (
              begin (
                let (
                  (
                    x a
                  )
                )
                 (
                  begin (
                    let (
                      (
                        y b
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop1 (
                              lambda (
                                
                              )
                               (
                                if (
                                  or (
                                    > x 0
                                  )
                                   (
                                    > y 0
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        abit (
                                          _mod x 2
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            bbit (
                                              _mod y 2
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              not (
                                                _eq abit bbit
                                              )
                                            )
                                             (
                                              begin (
                                                set! res (
                                                  + res bit
                                                )
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                           (
                                            set! x (
                                              _div x 2
                                            )
                                          )
                                           (
                                            set! y (
                                              _div y 2
                                            )
                                          )
                                           (
                                            set! bit (
                                              * bit 2
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop1
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop1
                        )
                      )
                       res
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          ascii_chars " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
        )
      )
       (
        begin (
          define (
            chr code
          )
           (
            call/cc (
              lambda (
                ret2
              )
               (
                begin (
                  if (
                    _eq code 10
                  )
                   (
                    begin (
                      ret2 "\n"
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  if (
                    _eq code 13
                  )
                   (
                    begin (
                      ret2 "\r"
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  if (
                    _eq code 9
                  )
                   (
                    begin (
                      ret2 "\t"
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  if (
                    and (
                      >= code 32
                    )
                     (
                      < code 127
                    )
                  )
                   (
                    begin (
                      ret2 (
                        _substring ascii_chars (
                          - code 32
                        )
                         (
                          - code 31
                        )
                      )
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  ret2 ""
                )
              )
            )
          )
        )
         (
          define (
            ord ch
          )
           (
            call/cc (
              lambda (
                ret3
              )
               (
                begin (
                  if (
                    _eq ch "\n"
                  )
                   (
                    begin (
                      ret3 10
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  if (
                    _eq ch "\r"
                  )
                   (
                    begin (
                      ret3 13
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  if (
                    _eq ch "\t"
                  )
                   (
                    begin (
                      ret3 9
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop4 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i (
                                  _len ascii_chars
                                )
                              )
                               (
                                begin (
                                  if (
                                    _eq (
                                      _substring ascii_chars i (
                                        + i 1
                                      )
                                    )
                                     ch
                                  )
                                   (
                                    begin (
                                      ret3 (
                                        + 32 i
                                      )
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                                 (
                                  loop4
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop4
                      )
                    )
                     (
                      ret3 0
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            is_valid_ascii code
          )
           (
            call/cc (
              lambda (
                ret5
              )
               (
                begin (
                  if (
                    and (
                      >= code 32
                    )
                     (
                      <= code 126
                    )
                  )
                   (
                    begin (
                      ret5 #t
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  if (
                    or (
                      or (
                        _eq code 9
                      )
                       (
                        _eq code 10
                      )
                    )
                     (
                      _eq code 13
                    )
                  )
                   (
                    begin (
                      ret5 #t
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  ret5 #f
                )
              )
            )
          )
        )
         (
          let (
            (
              LOWERCASE_INTS (
                _list
              )
            )
          )
           (
            begin (
              let (
                (
                  i 97
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop6 (
                        lambda (
                          
                        )
                         (
                          if (
                            <= i 122
                          )
                           (
                            begin (
                              set! LOWERCASE_INTS (
                                append LOWERCASE_INTS (
                                  _list i
                                )
                              )
                            )
                             (
                              set! i (
                                + i 1
                              )
                            )
                             (
                              loop6
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop6
                  )
                )
                 (
                  let (
                    (
                      COMMON_WORDS (
                        _list "the" "be" "to" "of" "and" "in" "that" "have"
                      )
                    )
                  )
                   (
                    begin (
                      define (
                        try_key ciphertext key
                      )
                       (
                        call/cc (
                          lambda (
                            ret7
                          )
                           (
                            let (
                              (
                                decoded ""
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    i 0
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        klen (
                                          _len key
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop8 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < i (
                                                    _len ciphertext
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        decodedchar (
                                                          xor (
                                                            list-ref-safe ciphertext i
                                                          )
                                                           (
                                                            list-ref-safe key (
                                                              _mod i klen
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        if (
                                                          not (
                                                            is_valid_ascii decodedchar
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            ret7 (
                                                              void
                                                            )
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                       (
                                                        set! decoded (
                                                          string-append decoded (
                                                            chr decodedchar
                                                          )
                                                        )
                                                      )
                                                       (
                                                        set! i (
                                                          + i 1
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop8
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop8
                                        )
                                      )
                                       (
                                        ret7 decoded
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      define (
                        filter_valid_chars ciphertext
                      )
                       (
                        let (
                          (
                            possibles (
                              _list
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                i 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop9 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < i (
                                            _len LOWERCASE_INTS
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                j 0
                                              )
                                            )
                                             (
                                              begin (
                                                letrec (
                                                  (
                                                    loop10 (
                                                      lambda (
                                                        
                                                      )
                                                       (
                                                        if (
                                                          < j (
                                                            _len LOWERCASE_INTS
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                k 0
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                letrec (
                                                                  (
                                                                    loop11 (
                                                                      lambda (
                                                                        
                                                                      )
                                                                       (
                                                                        if (
                                                                          < k (
                                                                            _len LOWERCASE_INTS
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            let (
                                                                              (
                                                                                key (
                                                                                  _list (
                                                                                    list-ref-safe LOWERCASE_INTS i
                                                                                  )
                                                                                   (
                                                                                    list-ref-safe LOWERCASE_INTS j
                                                                                  )
                                                                                   (
                                                                                    list-ref-safe LOWERCASE_INTS k
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                let (
                                                                                  (
                                                                                    decoded (
                                                                                      try_key ciphertext key
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    if (
                                                                                      not (
                                                                                        _eq decoded (
                                                                                          void
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      begin (
                                                                                        set! possibles (
                                                                                          append possibles (
                                                                                            _list decoded
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      void
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    set! k (
                                                                                      + k 1
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            loop11
                                                                          )
                                                                        )
                                                                         (
                                                                          void
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  loop11
                                                                )
                                                              )
                                                               (
                                                                set! j (
                                                                  + j 1
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            loop10
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop10
                                                )
                                              )
                                               (
                                                set! i (
                                                  + i 1
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop9
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop9
                                )
                              )
                               possibles
                            )
                          )
                        )
                      )
                    )
                     (
                      define (
                        contains s sub
                      )
                       (
                        call/cc (
                          lambda (
                            ret12
                          )
                           (
                            let (
                              (
                                n (
                                  _len s
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    m (
                                      _len sub
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      _eq m 0
                                    )
                                     (
                                      begin (
                                        ret12 #t
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                   (
                                    let (
                                      (
                                        i 0
                                      )
                                    )
                                     (
                                      begin (
                                        call/cc (
                                          lambda (
                                            break14
                                          )
                                           (
                                            letrec (
                                              (
                                                loop13 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      <= i (
                                                        - n m
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            j 0
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                is_match #t
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                call/cc (
                                                                  lambda (
                                                                    break16
                                                                  )
                                                                   (
                                                                    letrec (
                                                                      (
                                                                        loop15 (
                                                                          lambda (
                                                                            
                                                                          )
                                                                           (
                                                                            if (
                                                                              < j m
                                                                            )
                                                                             (
                                                                              begin (
                                                                                if (
                                                                                  not (
                                                                                    _eq (
                                                                                      _substring s (
                                                                                        + i j
                                                                                      )
                                                                                       (
                                                                                        + (
                                                                                          + i j
                                                                                        )
                                                                                         1
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      _substring sub j (
                                                                                        + j 1
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    set! is_match #f
                                                                                  )
                                                                                   (
                                                                                    break16 (
                                                                                      void
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  void
                                                                                )
                                                                              )
                                                                               (
                                                                                set! j (
                                                                                  + j 1
                                                                                )
                                                                              )
                                                                               (
                                                                                loop15
                                                                              )
                                                                            )
                                                                             (
                                                                              void
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      loop15
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                if is_match (
                                                                  begin (
                                                                    ret12 #t
                                                                  )
                                                                )
                                                                 (
                                                                  void
                                                                )
                                                              )
                                                               (
                                                                set! i (
                                                                  + i 1
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop13
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop13
                                            )
                                          )
                                        )
                                      )
                                       (
                                        ret12 #f
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      define (
                        filter_common_word possibles common_word
                      )
                       (
                        let (
                          (
                            res (
                              _list
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                i 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop17 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < i (
                                            _len possibles
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                p (
                                                  list-ref-safe possibles i
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                if (
                                                  contains (
                                                    lower p
                                                  )
                                                   common_word
                                                )
                                                 (
                                                  begin (
                                                    set! res (
                                                      append res (
                                                        _list p
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                               (
                                                set! i (
                                                  + i 1
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop17
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop17
                                )
                              )
                               res
                            )
                          )
                        )
                      )
                    )
                     (
                      define (
                        solution ciphertext
                      )
                       (
                        let (
                          (
                            possibles (
                              filter_valid_chars ciphertext
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                i 0
                              )
                            )
                             (
                              begin (
                                call/cc (
                                  lambda (
                                    break19
                                  )
                                   (
                                    letrec (
                                      (
                                        loop18 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < i (
                                                _len COMMON_WORDS
                                              )
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    word (
                                                      list-ref-safe COMMON_WORDS i
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    set! possibles (
                                                      filter_common_word possibles word
                                                    )
                                                  )
                                                   (
                                                    if (
                                                      _eq (
                                                        _len possibles
                                                      )
                                                       1
                                                    )
                                                     (
                                                      begin (
                                                        break19 (
                                                          void
                                                        )
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    set! i (
                                                      + i 1
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                loop18
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop18
                                    )
                                  )
                                )
                              )
                               (
                                let (
                                  (
                                    decoded_text (
                                      cond (
                                        (
                                          string? possibles
                                        )
                                         (
                                          _substring possibles 0 (
                                            + 0 1
                                          )
                                        )
                                      )
                                       (
                                        (
                                          hash-table? possibles
                                        )
                                         (
                                          hash-table-ref possibles 0
                                        )
                                      )
                                       (
                                        else (
                                          list-ref-safe possibles 0
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        sum 0
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            j 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop20 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < j (
                                                        _len decoded_text
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! sum (
                                                          _add sum (
                                                            ord (
                                                              _substring decoded_text j (
                                                                + j 1
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        set! j (
                                                          + j 1
                                                        )
                                                      )
                                                       (
                                                        loop20
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop20
                                            )
                                          )
                                           sum
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      let (
                        (
                          ciphertext (
                            _list 17 6 1 69 12 1 69 26 11 69 1 2 69 15 10 1 78 13 11 78 16 13 15 16 69 6 5 19 11
                          )
                        )
                      )
                       (
                        begin (
                          _display (
                            if (
                              string? (
                                to-str-space (
                                  solution ciphertext
                                )
                              )
                            )
                             (
                              to-str-space (
                                solution ciphertext
                              )
                            )
                             (
                              to-str (
                                to-str-space (
                                  solution ciphertext
                                )
                              )
                            )
                          )
                        )
                         (
                          newline
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end22 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur23 (
              quotient (
                * (
                  - end22 start21
                )
                 1000000
              )
               jps24
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur23
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
