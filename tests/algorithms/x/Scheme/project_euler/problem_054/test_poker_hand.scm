;; Generated by Mochi Scheme transpiler on 2025-08-16 14:44 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start14 (
        current-jiffy
      )
    )
     (
      jps17 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        split s sep
      )
       (
        let (
          (
            parts (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                cur ""
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop1 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len s
                              )
                            )
                             (
                              begin (
                                if (
                                  and (
                                    and (
                                      > (
                                        _len sep
                                      )
                                       0
                                    )
                                     (
                                      <= (
                                        + i (
                                          _len sep
                                        )
                                      )
                                       (
                                        _len s
                                      )
                                    )
                                  )
                                   (
                                    _eq (
                                      _substring s i (
                                        + i (
                                          _len sep
                                        )
                                      )
                                    )
                                     sep
                                  )
                                )
                                 (
                                  begin (
                                    set! parts (
                                      append parts (
                                        _list cur
                                      )
                                    )
                                  )
                                   (
                                    set! cur ""
                                  )
                                   (
                                    set! i (
                                      + i (
                                        _len sep
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    set! cur (
                                      string-append cur (
                                        _substring s i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                               (
                                loop1
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop1
                    )
                  )
                   (
                    set! parts (
                      append parts (
                        _list cur
                      )
                    )
                  )
                   parts
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        card_value ch
      )
       (
        if (
          _eq ch "A"
        )
         (
          begin 14
        )
         (
          if (
            _eq ch "K"
          )
           (
            begin 13
          )
           (
            if (
              _eq ch "Q"
            )
             (
              begin 12
            )
             (
              if (
                _eq ch "J"
              )
               (
                begin 11
              )
               (
                if (
                  _eq ch "T"
                )
                 (
                  begin 10
                )
                 (
                  if (
                    _eq ch "9"
                  )
                   (
                    begin 9
                  )
                   (
                    if (
                      _eq ch "8"
                    )
                     (
                      begin 8
                    )
                     (
                      if (
                        _eq ch "7"
                      )
                       (
                        begin 7
                      )
                       (
                        if (
                          _eq ch "6"
                        )
                         (
                          begin 6
                        )
                         (
                          if (
                            _eq ch "5"
                          )
                           (
                            begin 5
                          )
                           (
                            if (
                              _eq ch "4"
                            )
                             (
                              begin 4
                            )
                             (
                              if (
                                _eq ch "3"
                              )
                               (
                                begin 3
                              )
                               (
                                begin 2
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        parse_hand hand
      )
       (
        let (
          (
            counts (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          <= i 14
                        )
                         (
                          begin (
                            set! counts (
                              append counts (
                                _list 0
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               (
                let (
                  (
                    suits (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    call/cc (
                      lambda (
                        break4
                      )
                       (
                        letrec (
                          (
                            loop3 (
                              lambda (
                                xs
                              )
                               (
                                if (
                                  null? xs
                                )
                                 (
                                  void
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        card (
                                          car xs
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            v (
                                              card_value (
                                                if (
                                                  string? card
                                                )
                                                 (
                                                  _substring card 0 1
                                                )
                                                 (
                                                  take (
                                                    drop card 0
                                                  )
                                                   (
                                                    - 1 0
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            list-set-safe! counts v (
                                              + (
                                                list-ref-safe counts v
                                              )
                                               1
                                            )
                                          )
                                           (
                                            set! suits (
                                              append suits (
                                                _list (
                                                  if (
                                                    string? card
                                                  )
                                                   (
                                                    _substring card 1 2
                                                  )
                                                   (
                                                    take (
                                                      drop card 1
                                                    )
                                                     (
                                                      - 2 1
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop3 (
                                      cdr xs
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          loop3 (
                            split hand " "
                          )
                        )
                      )
                    )
                  )
                   (
                    let (
                      (
                        vals (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            v 14
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop5 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      >= v 2
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            c (
                                              list-ref-safe counts v
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                k 0
                                              )
                                            )
                                             (
                                              begin (
                                                letrec (
                                                  (
                                                    loop6 (
                                                      lambda (
                                                        
                                                      )
                                                       (
                                                        if (
                                                          < k c
                                                        )
                                                         (
                                                          begin (
                                                            set! vals (
                                                              append vals (
                                                                _list v
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! k (
                                                              + k 1
                                                            )
                                                          )
                                                           (
                                                            loop6
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop6
                                                )
                                              )
                                               (
                                                set! v (
                                                  - v 1
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop5
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop5
                            )
                          )
                           (
                            let (
                              (
                                is_straight #f
                              )
                            )
                             (
                              begin (
                                if (
                                  and (
                                    and (
                                      and (
                                        and (
                                          and (
                                            _eq (
                                              _len vals
                                            )
                                             5
                                          )
                                           (
                                            _eq (
                                              list-ref-safe vals 0
                                            )
                                             14
                                          )
                                        )
                                         (
                                          _eq (
                                            list-ref-safe vals 1
                                          )
                                           5
                                        )
                                      )
                                       (
                                        _eq (
                                          list-ref-safe vals 2
                                        )
                                         4
                                      )
                                    )
                                     (
                                      _eq (
                                        list-ref-safe vals 3
                                      )
                                       3
                                    )
                                  )
                                   (
                                    _eq (
                                      list-ref-safe vals 4
                                    )
                                     2
                                  )
                                )
                                 (
                                  begin (
                                    set! is_straight #t
                                  )
                                   (
                                    list-set-safe! vals 0 5
                                  )
                                   (
                                    list-set-safe! vals 1 4
                                  )
                                   (
                                    list-set-safe! vals 2 3
                                  )
                                   (
                                    list-set-safe! vals 3 2
                                  )
                                   (
                                    list-set-safe! vals 4 14
                                  )
                                )
                                 (
                                  begin (
                                    set! is_straight #t
                                  )
                                   (
                                    let (
                                      (
                                        j 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop7 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < j 4
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      not (
                                                        _eq (
                                                          - (
                                                            list-ref-safe vals j
                                                          )
                                                           (
                                                            list-ref-safe vals (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                         1
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! is_straight #f
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                   (
                                                    loop7
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop7
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                let (
                                  (
                                    is_flush #t
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        s0 (
                                          list-ref-safe suits 0
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            t 1
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop8 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < t (
                                                        _len suits
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        if (
                                                          not (
                                                            _eq (
                                                              list-ref-safe suits t
                                                            )
                                                             s0
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            set! is_flush #f
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                       (
                                                        set! t (
                                                          + t 1
                                                        )
                                                      )
                                                       (
                                                        loop8
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop8
                                            )
                                          )
                                           (
                                            let (
                                              (
                                                four_val 0
                                              )
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    three_val 0
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        pair_vals (
                                                          _list
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! v 14
                                                      )
                                                       (
                                                        letrec (
                                                          (
                                                            loop9 (
                                                              lambda (
                                                                
                                                              )
                                                               (
                                                                if (
                                                                  >= v 2
                                                                )
                                                                 (
                                                                  begin (
                                                                    if (
                                                                      _eq (
                                                                        list-ref-safe counts v
                                                                      )
                                                                       4
                                                                    )
                                                                     (
                                                                      begin (
                                                                        set! four_val v
                                                                      )
                                                                    )
                                                                     (
                                                                      if (
                                                                        _eq (
                                                                          list-ref-safe counts v
                                                                        )
                                                                         3
                                                                      )
                                                                       (
                                                                        begin (
                                                                          set! three_val v
                                                                        )
                                                                      )
                                                                       (
                                                                        if (
                                                                          _eq (
                                                                            list-ref-safe counts v
                                                                          )
                                                                           2
                                                                        )
                                                                         (
                                                                          begin (
                                                                            set! pair_vals (
                                                                              append pair_vals (
                                                                                _list v
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          void
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    set! v (
                                                                      - v 1
                                                                    )
                                                                  )
                                                                   (
                                                                    loop9
                                                                  )
                                                                )
                                                                 (
                                                                  void
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          loop9
                                                        )
                                                      )
                                                       (
                                                        let (
                                                          (
                                                            rank 1
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            if (
                                                              and (
                                                                and (
                                                                  and is_flush is_straight
                                                                )
                                                                 (
                                                                  _eq (
                                                                    list-ref-safe vals 0
                                                                  )
                                                                   14
                                                                )
                                                              )
                                                               (
                                                                _eq (
                                                                  list-ref-safe vals 4
                                                                )
                                                                 10
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                set! rank 10
                                                              )
                                                            )
                                                             (
                                                              if (
                                                                and is_flush is_straight
                                                              )
                                                               (
                                                                begin (
                                                                  set! rank 9
                                                                )
                                                              )
                                                               (
                                                                if (
                                                                  not (
                                                                    _eq four_val 0
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    set! rank 8
                                                                  )
                                                                )
                                                                 (
                                                                  if (
                                                                    and (
                                                                      not (
                                                                        _eq three_val 0
                                                                      )
                                                                    )
                                                                     (
                                                                      _eq (
                                                                        _len pair_vals
                                                                      )
                                                                       1
                                                                    )
                                                                  )
                                                                   (
                                                                    begin (
                                                                      set! rank 7
                                                                    )
                                                                  )
                                                                   (
                                                                    if is_flush (
                                                                      begin (
                                                                        set! rank 6
                                                                      )
                                                                    )
                                                                     (
                                                                      if is_straight (
                                                                        begin (
                                                                          set! rank 5
                                                                        )
                                                                      )
                                                                       (
                                                                        if (
                                                                          not (
                                                                            _eq three_val 0
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            set! rank 4
                                                                          )
                                                                        )
                                                                         (
                                                                          if (
                                                                            _eq (
                                                                              _len pair_vals
                                                                            )
                                                                             2
                                                                          )
                                                                           (
                                                                            begin (
                                                                              set! rank 3
                                                                            )
                                                                          )
                                                                           (
                                                                            if (
                                                                              _eq (
                                                                                _len pair_vals
                                                                              )
                                                                               1
                                                                            )
                                                                             (
                                                                              begin (
                                                                                set! rank 2
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                set! rank 1
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            alist->hash-table (
                                                              _list (
                                                                cons "rank" rank
                                                              )
                                                               (
                                                                cons "values" vals
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        compare a b
      )
       (
        call/cc (
          lambda (
            ret10
          )
           (
            begin (
              if (
                > (
                  hash-table-ref a "rank"
                )
                 (
                  hash-table-ref b "rank"
                )
              )
               (
                begin (
                  ret10 "Win"
                )
              )
               (
                void
              )
            )
             (
              if (
                < (
                  hash-table-ref a "rank"
                )
                 (
                  hash-table-ref b "rank"
                )
              )
               (
                begin (
                  ret10 "Loss"
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  i 0
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop11 (
                        lambda (
                          
                        )
                         (
                          if (
                            < i (
                              _len (
                                hash-table-ref a "values"
                              )
                            )
                          )
                           (
                            begin (
                              if (
                                > (
                                  list-ref-safe (
                                    hash-table-ref a "values"
                                  )
                                   i
                                )
                                 (
                                  list-ref-safe (
                                    hash-table-ref b "values"
                                  )
                                   i
                                )
                              )
                               (
                                begin (
                                  ret10 "Win"
                                )
                              )
                               (
                                void
                              )
                            )
                             (
                              if (
                                < (
                                  list-ref-safe (
                                    hash-table-ref a "values"
                                  )
                                   i
                                )
                                 (
                                  list-ref-safe (
                                    hash-table-ref b "values"
                                  )
                                   i
                                )
                              )
                               (
                                begin (
                                  ret10 "Loss"
                                )
                              )
                               (
                                void
                              )
                            )
                             (
                              set! i (
                                + i 1
                              )
                            )
                             (
                              loop11
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop11
                  )
                )
                 (
                  ret10 "Tie"
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        let (
          (
            tests (
              _list (
                _list "2H 3H 4H 5H 6H" "KS AS TS QS JS" "Loss"
              )
               (
                _list "2H 3H 4H 5H 6H" "AS AD AC AH JD" "Win"
              )
               (
                _list "AS AH 2H AD AC" "JS JD JC JH 3D" "Win"
              )
               (
                _list "2S AH 2H AS AC" "JS JD JC JH AD" "Loss"
              )
               (
                _list "2S AH 2H AS AC" "2H 3H 5H 6H 7H" "Win"
              )
            )
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break13
              )
               (
                letrec (
                  (
                    loop12 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                t (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    res (
                                      compare (
                                        parse_hand (
                                          cond (
                                            (
                                              string? t
                                            )
                                             (
                                              _substring t 0 (
                                                + 0 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? t
                                            )
                                             (
                                              hash-table-ref t 0
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe t 0
                                            )
                                          )
                                        )
                                      )
                                       (
                                        parse_hand (
                                          cond (
                                            (
                                              string? t
                                            )
                                             (
                                              _substring t 1 (
                                                + 1 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? t
                                            )
                                             (
                                              hash-table-ref t 1
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe t 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    _display (
                                      if (
                                        string? (
                                          string-append (
                                            string-append res " expected "
                                          )
                                           (
                                            cond (
                                              (
                                                string? t
                                              )
                                               (
                                                _substring t 2 (
                                                  + 2 1
                                                )
                                              )
                                            )
                                             (
                                              (
                                                hash-table? t
                                              )
                                               (
                                                hash-table-ref t 2
                                              )
                                            )
                                             (
                                              else (
                                                list-ref-safe t 2
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        string-append (
                                          string-append res " expected "
                                        )
                                         (
                                          cond (
                                            (
                                              string? t
                                            )
                                             (
                                              _substring t 2 (
                                                + 2 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? t
                                            )
                                             (
                                              hash-table-ref t 2
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe t 2
                                            )
                                          )
                                        )
                                      )
                                       (
                                        to-str (
                                          string-append (
                                            string-append res " expected "
                                          )
                                           (
                                            cond (
                                              (
                                                string? t
                                              )
                                               (
                                                _substring t 2 (
                                                  + 2 1
                                                )
                                              )
                                            )
                                             (
                                              (
                                                hash-table? t
                                              )
                                               (
                                                hash-table-ref t 2
                                              )
                                            )
                                             (
                                              else (
                                                list-ref-safe t 2
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    newline
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop12 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop12 tests
                )
              )
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end15 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur16 (
              quotient (
                * (
                  - end15 start14
                )
                 1000000
              )
               jps17
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur16
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
