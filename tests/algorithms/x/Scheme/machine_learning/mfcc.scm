;; Generated by Mochi Scheme transpiler on 2025-08-11 18:13 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
        ((number? x)
         (if (integer? x)
             (number->string (inexact->exact x))
             (number->string x)))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start22 (
        current-jiffy
      )
    )
     (
      jps25 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          PI 3.141592653589793
        )
      )
       (
        begin (
          define (
            sinApprox x
          )
           (
            let (
              (
                term x
              )
            )
             (
              begin (
                let (
                  (
                    sum x
                  )
                )
                 (
                  begin (
                    let (
                      (
                        n 1
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop1 (
                              lambda (
                                
                              )
                               (
                                if (
                                  <= n 10
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        denom (
                                          + 0.0 (
                                            * (
                                              * 2 n
                                            )
                                             (
                                              + (
                                                * 2 n
                                              )
                                               1
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! term (
                                          _div (
                                            * (
                                              * (
                                                - term
                                              )
                                               x
                                            )
                                             x
                                          )
                                           denom
                                        )
                                      )
                                       (
                                        set! sum (
                                          + sum term
                                        )
                                      )
                                       (
                                        set! n (
                                          + n 1
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop1
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop1
                        )
                      )
                       sum
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            cosApprox x
          )
           (
            let (
              (
                term 1.0
              )
            )
             (
              begin (
                let (
                  (
                    sum 1.0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        n 1
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop2 (
                              lambda (
                                
                              )
                               (
                                if (
                                  <= n 10
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        denom (
                                          + 0.0 (
                                            * (
                                              - (
                                                * 2 n
                                              )
                                               1
                                            )
                                             (
                                              * 2 n
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! term (
                                          _div (
                                            * (
                                              * (
                                                - term
                                              )
                                               x
                                            )
                                             x
                                          )
                                           denom
                                        )
                                      )
                                       (
                                        set! sum (
                                          + sum term
                                        )
                                      )
                                       (
                                        set! n (
                                          + n 1
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop2
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop2
                        )
                      )
                       sum
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            expApprox x
          )
           (
            let (
              (
                sum 1.0
              )
            )
             (
              begin (
                let (
                  (
                    term 1.0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        n 1
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop3 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < n 10
                                )
                                 (
                                  begin (
                                    set! term (
                                      _div (
                                        * term x
                                      )
                                       (
                                        + 0.0 n
                                      )
                                    )
                                  )
                                   (
                                    set! sum (
                                      + sum term
                                    )
                                  )
                                   (
                                    set! n (
                                      + n 1
                                    )
                                  )
                                   (
                                    loop3
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop3
                        )
                      )
                       sum
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            ln x
          )
           (
            let (
              (
                t (
                  _div (
                    - x 1.0
                  )
                   (
                    + x 1.0
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    term t
                  )
                )
                 (
                  begin (
                    let (
                      (
                        sum 0.0
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            n 1
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop4 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      <= n 19
                                    )
                                     (
                                      begin (
                                        set! sum (
                                          _add sum (
                                            _div term (
                                              + 0.0 n
                                            )
                                          )
                                        )
                                      )
                                       (
                                        set! term (
                                          * (
                                            * term t
                                          )
                                           t
                                        )
                                      )
                                       (
                                        set! n (
                                          + n 2
                                        )
                                      )
                                       (
                                        loop4
                                      )
                                    )
                                     '(
                                      
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop4
                            )
                          )
                           (
                            * 2.0 sum
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            log10 x
          )
           (
            _div (
              ln x
            )
             (
              ln 10.0
            )
          )
        )
         (
          define (
            sqrtApprox x
          )
           (
            call/cc (
              lambda (
                ret5
              )
               (
                begin (
                  if (
                    <= x 0.0
                  )
                   (
                    begin (
                      ret5 0.0
                    )
                  )
                   '(
                    
                  )
                )
                 (
                  let (
                    (
                      guess x
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          i 0
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop6 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    < i 10
                                  )
                                   (
                                    begin (
                                      set! guess (
                                        _div (
                                          _add guess (
                                            _div x guess
                                          )
                                        )
                                         2.0
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 1
                                      )
                                    )
                                     (
                                      loop6
                                    )
                                  )
                                   '(
                                    
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop6
                          )
                        )
                         (
                          ret5 guess
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            absf x
          )
           (
            call/cc (
              lambda (
                ret7
              )
               (
                begin (
                  if (
                    < x 0.0
                  )
                   (
                    begin (
                      ret7 (
                        - x
                      )
                    )
                  )
                   '(
                    
                  )
                )
                 (
                  ret7 x
                )
              )
            )
          )
        )
         (
          define (
            normalize audio
          )
           (
            let (
              (
                max_val 0.0
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop8 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len audio
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    v (
                                      absf (
                                        list-ref-safe audio i
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      _gt v max_val
                                    )
                                     (
                                      begin (
                                        set! max_val v
                                      )
                                    )
                                     '(
                                      
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                               (
                                loop8
                              )
                            )
                             '(
                              
                            )
                          )
                        )
                      )
                    )
                     (
                      loop8
                    )
                  )
                   (
                    let (
                      (
                        res (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        set! i 0
                      )
                       (
                        letrec (
                          (
                            loop9 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len audio
                                  )
                                )
                                 (
                                  begin (
                                    set! res (
                                      append res (
                                        _list (
                                          _div (
                                            list-ref-safe audio i
                                          )
                                           max_val
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop9
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop9
                        )
                      )
                       res
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            dft frame bins
          )
           (
            let (
              (
                N (
                  _len frame
                )
              )
            )
             (
              begin (
                let (
                  (
                    spec (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        k 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop10 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < k bins
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        real 0.0
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            imag 0.0
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                n 0
                                              )
                                            )
                                             (
                                              begin (
                                                letrec (
                                                  (
                                                    loop11 (
                                                      lambda (
                                                        
                                                      )
                                                       (
                                                        if (
                                                          < n N
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                angle (
                                                                  _div (
                                                                    * (
                                                                      * (
                                                                        * (
                                                                          - 2.0
                                                                        )
                                                                         PI
                                                                      )
                                                                       (
                                                                        + 0.0 k
                                                                      )
                                                                    )
                                                                     (
                                                                      + 0.0 n
                                                                    )
                                                                  )
                                                                   (
                                                                    + 0.0 N
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                set! real (
                                                                  _add real (
                                                                    * (
                                                                      list-ref-safe frame n
                                                                    )
                                                                     (
                                                                      cosApprox angle
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                set! imag (
                                                                  _add imag (
                                                                    * (
                                                                      list-ref-safe frame n
                                                                    )
                                                                     (
                                                                      sinApprox angle
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                set! n (
                                                                  + n 1
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            loop11
                                                          )
                                                        )
                                                         '(
                                                          
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop11
                                                )
                                              )
                                               (
                                                set! spec (
                                                  append spec (
                                                    _list (
                                                      _add (
                                                        * real real
                                                      )
                                                       (
                                                        * imag imag
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                set! k (
                                                  + k 1
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop10
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop10
                        )
                      )
                       spec
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            triangular_filters bins spectrum_size
          )
           (
            let (
              (
                filters (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    b 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop12 (
                          lambda (
                            
                          )
                           (
                            if (
                              < b bins
                            )
                             (
                              begin (
                                let (
                                  (
                                    center (
                                      _div (
                                        * (
                                          + b 1
                                        )
                                         spectrum_size
                                      )
                                       (
                                        + bins 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        filt (
                                          _list
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            i 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop13 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < i spectrum_size
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            v 0.0
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            if (
                                                              <= i center
                                                            )
                                                             (
                                                              begin (
                                                                set! v (
                                                                  _div (
                                                                    + 0.0 i
                                                                  )
                                                                   (
                                                                    + 0.0 center
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                set! v (
                                                                  _div (
                                                                    + 0.0 (
                                                                      - spectrum_size i
                                                                    )
                                                                  )
                                                                   (
                                                                    + 0.0 (
                                                                      - spectrum_size center
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! filt (
                                                              append filt (
                                                                _list v
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! i (
                                                              + i 1
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop13
                                                      )
                                                    )
                                                     '(
                                                      
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop13
                                            )
                                          )
                                           (
                                            set! filters (
                                              append filters (
                                                _list filt
                                              )
                                            )
                                          )
                                           (
                                            set! b (
                                              + b 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop12
                              )
                            )
                             '(
                              
                            )
                          )
                        )
                      )
                    )
                     (
                      loop12
                    )
                  )
                   filters
                )
              )
            )
          )
        )
         (
          define (
            dot mat vec
          )
           (
            let (
              (
                res (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop14 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len mat
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    sum 0.0
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        j 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop15 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < j (
                                                    _len vec
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    set! sum (
                                                      _add sum (
                                                        * (
                                                          cond (
                                                            (
                                                              string? (
                                                                list-ref-safe mat i
                                                              )
                                                            )
                                                             (
                                                              _substring (
                                                                list-ref-safe mat i
                                                              )
                                                               j (
                                                                + j 1
                                                              )
                                                            )
                                                          )
                                                           (
                                                            (
                                                              hash-table? (
                                                                list-ref-safe mat i
                                                              )
                                                            )
                                                             (
                                                              hash-table-ref (
                                                                list-ref-safe mat i
                                                              )
                                                               j
                                                            )
                                                          )
                                                           (
                                                            else (
                                                              list-ref-safe (
                                                                list-ref-safe mat i
                                                              )
                                                               j
                                                            )
                                                          )
                                                        )
                                                         (
                                                          list-ref-safe vec j
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                   (
                                                    loop15
                                                  )
                                                )
                                                 '(
                                                  
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop15
                                        )
                                      )
                                       (
                                        set! res (
                                          append res (
                                            _list sum
                                          )
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop14
                              )
                            )
                             '(
                              
                            )
                          )
                        )
                      )
                    )
                     (
                      loop14
                    )
                  )
                   res
                )
              )
            )
          )
        )
         (
          define (
            discrete_cosine_transform dct_filter_num filter_num
          )
           (
            let (
              (
                basis (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop16 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i dct_filter_num
                            )
                             (
                              begin (
                                let (
                                  (
                                    row (
                                      _list
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        j 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop17 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < j filter_num
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      equal? i 0
                                                    )
                                                     (
                                                      begin (
                                                        set! row (
                                                          append row (
                                                            _list (
                                                              _div 1.0 (
                                                                sqrtApprox (
                                                                  + 0.0 filter_num
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            angle (
                                                              _div (
                                                                * (
                                                                  * (
                                                                    + 0.0 (
                                                                      + (
                                                                        * 2 j
                                                                      )
                                                                       1
                                                                    )
                                                                  )
                                                                   (
                                                                    + 0.0 i
                                                                  )
                                                                )
                                                                 PI
                                                              )
                                                               (
                                                                * 2.0 (
                                                                  + 0.0 filter_num
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            set! row (
                                                              append row (
                                                                _list (
                                                                  * (
                                                                    cosApprox angle
                                                                  )
                                                                   (
                                                                    sqrtApprox (
                                                                      _div 2.0 (
                                                                        + 0.0 filter_num
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                   (
                                                    loop17
                                                  )
                                                )
                                                 '(
                                                  
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop17
                                        )
                                      )
                                       (
                                        set! basis (
                                          append basis (
                                            _list row
                                          )
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop16
                              )
                            )
                             '(
                              
                            )
                          )
                        )
                      )
                    )
                     (
                      loop16
                    )
                  )
                   basis
                )
              )
            )
          )
        )
         (
          define (
            mfcc audio bins dct_num
          )
           (
            let (
              (
                norm (
                  normalize audio
                )
              )
            )
             (
              begin (
                let (
                  (
                    spec (
                      dft norm (
                        + bins 2
                      )
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        filters (
                          triangular_filters bins (
                            _len spec
                          )
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            energies (
                              dot filters spec
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                logfb (
                                  _list
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    i 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop18 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < i (
                                                _len energies
                                              )
                                            )
                                             (
                                              begin (
                                                set! logfb (
                                                  append logfb (
                                                    _list (
                                                      * 10.0 (
                                                        log10 (
                                                          _add (
                                                            cond (
                                                              (
                                                                string? energies
                                                              )
                                                               (
                                                                _substring energies i (
                                                                  + i 1
                                                                )
                                                              )
                                                            )
                                                             (
                                                              (
                                                                hash-table? energies
                                                              )
                                                               (
                                                                hash-table-ref energies i
                                                              )
                                                            )
                                                             (
                                                              else (
                                                                list-ref-safe energies i
                                                              )
                                                            )
                                                          )
                                                           1e-10
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                set! i (
                                                  + i 1
                                                )
                                              )
                                               (
                                                loop18
                                              )
                                            )
                                             '(
                                              
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop18
                                    )
                                  )
                                   (
                                    let (
                                      (
                                        dct_basis (
                                          discrete_cosine_transform dct_num bins
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            res (
                                              dot dct_basis logfb
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              equal? (
                                                _len res
                                              )
                                               0
                                            )
                                             (
                                              begin (
                                                set! res (
                                                  _list 0.0 0.0 0.0
                                                )
                                              )
                                            )
                                             '(
                                              
                                            )
                                          )
                                           res
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
         (
          let (
            (
              sample_rate 8000
            )
          )
           (
            begin (
              let (
                (
                  size 16
                )
              )
               (
                begin (
                  let (
                    (
                      audio (
                        _list
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          n 0
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop19 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    < n size
                                  )
                                   (
                                    begin (
                                      let (
                                        (
                                          t (
                                            _div (
                                              + 0.0 n
                                            )
                                             (
                                              + 0.0 sample_rate
                                            )
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          set! audio (
                                            append audio (
                                              _list (
                                                sinApprox (
                                                  * (
                                                    * (
                                                      * 2.0 PI
                                                    )
                                                     440.0
                                                  )
                                                   t
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          set! n (
                                            + n 1
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop19
                                    )
                                  )
                                   '(
                                    
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop19
                          )
                        )
                         (
                          let (
                            (
                              coeffs (
                                mfcc audio 5 3
                              )
                            )
                          )
                           (
                            begin (
                              call/cc (
                                lambda (
                                  break21
                                )
                                 (
                                  letrec (
                                    (
                                      loop20 (
                                        lambda (
                                          xs
                                        )
                                         (
                                          if (
                                            null? xs
                                          )
                                           '(
                                            
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  c (
                                                    car xs
                                                  )
                                                )
                                              )
                                               (
                                                begin (
                                                  _display (
                                                    if (
                                                      string? c
                                                    )
                                                     c (
                                                      to-str c
                                                    )
                                                  )
                                                )
                                                 (
                                                  newline
                                                )
                                              )
                                            )
                                             (
                                              loop20 (
                                                cdr xs
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop20 coeffs
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end23 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur24 (
              quotient (
                * (
                  - end23 start22
                )
                 1000000
              )
               jps25
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur24
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
