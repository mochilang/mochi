;; Generated by Mochi Scheme transpiler on 2025-08-16 21:23 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start30 (
        current-jiffy
      )
    )
     (
      jps33 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          PI 3.141592653589793
        )
      )
       (
        begin (
          let (
            (
              TWO_PI 6.283185307179586
            )
          )
           (
            begin (
              let (
                (
                  seed 1
                )
              )
               (
                begin (
                  define (
                    rand
                  )
                   (
                    begin (
                      set! seed (
                        _mod (
                          + (
                            * seed 1103515245
                          )
                           12345
                        )
                         2147483648
                      )
                    )
                     seed
                  )
                )
                 (
                  define (
                    random
                  )
                   (
                    _div (
                      let (
                        (
                          v1 (
                            rand
                          )
                        )
                      )
                       (
                        cond (
                          (
                            string? v1
                          )
                           (
                            string->number v1
                          )
                        )
                         (
                          (
                            boolean? v1
                          )
                           (
                            if v1 1.0 0.0
                          )
                        )
                         (
                          else (
                            exact->inexact v1
                          )
                        )
                      )
                    )
                     2.147483648e+09
                  )
                )
                 (
                  define (
                    _mod x m
                  )
                   (
                    - x (
                      * (
                        let (
                          (
                            v3 (
                              let (
                                (
                                  v2 (
                                    _div x m
                                  )
                                )
                              )
                               (
                                cond (
                                  (
                                    string? v2
                                  )
                                   (
                                    exact (
                                      _floor (
                                        string->number v2
                                      )
                                    )
                                  )
                                )
                                 (
                                  (
                                    boolean? v2
                                  )
                                   (
                                    if v2 1 0
                                  )
                                )
                                 (
                                  else (
                                    exact (
                                      _floor v2
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          cond (
                            (
                              string? v3
                            )
                             (
                              string->number v3
                            )
                          )
                           (
                            (
                              boolean? v3
                            )
                             (
                              if v3 1.0 0.0
                            )
                          )
                           (
                            else (
                              exact->inexact v3
                            )
                          )
                        )
                      )
                       m
                    )
                  )
                )
                 (
                  define (
                    cos x
                  )
                   (
                    let (
                      (
                        y (
                          - (
                            _mod (
                              + x PI
                            )
                             TWO_PI
                          )
                           PI
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            y2 (
                              * y y
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                y4 (
                                  * y2 y2
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    y6 (
                                      * y4 y2
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    - (
                                      _add (
                                        - 1.0 (
                                          _div y2 2.0
                                        )
                                      )
                                       (
                                        _div y4 24.0
                                      )
                                    )
                                     (
                                      _div y6 720.0
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    sqrtApprox x
                  )
                   (
                    call/cc (
                      lambda (
                        ret4
                      )
                       (
                        begin (
                          if (
                            <= x 0.0
                          )
                           (
                            begin (
                              ret4 0.0
                            )
                          )
                           (
                            void
                          )
                        )
                         (
                          let (
                            (
                              guess x
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  i 0
                                )
                              )
                               (
                                begin (
                                  letrec (
                                    (
                                      loop5 (
                                        lambda (
                                          
                                        )
                                         (
                                          if (
                                            < i 10
                                          )
                                           (
                                            begin (
                                              set! guess (
                                                _div (
                                                  _add guess (
                                                    _div x guess
                                                  )
                                                )
                                                 2.0
                                              )
                                            )
                                             (
                                              set! i (
                                                + i 1
                                              )
                                            )
                                             (
                                              loop5
                                            )
                                          )
                                           (
                                            void
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop5
                                  )
                                )
                                 (
                                  ret4 guess
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    ln x
                  )
                   (
                    let (
                      (
                        t (
                          _div (
                            - x 1.0
                          )
                           (
                            + x 1.0
                          )
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            term t
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                sum 0.0
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    n 1
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop6 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              <= n 19
                                            )
                                             (
                                              begin (
                                                set! sum (
                                                  _add sum (
                                                    _div term (
                                                      let (
                                                        (
                                                          v7 n
                                                        )
                                                      )
                                                       (
                                                        cond (
                                                          (
                                                            string? v7
                                                          )
                                                           (
                                                            string->number v7
                                                          )
                                                        )
                                                         (
                                                          (
                                                            boolean? v7
                                                          )
                                                           (
                                                            if v7 1.0 0.0
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            exact->inexact v7
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                set! term (
                                                  * (
                                                    * term t
                                                  )
                                                   t
                                                )
                                              )
                                               (
                                                set! n (
                                                  + n 2
                                                )
                                              )
                                               (
                                                loop6
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop6
                                    )
                                  )
                                   (
                                    * 2.0 sum
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    gaussian_distribution mean std_dev instance_count
                  )
                   (
                    let (
                      (
                        res (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop8 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < i instance_count
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            u1 (
                                              random
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                u2 (
                                                  random
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    r (
                                                      sqrtApprox (
                                                        * (
                                                          - 2.0
                                                        )
                                                         (
                                                          log u1
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        theta (
                                                          * TWO_PI u2
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            z (
                                                              * r (
                                                                cos theta
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            set! res (
                                                              append res (
                                                                _list (
                                                                  _add mean (
                                                                    * z std_dev
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! i (
                                                              + i 1
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop8
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop8
                            )
                          )
                           res
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    y_generator class_count instance_count
                  )
                   (
                    let (
                      (
                        res (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            k 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop9 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < k class_count
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            i 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop10 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < i (
                                                        list-ref-safe instance_count k
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! res (
                                                          append res (
                                                            _list k
                                                          )
                                                        )
                                                      )
                                                       (
                                                        set! i (
                                                          + i 1
                                                        )
                                                      )
                                                       (
                                                        loop10
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop10
                                            )
                                          )
                                           (
                                            set! k (
                                              + k 1
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop9
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop9
                            )
                          )
                           res
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    calculate_mean instance_count items
                  )
                   (
                    let (
                      (
                        total 0.0
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop11 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < i instance_count
                                    )
                                     (
                                      begin (
                                        set! total (
                                          + total (
                                            list-ref-safe items i
                                          )
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                       (
                                        loop11
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop11
                            )
                          )
                           (
                            _div total (
                              let (
                                (
                                  v12 instance_count
                                )
                              )
                               (
                                cond (
                                  (
                                    string? v12
                                  )
                                   (
                                    string->number v12
                                  )
                                )
                                 (
                                  (
                                    boolean? v12
                                  )
                                   (
                                    if v12 1.0 0.0
                                  )
                                )
                                 (
                                  else (
                                    exact->inexact v12
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    calculate_probabilities instance_count total_count
                  )
                   (
                    _div (
                      let (
                        (
                          v13 instance_count
                        )
                      )
                       (
                        cond (
                          (
                            string? v13
                          )
                           (
                            string->number v13
                          )
                        )
                         (
                          (
                            boolean? v13
                          )
                           (
                            if v13 1.0 0.0
                          )
                        )
                         (
                          else (
                            exact->inexact v13
                          )
                        )
                      )
                    )
                     (
                      let (
                        (
                          v14 total_count
                        )
                      )
                       (
                        cond (
                          (
                            string? v14
                          )
                           (
                            string->number v14
                          )
                        )
                         (
                          (
                            boolean? v14
                          )
                           (
                            if v14 1.0 0.0
                          )
                        )
                         (
                          else (
                            exact->inexact v14
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    calculate_variance items means total_count
                  )
                   (
                    let (
                      (
                        squared_diff (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop15 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < i (
                                        _len items
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            j 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop16 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < j (
                                                        _len (
                                                          list-ref-safe items i
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            diff (
                                                              - (
                                                                cond (
                                                                  (
                                                                    string? (
                                                                      list-ref-safe items i
                                                                    )
                                                                  )
                                                                   (
                                                                    _substring (
                                                                      list-ref-safe items i
                                                                    )
                                                                     j (
                                                                      + j 1
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  (
                                                                    hash-table? (
                                                                      list-ref-safe items i
                                                                    )
                                                                  )
                                                                   (
                                                                    hash-table-ref (
                                                                      list-ref-safe items i
                                                                    )
                                                                     j
                                                                  )
                                                                )
                                                                 (
                                                                  else (
                                                                    list-ref-safe (
                                                                      list-ref-safe items i
                                                                    )
                                                                     j
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                list-ref-safe means i
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            set! squared_diff (
                                                              append squared_diff (
                                                                _list (
                                                                  * diff diff
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop16
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop16
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop15
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop15
                            )
                          )
                           (
                            let (
                              (
                                sum_sq 0.0
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    k 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop17 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < k (
                                                _len squared_diff
                                              )
                                            )
                                             (
                                              begin (
                                                set! sum_sq (
                                                  + sum_sq (
                                                    list-ref-safe squared_diff k
                                                  )
                                                )
                                              )
                                               (
                                                set! k (
                                                  + k 1
                                                )
                                              )
                                               (
                                                loop17
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop17
                                    )
                                  )
                                   (
                                    let (
                                      (
                                        n_classes (
                                          _len means
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        * (
                                          _div 1.0 (
                                            let (
                                              (
                                                v18 (
                                                  - total_count n_classes
                                                )
                                              )
                                            )
                                             (
                                              cond (
                                                (
                                                  string? v18
                                                )
                                                 (
                                                  string->number v18
                                                )
                                              )
                                               (
                                                (
                                                  boolean? v18
                                                )
                                                 (
                                                  if v18 1.0 0.0
                                                )
                                              )
                                               (
                                                else (
                                                  exact->inexact v18
                                                )
                                              )
                                            )
                                          )
                                        )
                                         sum_sq
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    predict_y_values x_items means variance probabilities
                  )
                   (
                    let (
                      (
                        results (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop19 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < i (
                                        _len x_items
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            j 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop20 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < j (
                                                        _len (
                                                          list-ref-safe x_items i
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            temp (
                                                              _list
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                k 0
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                letrec (
                                                                  (
                                                                    loop21 (
                                                                      lambda (
                                                                        
                                                                      )
                                                                       (
                                                                        if (
                                                                          < k (
                                                                            _len x_items
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            let (
                                                                              (
                                                                                discr (
                                                                                  _add (
                                                                                    - (
                                                                                      * (
                                                                                        cond (
                                                                                          (
                                                                                            string? (
                                                                                              list-ref-safe x_items i
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            _substring (
                                                                                              list-ref-safe x_items i
                                                                                            )
                                                                                             j (
                                                                                              + j 1
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          (
                                                                                            hash-table? (
                                                                                              list-ref-safe x_items i
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            hash-table-ref (
                                                                                              list-ref-safe x_items i
                                                                                            )
                                                                                             j
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          else (
                                                                                            list-ref-safe (
                                                                                              list-ref-safe x_items i
                                                                                            )
                                                                                             j
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        _div (
                                                                                          list-ref-safe means k
                                                                                        )
                                                                                         variance
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      _div (
                                                                                        * (
                                                                                          list-ref-safe means k
                                                                                        )
                                                                                         (
                                                                                          list-ref-safe means k
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        * 2.0 variance
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    log (
                                                                                      list-ref-safe probabilities k
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                set! temp (
                                                                                  append temp (
                                                                                    _list discr
                                                                                  )
                                                                                )
                                                                              )
                                                                               (
                                                                                set! k (
                                                                                  + k 1
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            loop21
                                                                          )
                                                                        )
                                                                         (
                                                                          void
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  loop21
                                                                )
                                                              )
                                                               (
                                                                let (
                                                                  (
                                                                    max_idx 0
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    let (
                                                                      (
                                                                        max_val (
                                                                          list-ref-safe temp 0
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        let (
                                                                          (
                                                                            t 1
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            letrec (
                                                                              (
                                                                                loop22 (
                                                                                  lambda (
                                                                                    
                                                                                  )
                                                                                   (
                                                                                    if (
                                                                                      < t (
                                                                                        _len temp
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      begin (
                                                                                        if (
                                                                                          > (
                                                                                            list-ref-safe temp t
                                                                                          )
                                                                                           max_val
                                                                                        )
                                                                                         (
                                                                                          begin (
                                                                                            set! max_val (
                                                                                              list-ref-safe temp t
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            set! max_idx t
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          void
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        set! t (
                                                                                          + t 1
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        loop22
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      void
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              loop22
                                                                            )
                                                                          )
                                                                           (
                                                                            set! results (
                                                                              append results (
                                                                                _list max_idx
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            set! j (
                                                                              + j 1
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop20
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop20
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop19
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop19
                            )
                          )
                           results
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    accuracy actual_y predicted_y
                  )
                   (
                    let (
                      (
                        correct 0
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop23 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < i (
                                        _len actual_y
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          _eq (
                                            list-ref-safe actual_y i
                                          )
                                           (
                                            list-ref-safe predicted_y i
                                          )
                                        )
                                         (
                                          begin (
                                            set! correct (
                                              + correct 1
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                       (
                                        loop23
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop23
                            )
                          )
                           (
                            * (
                              _div (
                                let (
                                  (
                                    v24 correct
                                  )
                                )
                                 (
                                  cond (
                                    (
                                      string? v24
                                    )
                                     (
                                      string->number v24
                                    )
                                  )
                                   (
                                    (
                                      boolean? v24
                                    )
                                     (
                                      if v24 1.0 0.0
                                    )
                                  )
                                   (
                                    else (
                                      exact->inexact v24
                                    )
                                  )
                                )
                              )
                               (
                                let (
                                  (
                                    v25 (
                                      _len actual_y
                                    )
                                  )
                                )
                                 (
                                  cond (
                                    (
                                      string? v25
                                    )
                                     (
                                      string->number v25
                                    )
                                  )
                                   (
                                    (
                                      boolean? v25
                                    )
                                     (
                                      if v25 1.0 0.0
                                    )
                                  )
                                   (
                                    else (
                                      exact->inexact v25
                                    )
                                  )
                                )
                              )
                            )
                             100.0
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    main
                  )
                   (
                    begin (
                      set! seed 1
                    )
                     (
                      let (
                        (
                          counts (
                            _list 20 20 20
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              means (
                                _list 5.0 10.0 15.0
                              )
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  std_dev 1.0
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      x (
                                        _list
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      let (
                                        (
                                          i 0
                                        )
                                      )
                                       (
                                        begin (
                                          letrec (
                                            (
                                              loop26 (
                                                lambda (
                                                  
                                                )
                                                 (
                                                  if (
                                                    < i (
                                                      _len counts
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      set! x (
                                                        append x (
                                                          _list (
                                                            gaussian_distribution (
                                                              list-ref-safe means i
                                                            )
                                                             std_dev (
                                                              list-ref-safe counts i
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      set! i (
                                                        + i 1
                                                      )
                                                    )
                                                     (
                                                      loop26
                                                    )
                                                  )
                                                   (
                                                    void
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop26
                                          )
                                        )
                                         (
                                          let (
                                            (
                                              y (
                                                y_generator (
                                                  _len counts
                                                )
                                                 counts
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  actual_means (
                                                    _list
                                                  )
                                                )
                                              )
                                               (
                                                begin (
                                                  set! i 0
                                                )
                                                 (
                                                  letrec (
                                                    (
                                                      loop27 (
                                                        lambda (
                                                          
                                                        )
                                                         (
                                                          if (
                                                            < i (
                                                              _len counts
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              set! actual_means (
                                                                append actual_means (
                                                                  _list (
                                                                    calculate_mean (
                                                                      list-ref-safe counts i
                                                                    )
                                                                     (
                                                                      list-ref-safe x i
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              set! i (
                                                                + i 1
                                                              )
                                                            )
                                                             (
                                                              loop27
                                                            )
                                                          )
                                                           (
                                                            void
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop27
                                                  )
                                                )
                                                 (
                                                  let (
                                                    (
                                                      total_count 0
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      set! i 0
                                                    )
                                                     (
                                                      letrec (
                                                        (
                                                          loop28 (
                                                            lambda (
                                                              
                                                            )
                                                             (
                                                              if (
                                                                < i (
                                                                  _len counts
                                                                )
                                                              )
                                                               (
                                                                begin (
                                                                  set! total_count (
                                                                    + total_count (
                                                                      list-ref-safe counts i
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  set! i (
                                                                    + i 1
                                                                  )
                                                                )
                                                                 (
                                                                  loop28
                                                                )
                                                              )
                                                               (
                                                                void
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop28
                                                      )
                                                    )
                                                     (
                                                      let (
                                                        (
                                                          probabilities (
                                                            _list
                                                          )
                                                        )
                                                      )
                                                       (
                                                        begin (
                                                          set! i 0
                                                        )
                                                         (
                                                          letrec (
                                                            (
                                                              loop29 (
                                                                lambda (
                                                                  
                                                                )
                                                                 (
                                                                  if (
                                                                    < i (
                                                                      _len counts
                                                                    )
                                                                  )
                                                                   (
                                                                    begin (
                                                                      set! probabilities (
                                                                        append probabilities (
                                                                          _list (
                                                                            calculate_probabilities (
                                                                              list-ref-safe counts i
                                                                            )
                                                                             total_count
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      set! i (
                                                                        + i 1
                                                                      )
                                                                    )
                                                                     (
                                                                      loop29
                                                                    )
                                                                  )
                                                                   (
                                                                    void
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            loop29
                                                          )
                                                        )
                                                         (
                                                          let (
                                                            (
                                                              variance (
                                                                calculate_variance x actual_means total_count
                                                              )
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              let (
                                                                (
                                                                  predicted (
                                                                    predict_y_values x actual_means variance probabilities
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                begin (
                                                                  _display (
                                                                    if (
                                                                      string? predicted
                                                                    )
                                                                     predicted (
                                                                      to-str predicted
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  newline
                                                                )
                                                                 (
                                                                  _display (
                                                                    if (
                                                                      string? (
                                                                        accuracy y predicted
                                                                      )
                                                                    )
                                                                     (
                                                                      accuracy y predicted
                                                                    )
                                                                     (
                                                                      to-str (
                                                                        accuracy y predicted
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  newline
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  main
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end31 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur32 (
              quotient (
                * (
                  - end31 start30
                )
                 1000000
              )
               jps33
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur32
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
