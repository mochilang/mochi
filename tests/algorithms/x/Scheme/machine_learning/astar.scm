;; Generated by Mochi Scheme transpiler on 2025-08-12 08:38 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
        ((number? x)
         (if (integer? x)
             (number->string (inexact->exact x))
             (number->string x)))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start25 (
        current-jiffy
      )
    )
     (
      jps28 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        get_neighbours p x_limit y_limit
      )
       (
        let (
          (
            deltas (
              _list (
                alist->hash-table (
                  _list (
                    cons "x" (
                      - 0 1
                    )
                  )
                   (
                    cons "y" (
                      - 0 1
                    )
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "x" (
                      - 0 1
                    )
                  )
                   (
                    cons "y" 0
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "x" (
                      - 0 1
                    )
                  )
                   (
                    cons "y" 1
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "x" 0
                  )
                   (
                    cons "y" (
                      - 0 1
                    )
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "x" 0
                  )
                   (
                    cons "y" 1
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "x" 1
                  )
                   (
                    cons "y" (
                      - 0 1
                    )
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "x" 1
                  )
                   (
                    cons "y" 0
                  )
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "x" 1
                  )
                   (
                    cons "y" 1
                  )
                )
              )
            )
          )
        )
         (
          begin (
            let (
              (
                neighbours (
                  _list
                )
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break2
                  )
                   (
                    letrec (
                      (
                        loop1 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    d (
                                      car xs
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        nx (
                                          _add (
                                            hash-table-ref p "x"
                                          )
                                           (
                                            hash-table-ref d "x"
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            ny (
                                              _add (
                                                hash-table-ref p "y"
                                              )
                                               (
                                                hash-table-ref d "y"
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              and (
                                                and (
                                                  and (
                                                    _le 0 nx
                                                  )
                                                   (
                                                    _lt nx x_limit
                                                  )
                                                )
                                                 (
                                                  _le 0 ny
                                                )
                                              )
                                               (
                                                _lt ny y_limit
                                              )
                                            )
                                             (
                                              begin (
                                                set! neighbours (
                                                  append neighbours (
                                                    _list (
                                                      alist->hash-table (
                                                        _list (
                                                          cons "x" nx
                                                        )
                                                         (
                                                          cons "y" ny
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop1 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop1 deltas
                    )
                  )
                )
              )
               neighbours
            )
          )
        )
      )
    )
     (
      define (
        contains nodes p
      )
       (
        call/cc (
          lambda (
            ret3
          )
           (
            begin (
              call/cc (
                lambda (
                  break5
                )
                 (
                  letrec (
                    (
                      loop4 (
                        lambda (
                          xs
                        )
                         (
                          if (
                            null? xs
                          )
                           (
                            void
                          )
                           (
                            begin (
                              let (
                                (
                                  n (
                                    car xs
                                  )
                                )
                              )
                               (
                                begin (
                                  if (
                                    and (
                                      equal? (
                                        hash-table-ref (
                                          hash-table-ref n "pos"
                                        )
                                         "x"
                                      )
                                       (
                                        hash-table-ref p "x"
                                      )
                                    )
                                     (
                                      equal? (
                                        hash-table-ref (
                                          hash-table-ref n "pos"
                                        )
                                         "y"
                                      )
                                       (
                                        hash-table-ref p "y"
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      ret3 #t
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                             (
                              loop4 (
                                cdr xs
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    loop4 nodes
                  )
                )
              )
            )
             (
              ret3 #f
            )
          )
        )
      )
    )
     (
      define (
        get_node nodes p
      )
       (
        call/cc (
          lambda (
            ret6
          )
           (
            begin (
              call/cc (
                lambda (
                  break8
                )
                 (
                  letrec (
                    (
                      loop7 (
                        lambda (
                          xs
                        )
                         (
                          if (
                            null? xs
                          )
                           (
                            void
                          )
                           (
                            begin (
                              let (
                                (
                                  n (
                                    car xs
                                  )
                                )
                              )
                               (
                                begin (
                                  if (
                                    and (
                                      equal? (
                                        hash-table-ref (
                                          hash-table-ref n "pos"
                                        )
                                         "x"
                                      )
                                       (
                                        hash-table-ref p "x"
                                      )
                                    )
                                     (
                                      equal? (
                                        hash-table-ref (
                                          hash-table-ref n "pos"
                                        )
                                         "y"
                                      )
                                       (
                                        hash-table-ref p "y"
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      ret6 n
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                             (
                              loop7 (
                                cdr xs
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    loop7 nodes
                  )
                )
              )
            )
             (
              ret6 (
                alist->hash-table (
                  _list (
                    cons "pos" p
                  )
                   (
                    cons "parent" (
                      alist->hash-table (
                        _list (
                          cons "x" (
                            - 0 1
                          )
                        )
                         (
                          cons "y" (
                            - 0 1
                          )
                        )
                      )
                    )
                  )
                   (
                    cons "g" 0
                  )
                   (
                    cons "h" 0
                  )
                   (
                    cons "f" 0
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        astar x_limit y_limit start goal
      )
       (
        let (
          (
            open (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                closed (
                  _list
                )
              )
            )
             (
              begin (
                set! open (
                  append open (
                    _list (
                      alist->hash-table (
                        _list (
                          cons "pos" start
                        )
                         (
                          cons "parent" (
                            alist->hash-table (
                              _list (
                                cons "x" (
                                  - 0 1
                                )
                              )
                               (
                                cons "y" (
                                  - 0 1
                                )
                              )
                            )
                          )
                        )
                         (
                          cons "g" 0
                        )
                         (
                          cons "h" 0
                        )
                         (
                          cons "f" 0
                        )
                      )
                    )
                  )
                )
              )
               (
                let (
                  (
                    current (
                      list-ref-safe open 0
                    )
                  )
                )
                 (
                  begin (
                    call/cc (
                      lambda (
                        break10
                      )
                       (
                        letrec (
                          (
                            loop9 (
                              lambda (
                                
                              )
                               (
                                if (
                                  > (
                                    _len open
                                  )
                                   0
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        min_index 0
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            i 1
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop11 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < i (
                                                        _len open
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        if (
                                                          < (
                                                            hash-table-ref (
                                                              list-ref-safe open i
                                                            )
                                                             "f"
                                                          )
                                                           (
                                                            hash-table-ref (
                                                              list-ref-safe open min_index
                                                            )
                                                             "f"
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            set! min_index i
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                       (
                                                        set! i (
                                                          + i 1
                                                        )
                                                      )
                                                       (
                                                        loop11
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop11
                                            )
                                          )
                                           (
                                            set! current (
                                              list-ref-safe open min_index
                                            )
                                          )
                                           (
                                            let (
                                              (
                                                new_open (
                                                  _list
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    j 0
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    letrec (
                                                      (
                                                        loop12 (
                                                          lambda (
                                                            
                                                          )
                                                           (
                                                            if (
                                                              < j (
                                                                _len open
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                if (
                                                                  not (
                                                                    equal? j min_index
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    set! new_open (
                                                                      append new_open (
                                                                        _list (
                                                                          list-ref-safe open j
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  void
                                                                )
                                                              )
                                                               (
                                                                set! j (
                                                                  + j 1
                                                                )
                                                              )
                                                               (
                                                                loop12
                                                              )
                                                            )
                                                             (
                                                              void
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      loop12
                                                    )
                                                  )
                                                   (
                                                    set! open new_open
                                                  )
                                                   (
                                                    set! closed (
                                                      append closed (
                                                        _list current
                                                      )
                                                    )
                                                  )
                                                   (
                                                    if (
                                                      and (
                                                        equal? (
                                                          hash-table-ref (
                                                            hash-table-ref current "pos"
                                                          )
                                                           "x"
                                                        )
                                                         (
                                                          hash-table-ref goal "x"
                                                        )
                                                      )
                                                       (
                                                        equal? (
                                                          hash-table-ref (
                                                            hash-table-ref current "pos"
                                                          )
                                                           "y"
                                                        )
                                                         (
                                                          hash-table-ref goal "y"
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        break10 (
                                                          void
                                                        )
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    let (
                                                      (
                                                        neighbours (
                                                          get_neighbours (
                                                            hash-table-ref current "pos"
                                                          )
                                                           x_limit y_limit
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        call/cc (
                                                          lambda (
                                                            break14
                                                          )
                                                           (
                                                            letrec (
                                                              (
                                                                loop13 (
                                                                  lambda (
                                                                    xs
                                                                  )
                                                                   (
                                                                    if (
                                                                      null? xs
                                                                    )
                                                                     (
                                                                      void
                                                                    )
                                                                     (
                                                                      begin (
                                                                        let (
                                                                          (
                                                                            np (
                                                                              car xs
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            if (
                                                                              contains closed np
                                                                            )
                                                                             (
                                                                              begin (
                                                                                loop13 (
                                                                                  cdr xs
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              void
                                                                            )
                                                                          )
                                                                           (
                                                                            let (
                                                                              (
                                                                                g (
                                                                                  + (
                                                                                    hash-table-ref current "g"
                                                                                  )
                                                                                   1
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                let (
                                                                                  (
                                                                                    dx (
                                                                                      - (
                                                                                        hash-table-ref goal "x"
                                                                                      )
                                                                                       (
                                                                                        hash-table-ref np "x"
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    let (
                                                                                      (
                                                                                        dy (
                                                                                          - (
                                                                                            hash-table-ref goal "y"
                                                                                          )
                                                                                           (
                                                                                            hash-table-ref np "y"
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      begin (
                                                                                        let (
                                                                                          (
                                                                                            h (
                                                                                              _add (
                                                                                                * dx dx
                                                                                              )
                                                                                               (
                                                                                                * dy dy
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          begin (
                                                                                            let (
                                                                                              (
                                                                                                f (
                                                                                                  _add g h
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                             (
                                                                                              begin (
                                                                                                let (
                                                                                                  (
                                                                                                    skip #f
                                                                                                  )
                                                                                                )
                                                                                                 (
                                                                                                  begin (
                                                                                                    call/cc (
                                                                                                      lambda (
                                                                                                        break16
                                                                                                      )
                                                                                                       (
                                                                                                        letrec (
                                                                                                          (
                                                                                                            loop15 (
                                                                                                              lambda (
                                                                                                                xs
                                                                                                              )
                                                                                                               (
                                                                                                                if (
                                                                                                                  null? xs
                                                                                                                )
                                                                                                                 (
                                                                                                                  void
                                                                                                                )
                                                                                                                 (
                                                                                                                  begin (
                                                                                                                    let (
                                                                                                                      (
                                                                                                                        node (
                                                                                                                          car xs
                                                                                                                        )
                                                                                                                      )
                                                                                                                    )
                                                                                                                     (
                                                                                                                      begin (
                                                                                                                        if (
                                                                                                                          and (
                                                                                                                            and (
                                                                                                                              equal? (
                                                                                                                                hash-table-ref (
                                                                                                                                  hash-table-ref node "pos"
                                                                                                                                )
                                                                                                                                 "x"
                                                                                                                              )
                                                                                                                               (
                                                                                                                                hash-table-ref np "x"
                                                                                                                              )
                                                                                                                            )
                                                                                                                             (
                                                                                                                              equal? (
                                                                                                                                hash-table-ref (
                                                                                                                                  hash-table-ref node "pos"
                                                                                                                                )
                                                                                                                                 "y"
                                                                                                                              )
                                                                                                                               (
                                                                                                                                hash-table-ref np "y"
                                                                                                                              )
                                                                                                                            )
                                                                                                                          )
                                                                                                                           (
                                                                                                                            _lt (
                                                                                                                              hash-table-ref node "f"
                                                                                                                            )
                                                                                                                             f
                                                                                                                          )
                                                                                                                        )
                                                                                                                         (
                                                                                                                          begin (
                                                                                                                            set! skip #t
                                                                                                                          )
                                                                                                                        )
                                                                                                                         (
                                                                                                                          void
                                                                                                                        )
                                                                                                                      )
                                                                                                                    )
                                                                                                                  )
                                                                                                                   (
                                                                                                                    loop15 (
                                                                                                                      cdr xs
                                                                                                                    )
                                                                                                                  )
                                                                                                                )
                                                                                                              )
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                         (
                                                                                                          loop15 open
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                   (
                                                                                                    if skip (
                                                                                                      begin (
                                                                                                        loop13 (
                                                                                                          cdr xs
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                     (
                                                                                                      void
                                                                                                    )
                                                                                                  )
                                                                                                   (
                                                                                                    set! open (
                                                                                                      append open (
                                                                                                        _list (
                                                                                                          alist->hash-table (
                                                                                                            _list (
                                                                                                              cons "pos" np
                                                                                                            )
                                                                                                             (
                                                                                                              cons "parent" (
                                                                                                                hash-table-ref current "pos"
                                                                                                              )
                                                                                                            )
                                                                                                             (
                                                                                                              cons "g" g
                                                                                                            )
                                                                                                             (
                                                                                                              cons "h" h
                                                                                                            )
                                                                                                             (
                                                                                                              cons "f" f
                                                                                                            )
                                                                                                          )
                                                                                                        )
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        loop13 (
                                                                          cdr xs
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              loop13 neighbours
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop9
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop9
                        )
                      )
                    )
                  )
                   (
                    let (
                      (
                        path (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        set! path (
                          append path (
                            _list (
                              hash-table-ref current "pos"
                            )
                          )
                        )
                      )
                       (
                        letrec (
                          (
                            loop17 (
                              lambda (
                                
                              )
                               (
                                if (
                                  not (
                                    and (
                                      equal? (
                                        hash-table-ref (
                                          hash-table-ref current "parent"
                                        )
                                         "x"
                                      )
                                       (
                                        - 0 1
                                      )
                                    )
                                     (
                                      equal? (
                                        hash-table-ref (
                                          hash-table-ref current "parent"
                                        )
                                         "y"
                                      )
                                       (
                                        - 0 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    set! current (
                                      get_node closed (
                                        hash-table-ref current "parent"
                                      )
                                    )
                                  )
                                   (
                                    set! path (
                                      append path (
                                        _list (
                                          hash-table-ref current "pos"
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop17
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop17
                        )
                      )
                       (
                        let (
                          (
                            rev (
                              _list
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                k (
                                  - (
                                    _len path
                                  )
                                   1
                                )
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop18 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          >= k 0
                                        )
                                         (
                                          begin (
                                            set! rev (
                                              append rev (
                                                _list (
                                                  list-ref-safe path k
                                                )
                                              )
                                            )
                                          )
                                           (
                                            set! k (
                                              - k 1
                                            )
                                          )
                                           (
                                            loop18
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop18
                                )
                              )
                               rev
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        create_world x_limit y_limit
      )
       (
        let (
          (
            world (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop19 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i x_limit
                        )
                         (
                          begin (
                            let (
                              (
                                row (
                                  _list
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    j 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop20 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < j y_limit
                                            )
                                             (
                                              begin (
                                                set! row (
                                                  append row (
                                                    _list 0
                                                  )
                                                )
                                              )
                                               (
                                                set! j (
                                                  + j 1
                                                )
                                              )
                                               (
                                                loop20
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop20
                                    )
                                  )
                                   (
                                    set! world (
                                      append world (
                                        _list row
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop19
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop19
                )
              )
               world
            )
          )
        )
      )
    )
     (
      define (
        mark_path world path
      )
       (
        call/cc (
          lambda (
            break22
          )
           (
            letrec (
              (
                loop21 (
                  lambda (
                    xs
                  )
                   (
                    if (
                      null? xs
                    )
                     (
                      void
                    )
                     (
                      begin (
                        let (
                          (
                            p (
                              car xs
                            )
                          )
                        )
                         (
                          begin (
                            list-set-safe! (
                              list-ref-safe world (
                                hash-table-ref p "x"
                              )
                            )
                             (
                              hash-table-ref p "y"
                            )
                             1
                          )
                        )
                      )
                       (
                        loop21 (
                          cdr xs
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              loop21 path
            )
          )
        )
      )
    )
     (
      define (
        print_world world
      )
       (
        call/cc (
          lambda (
            break24
          )
           (
            letrec (
              (
                loop23 (
                  lambda (
                    xs
                  )
                   (
                    if (
                      null? xs
                    )
                     (
                      void
                    )
                     (
                      begin (
                        let (
                          (
                            row (
                              car xs
                            )
                          )
                        )
                         (
                          begin (
                            _display (
                              if (
                                string? (
                                  to-str-space row
                                )
                              )
                               (
                                to-str-space row
                              )
                               (
                                to-str (
                                  to-str-space row
                                )
                              )
                            )
                          )
                           (
                            newline
                          )
                        )
                      )
                       (
                        loop23 (
                          cdr xs
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              loop23 world
            )
          )
        )
      )
    )
     (
      let (
        (
          world_x 5
        )
      )
       (
        begin (
          let (
            (
              world_y 5
            )
          )
           (
            begin (
              let (
                (
                  start (
                    alist->hash-table (
                      _list (
                        cons "x" 0
                      )
                       (
                        cons "y" 0
                      )
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      goal (
                        alist->hash-table (
                          _list (
                            cons "x" 4
                          )
                           (
                            cons "y" 4
                          )
                        )
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          path (
                            astar world_x world_y start goal
                          )
                        )
                      )
                       (
                        begin (
                          _display (
                            if (
                              string? (
                                string-append (
                                  string-append (
                                    string-append (
                                      string-append (
                                        string-append (
                                          string-append (
                                            string-append (
                                              string-append "path from (" (
                                                to-str-space (
                                                  hash-table-ref start "x"
                                                )
                                              )
                                            )
                                             ", "
                                          )
                                           (
                                            to-str-space (
                                              hash-table-ref start "y"
                                            )
                                          )
                                        )
                                         ") to ("
                                      )
                                       (
                                        to-str-space (
                                          hash-table-ref goal "x"
                                        )
                                      )
                                    )
                                     ", "
                                  )
                                   (
                                    to-str-space (
                                      hash-table-ref goal "y"
                                    )
                                  )
                                )
                                 ")"
                              )
                            )
                             (
                              string-append (
                                string-append (
                                  string-append (
                                    string-append (
                                      string-append (
                                        string-append (
                                          string-append (
                                            string-append "path from (" (
                                              to-str-space (
                                                hash-table-ref start "x"
                                              )
                                            )
                                          )
                                           ", "
                                        )
                                         (
                                          to-str-space (
                                            hash-table-ref start "y"
                                          )
                                        )
                                      )
                                       ") to ("
                                    )
                                     (
                                      to-str-space (
                                        hash-table-ref goal "x"
                                      )
                                    )
                                  )
                                   ", "
                                )
                                 (
                                  to-str-space (
                                    hash-table-ref goal "y"
                                  )
                                )
                              )
                               ")"
                            )
                             (
                              to-str (
                                string-append (
                                  string-append (
                                    string-append (
                                      string-append (
                                        string-append (
                                          string-append (
                                            string-append (
                                              string-append "path from (" (
                                                to-str-space (
                                                  hash-table-ref start "x"
                                                )
                                              )
                                            )
                                             ", "
                                          )
                                           (
                                            to-str-space (
                                              hash-table-ref start "y"
                                            )
                                          )
                                        )
                                         ") to ("
                                      )
                                       (
                                        to-str-space (
                                          hash-table-ref goal "x"
                                        )
                                      )
                                    )
                                     ", "
                                  )
                                   (
                                    to-str-space (
                                      hash-table-ref goal "y"
                                    )
                                  )
                                )
                                 ")"
                              )
                            )
                          )
                        )
                         (
                          newline
                        )
                         (
                          let (
                            (
                              world (
                                create_world world_x world_y
                              )
                            )
                          )
                           (
                            begin (
                              mark_path world path
                            )
                             (
                              print_world world
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end26 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur27 (
              quotient (
                * (
                  - end26 start25
                )
                 1000000
              )
               jps28
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur27
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
