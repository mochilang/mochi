;; Generated by Mochi Scheme transpiler on 2025-08-16 21:23 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start20 (
        current-jiffy
      )
    )
     (
      jps23 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        absf x
      )
       (
        call/cc (
          lambda (
            ret1
          )
           (
            begin (
              if (
                < x 0.0
              )
               (
                begin (
                  ret1 (
                    - 0.0 x
                  )
                )
              )
               (
                void
              )
            )
             (
              ret1 x
            )
          )
        )
      )
    )
     (
      define (
        sqrtApprox x
      )
       (
        call/cc (
          lambda (
            ret2
          )
           (
            begin (
              if (
                <= x 0.0
              )
               (
                begin (
                  ret2 0.0
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  guess x
                )
              )
               (
                begin (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop3 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i 20
                              )
                               (
                                begin (
                                  set! guess (
                                    _div (
                                      _add guess (
                                        _div x guess
                                      )
                                    )
                                     2.0
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                                 (
                                  loop3
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop3
                      )
                    )
                     (
                      ret2 guess
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        ln_series x
      )
       (
        let (
          (
            t (
              _div (
                - x 1.0
              )
               (
                + x 1.0
              )
            )
          )
        )
         (
          begin (
            let (
              (
                term t
              )
            )
             (
              begin (
                let (
                  (
                    sum 0.0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        n 1
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop4 (
                              lambda (
                                
                              )
                               (
                                if (
                                  <= n 19
                                )
                                 (
                                  begin (
                                    set! sum (
                                      _add sum (
                                        _div term (
                                          let (
                                            (
                                              v5 n
                                            )
                                          )
                                           (
                                            cond (
                                              (
                                                string? v5
                                              )
                                               (
                                                string->number v5
                                              )
                                            )
                                             (
                                              (
                                                boolean? v5
                                              )
                                               (
                                                if v5 1.0 0.0
                                              )
                                            )
                                             (
                                              else (
                                                exact->inexact v5
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! term (
                                      * (
                                        * term t
                                      )
                                       t
                                    )
                                  )
                                   (
                                    set! n (
                                      + n 2
                                    )
                                  )
                                   (
                                    loop4
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop4
                        )
                      )
                       (
                        * 2.0 sum
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        ln x
      )
       (
        let (
          (
            y x
          )
        )
         (
          begin (
            let (
              (
                k 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop6 (
                      lambda (
                        
                      )
                       (
                        if (
                          >= y 10.0
                        )
                         (
                          begin (
                            set! y (
                              _div y 10.0
                            )
                          )
                           (
                            set! k (
                              + k 1
                            )
                          )
                           (
                            loop6
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop6
                )
              )
               (
                letrec (
                  (
                    loop7 (
                      lambda (
                        
                      )
                       (
                        if (
                          < y 1.0
                        )
                         (
                          begin (
                            set! y (
                              * y 10.0
                            )
                          )
                           (
                            set! k (
                              - k 1
                            )
                          )
                           (
                            loop7
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop7
                )
              )
               (
                _add (
                  ln_series y
                )
                 (
                  * (
                    let (
                      (
                        v8 k
                      )
                    )
                     (
                      cond (
                        (
                          string? v8
                        )
                         (
                          string->number v8
                        )
                      )
                       (
                        (
                          boolean? v8
                        )
                         (
                          if v8 1.0 0.0
                        )
                      )
                       (
                        else (
                          exact->inexact v8
                        )
                      )
                    )
                  )
                   (
                    ln_series 10.0
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        mae predict actual
      )
       (
        let (
          (
            sum 0.0
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop9 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len predict
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                diff (
                                  - (
                                    list-ref-safe predict i
                                  )
                                   (
                                    list-ref-safe actual i
                                  )
                                )
                              )
                            )
                             (
                              begin (
                                set! sum (
                                  _add sum (
                                    absf diff
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                            )
                          )
                           (
                            loop9
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop9
                )
              )
               (
                _div sum (
                  let (
                    (
                      v10 (
                        _len predict
                      )
                    )
                  )
                   (
                    cond (
                      (
                        string? v10
                      )
                       (
                        string->number v10
                      )
                    )
                     (
                      (
                        boolean? v10
                      )
                       (
                        if v10 1.0 0.0
                      )
                    )
                     (
                      else (
                        exact->inexact v10
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        mse predict actual
      )
       (
        let (
          (
            sum 0.0
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop11 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len predict
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                diff (
                                  - (
                                    list-ref-safe predict i
                                  )
                                   (
                                    list-ref-safe actual i
                                  )
                                )
                              )
                            )
                             (
                              begin (
                                set! sum (
                                  _add sum (
                                    * diff diff
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                            )
                          )
                           (
                            loop11
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop11
                )
              )
               (
                _div sum (
                  let (
                    (
                      v12 (
                        _len predict
                      )
                    )
                  )
                   (
                    cond (
                      (
                        string? v12
                      )
                       (
                        string->number v12
                      )
                    )
                     (
                      (
                        boolean? v12
                      )
                       (
                        if v12 1.0 0.0
                      )
                    )
                     (
                      else (
                        exact->inexact v12
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        rmse predict actual
      )
       (
        sqrtApprox (
          mse predict actual
        )
      )
    )
     (
      define (
        rmsle predict actual
      )
       (
        let (
          (
            sum 0.0
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop13 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len predict
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                lp (
                                  log (
                                    + (
                                      list-ref-safe predict i
                                    )
                                     1.0
                                  )
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    la (
                                      log (
                                        + (
                                          list-ref-safe actual i
                                        )
                                         1.0
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        diff (
                                          - lp la
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! sum (
                                          _add sum (
                                            * diff diff
                                          )
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop13
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop13
                )
              )
               (
                sqrtApprox (
                  _div sum (
                    let (
                      (
                        v14 (
                          _len predict
                        )
                      )
                    )
                     (
                      cond (
                        (
                          string? v14
                        )
                         (
                          string->number v14
                        )
                      )
                       (
                        (
                          boolean? v14
                        )
                         (
                          if v14 1.0 0.0
                        )
                      )
                       (
                        else (
                          exact->inexact v14
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        mbd predict actual
      )
       (
        let (
          (
            diff_sum 0.0
          )
        )
         (
          begin (
            let (
              (
                actual_sum 0.0
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop15 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len predict
                              )
                            )
                             (
                              begin (
                                set! diff_sum (
                                  + diff_sum (
                                    - (
                                      list-ref-safe predict i
                                    )
                                     (
                                      list-ref-safe actual i
                                    )
                                  )
                                )
                              )
                               (
                                set! actual_sum (
                                  + actual_sum (
                                    list-ref-safe actual i
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop15
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop15
                    )
                  )
                   (
                    let (
                      (
                        n (
                          let (
                            (
                              v16 (
                                _len predict
                              )
                            )
                          )
                           (
                            cond (
                              (
                                string? v16
                              )
                               (
                                string->number v16
                              )
                            )
                             (
                              (
                                boolean? v16
                              )
                               (
                                if v16 1.0 0.0
                              )
                            )
                             (
                              else (
                                exact->inexact v16
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            numerator (
                              _div diff_sum n
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                denominator (
                                  _div actual_sum n
                                )
                              )
                            )
                             (
                              begin (
                                * (
                                  _div numerator denominator
                                )
                                 100.0
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        manual_accuracy predict actual
      )
       (
        let (
          (
            correct 0
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop17 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len predict
                          )
                        )
                         (
                          begin (
                            if (
                              _eq (
                                list-ref-safe predict i
                              )
                               (
                                list-ref-safe actual i
                              )
                            )
                             (
                              begin (
                                set! correct (
                                  + correct 1
                                )
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop17
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop17
                )
              )
               (
                _div (
                  let (
                    (
                      v18 correct
                    )
                  )
                   (
                    cond (
                      (
                        string? v18
                      )
                       (
                        string->number v18
                      )
                    )
                     (
                      (
                        boolean? v18
                      )
                       (
                        if v18 1.0 0.0
                      )
                    )
                     (
                      else (
                        exact->inexact v18
                      )
                    )
                  )
                )
                 (
                  let (
                    (
                      v19 (
                        _len predict
                      )
                    )
                  )
                   (
                    cond (
                      (
                        string? v19
                      )
                       (
                        string->number v19
                      )
                    )
                     (
                      (
                        boolean? v19
                      )
                       (
                        if v19 1.0 0.0
                      )
                    )
                     (
                      else (
                        exact->inexact v19
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        let (
          (
            actual (
              _list 1.0 2.0 3.0
            )
          )
        )
         (
          begin (
            let (
              (
                predict (
                  _list 1.0 4.0 3.0
                )
              )
            )
             (
              begin (
                _display (
                  if (
                    string? (
                      to-str-space (
                        mae predict actual
                      )
                    )
                  )
                   (
                    to-str-space (
                      mae predict actual
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        mae predict actual
                      )
                    )
                  )
                )
              )
               (
                newline
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        mse predict actual
                      )
                    )
                  )
                   (
                    to-str-space (
                      mse predict actual
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        mse predict actual
                      )
                    )
                  )
                )
              )
               (
                newline
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        rmse predict actual
                      )
                    )
                  )
                   (
                    to-str-space (
                      rmse predict actual
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        rmse predict actual
                      )
                    )
                  )
                )
              )
               (
                newline
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        rmsle (
                          _list 10.0 2.0 30.0
                        )
                         (
                          _list 10.0 10.0 30.0
                        )
                      )
                    )
                  )
                   (
                    to-str-space (
                      rmsle (
                        _list 10.0 2.0 30.0
                      )
                       (
                        _list 10.0 10.0 30.0
                      )
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        rmsle (
                          _list 10.0 2.0 30.0
                        )
                         (
                          _list 10.0 10.0 30.0
                        )
                      )
                    )
                  )
                )
              )
               (
                newline
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        mbd (
                          _list 2.0 3.0 4.0
                        )
                         (
                          _list 1.0 2.0 3.0
                        )
                      )
                    )
                  )
                   (
                    to-str-space (
                      mbd (
                        _list 2.0 3.0 4.0
                      )
                       (
                        _list 1.0 2.0 3.0
                      )
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        mbd (
                          _list 2.0 3.0 4.0
                        )
                         (
                          _list 1.0 2.0 3.0
                        )
                      )
                    )
                  )
                )
              )
               (
                newline
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        mbd (
                          _list 0.0 1.0 1.0
                        )
                         (
                          _list 1.0 2.0 3.0
                        )
                      )
                    )
                  )
                   (
                    to-str-space (
                      mbd (
                        _list 0.0 1.0 1.0
                      )
                       (
                        _list 1.0 2.0 3.0
                      )
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        mbd (
                          _list 0.0 1.0 1.0
                        )
                         (
                          _list 1.0 2.0 3.0
                        )
                      )
                    )
                  )
                )
              )
               (
                newline
              )
               (
                _display (
                  if (
                    string? (
                      to-str-space (
                        manual_accuracy predict actual
                      )
                    )
                  )
                   (
                    to-str-space (
                      manual_accuracy predict actual
                    )
                  )
                   (
                    to-str (
                      to-str-space (
                        manual_accuracy predict actual
                      )
                    )
                  )
                )
              )
               (
                newline
              )
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end21 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur22 (
              quotient (
                * (
                  - end21 start20
                )
                 1000000
              )
               jps23
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur22
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
