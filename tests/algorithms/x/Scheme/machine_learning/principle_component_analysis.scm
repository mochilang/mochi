;; Generated by Mochi Scheme transpiler on 2025-08-16 11:48 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start20 (
        current-jiffy
      )
    )
     (
      jps23 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        sqrt x
      )
       (
        let (
          (
            guess (
              if (
                > x 1.0
              )
               (
                _div x 2.0
              )
               1.0
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop1 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i 20
                        )
                         (
                          begin (
                            set! guess (
                              * 0.5 (
                                _add guess (
                                  _div x guess
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop1
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop1
                )
              )
               guess
            )
          )
        )
      )
    )
     (
      define (
        mean xs
      )
       (
        let (
          (
            sum 0.0
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len xs
                          )
                        )
                         (
                          begin (
                            set! sum (
                              + sum (
                                list-ref-safe xs i
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               (
                _div sum (
                  _len xs
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        standardize data
      )
       (
        let (
          (
            n_samples (
              _len data
            )
          )
        )
         (
          begin (
            let (
              (
                n_features (
                  _len (
                    list-ref-safe data 0
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    means (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        stds (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            j 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop3 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < j n_features
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            column (
                                              _list
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                i 0
                                              )
                                            )
                                             (
                                              begin (
                                                letrec (
                                                  (
                                                    loop4 (
                                                      lambda (
                                                        
                                                      )
                                                       (
                                                        if (
                                                          < i n_samples
                                                        )
                                                         (
                                                          begin (
                                                            set! column (
                                                              append column (
                                                                _list (
                                                                  cond (
                                                                    (
                                                                      string? (
                                                                        list-ref-safe data i
                                                                      )
                                                                    )
                                                                     (
                                                                      _substring (
                                                                        list-ref-safe data i
                                                                      )
                                                                       j (
                                                                        + j 1
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    (
                                                                      hash-table? (
                                                                        list-ref-safe data i
                                                                      )
                                                                    )
                                                                     (
                                                                      hash-table-ref (
                                                                        list-ref-safe data i
                                                                      )
                                                                       j
                                                                    )
                                                                  )
                                                                   (
                                                                    else (
                                                                      list-ref-safe (
                                                                        list-ref-safe data i
                                                                      )
                                                                       j
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! i (
                                                              + i 1
                                                            )
                                                          )
                                                           (
                                                            loop4
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop4
                                                )
                                              )
                                               (
                                                let (
                                                  (
                                                    m (
                                                      mean column
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    set! means (
                                                      append means (
                                                        _list m
                                                      )
                                                    )
                                                  )
                                                   (
                                                    let (
                                                      (
                                                        variance 0.0
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            k 0
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            letrec (
                                                              (
                                                                loop5 (
                                                                  lambda (
                                                                    
                                                                  )
                                                                   (
                                                                    if (
                                                                      < k n_samples
                                                                    )
                                                                     (
                                                                      begin (
                                                                        let (
                                                                          (
                                                                            diff (
                                                                              - (
                                                                                list-ref-safe column k
                                                                              )
                                                                               m
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            set! variance (
                                                                              _add variance (
                                                                                * diff diff
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            set! k (
                                                                              + k 1
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        loop5
                                                                      )
                                                                    )
                                                                     (
                                                                      void
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              loop5
                                                            )
                                                          )
                                                           (
                                                            set! stds (
                                                              append stds (
                                                                _list (
                                                                  sqrt (
                                                                    _div variance (
                                                                      - n_samples 1
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop3
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop3
                            )
                          )
                           (
                            let (
                              (
                                standardized (
                                  _list
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    r 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop6 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < r n_samples
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    row (
                                                      _list
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        c 0
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        letrec (
                                                          (
                                                            loop7 (
                                                              lambda (
                                                                
                                                              )
                                                               (
                                                                if (
                                                                  < c n_features
                                                                )
                                                                 (
                                                                  begin (
                                                                    set! row (
                                                                      append row (
                                                                        _list (
                                                                          _div (
                                                                            - (
                                                                              cond (
                                                                                (
                                                                                  string? (
                                                                                    list-ref-safe data r
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  _substring (
                                                                                    list-ref-safe data r
                                                                                  )
                                                                                   c (
                                                                                    + c 1
                                                                                  )
                                                                                )
                                                                              )
                                                                               (
                                                                                (
                                                                                  hash-table? (
                                                                                    list-ref-safe data r
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  hash-table-ref (
                                                                                    list-ref-safe data r
                                                                                  )
                                                                                   c
                                                                                )
                                                                              )
                                                                               (
                                                                                else (
                                                                                  list-ref-safe (
                                                                                    list-ref-safe data r
                                                                                  )
                                                                                   c
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              list-ref-safe means c
                                                                            )
                                                                          )
                                                                           (
                                                                            list-ref-safe stds c
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    set! c (
                                                                      + c 1
                                                                    )
                                                                  )
                                                                   (
                                                                    loop7
                                                                  )
                                                                )
                                                                 (
                                                                  void
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          loop7
                                                        )
                                                      )
                                                       (
                                                        set! standardized (
                                                          append standardized (
                                                            _list row
                                                          )
                                                        )
                                                      )
                                                       (
                                                        set! r (
                                                          + r 1
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                loop6
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop6
                                    )
                                  )
                                   standardized
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        covariance_matrix data
      )
       (
        let (
          (
            n_samples (
              _len data
            )
          )
        )
         (
          begin (
            let (
              (
                n_features (
                  _len (
                    list-ref-safe data 0
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    cov (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop8 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i n_features
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        row (
                                          _list
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            j 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop9 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < j n_features
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            sum 0.0
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                k 0
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                letrec (
                                                                  (
                                                                    loop10 (
                                                                      lambda (
                                                                        
                                                                      )
                                                                       (
                                                                        if (
                                                                          < k n_samples
                                                                        )
                                                                         (
                                                                          begin (
                                                                            set! sum (
                                                                              _add sum (
                                                                                * (
                                                                                  cond (
                                                                                    (
                                                                                      string? (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      _substring (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                       i (
                                                                                        + i 1
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    (
                                                                                      hash-table? (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      hash-table-ref (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                       i
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    else (
                                                                                      list-ref-safe (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                       i
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  cond (
                                                                                    (
                                                                                      string? (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      _substring (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                       j (
                                                                                        + j 1
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    (
                                                                                      hash-table? (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      hash-table-ref (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                       j
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    else (
                                                                                      list-ref-safe (
                                                                                        list-ref-safe data k
                                                                                      )
                                                                                       j
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            set! k (
                                                                              + k 1
                                                                            )
                                                                          )
                                                                           (
                                                                            loop10
                                                                          )
                                                                        )
                                                                         (
                                                                          void
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  loop10
                                                                )
                                                              )
                                                               (
                                                                set! row (
                                                                  append row (
                                                                    _list (
                                                                      _div sum (
                                                                        - n_samples 1
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                set! j (
                                                                  + j 1
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop9
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop9
                                            )
                                          )
                                           (
                                            set! cov (
                                              append cov (
                                                _list row
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop8
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop8
                        )
                      )
                       cov
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        normalize vec
      )
       (
        let (
          (
            sum 0.0
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop11 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len vec
                          )
                        )
                         (
                          begin (
                            set! sum (
                              _add sum (
                                * (
                                  list-ref-safe vec i
                                )
                                 (
                                  list-ref-safe vec i
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop11
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop11
                )
              )
               (
                let (
                  (
                    n (
                      sqrt sum
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        res (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            j 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop12 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < j (
                                        _len vec
                                      )
                                    )
                                     (
                                      begin (
                                        set! res (
                                          append res (
                                            _list (
                                              _div (
                                                list-ref-safe vec j
                                              )
                                               n
                                            )
                                          )
                                        )
                                      )
                                       (
                                        set! j (
                                          + j 1
                                        )
                                      )
                                       (
                                        loop12
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop12
                            )
                          )
                           res
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        eigen_decomposition_2x2 matrix
      )
       (
        let (
          (
            a (
              cond (
                (
                  string? (
                    list-ref-safe matrix 0
                  )
                )
                 (
                  _substring (
                    list-ref-safe matrix 0
                  )
                   0 (
                    + 0 1
                  )
                )
              )
               (
                (
                  hash-table? (
                    list-ref-safe matrix 0
                  )
                )
                 (
                  hash-table-ref (
                    list-ref-safe matrix 0
                  )
                   0
                )
              )
               (
                else (
                  list-ref-safe (
                    list-ref-safe matrix 0
                  )
                   0
                )
              )
            )
          )
        )
         (
          begin (
            let (
              (
                b (
                  cond (
                    (
                      string? (
                        list-ref-safe matrix 0
                      )
                    )
                     (
                      _substring (
                        list-ref-safe matrix 0
                      )
                       1 (
                        + 1 1
                      )
                    )
                  )
                   (
                    (
                      hash-table? (
                        list-ref-safe matrix 0
                      )
                    )
                     (
                      hash-table-ref (
                        list-ref-safe matrix 0
                      )
                       1
                    )
                  )
                   (
                    else (
                      list-ref-safe (
                        list-ref-safe matrix 0
                      )
                       1
                    )
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    c (
                      cond (
                        (
                          string? (
                            list-ref-safe matrix 1
                          )
                        )
                         (
                          _substring (
                            list-ref-safe matrix 1
                          )
                           1 (
                            + 1 1
                          )
                        )
                      )
                       (
                        (
                          hash-table? (
                            list-ref-safe matrix 1
                          )
                        )
                         (
                          hash-table-ref (
                            list-ref-safe matrix 1
                          )
                           1
                        )
                      )
                       (
                        else (
                          list-ref-safe (
                            list-ref-safe matrix 1
                          )
                           1
                        )
                      )
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        diff (
                          - a c
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            discriminant (
                              sqrt (
                                _add (
                                  * diff diff
                                )
                                 (
                                  * (
                                    * 4.0 b
                                  )
                                   b
                                )
                              )
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                lambda1 (
                                  _div (
                                    _add (
                                      + a c
                                    )
                                     discriminant
                                  )
                                   2.0
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    lambda2 (
                                      _div (
                                        - (
                                          + a c
                                        )
                                         discriminant
                                      )
                                       2.0
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        v1 (
                                          void
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            v2 (
                                              void
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              not (
                                                equal? b 0.0
                                              )
                                            )
                                             (
                                              begin (
                                                set! v1 (
                                                  normalize (
                                                    _list (
                                                      - lambda1 c
                                                    )
                                                     b
                                                  )
                                                )
                                              )
                                               (
                                                set! v2 (
                                                  normalize (
                                                    _list (
                                                      - lambda2 c
                                                    )
                                                     b
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! v1 (
                                                  _list 1.0 0.0
                                                )
                                              )
                                               (
                                                set! v2 (
                                                  _list 0.0 1.0
                                                )
                                              )
                                            )
                                          )
                                           (
                                            let (
                                              (
                                                eigenvalues (
                                                  _list lambda1 lambda2
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    eigenvectors (
                                                      _list v1 v2
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      < (
                                                        list-ref-safe eigenvalues 0
                                                      )
                                                       (
                                                        list-ref-safe eigenvalues 1
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            tmp_val (
                                                              list-ref-safe eigenvalues 0
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            list-set-safe! eigenvalues 0 (
                                                              list-ref-safe eigenvalues 1
                                                            )
                                                          )
                                                           (
                                                            list-set-safe! eigenvalues 1 tmp_val
                                                          )
                                                           (
                                                            let (
                                                              (
                                                                tmp_vec (
                                                                  list-ref-safe eigenvectors 0
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                list-set-safe! eigenvectors 0 (
                                                                  list-ref-safe eigenvectors 1
                                                                )
                                                              )
                                                               (
                                                                list-set-safe! eigenvectors 1 tmp_vec
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    alist->hash-table (
                                                      _list (
                                                        cons "values" eigenvalues
                                                      )
                                                       (
                                                        cons "vectors" eigenvectors
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        transpose matrix
      )
       (
        let (
          (
            rows (
              _len matrix
            )
          )
        )
         (
          begin (
            let (
              (
                cols (
                  _len (
                    list-ref-safe matrix 0
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    trans (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop13 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i cols
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        row (
                                          _list
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            j 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop14 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < j rows
                                                    )
                                                     (
                                                      begin (
                                                        set! row (
                                                          append row (
                                                            _list (
                                                              cond (
                                                                (
                                                                  string? (
                                                                    list-ref-safe matrix j
                                                                  )
                                                                )
                                                                 (
                                                                  _substring (
                                                                    list-ref-safe matrix j
                                                                  )
                                                                   i (
                                                                    + i 1
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                (
                                                                  hash-table? (
                                                                    list-ref-safe matrix j
                                                                  )
                                                                )
                                                                 (
                                                                  hash-table-ref (
                                                                    list-ref-safe matrix j
                                                                  )
                                                                   i
                                                                )
                                                              )
                                                               (
                                                                else (
                                                                  list-ref-safe (
                                                                    list-ref-safe matrix j
                                                                  )
                                                                   i
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        set! j (
                                                          + j 1
                                                        )
                                                      )
                                                       (
                                                        loop14
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop14
                                            )
                                          )
                                           (
                                            set! trans (
                                              append trans (
                                                _list row
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop13
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop13
                        )
                      )
                       trans
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        matrix_multiply a b
      )
       (
        let (
          (
            rows_a (
              _len a
            )
          )
        )
         (
          begin (
            let (
              (
                cols_a (
                  _len (
                    list-ref-safe a 0
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    rows_b (
                      _len b
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        cols_b (
                          _len (
                            list-ref-safe b 0
                          )
                        )
                      )
                    )
                     (
                      begin (
                        if (
                          not (
                            equal? cols_a rows_b
                          )
                        )
                         (
                          begin (
                            panic "Incompatible matrices"
                          )
                        )
                         (
                          void
                        )
                      )
                       (
                        let (
                          (
                            result (
                              _list
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                i 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop15 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < i rows_a
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                row (
                                                  _list
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    j 0
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    letrec (
                                                      (
                                                        loop16 (
                                                          lambda (
                                                            
                                                          )
                                                           (
                                                            if (
                                                              < j cols_b
                                                            )
                                                             (
                                                              begin (
                                                                let (
                                                                  (
                                                                    sum 0.0
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    let (
                                                                      (
                                                                        k 0
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        letrec (
                                                                          (
                                                                            loop17 (
                                                                              lambda (
                                                                                
                                                                              )
                                                                               (
                                                                                if (
                                                                                  < k cols_a
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    set! sum (
                                                                                      _add sum (
                                                                                        * (
                                                                                          cond (
                                                                                            (
                                                                                              string? (
                                                                                                list-ref-safe a i
                                                                                              )
                                                                                            )
                                                                                             (
                                                                                              _substring (
                                                                                                list-ref-safe a i
                                                                                              )
                                                                                               k (
                                                                                                + k 1
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            (
                                                                                              hash-table? (
                                                                                                list-ref-safe a i
                                                                                              )
                                                                                            )
                                                                                             (
                                                                                              hash-table-ref (
                                                                                                list-ref-safe a i
                                                                                              )
                                                                                               k
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            else (
                                                                                              list-ref-safe (
                                                                                                list-ref-safe a i
                                                                                              )
                                                                                               k
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          cond (
                                                                                            (
                                                                                              string? (
                                                                                                list-ref-safe b k
                                                                                              )
                                                                                            )
                                                                                             (
                                                                                              _substring (
                                                                                                list-ref-safe b k
                                                                                              )
                                                                                               j (
                                                                                                + j 1
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            (
                                                                                              hash-table? (
                                                                                                list-ref-safe b k
                                                                                              )
                                                                                            )
                                                                                             (
                                                                                              hash-table-ref (
                                                                                                list-ref-safe b k
                                                                                              )
                                                                                               j
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            else (
                                                                                              list-ref-safe (
                                                                                                list-ref-safe b k
                                                                                              )
                                                                                               j
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    set! k (
                                                                                      + k 1
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    loop17
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  void
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          loop17
                                                                        )
                                                                      )
                                                                       (
                                                                        set! row (
                                                                          append row (
                                                                            _list sum
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        set! j (
                                                                          + j 1
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                loop16
                                                              )
                                                            )
                                                             (
                                                              void
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      loop16
                                                    )
                                                  )
                                                   (
                                                    set! result (
                                                      append result (
                                                        _list row
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! i (
                                                      + i 1
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop15
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop15
                                )
                              )
                               result
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        apply_pca data n_components
      )
       (
        let (
          (
            standardized (
              standardize data
            )
          )
        )
         (
          begin (
            let (
              (
                cov (
                  covariance_matrix standardized
                )
              )
            )
             (
              begin (
                let (
                  (
                    eig (
                      eigen_decomposition_2x2 cov
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        eigenvalues (
                          hash-table-ref eig "values"
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            eigenvectors (
                              hash-table-ref eig "vectors"
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                components (
                                  transpose eigenvectors
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    transformed (
                                      matrix_multiply standardized components
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        total (
                                          _add (
                                            cond (
                                              (
                                                string? eigenvalues
                                              )
                                               (
                                                _substring eigenvalues 0 (
                                                  + 0 1
                                                )
                                              )
                                            )
                                             (
                                              (
                                                hash-table? eigenvalues
                                              )
                                               (
                                                hash-table-ref eigenvalues 0
                                              )
                                            )
                                             (
                                              else (
                                                list-ref-safe eigenvalues 0
                                              )
                                            )
                                          )
                                           (
                                            cond (
                                              (
                                                string? eigenvalues
                                              )
                                               (
                                                _substring eigenvalues 1 (
                                                  + 1 1
                                                )
                                              )
                                            )
                                             (
                                              (
                                                hash-table? eigenvalues
                                              )
                                               (
                                                hash-table-ref eigenvalues 1
                                              )
                                            )
                                             (
                                              else (
                                                list-ref-safe eigenvalues 1
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            ratios (
                                              _list
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                i 0
                                              )
                                            )
                                             (
                                              begin (
                                                letrec (
                                                  (
                                                    loop18 (
                                                      lambda (
                                                        
                                                      )
                                                       (
                                                        if (
                                                          < i n_components
                                                        )
                                                         (
                                                          begin (
                                                            set! ratios (
                                                              append ratios (
                                                                _list (
                                                                  _div (
                                                                    cond (
                                                                      (
                                                                        string? eigenvalues
                                                                      )
                                                                       (
                                                                        _substring eigenvalues i (
                                                                          + i 1
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      (
                                                                        hash-table? eigenvalues
                                                                      )
                                                                       (
                                                                        hash-table-ref eigenvalues i
                                                                      )
                                                                    )
                                                                     (
                                                                      else (
                                                                        list-ref-safe eigenvalues i
                                                                      )
                                                                    )
                                                                  )
                                                                   total
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! i (
                                                              + i 1
                                                            )
                                                          )
                                                           (
                                                            loop18
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop18
                                                )
                                              )
                                               (
                                                alist->hash-table (
                                                  _list (
                                                    cons "transformed" transformed
                                                  )
                                                   (
                                                    cons "variance_ratio" ratios
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          data (
            _list (
              _list 2.5 2.4
            )
             (
              _list 0.5 0.7
            )
             (
              _list 2.2 2.9
            )
             (
              _list 1.9 2.2
            )
             (
              _list 3.1 3.0
            )
             (
              _list 2.3 2.7
            )
             (
              _list 2.0 1.6
            )
             (
              _list 1.0 1.1
            )
             (
              _list 1.5 1.6
            )
             (
              _list 1.1 0.9
            )
          )
        )
      )
       (
        begin (
          let (
            (
              result (
                apply_pca data 2
              )
            )
          )
           (
            begin (
              _display (
                if (
                  string? "Transformed Data (first 5 rows):"
                )
                 "Transformed Data (first 5 rows):" (
                  to-str "Transformed Data (first 5 rows):"
                )
              )
            )
             (
              newline
            )
             (
              let (
                (
                  idx 0
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop19 (
                        lambda (
                          
                        )
                         (
                          if (
                            < idx 5
                          )
                           (
                            begin (
                              _display (
                                if (
                                  string? (
                                    cond (
                                      (
                                        string? (
                                          hash-table-ref result "transformed"
                                        )
                                      )
                                       (
                                        _substring (
                                          hash-table-ref result "transformed"
                                        )
                                         idx (
                                          + idx 1
                                        )
                                      )
                                    )
                                     (
                                      (
                                        hash-table? (
                                          hash-table-ref result "transformed"
                                        )
                                      )
                                       (
                                        hash-table-ref (
                                          hash-table-ref result "transformed"
                                        )
                                         idx
                                      )
                                    )
                                     (
                                      else (
                                        list-ref-safe (
                                          hash-table-ref result "transformed"
                                        )
                                         idx
                                      )
                                    )
                                  )
                                )
                                 (
                                  cond (
                                    (
                                      string? (
                                        hash-table-ref result "transformed"
                                      )
                                    )
                                     (
                                      _substring (
                                        hash-table-ref result "transformed"
                                      )
                                       idx (
                                        + idx 1
                                      )
                                    )
                                  )
                                   (
                                    (
                                      hash-table? (
                                        hash-table-ref result "transformed"
                                      )
                                    )
                                     (
                                      hash-table-ref (
                                        hash-table-ref result "transformed"
                                      )
                                       idx
                                    )
                                  )
                                   (
                                    else (
                                      list-ref-safe (
                                        hash-table-ref result "transformed"
                                      )
                                       idx
                                    )
                                  )
                                )
                                 (
                                  to-str (
                                    cond (
                                      (
                                        string? (
                                          hash-table-ref result "transformed"
                                        )
                                      )
                                       (
                                        _substring (
                                          hash-table-ref result "transformed"
                                        )
                                         idx (
                                          + idx 1
                                        )
                                      )
                                    )
                                     (
                                      (
                                        hash-table? (
                                          hash-table-ref result "transformed"
                                        )
                                      )
                                       (
                                        hash-table-ref (
                                          hash-table-ref result "transformed"
                                        )
                                         idx
                                      )
                                    )
                                     (
                                      else (
                                        list-ref-safe (
                                          hash-table-ref result "transformed"
                                        )
                                         idx
                                      )
                                    )
                                  )
                                )
                              )
                            )
                             (
                              newline
                            )
                             (
                              set! idx (
                                + idx 1
                              )
                            )
                             (
                              loop19
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop19
                  )
                )
                 (
                  _display (
                    if (
                      string? "Explained Variance Ratio:"
                    )
                     "Explained Variance Ratio:" (
                      to-str "Explained Variance Ratio:"
                    )
                  )
                )
                 (
                  newline
                )
                 (
                  _display (
                    if (
                      string? (
                        hash-table-ref result "variance_ratio"
                      )
                    )
                     (
                      hash-table-ref result "variance_ratio"
                    )
                     (
                      to-str (
                        hash-table-ref result "variance_ratio"
                      )
                    )
                  )
                )
                 (
                  newline
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end21 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur22 (
              quotient (
                * (
                  - end21 start20
                )
                 1000000
              )
               jps23
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur22
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
