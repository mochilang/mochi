;; Generated by Mochi Scheme transpiler on 2025-08-16 09:25 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start10 (
        current-jiffy
      )
    )
     (
      jps13 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          NUM_SQUARES 9
        )
      )
       (
        begin (
          let (
            (
              EMPTY_CELL "."
            )
          )
           (
            begin (
              define (
                is_valid_sudoku_board board
              )
               (
                call/cc (
                  lambda (
                    ret1
                  )
                   (
                    begin (
                      if (
                        not (
                          equal? (
                            _len board
                          )
                           NUM_SQUARES
                        )
                      )
                       (
                        begin (
                          ret1 #f
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          i 0
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop2 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    < i NUM_SQUARES
                                  )
                                   (
                                    begin (
                                      if (
                                        not (
                                          equal? (
                                            _len (
                                              list-ref-safe board i
                                            )
                                          )
                                           NUM_SQUARES
                                        )
                                      )
                                       (
                                        begin (
                                          ret1 #f
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 1
                                      )
                                    )
                                     (
                                      loop2
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          let (
                            (
                              rows (
                                _list
                              )
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  cols (
                                    _list
                                  )
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      boxes (
                                        _list
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      set! i 0
                                    )
                                     (
                                      letrec (
                                        (
                                          loop3 (
                                            lambda (
                                              
                                            )
                                             (
                                              if (
                                                < i NUM_SQUARES
                                              )
                                               (
                                                begin (
                                                  set! rows (
                                                    append rows (
                                                      _list (
                                                        _list
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  set! cols (
                                                    append cols (
                                                      _list (
                                                        _list
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  set! boxes (
                                                    append boxes (
                                                      _list (
                                                        _list
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  set! i (
                                                    + i 1
                                                  )
                                                )
                                                 (
                                                  loop3
                                                )
                                              )
                                               (
                                                void
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop3
                                      )
                                    )
                                     (
                                      call/cc (
                                        lambda (
                                          break5
                                        )
                                         (
                                          letrec (
                                            (
                                              loop4 (
                                                lambda (
                                                  r
                                                )
                                                 (
                                                  if (
                                                    < r NUM_SQUARES
                                                  )
                                                   (
                                                    begin (
                                                      begin (
                                                        call/cc (
                                                          lambda (
                                                            break7
                                                          )
                                                           (
                                                            letrec (
                                                              (
                                                                loop6 (
                                                                  lambda (
                                                                    c
                                                                  )
                                                                   (
                                                                    if (
                                                                      < c NUM_SQUARES
                                                                    )
                                                                     (
                                                                      begin (
                                                                        begin (
                                                                          let (
                                                                            (
                                                                              value (
                                                                                cond (
                                                                                  (
                                                                                    string? (
                                                                                      list-ref-safe board r
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    _substring (
                                                                                      list-ref-safe board r
                                                                                    )
                                                                                     c (
                                                                                      + c 1
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  (
                                                                                    hash-table? (
                                                                                      list-ref-safe board r
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    hash-table-ref (
                                                                                      list-ref-safe board r
                                                                                    )
                                                                                     c
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  else (
                                                                                    list-ref-safe (
                                                                                      list-ref-safe board r
                                                                                    )
                                                                                     c
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            begin (
                                                                              if (
                                                                                equal? value EMPTY_CELL
                                                                              )
                                                                               (
                                                                                begin (
                                                                                  loop6 (
                                                                                    + c 1
                                                                                  )
                                                                                )
                                                                              )
                                                                               (
                                                                                void
                                                                              )
                                                                            )
                                                                             (
                                                                              let (
                                                                                (
                                                                                  box (
                                                                                    + (
                                                                                      * (
                                                                                        let (
                                                                                          (
                                                                                            v8 (
                                                                                              _div r 3
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          cond (
                                                                                            (
                                                                                              string? v8
                                                                                            )
                                                                                             (
                                                                                              exact (
                                                                                                _floor (
                                                                                                  string->number v8
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            (
                                                                                              boolean? v8
                                                                                            )
                                                                                             (
                                                                                              if v8 1 0
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            else (
                                                                                              exact (
                                                                                                _floor v8
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                       3
                                                                                    )
                                                                                     (
                                                                                      let (
                                                                                        (
                                                                                          v9 (
                                                                                            _div c 3
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        cond (
                                                                                          (
                                                                                            string? v9
                                                                                          )
                                                                                           (
                                                                                            exact (
                                                                                              _floor (
                                                                                                string->number v9
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          (
                                                                                            boolean? v9
                                                                                          )
                                                                                           (
                                                                                            if v9 1 0
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          else (
                                                                                            exact (
                                                                                              _floor v9
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                               (
                                                                                begin (
                                                                                  if (
                                                                                    or (
                                                                                      or (
                                                                                        cond (
                                                                                          (
                                                                                            string? (
                                                                                              list-ref-safe rows r
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            if (
                                                                                              string-contains (
                                                                                                list-ref-safe rows r
                                                                                              )
                                                                                               value
                                                                                            )
                                                                                             #t #f
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          (
                                                                                            hash-table? (
                                                                                              list-ref-safe rows r
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            if (
                                                                                              hash-table-exists? (
                                                                                                list-ref-safe rows r
                                                                                              )
                                                                                               value
                                                                                            )
                                                                                             #t #f
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          else (
                                                                                            if (
                                                                                              member value (
                                                                                                list-ref-safe rows r
                                                                                              )
                                                                                            )
                                                                                             #t #f
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        cond (
                                                                                          (
                                                                                            string? (
                                                                                              list-ref-safe cols c
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            if (
                                                                                              string-contains (
                                                                                                list-ref-safe cols c
                                                                                              )
                                                                                               value
                                                                                            )
                                                                                             #t #f
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          (
                                                                                            hash-table? (
                                                                                              list-ref-safe cols c
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            if (
                                                                                              hash-table-exists? (
                                                                                                list-ref-safe cols c
                                                                                              )
                                                                                               value
                                                                                            )
                                                                                             #t #f
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          else (
                                                                                            if (
                                                                                              member value (
                                                                                                list-ref-safe cols c
                                                                                              )
                                                                                            )
                                                                                             #t #f
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      cond (
                                                                                        (
                                                                                          string? (
                                                                                            list-ref-safe boxes box
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          if (
                                                                                            string-contains (
                                                                                              list-ref-safe boxes box
                                                                                            )
                                                                                             value
                                                                                          )
                                                                                           #t #f
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        (
                                                                                          hash-table? (
                                                                                            list-ref-safe boxes box
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          if (
                                                                                            hash-table-exists? (
                                                                                              list-ref-safe boxes box
                                                                                            )
                                                                                             value
                                                                                          )
                                                                                           #t #f
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        else (
                                                                                          if (
                                                                                            member value (
                                                                                              list-ref-safe boxes box
                                                                                            )
                                                                                          )
                                                                                           #t #f
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    begin (
                                                                                      ret1 #f
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    void
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  list-set-safe! rows r (
                                                                                    append (
                                                                                      list-ref-safe rows r
                                                                                    )
                                                                                     (
                                                                                      _list value
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  list-set-safe! cols c (
                                                                                    append (
                                                                                      list-ref-safe cols c
                                                                                    )
                                                                                     (
                                                                                      _list value
                                                                                    )
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  list-set-safe! boxes box (
                                                                                    append (
                                                                                      list-ref-safe boxes box
                                                                                    )
                                                                                     (
                                                                                      _list value
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        loop6 (
                                                                          + c 1
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      void
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              loop6 0
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      loop4 (
                                                        + r 1
                                                      )
                                                    )
                                                  )
                                                   (
                                                    void
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop4 0
                                          )
                                        )
                                      )
                                    )
                                     (
                                      ret1 #t
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              let (
                (
                  valid_board (
                    _list (
                      _list "5" "3" "." "." "7" "." "." "." "."
                    )
                     (
                      _list "6" "." "." "1" "9" "5" "." "." "."
                    )
                     (
                      _list "." "9" "8" "." "." "." "." "6" "."
                    )
                     (
                      _list "8" "." "." "." "6" "." "." "." "3"
                    )
                     (
                      _list "4" "." "." "8" "." "3" "." "." "1"
                    )
                     (
                      _list "7" "." "." "." "2" "." "." "." "6"
                    )
                     (
                      _list "." "6" "." "." "." "." "2" "8" "."
                    )
                     (
                      _list "." "." "." "4" "1" "9" "." "." "5"
                    )
                     (
                      _list "." "." "." "." "8" "." "." "7" "9"
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      invalid_board (
                        _list (
                          _list "8" "3" "." "." "7" "." "." "." "."
                        )
                         (
                          _list "6" "." "." "1" "9" "5" "." "." "."
                        )
                         (
                          _list "." "9" "8" "." "." "." "." "6" "."
                        )
                         (
                          _list "8" "." "." "." "6" "." "." "." "3"
                        )
                         (
                          _list "4" "." "." "8" "." "3" "." "." "1"
                        )
                         (
                          _list "7" "." "." "." "2" "." "." "." "6"
                        )
                         (
                          _list "." "6" "." "." "." "." "2" "8" "."
                        )
                         (
                          _list "." "." "." "4" "1" "9" "." "." "5"
                        )
                         (
                          _list "." "." "." "." "8" "." "." "7" "9"
                        )
                      )
                    )
                  )
                   (
                    begin (
                      _display (
                        if (
                          string? (
                            is_valid_sudoku_board valid_board
                          )
                        )
                         (
                          is_valid_sudoku_board valid_board
                        )
                         (
                          to-str (
                            is_valid_sudoku_board valid_board
                          )
                        )
                      )
                    )
                     (
                      newline
                    )
                     (
                      _display (
                        if (
                          string? (
                            is_valid_sudoku_board invalid_board
                          )
                        )
                         (
                          is_valid_sudoku_board invalid_board
                        )
                         (
                          to-str (
                            is_valid_sudoku_board invalid_board
                          )
                        )
                      )
                    )
                     (
                      newline
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end11 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur12 (
              quotient (
                * (
                  - end11 start10
                )
                 1000000
              )
               jps13
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur12
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
