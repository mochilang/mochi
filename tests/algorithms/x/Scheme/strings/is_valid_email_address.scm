;; Generated by Mochi Scheme transpiler on 2025-08-23 13:46 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        ((list? x) (length x))
        ((vector? x) (vector-length x))
        (else 0)))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start12 (
        current-jiffy
      )
    )
     (
      jps15 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          MAX_LOCAL_PART_OCTETS 64
        )
      )
       (
        begin (
          let (
            (
              MAX_DOMAIN_OCTETS 255
            )
          )
           (
            begin (
              let (
                (
                  ASCII_LETTERS "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                )
              )
               (
                begin (
                  let (
                    (
                      DIGITS "0123456789"
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          LOCAL_EXTRA ".(!#$%&'*+-/=?^_`{|}~)"
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              DOMAIN_EXTRA ".-"
                            )
                          )
                           (
                            begin (
                              define (
                                count_char s target
                              )
                               (
                                let (
                                  (
                                    cnt 0
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        i 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop1 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < i (
                                                    _len s
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      _eq (
                                                        _substring s i (
                                                          + i 1
                                                        )
                                                      )
                                                       target
                                                    )
                                                     (
                                                      begin (
                                                        set! cnt (
                                                          + cnt 1
                                                        )
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    set! i (
                                                      + i 1
                                                    )
                                                  )
                                                   (
                                                    loop1
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop1
                                        )
                                      )
                                       cnt
                                    )
                                  )
                                )
                              )
                            )
                             (
                              define (
                                char_in c allowed
                              )
                               (
                                call/cc (
                                  lambda (
                                    ret2
                                  )
                                   (
                                    let (
                                      (
                                        i 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop3 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < i (
                                                    _len allowed
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      _eq (
                                                        _substring allowed i (
                                                          + i 1
                                                        )
                                                      )
                                                       c
                                                    )
                                                     (
                                                      begin (
                                                        ret2 #t
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    set! i (
                                                      + i 1
                                                    )
                                                  )
                                                   (
                                                    loop3
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop3
                                        )
                                      )
                                       (
                                        ret2 #f
                                      )
                                    )
                                  )
                                )
                              )
                            )
                             (
                              define (
                                starts_with_char s c
                              )
                               (
                                and (
                                  > (
                                    _len s
                                  )
                                   0
                                )
                                 (
                                  _eq (
                                    _substring s 0 1
                                  )
                                   c
                                )
                              )
                            )
                             (
                              define (
                                ends_with_char s c
                              )
                               (
                                and (
                                  > (
                                    _len s
                                  )
                                   0
                                )
                                 (
                                  _eq (
                                    _substring s (
                                      - (
                                        _len s
                                      )
                                       1
                                    )
                                     (
                                      _len s
                                    )
                                  )
                                   c
                                )
                              )
                            )
                             (
                              define (
                                contains_double_dot s
                              )
                               (
                                call/cc (
                                  lambda (
                                    ret4
                                  )
                                   (
                                    begin (
                                      if (
                                        < (
                                          _len s
                                        )
                                         2
                                      )
                                       (
                                        begin (
                                          ret4 #f
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                     (
                                      let (
                                        (
                                          i 0
                                        )
                                      )
                                       (
                                        begin (
                                          letrec (
                                            (
                                              loop5 (
                                                lambda (
                                                  
                                                )
                                                 (
                                                  if (
                                                    < i (
                                                      - (
                                                        _len s
                                                      )
                                                       1
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      if (
                                                        _eq (
                                                          _substring s i (
                                                            + i 2
                                                          )
                                                        )
                                                         ".."
                                                      )
                                                       (
                                                        begin (
                                                          ret4 #t
                                                        )
                                                      )
                                                       (
                                                        void
                                                      )
                                                    )
                                                     (
                                                      set! i (
                                                        + i 1
                                                      )
                                                    )
                                                     (
                                                      loop5
                                                    )
                                                  )
                                                   (
                                                    void
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop5
                                          )
                                        )
                                         (
                                          ret4 #f
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                             (
                              define (
                                is_valid_email_address email
                              )
                               (
                                call/cc (
                                  lambda (
                                    ret6
                                  )
                                   (
                                    begin (
                                      if (
                                        not (
                                          _eq (
                                            count_char email "@"
                                          )
                                           1
                                        )
                                      )
                                       (
                                        begin (
                                          ret6 #f
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                     (
                                      let (
                                        (
                                          at_idx 0
                                        )
                                      )
                                       (
                                        begin (
                                          let (
                                            (
                                              i 0
                                            )
                                          )
                                           (
                                            begin (
                                              call/cc (
                                                lambda (
                                                  break8
                                                )
                                                 (
                                                  letrec (
                                                    (
                                                      loop7 (
                                                        lambda (
                                                          
                                                        )
                                                         (
                                                          if (
                                                            < i (
                                                              _len email
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              if (
                                                                _eq (
                                                                  _substring email i (
                                                                    + i 1
                                                                  )
                                                                )
                                                                 "@"
                                                              )
                                                               (
                                                                begin (
                                                                  set! at_idx i
                                                                )
                                                                 (
                                                                  break8 (
                                                                    void
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                void
                                                              )
                                                            )
                                                             (
                                                              set! i (
                                                                + i 1
                                                              )
                                                            )
                                                             (
                                                              loop7
                                                            )
                                                          )
                                                           (
                                                            void
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop7
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              let (
                                                (
                                                  local_part (
                                                    _substring email 0 at_idx
                                                  )
                                                )
                                              )
                                               (
                                                begin (
                                                  let (
                                                    (
                                                      domain (
                                                        _substring email (
                                                          + at_idx 1
                                                        )
                                                         (
                                                          _len email
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      if (
                                                        or (
                                                          > (
                                                            _len local_part
                                                          )
                                                           MAX_LOCAL_PART_OCTETS
                                                        )
                                                         (
                                                          > (
                                                            _len domain
                                                          )
                                                           MAX_DOMAIN_OCTETS
                                                        )
                                                      )
                                                       (
                                                        begin (
                                                          ret6 #f
                                                        )
                                                      )
                                                       (
                                                        void
                                                      )
                                                    )
                                                     (
                                                      let (
                                                        (
                                                          i 0
                                                        )
                                                      )
                                                       (
                                                        begin (
                                                          letrec (
                                                            (
                                                              loop9 (
                                                                lambda (
                                                                  
                                                                )
                                                                 (
                                                                  if (
                                                                    < i (
                                                                      _len local_part
                                                                    )
                                                                  )
                                                                   (
                                                                    begin (
                                                                      let (
                                                                        (
                                                                          ch (
                                                                            _substring local_part i (
                                                                              + i 1
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        begin (
                                                                          if (
                                                                            not (
                                                                              char_in ch (
                                                                                string-append (
                                                                                  string-append ASCII_LETTERS DIGITS
                                                                                )
                                                                                 LOCAL_EXTRA
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            begin (
                                                                              ret6 #f
                                                                            )
                                                                          )
                                                                           (
                                                                            void
                                                                          )
                                                                        )
                                                                         (
                                                                          set! i (
                                                                            + i 1
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      loop9
                                                                    )
                                                                  )
                                                                   (
                                                                    void
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            loop9
                                                          )
                                                        )
                                                         (
                                                          if (
                                                            or (
                                                              or (
                                                                starts_with_char local_part "."
                                                              )
                                                               (
                                                                ends_with_char local_part "."
                                                              )
                                                            )
                                                             (
                                                              contains_double_dot local_part
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              ret6 #f
                                                            )
                                                          )
                                                           (
                                                            void
                                                          )
                                                        )
                                                         (
                                                          set! i 0
                                                        )
                                                         (
                                                          letrec (
                                                            (
                                                              loop10 (
                                                                lambda (
                                                                  
                                                                )
                                                                 (
                                                                  if (
                                                                    < i (
                                                                      _len domain
                                                                    )
                                                                  )
                                                                   (
                                                                    begin (
                                                                      let (
                                                                        (
                                                                          ch (
                                                                            _substring domain i (
                                                                              + i 1
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        begin (
                                                                          if (
                                                                            not (
                                                                              char_in ch (
                                                                                string-append (
                                                                                  string-append ASCII_LETTERS DIGITS
                                                                                )
                                                                                 DOMAIN_EXTRA
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            begin (
                                                                              ret6 #f
                                                                            )
                                                                          )
                                                                           (
                                                                            void
                                                                          )
                                                                        )
                                                                         (
                                                                          set! i (
                                                                            + i 1
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      loop10
                                                                    )
                                                                  )
                                                                   (
                                                                    void
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            loop10
                                                          )
                                                        )
                                                         (
                                                          if (
                                                            or (
                                                              starts_with_char domain "-"
                                                            )
                                                             (
                                                              ends_with_char domain "."
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              ret6 #f
                                                            )
                                                          )
                                                           (
                                                            void
                                                          )
                                                        )
                                                         (
                                                          if (
                                                            or (
                                                              or (
                                                                starts_with_char domain "."
                                                              )
                                                               (
                                                                ends_with_char domain "."
                                                              )
                                                            )
                                                             (
                                                              contains_double_dot domain
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              ret6 #f
                                                            )
                                                          )
                                                           (
                                                            void
                                                          )
                                                        )
                                                         (
                                                          ret6 #t
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                             (
                              let (
                                (
                                  email_tests (
                                    _list "simple@example.com" "very.common@example.com" "disposable.style.email.with+symbol@example.com" "other-email-with-hyphen@and.subdomains.example.com" "fully-qualified-domain@example.com" "user.name+tag+sorting@example.com" "x@example.com" "example-indeed@strange-example.com" "test/test@test.com" "123456789012345678901234567890123456789012345678901234567890123@example.com" "admin@mailserver1" "example@s.example" "Abc.example.com" "A@b@c@example.com" "abc@example..com" "a(c)d,e:f;g<h>i[j\\k]l@example.com" "12345678901234567890123456789012345678901234567890123456789012345@example.com" "i.like.underscores@but_its_not_allowed_in_this_part" ""
                                  )
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      idx 0
                                    )
                                  )
                                   (
                                    begin (
                                      letrec (
                                        (
                                          loop11 (
                                            lambda (
                                              
                                            )
                                             (
                                              if (
                                                < idx (
                                                  _len email_tests
                                                )
                                              )
                                               (
                                                begin (
                                                  let (
                                                    (
                                                      email (
                                                        list-ref-safe email_tests idx
                                                      )
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      _display (
                                                        if (
                                                          string? (
                                                            to-str-space (
                                                              is_valid_email_address email
                                                            )
                                                          )
                                                        )
                                                         (
                                                          to-str-space (
                                                            is_valid_email_address email
                                                          )
                                                        )
                                                         (
                                                          to-str (
                                                            to-str-space (
                                                              is_valid_email_address email
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      newline
                                                    )
                                                     (
                                                      set! idx (
                                                        + idx 1
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop11
                                                )
                                              )
                                               (
                                                void
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop11
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end13 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur14 (
              quotient (
                * (
                  - end13 start12
                )
                 1000000
              )
               jps15
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur14
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
