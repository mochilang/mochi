;; Generated by Mochi Scheme transpiler on 2025-08-23 13:46 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi io))
(import (chibi filesystem))
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        ((list? x) (length x))
        ((vector? x) (vector-length x))
        (else 0)))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(define _dataDir "/workspace/mochi/tests/github/TheAlgorithms/Mochi/strings")
(define (_read_file path)
  (let ((p (if (file-exists? path)
               path
               (string-append _dataDir "/" path))))
    (with-exception-handler (lambda (e) "")
      (lambda ()
        (call-with-input-file p
          (lambda (in)
            (let loop ((lines '()))
              (let ((l (read-line in)))
                (if (eof-object? l)
                    (string-join (reverse lines) "\n")
                    (loop (cons l lines)))))))))))
(
  let (
    (
      start14 (
        current-jiffy
      )
    )
     (
      jps17 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        split s sep
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                current ""
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop1 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len s
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    ch (
                                      _substring s i (
                                        + i 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      _eq ch sep
                                    )
                                     (
                                      begin (
                                        set! res (
                                          append res (
                                            _list current
                                          )
                                        )
                                      )
                                       (
                                        set! current ""
                                      )
                                    )
                                     (
                                      begin (
                                        set! current (
                                          string-append current ch
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                               (
                                loop1
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop1
                    )
                  )
                   (
                    set! res (
                      append res (
                        _list current
                      )
                    )
                  )
                   res
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        insertion_sort arr
      )
       (
        let (
          (
            a arr
          )
        )
         (
          begin (
            let (
              (
                i 1
              )
            )
             (
              begin (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len a
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                key (
                                  list-ref-safe a i
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    j (
                                      - i 1
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop3 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              and (
                                                >= j 0
                                              )
                                               (
                                                string>? (
                                                  list-ref-safe a j
                                                )
                                                 key
                                              )
                                            )
                                             (
                                              begin (
                                                list-set-safe! a (
                                                  + j 1
                                                )
                                                 (
                                                  list-ref-safe a j
                                                )
                                              )
                                               (
                                                set! j (
                                                  - j 1
                                                )
                                              )
                                               (
                                                loop3
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop3
                                    )
                                  )
                                   (
                                    list-set-safe! a (
                                      + j 1
                                    )
                                     key
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               a
            )
          )
        )
      )
    )
     (
      define (
        sort_chars word
      )
       (
        let (
          (
            chars (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop4 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len word
                          )
                        )
                         (
                          begin (
                            set! chars (
                              append chars (
                                _list (
                                  _substring word i (
                                    + i 1
                                  )
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop4
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop4
                )
              )
               (
                set! chars (
                  insertion_sort chars
                )
              )
               (
                let (
                  (
                    res ""
                  )
                )
                 (
                  begin (
                    set! i 0
                  )
                   (
                    letrec (
                      (
                        loop5 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len chars
                              )
                            )
                             (
                              begin (
                                set! res (
                                  string-append res (
                                    list-ref-safe chars i
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop5
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop5
                    )
                  )
                   res
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        unique_sorted words
      )
       (
        let (
          (
            seen (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            let (
              (
                res (
                  _list
                )
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break7
                  )
                   (
                    letrec (
                      (
                        loop6 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    w (
                                      car xs
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      and (
                                        not (
                                          _eq w ""
                                        )
                                      )
                                       (
                                        not (
                                          cond (
                                            (
                                              string? seen
                                            )
                                             (
                                              if (
                                                string-contains seen w
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            (
                                              hash-table? seen
                                            )
                                             (
                                              if (
                                                hash-table-exists? seen w
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            else (
                                              if (
                                                member w seen
                                              )
                                               #t #f
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! res (
                                          append res (
                                            _list w
                                          )
                                        )
                                      )
                                       (
                                        hash-table-set! seen w #t
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                               (
                                loop6 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop6 words
                    )
                  )
                )
              )
               (
                set! res (
                  insertion_sort res
                )
              )
               res
            )
          )
        )
      )
    )
     (
      let (
        (
          word_by_signature (
            alist->hash-table (
              _list
            )
          )
        )
      )
       (
        begin (
          define (
            build_map words
          )
           (
            call/cc (
              lambda (
                break9
              )
               (
                letrec (
                  (
                    loop8 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                w (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    sig (
                                      sort_chars w
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        arr (
                                          _list
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          cond (
                                            (
                                              string? word_by_signature
                                            )
                                             (
                                              if (
                                                string-contains word_by_signature sig
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            (
                                              hash-table? word_by_signature
                                            )
                                             (
                                              if (
                                                hash-table-exists? word_by_signature sig
                                              )
                                               #t #f
                                            )
                                          )
                                           (
                                            else (
                                              if (
                                                member sig word_by_signature
                                              )
                                               #t #f
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            set! arr (
                                              hash-table-ref/default word_by_signature sig (
                                                void
                                              )
                                            )
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                       (
                                        set! arr (
                                          append arr (
                                            _list w
                                          )
                                        )
                                      )
                                       (
                                        hash-table-set! word_by_signature sig arr
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop8 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop8 words
                )
              )
            )
          )
        )
         (
          define (
            anagram my_word
          )
           (
            call/cc (
              lambda (
                ret10
              )
               (
                let (
                  (
                    sig (
                      sort_chars my_word
                    )
                  )
                )
                 (
                  begin (
                    if (
                      cond (
                        (
                          string? word_by_signature
                        )
                         (
                          if (
                            string-contains word_by_signature sig
                          )
                           #t #f
                        )
                      )
                       (
                        (
                          hash-table? word_by_signature
                        )
                         (
                          if (
                            hash-table-exists? word_by_signature sig
                          )
                           #t #f
                        )
                      )
                       (
                        else (
                          if (
                            member sig word_by_signature
                          )
                           #t #f
                        )
                      )
                    )
                     (
                      begin (
                        ret10 (
                          hash-table-ref/default word_by_signature sig (
                            void
                          )
                        )
                      )
                    )
                     (
                      void
                    )
                  )
                   (
                    ret10 (
                      _list
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            main
          )
           (
            let (
              (
                text (
                  _read_file "words.txt"
                )
              )
            )
             (
              begin (
                let (
                  (
                    lines (
                      split text "\n"
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        words (
                          unique_sorted lines
                        )
                      )
                    )
                     (
                      begin (
                        build_map words
                      )
                       (
                        call/cc (
                          lambda (
                            break12
                          )
                           (
                            letrec (
                              (
                                loop11 (
                                  lambda (
                                    xs
                                  )
                                   (
                                    if (
                                      null? xs
                                    )
                                     (
                                      void
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            w (
                                              car xs
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                anas (
                                                  anagram w
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                if (
                                                  > (
                                                    _len anas
                                                  )
                                                   1
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        line (
                                                          string-append w ":"
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            i 0
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            letrec (
                                                              (
                                                                loop13 (
                                                                  lambda (
                                                                    
                                                                  )
                                                                   (
                                                                    if (
                                                                      < i (
                                                                        _len anas
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        if (
                                                                          > i 0
                                                                        )
                                                                         (
                                                                          begin (
                                                                            set! line (
                                                                              string-append line ","
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          void
                                                                        )
                                                                      )
                                                                       (
                                                                        set! line (
                                                                          _add line (
                                                                            cond (
                                                                              (
                                                                                string? anas
                                                                              )
                                                                               (
                                                                                _substring anas i (
                                                                                  + i 1
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              (
                                                                                hash-table? anas
                                                                              )
                                                                               (
                                                                                hash-table-ref anas i
                                                                              )
                                                                            )
                                                                             (
                                                                              else (
                                                                                list-ref-safe anas i
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        set! i (
                                                                          + i 1
                                                                        )
                                                                      )
                                                                       (
                                                                        loop13
                                                                      )
                                                                    )
                                                                     (
                                                                      void
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              loop13
                                                            )
                                                          )
                                                           (
                                                            _display (
                                                              if (
                                                                string? line
                                                              )
                                                               line (
                                                                to-str line
                                                              )
                                                            )
                                                          )
                                                           (
                                                            newline
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop11 (
                                          cdr xs
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop11 words
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
         (
          main
        )
      )
    )
     (
      let (
        (
          end15 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur16 (
              quotient (
                * (
                  - end15 start14
                )
                 1000000
              )
               jps17
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur16
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
