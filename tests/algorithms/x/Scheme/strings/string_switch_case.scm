;; Generated by Mochi Scheme transpiler on 2025-08-23 13:46 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        ((list? x) (length x))
        ((vector? x) (vector-length x))
        (else 0)))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start15 (
        current-jiffy
      )
    )
     (
      jps18 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        split_words s
      )
       (
        let (
          (
            words (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                current ""
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break2
                  )
                   (
                    letrec (
                      (
                        loop1 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    ch (
                                      string (
                                        car xs
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      _eq ch " "
                                    )
                                     (
                                      begin (
                                        if (
                                          not (
                                            _eq current ""
                                          )
                                        )
                                         (
                                          begin (
                                            set! words (
                                              append words (
                                                _list current
                                              )
                                            )
                                          )
                                           (
                                            set! current ""
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! current (
                                          string-append current ch
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop1 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop1 (
                        string->list s
                      )
                    )
                  )
                )
              )
               (
                if (
                  not (
                    _eq current ""
                  )
                )
                 (
                  begin (
                    set! words (
                      append words (
                        _list current
                      )
                    )
                  )
                )
                 (
                  void
                )
              )
               words
            )
          )
        )
      )
    )
     (
      define (
        is_alnum c
      )
       (
        or (
          or (
            or (
              cond (
                (
                  string? "0123456789"
                )
                 (
                  if (
                    string-contains "0123456789" c
                  )
                   #t #f
                )
              )
               (
                (
                  hash-table? "0123456789"
                )
                 (
                  if (
                    hash-table-exists? "0123456789" c
                  )
                   #t #f
                )
              )
               (
                else (
                  if (
                    member c "0123456789"
                  )
                   #t #f
                )
              )
            )
             (
              cond (
                (
                  string? "abcdefghijklmnopqrstuvwxyz"
                )
                 (
                  if (
                    string-contains "abcdefghijklmnopqrstuvwxyz" c
                  )
                   #t #f
                )
              )
               (
                (
                  hash-table? "abcdefghijklmnopqrstuvwxyz"
                )
                 (
                  if (
                    hash-table-exists? "abcdefghijklmnopqrstuvwxyz" c
                  )
                   #t #f
                )
              )
               (
                else (
                  if (
                    member c "abcdefghijklmnopqrstuvwxyz"
                  )
                   #t #f
                )
              )
            )
          )
           (
            cond (
              (
                string? "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
              )
               (
                if (
                  string-contains "ABCDEFGHIJKLMNOPQRSTUVWXYZ" c
                )
                 #t #f
              )
            )
             (
              (
                hash-table? "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
              )
               (
                if (
                  hash-table-exists? "ABCDEFGHIJKLMNOPQRSTUVWXYZ" c
                )
                 #t #f
              )
            )
             (
              else (
                if (
                  member c "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                )
                 #t #f
              )
            )
          )
        )
         (
          _eq c " "
        )
      )
    )
     (
      define (
        split_input text
      )
       (
        let (
          (
            result (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                current ""
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break4
                  )
                   (
                    letrec (
                      (
                        loop3 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    ch (
                                      string (
                                        car xs
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      is_alnum ch
                                    )
                                     (
                                      begin (
                                        set! current (
                                          string-append current ch
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          not (
                                            _eq current ""
                                          )
                                        )
                                         (
                                          begin (
                                            set! result (
                                              append result (
                                                _list (
                                                  split_words current
                                                )
                                              )
                                            )
                                          )
                                           (
                                            set! current ""
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop3 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop3 (
                        string->list text
                      )
                    )
                  )
                )
              )
               (
                if (
                  not (
                    _eq current ""
                  )
                )
                 (
                  begin (
                    set! result (
                      append result (
                        _list (
                          split_words current
                        )
                      )
                    )
                  )
                )
                 (
                  void
                )
              )
               result
            )
          )
        )
      )
    )
     (
      define (
        capitalize word
      )
       (
        call/cc (
          lambda (
            ret5
          )
           (
            begin (
              if (
                _eq (
                  _len word
                )
                 0
              )
               (
                begin (
                  ret5 ""
                )
              )
               (
                void
              )
            )
             (
              if (
                _eq (
                  _len word
                )
                 1
              )
               (
                begin (
                  ret5 (
                    upper word
                  )
                )
              )
               (
                void
              )
            )
             (
              ret5 (
                string-append (
                  upper (
                    _substring word 0 1
                  )
                )
                 (
                  lower (
                    _substring word 1 (
                      string-length word
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        to_simple_case text
      )
       (
        let (
          (
            parts (
              split_input text
            )
          )
        )
         (
          begin (
            let (
              (
                res ""
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break7
                  )
                   (
                    letrec (
                      (
                        loop6 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    sub (
                                      car xs
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    call/cc (
                                      lambda (
                                        break9
                                      )
                                       (
                                        letrec (
                                          (
                                            loop8 (
                                              lambda (
                                                xs
                                              )
                                               (
                                                if (
                                                  null? xs
                                                )
                                                 (
                                                  void
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        w (
                                                          car xs
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! res (
                                                          string-append res (
                                                            capitalize w
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop8 (
                                                      cdr xs
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop8 sub
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop6 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop6 parts
                    )
                  )
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        to_complex_case text upper_flag sep
      )
       (
        let (
          (
            parts (
              split_input text
            )
          )
        )
         (
          begin (
            let (
              (
                res ""
              )
            )
             (
              begin (
                call/cc (
                  lambda (
                    break11
                  )
                   (
                    letrec (
                      (
                        loop10 (
                          lambda (
                            xs
                          )
                           (
                            if (
                              null? xs
                            )
                             (
                              void
                            )
                             (
                              begin (
                                let (
                                  (
                                    sub (
                                      car xs
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        first #t
                                      )
                                    )
                                     (
                                      begin (
                                        call/cc (
                                          lambda (
                                            break13
                                          )
                                           (
                                            letrec (
                                              (
                                                loop12 (
                                                  lambda (
                                                    xs
                                                  )
                                                   (
                                                    if (
                                                      null? xs
                                                    )
                                                     (
                                                      void
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            w (
                                                              car xs
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            let (
                                                              (
                                                                word (
                                                                  if upper_flag (
                                                                    upper w
                                                                  )
                                                                   (
                                                                    lower w
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                if first (
                                                                  begin (
                                                                    set! res (
                                                                      string-append res word
                                                                    )
                                                                  )
                                                                   (
                                                                    set! first #f
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    set! res (
                                                                      string-append (
                                                                        string-append res sep
                                                                      )
                                                                       word
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop12 (
                                                          cdr xs
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop12 sub
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop10 (
                                  cdr xs
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      loop10 parts
                    )
                  )
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        to_pascal_case text
      )
       (
        to_simple_case text
      )
    )
     (
      define (
        to_camel_case text
      )
       (
        call/cc (
          lambda (
            ret14
          )
           (
            let (
              (
                s (
                  to_simple_case text
                )
              )
            )
             (
              begin (
                if (
                  _eq (
                    _len s
                  )
                   0
                )
                 (
                  begin (
                    ret14 ""
                  )
                )
                 (
                  void
                )
              )
               (
                ret14 (
                  string-append (
                    lower (
                      if (
                        string? s
                      )
                       (
                        _substring s 0 1
                      )
                       (
                        take (
                          drop s 0
                        )
                         (
                          - 1 0
                        )
                      )
                    )
                  )
                   (
                    if (
                      string? s
                    )
                     (
                      _substring s 1 (
                        cond (
                          (
                            string? s
                          )
                           (
                            string-length s
                          )
                        )
                         (
                          (
                            hash-table? s
                          )
                           (
                            hash-table-size s
                          )
                        )
                         (
                          else (
                            length s
                          )
                        )
                      )
                    )
                     (
                      take (
                        drop s 1
                      )
                       (
                        - (
                          cond (
                            (
                              string? s
                            )
                             (
                              string-length s
                            )
                          )
                           (
                            (
                              hash-table? s
                            )
                             (
                              hash-table-size s
                            )
                          )
                           (
                            else (
                              length s
                            )
                          )
                        )
                         1
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        to_snake_case text upper_flag
      )
       (
        to_complex_case text upper_flag "_"
      )
    )
     (
      define (
        to_kebab_case text upper_flag
      )
       (
        to_complex_case text upper_flag "-"
      )
    )
     (
      _display (
        if (
          string? (
            to_pascal_case "one two 31235three4four"
          )
        )
         (
          to_pascal_case "one two 31235three4four"
        )
         (
          to-str (
            to_pascal_case "one two 31235three4four"
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to_camel_case "one two 31235three4four"
          )
        )
         (
          to_camel_case "one two 31235three4four"
        )
         (
          to-str (
            to_camel_case "one two 31235three4four"
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to_snake_case "one two 31235three4four" #t
          )
        )
         (
          to_snake_case "one two 31235three4four" #t
        )
         (
          to-str (
            to_snake_case "one two 31235three4four" #t
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to_snake_case "one two 31235three4four" #f
          )
        )
         (
          to_snake_case "one two 31235three4four" #f
        )
         (
          to-str (
            to_snake_case "one two 31235three4four" #f
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to_kebab_case "one two 31235three4four" #t
          )
        )
         (
          to_kebab_case "one two 31235three4four" #t
        )
         (
          to-str (
            to_kebab_case "one two 31235three4four" #t
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to_kebab_case "one two 31235three4four" #f
          )
        )
         (
          to_kebab_case "one two 31235three4four" #f
        )
         (
          to-str (
            to_kebab_case "one two 31235three4four" #f
          )
        )
      )
    )
     (
      newline
    )
     (
      let (
        (
          end16 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur17 (
              quotient (
                * (
                  - end16 start15
                )
                 1000000
              )
               jps18
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur17
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
