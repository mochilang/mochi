;; Generated by Mochi Scheme transpiler on 2025-08-23 13:46 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        ((list? x) (length x))
        ((vector? x) (vector-length x))
        (else 0)))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start20 (
        current-jiffy
      )
    )
     (
      jps23 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          LETTERS_AND_SPACE "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n"
        )
      )
       (
        begin (
          let (
            (
              LOWER "abcdefghijklmnopqrstuvwxyz"
            )
          )
           (
            begin (
              let (
                (
                  UPPER "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                )
              )
               (
                begin (
                  define (
                    to_upper s
                  )
                   (
                    let (
                      (
                        res ""
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            call/cc (
                              lambda (
                                break2
                              )
                               (
                                letrec (
                                  (
                                    loop1 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < i (
                                            _len s
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                c (
                                                  _substring s i (
                                                    + i 1
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    j 0
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        up c
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        call/cc (
                                                          lambda (
                                                            break4
                                                          )
                                                           (
                                                            letrec (
                                                              (
                                                                loop3 (
                                                                  lambda (
                                                                    
                                                                  )
                                                                   (
                                                                    if (
                                                                      < j (
                                                                        _len LOWER
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        if (
                                                                          _eq c (
                                                                            _substring LOWER j (
                                                                              + j 1
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            set! up (
                                                                              _substring UPPER j (
                                                                                + j 1
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            break4 (
                                                                              void
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          void
                                                                        )
                                                                      )
                                                                       (
                                                                        set! j (
                                                                          + j 1
                                                                        )
                                                                      )
                                                                       (
                                                                        loop3
                                                                      )
                                                                    )
                                                                     (
                                                                      void
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              loop3
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        set! res (
                                                          string-append res up
                                                        )
                                                      )
                                                       (
                                                        set! i (
                                                          + i 1
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop1
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop1
                                )
                              )
                            )
                          )
                           res
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    char_in chars c
                  )
                   (
                    call/cc (
                      lambda (
                        ret5
                      )
                       (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop6 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < i (
                                        _len chars
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          _eq (
                                            _substring chars i (
                                              + i 1
                                            )
                                          )
                                           c
                                        )
                                         (
                                          begin (
                                            ret5 #t
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                       (
                                        loop6
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop6
                            )
                          )
                           (
                            ret5 #f
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    remove_non_letters message
                  )
                   (
                    let (
                      (
                        res ""
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop7 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < i (
                                        _len message
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            ch (
                                              _substring message i (
                                                + i 1
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              char_in LETTERS_AND_SPACE ch
                                            )
                                             (
                                              begin (
                                                set! res (
                                                  string-append res ch
                                                )
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop7
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop7
                            )
                          )
                           res
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    split_spaces text
                  )
                   (
                    let (
                      (
                        res (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            current ""
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                i 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop8 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < i (
                                            _len text
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                ch (
                                                  _substring text i (
                                                    + i 1
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                if (
                                                  _eq ch " "
                                                )
                                                 (
                                                  begin (
                                                    set! res (
                                                      append res (
                                                        _list current
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! current ""
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    set! current (
                                                      string-append current ch
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                set! i (
                                                  + i 1
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop8
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop8
                                )
                              )
                               (
                                set! res (
                                  append res (
                                    _list current
                                  )
                                )
                              )
                               res
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  define (
                    load_dictionary
                  )
                   (
                    let (
                      (
                        words (
                          _list "HELLO" "WORLD" "HOW" "ARE" "YOU" "THE" "QUICK" "BROWN" "FOX" "JUMPS" "OVER" "LAZY" "DOG"
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            dict (
                              alist->hash-table (
                                _list
                              )
                            )
                          )
                        )
                         (
                          begin (
                            call/cc (
                              lambda (
                                break10
                              )
                               (
                                letrec (
                                  (
                                    loop9 (
                                      lambda (
                                        xs
                                      )
                                       (
                                        if (
                                          null? xs
                                        )
                                         (
                                          void
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                w (
                                                  car xs
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                hash-table-set! dict w #t
                                              )
                                            )
                                          )
                                           (
                                            loop9 (
                                              cdr xs
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop9 words
                                )
                              )
                            )
                          )
                           dict
                        )
                      )
                    )
                  )
                )
                 (
                  let (
                    (
                      ENGLISH_WORDS (
                        load_dictionary
                      )
                    )
                  )
                   (
                    begin (
                      define (
                        get_english_count message
                      )
                       (
                        call/cc (
                          lambda (
                            ret11
                          )
                           (
                            let (
                              (
                                upper (
                                  to_upper message
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    cleaned (
                                      remove_non_letters upper
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        possible (
                                          split_spaces cleaned
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            matches 0
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                total 0
                                              )
                                            )
                                             (
                                              begin (
                                                call/cc (
                                                  lambda (
                                                    break13
                                                  )
                                                   (
                                                    letrec (
                                                      (
                                                        loop12 (
                                                          lambda (
                                                            xs
                                                          )
                                                           (
                                                            if (
                                                              null? xs
                                                            )
                                                             (
                                                              void
                                                            )
                                                             (
                                                              begin (
                                                                let (
                                                                  (
                                                                    w (
                                                                      car xs
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    if (
                                                                      not (
                                                                        _eq w ""
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        set! total (
                                                                          + total 1
                                                                        )
                                                                      )
                                                                       (
                                                                        if (
                                                                          cond (
                                                                            (
                                                                              string? ENGLISH_WORDS
                                                                            )
                                                                             (
                                                                              if (
                                                                                string-contains ENGLISH_WORDS w
                                                                              )
                                                                               #t #f
                                                                            )
                                                                          )
                                                                           (
                                                                            (
                                                                              hash-table? ENGLISH_WORDS
                                                                            )
                                                                             (
                                                                              if (
                                                                                hash-table-exists? ENGLISH_WORDS w
                                                                              )
                                                                               #t #f
                                                                            )
                                                                          )
                                                                           (
                                                                            else (
                                                                              if (
                                                                                member w ENGLISH_WORDS
                                                                              )
                                                                               #t #f
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            set! matches (
                                                                              + matches 1
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          void
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      void
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                loop12 (
                                                                  cdr xs
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      loop12 possible
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                if (
                                                  _eq total 0
                                                )
                                                 (
                                                  begin (
                                                    ret11 0.0
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                               (
                                                ret11 (
                                                  _div (
                                                    let (
                                                      (
                                                        v14 matches
                                                      )
                                                    )
                                                     (
                                                      cond (
                                                        (
                                                          string? v14
                                                        )
                                                         (
                                                          string->number v14
                                                        )
                                                      )
                                                       (
                                                        (
                                                          boolean? v14
                                                        )
                                                         (
                                                          if v14 1.0 0.0
                                                        )
                                                      )
                                                       (
                                                        else (
                                                          exact->inexact v14
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    let (
                                                      (
                                                        v15 total
                                                      )
                                                    )
                                                     (
                                                      cond (
                                                        (
                                                          string? v15
                                                        )
                                                         (
                                                          string->number v15
                                                        )
                                                      )
                                                       (
                                                        (
                                                          boolean? v15
                                                        )
                                                         (
                                                          if v15 1.0 0.0
                                                        )
                                                      )
                                                       (
                                                        else (
                                                          exact->inexact v15
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      define (
                        is_english message word_percentage letter_percentage
                      )
                       (
                        let (
                          (
                            words_match (
                              _ge (
                                * (
                                  get_english_count message
                                )
                                 100.0
                              )
                               (
                                let (
                                  (
                                    v16 word_percentage
                                  )
                                )
                                 (
                                  cond (
                                    (
                                      string? v16
                                    )
                                     (
                                      string->number v16
                                    )
                                  )
                                   (
                                    (
                                      boolean? v16
                                    )
                                     (
                                      if v16 1.0 0.0
                                    )
                                  )
                                   (
                                    else (
                                      exact->inexact v16
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                num_letters (
                                  _len (
                                    remove_non_letters message
                                  )
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    letters_pct (
                                      if (
                                        _eq (
                                          _len message
                                        )
                                         0
                                      )
                                       0.0 (
                                        * (
                                          _div (
                                            let (
                                              (
                                                v17 num_letters
                                              )
                                            )
                                             (
                                              cond (
                                                (
                                                  string? v17
                                                )
                                                 (
                                                  string->number v17
                                                )
                                              )
                                               (
                                                (
                                                  boolean? v17
                                                )
                                                 (
                                                  if v17 1.0 0.0
                                                )
                                              )
                                               (
                                                else (
                                                  exact->inexact v17
                                                )
                                              )
                                            )
                                          )
                                           (
                                            let (
                                              (
                                                v18 (
                                                  _len message
                                                )
                                              )
                                            )
                                             (
                                              cond (
                                                (
                                                  string? v18
                                                )
                                                 (
                                                  string->number v18
                                                )
                                              )
                                               (
                                                (
                                                  boolean? v18
                                                )
                                                 (
                                                  if v18 1.0 0.0
                                                )
                                              )
                                               (
                                                else (
                                                  exact->inexact v18
                                                )
                                              )
                                            )
                                          )
                                        )
                                         100.0
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        letters_match (
                                          >= letters_pct (
                                            let (
                                              (
                                                v19 letter_percentage
                                              )
                                            )
                                             (
                                              cond (
                                                (
                                                  string? v19
                                                )
                                                 (
                                                  string->number v19
                                                )
                                              )
                                               (
                                                (
                                                  boolean? v19
                                                )
                                                 (
                                                  if v19 1.0 0.0
                                                )
                                              )
                                               (
                                                else (
                                                  exact->inexact v19
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        and words_match letters_match
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      _display (
                        if (
                          string? (
                            to-str-space (
                              is_english "Hello World" 20 85
                            )
                          )
                        )
                         (
                          to-str-space (
                            is_english "Hello World" 20 85
                          )
                        )
                         (
                          to-str (
                            to-str-space (
                              is_english "Hello World" 20 85
                            )
                          )
                        )
                      )
                    )
                     (
                      newline
                    )
                     (
                      _display (
                        if (
                          string? (
                            to-str-space (
                              is_english "llold HorWd" 20 85
                            )
                          )
                        )
                         (
                          to-str-space (
                            is_english "llold HorWd" 20 85
                          )
                        )
                         (
                          to-str (
                            to-str-space (
                              is_english "llold HorWd" 20 85
                            )
                          )
                        )
                      )
                    )
                     (
                      newline
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end21 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur22 (
              quotient (
                * (
                  - end21 start20
                )
                 1000000
              )
               jps23
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur22
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
