;; Generated by Mochi Scheme transpiler on 2025-08-11 17:23 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
        ((number? x)
         (if (integer? x)
             (number->string (inexact->exact x))
             (number->string x)))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start11 (
        current-jiffy
      )
    )
     (
      jps14 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          LETTERS "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        )
      )
       (
        begin (
          let (
            (
              LOWERCASE "abcdefghijklmnopqrstuvwxyz"
            )
          )
           (
            begin (
              define (
                char_to_lower c
              )
               (
                call/cc (
                  lambda (
                    ret1
                  )
                   (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop2 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len LETTERS
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      equal? c (
                                        _substring LETTERS i (
                                          + i 1
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        ret1 (
                                          _substring LOWERCASE i (
                                            + i 1
                                          )
                                        )
                                      )
                                    )
                                     '(
                                      
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop2
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop2
                        )
                      )
                       (
                        ret1 c
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                normalize input_str
              )
               (
                let (
                  (
                    res ""
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop3 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len input_str
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        ch (
                                          _substring input_str i (
                                            + i 1
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            lc (
                                              char_to_lower ch
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              and (
                                                string>=? lc "a"
                                              )
                                               (
                                                string<=? lc "z"
                                              )
                                            )
                                             (
                                              begin (
                                                set! res (
                                                  string-append res lc
                                                )
                                              )
                                            )
                                             '(
                                              
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop3
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop3
                        )
                      )
                       res
                    )
                  )
                )
              )
            )
             (
              define (
                can_string_be_rearranged_as_palindrome_counter input_str
              )
               (
                let (
                  (
                    s (
                      normalize input_str
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        freq (
                          alist->hash-table (
                            _list
                          )
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop4 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < i (
                                        _len s
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            ch (
                                              _substring s i (
                                                + i 1
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              cond (
                                                (
                                                  string? freq
                                                )
                                                 (
                                                  if (
                                                    string-contains freq ch
                                                  )
                                                   #t #f
                                                )
                                              )
                                               (
                                                (
                                                  hash-table? freq
                                                )
                                                 (
                                                  if (
                                                    hash-table-exists? freq ch
                                                  )
                                                   #t #f
                                                )
                                              )
                                               (
                                                else (
                                                  if (
                                                    member ch freq
                                                  )
                                                   #t #f
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                hash-table-set! freq ch (
                                                  + (
                                                    hash-table-ref/default freq ch '(
                                                      
                                                    )
                                                  )
                                                   1
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                hash-table-set! freq ch 1
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop4
                                      )
                                    )
                                     '(
                                      
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop4
                            )
                          )
                           (
                            let (
                              (
                                odd 0
                              )
                            )
                             (
                              begin (
                                call/cc (
                                  lambda (
                                    break6
                                  )
                                   (
                                    letrec (
                                      (
                                        loop5 (
                                          lambda (
                                            xs
                                          )
                                           (
                                            if (
                                              null? xs
                                            )
                                             '(
                                              
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    key (
                                                      car xs
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      not (
                                                        equal? (
                                                          _mod (
                                                            hash-table-ref/default freq key '(
                                                              
                                                            )
                                                          )
                                                           2
                                                        )
                                                         0
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! odd (
                                                          + odd 1
                                                        )
                                                      )
                                                    )
                                                     '(
                                                      
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                loop5 (
                                                  cdr xs
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop5 (
                                        hash-table-keys freq
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                < odd 2
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                can_string_be_rearranged_as_palindrome input_str
              )
               (
                call/cc (
                  lambda (
                    ret7
                  )
                   (
                    let (
                      (
                        s (
                          normalize input_str
                        )
                      )
                    )
                     (
                      begin (
                        if (
                          equal? (
                            _len s
                          )
                           0
                        )
                         (
                          begin (
                            ret7 #t
                          )
                        )
                         '(
                          
                        )
                      )
                       (
                        let (
                          (
                            character_freq_dict (
                              alist->hash-table (
                                _list
                              )
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                i 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop8 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < i (
                                            _len s
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                character (
                                                  _substring s i (
                                                    + i 1
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                if (
                                                  cond (
                                                    (
                                                      string? character_freq_dict
                                                    )
                                                     (
                                                      if (
                                                        string-contains character_freq_dict character
                                                      )
                                                       #t #f
                                                    )
                                                  )
                                                   (
                                                    (
                                                      hash-table? character_freq_dict
                                                    )
                                                     (
                                                      if (
                                                        hash-table-exists? character_freq_dict character
                                                      )
                                                       #t #f
                                                    )
                                                  )
                                                   (
                                                    else (
                                                      if (
                                                        member character character_freq_dict
                                                      )
                                                       #t #f
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    hash-table-set! character_freq_dict character (
                                                      + (
                                                        hash-table-ref/default character_freq_dict character '(
                                                          
                                                        )
                                                      )
                                                       1
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    hash-table-set! character_freq_dict character 1
                                                  )
                                                )
                                              )
                                               (
                                                set! i (
                                                  + i 1
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop8
                                          )
                                        )
                                         '(
                                          
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop8
                                )
                              )
                               (
                                let (
                                  (
                                    odd_char 0
                                  )
                                )
                                 (
                                  begin (
                                    call/cc (
                                      lambda (
                                        break10
                                      )
                                       (
                                        letrec (
                                          (
                                            loop9 (
                                              lambda (
                                                xs
                                              )
                                               (
                                                if (
                                                  null? xs
                                                )
                                                 '(
                                                  
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        character_key (
                                                          car xs
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            character_count (
                                                              hash-table-ref/default character_freq_dict character_key '(
                                                                
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            if (
                                                              not (
                                                                equal? (
                                                                  _mod character_count 2
                                                                )
                                                                 0
                                                              )
                                                            )
                                                             (
                                                              begin (
                                                                set! odd_char (
                                                                  + odd_char 1
                                                                )
                                                              )
                                                            )
                                                             '(
                                                              
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop9 (
                                                      cdr xs
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop9 (
                                            hash-table-keys character_freq_dict
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    ret7 (
                                      not (
                                        > odd_char 1
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              _display (
                if (
                  string? (
                    can_string_be_rearranged_as_palindrome_counter "Momo"
                  )
                )
                 (
                  can_string_be_rearranged_as_palindrome_counter "Momo"
                )
                 (
                  to-str (
                    can_string_be_rearranged_as_palindrome_counter "Momo"
                  )
                )
              )
            )
             (
              newline
            )
             (
              _display (
                if (
                  string? (
                    can_string_be_rearranged_as_palindrome_counter "Mother"
                  )
                )
                 (
                  can_string_be_rearranged_as_palindrome_counter "Mother"
                )
                 (
                  to-str (
                    can_string_be_rearranged_as_palindrome_counter "Mother"
                  )
                )
              )
            )
             (
              newline
            )
             (
              _display (
                if (
                  string? (
                    can_string_be_rearranged_as_palindrome "Momo"
                  )
                )
                 (
                  can_string_be_rearranged_as_palindrome "Momo"
                )
                 (
                  to-str (
                    can_string_be_rearranged_as_palindrome "Momo"
                  )
                )
              )
            )
             (
              newline
            )
             (
              _display (
                if (
                  string? (
                    can_string_be_rearranged_as_palindrome "Mother"
                  )
                )
                 (
                  can_string_be_rearranged_as_palindrome "Mother"
                )
                 (
                  to-str (
                    can_string_be_rearranged_as_palindrome "Mother"
                  )
                )
              )
            )
             (
              newline
            )
          )
        )
      )
    )
     (
      let (
        (
          end12 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur13 (
              quotient (
                * (
                  - end12 start11
                )
                 1000000
              )
               jps14
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur13
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
