;; Generated by Mochi Scheme transpiler on 2025-08-12 08:38 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
        ((number? x)
         (if (integer? x)
             (number->string (inexact->exact x))
             (number->string x)))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start34 (
        current-jiffy
      )
    )
     (
      jps37 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        int_to_string n
      )
       (
        call/cc (
          lambda (
            ret1
          )
           (
            begin (
              if (
                equal? n 0
              )
               (
                begin (
                  ret1 "0"
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  num n
                )
              )
               (
                begin (
                  let (
                    (
                      neg #f
                    )
                  )
                   (
                    begin (
                      if (
                        < num 0
                      )
                       (
                        begin (
                          set! neg #t
                        )
                         (
                          set! num (
                            - num
                          )
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          res ""
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop2 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    > num 0
                                  )
                                   (
                                    begin (
                                      let (
                                        (
                                          digit (
                                            _mod num 10
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          let (
                                            (
                                              ch (
                                                _substring "0123456789" digit (
                                                  + digit 1
                                                )
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              set! res (
                                                string-append ch res
                                              )
                                            )
                                             (
                                              set! num (
                                                _div num 10
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop2
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          if neg (
                            begin (
                              set! res (
                                string-append "-" res
                              )
                            )
                          )
                           (
                            void
                          )
                        )
                         (
                          ret1 res
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        float_to_string x dec
      )
       (
        let (
          (
            neg #f
          )
        )
         (
          begin (
            let (
              (
                num x
              )
            )
             (
              begin (
                if (
                  < num 0.0
                )
                 (
                  begin (
                    set! neg #t
                  )
                   (
                    set! num (
                      - num
                    )
                  )
                )
                 (
                  void
                )
              )
               (
                let (
                  (
                    int_part (
                      let (
                        (
                          v3 num
                        )
                      )
                       (
                        cond (
                          (
                            string? v3
                          )
                           (
                            inexact->exact (
                              _floor (
                                string->number v3
                              )
                            )
                          )
                        )
                         (
                          (
                            boolean? v3
                          )
                           (
                            if v3 1 0
                          )
                        )
                         (
                          else (
                            inexact->exact (
                              _floor v3
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        res (
                          int_to_string int_part
                        )
                      )
                    )
                     (
                      begin (
                        if (
                          > dec 0
                        )
                         (
                          begin (
                            set! res (
                              string-append res "."
                            )
                          )
                           (
                            let (
                              (
                                frac (
                                  - num (
                                    + 0.0 int_part
                                  )
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    i 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop4 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < i dec
                                            )
                                             (
                                              begin (
                                                set! frac (
                                                  * frac 10.0
                                                )
                                              )
                                               (
                                                let (
                                                  (
                                                    digit (
                                                      let (
                                                        (
                                                          v5 frac
                                                        )
                                                      )
                                                       (
                                                        cond (
                                                          (
                                                            string? v5
                                                          )
                                                           (
                                                            inexact->exact (
                                                              _floor (
                                                                string->number v5
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            boolean? v5
                                                          )
                                                           (
                                                            if v5 1 0
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            inexact->exact (
                                                              _floor v5
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    set! res (
                                                      string-append res (
                                                        _substring "0123456789" digit (
                                                          + digit 1
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! frac (
                                                      - frac (
                                                        + 0.0 digit
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! i (
                                                      + i 1
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                loop4
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop4
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          void
                        )
                      )
                       (
                        if neg (
                          begin (
                            set! res (
                              string-append "-" res
                            )
                          )
                        )
                         (
                          void
                        )
                      )
                       res
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        vector_component v i
      )
       (
        list-ref-safe v i
      )
    )
     (
      define (
        vector_str_int v
      )
       (
        let (
          (
            s "("
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop6 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len v
                          )
                        )
                         (
                          begin (
                            set! s (
                              string-append s (
                                int_to_string (
                                  list-ref-safe v i
                                )
                              )
                            )
                          )
                           (
                            if (
                              < (
                                + i 1
                              )
                               (
                                _len v
                              )
                            )
                             (
                              begin (
                                set! s (
                                  string-append s ","
                                )
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop6
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop6
                )
              )
               (
                set! s (
                  string-append s ")"
                )
              )
               s
            )
          )
        )
      )
    )
     (
      define (
        vector_str_float v dec
      )
       (
        let (
          (
            s "("
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop7 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len v
                          )
                        )
                         (
                          begin (
                            set! s (
                              string-append s (
                                float_to_string (
                                  list-ref-safe v i
                                )
                                 dec
                              )
                            )
                          )
                           (
                            if (
                              < (
                                + i 1
                              )
                               (
                                _len v
                              )
                            )
                             (
                              begin (
                                set! s (
                                  string-append s ","
                                )
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop7
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop7
                )
              )
               (
                set! s (
                  string-append s ")"
                )
              )
               s
            )
          )
        )
      )
    )
     (
      define (
        vector_add a b
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop8 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len a
                          )
                        )
                         (
                          begin (
                            set! res (
                              append res (
                                _list (
                                  + (
                                    list-ref-safe a i
                                  )
                                   (
                                    list-ref-safe b i
                                  )
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop8
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop8
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        vector_sub a b
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop9 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len a
                          )
                        )
                         (
                          begin (
                            set! res (
                              append res (
                                _list (
                                  - (
                                    list-ref-safe a i
                                  )
                                   (
                                    list-ref-safe b i
                                  )
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop9
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop9
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        vector_scalar_mul v s
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop10 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len v
                          )
                        )
                         (
                          begin (
                            set! res (
                              append res (
                                _list (
                                  * (
                                    + 0.0 (
                                      list-ref-safe v i
                                    )
                                  )
                                   s
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop10
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop10
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        vector_dot a b
      )
       (
        let (
          (
            sum 0
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop11 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len a
                          )
                        )
                         (
                          begin (
                            set! sum (
                              + sum (
                                * (
                                  list-ref-safe a i
                                )
                                 (
                                  list-ref-safe b i
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop11
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop11
                )
              )
               sum
            )
          )
        )
      )
    )
     (
      define (
        sqrt_newton x
      )
       (
        call/cc (
          lambda (
            ret12
          )
           (
            begin (
              if (
                equal? x 0.0
              )
               (
                begin (
                  ret12 0.0
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  low 0.0
                )
              )
               (
                begin (
                  let (
                    (
                      high x
                    )
                  )
                   (
                    begin (
                      if (
                        < x 1.0
                      )
                       (
                        begin (
                          set! high 1.0
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          mid 0.0
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              i 0
                            )
                          )
                           (
                            begin (
                              letrec (
                                (
                                  loop13 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        < i 40
                                      )
                                       (
                                        begin (
                                          set! mid (
                                            _div (
                                              + low high
                                            )
                                             2.0
                                          )
                                        )
                                         (
                                          if (
                                            _gt (
                                              * mid mid
                                            )
                                             x
                                          )
                                           (
                                            begin (
                                              set! high mid
                                            )
                                          )
                                           (
                                            begin (
                                              set! low mid
                                            )
                                          )
                                        )
                                         (
                                          set! i (
                                            + i 1
                                          )
                                        )
                                         (
                                          loop13
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop13
                              )
                            )
                             (
                              ret12 mid
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        euclidean_length v
      )
       (
        let (
          (
            sum 0.0
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop14 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len v
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                val (
                                  + 0.0 (
                                    list-ref-safe v i
                                  )
                                )
                              )
                            )
                             (
                              begin (
                                set! sum (
                                  _add sum (
                                    * val val
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                            )
                          )
                           (
                            loop14
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop14
                )
              )
               (
                sqrt_newton sum
              )
            )
          )
        )
      )
    )
     (
      define (
        zero_vector n
      )
       (
        let (
          (
            v (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop15 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i n
                        )
                         (
                          begin (
                            set! v (
                              append v (
                                _list 0
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop15
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop15
                )
              )
               v
            )
          )
        )
      )
    )
     (
      define (
        unit_basis_vector n idx
      )
       (
        let (
          (
            v (
              zero_vector n
            )
          )
        )
         (
          begin (
            list-set-safe! v idx 1
          )
           v
        )
      )
    )
     (
      define (
        axpy a x y
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop16 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len x
                          )
                        )
                         (
                          begin (
                            set! res (
                              append res (
                                _list (
                                  + (
                                    * a (
                                      list-ref-safe x i
                                    )
                                  )
                                   (
                                    list-ref-safe y i
                                  )
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop16
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop16
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        copy_vector x
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop17 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len x
                          )
                        )
                         (
                          begin (
                            set! res (
                              append res (
                                _list (
                                  list-ref-safe x i
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop17
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop17
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        change_component v idx val
      )
       (
        list-set-safe! v idx val
      )
    )
     (
      define (
        matrix_str m
      )
       (
        let (
          (
            s ""
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop18 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len m
                          )
                        )
                         (
                          begin (
                            set! s (
                              string-append s "|"
                            )
                          )
                           (
                            let (
                              (
                                j 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop19 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < j (
                                            _len (
                                              list-ref-safe m 0
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            set! s (
                                              string-append s (
                                                int_to_string (
                                                  cond (
                                                    (
                                                      string? (
                                                        list-ref-safe m i
                                                      )
                                                    )
                                                     (
                                                      _substring (
                                                        list-ref-safe m i
                                                      )
                                                       j (
                                                        + j 1
                                                      )
                                                    )
                                                  )
                                                   (
                                                    (
                                                      hash-table? (
                                                        list-ref-safe m i
                                                      )
                                                    )
                                                     (
                                                      hash-table-ref (
                                                        list-ref-safe m i
                                                      )
                                                       j
                                                    )
                                                  )
                                                   (
                                                    else (
                                                      list-ref-safe (
                                                        list-ref-safe m i
                                                      )
                                                       j
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            if (
                                              < (
                                                + j 1
                                              )
                                               (
                                                _len (
                                                  list-ref-safe m 0
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! s (
                                                  string-append s ","
                                                )
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                           (
                                            set! j (
                                              + j 1
                                            )
                                          )
                                           (
                                            loop19
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop19
                                )
                              )
                               (
                                set! s (
                                  string-append s "|\n"
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                            )
                          )
                           (
                            loop18
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop18
                )
              )
               s
            )
          )
        )
      )
    )
     (
      define (
        submatrix m row col
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop20 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len m
                          )
                        )
                         (
                          begin (
                            if (
                              not (
                                equal? i row
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    r (
                                      _list
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        j 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop21 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < j (
                                                    _len (
                                                      list-ref-safe m 0
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      not (
                                                        equal? j col
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! r (
                                                          append r (
                                                            _list (
                                                              cond (
                                                                (
                                                                  string? (
                                                                    list-ref-safe m i
                                                                  )
                                                                )
                                                                 (
                                                                  _substring (
                                                                    list-ref-safe m i
                                                                  )
                                                                   j (
                                                                    + j 1
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                (
                                                                  hash-table? (
                                                                    list-ref-safe m i
                                                                  )
                                                                )
                                                                 (
                                                                  hash-table-ref (
                                                                    list-ref-safe m i
                                                                  )
                                                                   j
                                                                )
                                                              )
                                                               (
                                                                else (
                                                                  list-ref-safe (
                                                                    list-ref-safe m i
                                                                  )
                                                                   j
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                   (
                                                    loop21
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop21
                                        )
                                      )
                                       (
                                        set! res (
                                          append res (
                                            _list r
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop20
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop20
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        determinant m
      )
       (
        call/cc (
          lambda (
            ret22
          )
           (
            let (
              (
                n (
                  _len m
                )
              )
            )
             (
              begin (
                if (
                  equal? n 1
                )
                 (
                  begin (
                    ret22 (
                      cond (
                        (
                          string? (
                            list-ref-safe m 0
                          )
                        )
                         (
                          _substring (
                            list-ref-safe m 0
                          )
                           0 (
                            + 0 1
                          )
                        )
                      )
                       (
                        (
                          hash-table? (
                            list-ref-safe m 0
                          )
                        )
                         (
                          hash-table-ref (
                            list-ref-safe m 0
                          )
                           0
                        )
                      )
                       (
                        else (
                          list-ref-safe (
                            list-ref-safe m 0
                          )
                           0
                        )
                      )
                    )
                  )
                )
                 (
                  void
                )
              )
               (
                if (
                  equal? n 2
                )
                 (
                  begin (
                    ret22 (
                      - (
                        * (
                          cond (
                            (
                              string? (
                                list-ref-safe m 0
                              )
                            )
                             (
                              _substring (
                                list-ref-safe m 0
                              )
                               0 (
                                + 0 1
                              )
                            )
                          )
                           (
                            (
                              hash-table? (
                                list-ref-safe m 0
                              )
                            )
                             (
                              hash-table-ref (
                                list-ref-safe m 0
                              )
                               0
                            )
                          )
                           (
                            else (
                              list-ref-safe (
                                list-ref-safe m 0
                              )
                               0
                            )
                          )
                        )
                         (
                          cond (
                            (
                              string? (
                                list-ref-safe m 1
                              )
                            )
                             (
                              _substring (
                                list-ref-safe m 1
                              )
                               1 (
                                + 1 1
                              )
                            )
                          )
                           (
                            (
                              hash-table? (
                                list-ref-safe m 1
                              )
                            )
                             (
                              hash-table-ref (
                                list-ref-safe m 1
                              )
                               1
                            )
                          )
                           (
                            else (
                              list-ref-safe (
                                list-ref-safe m 1
                              )
                               1
                            )
                          )
                        )
                      )
                       (
                        * (
                          cond (
                            (
                              string? (
                                list-ref-safe m 0
                              )
                            )
                             (
                              _substring (
                                list-ref-safe m 0
                              )
                               1 (
                                + 1 1
                              )
                            )
                          )
                           (
                            (
                              hash-table? (
                                list-ref-safe m 0
                              )
                            )
                             (
                              hash-table-ref (
                                list-ref-safe m 0
                              )
                               1
                            )
                          )
                           (
                            else (
                              list-ref-safe (
                                list-ref-safe m 0
                              )
                               1
                            )
                          )
                        )
                         (
                          cond (
                            (
                              string? (
                                list-ref-safe m 1
                              )
                            )
                             (
                              _substring (
                                list-ref-safe m 1
                              )
                               0 (
                                + 0 1
                              )
                            )
                          )
                           (
                            (
                              hash-table? (
                                list-ref-safe m 1
                              )
                            )
                             (
                              hash-table-ref (
                                list-ref-safe m 1
                              )
                               0
                            )
                          )
                           (
                            else (
                              list-ref-safe (
                                list-ref-safe m 1
                              )
                               0
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  void
                )
              )
               (
                let (
                  (
                    det 0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        c 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop23 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < c n
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        sub (
                                          submatrix m 0 c
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            sign 1
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              equal? (
                                                _mod c 2
                                              )
                                               1
                                            )
                                             (
                                              begin (
                                                set! sign (
                                                  - 1
                                                )
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                           (
                                            set! det (
                                              _add det (
                                                * (
                                                  * sign (
                                                    cond (
                                                      (
                                                        string? (
                                                          list-ref-safe m 0
                                                        )
                                                      )
                                                       (
                                                        _substring (
                                                          list-ref-safe m 0
                                                        )
                                                         c (
                                                          + c 1
                                                        )
                                                      )
                                                    )
                                                     (
                                                      (
                                                        hash-table? (
                                                          list-ref-safe m 0
                                                        )
                                                      )
                                                       (
                                                        hash-table-ref (
                                                          list-ref-safe m 0
                                                        )
                                                         c
                                                      )
                                                    )
                                                     (
                                                      else (
                                                        list-ref-safe (
                                                          list-ref-safe m 0
                                                        )
                                                         c
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  determinant sub
                                                )
                                              )
                                            )
                                          )
                                           (
                                            set! c (
                                              + c 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop23
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop23
                        )
                      )
                       (
                        ret22 det
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        matrix_minor m row col
      )
       (
        determinant (
          submatrix m row col
        )
      )
    )
     (
      define (
        matrix_cofactor m row col
      )
       (
        let (
          (
            sign 1
          )
        )
         (
          begin (
            if (
              equal? (
                _mod (
                  + row col
                )
                 2
              )
               1
            )
             (
              begin (
                set! sign (
                  - 1
                )
              )
            )
             (
              void
            )
          )
           (
            * sign (
              matrix_minor m row col
            )
          )
        )
      )
    )
     (
      define (
        matrix_mul_vector m v
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop24 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len m
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                sum 0
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    j 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop25 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < j (
                                                _len (
                                                  list-ref-safe m 0
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! sum (
                                                  + sum (
                                                    * (
                                                      cond (
                                                        (
                                                          string? (
                                                            list-ref-safe m i
                                                          )
                                                        )
                                                         (
                                                          _substring (
                                                            list-ref-safe m i
                                                          )
                                                           j (
                                                            + j 1
                                                          )
                                                        )
                                                      )
                                                       (
                                                        (
                                                          hash-table? (
                                                            list-ref-safe m i
                                                          )
                                                        )
                                                         (
                                                          hash-table-ref (
                                                            list-ref-safe m i
                                                          )
                                                           j
                                                        )
                                                      )
                                                       (
                                                        else (
                                                          list-ref-safe (
                                                            list-ref-safe m i
                                                          )
                                                           j
                                                        )
                                                      )
                                                    )
                                                     (
                                                      list-ref-safe v j
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                set! j (
                                                  + j 1
                                                )
                                              )
                                               (
                                                loop25
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop25
                                    )
                                  )
                                   (
                                    set! res (
                                      append res (
                                        _list sum
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop24
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop24
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        matrix_mul_scalar m s
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop26 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len m
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                row (
                                  _list
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    j 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop27 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < j (
                                                _len (
                                                  list-ref-safe m 0
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! row (
                                                  append row (
                                                    _list (
                                                      * (
                                                        cond (
                                                          (
                                                            string? (
                                                              list-ref-safe m i
                                                            )
                                                          )
                                                           (
                                                            _substring (
                                                              list-ref-safe m i
                                                            )
                                                             j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            hash-table? (
                                                              list-ref-safe m i
                                                            )
                                                          )
                                                           (
                                                            hash-table-ref (
                                                              list-ref-safe m i
                                                            )
                                                             j
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            list-ref-safe (
                                                              list-ref-safe m i
                                                            )
                                                             j
                                                          )
                                                        )
                                                      )
                                                       s
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                set! j (
                                                  + j 1
                                                )
                                              )
                                               (
                                                loop27
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop27
                                    )
                                  )
                                   (
                                    set! res (
                                      append res (
                                        _list row
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop26
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop26
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        matrix_change_component m i j val
      )
       (
        list-set-safe! (
          list-ref-safe m i
        )
         j val
      )
    )
     (
      define (
        matrix_component m i j
      )
       (
        cond (
          (
            string? (
              list-ref-safe m i
            )
          )
           (
            _substring (
              list-ref-safe m i
            )
             j (
              + j 1
            )
          )
        )
         (
          (
            hash-table? (
              list-ref-safe m i
            )
          )
           (
            hash-table-ref (
              list-ref-safe m i
            )
             j
          )
        )
         (
          else (
            list-ref-safe (
              list-ref-safe m i
            )
             j
          )
        )
      )
    )
     (
      define (
        matrix_add a b
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop28 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len a
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                row (
                                  _list
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    j 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop29 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < j (
                                                _len (
                                                  list-ref-safe a 0
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! row (
                                                  append row (
                                                    _list (
                                                      + (
                                                        cond (
                                                          (
                                                            string? (
                                                              list-ref-safe a i
                                                            )
                                                          )
                                                           (
                                                            _substring (
                                                              list-ref-safe a i
                                                            )
                                                             j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            hash-table? (
                                                              list-ref-safe a i
                                                            )
                                                          )
                                                           (
                                                            hash-table-ref (
                                                              list-ref-safe a i
                                                            )
                                                             j
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            list-ref-safe (
                                                              list-ref-safe a i
                                                            )
                                                             j
                                                          )
                                                        )
                                                      )
                                                       (
                                                        cond (
                                                          (
                                                            string? (
                                                              list-ref-safe b i
                                                            )
                                                          )
                                                           (
                                                            _substring (
                                                              list-ref-safe b i
                                                            )
                                                             j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            hash-table? (
                                                              list-ref-safe b i
                                                            )
                                                          )
                                                           (
                                                            hash-table-ref (
                                                              list-ref-safe b i
                                                            )
                                                             j
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            list-ref-safe (
                                                              list-ref-safe b i
                                                            )
                                                             j
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                set! j (
                                                  + j 1
                                                )
                                              )
                                               (
                                                loop29
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop29
                                    )
                                  )
                                   (
                                    set! res (
                                      append res (
                                        _list row
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop28
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop28
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        matrix_sub a b
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop30 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len a
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                row (
                                  _list
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    j 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop31 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < j (
                                                _len (
                                                  list-ref-safe a 0
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! row (
                                                  append row (
                                                    _list (
                                                      - (
                                                        cond (
                                                          (
                                                            string? (
                                                              list-ref-safe a i
                                                            )
                                                          )
                                                           (
                                                            _substring (
                                                              list-ref-safe a i
                                                            )
                                                             j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            hash-table? (
                                                              list-ref-safe a i
                                                            )
                                                          )
                                                           (
                                                            hash-table-ref (
                                                              list-ref-safe a i
                                                            )
                                                             j
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            list-ref-safe (
                                                              list-ref-safe a i
                                                            )
                                                             j
                                                          )
                                                        )
                                                      )
                                                       (
                                                        cond (
                                                          (
                                                            string? (
                                                              list-ref-safe b i
                                                            )
                                                          )
                                                           (
                                                            _substring (
                                                              list-ref-safe b i
                                                            )
                                                             j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            hash-table? (
                                                              list-ref-safe b i
                                                            )
                                                          )
                                                           (
                                                            hash-table-ref (
                                                              list-ref-safe b i
                                                            )
                                                             j
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            list-ref-safe (
                                                              list-ref-safe b i
                                                            )
                                                             j
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                set! j (
                                                  + j 1
                                                )
                                              )
                                               (
                                                loop31
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop31
                                    )
                                  )
                                   (
                                    set! res (
                                      append res (
                                        _list row
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop30
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop30
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        square_zero_matrix n
      )
       (
        let (
          (
            m (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop32 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i n
                        )
                         (
                          begin (
                            set! m (
                              append m (
                                _list (
                                  zero_vector n
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop32
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop32
                )
              )
               m
            )
          )
        )
      )
    )
     (
      define (
        assert_int name actual expected
      )
       (
        if (
          equal? actual expected
        )
         (
          begin (
            _display (
              if (
                string? (
                  string-append name " ok"
                )
              )
               (
                string-append name " ok"
              )
               (
                to-str (
                  string-append name " ok"
                )
              )
            )
          )
           (
            newline
          )
        )
         (
          begin (
            _display (
              if (
                string? (
                  string-append (
                    string-append (
                      string-append (
                        string-append name " fail "
                      )
                       (
                        int_to_string actual
                      )
                    )
                     " != "
                  )
                   (
                    int_to_string expected
                  )
                )
              )
               (
                string-append (
                  string-append (
                    string-append (
                      string-append name " fail "
                    )
                     (
                      int_to_string actual
                    )
                  )
                   " != "
                )
                 (
                  int_to_string expected
                )
              )
               (
                to-str (
                  string-append (
                    string-append (
                      string-append (
                        string-append name " fail "
                      )
                       (
                        int_to_string actual
                      )
                    )
                     " != "
                  )
                   (
                    int_to_string expected
                  )
                )
              )
            )
          )
           (
            newline
          )
        )
      )
    )
     (
      define (
        assert_str name actual expected
      )
       (
        if (
          equal? actual expected
        )
         (
          begin (
            _display (
              if (
                string? (
                  string-append name " ok"
                )
              )
               (
                string-append name " ok"
              )
               (
                to-str (
                  string-append name " ok"
                )
              )
            )
          )
           (
            newline
          )
        )
         (
          begin (
            _display (
              if (
                string? (
                  string-append name " fail"
                )
              )
               (
                string-append name " fail"
              )
               (
                to-str (
                  string-append name " fail"
                )
              )
            )
          )
           (
            newline
          )
           (
            _display (
              if (
                string? actual
              )
               actual (
                to-str actual
              )
            )
          )
           (
            newline
          )
           (
            _display (
              if (
                string? expected
              )
               expected (
                to-str expected
              )
            )
          )
           (
            newline
          )
        )
      )
    )
     (
      define (
        assert_float name actual expected eps
      )
       (
        let (
          (
            diff (
              - actual expected
            )
          )
        )
         (
          begin (
            if (
              < diff 0.0
            )
             (
              begin (
                set! diff (
                  - diff
                )
              )
            )
             (
              void
            )
          )
           (
            if (
              <= diff eps
            )
             (
              begin (
                _display (
                  if (
                    string? (
                      string-append name " ok"
                    )
                  )
                   (
                    string-append name " ok"
                  )
                   (
                    to-str (
                      string-append name " ok"
                    )
                  )
                )
              )
               (
                newline
              )
            )
             (
              begin (
                _display (
                  if (
                    string? (
                      string-append name " fail"
                    )
                  )
                   (
                    string-append name " fail"
                  )
                   (
                    to-str (
                      string-append name " fail"
                    )
                  )
                )
              )
               (
                newline
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          vx (
            _list 1 2 3
          )
        )
      )
       (
        begin (
          assert_int "component0" (
            vector_component vx 0
          )
           1
        )
         (
          assert_int "component2" (
            vector_component vx 2
          )
           3
        )
         (
          let (
            (
              vs (
                _list 0 0 0 0 0 1
              )
            )
          )
           (
            begin (
              assert_str "str_vector" (
                vector_str_int vs
              )
               "(0,0,0,0,0,1)"
            )
             (
              let (
                (
                  vsize (
                    _list 1 2 3 4
                  )
                )
              )
               (
                begin (
                  assert_int "size" (
                    _len vsize
                  )
                   4
                )
                 (
                  let (
                    (
                      va (
                        _list 1 2 3
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          vb (
                            _list 1 1 1
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              vsum (
                                vector_add va vb
                              )
                            )
                          )
                           (
                            begin (
                              assert_int "add0" (
                                vector_component vsum 0
                              )
                               2
                            )
                             (
                              assert_int "add1" (
                                vector_component vsum 1
                              )
                               3
                            )
                             (
                              assert_int "add2" (
                                vector_component vsum 2
                              )
                               4
                            )
                             (
                              let (
                                (
                                  vsub (
                                    vector_sub va vb
                                  )
                                )
                              )
                               (
                                begin (
                                  assert_int "sub0" (
                                    vector_component vsub 0
                                  )
                                   0
                                )
                                 (
                                  assert_int "sub1" (
                                    vector_component vsub 1
                                  )
                                   1
                                )
                                 (
                                  assert_int "sub2" (
                                    vector_component vsub 2
                                  )
                                   2
                                )
                                 (
                                  let (
                                    (
                                      vmul (
                                        vector_scalar_mul va 3.0
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      assert_str "scalar_mul" (
                                        vector_str_float vmul 1
                                      )
                                       "(3.0,6.0,9.0)"
                                    )
                                     (
                                      assert_int "dot_product" (
                                        vector_dot (
                                          _list 2 (
                                            - 1
                                          )
                                           4
                                        )
                                         (
                                          _list 1 (
                                            - 2
                                          )
                                           (
                                            - 1
                                          )
                                        )
                                      )
                                       0
                                    )
                                     (
                                      let (
                                        (
                                          zvec (
                                            zero_vector 10
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          let (
                                            (
                                              zstr (
                                                vector_str_int zvec
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  zcount 0
                                                )
                                              )
                                               (
                                                begin (
                                                  let (
                                                    (
                                                      zi 0
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      letrec (
                                                        (
                                                          loop33 (
                                                            lambda (
                                                              
                                                            )
                                                             (
                                                              if (
                                                                < zi (
                                                                  _len zstr
                                                                )
                                                              )
                                                               (
                                                                begin (
                                                                  if (
                                                                    equal? (
                                                                      _substring zstr zi (
                                                                        + zi 1
                                                                      )
                                                                    )
                                                                     "0"
                                                                  )
                                                                   (
                                                                    begin (
                                                                      set! zcount (
                                                                        + zcount 1
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    void
                                                                  )
                                                                )
                                                                 (
                                                                  set! zi (
                                                                    + zi 1
                                                                  )
                                                                )
                                                                 (
                                                                  loop33
                                                                )
                                                              )
                                                               (
                                                                void
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop33
                                                      )
                                                    )
                                                     (
                                                      assert_int "zero_vector" zcount 10
                                                    )
                                                     (
                                                      assert_str "unit_basis" (
                                                        vector_str_int (
                                                          unit_basis_vector 3 1
                                                        )
                                                      )
                                                       "(0,1,0)"
                                                    )
                                                     (
                                                      assert_str "axpy" (
                                                        vector_str_int (
                                                          axpy 2 (
                                                            _list 1 2 3
                                                          )
                                                           (
                                                            _list 1 0 1
                                                          )
                                                        )
                                                      )
                                                       "(3,4,7)"
                                                    )
                                                     (
                                                      let (
                                                        (
                                                          vcopy (
                                                            copy_vector (
                                                              _list 1 0 0 0 0 0
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        begin (
                                                          assert_str "copy" (
                                                            vector_str_int vcopy
                                                          )
                                                           "(1,0,0,0,0,0)"
                                                        )
                                                         (
                                                          let (
                                                            (
                                                              vchange (
                                                                _list 1 0 0
                                                              )
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              change_component vchange 0 0
                                                            )
                                                             (
                                                              change_component vchange 1 1
                                                            )
                                                             (
                                                              assert_str "change_component" (
                                                                vector_str_int vchange
                                                              )
                                                               "(0,1,0)"
                                                            )
                                                             (
                                                              let (
                                                                (
                                                                  ma (
                                                                    _list (
                                                                      _list 1 2 3
                                                                    )
                                                                     (
                                                                      _list 2 4 5
                                                                    )
                                                                     (
                                                                      _list 6 7 8
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                begin (
                                                                  assert_str "matrix_str" (
                                                                    matrix_str ma
                                                                  )
                                                                   "|1,2,3|\n|2,4,5|\n|6,7,8|\n"
                                                                )
                                                                 (
                                                                  assert_int "determinant" (
                                                                    determinant ma
                                                                  )
                                                                   (
                                                                    - 5
                                                                  )
                                                                )
                                                                 (
                                                                  let (
                                                                    (
                                                                      mb (
                                                                        _list (
                                                                          _list 1 2 3
                                                                        )
                                                                         (
                                                                          _list 4 5 6
                                                                        )
                                                                         (
                                                                          _list 7 8 9
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    begin (
                                                                      let (
                                                                        (
                                                                          mv (
                                                                            matrix_mul_vector mb (
                                                                              _list 1 2 3
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        begin (
                                                                          assert_str "matrix_vec_mul" (
                                                                            vector_str_int mv
                                                                          )
                                                                           "(14,32,50)"
                                                                        )
                                                                         (
                                                                          let (
                                                                            (
                                                                              msc (
                                                                                matrix_mul_scalar mb 2
                                                                              )
                                                                            )
                                                                          )
                                                                           (
                                                                            begin (
                                                                              assert_str "matrix_scalar_mul" (
                                                                                matrix_str msc
                                                                              )
                                                                               "|2,4,6|\n|8,10,12|\n|14,16,18|\n"
                                                                            )
                                                                             (
                                                                              let (
                                                                                (
                                                                                  mc (
                                                                                    _list (
                                                                                      _list 1 2 3
                                                                                    )
                                                                                     (
                                                                                      _list 2 4 5
                                                                                    )
                                                                                     (
                                                                                      _list 6 7 8
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                               (
                                                                                begin (
                                                                                  matrix_change_component mc 0 2 5
                                                                                )
                                                                                 (
                                                                                  assert_str "change_component_matrix" (
                                                                                    matrix_str mc
                                                                                  )
                                                                                   "|1,2,5|\n|2,4,5|\n|6,7,8|\n"
                                                                                )
                                                                                 (
                                                                                  assert_int "matrix_component" (
                                                                                    matrix_component mc 2 1
                                                                                  )
                                                                                   7
                                                                                )
                                                                                 (
                                                                                  let (
                                                                                    (
                                                                                      madd (
                                                                                        matrix_add (
                                                                                          _list (
                                                                                            _list 1 2 3
                                                                                          )
                                                                                           (
                                                                                            _list 2 4 5
                                                                                          )
                                                                                           (
                                                                                            _list 6 7 8
                                                                                          )
                                                                                        )
                                                                                         (
                                                                                          _list (
                                                                                            _list 1 2 7
                                                                                          )
                                                                                           (
                                                                                            _list 2 4 5
                                                                                          )
                                                                                           (
                                                                                            _list 6 7 10
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    begin (
                                                                                      assert_str "matrix_add" (
                                                                                        matrix_str madd
                                                                                      )
                                                                                       "|2,4,10|\n|4,8,10|\n|12,14,18|\n"
                                                                                    )
                                                                                     (
                                                                                      let (
                                                                                        (
                                                                                          msub (
                                                                                            matrix_sub (
                                                                                              _list (
                                                                                                _list 1 2 3
                                                                                              )
                                                                                               (
                                                                                                _list 2 4 5
                                                                                              )
                                                                                               (
                                                                                                _list 6 7 8
                                                                                              )
                                                                                            )
                                                                                             (
                                                                                              _list (
                                                                                                _list 1 2 7
                                                                                              )
                                                                                               (
                                                                                                _list 2 4 5
                                                                                              )
                                                                                               (
                                                                                                _list 6 7 10
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                       (
                                                                                        begin (
                                                                                          assert_str "matrix_sub" (
                                                                                            matrix_str msub
                                                                                          )
                                                                                           "|0,0,-4|\n|0,0,0|\n|0,0,-2|\n"
                                                                                        )
                                                                                         (
                                                                                          let (
                                                                                            (
                                                                                              mzero (
                                                                                                square_zero_matrix 5
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                           (
                                                                                            begin (
                                                                                              assert_str "square_zero_matrix" (
                                                                                                matrix_str mzero
                                                                                              )
                                                                                               "|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n"
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end35 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur36 (
              quotient (
                * (
                  - end35 start34
                )
                 1000000
              )
               jps37
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur36
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
