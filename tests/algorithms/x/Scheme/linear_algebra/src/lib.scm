;; Generated by Mochi Scheme transpiler on 2025-08-12 08:38 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
        ((number? x)
         (if (integer? x)
             (number->string (inexact->exact x))
             (number->string x)))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start41 (
        current-jiffy
      )
    )
     (
      jps44 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          PI 3.141592653589793
        )
      )
       (
        begin (
          let (
            (
              seed 123456789
            )
          )
           (
            begin (
              define (
                rand
              )
               (
                begin (
                  set! seed (
                    _mod (
                      + (
                        * seed 1103515245
                      )
                       12345
                    )
                     2147483648
                  )
                )
                 seed
              )
            )
             (
              define (
                random_int a b
              )
               (
                let (
                  (
                    r (
                      _mod (
                        rand
                      )
                       (
                        + (
                          - b a
                        )
                         1
                      )
                    )
                  )
                )
                 (
                  begin (
                    _add a r
                  )
                )
              )
            )
             (
              define (
                sqrtApprox x
              )
               (
                call/cc (
                  lambda (
                    ret1
                  )
                   (
                    begin (
                      if (
                        <= x 0.0
                      )
                       (
                        begin (
                          ret1 0.0
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          guess x
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              i 0
                            )
                          )
                           (
                            begin (
                              letrec (
                                (
                                  loop2 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        < i 20
                                      )
                                       (
                                        begin (
                                          set! guess (
                                            _div (
                                              _add guess (
                                                _div x guess
                                              )
                                            )
                                             2.0
                                          )
                                        )
                                         (
                                          set! i (
                                            + i 1
                                          )
                                        )
                                         (
                                          loop2
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop2
                              )
                            )
                             (
                              ret1 guess
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                arcsin_taylor x
              )
               (
                let (
                  (
                    term x
                  )
                )
                 (
                  begin (
                    let (
                      (
                        sum x
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            n 1
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop3 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < n 10
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            num (
                                              * (
                                                * (
                                                  * (
                                                    * (
                                                      - (
                                                        * 2.0 (
                                                          + 0.0 n
                                                        )
                                                      )
                                                       1.0
                                                    )
                                                     (
                                                      - (
                                                        * 2.0 (
                                                          + 0.0 n
                                                        )
                                                      )
                                                       1.0
                                                    )
                                                  )
                                                   x
                                                )
                                                 x
                                              )
                                               term
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                den (
                                                  * (
                                                    * 2.0 (
                                                      + 0.0 n
                                                    )
                                                  )
                                                   (
                                                    _add (
                                                      * 2.0 (
                                                        + 0.0 n
                                                      )
                                                    )
                                                     1.0
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! term (
                                                  _div num den
                                                )
                                              )
                                               (
                                                set! sum (
                                                  + sum term
                                                )
                                              )
                                               (
                                                set! n (
                                                  + n 1
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop3
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop3
                            )
                          )
                           sum
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                acos_taylor x
              )
               (
                - (
                  _div PI 2.0
                )
                 (
                  arcsin_taylor x
                )
              )
            )
             (
              define (
                vector_len v
              )
               (
                _len (
                  hash-table-ref v "components"
                )
              )
            )
             (
              define (
                vector_to_string v
              )
               (
                let (
                  (
                    s "("
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop4 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len (
                                      hash-table-ref v "components"
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    set! s (
                                      string-append s (
                                        to-str-space (
                                          list-ref-safe (
                                            hash-table-ref v "components"
                                          )
                                           i
                                        )
                                      )
                                    )
                                  )
                                   (
                                    if (
                                      < i (
                                        - (
                                          _len (
                                            hash-table-ref v "components"
                                          )
                                        )
                                         1
                                      )
                                    )
                                     (
                                      begin (
                                        set! s (
                                          string-append s ","
                                        )
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop4
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop4
                        )
                      )
                       (
                        set! s (
                          string-append s ")"
                        )
                      )
                       s
                    )
                  )
                )
              )
            )
             (
              define (
                vector_add a b
              )
               (
                call/cc (
                  lambda (
                    ret5
                  )
                   (
                    let (
                      (
                        size (
                          vector_len a
                        )
                      )
                    )
                     (
                      begin (
                        if (
                          not (
                            equal? size (
                              vector_len b
                            )
                          )
                        )
                         (
                          begin (
                            ret5 (
                              alist->hash-table (
                                _list (
                                  cons "components" (
                                    _list
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          void
                        )
                      )
                       (
                        let (
                          (
                            res (
                              _list
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                i 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop6 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          _lt i size
                                        )
                                         (
                                          begin (
                                            set! res (
                                              append res (
                                                _list (
                                                  + (
                                                    list-ref-safe (
                                                      hash-table-ref a "components"
                                                    )
                                                     i
                                                  )
                                                   (
                                                    list-ref-safe (
                                                      hash-table-ref b "components"
                                                    )
                                                     i
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                           (
                                            loop6
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop6
                                )
                              )
                               (
                                ret5 (
                                  alist->hash-table (
                                    _list (
                                      cons "components" res
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                vector_sub a b
              )
               (
                call/cc (
                  lambda (
                    ret7
                  )
                   (
                    let (
                      (
                        size (
                          vector_len a
                        )
                      )
                    )
                     (
                      begin (
                        if (
                          not (
                            equal? size (
                              vector_len b
                            )
                          )
                        )
                         (
                          begin (
                            ret7 (
                              alist->hash-table (
                                _list (
                                  cons "components" (
                                    _list
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          void
                        )
                      )
                       (
                        let (
                          (
                            res (
                              _list
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                i 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop8 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          _lt i size
                                        )
                                         (
                                          begin (
                                            set! res (
                                              append res (
                                                _list (
                                                  - (
                                                    list-ref-safe (
                                                      hash-table-ref a "components"
                                                    )
                                                     i
                                                  )
                                                   (
                                                    list-ref-safe (
                                                      hash-table-ref b "components"
                                                    )
                                                     i
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                           (
                                            loop8
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop8
                                )
                              )
                               (
                                ret7 (
                                  alist->hash-table (
                                    _list (
                                      cons "components" res
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                vector_eq a b
              )
               (
                call/cc (
                  lambda (
                    ret9
                  )
                   (
                    begin (
                      if (
                        not (
                          equal? (
                            vector_len a
                          )
                           (
                            vector_len b
                          )
                        )
                      )
                       (
                        begin (
                          ret9 #f
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          i 0
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop10 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    _lt i (
                                      vector_len a
                                    )
                                  )
                                   (
                                    begin (
                                      if (
                                        not (
                                          equal? (
                                            list-ref-safe (
                                              hash-table-ref a "components"
                                            )
                                             i
                                          )
                                           (
                                            list-ref-safe (
                                              hash-table-ref b "components"
                                            )
                                             i
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          ret9 #f
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 1
                                      )
                                    )
                                     (
                                      loop10
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop10
                          )
                        )
                         (
                          ret9 #t
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                vector_mul_scalar v s
              )
               (
                let (
                  (
                    res (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop11 (
                              lambda (
                                
                              )
                               (
                                if (
                                  _lt i (
                                    vector_len v
                                  )
                                )
                                 (
                                  begin (
                                    set! res (
                                      append res (
                                        _list (
                                          * (
                                            list-ref-safe (
                                              hash-table-ref v "components"
                                            )
                                             i
                                          )
                                           s
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop11
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop11
                        )
                      )
                       (
                        alist->hash-table (
                          _list (
                            cons "components" res
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                vector_dot a b
              )
               (
                call/cc (
                  lambda (
                    ret12
                  )
                   (
                    let (
                      (
                        size (
                          vector_len a
                        )
                      )
                    )
                     (
                      begin (
                        if (
                          not (
                            equal? size (
                              vector_len b
                            )
                          )
                        )
                         (
                          begin (
                            ret12 0.0
                          )
                        )
                         (
                          void
                        )
                      )
                       (
                        let (
                          (
                            sum 0.0
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                i 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop13 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          _lt i size
                                        )
                                         (
                                          begin (
                                            set! sum (
                                              _add sum (
                                                * (
                                                  list-ref-safe (
                                                    hash-table-ref a "components"
                                                  )
                                                   i
                                                )
                                                 (
                                                  list-ref-safe (
                                                    hash-table-ref b "components"
                                                  )
                                                   i
                                                )
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                           (
                                            loop13
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop13
                                )
                              )
                               (
                                ret12 sum
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                vector_copy v
              )
               (
                let (
                  (
                    res (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop14 (
                              lambda (
                                
                              )
                               (
                                if (
                                  _lt i (
                                    vector_len v
                                  )
                                )
                                 (
                                  begin (
                                    set! res (
                                      append res (
                                        _list (
                                          list-ref-safe (
                                            hash-table-ref v "components"
                                          )
                                           i
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop14
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop14
                        )
                      )
                       (
                        alist->hash-table (
                          _list (
                            cons "components" res
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                vector_component v idx
              )
               (
                list-ref-safe (
                  hash-table-ref v "components"
                )
                 idx
              )
            )
             (
              define (
                vector_change_component v pos value
              )
               (
                let (
                  (
                    comps (
                      hash-table-ref v "components"
                    )
                  )
                )
                 (
                  begin (
                    list-set-safe! comps pos value
                  )
                   (
                    alist->hash-table (
                      _list (
                        cons "components" comps
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                vector_euclidean_length v
              )
               (
                let (
                  (
                    sum 0.0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop15 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len (
                                      hash-table-ref v "components"
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    set! sum (
                                      _add sum (
                                        * (
                                          list-ref-safe (
                                            hash-table-ref v "components"
                                          )
                                           i
                                        )
                                         (
                                          list-ref-safe (
                                            hash-table-ref v "components"
                                          )
                                           i
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop15
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop15
                        )
                      )
                       (
                        let (
                          (
                            result (
                              sqrtApprox sum
                            )
                          )
                        )
                         (
                          begin result
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                vector_angle a b deg
              )
               (
                let (
                  (
                    num (
                      vector_dot a b
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        den (
                          * (
                            vector_euclidean_length a
                          )
                           (
                            vector_euclidean_length b
                          )
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            ang (
                              acos_taylor (
                                _div num den
                              )
                            )
                          )
                        )
                         (
                          begin (
                            if deg (
                              begin (
                                set! ang (
                                  _div (
                                    * ang 180.0
                                  )
                                   PI
                                )
                              )
                            )
                             (
                              void
                            )
                          )
                           ang
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                zero_vector d
              )
               (
                let (
                  (
                    res (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop16 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i d
                                )
                                 (
                                  begin (
                                    set! res (
                                      append res (
                                        _list 0.0
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop16
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop16
                        )
                      )
                       (
                        alist->hash-table (
                          _list (
                            cons "components" res
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                unit_basis_vector d pos
              )
               (
                let (
                  (
                    res (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop17 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i d
                                )
                                 (
                                  begin (
                                    if (
                                      equal? i pos
                                    )
                                     (
                                      begin (
                                        set! res (
                                          append res (
                                            _list 1.0
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! res (
                                          append res (
                                            _list 0.0
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop17
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop17
                        )
                      )
                       (
                        alist->hash-table (
                          _list (
                            cons "components" res
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                axpy s x y
              )
               (
                vector_add (
                  vector_mul_scalar x s
                )
                 y
              )
            )
             (
              define (
                random_vector n a b
              )
               (
                let (
                  (
                    res (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop18 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i n
                                )
                                 (
                                  begin (
                                    set! res (
                                      append res (
                                        _list (
                                          + 0.0 (
                                            random_int a b
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop18
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop18
                        )
                      )
                       (
                        alist->hash-table (
                          _list (
                            cons "components" res
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                matrix_to_string m
              )
               (
                let (
                  (
                    ans ""
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop19 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    hash-table-ref m "height"
                                  )
                                )
                                 (
                                  begin (
                                    set! ans (
                                      string-append ans "|"
                                    )
                                  )
                                   (
                                    let (
                                      (
                                        j 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop20 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < j (
                                                    hash-table-ref m "width"
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    set! ans (
                                                      string-append ans (
                                                        to-str-space (
                                                          cond (
                                                            (
                                                              string? (
                                                                list-ref-safe (
                                                                  hash-table-ref m "data"
                                                                )
                                                                 i
                                                              )
                                                            )
                                                             (
                                                              _substring (
                                                                list-ref-safe (
                                                                  hash-table-ref m "data"
                                                                )
                                                                 i
                                                              )
                                                               j (
                                                                + j 1
                                                              )
                                                            )
                                                          )
                                                           (
                                                            (
                                                              hash-table? (
                                                                list-ref-safe (
                                                                  hash-table-ref m "data"
                                                                )
                                                                 i
                                                              )
                                                            )
                                                             (
                                                              hash-table-ref (
                                                                list-ref-safe (
                                                                  hash-table-ref m "data"
                                                                )
                                                                 i
                                                              )
                                                               j
                                                            )
                                                          )
                                                           (
                                                            else (
                                                              list-ref-safe (
                                                                list-ref-safe (
                                                                  hash-table-ref m "data"
                                                                )
                                                                 i
                                                              )
                                                               j
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    if (
                                                      < j (
                                                        - (
                                                          hash-table-ref m "width"
                                                        )
                                                         1
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! ans (
                                                          string-append ans ","
                                                        )
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                   (
                                                    loop20
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop20
                                        )
                                      )
                                       (
                                        set! ans (
                                          string-append ans "|\n"
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop19
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop19
                        )
                      )
                       ans
                    )
                  )
                )
              )
            )
             (
              define (
                matrix_add a b
              )
               (
                call/cc (
                  lambda (
                    ret21
                  )
                   (
                    begin (
                      if (
                        or (
                          not (
                            equal? (
                              hash-table-ref a "width"
                            )
                             (
                              hash-table-ref b "width"
                            )
                          )
                        )
                         (
                          not (
                            equal? (
                              hash-table-ref a "height"
                            )
                             (
                              hash-table-ref b "height"
                            )
                          )
                        )
                      )
                       (
                        begin (
                          ret21 (
                            alist->hash-table (
                              _list (
                                cons "data" (
                                  _list
                                )
                              )
                               (
                                cons "width" 0
                              )
                               (
                                cons "height" 0
                              )
                            )
                          )
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          mat (
                            _list
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              i 0
                            )
                          )
                           (
                            begin (
                              letrec (
                                (
                                  loop22 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        < i (
                                          hash-table-ref a "height"
                                        )
                                      )
                                       (
                                        begin (
                                          let (
                                            (
                                              row (
                                                _list
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  j 0
                                                )
                                              )
                                               (
                                                begin (
                                                  letrec (
                                                    (
                                                      loop23 (
                                                        lambda (
                                                          
                                                        )
                                                         (
                                                          if (
                                                            < j (
                                                              hash-table-ref a "width"
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              set! row (
                                                                append row (
                                                                  _list (
                                                                    + (
                                                                      cond (
                                                                        (
                                                                          string? (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                        )
                                                                         (
                                                                          _substring (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j (
                                                                            + j 1
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        (
                                                                          hash-table? (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                        )
                                                                         (
                                                                          hash-table-ref (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j
                                                                        )
                                                                      )
                                                                       (
                                                                        else (
                                                                          list-ref-safe (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      cond (
                                                                        (
                                                                          string? (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                        )
                                                                         (
                                                                          _substring (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j (
                                                                            + j 1
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        (
                                                                          hash-table? (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                        )
                                                                         (
                                                                          hash-table-ref (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j
                                                                        )
                                                                      )
                                                                       (
                                                                        else (
                                                                          list-ref-safe (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              set! j (
                                                                + j 1
                                                              )
                                                            )
                                                             (
                                                              loop23
                                                            )
                                                          )
                                                           (
                                                            void
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop23
                                                  )
                                                )
                                                 (
                                                  set! mat (
                                                    append mat (
                                                      _list row
                                                    )
                                                  )
                                                )
                                                 (
                                                  set! i (
                                                    + i 1
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop22
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop22
                              )
                            )
                             (
                              ret21 (
                                alist->hash-table (
                                  _list (
                                    cons "data" mat
                                  )
                                   (
                                    cons "width" (
                                      hash-table-ref a "width"
                                    )
                                  )
                                   (
                                    cons "height" (
                                      hash-table-ref a "height"
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                matrix_sub a b
              )
               (
                call/cc (
                  lambda (
                    ret24
                  )
                   (
                    begin (
                      if (
                        or (
                          not (
                            equal? (
                              hash-table-ref a "width"
                            )
                             (
                              hash-table-ref b "width"
                            )
                          )
                        )
                         (
                          not (
                            equal? (
                              hash-table-ref a "height"
                            )
                             (
                              hash-table-ref b "height"
                            )
                          )
                        )
                      )
                       (
                        begin (
                          ret24 (
                            alist->hash-table (
                              _list (
                                cons "data" (
                                  _list
                                )
                              )
                               (
                                cons "width" 0
                              )
                               (
                                cons "height" 0
                              )
                            )
                          )
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          mat (
                            _list
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              i 0
                            )
                          )
                           (
                            begin (
                              letrec (
                                (
                                  loop25 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        < i (
                                          hash-table-ref a "height"
                                        )
                                      )
                                       (
                                        begin (
                                          let (
                                            (
                                              row (
                                                _list
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  j 0
                                                )
                                              )
                                               (
                                                begin (
                                                  letrec (
                                                    (
                                                      loop26 (
                                                        lambda (
                                                          
                                                        )
                                                         (
                                                          if (
                                                            < j (
                                                              hash-table-ref a "width"
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              set! row (
                                                                append row (
                                                                  _list (
                                                                    - (
                                                                      cond (
                                                                        (
                                                                          string? (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                        )
                                                                         (
                                                                          _substring (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j (
                                                                            + j 1
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        (
                                                                          hash-table? (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                        )
                                                                         (
                                                                          hash-table-ref (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j
                                                                        )
                                                                      )
                                                                       (
                                                                        else (
                                                                          list-ref-safe (
                                                                            list-ref-safe (
                                                                              hash-table-ref a "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      cond (
                                                                        (
                                                                          string? (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                        )
                                                                         (
                                                                          _substring (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j (
                                                                            + j 1
                                                                          )
                                                                        )
                                                                      )
                                                                       (
                                                                        (
                                                                          hash-table? (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                        )
                                                                         (
                                                                          hash-table-ref (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j
                                                                        )
                                                                      )
                                                                       (
                                                                        else (
                                                                          list-ref-safe (
                                                                            list-ref-safe (
                                                                              hash-table-ref b "data"
                                                                            )
                                                                             i
                                                                          )
                                                                           j
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              set! j (
                                                                + j 1
                                                              )
                                                            )
                                                             (
                                                              loop26
                                                            )
                                                          )
                                                           (
                                                            void
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop26
                                                  )
                                                )
                                                 (
                                                  set! mat (
                                                    append mat (
                                                      _list row
                                                    )
                                                  )
                                                )
                                                 (
                                                  set! i (
                                                    + i 1
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop25
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop25
                              )
                            )
                             (
                              ret24 (
                                alist->hash-table (
                                  _list (
                                    cons "data" mat
                                  )
                                   (
                                    cons "width" (
                                      hash-table-ref a "width"
                                    )
                                  )
                                   (
                                    cons "height" (
                                      hash-table-ref a "height"
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                matrix_mul_vector m v
              )
               (
                call/cc (
                  lambda (
                    ret27
                  )
                   (
                    begin (
                      if (
                        not (
                          equal? (
                            _len (
                              hash-table-ref v "components"
                            )
                          )
                           (
                            hash-table-ref m "width"
                          )
                        )
                      )
                       (
                        begin (
                          ret27 (
                            alist->hash-table (
                              _list (
                                cons "components" (
                                  _list
                                )
                              )
                            )
                          )
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          res (
                            zero_vector (
                              hash-table-ref m "height"
                            )
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              i 0
                            )
                          )
                           (
                            begin (
                              letrec (
                                (
                                  loop28 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        < i (
                                          hash-table-ref m "height"
                                        )
                                      )
                                       (
                                        begin (
                                          let (
                                            (
                                              sum 0.0
                                            )
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  j 0
                                                )
                                              )
                                               (
                                                begin (
                                                  letrec (
                                                    (
                                                      loop29 (
                                                        lambda (
                                                          
                                                        )
                                                         (
                                                          if (
                                                            < j (
                                                              hash-table-ref m "width"
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              set! sum (
                                                                _add sum (
                                                                  * (
                                                                    cond (
                                                                      (
                                                                        string? (
                                                                          list-ref-safe (
                                                                            hash-table-ref m "data"
                                                                          )
                                                                           i
                                                                        )
                                                                      )
                                                                       (
                                                                        _substring (
                                                                          list-ref-safe (
                                                                            hash-table-ref m "data"
                                                                          )
                                                                           i
                                                                        )
                                                                         j (
                                                                          + j 1
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      (
                                                                        hash-table? (
                                                                          list-ref-safe (
                                                                            hash-table-ref m "data"
                                                                          )
                                                                           i
                                                                        )
                                                                      )
                                                                       (
                                                                        hash-table-ref (
                                                                          list-ref-safe (
                                                                            hash-table-ref m "data"
                                                                          )
                                                                           i
                                                                        )
                                                                         j
                                                                      )
                                                                    )
                                                                     (
                                                                      else (
                                                                        list-ref-safe (
                                                                          list-ref-safe (
                                                                            hash-table-ref m "data"
                                                                          )
                                                                           i
                                                                        )
                                                                         j
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    list-ref-safe (
                                                                      hash-table-ref v "components"
                                                                    )
                                                                     j
                                                                  )
                                                                )
                                                              )
                                                            )
                                                             (
                                                              set! j (
                                                                + j 1
                                                              )
                                                            )
                                                             (
                                                              loop29
                                                            )
                                                          )
                                                           (
                                                            void
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop29
                                                  )
                                                )
                                                 (
                                                  set! res (
                                                    vector_change_component res i sum
                                                  )
                                                )
                                                 (
                                                  set! i (
                                                    + i 1
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop28
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop28
                              )
                            )
                             (
                              ret27 res
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                matrix_mul_scalar m s
              )
               (
                let (
                  (
                    mat (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop30 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    hash-table-ref m "height"
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        row (
                                          _list
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            j 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop31 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < j (
                                                        hash-table-ref m "width"
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        set! row (
                                                          append row (
                                                            _list (
                                                              * (
                                                                cond (
                                                                  (
                                                                    string? (
                                                                      list-ref-safe (
                                                                        hash-table-ref m "data"
                                                                      )
                                                                       i
                                                                    )
                                                                  )
                                                                   (
                                                                    _substring (
                                                                      list-ref-safe (
                                                                        hash-table-ref m "data"
                                                                      )
                                                                       i
                                                                    )
                                                                     j (
                                                                      + j 1
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  (
                                                                    hash-table? (
                                                                      list-ref-safe (
                                                                        hash-table-ref m "data"
                                                                      )
                                                                       i
                                                                    )
                                                                  )
                                                                   (
                                                                    hash-table-ref (
                                                                      list-ref-safe (
                                                                        hash-table-ref m "data"
                                                                      )
                                                                       i
                                                                    )
                                                                     j
                                                                  )
                                                                )
                                                                 (
                                                                  else (
                                                                    list-ref-safe (
                                                                      list-ref-safe (
                                                                        hash-table-ref m "data"
                                                                      )
                                                                       i
                                                                    )
                                                                     j
                                                                  )
                                                                )
                                                              )
                                                               s
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        set! j (
                                                          + j 1
                                                        )
                                                      )
                                                       (
                                                        loop31
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop31
                                            )
                                          )
                                           (
                                            set! mat (
                                              append mat (
                                                _list row
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop30
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop30
                        )
                      )
                       (
                        alist->hash-table (
                          _list (
                            cons "data" mat
                          )
                           (
                            cons "width" (
                              hash-table-ref m "width"
                            )
                          )
                           (
                            cons "height" (
                              hash-table-ref m "height"
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                matrix_component m x y
              )
               (
                cond (
                  (
                    string? (
                      list-ref-safe (
                        hash-table-ref m "data"
                      )
                       x
                    )
                  )
                   (
                    _substring (
                      list-ref-safe (
                        hash-table-ref m "data"
                      )
                       x
                    )
                     y (
                      + y 1
                    )
                  )
                )
                 (
                  (
                    hash-table? (
                      list-ref-safe (
                        hash-table-ref m "data"
                      )
                       x
                    )
                  )
                   (
                    hash-table-ref (
                      list-ref-safe (
                        hash-table-ref m "data"
                      )
                       x
                    )
                     y
                  )
                )
                 (
                  else (
                    list-ref-safe (
                      list-ref-safe (
                        hash-table-ref m "data"
                      )
                       x
                    )
                     y
                  )
                )
              )
            )
             (
              define (
                matrix_change_component m x y value
              )
               (
                let (
                  (
                    data (
                      hash-table-ref m "data"
                    )
                  )
                )
                 (
                  begin (
                    list-set-safe! (
                      list-ref-safe data x
                    )
                     y value
                  )
                   (
                    alist->hash-table (
                      _list (
                        cons "data" data
                      )
                       (
                        cons "width" (
                          hash-table-ref m "width"
                        )
                      )
                       (
                        cons "height" (
                          hash-table-ref m "height"
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                matrix_minor m x y
              )
               (
                call/cc (
                  lambda (
                    ret32
                  )
                   (
                    begin (
                      if (
                        not (
                          equal? (
                            hash-table-ref m "height"
                          )
                           (
                            hash-table-ref m "width"
                          )
                        )
                      )
                       (
                        begin (
                          ret32 0.0
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          minor (
                            _list
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              i 0
                            )
                          )
                           (
                            begin (
                              letrec (
                                (
                                  loop33 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        < i (
                                          hash-table-ref m "height"
                                        )
                                      )
                                       (
                                        begin (
                                          if (
                                            not (
                                              equal? i x
                                            )
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  row (
                                                    _list
                                                  )
                                                )
                                              )
                                               (
                                                begin (
                                                  let (
                                                    (
                                                      j 0
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      letrec (
                                                        (
                                                          loop34 (
                                                            lambda (
                                                              
                                                            )
                                                             (
                                                              if (
                                                                < j (
                                                                  hash-table-ref m "width"
                                                                )
                                                              )
                                                               (
                                                                begin (
                                                                  if (
                                                                    not (
                                                                      equal? j y
                                                                    )
                                                                  )
                                                                   (
                                                                    begin (
                                                                      set! row (
                                                                        append row (
                                                                          _list (
                                                                            cond (
                                                                              (
                                                                                string? (
                                                                                  list-ref-safe (
                                                                                    hash-table-ref m "data"
                                                                                  )
                                                                                   i
                                                                                )
                                                                              )
                                                                               (
                                                                                _substring (
                                                                                  list-ref-safe (
                                                                                    hash-table-ref m "data"
                                                                                  )
                                                                                   i
                                                                                )
                                                                                 j (
                                                                                  + j 1
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              (
                                                                                hash-table? (
                                                                                  list-ref-safe (
                                                                                    hash-table-ref m "data"
                                                                                  )
                                                                                   i
                                                                                )
                                                                              )
                                                                               (
                                                                                hash-table-ref (
                                                                                  list-ref-safe (
                                                                                    hash-table-ref m "data"
                                                                                  )
                                                                                   i
                                                                                )
                                                                                 j
                                                                              )
                                                                            )
                                                                             (
                                                                              else (
                                                                                list-ref-safe (
                                                                                  list-ref-safe (
                                                                                    hash-table-ref m "data"
                                                                                  )
                                                                                   i
                                                                                )
                                                                                 j
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    void
                                                                  )
                                                                )
                                                                 (
                                                                  set! j (
                                                                    + j 1
                                                                  )
                                                                )
                                                                 (
                                                                  loop34
                                                                )
                                                              )
                                                               (
                                                                void
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop34
                                                      )
                                                    )
                                                     (
                                                      set! minor (
                                                        append minor (
                                                          _list row
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            void
                                          )
                                        )
                                         (
                                          set! i (
                                            + i 1
                                          )
                                        )
                                         (
                                          loop33
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop33
                              )
                            )
                             (
                              let (
                                (
                                  sub (
                                    alist->hash-table (
                                      _list (
                                        cons "data" minor
                                      )
                                       (
                                        cons "width" (
                                          - (
                                            hash-table-ref m "width"
                                          )
                                           1
                                        )
                                      )
                                       (
                                        cons "height" (
                                          - (
                                            hash-table-ref m "height"
                                          )
                                           1
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                begin (
                                  ret32 (
                                    matrix_determinant sub
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                matrix_cofactor m x y
              )
               (
                let (
                  (
                    sign (
                      if (
                        equal? (
                          _mod (
                            + x y
                          )
                           2
                        )
                         0
                      )
                       1.0 (
                        - 1.0
                      )
                    )
                  )
                )
                 (
                  begin (
                    * sign (
                      matrix_minor m x y
                    )
                  )
                )
              )
            )
             (
              define (
                matrix_determinant m
              )
               (
                call/cc (
                  lambda (
                    ret35
                  )
                   (
                    begin (
                      if (
                        not (
                          equal? (
                            hash-table-ref m "height"
                          )
                           (
                            hash-table-ref m "width"
                          )
                        )
                      )
                       (
                        begin (
                          ret35 0.0
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      if (
                        equal? (
                          hash-table-ref m "height"
                        )
                         0
                      )
                       (
                        begin (
                          ret35 0.0
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      if (
                        equal? (
                          hash-table-ref m "height"
                        )
                         1
                      )
                       (
                        begin (
                          ret35 (
                            cond (
                              (
                                string? (
                                  list-ref-safe (
                                    hash-table-ref m "data"
                                  )
                                   0
                                )
                              )
                               (
                                _substring (
                                  list-ref-safe (
                                    hash-table-ref m "data"
                                  )
                                   0
                                )
                                 0 (
                                  + 0 1
                                )
                              )
                            )
                             (
                              (
                                hash-table? (
                                  list-ref-safe (
                                    hash-table-ref m "data"
                                  )
                                   0
                                )
                              )
                               (
                                hash-table-ref (
                                  list-ref-safe (
                                    hash-table-ref m "data"
                                  )
                                   0
                                )
                                 0
                              )
                            )
                             (
                              else (
                                list-ref-safe (
                                  list-ref-safe (
                                    hash-table-ref m "data"
                                  )
                                   0
                                )
                                 0
                              )
                            )
                          )
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      if (
                        equal? (
                          hash-table-ref m "height"
                        )
                         2
                      )
                       (
                        begin (
                          ret35 (
                            - (
                              * (
                                cond (
                                  (
                                    string? (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                  )
                                   (
                                    _substring (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                     0 (
                                      + 0 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                  )
                                   (
                                    hash-table-ref (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                     0
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                     0
                                  )
                                )
                              )
                               (
                                cond (
                                  (
                                    string? (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                  )
                                   (
                                    _substring (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                     1 (
                                      + 1 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                  )
                                   (
                                    hash-table-ref (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                     1
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                     1
                                  )
                                )
                              )
                            )
                             (
                              * (
                                cond (
                                  (
                                    string? (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                  )
                                   (
                                    _substring (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                     1 (
                                      + 1 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                  )
                                   (
                                    hash-table-ref (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                     1
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       0
                                    )
                                     1
                                  )
                                )
                              )
                               (
                                cond (
                                  (
                                    string? (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                  )
                                   (
                                    _substring (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                     0 (
                                      + 0 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                  )
                                   (
                                    hash-table-ref (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                     0
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe (
                                      list-ref-safe (
                                        hash-table-ref m "data"
                                      )
                                       1
                                    )
                                     0
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          sum 0.0
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              y 0
                            )
                          )
                           (
                            begin (
                              letrec (
                                (
                                  loop36 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        < y (
                                          hash-table-ref m "width"
                                        )
                                      )
                                       (
                                        begin (
                                          set! sum (
                                            _add sum (
                                              * (
                                                cond (
                                                  (
                                                    string? (
                                                      list-ref-safe (
                                                        hash-table-ref m "data"
                                                      )
                                                       0
                                                    )
                                                  )
                                                   (
                                                    _substring (
                                                      list-ref-safe (
                                                        hash-table-ref m "data"
                                                      )
                                                       0
                                                    )
                                                     y (
                                                      + y 1
                                                    )
                                                  )
                                                )
                                                 (
                                                  (
                                                    hash-table? (
                                                      list-ref-safe (
                                                        hash-table-ref m "data"
                                                      )
                                                       0
                                                    )
                                                  )
                                                   (
                                                    hash-table-ref (
                                                      list-ref-safe (
                                                        hash-table-ref m "data"
                                                      )
                                                       0
                                                    )
                                                     y
                                                  )
                                                )
                                                 (
                                                  else (
                                                    list-ref-safe (
                                                      list-ref-safe (
                                                        hash-table-ref m "data"
                                                      )
                                                       0
                                                    )
                                                     y
                                                  )
                                                )
                                              )
                                               (
                                                matrix_cofactor m 0 y
                                              )
                                            )
                                          )
                                        )
                                         (
                                          set! y (
                                            + y 1
                                          )
                                        )
                                         (
                                          loop36
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop36
                              )
                            )
                             (
                              ret35 sum
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                square_zero_matrix n
              )
               (
                let (
                  (
                    mat (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop37 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i n
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        row (
                                          _list
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            j 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop38 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < j n
                                                    )
                                                     (
                                                      begin (
                                                        set! row (
                                                          append row (
                                                            _list 0.0
                                                          )
                                                        )
                                                      )
                                                       (
                                                        set! j (
                                                          + j 1
                                                        )
                                                      )
                                                       (
                                                        loop38
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop38
                                            )
                                          )
                                           (
                                            set! mat (
                                              append mat (
                                                _list row
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop37
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop37
                        )
                      )
                       (
                        alist->hash-table (
                          _list (
                            cons "data" mat
                          )
                           (
                            cons "width" n
                          )
                           (
                            cons "height" n
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                random_matrix w h a b
              )
               (
                let (
                  (
                    mat (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop39 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i h
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        row (
                                          _list
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            j 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop40 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < j w
                                                    )
                                                     (
                                                      begin (
                                                        set! row (
                                                          append row (
                                                            _list (
                                                              + 0.0 (
                                                                random_int a b
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        set! j (
                                                          + j 1
                                                        )
                                                      )
                                                       (
                                                        loop40
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop40
                                            )
                                          )
                                           (
                                            set! mat (
                                              append mat (
                                                _list row
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop39
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop39
                        )
                      )
                       (
                        alist->hash-table (
                          _list (
                            cons "data" mat
                          )
                           (
                            cons "width" w
                          )
                           (
                            cons "height" h
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                main
              )
               (
                let (
                  (
                    v1 (
                      alist->hash-table (
                        _list (
                          cons "components" (
                            _list 1.0 2.0 3.0
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        v2 (
                          alist->hash-table (
                            _list (
                              cons "components" (
                                _list 4.0 5.0 6.0
                              )
                            )
                          )
                        )
                      )
                    )
                     (
                      begin (
                        _display (
                          if (
                            string? (
                              vector_to_string (
                                vector_add v1 v2
                              )
                            )
                          )
                           (
                            vector_to_string (
                              vector_add v1 v2
                            )
                          )
                           (
                            to-str (
                              vector_to_string (
                                vector_add v1 v2
                              )
                            )
                          )
                        )
                      )
                       (
                        newline
                      )
                       (
                        _display (
                          if (
                            string? (
                              to-str-space (
                                vector_dot v1 v2
                              )
                            )
                          )
                           (
                            to-str-space (
                              vector_dot v1 v2
                            )
                          )
                           (
                            to-str (
                              to-str-space (
                                vector_dot v1 v2
                              )
                            )
                          )
                        )
                      )
                       (
                        newline
                      )
                       (
                        _display (
                          if (
                            string? (
                              to-str-space (
                                vector_euclidean_length v1
                              )
                            )
                          )
                           (
                            to-str-space (
                              vector_euclidean_length v1
                            )
                          )
                           (
                            to-str (
                              to-str-space (
                                vector_euclidean_length v1
                              )
                            )
                          )
                        )
                      )
                       (
                        newline
                      )
                       (
                        let (
                          (
                            m (
                              alist->hash-table (
                                _list (
                                  cons "data" (
                                    _list (
                                      _list 1.0 2.0
                                    )
                                     (
                                      _list 3.0 4.0
                                    )
                                  )
                                )
                                 (
                                  cons "width" 2
                                )
                                 (
                                  cons "height" 2
                                )
                              )
                            )
                          )
                        )
                         (
                          begin (
                            _display (
                              if (
                                string? (
                                  to-str-space (
                                    matrix_determinant m
                                  )
                                )
                              )
                               (
                                to-str-space (
                                  matrix_determinant m
                                )
                              )
                               (
                                to-str (
                                  to-str-space (
                                    matrix_determinant m
                                  )
                                )
                              )
                            )
                          )
                           (
                            newline
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              main
            )
          )
        )
      )
    )
     (
      let (
        (
          end42 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur43 (
              quotient (
                * (
                  - end42 start41
                )
                 1000000
              )
               jps44
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur43
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
