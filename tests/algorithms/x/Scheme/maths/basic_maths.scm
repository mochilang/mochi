;; Generated by Mochi Scheme transpiler on 2025-08-11 18:13 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
        ((number? x)
         (if (integer? x)
             (number->string (inexact->exact x))
             (number->string x)))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start15 (
        current-jiffy
      )
    )
     (
      jps18 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        pow_int base exp
      )
       (
        let (
          (
            result 1
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop1 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i exp
                        )
                         (
                          begin (
                            set! result (
                              * result base
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop1
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop1
                )
              )
               result
            )
          )
        )
      )
    )
     (
      define (
        prime_factors n
      )
       (
        begin (
          if (
            <= n 0
          )
           (
            begin (
              panic "Only positive integers have prime factors"
            )
          )
           '(
            
          )
        )
         (
          let (
            (
              num n
            )
          )
           (
            begin (
              let (
                (
                  pf (
                    _list
                  )
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop2 (
                        lambda (
                          
                        )
                         (
                          if (
                            equal? (
                              _mod num 2
                            )
                             0
                          )
                           (
                            begin (
                              set! pf (
                                append pf (
                                  _list 2
                                )
                              )
                            )
                             (
                              set! num (
                                _div num 2
                              )
                            )
                             (
                              loop2
                            )
                          )
                           '(
                            
                          )
                        )
                      )
                    )
                  )
                   (
                    loop2
                  )
                )
                 (
                  let (
                    (
                      i 3
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop3 (
                            lambda (
                              
                            )
                             (
                              if (
                                <= (
                                  * i i
                                )
                                 num
                              )
                               (
                                begin (
                                  letrec (
                                    (
                                      loop4 (
                                        lambda (
                                          
                                        )
                                         (
                                          if (
                                            equal? (
                                              _mod num i
                                            )
                                             0
                                          )
                                           (
                                            begin (
                                              set! pf (
                                                append pf (
                                                  _list i
                                                )
                                              )
                                            )
                                             (
                                              set! num (
                                                _div num i
                                              )
                                            )
                                             (
                                              loop4
                                            )
                                          )
                                           '(
                                            
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop4
                                  )
                                )
                                 (
                                  set! i (
                                    + i 2
                                  )
                                )
                                 (
                                  loop3
                                )
                              )
                               '(
                                
                              )
                            )
                          )
                        )
                      )
                       (
                        loop3
                      )
                    )
                     (
                      if (
                        > num 2
                      )
                       (
                        begin (
                          set! pf (
                            append pf (
                              _list num
                            )
                          )
                        )
                      )
                       '(
                        
                      )
                    )
                     pf
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        number_of_divisors n
      )
       (
        begin (
          if (
            <= n 0
          )
           (
            begin (
              panic "Only positive numbers are accepted"
            )
          )
           '(
            
          )
        )
         (
          let (
            (
              num n
            )
          )
           (
            begin (
              let (
                (
                  div 1
                )
              )
               (
                begin (
                  let (
                    (
                      temp 1
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop5 (
                            lambda (
                              
                            )
                             (
                              if (
                                equal? (
                                  _mod num 2
                                )
                                 0
                              )
                               (
                                begin (
                                  set! temp (
                                    + temp 1
                                  )
                                )
                                 (
                                  set! num (
                                    _div num 2
                                  )
                                )
                                 (
                                  loop5
                                )
                              )
                               '(
                                
                              )
                            )
                          )
                        )
                      )
                       (
                        loop5
                      )
                    )
                     (
                      set! div (
                        * div temp
                      )
                    )
                     (
                      let (
                        (
                          i 3
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop6 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    <= (
                                      * i i
                                    )
                                     num
                                  )
                                   (
                                    begin (
                                      set! temp 1
                                    )
                                     (
                                      letrec (
                                        (
                                          loop7 (
                                            lambda (
                                              
                                            )
                                             (
                                              if (
                                                equal? (
                                                  _mod num i
                                                )
                                                 0
                                              )
                                               (
                                                begin (
                                                  set! temp (
                                                    + temp 1
                                                  )
                                                )
                                                 (
                                                  set! num (
                                                    _div num i
                                                  )
                                                )
                                                 (
                                                  loop7
                                                )
                                              )
                                               '(
                                                
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop7
                                      )
                                    )
                                     (
                                      set! div (
                                        * div temp
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 2
                                      )
                                    )
                                     (
                                      loop6
                                    )
                                  )
                                   '(
                                    
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop6
                          )
                        )
                         (
                          if (
                            > num 1
                          )
                           (
                            begin (
                              set! div (
                                * div 2
                              )
                            )
                          )
                           '(
                            
                          )
                        )
                         div
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        sum_of_divisors n
      )
       (
        begin (
          if (
            <= n 0
          )
           (
            begin (
              panic "Only positive numbers are accepted"
            )
          )
           '(
            
          )
        )
         (
          let (
            (
              num n
            )
          )
           (
            begin (
              let (
                (
                  s 1
                )
              )
               (
                begin (
                  let (
                    (
                      temp 1
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop8 (
                            lambda (
                              
                            )
                             (
                              if (
                                equal? (
                                  _mod num 2
                                )
                                 0
                              )
                               (
                                begin (
                                  set! temp (
                                    + temp 1
                                  )
                                )
                                 (
                                  set! num (
                                    _div num 2
                                  )
                                )
                                 (
                                  loop8
                                )
                              )
                               '(
                                
                              )
                            )
                          )
                        )
                      )
                       (
                        loop8
                      )
                    )
                     (
                      if (
                        > temp 1
                      )
                       (
                        begin (
                          set! s (
                            * s (
                              _div (
                                - (
                                  pow_int 2 temp
                                )
                                 1
                              )
                               (
                                - 2 1
                              )
                            )
                          )
                        )
                      )
                       '(
                        
                      )
                    )
                     (
                      let (
                        (
                          i 3
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop9 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    <= (
                                      * i i
                                    )
                                     num
                                  )
                                   (
                                    begin (
                                      set! temp 1
                                    )
                                     (
                                      letrec (
                                        (
                                          loop10 (
                                            lambda (
                                              
                                            )
                                             (
                                              if (
                                                equal? (
                                                  _mod num i
                                                )
                                                 0
                                              )
                                               (
                                                begin (
                                                  set! temp (
                                                    + temp 1
                                                  )
                                                )
                                                 (
                                                  set! num (
                                                    _div num i
                                                  )
                                                )
                                                 (
                                                  loop10
                                                )
                                              )
                                               '(
                                                
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop10
                                      )
                                    )
                                     (
                                      if (
                                        > temp 1
                                      )
                                       (
                                        begin (
                                          set! s (
                                            * s (
                                              _div (
                                                - (
                                                  pow_int i temp
                                                )
                                                 1
                                              )
                                               (
                                                - i 1
                                              )
                                            )
                                          )
                                        )
                                      )
                                       '(
                                        
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 2
                                      )
                                    )
                                     (
                                      loop9
                                    )
                                  )
                                   '(
                                    
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop9
                          )
                        )
                         s
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        contains arr x
      )
       (
        call/cc (
          lambda (
            ret11
          )
           (
            let (
              (
                idx 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop12 (
                      lambda (
                        
                      )
                       (
                        if (
                          < idx (
                            _len arr
                          )
                        )
                         (
                          begin (
                            if (
                              equal? (
                                list-ref-safe arr idx
                              )
                               x
                            )
                             (
                              begin (
                                ret11 #t
                              )
                            )
                             '(
                              
                            )
                          )
                           (
                            set! idx (
                              + idx 1
                            )
                          )
                           (
                            loop12
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop12
                )
              )
               (
                ret11 #f
              )
            )
          )
        )
      )
    )
     (
      define (
        unique arr
      )
       (
        let (
          (
            result (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                idx 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop13 (
                      lambda (
                        
                      )
                       (
                        if (
                          < idx (
                            _len arr
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                v (
                                  list-ref-safe arr idx
                                )
                              )
                            )
                             (
                              begin (
                                if (
                                  not (
                                    contains result v
                                  )
                                )
                                 (
                                  begin (
                                    set! result (
                                      append result (
                                        _list v
                                      )
                                    )
                                  )
                                )
                                 '(
                                  
                                )
                              )
                               (
                                set! idx (
                                  + idx 1
                                )
                              )
                            )
                          )
                           (
                            loop13
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop13
                )
              )
               result
            )
          )
        )
      )
    )
     (
      define (
        euler_phi n
      )
       (
        begin (
          if (
            <= n 0
          )
           (
            begin (
              panic "Only positive numbers are accepted"
            )
          )
           '(
            
          )
        )
         (
          let (
            (
              s n
            )
          )
           (
            begin (
              let (
                (
                  factors (
                    unique (
                      prime_factors n
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      idx 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop14 (
                            lambda (
                              
                            )
                             (
                              if (
                                < idx (
                                  _len factors
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      x (
                                        cond (
                                          (
                                            string? factors
                                          )
                                           (
                                            _substring factors idx (
                                              + idx 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? factors
                                          )
                                           (
                                            hash-table-ref factors idx
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe factors idx
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      set! s (
                                        * (
                                          _div s x
                                        )
                                         (
                                          - x 1
                                        )
                                      )
                                    )
                                     (
                                      set! idx (
                                        + idx 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop14
                                )
                              )
                               '(
                                
                              )
                            )
                          )
                        )
                      )
                       (
                        loop14
                      )
                    )
                     s
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              prime_factors 100
            )
          )
        )
         (
          to-str-space (
            prime_factors 100
          )
        )
         (
          to-str (
            to-str-space (
              prime_factors 100
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              number_of_divisors 100
            )
          )
        )
         (
          to-str-space (
            number_of_divisors 100
          )
        )
         (
          to-str (
            to-str-space (
              number_of_divisors 100
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              sum_of_divisors 100
            )
          )
        )
         (
          to-str-space (
            sum_of_divisors 100
          )
        )
         (
          to-str (
            to-str-space (
              sum_of_divisors 100
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              euler_phi 100
            )
          )
        )
         (
          to-str-space (
            euler_phi 100
          )
        )
         (
          to-str (
            to-str-space (
              euler_phi 100
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      let (
        (
          end16 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur17 (
              quotient (
                * (
                  - end16 start15
                )
                 1000000
              )
               jps18
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur17
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
