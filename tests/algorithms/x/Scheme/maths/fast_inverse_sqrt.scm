;; Generated by Mochi Scheme transpiler on 2025-08-16 12:36 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start19 (
        current-jiffy
      )
    )
     (
      jps22 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        pow2_int n
      )
       (
        let (
          (
            result 1
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop1 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i n
                        )
                         (
                          begin (
                            set! result (
                              * result 2
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop1
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop1
                )
              )
               result
            )
          )
        )
      )
    )
     (
      define (
        pow2_float n
      )
       (
        let (
          (
            result 1.0
          )
        )
         (
          begin (
            if (
              >= n 0
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop2 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i n
                            )
                             (
                              begin (
                                set! result (
                                  * result 2.0
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop2
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop2
                    )
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        m (
                          - 0 n
                        )
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop3 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i m
                                )
                                 (
                                  begin (
                                    set! result (
                                      _div result 2.0
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop3
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop3
                        )
                      )
                    )
                  )
                )
              )
            )
          )
           result
        )
      )
    )
     (
      define (
        lshift num k
      )
       (
        let (
          (
            result num
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop4 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i k
                        )
                         (
                          begin (
                            set! result (
                              * result 2
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop4
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop4
                )
              )
               result
            )
          )
        )
      )
    )
     (
      define (
        rshift num k
      )
       (
        let (
          (
            result num
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop5 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i k
                        )
                         (
                          begin (
                            set! result (
                              _div (
                                - result (
                                  _mod result 2
                                )
                              )
                               2
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop5
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop5
                )
              )
               result
            )
          )
        )
      )
    )
     (
      define (
        log2_floor x
      )
       (
        let (
          (
            n x
          )
        )
         (
          begin (
            let (
              (
                e 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop6 (
                      lambda (
                        
                      )
                       (
                        if (
                          >= n 2.0
                        )
                         (
                          begin (
                            set! n (
                              _div n 2.0
                            )
                          )
                           (
                            set! e (
                              + e 1
                            )
                          )
                           (
                            loop6
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop6
                )
              )
               (
                letrec (
                  (
                    loop7 (
                      lambda (
                        
                      )
                       (
                        if (
                          < n 1.0
                        )
                         (
                          begin (
                            set! n (
                              * n 2.0
                            )
                          )
                           (
                            set! e (
                              - e 1
                            )
                          )
                           (
                            loop7
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop7
                )
              )
               e
            )
          )
        )
      )
    )
     (
      define (
        float_to_bits x
      )
       (
        let (
          (
            num x
          )
        )
         (
          begin (
            let (
              (
                sign 0
              )
            )
             (
              begin (
                if (
                  < num 0.0
                )
                 (
                  begin (
                    set! sign 1
                  )
                   (
                    set! num (
                      - num
                    )
                  )
                )
                 (
                  void
                )
              )
               (
                let (
                  (
                    exp (
                      log2_floor num
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        pow (
                          pow2_float exp
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            normalized (
                              _div num pow
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                frac (
                                  - normalized 1.0
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    mantissa (
                                      let (
                                        (
                                          v8 (
                                            * frac (
                                              pow2_float 23
                                            )
                                          )
                                        )
                                      )
                                       (
                                        cond (
                                          (
                                            string? v8
                                          )
                                           (
                                            inexact->exact (
                                              _floor (
                                                string->number v8
                                              )
                                            )
                                          )
                                        )
                                         (
                                          (
                                            boolean? v8
                                          )
                                           (
                                            if v8 1 0
                                          )
                                        )
                                         (
                                          else (
                                            inexact->exact (
                                              _floor v8
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        exp_bits (
                                          _add exp 127
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        _add (
                                          _add (
                                            lshift sign 31
                                          )
                                           (
                                            lshift exp_bits 23
                                          )
                                        )
                                         mantissa
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        bits_to_float bits
      )
       (
        let (
          (
            sign_bit (
              _mod (
                rshift bits 31
              )
               2
            )
          )
        )
         (
          begin (
            let (
              (
                sign 1.0
              )
            )
             (
              begin (
                if (
                  equal? sign_bit 1
                )
                 (
                  begin (
                    set! sign (
                      - 1.0
                    )
                  )
                )
                 (
                  void
                )
              )
               (
                let (
                  (
                    exp_bits (
                      _mod (
                        rshift bits 23
                      )
                       256
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        exp (
                          - exp_bits 127
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            mantissa_bits (
                              _mod bits (
                                pow2_int 23
                              )
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                mantissa (
                                  _add 1.0 (
                                    _div (
                                      let (
                                        (
                                          v9 mantissa_bits
                                        )
                                      )
                                       (
                                        cond (
                                          (
                                            string? v9
                                          )
                                           (
                                            string->number v9
                                          )
                                        )
                                         (
                                          (
                                            boolean? v9
                                          )
                                           (
                                            if v9 1.0 0.0
                                          )
                                        )
                                         (
                                          else (
                                            exact->inexact v9
                                          )
                                        )
                                      )
                                    )
                                     (
                                      pow2_float 23
                                    )
                                  )
                                )
                              )
                            )
                             (
                              begin (
                                * (
                                  * sign mantissa
                                )
                                 (
                                  pow2_float exp
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        absf x
      )
       (
        call/cc (
          lambda (
            ret10
          )
           (
            begin (
              if (
                < x 0.0
              )
               (
                begin (
                  ret10 (
                    - x
                  )
                )
              )
               (
                void
              )
            )
             (
              ret10 x
            )
          )
        )
      )
    )
     (
      define (
        sqrtApprox x
      )
       (
        call/cc (
          lambda (
            ret11
          )
           (
            begin (
              if (
                <= x 0.0
              )
               (
                begin (
                  ret11 0.0
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  guess (
                    _div x 2.0
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop12 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i 20
                              )
                               (
                                begin (
                                  set! guess (
                                    _div (
                                      _add guess (
                                        _div x guess
                                      )
                                    )
                                     2.0
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                                 (
                                  loop12
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop12
                      )
                    )
                     (
                      ret11 guess
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        is_close a b rel_tol
      )
       (
        _le (
          absf (
            - a b
          )
        )
         (
          * rel_tol (
            absf b
          )
        )
      )
    )
     (
      define (
        fast_inverse_sqrt number
      )
       (
        begin (
          if (
            <= number 0.0
          )
           (
            begin (
              panic "Input must be a positive number."
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              i (
                float_to_bits number
              )
            )
          )
           (
            begin (
              let (
                (
                  magic 1597463007
                )
              )
               (
                begin (
                  let (
                    (
                      y_bits (
                        - magic (
                          rshift i 1
                        )
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          y (
                            bits_to_float y_bits
                          )
                        )
                      )
                       (
                        begin (
                          set! y (
                            * y (
                              - 1.5 (
                                * (
                                  * (
                                    * 0.5 number
                                  )
                                   y
                                )
                                 y
                              )
                            )
                          )
                        )
                         y
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        test_fast_inverse_sqrt
      )
       (
        begin (
          if (
            _gt (
              absf (
                - (
                  fast_inverse_sqrt 10.0
                )
                 0.3156857923527257
              )
            )
             0.0001
          )
           (
            begin (
              panic "fast_inverse_sqrt(10) failed"
            )
          )
           (
            void
          )
        )
         (
          if (
            _gt (
              absf (
                - (
                  fast_inverse_sqrt 4.0
                )
                 0.49915357479239103
              )
            )
             0.0001
          )
           (
            begin (
              panic "fast_inverse_sqrt(4) failed"
            )
          )
           (
            void
          )
        )
         (
          if (
            _gt (
              absf (
                - (
                  fast_inverse_sqrt 4.1
                )
                 0.4932849504615651
              )
            )
             0.0001
          )
           (
            begin (
              panic "fast_inverse_sqrt(4.1) failed"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              i 50
            )
          )
           (
            begin (
              letrec (
                (
                  loop13 (
                    lambda (
                      
                    )
                     (
                      if (
                        < i 60
                      )
                       (
                        begin (
                          let (
                            (
                              y (
                                fast_inverse_sqrt (
                                  let (
                                    (
                                      v14 i
                                    )
                                  )
                                   (
                                    cond (
                                      (
                                        string? v14
                                      )
                                       (
                                        string->number v14
                                      )
                                    )
                                     (
                                      (
                                        boolean? v14
                                      )
                                       (
                                        if v14 1.0 0.0
                                      )
                                    )
                                     (
                                      else (
                                        exact->inexact v14
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  actual (
                                    _div 1.0 (
                                      sqrtApprox (
                                        let (
                                          (
                                            v15 i
                                          )
                                        )
                                         (
                                          cond (
                                            (
                                              string? v15
                                            )
                                             (
                                              string->number v15
                                            )
                                          )
                                           (
                                            (
                                              boolean? v15
                                            )
                                             (
                                              if v15 1.0 0.0
                                            )
                                          )
                                           (
                                            else (
                                              exact->inexact v15
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                begin (
                                  if (
                                    not (
                                      is_close y actual 0.00132
                                    )
                                  )
                                   (
                                    begin (
                                      panic "relative error too high"
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          loop13
                        )
                      )
                       (
                        void
                      )
                    )
                  )
                )
              )
               (
                loop13
              )
            )
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        begin (
          test_fast_inverse_sqrt
        )
         (
          let (
            (
              i 5
            )
          )
           (
            begin (
              letrec (
                (
                  loop16 (
                    lambda (
                      
                    )
                     (
                      if (
                        <= i 100
                      )
                       (
                        begin (
                          let (
                            (
                              diff (
                                - (
                                  _div 1.0 (
                                    sqrtApprox (
                                      let (
                                        (
                                          v17 i
                                        )
                                      )
                                       (
                                        cond (
                                          (
                                            string? v17
                                          )
                                           (
                                            string->number v17
                                          )
                                        )
                                         (
                                          (
                                            boolean? v17
                                          )
                                           (
                                            if v17 1.0 0.0
                                          )
                                        )
                                         (
                                          else (
                                            exact->inexact v17
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  fast_inverse_sqrt (
                                    let (
                                      (
                                        v18 i
                                      )
                                    )
                                     (
                                      cond (
                                        (
                                          string? v18
                                        )
                                         (
                                          string->number v18
                                        )
                                      )
                                       (
                                        (
                                          boolean? v18
                                        )
                                         (
                                          if v18 1.0 0.0
                                        )
                                      )
                                       (
                                        else (
                                          exact->inexact v18
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            begin (
                              _display (
                                if (
                                  string? (
                                    string-append (
                                      string-append (
                                        to-str-space i
                                      )
                                       ": "
                                    )
                                     (
                                      to-str-space diff
                                    )
                                  )
                                )
                                 (
                                  string-append (
                                    string-append (
                                      to-str-space i
                                    )
                                     ": "
                                  )
                                   (
                                    to-str-space diff
                                  )
                                )
                                 (
                                  to-str (
                                    string-append (
                                      string-append (
                                        to-str-space i
                                      )
                                       ": "
                                    )
                                     (
                                      to-str-space diff
                                    )
                                  )
                                )
                              )
                            )
                             (
                              newline
                            )
                             (
                              set! i (
                                + i 5
                              )
                            )
                          )
                        )
                         (
                          loop16
                        )
                      )
                       (
                        void
                      )
                    )
                  )
                )
              )
               (
                loop16
              )
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end20 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur21 (
              quotient (
                * (
                  - end20 start19
                )
                 1000000
              )
               jps22
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur21
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
