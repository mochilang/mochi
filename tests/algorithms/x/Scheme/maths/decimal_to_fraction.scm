;; Generated by Mochi Scheme transpiler on 2025-08-16 19:42 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start10 (
        current-jiffy
      )
    )
     (
      jps13 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        pow10 n
      )
       (
        let (
          (
            result 1
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop1 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i n
                        )
                         (
                          begin (
                            set! result (
                              * result 10
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop1
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop1
                )
              )
               result
            )
          )
        )
      )
    )
     (
      define (
        gcd a b
      )
       (
        let (
          (
            x a
          )
        )
         (
          begin (
            let (
              (
                y b
              )
            )
             (
              begin (
                if (
                  < x 0
                )
                 (
                  begin (
                    set! x (
                      - x
                    )
                  )
                )
                 (
                  void
                )
              )
               (
                if (
                  < y 0
                )
                 (
                  begin (
                    set! y (
                      - y
                    )
                  )
                )
                 (
                  void
                )
              )
               (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          not (
                            _eq y 0
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                r (
                                  _mod x y
                                )
                              )
                            )
                             (
                              begin (
                                set! x y
                              )
                               (
                                set! y r
                              )
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               x
            )
          )
        )
      )
    )
     (
      define (
        parse_decimal s
      )
       (
        begin (
          if (
            _eq (
              _len s
            )
             0
          )
           (
            begin (
              panic "invalid number"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              idx 0
            )
          )
           (
            begin (
              let (
                (
                  sign 1
                )
              )
               (
                begin (
                  let (
                    (
                      first (
                        _substring s 0 1
                      )
                    )
                  )
                   (
                    begin (
                      if (
                        _eq first "-"
                      )
                       (
                        begin (
                          set! sign (
                            - 1
                          )
                        )
                         (
                          set! idx 1
                        )
                      )
                       (
                        if (
                          _eq first "+"
                        )
                         (
                          begin (
                            set! idx 1
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                     (
                      let (
                        (
                          int_part ""
                        )
                      )
                       (
                        begin (
                          call/cc (
                            lambda (
                              break4
                            )
                             (
                              letrec (
                                (
                                  loop3 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        < idx (
                                          _len s
                                        )
                                      )
                                       (
                                        begin (
                                          let (
                                            (
                                              c (
                                                _substring s idx (
                                                  + idx 1
                                                )
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              if (
                                                and (
                                                  string>=? c "0"
                                                )
                                                 (
                                                  string<=? c "9"
                                                )
                                              )
                                               (
                                                begin (
                                                  set! int_part (
                                                    string-append int_part c
                                                  )
                                                )
                                                 (
                                                  set! idx (
                                                    + idx 1
                                                  )
                                                )
                                              )
                                               (
                                                begin (
                                                  break4 (
                                                    void
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop3
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop3
                              )
                            )
                          )
                        )
                         (
                          let (
                            (
                              frac_part ""
                            )
                          )
                           (
                            begin (
                              if (
                                and (
                                  < idx (
                                    _len s
                                  )
                                )
                                 (
                                  _eq (
                                    _substring s idx (
                                      + idx 1
                                    )
                                  )
                                   "."
                                )
                              )
                               (
                                begin (
                                  set! idx (
                                    + idx 1
                                  )
                                )
                                 (
                                  call/cc (
                                    lambda (
                                      break6
                                    )
                                     (
                                      letrec (
                                        (
                                          loop5 (
                                            lambda (
                                              
                                            )
                                             (
                                              if (
                                                < idx (
                                                  _len s
                                                )
                                              )
                                               (
                                                begin (
                                                  let (
                                                    (
                                                      c (
                                                        _substring s idx (
                                                          + idx 1
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      if (
                                                        and (
                                                          string>=? c "0"
                                                        )
                                                         (
                                                          string<=? c "9"
                                                        )
                                                      )
                                                       (
                                                        begin (
                                                          set! frac_part (
                                                            string-append frac_part c
                                                          )
                                                        )
                                                         (
                                                          set! idx (
                                                            + idx 1
                                                          )
                                                        )
                                                      )
                                                       (
                                                        begin (
                                                          break6 (
                                                            void
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop5
                                                )
                                              )
                                               (
                                                void
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop5
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                void
                              )
                            )
                             (
                              let (
                                (
                                  exp 0
                                )
                              )
                               (
                                begin (
                                  if (
                                    and (
                                      < idx (
                                        _len s
                                      )
                                    )
                                     (
                                      or (
                                        _eq (
                                          _substring s idx (
                                            + idx 1
                                          )
                                        )
                                         "e"
                                      )
                                       (
                                        _eq (
                                          _substring s idx (
                                            + idx 1
                                          )
                                        )
                                         "E"
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      set! idx (
                                        + idx 1
                                      )
                                    )
                                     (
                                      let (
                                        (
                                          exp_sign 1
                                        )
                                      )
                                       (
                                        begin (
                                          if (
                                            and (
                                              < idx (
                                                _len s
                                              )
                                            )
                                             (
                                              _eq (
                                                _substring s idx (
                                                  + idx 1
                                                )
                                              )
                                               "-"
                                            )
                                          )
                                           (
                                            begin (
                                              set! exp_sign (
                                                - 1
                                              )
                                            )
                                             (
                                              set! idx (
                                                + idx 1
                                              )
                                            )
                                          )
                                           (
                                            if (
                                              and (
                                                < idx (
                                                  _len s
                                                )
                                              )
                                               (
                                                _eq (
                                                  _substring s idx (
                                                    + idx 1
                                                  )
                                                )
                                                 "+"
                                              )
                                            )
                                             (
                                              begin (
                                                set! idx (
                                                  + idx 1
                                                )
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                         (
                                          let (
                                            (
                                              exp_str ""
                                            )
                                          )
                                           (
                                            begin (
                                              letrec (
                                                (
                                                  loop7 (
                                                    lambda (
                                                      
                                                    )
                                                     (
                                                      if (
                                                        < idx (
                                                          _len s
                                                        )
                                                      )
                                                       (
                                                        begin (
                                                          let (
                                                            (
                                                              c (
                                                                _substring s idx (
                                                                  + idx 1
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              if (
                                                                and (
                                                                  string>=? c "0"
                                                                )
                                                                 (
                                                                  string<=? c "9"
                                                                )
                                                              )
                                                               (
                                                                begin (
                                                                  set! exp_str (
                                                                    string-append exp_str c
                                                                  )
                                                                )
                                                                 (
                                                                  set! idx (
                                                                    + idx 1
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                begin (
                                                                  panic "invalid number"
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          loop7
                                                        )
                                                      )
                                                       (
                                                        void
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                loop7
                                              )
                                            )
                                             (
                                              if (
                                                _eq (
                                                  _len exp_str
                                                )
                                                 0
                                              )
                                               (
                                                begin (
                                                  panic "invalid number"
                                                )
                                              )
                                               (
                                                void
                                              )
                                            )
                                             (
                                              set! exp (
                                                * exp_sign (
                                                  let (
                                                    (
                                                      v8 exp_str
                                                    )
                                                  )
                                                   (
                                                    cond (
                                                      (
                                                        string? v8
                                                      )
                                                       (
                                                        exact (
                                                          _floor (
                                                            string->number v8
                                                          )
                                                        )
                                                      )
                                                    )
                                                     (
                                                      (
                                                        boolean? v8
                                                      )
                                                       (
                                                        if v8 1 0
                                                      )
                                                    )
                                                     (
                                                      else (
                                                        exact (
                                                          _floor v8
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                                 (
                                  if (
                                    not (
                                      _eq idx (
                                        _len s
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      panic "invalid number"
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                                 (
                                  if (
                                    _eq (
                                      _len int_part
                                    )
                                     0
                                  )
                                   (
                                    begin (
                                      set! int_part "0"
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                                 (
                                  let (
                                    (
                                      num_str (
                                        string-append int_part frac_part
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      let (
                                        (
                                          numerator (
                                            let (
                                              (
                                                v9 num_str
                                              )
                                            )
                                             (
                                              cond (
                                                (
                                                  string? v9
                                                )
                                                 (
                                                  exact (
                                                    _floor (
                                                      string->number v9
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                (
                                                  boolean? v9
                                                )
                                                 (
                                                  if v9 1 0
                                                )
                                              )
                                               (
                                                else (
                                                  exact (
                                                    _floor v9
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          if (
                                            _eq sign (
                                              - 0 1
                                            )
                                          )
                                           (
                                            begin (
                                              set! numerator (
                                                - 0 numerator
                                              )
                                            )
                                          )
                                           (
                                            void
                                          )
                                        )
                                         (
                                          let (
                                            (
                                              denominator (
                                                pow10 (
                                                  _len frac_part
                                                )
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              if (
                                                > exp 0
                                              )
                                               (
                                                begin (
                                                  set! numerator (
                                                    * numerator (
                                                      pow10 exp
                                                    )
                                                  )
                                                )
                                              )
                                               (
                                                if (
                                                  < exp 0
                                                )
                                                 (
                                                  begin (
                                                    set! denominator (
                                                      * denominator (
                                                        pow10 (
                                                          - exp
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                             (
                                              alist->hash-table (
                                                _list (
                                                  cons "numerator" numerator
                                                )
                                                 (
                                                  cons "denominator" denominator
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        reduce fr
      )
       (
        let (
          (
            g (
              gcd (
                hash-table-ref fr "numerator"
              )
               (
                hash-table-ref fr "denominator"
              )
            )
          )
        )
         (
          begin (
            alist->hash-table (
              _list (
                cons "numerator" (
                  _div (
                    hash-table-ref fr "numerator"
                  )
                   g
                )
              )
               (
                cons "denominator" (
                  _div (
                    hash-table-ref fr "denominator"
                  )
                   g
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        decimal_to_fraction_str s
      )
       (
        reduce (
          parse_decimal s
        )
      )
    )
     (
      define (
        decimal_to_fraction x
      )
       (
        decimal_to_fraction_str (
          to-str-space x
        )
      )
    )
     (
      define (
        assert_fraction name fr num den
      )
       (
        if (
          or (
            not (
              _eq (
                hash-table-ref fr "numerator"
              )
               num
            )
          )
           (
            not (
              _eq (
                hash-table-ref fr "denominator"
              )
               den
            )
          )
        )
         (
          begin (
            panic name
          )
        )
         (
          void
        )
      )
    )
     (
      define (
        test_decimal_to_fraction
      )
       (
        begin (
          assert_fraction "case1" (
            decimal_to_fraction 2.0
          )
           2 1
        )
         (
          assert_fraction "case2" (
            decimal_to_fraction 89.0
          )
           89 1
        )
         (
          assert_fraction "case3" (
            decimal_to_fraction_str "67"
          )
           67 1
        )
         (
          assert_fraction "case4" (
            decimal_to_fraction_str "45.0"
          )
           45 1
        )
         (
          assert_fraction "case5" (
            decimal_to_fraction 1.5
          )
           3 2
        )
         (
          assert_fraction "case6" (
            decimal_to_fraction_str "6.25"
          )
           25 4
        )
         (
          assert_fraction "case7" (
            decimal_to_fraction 0.0
          )
           0 1
        )
         (
          assert_fraction "case8" (
            decimal_to_fraction (
              - 2.5
            )
          )
           (
            - 5
          )
           2
        )
         (
          assert_fraction "case9" (
            decimal_to_fraction 0.125
          )
           1 8
        )
         (
          assert_fraction "case10" (
            decimal_to_fraction 1.00000025e+06
          )
           4000001 4
        )
         (
          assert_fraction "case11" (
            decimal_to_fraction 1.3333
          )
           13333 10000
        )
         (
          assert_fraction "case12" (
            decimal_to_fraction_str "1.23e2"
          )
           123 1
        )
         (
          assert_fraction "case13" (
            decimal_to_fraction_str "0.500"
          )
           1 2
        )
      )
    )
     (
      define (
        main
      )
       (
        begin (
          test_decimal_to_fraction
        )
         (
          let (
            (
              fr (
                decimal_to_fraction 1.5
              )
            )
          )
           (
            begin (
              _display (
                if (
                  string? (
                    string-append (
                      string-append (
                        to-str-space (
                          hash-table-ref fr "numerator"
                        )
                      )
                       "/"
                    )
                     (
                      to-str-space (
                        hash-table-ref fr "denominator"
                      )
                    )
                  )
                )
                 (
                  string-append (
                    string-append (
                      to-str-space (
                        hash-table-ref fr "numerator"
                      )
                    )
                     "/"
                  )
                   (
                    to-str-space (
                      hash-table-ref fr "denominator"
                    )
                  )
                )
                 (
                  to-str (
                    string-append (
                      string-append (
                        to-str-space (
                          hash-table-ref fr "numerator"
                        )
                      )
                       "/"
                    )
                     (
                      to-str-space (
                        hash-table-ref fr "denominator"
                      )
                    )
                  )
                )
              )
            )
             (
              newline
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end11 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur12 (
              quotient (
                * (
                  - end11 start10
                )
                 1000000
              )
               jps13
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur12
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
