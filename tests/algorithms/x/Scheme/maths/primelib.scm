;; Generated by Mochi Scheme transpiler on 2025-08-17 12:10 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        ((list? x) (length x))
        ((vector? x) (vector-length x))
        (else 0)))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start30 (
        current-jiffy
      )
    )
     (
      jps33 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        abs_int x
      )
       (
        call/cc (
          lambda (
            ret1
          )
           (
            begin (
              if (
                < x 0
              )
               (
                begin (
                  ret1 (
                    - x
                  )
                )
              )
               (
                void
              )
            )
             (
              ret1 x
            )
          )
        )
      )
    )
     (
      define (
        gcd_iter a b
      )
       (
        let (
          (
            x (
              abs_int a
            )
          )
        )
         (
          begin (
            let (
              (
                y (
                  abs_int b
                )
              )
            )
             (
              begin (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          not (
                            _eq y 0
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                t y
                              )
                            )
                             (
                              begin (
                                set! y (
                                  _mod x y
                                )
                              )
                               (
                                set! x t
                              )
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               x
            )
          )
        )
      )
    )
     (
      define (
        is_prime n
      )
       (
        call/cc (
          lambda (
            ret3
          )
           (
            begin (
              if (
                <= n 1
              )
               (
                begin (
                  ret3 #f
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  d 2
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop4 (
                        lambda (
                          
                        )
                         (
                          if (
                            <= (
                              * d d
                            )
                             n
                          )
                           (
                            begin (
                              if (
                                _eq (
                                  _mod n d
                                )
                                 0
                              )
                               (
                                begin (
                                  ret3 #f
                                )
                              )
                               (
                                void
                              )
                            )
                             (
                              set! d (
                                + d 1
                              )
                            )
                             (
                              loop4
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop4
                  )
                )
                 (
                  ret3 #t
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        sieve_er n
      )
       (
        let (
          (
            nums (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 2
              )
            )
             (
              begin (
                letrec (
                  (
                    loop5 (
                      lambda (
                        
                      )
                       (
                        if (
                          <= i n
                        )
                         (
                          begin (
                            set! nums (
                              append nums (
                                _list i
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop5
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop5
                )
              )
               (
                let (
                  (
                    idx 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop6 (
                          lambda (
                            
                          )
                           (
                            if (
                              < idx (
                                _len nums
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    j (
                                      + idx 1
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop7 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < j (
                                                _len nums
                                              )
                                            )
                                             (
                                              begin (
                                                if (
                                                  not (
                                                    _eq (
                                                      list-ref-safe nums idx
                                                    )
                                                     0
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    if (
                                                      _eq (
                                                        _mod (
                                                          list-ref-safe nums j
                                                        )
                                                         (
                                                          list-ref-safe nums idx
                                                        )
                                                      )
                                                       0
                                                    )
                                                     (
                                                      begin (
                                                        list-set-safe! nums j 0
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                               (
                                                set! j (
                                                  + j 1
                                                )
                                              )
                                               (
                                                loop7
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop7
                                    )
                                  )
                                   (
                                    set! idx (
                                      + idx 1
                                    )
                                  )
                                )
                              )
                               (
                                loop6
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop6
                    )
                  )
                   (
                    let (
                      (
                        res (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            k 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop8 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < k (
                                        _len nums
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            v (
                                              list-ref-safe nums k
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              not (
                                                _eq v 0
                                              )
                                            )
                                             (
                                              begin (
                                                set! res (
                                                  append res (
                                                    _list v
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              void
                                            )
                                          )
                                           (
                                            set! k (
                                              + k 1
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop8
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop8
                            )
                          )
                           res
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        get_prime_numbers n
      )
       (
        let (
          (
            ans (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                num 2
              )
            )
             (
              begin (
                letrec (
                  (
                    loop9 (
                      lambda (
                        
                      )
                       (
                        if (
                          <= num n
                        )
                         (
                          begin (
                            if (
                              is_prime num
                            )
                             (
                              begin (
                                set! ans (
                                  append ans (
                                    _list num
                                  )
                                )
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            set! num (
                              + num 1
                            )
                          )
                           (
                            loop9
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop9
                )
              )
               ans
            )
          )
        )
      )
    )
     (
      define (
        prime_factorization number
      )
       (
        call/cc (
          lambda (
            ret10
          )
           (
            begin (
              if (
                _eq number 0
              )
               (
                begin (
                  ret10 (
                    _list 0
                  )
                )
              )
               (
                void
              )
            )
             (
              if (
                _eq number 1
              )
               (
                begin (
                  ret10 (
                    _list 1
                  )
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  ans (
                    _list
                  )
                )
              )
               (
                begin (
                  if (
                    is_prime number
                  )
                   (
                    begin (
                      set! ans (
                        append ans (
                          _list number
                        )
                      )
                    )
                     (
                      ret10 ans
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  let (
                    (
                      quotient number
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          factor 2
                        )
                      )
                       (
                        begin (
                          letrec (
                            (
                              loop11 (
                                lambda (
                                  
                                )
                                 (
                                  if (
                                    not (
                                      _eq quotient 1
                                    )
                                  )
                                   (
                                    begin (
                                      if (
                                        and (
                                          is_prime factor
                                        )
                                         (
                                          _eq (
                                            _mod quotient factor
                                          )
                                           0
                                        )
                                      )
                                       (
                                        begin (
                                          set! ans (
                                            append ans (
                                              _list factor
                                            )
                                          )
                                        )
                                         (
                                          set! quotient (
                                            _div quotient factor
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          set! factor (
                                            + factor 1
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop11
                                    )
                                  )
                                   (
                                    void
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop11
                          )
                        )
                         (
                          ret10 ans
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        greatest_prime_factor number
      )
       (
        let (
          (
            factors (
              prime_factorization number
            )
          )
        )
         (
          begin (
            let (
              (
                m (
                  cond (
                    (
                      string? factors
                    )
                     (
                      _substring factors 0 (
                        + 0 1
                      )
                    )
                  )
                   (
                    (
                      hash-table? factors
                    )
                     (
                      hash-table-ref factors 0
                    )
                  )
                   (
                    else (
                      list-ref-safe factors 0
                    )
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 1
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop12 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len factors
                              )
                            )
                             (
                              begin (
                                if (
                                  _gt (
                                    cond (
                                      (
                                        string? factors
                                      )
                                       (
                                        _substring factors i (
                                          + i 1
                                        )
                                      )
                                    )
                                     (
                                      (
                                        hash-table? factors
                                      )
                                       (
                                        hash-table-ref factors i
                                      )
                                    )
                                     (
                                      else (
                                        list-ref-safe factors i
                                      )
                                    )
                                  )
                                   m
                                )
                                 (
                                  begin (
                                    set! m (
                                      cond (
                                        (
                                          string? factors
                                        )
                                         (
                                          _substring factors i (
                                            + i 1
                                          )
                                        )
                                      )
                                       (
                                        (
                                          hash-table? factors
                                        )
                                         (
                                          hash-table-ref factors i
                                        )
                                      )
                                       (
                                        else (
                                          list-ref-safe factors i
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  void
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop12
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop12
                    )
                  )
                   m
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        smallest_prime_factor number
      )
       (
        let (
          (
            factors (
              prime_factorization number
            )
          )
        )
         (
          begin (
            let (
              (
                m (
                  cond (
                    (
                      string? factors
                    )
                     (
                      _substring factors 0 (
                        + 0 1
                      )
                    )
                  )
                   (
                    (
                      hash-table? factors
                    )
                     (
                      hash-table-ref factors 0
                    )
                  )
                   (
                    else (
                      list-ref-safe factors 0
                    )
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 1
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop13 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len factors
                              )
                            )
                             (
                              begin (
                                if (
                                  _lt (
                                    cond (
                                      (
                                        string? factors
                                      )
                                       (
                                        _substring factors i (
                                          + i 1
                                        )
                                      )
                                    )
                                     (
                                      (
                                        hash-table? factors
                                      )
                                       (
                                        hash-table-ref factors i
                                      )
                                    )
                                     (
                                      else (
                                        list-ref-safe factors i
                                      )
                                    )
                                  )
                                   m
                                )
                                 (
                                  begin (
                                    set! m (
                                      cond (
                                        (
                                          string? factors
                                        )
                                         (
                                          _substring factors i (
                                            + i 1
                                          )
                                        )
                                      )
                                       (
                                        (
                                          hash-table? factors
                                        )
                                         (
                                          hash-table-ref factors i
                                        )
                                      )
                                       (
                                        else (
                                          list-ref-safe factors i
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  void
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop13
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop13
                    )
                  )
                   m
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        kg_v number1 number2
      )
       (
        begin (
          if (
            or (
              < number1 1
            )
             (
              < number2 1
            )
          )
           (
            begin (
              panic "numbers must be positive"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              g (
                gcd_iter number1 number2
              )
            )
          )
           (
            begin (
              * (
                _div number1 g
              )
               number2
            )
          )
        )
      )
    )
     (
      define (
        is_even number
      )
       (
        _eq (
          _mod number 2
        )
         0
      )
    )
     (
      define (
        is_odd number
      )
       (
        not (
          _eq (
            _mod number 2
          )
           0
        )
      )
    )
     (
      define (
        goldbach number
      )
       (
        call/cc (
          lambda (
            ret14
          )
           (
            begin (
              if (
                or (
                  not (
                    is_even number
                  )
                )
                 (
                  <= number 2
                )
              )
               (
                begin (
                  panic "number must be even and > 2"
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  primes (
                    get_prime_numbers number
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop15 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i (
                                  _len primes
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      j (
                                        + i 1
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      letrec (
                                        (
                                          loop16 (
                                            lambda (
                                              
                                            )
                                             (
                                              if (
                                                < j (
                                                  _len primes
                                                )
                                              )
                                               (
                                                begin (
                                                  if (
                                                    _eq (
                                                      _add (
                                                        cond (
                                                          (
                                                            string? primes
                                                          )
                                                           (
                                                            _substring primes i (
                                                              + i 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            hash-table? primes
                                                          )
                                                           (
                                                            hash-table-ref primes i
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            list-ref-safe primes i
                                                          )
                                                        )
                                                      )
                                                       (
                                                        cond (
                                                          (
                                                            string? primes
                                                          )
                                                           (
                                                            _substring primes j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                         (
                                                          (
                                                            hash-table? primes
                                                          )
                                                           (
                                                            hash-table-ref primes j
                                                          )
                                                        )
                                                         (
                                                          else (
                                                            list-ref-safe primes j
                                                          )
                                                        )
                                                      )
                                                    )
                                                     number
                                                  )
                                                   (
                                                    begin (
                                                      ret14 (
                                                        _list (
                                                          cond (
                                                            (
                                                              string? primes
                                                            )
                                                             (
                                                              _substring primes i (
                                                                + i 1
                                                              )
                                                            )
                                                          )
                                                           (
                                                            (
                                                              hash-table? primes
                                                            )
                                                             (
                                                              hash-table-ref primes i
                                                            )
                                                          )
                                                           (
                                                            else (
                                                              list-ref-safe primes i
                                                            )
                                                          )
                                                        )
                                                         (
                                                          cond (
                                                            (
                                                              string? primes
                                                            )
                                                             (
                                                              _substring primes j (
                                                                + j 1
                                                              )
                                                            )
                                                          )
                                                           (
                                                            (
                                                              hash-table? primes
                                                            )
                                                             (
                                                              hash-table-ref primes j
                                                            )
                                                          )
                                                           (
                                                            else (
                                                              list-ref-safe primes j
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    void
                                                  )
                                                )
                                                 (
                                                  set! j (
                                                    + j 1
                                                  )
                                                )
                                                 (
                                                  loop16
                                                )
                                              )
                                               (
                                                void
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop16
                                      )
                                    )
                                     (
                                      set! i (
                                        + i 1
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop15
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop15
                      )
                    )
                     (
                      ret14 (
                        _list
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        get_prime n
      )
       (
        begin (
          if (
            < n 0
          )
           (
            begin (
              panic "n must be non-negative"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              index 0
            )
          )
           (
            begin (
              let (
                (
                  ans 2
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop17 (
                        lambda (
                          
                        )
                         (
                          if (
                            < index n
                          )
                           (
                            begin (
                              set! index (
                                + index 1
                              )
                            )
                             (
                              set! ans (
                                + ans 1
                              )
                            )
                             (
                              letrec (
                                (
                                  loop18 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        not (
                                          is_prime ans
                                        )
                                      )
                                       (
                                        begin (
                                          set! ans (
                                            + ans 1
                                          )
                                        )
                                         (
                                          loop18
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop18
                              )
                            )
                             (
                              loop17
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop17
                  )
                )
                 ans
              )
            )
          )
        )
      )
    )
     (
      define (
        get_primes_between p1 p2
      )
       (
        let (
          (
            bad1 (
              not (
                is_prime p1
              )
            )
          )
        )
         (
          begin (
            let (
              (
                bad2 (
                  not (
                    is_prime p2
                  )
                )
              )
            )
             (
              begin (
                if (
                  or (
                    or bad1 bad2
                  )
                   (
                    >= p1 p2
                  )
                )
                 (
                  begin (
                    panic "arguments must be prime and p1 < p2"
                  )
                )
                 (
                  void
                )
              )
               (
                let (
                  (
                    num (
                      + p1 1
                    )
                  )
                )
                 (
                  begin (
                    call/cc (
                      lambda (
                        break20
                      )
                       (
                        letrec (
                          (
                            loop19 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < num p2
                                )
                                 (
                                  begin (
                                    if (
                                      is_prime num
                                    )
                                     (
                                      begin (
                                        break20 (
                                          void
                                        )
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                   (
                                    set! num (
                                      + num 1
                                    )
                                  )
                                   (
                                    loop19
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop19
                        )
                      )
                    )
                  )
                   (
                    let (
                      (
                        ans (
                          _list
                        )
                      )
                    )
                     (
                      begin (
                        call/cc (
                          lambda (
                            break22
                          )
                           (
                            letrec (
                              (
                                loop21 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < num p2
                                    )
                                     (
                                      begin (
                                        set! ans (
                                          append ans (
                                            _list num
                                          )
                                        )
                                      )
                                       (
                                        set! num (
                                          + num 1
                                        )
                                      )
                                       (
                                        call/cc (
                                          lambda (
                                            break24
                                          )
                                           (
                                            letrec (
                                              (
                                                loop23 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < num p2
                                                    )
                                                     (
                                                      begin (
                                                        if (
                                                          is_prime num
                                                        )
                                                         (
                                                          begin (
                                                            break24 (
                                                              void
                                                            )
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                       (
                                                        set! num (
                                                          + num 1
                                                        )
                                                      )
                                                       (
                                                        loop23
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop23
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop21
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop21
                            )
                          )
                        )
                      )
                       ans
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        get_divisors n
      )
       (
        begin (
          if (
            < n 1
          )
           (
            begin (
              panic "n must be >= 1"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              ans (
                _list
              )
            )
          )
           (
            begin (
              let (
                (
                  d 1
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop25 (
                        lambda (
                          
                        )
                         (
                          if (
                            <= d n
                          )
                           (
                            begin (
                              if (
                                _eq (
                                  _mod n d
                                )
                                 0
                              )
                               (
                                begin (
                                  set! ans (
                                    append ans (
                                      _list d
                                    )
                                  )
                                )
                              )
                               (
                                void
                              )
                            )
                             (
                              set! d (
                                + d 1
                              )
                            )
                             (
                              loop25
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop25
                  )
                )
                 ans
              )
            )
          )
        )
      )
    )
     (
      define (
        is_perfect_number number
      )
       (
        begin (
          if (
            <= number 1
          )
           (
            begin (
              panic "number must be > 1"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              divisors (
                get_divisors number
              )
            )
          )
           (
            begin (
              let (
                (
                  sum 0
                )
              )
               (
                begin (
                  let (
                    (
                      i 0
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop26 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i (
                                  - (
                                    _len divisors
                                  )
                                   1
                                )
                              )
                               (
                                begin (
                                  set! sum (
                                    _add sum (
                                      cond (
                                        (
                                          string? divisors
                                        )
                                         (
                                          _substring divisors i (
                                            + i 1
                                          )
                                        )
                                      )
                                       (
                                        (
                                          hash-table? divisors
                                        )
                                         (
                                          hash-table-ref divisors i
                                        )
                                      )
                                       (
                                        else (
                                          list-ref-safe divisors i
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                                 (
                                  loop26
                                )
                              )
                               (
                                void
                              )
                            )
                          )
                        )
                      )
                       (
                        loop26
                      )
                    )
                     (
                      _eq sum number
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        simplify_fraction numerator denominator
      )
       (
        begin (
          if (
            _eq denominator 0
          )
           (
            begin (
              panic "denominator cannot be zero"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              g (
                gcd_iter (
                  abs_int numerator
                )
                 (
                  abs_int denominator
                )
              )
            )
          )
           (
            begin (
              _list (
                _div numerator g
              )
               (
                _div denominator g
              )
            )
          )
        )
      )
    )
     (
      define (
        factorial n
      )
       (
        begin (
          if (
            < n 0
          )
           (
            begin (
              panic "n must be >= 0"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              ans 1
            )
          )
           (
            begin (
              let (
                (
                  i 1
                )
              )
               (
                begin (
                  letrec (
                    (
                      loop27 (
                        lambda (
                          
                        )
                         (
                          if (
                            <= i n
                          )
                           (
                            begin (
                              set! ans (
                                * ans i
                              )
                            )
                             (
                              set! i (
                                + i 1
                              )
                            )
                             (
                              loop27
                            )
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                  )
                   (
                    loop27
                  )
                )
                 ans
              )
            )
          )
        )
      )
    )
     (
      define (
        fib n
      )
       (
        call/cc (
          lambda (
            ret28
          )
           (
            begin (
              if (
                < n 0
              )
               (
                begin (
                  panic "n must be >= 0"
                )
              )
               (
                void
              )
            )
             (
              if (
                <= n 1
              )
               (
                begin (
                  ret28 1
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  tmp 0
                )
              )
               (
                begin (
                  let (
                    (
                      fib1 1
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          ans 1
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              i 0
                            )
                          )
                           (
                            begin (
                              letrec (
                                (
                                  loop29 (
                                    lambda (
                                      
                                    )
                                     (
                                      if (
                                        < i (
                                          - n 1
                                        )
                                      )
                                       (
                                        begin (
                                          set! tmp ans
                                        )
                                         (
                                          set! ans (
                                            + ans fib1
                                          )
                                        )
                                         (
                                          set! fib1 tmp
                                        )
                                         (
                                          set! i (
                                            + i 1
                                          )
                                        )
                                         (
                                          loop29
                                        )
                                      )
                                       (
                                        void
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop29
                              )
                            )
                             (
                              ret28 ans
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              is_prime 97
            )
          )
        )
         (
          to-str-space (
            is_prime 97
          )
        )
         (
          to-str (
            to-str-space (
              is_prime 97
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              sieve_er 20
            )
          )
        )
         (
          to-str-space (
            sieve_er 20
          )
        )
         (
          to-str (
            to-str-space (
              sieve_er 20
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              get_prime_numbers 20
            )
          )
        )
         (
          to-str-space (
            get_prime_numbers 20
          )
        )
         (
          to-str (
            to-str-space (
              get_prime_numbers 20
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              prime_factorization 287
            )
          )
        )
         (
          to-str-space (
            prime_factorization 287
          )
        )
         (
          to-str (
            to-str-space (
              prime_factorization 287
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              greatest_prime_factor 287
            )
          )
        )
         (
          to-str-space (
            greatest_prime_factor 287
          )
        )
         (
          to-str (
            to-str-space (
              greatest_prime_factor 287
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              smallest_prime_factor 287
            )
          )
        )
         (
          to-str-space (
            smallest_prime_factor 287
          )
        )
         (
          to-str (
            to-str-space (
              smallest_prime_factor 287
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              kg_v 8 10
            )
          )
        )
         (
          to-str-space (
            kg_v 8 10
          )
        )
         (
          to-str (
            to-str-space (
              kg_v 8 10
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              goldbach 28
            )
          )
        )
         (
          to-str-space (
            goldbach 28
          )
        )
         (
          to-str (
            to-str-space (
              goldbach 28
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              get_prime 8
            )
          )
        )
         (
          to-str-space (
            get_prime 8
          )
        )
         (
          to-str (
            to-str-space (
              get_prime 8
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              get_primes_between 3 23
            )
          )
        )
         (
          to-str-space (
            get_primes_between 3 23
          )
        )
         (
          to-str (
            to-str-space (
              get_primes_between 3 23
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              get_divisors 28
            )
          )
        )
         (
          to-str-space (
            get_divisors 28
          )
        )
         (
          to-str (
            to-str-space (
              get_divisors 28
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              is_perfect_number 28
            )
          )
        )
         (
          to-str-space (
            is_perfect_number 28
          )
        )
         (
          to-str (
            to-str-space (
              is_perfect_number 28
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              simplify_fraction 10 20
            )
          )
        )
         (
          to-str-space (
            simplify_fraction 10 20
          )
        )
         (
          to-str (
            to-str-space (
              simplify_fraction 10 20
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              factorial 5
            )
          )
        )
         (
          to-str-space (
            factorial 5
          )
        )
         (
          to-str (
            to-str-space (
              factorial 5
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              fib 10
            )
          )
        )
         (
          to-str-space (
            fib 10
          )
        )
         (
          to-str (
            to-str-space (
              fib 10
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      let (
        (
          end31 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur32 (
              quotient (
                * (
                  - end31 start30
                )
                 1000000
              )
               jps33
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur32
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
