;; Generated by Mochi Scheme transpiler on 2025-08-12 07:47 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
        ((number? x)
         (if (integer? x)
             (number->string (inexact->exact x))
             (number->string x)))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start18 (
        current-jiffy
      )
    )
     (
      jps21 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        make_dual real rank
      )
       (
        let (
          (
            ds (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop1 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i rank
                        )
                         (
                          begin (
                            set! ds (
                              append ds (
                                _list 1.0
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop1
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop1
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "real" real
                  )
                   (
                    cons "duals" ds
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dual_from_list real ds
      )
       (
        alist->hash-table (
          _list (
            cons "real" real
          )
           (
            cons "duals" ds
          )
        )
      )
    )
     (
      define (
        dual_add a b
      )
       (
        let (
          (
            s_dual (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len (
                              hash-table-ref a "duals"
                            )
                          )
                        )
                         (
                          begin (
                            set! s_dual (
                              append s_dual (
                                _list (
                                  list-ref-safe (
                                    hash-table-ref a "duals"
                                  )
                                   i
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop2
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               (
                let (
                  (
                    o_dual (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        j 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop3 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < j (
                                    _len (
                                      hash-table-ref b "duals"
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    set! o_dual (
                                      append o_dual (
                                        _list (
                                          list-ref-safe (
                                            hash-table-ref b "duals"
                                          )
                                           j
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! j (
                                      + j 1
                                    )
                                  )
                                   (
                                    loop3
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop3
                        )
                      )
                       (
                        if (
                          > (
                            _len s_dual
                          )
                           (
                            _len o_dual
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                diff (
                                  - (
                                    _len s_dual
                                  )
                                   (
                                    _len o_dual
                                  )
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    k 0
                                  )
                                )
                                 (
                                  begin (
                                    letrec (
                                      (
                                        loop4 (
                                          lambda (
                                            
                                          )
                                           (
                                            if (
                                              < k diff
                                            )
                                             (
                                              begin (
                                                set! o_dual (
                                                  append o_dual (
                                                    _list 1.0
                                                  )
                                                )
                                              )
                                               (
                                                set! k (
                                                  + k 1
                                                )
                                              )
                                               (
                                                loop4
                                              )
                                            )
                                             '(
                                              
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      loop4
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                         (
                          if (
                            < (
                              _len s_dual
                            )
                             (
                              _len o_dual
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  diff2 (
                                    - (
                                      _len o_dual
                                    )
                                     (
                                      _len s_dual
                                    )
                                  )
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      k2 0
                                    )
                                  )
                                   (
                                    begin (
                                      letrec (
                                        (
                                          loop5 (
                                            lambda (
                                              
                                            )
                                             (
                                              if (
                                                < k2 diff2
                                              )
                                               (
                                                begin (
                                                  set! s_dual (
                                                    append s_dual (
                                                      _list 1.0
                                                    )
                                                  )
                                                )
                                                 (
                                                  set! k2 (
                                                    + k2 1
                                                  )
                                                )
                                                 (
                                                  loop5
                                                )
                                              )
                                               '(
                                                
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop5
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           '(
                            
                          )
                        )
                      )
                       (
                        let (
                          (
                            new_duals (
                              _list
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                idx 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop6 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < idx (
                                            _len s_dual
                                          )
                                        )
                                         (
                                          begin (
                                            set! new_duals (
                                              append new_duals (
                                                _list (
                                                  + (
                                                    list-ref-safe s_dual idx
                                                  )
                                                   (
                                                    list-ref-safe o_dual idx
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            set! idx (
                                              + idx 1
                                            )
                                          )
                                           (
                                            loop6
                                          )
                                        )
                                         '(
                                          
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop6
                                )
                              )
                               (
                                alist->hash-table (
                                  _list (
                                    cons "real" (
                                      + (
                                        hash-table-ref a "real"
                                      )
                                       (
                                        hash-table-ref b "real"
                                      )
                                    )
                                  )
                                   (
                                    cons "duals" new_duals
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dual_add_real a b
      )
       (
        let (
          (
            ds (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop7 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len (
                              hash-table-ref a "duals"
                            )
                          )
                        )
                         (
                          begin (
                            set! ds (
                              append ds (
                                _list (
                                  list-ref-safe (
                                    hash-table-ref a "duals"
                                  )
                                   i
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop7
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop7
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "real" (
                      + (
                        hash-table-ref a "real"
                      )
                       b
                    )
                  )
                   (
                    cons "duals" ds
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dual_mul a b
      )
       (
        let (
          (
            new_len (
              + (
                + (
                  _len (
                    hash-table-ref a "duals"
                  )
                )
                 (
                  _len (
                    hash-table-ref b "duals"
                  )
                )
              )
               1
            )
          )
        )
         (
          begin (
            let (
              (
                new_duals (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    idx 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop8 (
                          lambda (
                            
                          )
                           (
                            if (
                              < idx new_len
                            )
                             (
                              begin (
                                set! new_duals (
                                  append new_duals (
                                    _list 0.0
                                  )
                                )
                              )
                               (
                                set! idx (
                                  + idx 1
                                )
                              )
                               (
                                loop8
                              )
                            )
                             '(
                              
                            )
                          )
                        )
                      )
                    )
                     (
                      loop8
                    )
                  )
                   (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop9 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len (
                                      hash-table-ref a "duals"
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        j 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop10 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < j (
                                                    _len (
                                                      hash-table-ref b "duals"
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        pos (
                                                          + (
                                                            + i j
                                                          )
                                                           1
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            val (
                                                              _add (
                                                                list-ref-safe new_duals pos
                                                              )
                                                               (
                                                                * (
                                                                  list-ref-safe (
                                                                    hash-table-ref a "duals"
                                                                  )
                                                                   i
                                                                )
                                                                 (
                                                                  list-ref-safe (
                                                                    hash-table-ref b "duals"
                                                                  )
                                                                   j
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            list-set-safe! new_duals pos val
                                                          )
                                                           (
                                                            set! j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    loop10
                                                  )
                                                )
                                                 '(
                                                  
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop10
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop9
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop9
                        )
                      )
                       (
                        let (
                          (
                            k 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop11 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < k (
                                        _len (
                                          hash-table-ref a "duals"
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            val (
                                              _add (
                                                list-ref-safe new_duals k
                                              )
                                               (
                                                * (
                                                  list-ref-safe (
                                                    hash-table-ref a "duals"
                                                  )
                                                   k
                                                )
                                                 (
                                                  hash-table-ref b "real"
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            list-set-safe! new_duals k val
                                          )
                                           (
                                            set! k (
                                              + k 1
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop11
                                      )
                                    )
                                     '(
                                      
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop11
                            )
                          )
                           (
                            let (
                              (
                                l 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop12 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < l (
                                            _len (
                                              hash-table-ref b "duals"
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                val (
                                                  _add (
                                                    list-ref-safe new_duals l
                                                  )
                                                   (
                                                    * (
                                                      list-ref-safe (
                                                        hash-table-ref b "duals"
                                                      )
                                                       l
                                                    )
                                                     (
                                                      hash-table-ref a "real"
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                list-set-safe! new_duals l val
                                              )
                                               (
                                                set! l (
                                                  + l 1
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop12
                                          )
                                        )
                                         '(
                                          
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop12
                                )
                              )
                               (
                                alist->hash-table (
                                  _list (
                                    cons "real" (
                                      * (
                                        hash-table-ref a "real"
                                      )
                                       (
                                        hash-table-ref b "real"
                                      )
                                    )
                                  )
                                   (
                                    cons "duals" new_duals
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dual_mul_real a b
      )
       (
        let (
          (
            ds (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop13 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len (
                              hash-table-ref a "duals"
                            )
                          )
                        )
                         (
                          begin (
                            set! ds (
                              append ds (
                                _list (
                                  * (
                                    list-ref-safe (
                                      hash-table-ref a "duals"
                                    )
                                     i
                                  )
                                   b
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop13
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop13
                )
              )
               (
                alist->hash-table (
                  _list (
                    cons "real" (
                      * (
                        hash-table-ref a "real"
                      )
                       b
                    )
                  )
                   (
                    cons "duals" ds
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        dual_pow x n
      )
       (
        call/cc (
          lambda (
            ret14
          )
           (
            begin (
              if (
                < n 0
              )
               (
                begin (
                  panic "power must be a positive integer"
                )
              )
               '(
                
              )
            )
             (
              if (
                equal? n 0
              )
               (
                begin (
                  ret14 (
                    alist->hash-table (
                      _list (
                        cons "real" 1.0
                      )
                       (
                        cons "duals" (
                          _list
                        )
                      )
                    )
                  )
                )
              )
               '(
                
              )
            )
             (
              let (
                (
                  res x
                )
              )
               (
                begin (
                  let (
                    (
                      i 1
                    )
                  )
                   (
                    begin (
                      letrec (
                        (
                          loop15 (
                            lambda (
                              
                            )
                             (
                              if (
                                < i n
                              )
                               (
                                begin (
                                  set! res (
                                    dual_mul res x
                                  )
                                )
                                 (
                                  set! i (
                                    + i 1
                                  )
                                )
                                 (
                                  loop15
                                )
                              )
                               '(
                                
                              )
                            )
                          )
                        )
                      )
                       (
                        loop15
                      )
                    )
                     (
                      ret14 res
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        factorial n
      )
       (
        let (
          (
            res 1.0
          )
        )
         (
          begin (
            let (
              (
                i 2
              )
            )
             (
              begin (
                letrec (
                  (
                    loop16 (
                      lambda (
                        
                      )
                       (
                        if (
                          <= i n
                        )
                         (
                          begin (
                            set! res (
                              * res (
                                + 0.0 i
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop16
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop16
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        differentiate func position order
      )
       (
        call/cc (
          lambda (
            ret17
          )
           (
            let (
              (
                d (
                  make_dual position 1
                )
              )
            )
             (
              begin (
                let (
                  (
                    result (
                      func d
                    )
                  )
                )
                 (
                  begin (
                    if (
                      equal? order 0
                    )
                     (
                      begin (
                        ret17 (
                          hash-table-ref result "real"
                        )
                      )
                    )
                     '(
                      
                    )
                  )
                   (
                    ret17 (
                      * (
                        list-ref-safe (
                          hash-table-ref result "duals"
                        )
                         (
                          - order 1
                        )
                      )
                       (
                        factorial order
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        test_differentiate
      )
       (
        begin (
          define (
            f1 x
          )
           (
            dual_pow x 2
          )
        )
         (
          if (
            not (
              equal? (
                differentiate f1 2.0 2
              )
               2.0
            )
          )
           (
            begin (
              panic "f1 failed"
            )
          )
           '(
            
          )
        )
         (
          define (
            f2 x
          )
           (
            dual_mul (
              dual_pow x 2
            )
             (
              dual_pow x 4
            )
          )
        )
         (
          if (
            not (
              equal? (
                differentiate f2 9.0 2
              )
               196830.0
            )
          )
           (
            begin (
              panic "f2 failed"
            )
          )
           '(
            
          )
        )
         (
          define (
            f3 y
          )
           (
            dual_mul_real (
              dual_pow (
                dual_add_real y 3.0
              )
               6
            )
             0.5
          )
        )
         (
          if (
            not (
              equal? (
                differentiate f3 3.5 4
              )
               7605.0
            )
          )
           (
            begin (
              panic "f3 failed"
            )
          )
           '(
            
          )
        )
         (
          define (
            f4 y
          )
           (
            dual_pow y 2
          )
        )
         (
          if (
            not (
              equal? (
                differentiate f4 4.0 3
              )
               0.0
            )
          )
           (
            begin (
              panic "f4 failed"
            )
          )
           '(
            
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        begin (
          test_differentiate
        )
         (
          define (
            f y
          )
           (
            dual_mul (
              dual_pow y 2
            )
             (
              dual_pow y 4
            )
          )
        )
         (
          let (
            (
              res (
                differentiate f 9.0 2
              )
            )
          )
           (
            begin (
              _display (
                if (
                  string? res
                )
                 res (
                  to-str res
                )
              )
            )
             (
              newline
            )
          )
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end19 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur20 (
              quotient (
                * (
                  - end19 start18
                )
                 1000000
              )
               jps21
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur20
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
