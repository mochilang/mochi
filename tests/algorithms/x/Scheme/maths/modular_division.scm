;; Generated by Mochi Scheme transpiler on 2025-08-14 18:30 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start5 (
        current-jiffy
      )
    )
     (
      jps8 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        mod a n
      )
       (
        call/cc (
          lambda (
            ret1
          )
           (
            let (
              (
                r (
                  _mod a n
                )
              )
            )
             (
              begin (
                if (
                  < r 0
                )
                 (
                  begin (
                    ret1 (
                      + r n
                    )
                  )
                )
                 (
                  void
                )
              )
               (
                ret1 r
              )
            )
          )
        )
      )
    )
     (
      define (
        greatest_common_divisor a b
      )
       (
        let (
          (
            x (
              if (
                < a 0
              )
               (
                - a
              )
               a
            )
          )
        )
         (
          begin (
            let (
              (
                y (
                  if (
                    < b 0
                  )
                   (
                    - b
                  )
                   b
                )
              )
            )
             (
              begin (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          not (
                            equal? y 0
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                t (
                                  _mod x y
                                )
                              )
                            )
                             (
                              begin (
                                set! x y
                              )
                               (
                                set! y t
                              )
                            )
                          )
                           (
                            loop2
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               x
            )
          )
        )
      )
    )
     (
      define (
        extended_gcd a b
      )
       (
        call/cc (
          lambda (
            ret3
          )
           (
            begin (
              if (
                equal? b 0
              )
               (
                begin (
                  ret3 (
                    _list a 1 0
                  )
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  res (
                    extended_gcd b (
                      _mod a b
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      d (
                        cond (
                          (
                            string? res
                          )
                           (
                            _substring res 0 (
                              + 0 1
                            )
                          )
                        )
                         (
                          (
                            hash-table? res
                          )
                           (
                            hash-table-ref res 0
                          )
                        )
                         (
                          else (
                            list-ref-safe res 0
                          )
                        )
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          p (
                            cond (
                              (
                                string? res
                              )
                               (
                                _substring res 1 (
                                  + 1 1
                                )
                              )
                            )
                             (
                              (
                                hash-table? res
                              )
                               (
                                hash-table-ref res 1
                              )
                            )
                             (
                              else (
                                list-ref-safe res 1
                              )
                            )
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              q (
                                cond (
                                  (
                                    string? res
                                  )
                                   (
                                    _substring res 2 (
                                      + 2 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? res
                                  )
                                   (
                                    hash-table-ref res 2
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe res 2
                                  )
                                )
                              )
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  x q
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      y (
                                        - p (
                                          * q (
                                            _div a b
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      ret3 (
                                        _list d x y
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        extended_euclid a b
      )
       (
        call/cc (
          lambda (
            ret4
          )
           (
            begin (
              if (
                equal? b 0
              )
               (
                begin (
                  ret4 (
                    _list 1 0
                  )
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  res (
                    extended_euclid b (
                      _mod a b
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      x (
                        cond (
                          (
                            string? res
                          )
                           (
                            _substring res 1 (
                              + 1 1
                            )
                          )
                        )
                         (
                          (
                            hash-table? res
                          )
                           (
                            hash-table-ref res 1
                          )
                        )
                         (
                          else (
                            list-ref-safe res 1
                          )
                        )
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          y (
                            - (
                              cond (
                                (
                                  string? res
                                )
                                 (
                                  _substring res 0 (
                                    + 0 1
                                  )
                                )
                              )
                               (
                                (
                                  hash-table? res
                                )
                                 (
                                  hash-table-ref res 0
                                )
                              )
                               (
                                else (
                                  list-ref-safe res 0
                                )
                              )
                            )
                             (
                              * (
                                _div a b
                              )
                               (
                                cond (
                                  (
                                    string? res
                                  )
                                   (
                                    _substring res 1 (
                                      + 1 1
                                    )
                                  )
                                )
                                 (
                                  (
                                    hash-table? res
                                  )
                                   (
                                    hash-table-ref res 1
                                  )
                                )
                                 (
                                  else (
                                    list-ref-safe res 1
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                       (
                        begin (
                          ret4 (
                            _list x y
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        invert_modulo a n
      )
       (
        let (
          (
            res (
              extended_euclid a n
            )
          )
        )
         (
          begin (
            let (
              (
                inv (
                  cond (
                    (
                      string? res
                    )
                     (
                      _substring res 0 (
                        + 0 1
                      )
                    )
                  )
                   (
                    (
                      hash-table? res
                    )
                     (
                      hash-table-ref res 0
                    )
                  )
                   (
                    else (
                      list-ref-safe res 0
                    )
                  )
                )
              )
            )
             (
              begin (
                mod inv n
              )
            )
          )
        )
      )
    )
     (
      define (
        modular_division a b n
      )
       (
        begin (
          if (
            <= n 1
          )
           (
            begin (
              panic "n must be > 1"
            )
          )
           (
            void
          )
        )
         (
          if (
            <= a 0
          )
           (
            begin (
              panic "a must be > 0"
            )
          )
           (
            void
          )
        )
         (
          if (
            not (
              equal? (
                greatest_common_divisor a n
              )
               1
            )
          )
           (
            begin (
              panic "gcd(a,n) != 1"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              eg (
                extended_gcd n a
              )
            )
          )
           (
            begin (
              let (
                (
                  s (
                    cond (
                      (
                        string? eg
                      )
                       (
                        _substring eg 2 (
                          + 2 1
                        )
                      )
                    )
                     (
                      (
                        hash-table? eg
                      )
                       (
                        hash-table-ref eg 2
                      )
                    )
                     (
                      else (
                        list-ref-safe eg 2
                      )
                    )
                  )
                )
              )
               (
                begin (
                  mod (
                    * b s
                  )
                   n
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        modular_division2 a b n
      )
       (
        let (
          (
            s (
              invert_modulo a n
            )
          )
        )
         (
          begin (
            mod (
              * b s
            )
             n
          )
        )
      )
    )
     (
      define (
        tests
      )
       (
        begin (
          if (
            not (
              equal? (
                modular_division 4 8 5
              )
               2
            )
          )
           (
            begin (
              panic "md1"
            )
          )
           (
            void
          )
        )
         (
          if (
            not (
              equal? (
                modular_division 3 8 5
              )
               1
            )
          )
           (
            begin (
              panic "md2"
            )
          )
           (
            void
          )
        )
         (
          if (
            not (
              equal? (
                modular_division 4 11 5
              )
               4
            )
          )
           (
            begin (
              panic "md3"
            )
          )
           (
            void
          )
        )
         (
          if (
            not (
              equal? (
                modular_division2 4 8 5
              )
               2
            )
          )
           (
            begin (
              panic "md21"
            )
          )
           (
            void
          )
        )
         (
          if (
            not (
              equal? (
                modular_division2 3 8 5
              )
               1
            )
          )
           (
            begin (
              panic "md22"
            )
          )
           (
            void
          )
        )
         (
          if (
            not (
              equal? (
                modular_division2 4 11 5
              )
               4
            )
          )
           (
            begin (
              panic "md23"
            )
          )
           (
            void
          )
        )
         (
          if (
            not (
              equal? (
                invert_modulo 2 5
              )
               3
            )
          )
           (
            begin (
              panic "inv"
            )
          )
           (
            void
          )
        )
         (
          let (
            (
              eg (
                extended_gcd 10 6
              )
            )
          )
           (
            begin (
              if (
                or (
                  or (
                    not (
                      equal? (
                        cond (
                          (
                            string? eg
                          )
                           (
                            _substring eg 0 (
                              + 0 1
                            )
                          )
                        )
                         (
                          (
                            hash-table? eg
                          )
                           (
                            hash-table-ref eg 0
                          )
                        )
                         (
                          else (
                            list-ref-safe eg 0
                          )
                        )
                      )
                       2
                    )
                  )
                   (
                    not (
                      equal? (
                        cond (
                          (
                            string? eg
                          )
                           (
                            _substring eg 1 (
                              + 1 1
                            )
                          )
                        )
                         (
                          (
                            hash-table? eg
                          )
                           (
                            hash-table-ref eg 1
                          )
                        )
                         (
                          else (
                            list-ref-safe eg 1
                          )
                        )
                      )
                       (
                        - 1
                      )
                    )
                  )
                )
                 (
                  not (
                    equal? (
                      cond (
                        (
                          string? eg
                        )
                         (
                          _substring eg 2 (
                            + 2 1
                          )
                        )
                      )
                       (
                        (
                          hash-table? eg
                        )
                         (
                          hash-table-ref eg 2
                        )
                      )
                       (
                        else (
                          list-ref-safe eg 2
                        )
                      )
                    )
                     2
                  )
                )
              )
               (
                begin (
                  panic "eg"
                )
              )
               (
                void
              )
            )
             (
              let (
                (
                  eu (
                    extended_euclid 10 6
                  )
                )
              )
               (
                begin (
                  if (
                    or (
                      not (
                        equal? (
                          cond (
                            (
                              string? eu
                            )
                             (
                              _substring eu 0 (
                                + 0 1
                              )
                            )
                          )
                           (
                            (
                              hash-table? eu
                            )
                             (
                              hash-table-ref eu 0
                            )
                          )
                           (
                            else (
                              list-ref-safe eu 0
                            )
                          )
                        )
                         (
                          - 1
                        )
                      )
                    )
                     (
                      not (
                        equal? (
                          cond (
                            (
                              string? eu
                            )
                             (
                              _substring eu 1 (
                                + 1 1
                              )
                            )
                          )
                           (
                            (
                              hash-table? eu
                            )
                             (
                              hash-table-ref eu 1
                            )
                          )
                           (
                            else (
                              list-ref-safe eu 1
                            )
                          )
                        )
                         2
                      )
                    )
                  )
                   (
                    begin (
                      panic "eu"
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  if (
                    not (
                      equal? (
                        greatest_common_divisor 121 11
                      )
                       11
                    )
                  )
                   (
                    begin (
                      panic "gcd"
                    )
                  )
                   (
                    void
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        main
      )
       (
        begin (
          tests
        )
         (
          _display (
            if (
              string? (
                to-str-space (
                  modular_division 4 8 5
                )
              )
            )
             (
              to-str-space (
                modular_division 4 8 5
              )
            )
             (
              to-str (
                to-str-space (
                  modular_division 4 8 5
                )
              )
            )
          )
        )
         (
          newline
        )
      )
    )
     (
      main
    )
     (
      let (
        (
          end6 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur7 (
              quotient (
                * (
                  - end6 start5
                )
                 1000000
              )
               jps8
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur7
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
