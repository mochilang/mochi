;; Generated by Mochi Scheme transpiler on 2025-08-24 23:17 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        ((list? x) (length x))
        ((vector? x) (vector-length x))
        (else 0)))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start12 (
        current-jiffy
      )
    )
     (
      jps15 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          seed 1
        )
      )
       (
        begin (
          define (
            rand
          )
           (
            begin (
              set! seed (
                _mod (
                  + (
                    * seed 1103515245
                  )
                   12345
                )
                 2147483648
              )
            )
             seed
          )
        )
         (
          define (
            random
          )
           (
            _div (
              * 1.0 (
                rand
              )
            )
             2.147483648e+09
          )
        )
         (
          define (
            hypercube_points num_points cube_size num_dimensions
          )
           (
            let (
              (
                pts (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop1 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i num_points
                            )
                             (
                              begin (
                                let (
                                  (
                                    p (
                                      _list
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        j 0
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop2 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  < j num_dimensions
                                                )
                                                 (
                                                  begin (
                                                    set! p (
                                                      append p (
                                                        _list (
                                                          * cube_size (
                                                            random
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      + j 1
                                                    )
                                                  )
                                                   (
                                                    loop2
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop2
                                        )
                                      )
                                       (
                                        set! pts (
                                          append pts (
                                            _list p
                                          )
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop1
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop1
                    )
                  )
                   pts
                )
              )
            )
          )
        )
         (
          define (
            sort_points points axis
          )
           (
            let (
              (
                n (
                  _len points
                )
              )
            )
             (
              begin (
                let (
                  (
                    i 1
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop3 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i n
                            )
                             (
                              begin (
                                let (
                                  (
                                    key (
                                      list-ref-safe points i
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        j (
                                          - i 1
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        letrec (
                                          (
                                            loop4 (
                                              lambda (
                                                
                                              )
                                               (
                                                if (
                                                  and (
                                                    >= j 0
                                                  )
                                                   (
                                                    > (
                                                      cond (
                                                        (
                                                          string? (
                                                            list-ref-safe points j
                                                          )
                                                        )
                                                         (
                                                          _substring (
                                                            list-ref-safe points j
                                                          )
                                                           axis (
                                                            + axis 1
                                                          )
                                                        )
                                                      )
                                                       (
                                                        (
                                                          hash-table? (
                                                            list-ref-safe points j
                                                          )
                                                        )
                                                         (
                                                          hash-table-ref (
                                                            list-ref-safe points j
                                                          )
                                                           axis
                                                        )
                                                      )
                                                       (
                                                        else (
                                                          list-ref-safe (
                                                            list-ref-safe points j
                                                          )
                                                           axis
                                                        )
                                                      )
                                                    )
                                                     (
                                                      list-ref-safe key axis
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    list-set-safe! points (
                                                      + j 1
                                                    )
                                                     (
                                                      list-ref-safe points j
                                                    )
                                                  )
                                                   (
                                                    set! j (
                                                      - j 1
                                                    )
                                                  )
                                                   (
                                                    loop4
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                            )
                                          )
                                        )
                                         (
                                          loop4
                                        )
                                      )
                                       (
                                        list-set-safe! points (
                                          + j 1
                                        )
                                         key
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                               (
                                loop3
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop3
                    )
                  )
                   points
                )
              )
            )
          )
        )
         (
          define (
            sublist arr start end
          )
           (
            let (
              (
                res (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    i start
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop5 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i end
                            )
                             (
                              begin (
                                set! res (
                                  append res (
                                    _list (
                                      list-ref-safe arr i
                                    )
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop5
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop5
                    )
                  )
                   res
                )
              )
            )
          )
        )
         (
          define (
            shift_nodes nodes offset
          )
           (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop6 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len nodes
                          )
                        )
                         (
                          begin (
                            if (
                              not (
                                _eq (
                                  hash-table-ref (
                                    list-ref-safe nodes i
                                  )
                                   "left"
                                )
                                 (
                                  - 0 1
                                )
                              )
                            )
                             (
                              begin (
                                hash-table-set! (
                                  list-ref-safe nodes i
                                )
                                 "left" (
                                  + (
                                    hash-table-ref (
                                      list-ref-safe nodes i
                                    )
                                     "left"
                                  )
                                   offset
                                )
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            if (
                              not (
                                _eq (
                                  hash-table-ref (
                                    list-ref-safe nodes i
                                  )
                                   "right"
                                )
                                 (
                                  - 0 1
                                )
                              )
                            )
                             (
                              begin (
                                hash-table-set! (
                                  list-ref-safe nodes i
                                )
                                 "right" (
                                  + (
                                    hash-table-ref (
                                      list-ref-safe nodes i
                                    )
                                     "right"
                                  )
                                   offset
                                )
                              )
                            )
                             (
                              void
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop6
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop6
                )
              )
               nodes
            )
          )
        )
         (
          define (
            build_kdtree points depth
          )
           (
            call/cc (
              lambda (
                ret7
              )
               (
                begin (
                  if (
                    _eq (
                      _len points
                    )
                     0
                  )
                   (
                    begin (
                      ret7 (
                        alist->hash-table (
                          _list (
                            cons "index" (
                              - 0 1
                            )
                          )
                           (
                            cons "nodes" (
                              _list
                            )
                          )
                        )
                      )
                    )
                  )
                   (
                    void
                  )
                )
                 (
                  let (
                    (
                      k (
                        _len (
                          list-ref-safe points 0
                        )
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          axis (
                            _mod depth k
                          )
                        )
                      )
                       (
                        begin (
                          set! points (
                            sort_points points axis
                          )
                        )
                         (
                          let (
                            (
                              median (
                                _div (
                                  _len points
                                )
                                 2
                              )
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  left_points (
                                    sublist points 0 median
                                  )
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      right_points (
                                        sublist points (
                                          + median 1
                                        )
                                         (
                                          _len points
                                        )
                                      )
                                    )
                                  )
                                   (
                                    begin (
                                      let (
                                        (
                                          left_res (
                                            build_kdtree left_points (
                                              + depth 1
                                            )
                                          )
                                        )
                                      )
                                       (
                                        begin (
                                          let (
                                            (
                                              right_res (
                                                build_kdtree right_points (
                                                  + depth 1
                                                )
                                              )
                                            )
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  offset (
                                                    + (
                                                      _len (
                                                        hash-table-ref left_res "nodes"
                                                      )
                                                    )
                                                     1
                                                  )
                                                )
                                              )
                                               (
                                                begin (
                                                  let (
                                                    (
                                                      shifted_right (
                                                        shift_nodes (
                                                          hash-table-ref right_res "nodes"
                                                        )
                                                         offset
                                                      )
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      let (
                                                        (
                                                          nodes (
                                                            hash-table-ref left_res "nodes"
                                                          )
                                                        )
                                                      )
                                                       (
                                                        begin (
                                                          let (
                                                            (
                                                              left_index (
                                                                hash-table-ref left_res "index"
                                                              )
                                                            )
                                                          )
                                                           (
                                                            begin (
                                                              let (
                                                                (
                                                                  right_index (
                                                                    if (
                                                                      _eq (
                                                                        hash-table-ref right_res "index"
                                                                      )
                                                                       (
                                                                        - 0 1
                                                                      )
                                                                    )
                                                                     (
                                                                      - 0 1
                                                                    )
                                                                     (
                                                                      _add (
                                                                        hash-table-ref right_res "index"
                                                                      )
                                                                       offset
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                               (
                                                                begin (
                                                                  set! nodes (
                                                                    append nodes (
                                                                      _list (
                                                                        alist->hash-table (
                                                                          _list (
                                                                            cons "point" (
                                                                              list-ref-safe points median
                                                                            )
                                                                          )
                                                                           (
                                                                            cons "left" left_index
                                                                          )
                                                                           (
                                                                            cons "right" right_index
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                                 (
                                                                  set! nodes (
                                                                    append nodes shifted_right
                                                                  )
                                                                )
                                                                 (
                                                                  let (
                                                                    (
                                                                      root_index (
                                                                        _len (
                                                                          hash-table-ref left_res "nodes"
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    begin (
                                                                      ret7 (
                                                                        alist->hash-table (
                                                                          _list (
                                                                            cons "index" root_index
                                                                          )
                                                                           (
                                                                            cons "nodes" nodes
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            square_distance a b
          )
           (
            let (
              (
                sum 0.0
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop8 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len a
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    diff (
                                      - (
                                        list-ref-safe a i
                                      )
                                       (
                                        list-ref-safe b i
                                      )
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    set! sum (
                                      _add sum (
                                        * diff diff
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                               (
                                loop8
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop8
                    )
                  )
                   sum
                )
              )
            )
          )
        )
         (
          define (
            nearest_neighbour_search tree root query_point
          )
           (
            let (
              (
                nearest_point (
                  _list
                )
              )
            )
             (
              begin (
                let (
                  (
                    nearest_dist 0.0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        visited 0
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            i 0
                          )
                        )
                         (
                          begin (
                            letrec (
                              (
                                loop9 (
                                  lambda (
                                    
                                  )
                                   (
                                    if (
                                      < i (
                                        _len tree
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            node (
                                              list-ref-safe tree i
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                dist (
                                                  square_distance query_point (
                                                    hash-table-ref node "point"
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! visited (
                                                  + visited 1
                                                )
                                              )
                                               (
                                                if (
                                                  or (
                                                    _eq visited 1
                                                  )
                                                   (
                                                    _lt dist nearest_dist
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    set! nearest_point (
                                                      hash-table-ref node "point"
                                                    )
                                                  )
                                                   (
                                                    set! nearest_dist dist
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                               (
                                                set! i (
                                                  + i 1
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop9
                                      )
                                    )
                                     (
                                      void
                                    )
                                  )
                                )
                              )
                            )
                             (
                              loop9
                            )
                          )
                           (
                            alist->hash-table (
                              _list (
                                cons "point" nearest_point
                              )
                               (
                                cons "dist" nearest_dist
                              )
                               (
                                cons "visited" visited
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
         (
          define (
            list_to_string arr
          )
           (
            let (
              (
                s "["
              )
            )
             (
              begin (
                let (
                  (
                    i 0
                  )
                )
                 (
                  begin (
                    letrec (
                      (
                        loop10 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len arr
                              )
                            )
                             (
                              begin (
                                set! s (
                                  string-append s (
                                    to-str-space (
                                      list-ref-safe arr i
                                    )
                                  )
                                )
                              )
                               (
                                if (
                                  < i (
                                    - (
                                      _len arr
                                    )
                                     1
                                  )
                                )
                                 (
                                  begin (
                                    set! s (
                                      string-append s ", "
                                    )
                                  )
                                )
                                 (
                                  void
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop10
                              )
                            )
                             (
                              void
                            )
                          )
                        )
                      )
                    )
                     (
                      loop10
                    )
                  )
                   (
                    string-append s "]"
                  )
                )
              )
            )
          )
        )
         (
          define (
            main
          )
           (
            let (
              (
                num_points 5000
              )
            )
             (
              begin (
                let (
                  (
                    cube_size 10.0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        num_dimensions 10
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            pts (
                              hypercube_points num_points cube_size num_dimensions
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                build (
                                  build_kdtree pts 0
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    root (
                                      hash-table-ref build "index"
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        tree (
                                          hash-table-ref build "nodes"
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            query (
                                              _list
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                i 0
                                              )
                                            )
                                             (
                                              begin (
                                                letrec (
                                                  (
                                                    loop11 (
                                                      lambda (
                                                        
                                                      )
                                                       (
                                                        if (
                                                          < i num_dimensions
                                                        )
                                                         (
                                                          begin (
                                                            set! query (
                                                              append query (
                                                                _list (
                                                                  random
                                                                )
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! i (
                                                              + i 1
                                                            )
                                                          )
                                                           (
                                                            loop11
                                                          )
                                                        )
                                                         (
                                                          void
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop11
                                                )
                                              )
                                               (
                                                let (
                                                  (
                                                    res (
                                                      nearest_neighbour_search tree root query
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    _display (
                                                      if (
                                                        string? (
                                                          string-append "Query point: " (
                                                            list_to_string query
                                                          )
                                                        )
                                                      )
                                                       (
                                                        string-append "Query point: " (
                                                          list_to_string query
                                                        )
                                                      )
                                                       (
                                                        to-str (
                                                          string-append "Query point: " (
                                                            list_to_string query
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    newline
                                                  )
                                                   (
                                                    _display (
                                                      if (
                                                        string? (
                                                          string-append "Nearest point: " (
                                                            list_to_string (
                                                              hash-table-ref res "point"
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        string-append "Nearest point: " (
                                                          list_to_string (
                                                            hash-table-ref res "point"
                                                          )
                                                        )
                                                      )
                                                       (
                                                        to-str (
                                                          string-append "Nearest point: " (
                                                            list_to_string (
                                                              hash-table-ref res "point"
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    newline
                                                  )
                                                   (
                                                    _display (
                                                      if (
                                                        string? (
                                                          string-append "Distance: " (
                                                            to-str-space (
                                                              hash-table-ref res "dist"
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        string-append "Distance: " (
                                                          to-str-space (
                                                            hash-table-ref res "dist"
                                                          )
                                                        )
                                                      )
                                                       (
                                                        to-str (
                                                          string-append "Distance: " (
                                                            to-str-space (
                                                              hash-table-ref res "dist"
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    newline
                                                  )
                                                   (
                                                    _display (
                                                      if (
                                                        string? (
                                                          string-append "Nodes visited: " (
                                                            to-str-space (
                                                              hash-table-ref res "visited"
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        string-append "Nodes visited: " (
                                                          to-str-space (
                                                            hash-table-ref res "visited"
                                                          )
                                                        )
                                                      )
                                                       (
                                                        to-str (
                                                          string-append "Nodes visited: " (
                                                            to-str-space (
                                                              hash-table-ref res "visited"
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    newline
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
         (
          main
        )
      )
    )
     (
      let (
        (
          end13 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur14 (
              quotient (
                * (
                  - end13 start12
                )
                 1000000
              )
               jps15
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur14
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
