;; Generated by Mochi Scheme transpiler on 2025-08-24 23:17 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        ((list? x) (length x))
        ((vector? x) (vector-length x))
        (else 0)))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start9 (
        current-jiffy
      )
    )
     (
      jps12 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      let (
        (
          INF 1e+09
        )
      )
       (
        begin (
          let (
            (
              seed 1
            )
          )
           (
            begin (
              define (
                rand_float
              )
               (
                begin (
                  set! seed (
                    _mod (
                      + (
                        * seed 1103515245
                      )
                       12345
                    )
                     2147483648
                  )
                )
                 (
                  _div (
                    let (
                      (
                        v1 seed
                      )
                    )
                     (
                      cond (
                        (
                          string? v1
                        )
                         (
                          string->number v1
                        )
                      )
                       (
                        (
                          boolean? v1
                        )
                         (
                          if v1 1.0 0.0
                        )
                      )
                       (
                        else (
                          exact->inexact v1
                        )
                      )
                    )
                  )
                   2.147483648e+09
                )
              )
            )
             (
              define (
                hypercube_points num_points cube_size num_dimensions
              )
               (
                let (
                  (
                    pts (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop2 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i num_points
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        p (
                                          _list
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            j 0
                                          )
                                        )
                                         (
                                          begin (
                                            letrec (
                                              (
                                                loop3 (
                                                  lambda (
                                                    
                                                  )
                                                   (
                                                    if (
                                                      < j num_dimensions
                                                    )
                                                     (
                                                      begin (
                                                        let (
                                                          (
                                                            v (
                                                              * cube_size (
                                                                rand_float
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          begin (
                                                            set! p (
                                                              append p (
                                                                _list v
                                                              )
                                                            )
                                                          )
                                                           (
                                                            set! j (
                                                              + j 1
                                                            )
                                                          )
                                                        )
                                                      )
                                                       (
                                                        loop3
                                                      )
                                                    )
                                                     (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                             (
                                              loop3
                                            )
                                          )
                                           (
                                            set! pts (
                                              append pts (
                                                _list p
                                              )
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop2
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop2
                        )
                      )
                       pts
                    )
                  )
                )
              )
            )
             (
              define (
                build_kdtree points depth
              )
               points
            )
             (
              define (
                distance_sq a b
              )
               (
                let (
                  (
                    sum 0.0
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop4 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len a
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        d (
                                          - (
                                            list-ref-safe a i
                                          )
                                           (
                                            list-ref-safe b i
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        set! sum (
                                          _add sum (
                                            * d d
                                          )
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop4
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop4
                        )
                      )
                       sum
                    )
                  )
                )
              )
            )
             (
              define (
                nearest_neighbour_search points query
              )
               (
                call/cc (
                  lambda (
                    ret5
                  )
                   (
                    begin (
                      if (
                        _eq (
                          _len points
                        )
                         0
                      )
                       (
                        begin (
                          ret5 (
                            alist->hash-table (
                              _list (
                                cons "index" (
                                  - 1.0
                                )
                              )
                               (
                                cons "dist" INF
                              )
                               (
                                cons "visited" 0.0
                              )
                            )
                          )
                        )
                      )
                       (
                        void
                      )
                    )
                     (
                      let (
                        (
                          nearest_idx 0
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              nearest_dist INF
                            )
                          )
                           (
                            begin (
                              let (
                                (
                                  visited 0
                                )
                              )
                               (
                                begin (
                                  let (
                                    (
                                      i 0
                                    )
                                  )
                                   (
                                    begin (
                                      letrec (
                                        (
                                          loop6 (
                                            lambda (
                                              
                                            )
                                             (
                                              if (
                                                < i (
                                                  _len points
                                                )
                                              )
                                               (
                                                begin (
                                                  let (
                                                    (
                                                      d (
                                                        distance_sq query (
                                                          list-ref-safe points i
                                                        )
                                                      )
                                                    )
                                                  )
                                                   (
                                                    begin (
                                                      set! visited (
                                                        + visited 1
                                                      )
                                                    )
                                                     (
                                                      if (
                                                        _lt d nearest_dist
                                                      )
                                                       (
                                                        begin (
                                                          set! nearest_dist d
                                                        )
                                                         (
                                                          set! nearest_idx i
                                                        )
                                                      )
                                                       (
                                                        void
                                                      )
                                                    )
                                                     (
                                                      set! i (
                                                        + i 1
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  loop6
                                                )
                                              )
                                               (
                                                void
                                              )
                                            )
                                          )
                                        )
                                      )
                                       (
                                        loop6
                                      )
                                    )
                                     (
                                      ret5 (
                                        alist->hash-table (
                                          _list (
                                            cons "index" (
                                              let (
                                                (
                                                  v7 nearest_idx
                                                )
                                              )
                                               (
                                                cond (
                                                  (
                                                    string? v7
                                                  )
                                                   (
                                                    string->number v7
                                                  )
                                                )
                                                 (
                                                  (
                                                    boolean? v7
                                                  )
                                                   (
                                                    if v7 1.0 0.0
                                                  )
                                                )
                                                 (
                                                  else (
                                                    exact->inexact v7
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            cons "dist" nearest_dist
                                          )
                                           (
                                            cons "visited" (
                                              let (
                                                (
                                                  v8 visited
                                                )
                                              )
                                               (
                                                cond (
                                                  (
                                                    string? v8
                                                  )
                                                   (
                                                    string->number v8
                                                  )
                                                )
                                                 (
                                                  (
                                                    boolean? v8
                                                  )
                                                   (
                                                    if v8 1.0 0.0
                                                  )
                                                )
                                                 (
                                                  else (
                                                    exact->inexact v8
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                test_build_cases
              )
               (
                let (
                  (
                    empty_pts (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        tree0 (
                          build_kdtree empty_pts 0
                        )
                      )
                    )
                     (
                      begin (
                        if (
                          _eq (
                            _len tree0
                          )
                           0
                        )
                         (
                          begin (
                            _display (
                              if (
                                string? "case1 true"
                              )
                               "case1 true" (
                                to-str "case1 true"
                              )
                            )
                          )
                           (
                            newline
                          )
                        )
                         (
                          begin (
                            _display (
                              if (
                                string? "case1 false"
                              )
                               "case1 false" (
                                to-str "case1 false"
                              )
                            )
                          )
                           (
                            newline
                          )
                        )
                      )
                       (
                        let (
                          (
                            pts1 (
                              hypercube_points 10 10.0 2
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                tree1 (
                                  build_kdtree pts1 2
                                )
                              )
                            )
                             (
                              begin (
                                if (
                                  and (
                                    > (
                                      _len tree1
                                    )
                                     0
                                  )
                                   (
                                    _eq (
                                      _len (
                                        cond (
                                          (
                                            string? tree1
                                          )
                                           (
                                            _substring tree1 0 (
                                              + 0 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? tree1
                                          )
                                           (
                                            hash-table-ref tree1 0
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe tree1 0
                                          )
                                        )
                                      )
                                    )
                                     2
                                  )
                                )
                                 (
                                  begin (
                                    _display (
                                      if (
                                        string? "case2 true"
                                      )
                                       "case2 true" (
                                        to-str "case2 true"
                                      )
                                    )
                                  )
                                   (
                                    newline
                                  )
                                )
                                 (
                                  begin (
                                    _display (
                                      if (
                                        string? "case2 false"
                                      )
                                       "case2 false" (
                                        to-str "case2 false"
                                      )
                                    )
                                  )
                                   (
                                    newline
                                  )
                                )
                              )
                               (
                                let (
                                  (
                                    pts2 (
                                      hypercube_points 10 10.0 3
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        tree2 (
                                          build_kdtree pts2 (
                                            - 2
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        if (
                                          and (
                                            > (
                                              _len tree2
                                            )
                                             0
                                          )
                                           (
                                            _eq (
                                              _len (
                                                cond (
                                                  (
                                                    string? tree2
                                                  )
                                                   (
                                                    _substring tree2 0 (
                                                      + 0 1
                                                    )
                                                  )
                                                )
                                                 (
                                                  (
                                                    hash-table? tree2
                                                  )
                                                   (
                                                    hash-table-ref tree2 0
                                                  )
                                                )
                                                 (
                                                  else (
                                                    list-ref-safe tree2 0
                                                  )
                                                )
                                              )
                                            )
                                             3
                                          )
                                        )
                                         (
                                          begin (
                                            _display (
                                              if (
                                                string? "case3 true"
                                              )
                                               "case3 true" (
                                                to-str "case3 true"
                                              )
                                            )
                                          )
                                           (
                                            newline
                                          )
                                        )
                                         (
                                          begin (
                                            _display (
                                              if (
                                                string? "case3 false"
                                              )
                                               "case3 false" (
                                                to-str "case3 false"
                                              )
                                            )
                                          )
                                           (
                                            newline
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                test_search
              )
               (
                let (
                  (
                    pts (
                      hypercube_points 10 10.0 2
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        tree (
                          build_kdtree pts 0
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            qp (
                              cond (
                                (
                                  string? (
                                    hypercube_points 1 10.0 2
                                  )
                                )
                                 (
                                  _substring (
                                    hypercube_points 1 10.0 2
                                  )
                                   0 (
                                    + 0 1
                                  )
                                )
                              )
                               (
                                (
                                  hash-table? (
                                    hypercube_points 1 10.0 2
                                  )
                                )
                                 (
                                  hash-table-ref (
                                    hypercube_points 1 10.0 2
                                  )
                                   0
                                )
                              )
                               (
                                else (
                                  list-ref-safe (
                                    hypercube_points 1 10.0 2
                                  )
                                   0
                                )
                              )
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                res (
                                  nearest_neighbour_search tree qp
                                )
                              )
                            )
                             (
                              begin (
                                if (
                                  and (
                                    and (
                                      not (
                                        _eq (
                                          cond (
                                            (
                                              string? res
                                            )
                                             (
                                              _substring res "index" (
                                                + "index" 1
                                              )
                                            )
                                          )
                                           (
                                            (
                                              hash-table? res
                                            )
                                             (
                                              hash-table-ref res "index"
                                            )
                                          )
                                           (
                                            else (
                                              list-ref-safe res "index"
                                            )
                                          )
                                        )
                                         (
                                          - 1.0
                                        )
                                      )
                                    )
                                     (
                                      _ge (
                                        cond (
                                          (
                                            string? res
                                          )
                                           (
                                            _substring res "dist" (
                                              + "dist" 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? res
                                          )
                                           (
                                            hash-table-ref res "dist"
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe res "dist"
                                          )
                                        )
                                      )
                                       0.0
                                    )
                                  )
                                   (
                                    _gt (
                                      cond (
                                        (
                                          string? res
                                        )
                                         (
                                          _substring res "visited" (
                                            + "visited" 1
                                          )
                                        )
                                      )
                                       (
                                        (
                                          hash-table? res
                                        )
                                         (
                                          hash-table-ref res "visited"
                                        )
                                      )
                                       (
                                        else (
                                          list-ref-safe res "visited"
                                        )
                                      )
                                    )
                                     0.0
                                  )
                                )
                                 (
                                  begin (
                                    _display (
                                      if (
                                        string? "search true"
                                      )
                                       "search true" (
                                        to-str "search true"
                                      )
                                    )
                                  )
                                   (
                                    newline
                                  )
                                )
                                 (
                                  begin (
                                    _display (
                                      if (
                                        string? "search false"
                                      )
                                       "search false" (
                                        to-str "search false"
                                      )
                                    )
                                  )
                                   (
                                    newline
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                test_edge
              )
               (
                let (
                  (
                    empty_pts (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        tree (
                          build_kdtree empty_pts 0
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            query (
                              _list 0.0 0.0
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                res (
                                  nearest_neighbour_search tree query
                                )
                              )
                            )
                             (
                              begin (
                                if (
                                  and (
                                    and (
                                      _eq (
                                        cond (
                                          (
                                            string? res
                                          )
                                           (
                                            _substring res "index" (
                                              + "index" 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? res
                                          )
                                           (
                                            hash-table-ref res "index"
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe res "index"
                                          )
                                        )
                                      )
                                       (
                                        - 1.0
                                      )
                                    )
                                     (
                                      _gt (
                                        cond (
                                          (
                                            string? res
                                          )
                                           (
                                            _substring res "dist" (
                                              + "dist" 1
                                            )
                                          )
                                        )
                                         (
                                          (
                                            hash-table? res
                                          )
                                           (
                                            hash-table-ref res "dist"
                                          )
                                        )
                                         (
                                          else (
                                            list-ref-safe res "dist"
                                          )
                                        )
                                      )
                                       1e+08
                                    )
                                  )
                                   (
                                    _eq (
                                      cond (
                                        (
                                          string? res
                                        )
                                         (
                                          _substring res "visited" (
                                            + "visited" 1
                                          )
                                        )
                                      )
                                       (
                                        (
                                          hash-table? res
                                        )
                                         (
                                          hash-table-ref res "visited"
                                        )
                                      )
                                       (
                                        else (
                                          list-ref-safe res "visited"
                                        )
                                      )
                                    )
                                     0.0
                                  )
                                )
                                 (
                                  begin (
                                    _display (
                                      if (
                                        string? "edge true"
                                      )
                                       "edge true" (
                                        to-str "edge true"
                                      )
                                    )
                                  )
                                   (
                                    newline
                                  )
                                )
                                 (
                                  begin (
                                    _display (
                                      if (
                                        string? "edge false"
                                      )
                                       "edge false" (
                                        to-str "edge false"
                                      )
                                    )
                                  )
                                   (
                                    newline
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
             (
              define (
                main
              )
               (
                begin (
                  set! seed 1
                )
                 (
                  test_build_cases
                )
                 (
                  test_search
                )
                 (
                  test_edge
                )
              )
            )
             (
              main
            )
          )
        )
      )
    )
     (
      let (
        (
          end10 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur11 (
              quotient (
                * (
                  - end10 start9
                )
                 1000000
              )
               jps12
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur11
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
