;; Generated by Mochi Scheme transpiler on 2025-08-24 23:17 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(define (void) '())
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
       ((number? x)
        (if (integer? x)
            (number->string (inexact->exact x))
            (number->string (exact->inexact x))))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_eq a b) (cond ((and (number? a) (number? b)) (if (or (inexact? a) (inexact? b)) (< (abs (- a b)) 1e-6) (= a b))) ((and (string? a) (string? b)) (string=? a b)) (else (equal? a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        ((list? x) (length x))
        ((vector? x) (vector-length x))
        (else 0)))
(define (list-ref-safe lst idx) (if (and (number? idx) (>= idx 0) (< idx (length lst))) (list-ref lst (inexact->exact idx)) 0))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst (inexact->exact idx) val)))
(
  let (
    (
      start13 (
        current-jiffy
      )
    )
     (
      jps16 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        get_parent_idx idx
      )
       (
        _div (
          - idx 1
        )
         2
      )
    )
     (
      define (
        get_left_child_idx idx
      )
       (
        + (
          * idx 2
        )
         1
      )
    )
     (
      define (
        get_right_child_idx idx
      )
       (
        + (
          * idx 2
        )
         2
      )
    )
     (
      define (
        remove_key m k
      )
       (
        let (
          (
            out (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            call/cc (
              lambda (
                break2
              )
               (
                letrec (
                  (
                    loop1 (
                      lambda (
                        xs
                      )
                       (
                        if (
                          null? xs
                        )
                         (
                          void
                        )
                         (
                          begin (
                            let (
                              (
                                key (
                                  car xs
                                )
                              )
                            )
                             (
                              begin (
                                if (
                                  not (
                                    _eq key k
                                  )
                                )
                                 (
                                  begin (
                                    hash-table-set! out key (
                                      hash-table-ref/default m key (
                                        void
                                      )
                                    )
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                           (
                            loop1 (
                              cdr xs
                            )
                          )
                        )
                      )
                    )
                  )
                )
                 (
                  loop1 (
                    hash-table-keys m
                  )
                )
              )
            )
          )
           out
        )
      )
    )
     (
      define (
        slice_without_last xs
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop3 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            - (
                              _len xs
                            )
                             1
                          )
                        )
                         (
                          begin (
                            set! res (
                              append res (
                                _list (
                                  list-ref-safe xs i
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop3
                          )
                        )
                         (
                          void
                        )
                      )
                    )
                  )
                )
                 (
                  loop3
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        sift_down mh idx
      )
       (
        let (
          (
            heap (
              hash-table-ref mh "heap"
            )
          )
        )
         (
          begin (
            let (
              (
                idx_map (
                  hash-table-ref mh "idx_of_element"
                )
              )
            )
             (
              begin (
                let (
                  (
                    i idx
                  )
                )
                 (
                  begin (
                    call/cc (
                      lambda (
                        break5
                      )
                       (
                        letrec (
                          (
                            loop4 (
                              lambda (
                                
                              )
                               (
                                if #t (
                                  begin (
                                    let (
                                      (
                                        left (
                                          get_left_child_idx i
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            right (
                                              get_right_child_idx i
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                smallest i
                                              )
                                            )
                                             (
                                              begin (
                                                if (
                                                  and (
                                                    _lt left (
                                                      _len heap
                                                    )
                                                  )
                                                   (
                                                    < (
                                                      hash-table-ref (
                                                        list-ref-safe heap left
                                                      )
                                                       "val"
                                                    )
                                                     (
                                                      hash-table-ref (
                                                        list-ref-safe heap smallest
                                                      )
                                                       "val"
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    set! smallest left
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                               (
                                                if (
                                                  and (
                                                    _lt right (
                                                      _len heap
                                                    )
                                                  )
                                                   (
                                                    < (
                                                      hash-table-ref (
                                                        list-ref-safe heap right
                                                      )
                                                       "val"
                                                    )
                                                     (
                                                      hash-table-ref (
                                                        list-ref-safe heap smallest
                                                      )
                                                       "val"
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    set! smallest right
                                                  )
                                                )
                                                 (
                                                  void
                                                )
                                              )
                                               (
                                                if (
                                                  not (
                                                    _eq smallest i
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        tmp (
                                                          list-ref-safe heap i
                                                        )
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        list-set-safe! heap i (
                                                          list-ref-safe heap smallest
                                                        )
                                                      )
                                                       (
                                                        list-set-safe! heap smallest tmp
                                                      )
                                                       (
                                                        hash-table-set! idx_map (
                                                          hash-table-ref (
                                                            list-ref-safe heap i
                                                          )
                                                           "name"
                                                        )
                                                         i
                                                      )
                                                       (
                                                        hash-table-set! idx_map (
                                                          hash-table-ref (
                                                            list-ref-safe heap smallest
                                                          )
                                                           "name"
                                                        )
                                                         smallest
                                                      )
                                                       (
                                                        set! i smallest
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    break5 (
                                                      void
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop4
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop4
                        )
                      )
                    )
                  )
                   (
                    hash-table-set! mh "heap" heap
                  )
                   (
                    hash-table-set! mh "idx_of_element" idx_map
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        sift_up mh idx
      )
       (
        let (
          (
            heap (
              hash-table-ref mh "heap"
            )
          )
        )
         (
          begin (
            let (
              (
                idx_map (
                  hash-table-ref mh "idx_of_element"
                )
              )
            )
             (
              begin (
                let (
                  (
                    i idx
                  )
                )
                 (
                  begin (
                    let (
                      (
                        p (
                          get_parent_idx i
                        )
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop6 (
                              lambda (
                                
                              )
                               (
                                if (
                                  and (
                                    _ge p 0
                                  )
                                   (
                                    > (
                                      hash-table-ref (
                                        list-ref-safe heap p
                                      )
                                       "val"
                                    )
                                     (
                                      hash-table-ref (
                                        list-ref-safe heap i
                                      )
                                       "val"
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        tmp (
                                          list-ref-safe heap p
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        list-set-safe! heap p (
                                          list-ref-safe heap i
                                        )
                                      )
                                       (
                                        list-set-safe! heap i tmp
                                      )
                                       (
                                        hash-table-set! idx_map (
                                          hash-table-ref (
                                            list-ref-safe heap p
                                          )
                                           "name"
                                        )
                                         p
                                      )
                                       (
                                        hash-table-set! idx_map (
                                          hash-table-ref (
                                            list-ref-safe heap i
                                          )
                                           "name"
                                        )
                                         i
                                      )
                                       (
                                        set! i p
                                      )
                                       (
                                        set! p (
                                          get_parent_idx i
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop6
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop6
                        )
                      )
                       (
                        hash-table-set! mh "heap" heap
                      )
                       (
                        hash-table-set! mh "idx_of_element" idx_map
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        new_min_heap array
      )
       (
        let (
          (
            idx_map (
              alist->hash-table (
                _list
              )
            )
          )
        )
         (
          begin (
            let (
              (
                val_map (
                  alist->hash-table (
                    _list
                  )
                )
              )
            )
             (
              begin (
                let (
                  (
                    heap array
                  )
                )
                 (
                  begin (
                    let (
                      (
                        i 0
                      )
                    )
                     (
                      begin (
                        letrec (
                          (
                            loop7 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len array
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        n (
                                          list-ref-safe array i
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        hash-table-set! idx_map (
                                          hash-table-ref n "name"
                                        )
                                         i
                                      )
                                       (
                                        hash-table-set! val_map (
                                          hash-table-ref n "name"
                                        )
                                         (
                                          hash-table-ref n "val"
                                        )
                                      )
                                       (
                                        set! i (
                                          + i 1
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop7
                                  )
                                )
                                 (
                                  void
                                )
                              )
                            )
                          )
                        )
                         (
                          loop7
                        )
                      )
                       (
                        let (
                          (
                            mh (
                              alist->hash-table (
                                _list (
                                  cons "heap" heap
                                )
                                 (
                                  cons "idx_of_element" idx_map
                                )
                                 (
                                  cons "heap_dict" val_map
                                )
                              )
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                start (
                                  get_parent_idx (
                                    - (
                                      _len array
                                    )
                                     1
                                  )
                                )
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop8 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          _ge start 0
                                        )
                                         (
                                          begin (
                                            sift_down mh start
                                          )
                                           (
                                            set! start (
                                              - start 1
                                            )
                                          )
                                           (
                                            loop8
                                          )
                                        )
                                         (
                                          void
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop8
                                )
                              )
                               mh
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        peek mh
      )
       (
        list-ref-safe (
          hash-table-ref mh "heap"
        )
         0
      )
    )
     (
      define (
        remove_min mh
      )
       (
        let (
          (
            heap (
              hash-table-ref mh "heap"
            )
          )
        )
         (
          begin (
            let (
              (
                idx_map (
                  hash-table-ref mh "idx_of_element"
                )
              )
            )
             (
              begin (
                let (
                  (
                    val_map (
                      hash-table-ref mh "heap_dict"
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        last_idx (
                          - (
                            _len heap
                          )
                           1
                        )
                      )
                    )
                     (
                      begin (
                        let (
                          (
                            top (
                              list-ref-safe heap 0
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                last (
                                  list-ref-safe heap last_idx
                                )
                              )
                            )
                             (
                              begin (
                                list-set-safe! heap 0 last
                              )
                               (
                                hash-table-set! idx_map (
                                  hash-table-ref last "name"
                                )
                                 0
                              )
                               (
                                set! heap (
                                  slice_without_last heap
                                )
                              )
                               (
                                set! idx_map (
                                  remove_key idx_map (
                                    hash-table-ref top "name"
                                  )
                                )
                              )
                               (
                                set! val_map (
                                  remove_key val_map (
                                    hash-table-ref top "name"
                                  )
                                )
                              )
                               (
                                hash-table-set! mh "heap" heap
                              )
                               (
                                hash-table-set! mh "idx_of_element" idx_map
                              )
                               (
                                hash-table-set! mh "heap_dict" val_map
                              )
                               (
                                if (
                                  > (
                                    _len heap
                                  )
                                   0
                                )
                                 (
                                  begin (
                                    sift_down mh 0
                                  )
                                )
                                 (
                                  void
                                )
                              )
                               top
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        insert mh node
      )
       (
        let (
          (
            heap (
              hash-table-ref mh "heap"
            )
          )
        )
         (
          begin (
            let (
              (
                idx_map (
                  hash-table-ref mh "idx_of_element"
                )
              )
            )
             (
              begin (
                let (
                  (
                    val_map (
                      hash-table-ref mh "heap_dict"
                    )
                  )
                )
                 (
                  begin (
                    set! heap (
                      append heap (
                        _list node
                      )
                    )
                  )
                   (
                    let (
                      (
                        idx (
                          - (
                            _len heap
                          )
                           1
                        )
                      )
                    )
                     (
                      begin (
                        hash-table-set! idx_map (
                          hash-table-ref node "name"
                        )
                         idx
                      )
                       (
                        hash-table-set! val_map (
                          hash-table-ref node "name"
                        )
                         (
                          hash-table-ref node "val"
                        )
                      )
                       (
                        hash-table-set! mh "heap" heap
                      )
                       (
                        hash-table-set! mh "idx_of_element" idx_map
                      )
                       (
                        hash-table-set! mh "heap_dict" val_map
                      )
                       (
                        sift_up mh idx
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        is_empty mh
      )
       (
        _eq (
          _len (
            hash-table-ref mh "heap"
          )
        )
         0
      )
    )
     (
      define (
        get_value mh key
      )
       (
        hash-table-ref/default (
          hash-table-ref mh "heap_dict"
        )
         key (
          void
        )
      )
    )
     (
      define (
        decrease_key mh node new_value
      )
       (
        let (
          (
            heap (
              hash-table-ref mh "heap"
            )
          )
        )
         (
          begin (
            let (
              (
                val_map (
                  hash-table-ref mh "heap_dict"
                )
              )
            )
             (
              begin (
                let (
                  (
                    idx_map (
                      hash-table-ref mh "idx_of_element"
                    )
                  )
                )
                 (
                  begin (
                    let (
                      (
                        idx (
                          hash-table-ref/default idx_map (
                            hash-table-ref node "name"
                          )
                           (
                            void
                          )
                        )
                      )
                    )
                     (
                      begin (
                        if (
                          not (
                            > (
                              hash-table-ref (
                                list-ref-safe heap idx
                              )
                               "val"
                            )
                             new_value
                          )
                        )
                         (
                          begin (
                            panic "newValue must be less than current value"
                          )
                        )
                         (
                          void
                        )
                      )
                       (
                        hash-table-set! node "val" new_value
                      )
                       (
                        hash-table-set! (
                          list-ref-safe heap idx
                        )
                         "val" new_value
                      )
                       (
                        hash-table-set! val_map (
                          hash-table-ref node "name"
                        )
                         new_value
                      )
                       (
                        hash-table-set! mh "heap" heap
                      )
                       (
                        hash-table-set! mh "heap_dict" val_map
                      )
                       (
                        sift_up mh idx
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      define (
        node_to_string n
      )
       (
        string-append (
          string-append (
            string-append (
              string-append "Node(" (
                hash-table-ref n "name"
              )
            )
             ", "
          )
           (
            to-str-space (
              hash-table-ref n "val"
            )
          )
        )
         ")"
      )
    )
     (
      let (
        (
          r (
            alist->hash-table (
              _list (
                cons "name" "R"
              )
               (
                cons "val" (
                  - 1
                )
              )
            )
          )
        )
      )
       (
        begin (
          let (
            (
              b (
                alist->hash-table (
                  _list (
                    cons "name" "B"
                  )
                   (
                    cons "val" 6
                  )
                )
              )
            )
          )
           (
            begin (
              let (
                (
                  a (
                    alist->hash-table (
                      _list (
                        cons "name" "A"
                      )
                       (
                        cons "val" 3
                      )
                    )
                  )
                )
              )
               (
                begin (
                  let (
                    (
                      x (
                        alist->hash-table (
                          _list (
                            cons "name" "X"
                          )
                           (
                            cons "val" 1
                          )
                        )
                      )
                    )
                  )
                   (
                    begin (
                      let (
                        (
                          e (
                            alist->hash-table (
                              _list (
                                cons "name" "E"
                              )
                               (
                                cons "val" 4
                              )
                            )
                          )
                        )
                      )
                       (
                        begin (
                          let (
                            (
                              my_min_heap (
                                new_min_heap (
                                  _list r b a x e
                                )
                              )
                            )
                          )
                           (
                            begin (
                              _display (
                                if (
                                  string? "Min Heap - before decrease key"
                                )
                                 "Min Heap - before decrease key" (
                                  to-str "Min Heap - before decrease key"
                                )
                              )
                            )
                             (
                              newline
                            )
                             (
                              call/cc (
                                lambda (
                                  break10
                                )
                                 (
                                  letrec (
                                    (
                                      loop9 (
                                        lambda (
                                          xs
                                        )
                                         (
                                          if (
                                            null? xs
                                          )
                                           (
                                            void
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  n (
                                                    car xs
                                                  )
                                                )
                                              )
                                               (
                                                begin (
                                                  _display (
                                                    if (
                                                      string? (
                                                        node_to_string n
                                                      )
                                                    )
                                                     (
                                                      node_to_string n
                                                    )
                                                     (
                                                      to-str (
                                                        node_to_string n
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  newline
                                                )
                                              )
                                            )
                                             (
                                              loop9 (
                                                cdr xs
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop9 (
                                      hash-table-ref my_min_heap "heap"
                                    )
                                  )
                                )
                              )
                            )
                             (
                              _display (
                                if (
                                  string? "Min Heap - After decrease key of node [B -> -17]"
                                )
                                 "Min Heap - After decrease key of node [B -> -17]" (
                                  to-str "Min Heap - After decrease key of node [B -> -17]"
                                )
                              )
                            )
                             (
                              newline
                            )
                             (
                              decrease_key my_min_heap b (
                                - 17
                              )
                            )
                             (
                              call/cc (
                                lambda (
                                  break12
                                )
                                 (
                                  letrec (
                                    (
                                      loop11 (
                                        lambda (
                                          xs
                                        )
                                         (
                                          if (
                                            null? xs
                                          )
                                           (
                                            void
                                          )
                                           (
                                            begin (
                                              let (
                                                (
                                                  n (
                                                    car xs
                                                  )
                                                )
                                              )
                                               (
                                                begin (
                                                  _display (
                                                    if (
                                                      string? (
                                                        node_to_string n
                                                      )
                                                    )
                                                     (
                                                      node_to_string n
                                                    )
                                                     (
                                                      to-str (
                                                        node_to_string n
                                                      )
                                                    )
                                                  )
                                                )
                                                 (
                                                  newline
                                                )
                                              )
                                            )
                                             (
                                              loop11 (
                                                cdr xs
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    loop11 (
                                      hash-table-ref my_min_heap "heap"
                                    )
                                  )
                                )
                              )
                            )
                             (
                              _display (
                                if (
                                  string? (
                                    to-str-space (
                                      get_value my_min_heap "B"
                                    )
                                  )
                                )
                                 (
                                  to-str-space (
                                    get_value my_min_heap "B"
                                  )
                                )
                                 (
                                  to-str (
                                    to-str-space (
                                      get_value my_min_heap "B"
                                    )
                                  )
                                )
                              )
                            )
                             (
                              newline
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      let (
        (
          end14 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur15 (
              quotient (
                * (
                  - end14 start13
                )
                 1000000
              )
               jps16
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur15
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
