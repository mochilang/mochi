;; Generated by Mochi Scheme transpiler on 2025-08-11 17:23 +0700
(import (scheme base))
(import (scheme time))
(import (chibi string))
(import (only (scheme char) string-upcase string-downcase))
(import (srfi 69))
(import (srfi 1))
(define _list list)
(import (chibi time))
(define (_mem) (* 1024 (resource-usage-max-rss (get-resource-usage resource-usage/self))))
(import (chibi json))
(define (to-str x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str x) ", ") "]"))
        ((hash-table? x)
         (let* ((ks (hash-table-keys x))
                (pairs (map (lambda (k)
                              (string-append (to-str k) ": " (to-str (hash-table-ref x k))))
                            ks)))
           (string-append "{" (string-join pairs ", ") "}")))
        ((null? x) "[]")
        ((string? x) (let ((out (open-output-string))) (json-write x out) (get-output-string out)))
        ((boolean? x) (if x "true" "false"))
        ((number? x)
         (if (integer? x)
             (number->string (inexact->exact x))
             (number->string x)))
        (else (number->string x))))
(define (to-str-space x)
  (cond ((pair? x)
         (string-append "[" (string-join (map to-str-space x) " ") "]"))
        ((string? x) x)
        (else (to-str x))))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (_floor x) (cond ((string? x) (let ((n (string->number x))) (if n (floor n) 0))) ((boolean? x) (if x 1 0)) (else (floor x))))
(define (fmod a b) (- a (* (_floor (/ a b)) b)))
(define (_mod a b) (if (and (integer? a) (integer? b)) (modulo a b) (fmod a b)))
(define (_div a b) (if (and (integer? a) (integer? b) (exact? a) (exact? b)) (quotient a b) (/ a b)))
(define (_gt a b) (cond ((and (number? a) (number? b)) (> a b)) ((and (string? a) (string? b)) (string>? a b)) (else (> a b))))
(define (_lt a b) (cond ((and (number? a) (number? b)) (< a b)) ((and (string? a) (string? b)) (string<? a b)) (else (< a b))))
(define (_ge a b) (cond ((and (number? a) (number? b)) (>= a b)) ((and (string? a) (string? b)) (string>=? a b)) (else (>= a b))))
(define (_le a b) (cond ((and (number? a) (number? b)) (<= a b)) ((and (string? a) (string? b)) (string<=? a b)) (else (<= a b))))
(define (_add a b)
  (cond ((and (number? a) (number? b)) (+ a b))
        ((string? a) (string-append a (to-str b)))
        ((string? b) (string-append (to-str a) b))
        ((and (list? a) (list? b)) (append a b))
        (else (+ a b))))
(define (indexOf s sub) (let ((cur (string-contains s sub)))   (if cur (string-cursor->index s cur) -1)))
(define (_display . args) (apply display args))
(define (panic msg) (error msg))
(define (padStart s width pad)
  (let loop ((out s))
    (if (< (string-length out) width)
        (loop (string-append pad out))
        out)))
(define (_substring s start end)
  (let* ((len (string-length s))
         (s0 (max 0 (min len start)))
         (e0 (max s0 (min len end))))
    (substring s s0 e0)))
(define (_repeat s n)
  (let loop ((i 0) (out ""))
    (if (< i n)
        (loop (+ i 1) (string-append out s))
        out)))
(define (slice seq start end)
  (let* ((len (if (string? seq) (string-length seq) (length seq)))
         (s (if (< start 0) (+ len start) start))
         (e (if (< end 0) (+ len end) end)))
    (set! s (max 0 (min len s)))
    (set! e (max 0 (min len e)))
    (when (< e s) (set! e s))
    (if (string? seq)
        (_substring seq s e)
        (take (drop seq s) (- e s)))))
(define (_parseIntStr s base)
  (let* ((b (if (number? base) base 10))
         (n (string->number (if (list? s) (list->string s) s) b)))
    (if n (inexact->exact (truncate n)) 0)))
(define (_split s sep)
  (let* ((str (if (string? s) s (list->string s)))
         (del (cond ((char? sep) sep)
                     ((string? sep) (if (= (string-length sep) 1)
                                       (string-ref sep 0)
                                       sep))
                     (else sep))))
    (cond
     ((and (string? del) (string=? del ""))
      (map string (string->list str)))
     ((char? del)
      (string-split str del))
     (else
        (let loop ((r str) (acc '()))
          (let ((cur (string-contains r del)))
            (if cur
                (let ((idx (string-cursor->index r cur)))
                  (loop (_substring r (+ idx (string-length del)) (string-length r))
                        (cons (_substring r 0 idx) acc)))
                (reverse (cons r acc)))))))))
(define (_len x)
  (cond ((string? x) (string-length x))
        ((hash-table? x) (hash-table-size x))
        (else (length x))))
(define (list-ref-safe lst idx) (if (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-ref lst idx) '()))
(define (list-set-safe! lst idx val) (when (and (integer? idx) (>= idx 0) (< idx (length lst))) (list-set! lst idx val)))
(
  let (
    (
      start10 (
        current-jiffy
      )
    )
     (
      jps13 (
        jiffies-per-second
      )
    )
  )
   (
    begin (
      define (
        bisect_left stacks value
      )
       (
        let (
          (
            low 0
          )
        )
         (
          begin (
            let (
              (
                high (
                  _len stacks
                )
              )
            )
             (
              begin (
                letrec (
                  (
                    loop1 (
                      lambda (
                        
                      )
                       (
                        if (
                          < low high
                        )
                         (
                          begin (
                            let (
                              (
                                mid (
                                  _div (
                                    + low high
                                  )
                                   2
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    stack (
                                      list-ref-safe stacks mid
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    let (
                                      (
                                        top_idx (
                                          - (
                                            _len stack
                                          )
                                           1
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            top (
                                              list-ref-safe stack top_idx
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            if (
                                              < top value
                                            )
                                             (
                                              begin (
                                                set! low (
                                                  + mid 1
                                                )
                                              )
                                            )
                                             (
                                              begin (
                                                set! high mid
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop1
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop1
                )
              )
               low
            )
          )
        )
      )
    )
     (
      define (
        reverse_list src
      )
       (
        let (
          (
            res (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i (
                  - (
                    _len src
                  )
                   1
                )
              )
            )
             (
              begin (
                letrec (
                  (
                    loop2 (
                      lambda (
                        
                      )
                       (
                        if (
                          >= i 0
                        )
                         (
                          begin (
                            set! res (
                              append res (
                                _list (
                                  list-ref-safe src i
                                )
                              )
                            )
                          )
                           (
                            set! i (
                              - i 1
                            )
                          )
                           (
                            loop2
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop2
                )
              )
               res
            )
          )
        )
      )
    )
     (
      define (
        patience_sort collection
      )
       (
        let (
          (
            stacks (
              _list
            )
          )
        )
         (
          begin (
            let (
              (
                i 0
              )
            )
             (
              begin (
                letrec (
                  (
                    loop3 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len collection
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                element (
                                  list-ref-safe collection i
                                )
                              )
                            )
                             (
                              begin (
                                let (
                                  (
                                    idx (
                                      bisect_left stacks element
                                    )
                                  )
                                )
                                 (
                                  begin (
                                    if (
                                      not (
                                        equal? idx (
                                          _len stacks
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            stack (
                                              list-ref-safe stacks idx
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            list-set-safe! stacks idx (
                                              append stack (
                                                _list element
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                     (
                                      begin (
                                        let (
                                          (
                                            new_stack (
                                              _list element
                                            )
                                          )
                                        )
                                         (
                                          begin (
                                            set! stacks (
                                              append stacks (
                                                _list new_stack
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                )
                              )
                            )
                          )
                           (
                            loop3
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop3
                )
              )
               (
                set! i 0
              )
               (
                letrec (
                  (
                    loop4 (
                      lambda (
                        
                      )
                       (
                        if (
                          < i (
                            _len stacks
                          )
                        )
                         (
                          begin (
                            list-set-safe! stacks i (
                              reverse_list (
                                list-ref-safe stacks i
                              )
                            )
                          )
                           (
                            set! i (
                              + i 1
                            )
                          )
                           (
                            loop4
                          )
                        )
                         '(
                          
                        )
                      )
                    )
                  )
                )
                 (
                  loop4
                )
              )
               (
                let (
                  (
                    indices (
                      _list
                    )
                  )
                )
                 (
                  begin (
                    set! i 0
                  )
                   (
                    letrec (
                      (
                        loop5 (
                          lambda (
                            
                          )
                           (
                            if (
                              < i (
                                _len stacks
                              )
                            )
                             (
                              begin (
                                set! indices (
                                  append indices (
                                    _list 0
                                  )
                                )
                              )
                               (
                                set! i (
                                  + i 1
                                )
                              )
                               (
                                loop5
                              )
                            )
                             '(
                              
                            )
                          )
                        )
                      )
                    )
                     (
                      loop5
                    )
                  )
                   (
                    let (
                      (
                        total 0
                      )
                    )
                     (
                      begin (
                        set! i 0
                      )
                       (
                        letrec (
                          (
                            loop6 (
                              lambda (
                                
                              )
                               (
                                if (
                                  < i (
                                    _len stacks
                                  )
                                )
                                 (
                                  begin (
                                    set! total (
                                      + total (
                                        _len (
                                          list-ref-safe stacks i
                                        )
                                      )
                                    )
                                  )
                                   (
                                    set! i (
                                      + i 1
                                    )
                                  )
                                   (
                                    loop6
                                  )
                                )
                                 '(
                                  
                                )
                              )
                            )
                          )
                        )
                         (
                          loop6
                        )
                      )
                       (
                        let (
                          (
                            result (
                              _list
                            )
                          )
                        )
                         (
                          begin (
                            let (
                              (
                                count 0
                              )
                            )
                             (
                              begin (
                                letrec (
                                  (
                                    loop7 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < count total
                                        )
                                         (
                                          begin (
                                            let (
                                              (
                                                min_val 0
                                              )
                                            )
                                             (
                                              begin (
                                                let (
                                                  (
                                                    min_stack (
                                                      - 1
                                                    )
                                                  )
                                                )
                                                 (
                                                  begin (
                                                    let (
                                                      (
                                                        j 0
                                                      )
                                                    )
                                                     (
                                                      begin (
                                                        letrec (
                                                          (
                                                            loop8 (
                                                              lambda (
                                                                
                                                              )
                                                               (
                                                                if (
                                                                  < j (
                                                                    _len stacks
                                                                  )
                                                                )
                                                                 (
                                                                  begin (
                                                                    let (
                                                                      (
                                                                        idx (
                                                                          list-ref-safe indices j
                                                                        )
                                                                      )
                                                                    )
                                                                     (
                                                                      begin (
                                                                        if (
                                                                          < idx (
                                                                            _len (
                                                                              list-ref-safe stacks j
                                                                            )
                                                                          )
                                                                        )
                                                                         (
                                                                          begin (
                                                                            let (
                                                                              (
                                                                                val (
                                                                                  cond (
                                                                                    (
                                                                                      string? (
                                                                                        list-ref-safe stacks j
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      _substring (
                                                                                        list-ref-safe stacks j
                                                                                      )
                                                                                       idx (
                                                                                        + idx 1
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    (
                                                                                      hash-table? (
                                                                                        list-ref-safe stacks j
                                                                                      )
                                                                                    )
                                                                                     (
                                                                                      hash-table-ref (
                                                                                        list-ref-safe stacks j
                                                                                      )
                                                                                       idx
                                                                                    )
                                                                                  )
                                                                                   (
                                                                                    else (
                                                                                      list-ref-safe (
                                                                                        list-ref-safe stacks j
                                                                                      )
                                                                                       idx
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                             (
                                                                              begin (
                                                                                if (
                                                                                  < min_stack 0
                                                                                )
                                                                                 (
                                                                                  begin (
                                                                                    set! min_val val
                                                                                  )
                                                                                   (
                                                                                    set! min_stack j
                                                                                  )
                                                                                )
                                                                                 (
                                                                                  if (
                                                                                    < val min_val
                                                                                  )
                                                                                   (
                                                                                    begin (
                                                                                      set! min_val val
                                                                                    )
                                                                                     (
                                                                                      set! min_stack j
                                                                                    )
                                                                                  )
                                                                                   '(
                                                                                    
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                         '(
                                                                          
                                                                        )
                                                                      )
                                                                       (
                                                                        set! j (
                                                                          + j 1
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                   (
                                                                    loop8
                                                                  )
                                                                )
                                                                 '(
                                                                  
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                         (
                                                          loop8
                                                        )
                                                      )
                                                       (
                                                        set! result (
                                                          append result (
                                                            _list min_val
                                                          )
                                                        )
                                                      )
                                                       (
                                                        list-set-safe! indices min_stack (
                                                          + (
                                                            list-ref-safe indices min_stack
                                                          )
                                                           1
                                                        )
                                                      )
                                                       (
                                                        set! count (
                                                          + count 1
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                           (
                                            loop7
                                          )
                                        )
                                         '(
                                          
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop7
                                )
                              )
                               (
                                set! i 0
                              )
                               (
                                letrec (
                                  (
                                    loop9 (
                                      lambda (
                                        
                                      )
                                       (
                                        if (
                                          < i (
                                            _len result
                                          )
                                        )
                                         (
                                          begin (
                                            list-set-safe! collection i (
                                              list-ref-safe result i
                                            )
                                          )
                                           (
                                            set! i (
                                              + i 1
                                            )
                                          )
                                           (
                                            loop9
                                          )
                                        )
                                         '(
                                          
                                        )
                                      )
                                    )
                                  )
                                )
                                 (
                                  loop9
                                )
                              )
                               collection
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              patience_sort (
                _list 1 9 5 21 17 6
              )
            )
          )
        )
         (
          to-str-space (
            patience_sort (
              _list 1 9 5 21 17 6
            )
          )
        )
         (
          to-str (
            to-str-space (
              patience_sort (
                _list 1 9 5 21 17 6
              )
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              patience_sort (
                _list
              )
            )
          )
        )
         (
          to-str-space (
            patience_sort (
              _list
            )
          )
        )
         (
          to-str (
            to-str-space (
              patience_sort (
                _list
              )
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      _display (
        if (
          string? (
            to-str-space (
              patience_sort (
                _list (
                  - 3
                )
                 (
                  - 17
                )
                 (
                  - 48
                )
              )
            )
          )
        )
         (
          to-str-space (
            patience_sort (
              _list (
                - 3
              )
               (
                - 17
              )
               (
                - 48
              )
            )
          )
        )
         (
          to-str (
            to-str-space (
              patience_sort (
                _list (
                  - 3
                )
                 (
                  - 17
                )
                 (
                  - 48
                )
              )
            )
          )
        )
      )
    )
     (
      newline
    )
     (
      let (
        (
          end11 (
            current-jiffy
          )
        )
      )
       (
        let (
          (
            dur12 (
              quotient (
                * (
                  - end11 start10
                )
                 1000000
              )
               jps13
            )
          )
        )
         (
          begin (
            _display (
              string-append "{\n  \"duration_us\": " (
                number->string dur12
              )
               ",\n  \"memory_bytes\": " (
                number->string (
                  _mem
                )
              )
               ",\n  \"name\": \"main\"\n}"
            )
          )
           (
            newline
          )
        )
      )
    )
  )
)
