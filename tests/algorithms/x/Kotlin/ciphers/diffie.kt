import java.math.BigInteger

fun mod_pow(base: Int, exp: Int, mod: Int): Int {
    var result: Int = 1
    var b: BigInteger = ((Math.floorMod(base, mod)).toBigInteger())
    var e: Int = exp
    while (e > 0) {
        if ((Math.floorMod(e, 2)) == 1) {
            result = ((((result).toBigInteger().multiply((b))).remainder((mod).toBigInteger())).toInt())
        }
        e = e / 2
        b = (b.multiply((b))).remainder((mod).toBigInteger())
    }
    return result
}

fun contains(xs: MutableList<Int>, val: Int): Boolean {
    var i: Int = 0
    while (i < xs.size) {
        if (xs[i]!! == _val) {
            return true
        }
        i = i + 1
    }
    return false
}

fun find_primitive(modulus: Int): Int {
    var r: Int = 1
    while (r < modulus) {
        var li: MutableList<Int> = mutableListOf<Int>()
        var x: Int = 0
        var valid: Boolean = true
        while ((x < (modulus - 1)) && valid) {
            var value: Int = mod_pow(r, x, modulus)
            if (li.contains(value)) {
                valid = false
            } else {
                li = run { val _tmp = li.toMutableList(); _tmp.add(value); _tmp }
                x = x + 1
            }
        }
        if ((valid as Boolean)) {
            return r
        }
        r = r + 1
    }
    return 0 - 1
}

fun main() {
    println(find_primitive(7))
    println(find_primitive(11))
    println(find_primitive(8))
    var prime: Int = 23
    var primitive_root: Int = find_primitive(prime)
    if (primitive_root == (0 - 1)) {
        println("Cannot find the primitive for the value: -1")
    } else {
        var a_private: Int = 6
        var b_private: Int = 15
        var a_public: Int = mod_pow(primitive_root, a_private, prime)
        var b_public: Int = mod_pow(primitive_root, b_private, prime)
        var a_secret: Int = mod_pow(b_public, a_private, prime)
        var b_secret: Int = mod_pow(a_public, b_private, prime)
        println("The key value generated by A is: " + a_secret.toString())
        println("The key value generated by B is: " + b_secret.toString())
    }
}
