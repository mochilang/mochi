;; Generated by Mochi 0.10.65 on 2025-08-13 16:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define valid_colors (list "Black" "Brown" "Red" "Orange" "Yellow" "Green" "Blue" "Violet" "Grey" "White" "Gold" "Silver"))
(define significant_figures_color_values (let ([h (make-hash)]) (hash-set! h "Black" 0) (hash-set! h "Brown" 1) (hash-set! h "Red" 2) (hash-set! h "Orange" 3) (hash-set! h "Yellow" 4) (hash-set! h "Green" 5) (hash-set! h "Blue" 6) (hash-set! h "Violet" 7) (hash-set! h "Grey" 8) (hash-set! h "White" 9) h))
(define multiplier_color_values (let ([h (make-hash)]) (hash-set! h "Black" 1.0) (hash-set! h "Brown" 10.0) (hash-set! h "Red" 100.0) (hash-set! h "Orange" 1000.0) (hash-set! h "Yellow" 10000.0) (hash-set! h "Green" 100000.0) (hash-set! h "Blue" 1000000.0) (hash-set! h "Violet" 10000000.0) (hash-set! h "Grey" 100000000.0) (hash-set! h "White" 1000000000.0) (hash-set! h "Gold" 0.1) (hash-set! h "Silver" 0.01) h))
(define tolerance_color_values (let ([h (make-hash)]) (hash-set! h "Brown" 1.0) (hash-set! h "Red" 2.0) (hash-set! h "Orange" 0.05) (hash-set! h "Yellow" 0.02) (hash-set! h "Green" 0.5) (hash-set! h "Blue" 0.25) (hash-set! h "Violet" 0.1) (hash-set! h "Grey" 0.01) (hash-set! h "Gold" 5.0) (hash-set! h "Silver" 10.0) h))
(define temperature_coeffecient_color_values (let ([h (make-hash)]) (hash-set! h "Black" 250) (hash-set! h "Brown" 100) (hash-set! h "Red" 50) (hash-set! h "Orange" 15) (hash-set! h "Yellow" 25) (hash-set! h "Green" 20) (hash-set! h "Blue" 10) (hash-set! h "Violet" 5) (hash-set! h "Grey" 1) h))
(define (contains list_ value)
  (let/ec _return (begin
(let/ec _break (for ([c list_])
  (let/ec _cont
(if (string=? c value) (let ()
(_return #t)
) (void))
  )))
(_return #f)
))
)
(define (get_significant_digits colors)
  (let/ec _return (begin
(define digit 0)
(let/ec _break (for ([color colors])
  (let/ec _cont
(if (not (hash-has-key? significant_figures_color_values color)) (let ()
(panic (string-append color " is not a valid color for significant figure bands"))
) (void))
(set! digit (let ([__l (* digit 10)] [__r (if significant_figures_color_values (hash-ref significant_figures_color_values color #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
  )))
(_return digit)
))
)
(define (get_multiplier color)
  (let/ec _return (begin
(if (not (hash-has-key? multiplier_color_values color)) (let ()
(panic (string-append color " is not a valid color for multiplier band"))
) (void))
(_return (if multiplier_color_values (hash-ref multiplier_color_values color #f) #f))
))
)
(define (get_tolerance color)
  (let/ec _return (begin
(if (not (hash-has-key? tolerance_color_values color)) (let ()
(panic (string-append color " is not a valid color for tolerance band"))
) (void))
(_return (if tolerance_color_values (hash-ref tolerance_color_values color #f) #f))
))
)
(define (get_temperature_coeffecient color)
  (let/ec _return (begin
(if (not (hash-has-key? temperature_coeffecient_color_values color)) (let ()
(panic (string-append color " is not a valid color for temperature coeffecient band"))
) (void))
(_return (if temperature_coeffecient_color_values (hash-ref temperature_coeffecient_color_values color #f) #f))
))
)
(define (get_band_type_count total typ)
  (let/ec _return (begin
(if (equal? total 3) (let ()
(if (string=? typ "significant") (let ()
(_return 2)
) (void))
(if (string=? typ "multiplier") (let ()
(_return 1)
) (void))
(panic (string-append typ " is not valid for a 3 band resistor"))
) (let ()
(if (equal? total 4) (let ()
(if (string=? typ "significant") (let ()
(_return 2)
) (void))
(if (string=? typ "multiplier") (let ()
(_return 1)
) (void))
(if (string=? typ "tolerance") (let ()
(_return 1)
) (void))
(panic (string-append typ " is not valid for a 4 band resistor"))
) (let ()
(if (equal? total 5) (let ()
(if (string=? typ "significant") (let ()
(_return 3)
) (void))
(if (string=? typ "multiplier") (let ()
(_return 1)
) (void))
(if (string=? typ "tolerance") (let ()
(_return 1)
) (void))
(panic (string-append typ " is not valid for a 5 band resistor"))
) (let ()
(if (equal? total 6) (let ()
(if (string=? typ "significant") (let ()
(_return 3)
) (void))
(if (string=? typ "multiplier") (let ()
(_return 1)
) (void))
(if (string=? typ "tolerance") (let ()
(_return 1)
) (void))
(if (string=? typ "temp_coeffecient") (let ()
(_return 1)
) (void))
(panic (string-append typ " is not valid for a 6 band resistor"))
) (let ()
(panic (string-append (to-string total) " is not a valid number of bands"))
))
))
))
))
))
)
(define (check_validity number_of_bands colors)
  (let/ec _return (begin
(if (or (let ([__l number_of_bands] [__r 3]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l number_of_bands] [__r 6]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(panic "Invalid number of bands. Resistor bands must be 3 to 6")
) (void))
(if (not (equal? number_of_bands (cond [(not colors) 0] [(string? colors) (string-length colors)] [(hash? colors) (hash-count colors)] [else (length colors)]))) (let ()
(panic (string-append (string-append (string-append (string-append "Expecting " (to-string number_of_bands)) " colors, provided ") (to-string (cond [(not colors) 0] [(string? colors) (string-length colors)] [(hash? colors) (hash-count colors)] [else (length colors)]))) " colors"))
) (void))
(let/ec _break (for ([color colors])
  (let/ec _cont
(if (not (contains valid_colors color)) (let ()
(panic (string-append color " is not a valid color"))
) (void))
  )))
(_return #t)
))
)
(define (calculate_resistance number_of_bands color_code_list)
  (let/ec _return (begin
(check_validity number_of_bands color_code_list)
(define sig_count (get_band_type_count number_of_bands "significant"))
(define significant_colors (slice color_code_list 0 sig_count))
(define significant_digits (get_significant_digits significant_colors))
(define multiplier_color (if color_code_list (if (hash? color_code_list) (hash-ref color_code_list sig_count #f) (safe-index color_code_list (int sig_count))) #f))
(define multiplier (get_multiplier multiplier_color))
(define tolerance 20.0)
(if (let ([__l number_of_bands] [__r 4]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(define tolerance_color (if color_code_list (if (hash? color_code_list) (hash-ref color_code_list (let ([__l sig_count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index color_code_list (int (let ([__l sig_count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
(set! tolerance (get_tolerance tolerance_color))
) (void))
(define temp_coeff 0)
(if (equal? number_of_bands 6) (let ()
(define temp_color (if color_code_list (if (hash? color_code_list) (hash-ref color_code_list (let ([__l sig_count] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index color_code_list (int (let ([__l sig_count] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
(set! temp_coeff (get_temperature_coeffecient temp_color))
) (void))
(define resistance_value (* multiplier significant_digits))
(define resistance_str (to-string resistance_value))
(if (equal? resistance_value (int resistance_value)) (let ()
(set! resistance_str (to-string (int resistance_value)))
) (void))
(define answer (string-append (string-append (string-append resistance_str "Ω ±") (to-string tolerance)) "% "))
(if (not (equal? temp_coeff 0)) (let ()
(set! answer (string-append (string-append answer (to-string temp_coeff)) " ppm/K"))
) (void))
(_return answer)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
