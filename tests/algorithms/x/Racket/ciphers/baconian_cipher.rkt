;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define encode_map (hash "a" "AAAAA" "b" "AAAAB" "c" "AAABA" "d" "AAABB" "e" "AABAA" "f" "AABAB" "g" "AABBA" "h" "AABBB" "i" "ABAAA" "j" "BBBAA" "k" "ABAAB" "l" "ABABA" "m" "ABABB" "n" "ABBAA" "o" "ABBAB" "p" "ABBBA" "q" "ABBBB" "r" "BAAAA" "s" "BAAAB" "t" "BAABA" "u" "BAABB" "v" "BBBAB" "w" "BABAA" "x" "BABAB" "y" "BABBA" "z" "BABBB" " " " "))
(define (make_decode_map)
  (let/ec _return (begin
(define m (hash))
(let/ec _break (for ([k (in-hash-keys encode_map)])
  (let/ec _cont
(set! m (hash-set (or m (hash)) (if encode_map (hash-ref encode_map k #f) #f) k))
  )))
(_return m)
))
)
(define decode_map (make_decode_map))
(define (split_spaces s)
  (let/ec _return (begin
(define parts (list))
(define current "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch " ") (let ()
(set! parts (append parts (list current)))
(set! current "")
) (let ()
(set! current (string-append current ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! parts (append parts (list current)))
(_return parts)
))
)
(define (encode word)
  (let/ec _return (begin
(define w (lower word))
(define encoded "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)])) (let/ec _cont
    (define ch (slice w i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (hash-has-key? encode_map ch) (let ()
(set! encoded (string-append encoded (if encode_map (hash-ref encode_map ch #f) #f)))
) (let ()
(panic "encode() accepts only letters of the alphabet and spaces")
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return encoded)
))
)
(define (decode coded)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? coded) (string-length coded)] [(hash? coded) (hash-count coded)] [else (length coded)])) (let/ec _cont
    (define ch (slice coded i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (and (and (not (string=? ch "A")) (not (string=? ch "B"))) (not (string=? ch " "))) (let ()
(panic "decode() accepts only 'A', 'B' and spaces")
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define words (split_spaces coded))
(define decoded "")
(define w 0)
(let/ec _break (let loop ()
  (if (< w (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])) (let/ec _cont
    (define word (if words (if (hash? words) (hash-ref words w #f) (list-ref words (int w))) #f))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? word) (string-length word)] [(hash? word) (hash-count word)] [else (length word)])) (let/ec _cont
    (define segment (slice word j (let ([__l j] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! decoded (string-append decoded (if decode_map (hash-ref decode_map segment #f) #f)))
    (set! j (let ([__l j] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (< w (- (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)]) 1)) (let ()
(set! decoded (string-append decoded " "))
) (void))
    (set! w (let ([__l w] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return decoded)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (encode "hello"))
(displayln (encode "hello world"))
(displayln (decode "AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB"))
(displayln (decode "AABBBAABAAABABAABABAABBAB"))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
