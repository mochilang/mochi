;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (int_pow base exp)
  (let/ec _return (begin
(define result 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (pow_mod base exp mod)
  (let/ec _return (begin
(define result 1)
(define b (modulo base mod))
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let/ec _cont
    (if (equal? (modulo e 2) 1) (let ()
(set! result (modulo (* result b) mod))
) (void))
    (set! e (quotient e 2))
    (set! b (modulo (* b b) mod))
    (loop)) (void))))
(_return result)
))
)
(define (rand_range low high)
  (let/ec _return (begin
(_return (let ([__l (modulo (now) (- high low))] [__r low]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (rabin_miller num)
  (let/ec _return (begin
(define s (- num 1))
(define t 0)
(let/ec _break (let loop ()
  (if (equal? (modulo s 2) 0) (let/ec _cont
    (set! s (quotient s 2))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define k 0)
(let/ec _break (let loop ()
  (if (< k 5) (let/ec _cont
    (define a (rand_range 2 (- num 1)))
    (define v (pow_mod a s num))
    (if (not (equal? v 1)) (let ()
(define i 0)
(let/ec _break (let loop ()
  (if (not (equal? v (- num 1))) (let/ec _cont
    (if (equal? i (- t 1)) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! v (modulo (* v v) num))
    (loop)) (void))))
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (is_prime_low_num num)
  (let/ec _return (begin
(if (< num 2) (let ()
(_return #f)
) (void))
(define low_primes (list
(if (not (not (member num low_primes))) (let ()
(_return #t)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? low_primes) (string-length low_primes)] [(hash? low_primes) (hash-count low_primes)] [else (length low_primes)])) (let/ec _cont
    (define p (if low_primes (if (hash? low_primes) (hash-ref low_primes i #f) (list-ref low_primes (int i))) #f))
    (if (equal? (modulo num p) 0) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (rabin_miller num))
))
)
(define (generate_large_prime keysize)
  (let/ec _return (begin
(define start (int_pow 2 (- keysize 1)))
(define end (int_pow 2 keysize))
(let/ec _break (let loop ()
  (if #t (let/ec _cont
    (define num (rand_range start end))
    (if (is_prime_low_num num) (let ()
(_return num)
) (void))
    (loop)) (void))))
))
)
(define p (generate_large_prime 16))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-append "Prime number: " (format "~a" p)))
(displayln (string-append "is_prime_low_num: " (format "~a" (is_prime_low_num p))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
