;; Generated by Mochi 0.10.59 on 2025-08-06 21:49 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (ord ch)
  (let/ec _return (begin
(define digits "0123456789")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])) (let/ec _cont
    (if (string=? (slice digits i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return (let ([__l 48] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define upper_ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? upper_) (string-length upper_)] [(hash? upper_) (hash-count upper_)] [else (length upper_)])) (let/ec _cont
    (if (string=? (slice upper_ i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return (let ([__l 65] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define lower_ "abcdefghijklmnopqrstuvwxyz")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lower_) (string-length lower_)] [(hash? lower_) (hash-count lower_)] [else (length lower_)])) (let/ec _cont
    (if (string=? (slice lower_ i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return (let ([__l 97] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return 0)
))
)
(define (neg_pos iterlist)
  (let/ec _return (begin
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? iterlist) (string-length iterlist)] [(hash? iterlist) (hash-count iterlist)] [else (length iterlist)])) (let/ec _cont
    (set! iterlist (list-set iterlist (int i) (- (if iterlist (if (hash? iterlist) (hash-ref iterlist i #f) (list-ref iterlist (int i))) #f))))
    (set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return iterlist)
))
)
(define (passcode_creator)
  (let/ec _return (begin
(define choices "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
(define seed (now))
(define length_ (let ([__l 10] [__r (modulo seed 11)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define password (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i length_) (let/ec _cont
    (set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
    (define idx (modulo seed (cond [(string? choices) (string-length choices)] [(hash? choices) (hash-count choices)] [else (length choices)])))
    (set! password (append password (list (slice choices idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return password)
))
)
(define (unique_sorted chars)
  (let/ec _return (begin
(define uniq (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)])) (let/ec _cont
    (define ch (if chars (if (hash? chars) (hash-ref chars i #f) (list-ref chars (int i))) #f))
    (if (not (not (not (member ch uniq)))) (let ()
(set! uniq (append uniq (list ch)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? uniq) (string-length uniq)] [(hash? uniq) (hash-count uniq)] [else (length uniq)])) (let/ec _cont
    (define k (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define min_idx j)
    (let/ec _break (let loop ()
  (if (< k (cond [(string? uniq) (string-length uniq)] [(hash? uniq) (hash-count uniq)] [else (length uniq)])) (let/ec _cont
    (if (string<? (if uniq (if (hash? uniq) (hash-ref uniq k #f) (list-ref uniq (int k))) #f) (if uniq (if (hash? uniq) (hash-ref uniq min_idx #f) (list-ref uniq (int min_idx))) #f)) (let ()
(set! min_idx k)
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not (equal? min_idx j)) (let ()
(define tmp (if uniq (if (hash? uniq) (hash-ref uniq j #f) (list-ref uniq (int j))) #f))
(set! uniq (list-set uniq (int j) (if uniq (if (hash? uniq) (hash-ref uniq min_idx #f) (list-ref uniq (int min_idx))) #f)))
(set! uniq (list-set uniq (int min_idx) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return uniq)
))
)
(define (make_key_list passcode)
  (let/ec _return (begin
(define key_list_options "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n")
(define breakpoints (unique_sorted passcode))
(define keys_l (list))
(define temp_list (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? key_list_options) (string-length key_list_options)] [(hash? key_list_options) (hash-count key_list_options)] [else (length key_list_options)])) (let/ec _cont
    (define ch (slice key_list_options i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! temp_list (append temp_list (list ch)))
    (if (or (not (not (member ch breakpoints))) (equal? i (- (cond [(string? key_list_options) (string-length key_list_options)] [(hash? key_list_options) (hash-count key_list_options)] [else (length key_list_options)]) 1))) (let ()
(define k (- (cond [(string? temp_list) (string-length temp_list)] [(hash? temp_list) (hash-count temp_list)] [else (length temp_list)]) 1))
(let/ec _break (let loop ()
  (if (>= k 0) (let/ec _cont
    (set! keys_l (append keys_l (list (if temp_list (if (hash? temp_list) (hash-ref temp_list k #f) (list-ref temp_list (int k))) #f))))
    (set! k (- k 1))
    (loop)) (void))))
(set! temp_list (list))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return keys_l)
))
)
(define (make_shift_key passcode)
  (let/ec _return (begin
(define codes (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? passcode) (string-length passcode)] [(hash? passcode) (hash-count passcode)] [else (length passcode)])) (let/ec _cont
    (set! codes (append codes (list (ord (if passcode (if (hash? passcode) (hash-ref passcode i #f) (list-ref passcode (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! codes (neg_pos codes))
(define total 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? codes) (string-length codes)] [(hash? codes) (hash-count codes)] [else (length codes)])) (let/ec _cont
    (set! total (let ([__l total] [__r (if codes (if (hash? codes) (hash-ref codes i #f) (list-ref codes (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> total 0) (let ()
(_return total)
) (void))
(_return (cond [(string? passcode) (string-length passcode)] [(hash? passcode) (hash-count passcode)] [else (length passcode)]))
))
)
(define (new_cipher passcode_str)
  (let/ec _return (begin
(define passcode (list))
(if (equal? (cond [(string? passcode_str) (string-length passcode_str)] [(hash? passcode_str) (hash-count passcode_str)] [else (length passcode_str)]) 0) (let ()
(set! passcode (passcode_creator))
) (let ()
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? passcode_str) (string-length passcode_str)] [(hash? passcode_str) (hash-count passcode_str)] [else (length passcode_str)])) (let/ec _cont
    (set! passcode (append passcode (list (slice passcode_str i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
(define key_list (make_key_list passcode))
(define shift_key (make_shift_key passcode))
(_return (hash "passcode" passcode "key_list" key_list "shift_key" shift_key))
))
)
(define (index_of lst ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (if (string=? (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (encrypt c plaintext)
  (let/ec _return (begin
(define encoded "")
(define i 0)
(define n (cond [(string? (if c (hash-ref c "key_list" #f) #f)) (string-length (if c (hash-ref c "key_list" #f) #f))] [(hash? (if c (hash-ref c "key_list" #f) #f)) (hash-count (if c (hash-ref c "key_list" #f) #f))] [else (length (if c (hash-ref c "key_list" #f) #f))]))
(let/ec _break (let loop ()
  (if (< i (cond [(string? plaintext) (string-length plaintext)] [(hash? plaintext) (hash-count plaintext)] [else (length plaintext)])) (let/ec _cont
    (define ch (slice plaintext i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define position (index_of (if c (hash-ref c "key_list" #f) #f) ch))
    (define new_pos (modulo (let ([__l position] [__r (if c (hash-ref c "shift_key" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) n))
    (set! encoded (string-append encoded (if (if c (hash-ref c "key_list" #f) #f) (if (hash? (if c (hash-ref c "key_list" #f) #f)) (hash-ref (if c (hash-ref c "key_list" #f) #f) new_pos #f) (list-ref (if c (hash-ref c "key_list" #f) #f) (int new_pos))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return encoded)
))
)
(define (decrypt c encoded_message)
  (let/ec _return (begin
(define decoded "")
(define i 0)
(define n (cond [(string? (if c (hash-ref c "key_list" #f) #f)) (string-length (if c (hash-ref c "key_list" #f) #f))] [(hash? (if c (hash-ref c "key_list" #f) #f)) (hash-count (if c (hash-ref c "key_list" #f) #f))] [else (length (if c (hash-ref c "key_list" #f) #f))]))
(let/ec _break (let loop ()
  (if (< i (cond [(string? encoded_message) (string-length encoded_message)] [(hash? encoded_message) (hash-count encoded_message)] [else (length encoded_message)])) (let/ec _cont
    (define ch (slice encoded_message i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define position (index_of (if c (hash-ref c "key_list" #f) #f) ch))
    (define new_pos (modulo (- position (if c (hash-ref c "shift_key" #f) #f)) n))
    (if (< new_pos 0) (let ()
(set! new_pos (let ([__l new_pos] [__r n]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! decoded (string-append decoded (if (if c (hash-ref c "key_list" #f) #f) (if (hash? (if c (hash-ref c "key_list" #f) #f)) (hash-ref (if c (hash-ref c "key_list" #f) #f) new_pos #f) (list-ref (if c (hash-ref c "key_list" #f) #f) (int new_pos))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return decoded)
))
)
(define (test_end_to_end)
  (let/ec _return (begin
(define msg "Hello, this is a modified Caesar cipher")
(define cip (new_cipher ""))
(_return (decrypt cip (encrypt cip msg)))
))
)
(define ssc (new_cipher "4PYIXyqeQZr44"))
(define encoded (encrypt ssc "Hello, this is a modified Caesar cipher"))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln encoded)
(displayln (decrypt ssc encoded))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
