;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define ascii85_chars "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu")
(define (indexOf s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (if (string=? (substring s i (+ i 1)) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (ord ch)
  (let/ec _return (begin
(define idx (index-of ascii85_chars ch))
(if (>= idx 0) (let ()
(_return (let ([__l 33] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return 0)
))
)
(define (chr n)
  (let/ec _return (begin
(if (and (>= n 33) (<= n 117)) (let ()
(_return (slice ascii85_chars (- n 33) (- n 32)))
) (void))
(_return "?")
))
)
(define (to_binary n bits)
  (let/ec _return (begin
(define b "")
(define val n)
(let/ec _break (let loop ()
  (if (> val 0) (let/ec _cont
    (set! b (string-append (format "~a" (modulo val 2)) b))
    (set! val (quotient val 2))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]) bits) (let/ec _cont
    (set! b (string-append "0" b))
    (loop)) (void))))
(if (equal? (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]) 0) (let ()
(set! b "0")
) (void))
(_return b)
))
)
(define (bin_to_int bits)
  (let/ec _return (begin
(define n 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)])) (let/ec _cont
    (if (string=? (substring bits i (+ i 1)) "1") (let ()
(set! n (let ([__l (* n 2)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! n (* n 2))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (reverse s)
  (let/ec _return (begin
(define res "")
(define i (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (set! res (string-append res (substring s i (+ i 1))))
    (set! i (- i 1))
    (loop)) (void))))
(_return res)
))
)
(define (base10_to_85 d)
  (let/ec _return (begin
(if (> d 0) (let ()
(_return (let ([__l (chr (let ([__l (modulo d 85)] [__r 33]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))] [__r (base10_to_85 (quotient d 85))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return "")
))
)
(define (base85_to_10 digits)
  (let/ec _return (begin
(define value 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])) (let/ec _cont
    (set! value (let ([__l (* value 85)] [__r (- (ord (substring digits i (+ i 1))) 33)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return value)
))
)
(define (ascii85_encode data)
  (let/ec _return (begin
(define binary_data "")
 (let/ec _break (for ([__i (in-range (string-length data))])
  (define ch (substring data __i (+ __i 1)))
  (let/ec _cont
(set! binary_data (string-append binary_data (to_binary (ord ch) 8)))
  )))
(define null_values (quotient (- (* 32 (let ([__l (quotient (cond [(string? binary_data) (string-length binary_data)] [(hash? binary_data) (hash-count binary_data)] [else (length binary_data)]) 32)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (cond [(string? binary_data) (string-length binary_data)] [(hash? binary_data) (hash-count binary_data)] [else (length binary_data)])) 8))
(define total_bits (* 32 (let ([__l (quotient (cond [(string? binary_data) (string-length binary_data)] [(hash? binary_data) (hash-count binary_data)] [else (length binary_data)]) 32)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(let/ec _break (let loop ()
  (if (< (cond [(string? binary_data) (string-length binary_data)] [(hash? binary_data) (hash-count binary_data)] [else (length binary_data)]) total_bits) (let/ec _cont
    (set! binary_data (string-append binary_data "0"))
    (loop)) (void))))
(define result "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? binary_data) (string-length binary_data)] [(hash? binary_data) (hash-count binary_data)] [else (length binary_data)])) (let/ec _cont
    (define chunk_bits (slice binary_data i (let ([__l i] [__r 32]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define chunk_val (bin_to_int chunk_bits))
    (define encoded (reverse (base10_to_85 chunk_val)))
    (set! result (string-append result encoded))
    (set! i (let ([__l i] [__r 32]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (not (equal? (modulo null_values 4) 0)) (let ()
(set! result (slice result 0 (- (cond [(string? result) (string-length result)] [(hash? result) (hash-count result)] [else (length result)]) null_values)))
) (void))
(_return result)
))
)
(define (ascii85_decode data)
  (let/ec _return (begin
(define null_values (- (* 5 (let ([__l (quotient (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]) 5)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])))
(define binary_data data)
(define i 0)
(let/ec _break (let loop ()
  (if (< i null_values) (let/ec _cont
    (set! binary_data (string-append binary_data "u"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define result "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? binary_data) (string-length binary_data)] [(hash? binary_data) (hash-count binary_data)] [else (length binary_data)])) (let/ec _cont
    (define chunk (slice binary_data i (let ([__l i] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define value (base85_to_10 chunk))
    (define bits (to_binary value 32))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 32) (let/ec _cont
    (define byte_bits (slice bits j (let ([__l j] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define c (chr (bin_to_int byte_bits)))
    (set! result (string-append result c))
    (set! j (let ([__l j] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define trim null_values)
(if (equal? (modulo null_values 5) 0) (let ()
(set! trim (- null_values 1))
) (void))
(_return (slice result 0 (- (cond [(string? result) (string-length result)] [(hash? result) (hash-count result)] [else (length result)]) trim)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (ascii85_encode ""))
(displayln (ascii85_encode "12345"))
(displayln (ascii85_encode "base 85"))
(displayln (ascii85_decode ""))
(displayln (ascii85_decode "0etOA2#"))
(displayln (ascii85_decode "@UX=h+?24"))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
