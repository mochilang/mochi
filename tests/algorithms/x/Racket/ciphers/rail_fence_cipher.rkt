;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (encrypt input_string key)
  (let/ec _return (begin
(if (<= key 0) (let ()
(panic "Height of grid can't be 0 or negative")
) (void))
(if (or (equal? key 1) (<= (cond [(string? input_string) (string-length input_string)] [(hash? input_string) (hash-count input_string)] [else (length input_string)]) key)) (let ()
(_return input_string)
) (void))
(define lowest (- key 1))
(define temp_grid (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i key) (let/ec _cont
    (set! temp_grid (append temp_grid (list (list))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define position 0)
(let/ec _break (let loop ()
  (if (< position (cond [(string? input_string) (string-length input_string)] [(hash? input_string) (hash-count input_string)] [else (length input_string)])) (let/ec _cont
    (define num (modulo position (* lowest 2)))
    (define alt (- (* lowest 2) num))
    (if (> num alt) (let ()
(set! num alt)
) (void))
    (define row (if temp_grid (if (hash? temp_grid) (hash-ref temp_grid num #f) (list-ref temp_grid (int num))) #f))
    (set! row (append row (list (slice input_string position (let ([__l position] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
    (set! temp_grid (list-set temp_grid (int num) row))
    (set! position (let ([__l position] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define output "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i key) (let/ec _cont
    (define row (if temp_grid (if (hash? temp_grid) (hash-ref temp_grid i #f) (list-ref temp_grid (int i))) #f))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let/ec _cont
    (set! output (string-append output (if row (if (hash? row) (hash-ref row j #f) (list-ref row (int j))) #f)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return output)
))
)
(define (decrypt input_string key)
  (let/ec _return (begin
(if (<= key 0) (let ()
(panic "Height of grid can't be 0 or negative")
) (void))
(if (equal? key 1) (let ()
(_return input_string)
) (void))
(define lowest (- key 1))
(define counts (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i key) (let/ec _cont
    (set! counts (append counts (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define pos 0)
(let/ec _break (let loop ()
  (if (< pos (cond [(string? input_string) (string-length input_string)] [(hash? input_string) (hash-count input_string)] [else (length input_string)])) (let/ec _cont
    (define num (modulo pos (* lowest 2)))
    (define alt (- (* lowest 2) num))
    (if (> num alt) (let ()
(set! num alt)
) (void))
    (set! counts (list-set counts (int num) (let ([__l (if counts (if (hash? counts) (hash-ref counts num #f) (list-ref counts (int num))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! pos (let ([__l pos] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define grid (list))
(define counter 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i key) (let/ec _cont
    (define length_ (if counts (if (hash? counts) (hash-ref counts i #f) (list-ref counts (int i))) #f))
    (define slice_ (slice input_string counter (let ([__l counter] [__r length_]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? slice_) (string-length slice_)] [(hash? slice_) (hash-count slice_)] [else (length slice_)])) (let/ec _cont
    (set! row (append row (list (substring slice_ j (+ j 1)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! grid (append grid (list row)))
    (set! counter (let ([__l counter] [__r length_]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define indices (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i key) (let/ec _cont
    (set! indices (append indices (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define output "")
(set! pos 0)
(let/ec _break (let loop ()
  (if (< pos (cond [(string? input_string) (string-length input_string)] [(hash? input_string) (hash-count input_string)] [else (length input_string)])) (let/ec _cont
    (define num (modulo pos (* lowest 2)))
    (define alt (- (* lowest 2) num))
    (if (> num alt) (let ()
(set! num alt)
) (void))
    (set! output (string-append output (if (if grid (if (hash? grid) (hash-ref grid num #f) (list-ref grid (int num))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid num #f) (list-ref grid (int num))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid num #f) (list-ref grid (int num))) #f) (if indices (if (hash? indices) (hash-ref indices num #f) (list-ref indices (int num))) #f) #f) (list-ref (if grid (if (hash? grid) (hash-ref grid num #f) (list-ref grid (int num))) #f) (int (if indices (if (hash? indices) (hash-ref indices num #f) (list-ref indices (int num))) #f)))) #f)))
    (set! indices (list-set indices (int num) (let ([__l (if indices (if (hash? indices) (hash-ref indices num #f) (list-ref indices (int num))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! pos (let ([__l pos] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return output)
))
)
(define (bruteforce input_string)
  (let/ec _return (begin
(define results (hash))
(define key_guess 1)
(let/ec _break (let loop ()
  (if (< key_guess (cond [(string? input_string) (string-length input_string)] [(hash? input_string) (hash-count input_string)] [else (length input_string)])) (let/ec _cont
    (set! results (hash-set (or results (hash)) key_guess (decrypt input_string key_guess)))
    (set! key_guess (let ([__l key_guess] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return results)
))
)
(define bf (bruteforce "HWe olordll"))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (encrypt "Hello World" 4))
(displayln (decrypt "HWe olordll" 4))
(displayln (if bf (hash-ref bf 4 #f) #f))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
