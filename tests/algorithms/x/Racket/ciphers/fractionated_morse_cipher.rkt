;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define MORSE_CODE_DICT (hash "A" ".-" "B" "-..." "C" "-.-." "D" "-.." "E" "." "F" "..-." "G" "--." "H" "...." "I" ".." "J" ".---" "K" "-.-" "L" ".-.." "M" "--" "N" "-." "O" "---" "P" ".--." "Q" "--.-" "R" ".-." "S" "..." "T" "-" "U" "..-" "V" "...-" "W" ".--" "X" "-..-" "Y" "-.--" "Z" "--.." " " ""))
(define MORSE_COMBINATIONS (list "..." "..-" "..x" ".-." ".--" ".-x" ".x." ".x-" ".xx" "-.." "-.-" "-.x" "--." "---" "--x" "-x." "-x-" "-xx" "x.." "x.-" "x.x" "x-." "x--" "x-x" "xx." "xx-" "xxx"))
(define REVERSE_DICT (hash ".-" "A" "-..." "B" "-.-." "C" "-.." "D" "." "E" "..-." "F" "--." "G" "...." "H" ".." "I" ".---" "J" "-.-" "K" ".-.." "L" "--" "M" "-." "N" "---" "O" ".--." "P" "--.-" "Q" ".-." "R" "..." "S" "-" "T" "..-" "U" "...-" "V" ".--" "W" "-..-" "X" "-.--" "Y" "--.." "Z" "" " "))
(define (encodeToMorse plaintext)
  (let/ec _return (begin
(define morse "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? plaintext) (string-length plaintext)] [(hash? plaintext) (hash-count plaintext)] [else (length plaintext)])) (let/ec _cont
    (define ch (upper (slice plaintext i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (define code "")
    (if (hash-has-key? MORSE_CODE_DICT ch) (let ()
(set! code (if MORSE_CODE_DICT (hash-ref MORSE_CODE_DICT ch #f) #f))
) (void))
    (if (> i 0) (let ()
(set! morse (string-append morse "x"))
) (void))
    (set! morse (string-append morse code))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return morse)
))
)
(define (encryptFractionatedMorse plaintext key)
  (let/ec _return (begin
(define morseCode (encodeToMorse plaintext))
(define combinedKey (string-append (upper key) "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
(define dedupKey "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? combinedKey) (string-length combinedKey)] [(hash? combinedKey) (hash-count combinedKey)] [else (length combinedKey)])) (let/ec _cont
    (define ch (slice combinedKey i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (not (string-contains? dedupKey ch)) (let ()
(set! dedupKey (string-append dedupKey ch))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define paddingLength (- 3 (modulo (cond [(string? morseCode) (string-length morseCode)] [(hash? morseCode) (hash-count morseCode)] [else (length morseCode)]) 3)))
(define p 0)
(let/ec _break (let loop ()
  (if (< p paddingLength) (let/ec _cont
    (set! morseCode (string-append morseCode "x"))
    (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define dict (hash))
(define j 0)
(let/ec _break (let loop ()
  (if (< j 26) (let/ec _cont
    (define combo (if MORSE_COMBINATIONS (if (hash? MORSE_COMBINATIONS) (hash-ref MORSE_COMBINATIONS j #f) (list-ref MORSE_COMBINATIONS (int j))) #f))
    (define letter (slice dedupKey j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! dict (hash-set (or dict (hash)) combo letter))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! dict (hash-set (or dict (hash)) "xxx" ""))
(define encrypted "")
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? morseCode) (string-length morseCode)] [(hash? morseCode) (hash-count morseCode)] [else (length morseCode)])) (let/ec _cont
    (define group (slice morseCode k (let ([__l k] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! encrypted (string-append encrypted (if dict (hash-ref dict group #f) #f)))
    (set! k (let ([__l k] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return encrypted)
))
)
(define (decryptFractionatedMorse ciphertext key)
  (let/ec _return (begin
(define combinedKey (string-append (upper key) "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
(define dedupKey "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? combinedKey) (string-length combinedKey)] [(hash? combinedKey) (hash-count combinedKey)] [else (length combinedKey)])) (let/ec _cont
    (define ch (slice combinedKey i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (not (string-contains? dedupKey ch)) (let ()
(set! dedupKey (string-append dedupKey ch))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define inv (hash))
(define j 0)
(let/ec _break (let loop ()
  (if (< j 26) (let/ec _cont
    (define letter (slice dedupKey j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! inv (hash-set (or inv (hash)) letter (if MORSE_COMBINATIONS (if (hash? MORSE_COMBINATIONS) (hash-ref MORSE_COMBINATIONS j #f) (list-ref MORSE_COMBINATIONS (int j))) #f)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define morse "")
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? ciphertext) (string-length ciphertext)] [(hash? ciphertext) (hash-count ciphertext)] [else (length ciphertext)])) (let/ec _cont
    (define ch (slice ciphertext k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (hash-has-key? inv ch) (let ()
(set! morse (string-append morse (if inv (hash-ref inv ch #f) #f)))
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define codes (list))
(define current "")
(define m 0)
(let/ec _break (let loop ()
  (if (< m (cond [(string? morse) (string-length morse)] [(hash? morse) (hash-count morse)] [else (length morse)])) (let/ec _cont
    (define ch (slice morse m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch "x") (let ()
(set! codes (append codes (list current)))
(set! current "")
) (let ()
(set! current (string-append current ch))
))
    (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! codes (append codes (list current)))
(define decrypted "")
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? codes) (string-length codes)] [(hash? codes) (hash-count codes)] [else (length codes)])) (let/ec _cont
    (define code (if codes (if (hash? codes) (hash-ref codes idx #f) (list-ref codes (int idx))) #f))
    (set! decrypted (string-append decrypted (if REVERSE_DICT (hash-ref REVERSE_DICT code #f) #f)))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define start 0)
(let/ec _break (let loop ()
  (if #t (let/ec _cont
    (if (< start (cond [(string? decrypted) (string-length decrypted)] [(hash? decrypted) (hash-count decrypted)] [else (length decrypted)])) (let ()
(if (string=? (slice decrypted start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ") (let ()
(set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
) (void))
    (_break)
    (loop)) (void))))
(define end (cond [(string? decrypted) (string-length decrypted)] [(hash? decrypted) (hash-count decrypted)] [else (length decrypted)]))
(let/ec _break (let loop ()
  (if #t (let/ec _cont
    (if (> end start) (let ()
(if (string=? (slice decrypted (- end 1) end) " ") (let ()
(set! end (- end 1))
(_cont)
) (void))
) (void))
    (_break)
    (loop)) (void))))
(_return (slice decrypted start end))
))
)
(define plaintext "defend the east")
(define key "ROUNDTABLE")
(define ciphertext (encryptFractionatedMorse plaintext key))
(define decrypted (decryptFractionatedMorse ciphertext key))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Plain Text:" plaintext)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Encrypted:" ciphertext)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Decrypted:" decrypted)) " "))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
