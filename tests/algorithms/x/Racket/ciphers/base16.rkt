;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (base16_encode data)
  (let/ec _return (begin
(define digits "0123456789ABCDEF")
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])) (let/ec _cont
    (define b (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f))
    (if (or (< b 0) (> b 255)) (let ()
(panic "byte out of range")
) (void))
    (define hi (quotient b 16))
    (define lo (modulo b 16))
    (set! res (string-append (string-append res (slice digits hi (let ([__l hi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (slice digits lo (let ([__l lo] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (base16_decode data)
  (let/ec _return (begin
(define digits "0123456789ABCDEF")
(if (not (equal? (modulo (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]) 2) 0)) (let ()
(panic "Base16 encoded data is invalid: Data does not have an even number of hex digits.")
) (void))
(define (hex_value ch)
  (let/ec _return (begin
(define j 0)
(let/ec _break (let loop ()
  (if (< j 16) (let/ec _cont
    (if (string=? (slice digits j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return j)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define out (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])) (let/ec _cont
    (define hi_char (slice data i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define lo_char (slice data (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define hi (hex_value hi_char))
    (define lo (hex_value lo_char))
    (if (or (< hi 0) (< lo 0)) (let ()
(panic "Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters.")
) (void))
    (set! out (append out (list (let ([__l (* hi 16)] [__r lo]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define example1 (list 72 101 108 108 111 32 87 111 114 108 100 33))
(define example2 (list 72 69 76 76 79 32 87 79 82 76 68 33))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (base16_encode example1))
(displayln (base16_encode example2))
(displayln (base16_encode (list)))
(displayln (format "~a" (base16_decode "48656C6C6F20576F726C6421")))
(displayln (format "~a" (base16_decode "48454C4C4F20574F524C4421")))
(displayln (format "~a" (base16_decode "")))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
