;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define B64_CHARSET "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
(define (to_binary n)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return "0")
) (void))
(define num n)
(define res "")
(let/ec _break (let loop ()
  (if (> num 0) (let/ec _cont
    (define bit (modulo num 2))
    (set! res (string-append (format "~a" bit) res))
    (set! num (quotient num 2))
    (loop)) (void))))
(_return res)
))
)
(define (zfill s width)
  (let/ec _return (begin
(define res s)
(define pad (- width (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
(let/ec _break (let loop ()
  (if (> pad 0) (let/ec _cont
    (set! res (string-append "0" res))
    (set! pad (- pad 1))
    (loop)) (void))))
(_return res)
))
)
(define (from_binary s)
  (let/ec _return (begin
(define i 0)
(define result 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (set! result (* result 2))
    (if (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "1") (let ()
(set! result (let ([__l result] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (repeat ch times)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i times) (let/ec _cont
    (set! res (string-append res ch))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (char_index s c)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (if (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) c) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (base64_encode data)
  (let/ec _return (begin
(define bits "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])) (let/ec _cont
    (set! bits (string-append bits (zfill (to_binary (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f)) 8)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define pad_bits 0)
(if (not (equal? (modulo (cond [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)]) 6) 0)) (let ()
(set! pad_bits (- 6 (modulo (cond [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)]) 6)))
(set! bits (string-append bits (_repeat "0" pad_bits)))
) (void))
(define j 0)
(define encoded "")
(let/ec _break (let loop ()
  (if (< j (cond [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)])) (let/ec _cont
    (define chunk (slice bits j (let ([__l j] [__r 6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define idx (from_binary chunk))
    (set! encoded (string-append encoded (slice B64_CHARSET idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! j (let ([__l j] [__r 6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define pad (quotient pad_bits 2))
(let/ec _break (let loop ()
  (if (> pad 0) (let/ec _cont
    (set! encoded (string-append encoded "="))
    (set! pad (- pad 1))
    (loop)) (void))))
(_return encoded)
))
)
(define (base64_decode s)
  (let/ec _return (begin
(define padding 0)
(define end (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (and (> end 0) (string=? (slice s (- end 1) end) "=")) (let/ec _cont
    (set! padding (let ([__l padding] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! end (- end 1))
    (loop)) (void))))
(define bits "")
(define k 0)
(let/ec _break (let loop ()
  (if (< k end) (let/ec _cont
    (define c (slice s k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define idx (char_index B64_CHARSET c))
    (set! bits (string-append bits (zfill (to_binary idx) 6)))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> padding 0) (let ()
(set! bits (slice bits 0 (- (cond [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)]) (* padding 2))))
) (void))
(define bytes (list))
(define m 0)
(let/ec _break (let loop ()
  (if (< m (cond [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)])) (let/ec _cont
    (define byte (from_binary (slice bits m (let ([__l m] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! bytes (append bytes (list byte)))
    (set! m (let ([__l m] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return bytes)
))
)
(define (main)
  (let/ec _return (begin
(define data (list 77 111 99 104 105))
(define encoded (base64_encode data))
(displayln encoded)
(displayln (jsexpr->string (base64_decode encoded)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
