;; Generated by Mochi 0.10.59 on 2025-08-06 22:15 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (index_in_string s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (if (string=? (substring s i (+ i 1)) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (contains_char s ch)
  (let/ec _return (begin
(_return (>= (index_in_string s ch) 0))
))
)
(define (is_alpha ch)
  (let/ec _return (begin
(define lower_ "abcdefghijklmnopqrstuvwxyz")
(define upper_ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(_return (or (contains_char lower_ ch) (contains_char upper_ ch)))
))
)
(define (to_upper s)
  (let/ec _return (begin
(define lower_ "abcdefghijklmnopqrstuvwxyz")
(define upper_ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define ch (substring s i (+ i 1)))
    (define idx (index_in_string lower_ ch))
    (if (>= idx 0) (let ()
(set! res (string-append res (substring upper_ idx (+ idx 1))))
) (let ()
(set! res (string-append res ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (remove_duplicates key)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? key) (string-length key)] [(hash? key) (hash-count key)] [else (length key)])) (let/ec _cont
    (define ch (substring key i (+ i 1)))
    (if (or (string=? ch " ") (and (is_alpha ch) (not (contains_char res ch)))) (let ()
(set! res (string-append res ch))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (create_cipher_map key)
  (let/ec _return (begin
(define alphabet "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define cleaned (remove_duplicates (to_upper key)))
(define cipher (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? cleaned) (string-length cleaned)] [(hash? cleaned) (hash-count cleaned)] [else (length cleaned)])) (let/ec _cont
    (set! cipher (append cipher (list (substring cleaned i (+ i 1)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define offset (cond [(string? cleaned) (string-length cleaned)] [(hash? cleaned) (hash-count cleaned)] [else (length cleaned)]))
(define j (cond [(string? cipher) (string-length cipher)] [(hash? cipher) (hash-count cipher)] [else (length cipher)]))
(let/ec _break (let loop ()
  (if (< j 26) (let/ec _cont
    (define char (substring alphabet (- j offset) (+ (- j offset) 1)))
    (let/ec _break (let loop ()
  (if (contains_char cleaned char) (let/ec _cont
    (set! offset (- offset 1))
    (set! char (substring alphabet (- j offset) (+ (- j offset) 1)))
    (loop)) (void))))
    (set! cipher (append cipher (list char)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return cipher)
))
)
(define (index_in_list lst ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (if (string=? (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (encipher message cipher)
  (let/ec _return (begin
(define alphabet "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define msg (to_upper message))
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? msg) (string-length msg)] [(hash? msg) (hash-count msg)] [else (length msg)])) (let/ec _cont
    (define ch (substring msg i (+ i 1)))
    (define idx (index_in_string alphabet ch))
    (if (>= idx 0) (let ()
(set! res (string-append res (if cipher (if (hash? cipher) (hash-ref cipher idx #f) (list-ref cipher (int idx))) #f)))
) (let ()
(set! res (string-append res ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (decipher message cipher)
  (let/ec _return (begin
(define alphabet "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define msg (to_upper message))
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? msg) (string-length msg)] [(hash? msg) (hash-count msg)] [else (length msg)])) (let/ec _cont
    (define ch (substring msg i (+ i 1)))
    (define idx (index_in_list cipher ch))
    (if (>= idx 0) (let ()
(set! res (string-append res (substring alphabet idx (+ idx 1))))
) (let ()
(set! res (string-append res ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define cipher_map (create_cipher_map "Goodbye!!"))
(define encoded (encipher "Hello World!!" cipher_map))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln encoded)
(displayln (decipher encoded cipher_map))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
