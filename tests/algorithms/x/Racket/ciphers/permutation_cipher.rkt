;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define seed 1)
(define (rand max)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483647))
(_return (modulo seed max))
))
)
(define (generate_valid_block_size message_length)
  (let/ec _return (begin
(define factors (list))
(define i 2)
(let/ec _break (let loop ()
  (if (<= i message_length) (let/ec _cont
    (if (equal? (modulo message_length i) 0) (let ()
(set! factors (append factors (list i)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define idx (rand (cond [(string? factors) (string-length factors)] [(hash? factors) (hash-count factors)] [else (length factors)])))
(_return (if factors (if (hash? factors) (hash-ref factors idx #f) (list-ref factors (int idx))) #f))
))
)
(define (generate_permutation_key block_size)
  (let/ec _return (begin
(define digits (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i block_size) (let/ec _cont
    (set! digits (append digits (list i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j (- block_size 1))
(let/ec _break (let loop ()
  (if (> j 0) (let/ec _cont
    (define k (rand (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define temp (if digits (if (hash? digits) (hash-ref digits j #f) (list-ref digits (int j))) #f))
    (set! digits (list-set digits (int j) (if digits (if (hash? digits) (hash-ref digits k #f) (list-ref digits (int k))) #f)))
    (set! digits (list-set digits (int k) temp))
    (set! j (- j 1))
    (loop)) (void))))
(_return digits)
))
)
(define (encrypt message key block_size)
  (let/ec _return (begin
(define encrypted "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? message) (string-length message)] [(hash? message) (hash-count message)] [else (length message)])) (let/ec _cont
    (define block (slice message i (let ([__l i] [__r block_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j block_size) (let/ec _cont
    (set! encrypted (string-append encrypted (slice block (if key (if (hash? key) (hash-ref key j #f) (list-ref key (int j))) #f) (let ([__l (if key (if (hash? key) (hash-ref key j #f) (list-ref key (int j))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r block_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return encrypted)
))
)
(define (repeat_string times)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i times) (let/ec _cont
    (set! res (append res (list "")))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (decrypt encrypted key)
  (let/ec _return (begin
(define klen (cond [(string? key) (string-length key)] [(hash? key) (hash-count key)] [else (length key)]))
(define decrypted "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? encrypted) (string-length encrypted)] [(hash? encrypted) (hash-count encrypted)] [else (length encrypted)])) (let/ec _cont
    (define block (slice encrypted i (let ([__l i] [__r klen]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define original (repeat_string klen))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j klen) (let/ec _cont
    (set! original (list-set original (int (if key (if (hash? key) (hash-ref key j #f) (list-ref key (int j))) #f)) (slice block j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! j 0)
    (let/ec _break (let loop ()
  (if (< j klen) (let/ec _cont
    (set! decrypted (string-append decrypted (if original (if (hash? original) (hash-ref original j #f) (list-ref original (int j))) #f)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r klen]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return decrypted)
))
)
(define message "HELLO WORLD")
(define block_size (generate_valid_block_size (cond [(string? message) (string-length message)] [(hash? message) (hash-count message)] [else (length message)])))
(define key (generate_permutation_key block_size))
(define encrypted (encrypt message key block_size))
(define decrypted (decrypt encrypted key))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-append "Block size: " (format "~a" block_size)))
(displayln (string-append "Key: " (format "~a" key)))
(displayln (string-append "Encrypted: " encrypted))
(displayln (string-append "Decrypted: " decrypted))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
