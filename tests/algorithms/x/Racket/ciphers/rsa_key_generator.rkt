;; Generated by Mochi 0.10.59 on 2025-08-06 21:49 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (pow2 exp)
  (let/ec _return (begin
(define res 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! res (* res 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define seed 1)
(define (next_seed x)
  (let/ec _return (begin
(_return (modulo (let ([__l (* x 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
))
)
(define (rand_range min max)
  (let/ec _return (begin
(set! seed (next_seed seed))
(_return (let ([__l min] [__r (modulo seed (- max min))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (gcd a b)
  (let/ec _return (begin
(define x a)
(define y b)
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (let/ec _cont
    (define temp (modulo x y))
    (set! x y)
    (set! y temp)
    (loop)) (void))))
(_return x)
))
)
(define (mod_inverse e phi)
  (let/ec _return (begin
(define t 0)
(define newt 1)
(define r phi)
(define newr e)
(let/ec _break (let loop ()
  (if (not (equal? newr 0)) (let/ec _cont
    (define quotient_ (quotient r newr))
    (define tmp newt)
    (set! newt (- t (* quotient_ newt)))
    (set! t tmp)
    (define tmp_r newr)
    (set! newr (- r (* quotient_ newr)))
    (set! r tmp_r)
    (loop)) (void))))
(if (> r 1) (let ()
(_return 0)
) (void))
(if (< t 0) (let ()
(set! t (let ([__l t] [__r phi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return t)
))
)
(define (is_prime n)
  (let/ec _return (begin
(if (< n 2) (let ()
(_return #f)
) (void))
(define i 2)
(let/ec _break (let loop ()
  (if (<= (* i i) n) (let/ec _cont
    (if (equal? (modulo n i) 0) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (generate_prime bits)
  (let/ec _return (begin
(define min (pow2 (- bits 1)))
(define max (pow2 bits))
(define p (rand_range min max))
(if (equal? (modulo p 2) 0) (let ()
(set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(let/ec _break (let loop ()
  (if (not (is_prime p)) (let/ec _cont
    (set! p (let ([__l p] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (>= p max) (let ()
(set! p (let ([__l min] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (loop)) (void))))
(_return p)
))
)
(define (generate_key bits)
  (let/ec _return (begin
(define p (generate_prime bits))
(define q (generate_prime bits))
(define n (* p q))
(define phi (* (- p 1) (- q 1)))
(define e (rand_range 2 phi))
(let/ec _break (let loop ()
  (if (not (equal? (gcd e phi) 1)) (let/ec _cont
    (set! e (let ([__l e] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (>= e phi) (let ()
(set! e 2)
) (void))
    (loop)) (void))))
(define d (mod_inverse e phi))
(_return (hash "public_key" (list n e) "private_key" (list n d)))
))
)
(define keys (generate_key 8))
(define pub (if keys (hash-ref keys "public_key" #f) #f))
(define priv (if keys (hash-ref keys "private_key" #f) #f))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-append (string-append (string-append (string-append "Public key: (" (format "~a" (if pub (if (hash? pub) (hash-ref pub 0 #f) (list-ref pub (int 0))) #f))) ", ") (format "~a" (if pub (if (hash? pub) (hash-ref pub 1 #f) (list-ref pub (int 1))) #f))) ")"))
(displayln (string-append (string-append (string-append (string-append "Private key: (" (format "~a" (if priv (if (hash? priv) (hash-ref priv 0 #f) (list-ref priv (int 0))) #f))) ", ") (format "~a" (if priv (if (hash? priv) (hash-ref priv 1 #f) (list-ref priv (int 1))) #f))) ")"))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
