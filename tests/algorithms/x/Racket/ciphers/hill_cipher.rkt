;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define KEY_STRING "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
(define (mod36 n)
  (let/ec _return (begin
(define r (modulo n 36))
(if (< r 0) (let ()
(set! r (let ([__l r] [__r 36]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return r)
))
)
(define (gcd a b)
  (let/ec _return (begin
(define x a)
(define y b)
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (let/ec _cont
    (define t y)
    (set! y (modulo x y))
    (set! x t)
    (loop)) (void))))
(if (< x 0) (let ()
(set! x (- x))
) (void))
(_return x)
))
)
(define (replace_letters letter)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? KEY_STRING) (string-length KEY_STRING)] [(hash? KEY_STRING) (hash-count KEY_STRING)] [else (length KEY_STRING)])) (let/ec _cont
    (if (string=? (substring KEY_STRING i (+ i 1)) letter) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return 0)
))
)
(define (replace_digits num)
  (let/ec _return (begin
(define idx (mod36 num))
(_return (substring KEY_STRING idx (+ idx 1)))
))
)
(define (to_upper c)
  (let/ec _return (begin
(define lower_ "abcdefghijklmnopqrstuvwxyz")
(define upper_ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lower_) (string-length lower_)] [(hash? lower_) (hash-count lower_)] [else (length lower_)])) (let/ec _cont
    (if (string=? c (substring lower_ i (+ i 1))) (let ()
(_return (substring upper_ i (+ i 1)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return c)
))
)
(define (process_text text break_key)
  (let/ec _return (begin
(define chars (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? text) (string-length text)] [(hash? text) (hash-count text)] [else (length text)])) (let/ec _cont
    (define c (to_upper (substring text i (+ i 1))))
    (define j 0)
    (define ok #f)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? KEY_STRING) (string-length KEY_STRING)] [(hash? KEY_STRING) (hash-count KEY_STRING)] [else (length KEY_STRING)])) (let/ec _cont
    (if (string=? (substring KEY_STRING j (+ j 1)) c) (let ()
(set! ok #t)
(_break)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if ok (let ()
(set! chars (append chars (list c)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (equal? (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)]) 0) (let ()
(_return "")
) (void))
(define last (if chars (if (hash? chars) (hash-ref chars (- (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)]) 1) #f) (list-ref chars (int (- (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)]) 1)))) #f))
(let/ec _break (let loop ()
  (if (not (equal? (modulo (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)]) break_key) 0)) (let/ec _cont
    (set! chars (append chars (list last)))
    (loop)) (void))))
(define res "")
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)])) (let/ec _cont
    (set! res (string-append res (if chars (if (hash? chars) (hash-ref chars k #f) (list-ref chars (int k))) #f)))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matrix_minor m row col)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (if (not (equal? i row)) (let ()
(define r (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (string-length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [(hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-count (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [else (length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))])) (let/ec _cont
    (if (not (equal? j col)) (let ()
(set! r (append r (list (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! res (append res (list r)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (determinant m)
  (let/ec _return (begin
(define n (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]))
(if (equal? n 1) (let ()
(_return (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 0))) #f))
) (void))
(if (equal? n 2) (let ()
(_return (- (* (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 0))) #f) (if (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) 1 #f) (list-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (int 1))) #f)) (* (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 1 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 1))) #f) (if (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (int 0))) #f))))
) (void))
(define det 0)
(define col 0)
(let/ec _break (let loop ()
  (if (< col n) (let/ec _cont
    (define minor_mat (matrix_minor m 0 col))
    (define sign 1)
    (if (equal? (modulo col 2) 1) (let ()
(set! sign (- 1))
) (void))
    (set! det (let ([__l det] [__r (* (* sign (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) col #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int col))) #f)) (determinant minor_mat))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return det)
))
)
(define (cofactor_matrix m)
  (let/ec _return (begin
(define n (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (define minor_mat (matrix_minor m i j))
    (define det_minor (determinant minor_mat))
    (define sign 1)
    (if (equal? (modulo (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2) 1) (let ()
(set! sign (- 1))
) (void))
    (set! row (append row (list (* sign det_minor))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (transpose m)
  (let/ec _return (begin
(define rows (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]))
(define cols (cond [(string? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (string-length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [(hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-count (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [else (length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))]))
(define res (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j cols) (let/ec _cont
    (define row (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (set! row (append row (list (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matrix_mod m)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (string-length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [(hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-count (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [else (length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))])) (let/ec _cont
    (set! row (append row (list (mod36 (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (scalar_matrix_mult s m)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (string-length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [(hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-count (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [else (length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))])) (let/ec _cont
    (set! row (append row (list (mod36 (* s (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (adjugate m)
  (let/ec _return (begin
(define cof (cofactor_matrix m))
(define n (cond [(string? cof) (string-length cof)] [(hash? cof) (hash-count cof)] [else (length cof)]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! row (append row (list (if (if cof (if (hash? cof) (hash-ref cof j #f) (list-ref cof (int j))) #f) (if (hash? (if cof (if (hash? cof) (hash-ref cof j #f) (list-ref cof (int j))) #f)) (hash-ref (if cof (if (hash? cof) (hash-ref cof j #f) (list-ref cof (int j))) #f) i #f) (list-ref (if cof (if (hash? cof) (hash-ref cof j #f) (list-ref cof (int j))) #f) (int i))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (multiply_matrix_vector m v)
  (let/ec _return (begin
(define n (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define sum 0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f) (if v (if (hash? v) (hash-ref v j #f) (list-ref v (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list (mod36 sum))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (inverse_key key)
  (let/ec _return (begin
(define det_val (determinant key))
(define det_mod (mod36 det_val))
(define det_inv 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 36) (let/ec _cont
    (if (equal? (modulo (* det_mod i) 36) 1) (let ()
(set! det_inv i)
(_break)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define adj (adjugate key))
(define tmp (scalar_matrix_mult det_inv adj))
(define res (matrix_mod tmp))
(_return res)
))
)
(define (hill_encrypt key text)
  (let/ec _return (begin
(define break_key (cond [(string? key) (string-length key)] [(hash? key) (hash-count key)] [else (length key)]))
(define processed (process_text text break_key))
(define encrypted "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? processed) (string-length processed)] [(hash? processed) (hash-count processed)] [else (length processed)])) (let/ec _cont
    (define vec (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j break_key) (let/ec _cont
    (set! vec (append vec (list (replace_letters (substring processed (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (+ (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define enc_vec (multiply_matrix_vector key vec))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k break_key) (let/ec _cont
    (set! encrypted (string-append encrypted (replace_digits (if enc_vec (if (hash? enc_vec) (hash-ref enc_vec k #f) (list-ref enc_vec (int k))) #f))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r break_key]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return encrypted)
))
)
(define (hill_decrypt key text)
  (let/ec _return (begin
(define break_key (cond [(string? key) (string-length key)] [(hash? key) (hash-count key)] [else (length key)]))
(define decrypt_key (inverse_key key))
(define processed (process_text text break_key))
(define decrypted "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? processed) (string-length processed)] [(hash? processed) (hash-count processed)] [else (length processed)])) (let/ec _cont
    (define vec (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j break_key) (let/ec _cont
    (set! vec (append vec (list (replace_letters (substring processed (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (+ (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define dec_vec (multiply_matrix_vector decrypt_key vec))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k break_key) (let/ec _cont
    (set! decrypted (string-append decrypted (replace_digits (if dec_vec (if (hash? dec_vec) (hash-ref dec_vec k #f) (list-ref dec_vec (int k))) #f))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r break_key]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return decrypted)
))
)
(define key (list (list 2 5) (list 1 6)))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (hill_encrypt key "testing hill cipher"))
(displayln (hill_encrypt key "hello"))
(displayln (hill_decrypt key "WHXYJOLM9C6XT085LL"))
(displayln (hill_decrypt key "85FF00"))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
