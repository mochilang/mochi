;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define UPPER "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define LOWER "abcdefghijklmnopqrstuvwxyz")
(define BASE_TOP "ABCDEFGHIJKLM")
(define BASE_BOTTOM "NOPQRSTUVWXYZ")
(define (to_upper s)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define j 0)
    (define replaced #f)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? LOWER) (string-length LOWER)] [(hash? LOWER) (hash-count LOWER)] [else (length LOWER)])) (let/ec _cont
    (if (string=? (slice LOWER j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(set! res (string-append res (slice UPPER j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! replaced #t)
(_break)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not replaced) (let ()
(set! res (string-append res ch))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (char_index c)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? UPPER) (string-length UPPER)] [(hash? UPPER) (hash-count UPPER)] [else (length UPPER)])) (let/ec _cont
    (if (string=? (slice UPPER i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) c) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (rotate_right s k)
  (let/ec _return (begin
(define n (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(define shift (modulo k n))
(_return (let ([__l (slice s (- n shift) n)] [__r (slice s 0 (- n shift))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (table_for c)
  (let/ec _return (begin
(define idx (char_index c))
(define shift (quotient idx 2))
(define row1 (rotate_right BASE_BOTTOM shift))
(define pair (list BASE_TOP row1))
(_return pair)
))
)
(define (generate_table key)
  (let/ec _return (begin
(define up (to_upper key))
(define i 0)
(define result (list))
(let/ec _break (let loop ()
  (if (< i (cond [(string? up) (string-length up)] [(hash? up) (hash-count up)] [else (length up)])) (let/ec _cont
    (define ch (slice up i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define pair (table_for ch))
    (set! result (append result (list pair)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (str_index s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (if (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 0 1))
))
)
(define (get_position table ch)
  (let/ec _return (begin
(define row 0)
(if (equal? (str_index (if table (if (hash? table) (hash-ref table 0 #f) (list-ref table (int 0))) #f) ch) (- 0 1)) (let ()
(set! row 1)
) (void))
(define col (str_index (if table (if (hash? table) (hash-ref table row #f) (list-ref table (int row))) #f) ch))
(_return (list row col))
))
)
(define (get_opponent table ch)
  (let/ec _return (begin
(define pos (get_position table ch))
(define row (if pos (if (hash? pos) (hash-ref pos 0 #f) (list-ref pos (int 0))) #f))
(define col (if pos (if (hash? pos) (hash-ref pos 1 #f) (list-ref pos (int 1))) #f))
(if (equal? col (- 0 1)) (let ()
(_return ch)
) (void))
(if (equal? row 1) (let ()
(_return (slice (if table (if (hash? table) (hash-ref table 0 #f) (list-ref table (int 0))) #f) col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(_return (slice (if table (if (hash? table) (hash-ref table 1 #f) (list-ref table (int 1))) #f) col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (encrypt key words)
  (let/ec _return (begin
(define table (generate_table key))
(define up_words (to_upper words))
(define cipher "")
(define count 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? up_words) (string-length up_words)] [(hash? up_words) (hash-count up_words)] [else (length up_words)])) (let/ec _cont
    (define ch (slice up_words i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! cipher (string-append cipher (get_opponent (if table (if (hash? table) (hash-ref table count #f) (list-ref table (int count))) #f) ch)))
    (set! count (modulo (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? table) (string-length table)] [(hash? table) (hash-count table)] [else (length table)])))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return cipher)
))
)
(define (decrypt key words)
  (let/ec _return (begin
(define res (encrypt key words))
(_return res)
))
)
(define (main)
  (let/ec _return (begin
(displayln (encrypt "marvin" "jessica"))
(displayln (decrypt "marvin" "QRACRWU"))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
