;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define B32_CHARSET "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567")
(define (indexOfChar s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (if (string=? (substring s i (+ i 1)) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (ord ch)
  (let/ec _return (begin
(define upper_ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower_ "abcdefghijklmnopqrstuvwxyz")
(define digits "0123456789")
(define idx (indexOfChar upper_ ch))
(if (>= idx 0) (let ()
(_return (let ([__l 65] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(set! idx (indexOfChar lower_ ch))
(if (>= idx 0) (let ()
(_return (let ([__l 97] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(set! idx (indexOfChar digits ch))
(if (>= idx 0) (let ()
(_return (let ([__l 48] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (string=? ch " ") (let ()
(_return 32)
) (void))
(if (string=? ch "!") (let ()
(_return 33)
) (void))
(_return 0)
))
)
(define (chr code)
  (let/ec _return (begin
(define upper_ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower_ "abcdefghijklmnopqrstuvwxyz")
(define digits "0123456789")
(if (equal? code 32) (let ()
(_return " ")
) (void))
(if (equal? code 33) (let ()
(_return "!")
) (void))
(define idx (- code 65))
(if (and (>= idx 0) (< idx (cond [(string? upper_) (string-length upper_)] [(hash? upper_) (hash-count upper_)] [else (length upper_)]))) (let ()
(_return (substring upper_ idx (+ idx 1)))
) (void))
(set! idx (- code 97))
(if (and (>= idx 0) (< idx (cond [(string? lower_) (string-length lower_)] [(hash? lower_) (hash-count lower_)] [else (length lower_)]))) (let ()
(_return (substring lower_ idx (+ idx 1)))
) (void))
(set! idx (- code 48))
(if (and (>= idx 0) (< idx (cond [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)]))) (let ()
(_return (substring digits idx (+ idx 1)))
) (void))
(_return "")
))
)
(define (repeat s n)
  (let/ec _return (begin
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! out (string-append out s))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (to_binary n bits)
  (let/ec _return (begin
(define v n)
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i bits) (let/ec _cont
    (set! out (string-append (format "~a" (modulo v 2)) out))
    (set! v (quotient v 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (binary_to_int bits)
  (let/ec _return (begin
(define n 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)])) (let/ec _cont
    (set! n (* n 2))
    (if (string=? (substring bits i (+ i 1)) "1") (let ()
(set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return n)
))
)
(define (base32_encode data)
  (let/ec _return (begin
(define binary_data "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])) (let/ec _cont
    (set! binary_data (string-append binary_data (to_binary (ord (substring data i (+ i 1))) 8)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define remainder (modulo (cond [(string? binary_data) (string-length binary_data)] [(hash? binary_data) (hash-count binary_data)] [else (length binary_data)]) 5))
(if (not (equal? remainder 0)) (let ()
(set! binary_data (string-append binary_data (_repeat "0" (- 5 remainder))))
) (void))
(define b32_result "")
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? binary_data) (string-length binary_data)] [(hash? binary_data) (hash-count binary_data)] [else (length binary_data)])) (let/ec _cont
    (define chunk (slice binary_data j (let ([__l j] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define index (binary_to_int chunk))
    (set! b32_result (string-append b32_result (substring B32_CHARSET index (+ index 1))))
    (set! j (let ([__l j] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define rem (modulo (cond [(string? b32_result) (string-length b32_result)] [(hash? b32_result) (hash-count b32_result)] [else (length b32_result)]) 8))
(if (not (equal? rem 0)) (let ()
(set! b32_result (string-append b32_result (_repeat "=" (- 8 rem))))
) (void))
(_return b32_result)
))
)
(define (base32_decode data)
  (let/ec _return (begin
(define clean "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])) (let/ec _cont
    (define ch (substring data i (+ i 1)))
    (if (not (string=? ch "=")) (let ()
(set! clean (string-append clean ch))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define binary_chunks "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? clean) (string-length clean)] [(hash? clean) (hash-count clean)] [else (length clean)])) (let/ec _cont
    (define idx (indexOfChar B32_CHARSET (substring clean i (+ i 1))))
    (set! binary_chunks (string-append binary_chunks (to_binary idx 5)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define result "")
(define j 0)
(let/ec _break (let loop ()
  (if (<= (let ([__l j] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? binary_chunks) (string-length binary_chunks)] [(hash? binary_chunks) (hash-count binary_chunks)] [else (length binary_chunks)])) (let/ec _cont
    (define byte_bits (slice binary_chunks j (let ([__l j] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define code (binary_to_int byte_bits))
    (set! result (string-append result (chr code)))
    (set! j (let ([__l j] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (base32_encode "Hello World!"))
(displayln (base32_encode "123456"))
(displayln (base32_encode "some long complex string"))
(displayln (base32_decode "JBSWY3DPEBLW64TMMQQQ===="))
(displayln (base32_decode "GEZDGNBVGY======"))
(displayln (base32_decode "ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
