;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define BYTE_SIZE 256)
(define (pow_int base exp)
  (let/ec _return (begin
(define result 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (mod_pow base exponent modulus)
  (let/ec _return (begin
(define result 1)
(define b (modulo base modulus))
(define e exponent)
(let/ec _break (let loop ()
  (if (> e 0) (let/ec _cont
    (if (equal? (modulo e 2) 1) (let ()
(set! result (modulo (* result b) modulus))
) (void))
    (set! e (quotient e 2))
    (set! b (modulo (* b b) modulus))
    (loop)) (void))))
(_return result)
))
)
(define (ord ch)
  (let/ec _return (begin
(if (string=? ch " ") (let ()
(_return 32)
) (void))
(if (string=? ch "a") (let ()
(_return 97)
) (void))
(if (string=? ch "b") (let ()
(_return 98)
) (void))
(if (string=? ch "c") (let ()
(_return 99)
) (void))
(if (string=? ch "d") (let ()
(_return 100)
) (void))
(if (string=? ch "e") (let ()
(_return 101)
) (void))
(if (string=? ch "f") (let ()
(_return 102)
) (void))
(if (string=? ch "g") (let ()
(_return 103)
) (void))
(if (string=? ch "h") (let ()
(_return 104)
) (void))
(if (string=? ch "i") (let ()
(_return 105)
) (void))
(if (string=? ch "j") (let ()
(_return 106)
) (void))
(if (string=? ch "k") (let ()
(_return 107)
) (void))
(if (string=? ch "l") (let ()
(_return 108)
) (void))
(if (string=? ch "m") (let ()
(_return 109)
) (void))
(if (string=? ch "n") (let ()
(_return 110)
) (void))
(if (string=? ch "o") (let ()
(_return 111)
) (void))
(if (string=? ch "p") (let ()
(_return 112)
) (void))
(if (string=? ch "q") (let ()
(_return 113)
) (void))
(if (string=? ch "r") (let ()
(_return 114)
) (void))
(if (string=? ch "s") (let ()
(_return 115)
) (void))
(if (string=? ch "t") (let ()
(_return 116)
) (void))
(if (string=? ch "u") (let ()
(_return 117)
) (void))
(if (string=? ch "v") (let ()
(_return 118)
) (void))
(if (string=? ch "w") (let ()
(_return 119)
) (void))
(if (string=? ch "x") (let ()
(_return 120)
) (void))
(if (string=? ch "y") (let ()
(_return 121)
) (void))
(if (string=? ch "z") (let ()
(_return 122)
) (void))
(_return 0)
))
)
(define (chr code)
  (let/ec _return (begin
(if (equal? code 32) (let ()
(_return " ")
) (void))
(if (equal? code 97) (let ()
(_return "a")
) (void))
(if (equal? code 98) (let ()
(_return "b")
) (void))
(if (equal? code 99) (let ()
(_return "c")
) (void))
(if (equal? code 100) (let ()
(_return "d")
) (void))
(if (equal? code 101) (let ()
(_return "e")
) (void))
(if (equal? code 102) (let ()
(_return "f")
) (void))
(if (equal? code 103) (let ()
(_return "g")
) (void))
(if (equal? code 104) (let ()
(_return "h")
) (void))
(if (equal? code 105) (let ()
(_return "i")
) (void))
(if (equal? code 106) (let ()
(_return "j")
) (void))
(if (equal? code 107) (let ()
(_return "k")
) (void))
(if (equal? code 108) (let ()
(_return "l")
) (void))
(if (equal? code 109) (let ()
(_return "m")
) (void))
(if (equal? code 110) (let ()
(_return "n")
) (void))
(if (equal? code 111) (let ()
(_return "o")
) (void))
(if (equal? code 112) (let ()
(_return "p")
) (void))
(if (equal? code 113) (let ()
(_return "q")
) (void))
(if (equal? code 114) (let ()
(_return "r")
) (void))
(if (equal? code 115) (let ()
(_return "s")
) (void))
(if (equal? code 116) (let ()
(_return "t")
) (void))
(if (equal? code 117) (let ()
(_return "u")
) (void))
(if (equal? code 118) (let ()
(_return "v")
) (void))
(if (equal? code 119) (let ()
(_return "w")
) (void))
(if (equal? code 120) (let ()
(_return "x")
) (void))
(if (equal? code 121) (let ()
(_return "y")
) (void))
(if (equal? code 122) (let ()
(_return "z")
) (void))
(_return "")
))
)
(define (get_blocks_from_text message block_size)
  (let/ec _return (begin
(define block_ints (list))
(define block_start 0)
(let/ec _break (let loop ()
  (if (< block_start (cond [(string? message) (string-length message)] [(hash? message) (hash-count message)] [else (length message)])) (let/ec _cont
    (define block_int 0)
    (define i block_start)
    (let/ec _break (let loop ()
  (if (and (< i (let ([__l block_start] [__r block_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (< i (cond [(string? message) (string-length message)] [(hash? message) (hash-count message)] [else (length message)]))) (let/ec _cont
    (set! block_int (let ([__l block_int] [__r (* (ord (substring message i (+ i 1))) (pow_int BYTE_SIZE (- i block_start)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! block_ints (append block_ints (list block_int)))
    (set! block_start (let ([__l block_start] [__r block_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return block_ints)
))
)
(define (get_text_from_blocks block_ints message_length block_size)
  (let/ec _return (begin
(define message "")
(let/ec _break (for ([block_int block_ints])
  (let/ec _cont
(define block block_int)
(define i (- block_size 1))
(define block_message "")
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (if (< (let ([__l (cond [(string? message) (string-length message)] [(hash? message) (hash-count message)] [else (length message)])] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) message_length) (let ()
(define ascii_number (quotient block (pow_int BYTE_SIZE i)))
(set! block (modulo block (pow_int BYTE_SIZE i)))
(set! block_message (string-append (chr ascii_number) block_message))
) (void))
    (set! i (- i 1))
    (loop)) (void))))
(set! message (string-append message block_message))
  )))
(_return message)
))
)
(define (encrypt_message message n e block_size)
  (let/ec _return (begin
(define encrypted (list))
(define blocks (get_blocks_from_text message block_size))
(let/ec _break (for ([block blocks])
  (let/ec _cont
(set! encrypted (append encrypted (list (mod_pow block e n))))
  )))
(_return encrypted)
))
)
(define (decrypt_message blocks message_length n d block_size)
  (let/ec _return (begin
(define decrypted_blocks (list))
(let/ec _break (for ([block blocks])
  (let/ec _cont
(set! decrypted_blocks (append decrypted_blocks (list (mod_pow block d n))))
  )))
(define message "")
(let/ec _break (for ([num decrypted_blocks])
  (let/ec _cont
(set! message (string-append message (chr num)))
  )))
(_return message)
))
)
(define (main)
  (let/ec _return (begin
(define message "hello world")
(define n 3233)
(define e 17)
(define d 2753)
(define block_size 1)
(define encrypted (encrypt_message message n e block_size))
(displayln (format "~a" encrypted))
(define decrypted (decrypt_message encrypted (cond [(string? message) (string-length message)] [(hash? message) (hash-count message)] [else (length message)]) n d block_size))
(displayln decrypted)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
