;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (mod_pow base exp mod)
  (let/ec _return (begin
(define result 1)
(define b (modulo base mod))
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let/ec _cont
    (if (equal? (modulo e 2) 1) (let ()
(set! result (modulo (* result b) mod))
) (void))
    (set! b (modulo (* b b) mod))
    (set! e (quotient e 2))
    (loop)) (void))))
(_return result)
))
)
(define (miller_rabin n allow_probable)
  (let/ec _return (begin
(if (equal? n 2) (let ()
(_return #t)
) (void))
(if (or (< n 2) (equal? (modulo n 2) 0)) (let ()
(_return #f)
) (void))
(if (> n 5) (let ()
(define last (modulo n 10))
(if (not (or (or (or (equal? last 1) (equal? last 3)) (equal? last 7)) (equal? last 9))) (let ()
(_return #f)
) (void))
) (void))
(define limit 3825123056546413051)
(if (and (> n limit) (not allow_probable)) (let ()
(panic "Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test.")
) (void))
(define bounds (list 2047 1373653 25326001 3215031751 2152302898747 3474749660383 341550071728321 limit))
(define primes (list 2 3 5 7 11 13 17 19))
(define i 0)
(define plist_len (cond [(string? primes) (string-length primes)] [(hash? primes) (hash-count primes)] [else (length primes)]))
(let/ec _break (let loop ()
  (if (< i (cond [(string? bounds) (string-length bounds)] [(hash? bounds) (hash-count bounds)] [else (length bounds)])) (let/ec _cont
    (if (< n (if bounds (if (hash? bounds) (hash-ref bounds i #f) (list-ref bounds (int i))) #f)) (let ()
(set! plist_len (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! i (cond [(string? bounds) (string-length bounds)] [(hash? bounds) (hash-count bounds)] [else (length bounds)]))
) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(define d (- n 1))
(define s 0)
(let/ec _break (let loop ()
  (if (equal? (modulo d 2) 0) (let/ec _cont
    (set! d (quotient d 2))
    (set! s (let ([__l s] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j plist_len) (let/ec _cont
    (define prime (if primes (if (hash? primes) (hash-ref primes j #f) (list-ref primes (int j))) #f))
    (define x (mod_pow prime d n))
    (define pr #f)
    (if (or (equal? x 1) (equal? x (- n 1))) (let ()
(set! pr #t)
) (let ()
(define r 1)
(let/ec _break (let loop ()
  (if (and (< r s) (not pr)) (let/ec _cont
    (set! x (modulo (* x x) n))
    (if (equal? x (- n 1)) (let ()
(set! pr #t)
) (void))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
    (if (not pr) (let ()
(_return #f)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" (miller_rabin 561 #f)))
(displayln (format "~a" (miller_rabin 563 #f)))
(displayln (format "~a" (miller_rabin 838201 #f)))
(displayln (format "~a" (miller_rabin 838207 #f)))
(displayln (format "~a" (miller_rabin 17316001 #f)))
(displayln (format "~a" (miller_rabin 17316017 #f)))
(displayln (format "~a" (miller_rabin 3078386641 #f)))
(displayln (format "~a" (miller_rabin 3078386653 #f)))
(displayln (format "~a" (miller_rabin 1713045574801 #f)))
(displayln (format "~a" (miller_rabin 1713045574819 #f)))
(displayln (format "~a" (miller_rabin 2779799728307 #f)))
(displayln (format "~a" (miller_rabin 2779799728327 #f)))
(displayln (format "~a" (miller_rabin 113850023909441 #f)))
(displayln (format "~a" (miller_rabin 113850023909527 #f)))
(displayln (format "~a" (miller_rabin 1275041018848804351 #f)))
(displayln (format "~a" (miller_rabin 1275041018848804391 #f)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
