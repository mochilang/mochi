;; Generated by Mochi 0.10.63 on 2025-08-11 17:23 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (binary_search_insertion_from sorted_list item start)
  (let/ec _return (begin
(define left start)
(define right (- (cond [(not sorted_list) 0] [(string? sorted_list) (string-length sorted_list)] [(hash? sorted_list) (hash-count sorted_list)] [else (length sorted_list)]) 1))
(let/ec _break (let loop ()
  (if (let ([__l left] [__r right]) (<= (int __l) (int __r))) (begin
    (let/ec _cont
      (define middle (floor (/ (let ([__l left] [__r right]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2)))
      (if (equal? left right) (let ()
(if (let ([__l (if sorted_list (if (hash? sorted_list) (hash-ref sorted_list middle #f) (safe-index sorted_list (int middle))) #f)] [__r item]) (< (int __l) (int __r))) (let ()
(set! left (let ([__l middle] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_break)
) (let ()
(if (let ([__l (if sorted_list (if (hash? sorted_list) (hash-ref sorted_list middle #f) (safe-index sorted_list (int middle))) #f)] [__r item]) (< (int __l) (int __r))) (let ()
(set! left (let ([__l middle] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! right (- middle 1))
))
))
    )
    (loop)) (void))))
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r left]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! result (append (or result (list)) (list (if sorted_list (if (hash? sorted_list) (hash-ref sorted_list i #f) (safe-index sorted_list (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! result (append (or result (list)) (list item)))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not sorted_list) 0] [(string? sorted_list) (string-length sorted_list)] [(hash? sorted_list) (hash-count sorted_list)] [else (length sorted_list)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! result (append (or result (list)) (list (if sorted_list (if (hash? sorted_list) (hash-ref sorted_list i #f) (safe-index sorted_list (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (binary_search_insertion sorted_list item)
  (let/ec _return (begin
(_return (binary_search_insertion_from sorted_list item 0))
))
)
(define (merge left right)
  (let/ec _return (begin
(define result (list))
(define i 0)
(define j 0)
(let/ec _break (let loop ()
  (if (and (let ([__l i] [__r (cond [(not left) 0] [(string? left) (string-length left)] [(hash? left) (hash-count left)] [else (length left)])]) (< (int __l) (int __r))) (let ([__l j] [__r (cond [(not right) 0] [(string? right) (string-length right)] [(hash? right) (hash-count right)] [else (length right)])]) (< (int __l) (int __r)))) (begin
    (let/ec _cont
      (if (let ([__l (if (if left (if (hash? left) (hash-ref left i #f) (safe-index left (int i))) #f) (if (hash? (if left (if (hash? left) (hash-ref left i #f) (safe-index left (int i))) #f)) (hash-ref (if left (if (hash? left) (hash-ref left i #f) (safe-index left (int i))) #f) 0 #f) (safe-index (if left (if (hash? left) (hash-ref left i #f) (safe-index left (int i))) #f) (int 0))) #f)] [__r (if (if right (if (hash? right) (hash-ref right j #f) (safe-index right (int j))) #f) (if (hash? (if right (if (hash? right) (hash-ref right j #f) (safe-index right (int j))) #f)) (hash-ref (if right (if (hash? right) (hash-ref right j #f) (safe-index right (int j))) #f) 0 #f) (safe-index (if right (if (hash? right) (hash-ref right j #f) (safe-index right (int j))) #f) (int 0))) #f)]) (< (int __l) (int __r))) (let ()
(set! result (append (or result (list)) (list (if left (if (hash? left) (hash-ref left i #f) (safe-index left (int i))) #f))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! result (append (or result (list)) (list (if right (if (hash? right) (hash-ref right j #f) (safe-index right (int j))) #f))))
(set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    )
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not left) 0] [(string? left) (string-length left)] [(hash? left) (hash-count left)] [else (length left)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! result (append (or result (list)) (list (if left (if (hash? left) (hash-ref left i #f) (safe-index left (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not right) 0] [(string? right) (string-length right)] [(hash? right) (hash-count right)] [else (length right)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! result (append (or result (list)) (list (if right (if (hash? right) (hash-ref right j #f) (safe-index right (int j))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (sortlist_2d list_2d)
  (let/ec _return (begin
(define length_ (cond [(not list_2d) 0] [(string? list_2d) (string-length list_2d)] [(hash? list_2d) (hash-count list_2d)] [else (length list_2d)]))
(if (let ([__l length_] [__r 1]) (<= (int __l) (int __r))) (let ()
(_return list_2d)
) (void))
(define middle (floor (/ length_ 2)))
(define left (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r middle]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! left (append (or left (list)) (list (if list_2d (if (hash? list_2d) (hash-ref list_2d i #f) (safe-index list_2d (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define right (list))
(define j middle)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r length_]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! right (append (or right (list)) (list (if list_2d (if (hash? list_2d) (hash-ref list_2d j #f) (safe-index list_2d (int j))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (merge (sortlist_2d left) (sortlist_2d right)))
))
)
(define (merge_insertion_sort collection)
  (let/ec _return (begin
(if (let ([__l (cond [(not collection) 0] [(string? collection) (string-length collection)] [(hash? collection) (hash-count collection)] [else (length collection)])] [__r 1]) (<= (int __l) (int __r))) (let ()
(_return collection)
) (void))
(define two_paired_list (list))
(define has_last_odd_item #f)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not collection) 0] [(string? collection) (string-length collection)] [(hash? collection) (hash-count collection)] [else (length collection)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (equal? i (- (cond [(not collection) 0] [(string? collection) (string-length collection)] [(hash? collection) (hash-count collection)] [else (length collection)]) 1)) (let ()
(set! has_last_odd_item #t)
) (let ()
(define a (if collection (if (hash? collection) (hash-ref collection i #f) (safe-index collection (int i))) #f))
(define b (if collection (if (hash? collection) (hash-ref collection (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index collection (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
(if (let ([__l a] [__r b]) (< (int __l) (int __r))) (let ()
(set! two_paired_list (append (or two_paired_list (list)) (list (list a b))))
) (let ()
(set! two_paired_list (append (or two_paired_list (list)) (list (list b a))))
))
))
      (set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define sorted_list_2d (sortlist_2d two_paired_list))
(define result (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! result (append (or result (list)) (list (if (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d i #f) (safe-index sorted_list_2d (int i))) #f) (if (hash? (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d i #f) (safe-index sorted_list_2d (int i))) #f)) (hash-ref (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d i #f) (safe-index sorted_list_2d (int i))) #f) 0 #f) (safe-index (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d i #f) (safe-index sorted_list_2d (int i))) #f) (int 0))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! result (append (or result (list)) (list (if (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d (- (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)]) 1) #f) (safe-index sorted_list_2d (int (- (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)]) 1)))) #f) (if (hash? (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d (- (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)]) 1) #f) (safe-index sorted_list_2d (int (- (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)]) 1)))) #f)) (hash-ref (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d (- (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)]) 1) #f) (safe-index sorted_list_2d (int (- (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)]) 1)))) #f) 1 #f) (safe-index (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d (- (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)]) 1) #f) (safe-index sorted_list_2d (int (- (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)]) 1)))) #f) (int 1))) #f))))
(if has_last_odd_item (let ()
(set! result (binary_search_insertion result (if collection (if (hash? collection) (hash-ref collection (- (cond [(not collection) 0] [(string? collection) (string-length collection)] [(hash? collection) (hash-count collection)] [else (length collection)]) 1) #f) (safe-index collection (int (- (cond [(not collection) 0] [(string? collection) (string-length collection)] [(hash? collection) (hash-count collection)] [else (length collection)]) 1)))) #f)))
) (void))
(define inserted_before #f)
(define idx 0)
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (- (cond [(not sorted_list_2d) 0] [(string? sorted_list_2d) (string-length sorted_list_2d)] [(hash? sorted_list_2d) (hash-count sorted_list_2d)] [else (length sorted_list_2d)]) 1)]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (and has_last_odd_item (equal? (if result (if (hash? result) (hash-ref result idx #f) (safe-index result (int idx))) #f) (if collection (if (hash? collection) (hash-ref collection (- (cond [(not collection) 0] [(string? collection) (string-length collection)] [(hash? collection) (hash-count collection)] [else (length collection)]) 1) #f) (safe-index collection (int (- (cond [(not collection) 0] [(string? collection) (string-length collection)] [(hash? collection) (hash-count collection)] [else (length collection)]) 1)))) #f))) (let ()
(set! inserted_before #t)
) (void))
      (define pivot (if (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d idx #f) (safe-index sorted_list_2d (int idx))) #f) (if (hash? (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d idx #f) (safe-index sorted_list_2d (int idx))) #f)) (hash-ref (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d idx #f) (safe-index sorted_list_2d (int idx))) #f) 1 #f) (safe-index (if sorted_list_2d (if (hash? sorted_list_2d) (hash-ref sorted_list_2d idx #f) (safe-index sorted_list_2d (int idx))) #f) (int 1))) #f))
      (if inserted_before (let ()
(set! result (binary_search_insertion_from result pivot (let ([__l idx] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(set! result (binary_search_insertion_from result pivot (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (main)
  (let/ec _return (begin
(define example1 (list 0 5 3 2 2))
(define example2 (list 99))
(define example3 (list (- 2) (- 5) (- 45)))
(displayln (to-string (merge_insertion_sort example1)))
(displayln (to-string (merge_insertion_sort example2)))
(displayln (to-string (merge_insertion_sort example3)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
