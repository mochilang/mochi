;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (lu_decomposition mat)
  (let/ec _return (begin
(define n (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)]))
(if (equal? n 0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "lower" (list)) (hash-set! h "upper" (list)) h))
) (void))
(define m (cond [(not (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) 0] [(string? (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))]))
(if (not (equal? n m)) (let ()
(panic "Matrix must be square")
) (void))
(define lower_ (list))
(define upper_ (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define lrow (list))
    (define urow (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! lrow (append lrow (list 0.0)))
    (set! urow (append urow (list 0.0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! lower_ (append lower_ (list lrow)))
    (set! upper_ (append upper_ (list urow)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define j1 0)
    (let/ec _break (let loop ()
  (if (< j1 i) (let/ec _cont
    (define total 0.0)
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k i) (let/ec _cont
    (set! total (let ([__l total] [__r (* (if (if lower_ (if (hash? lower_) (hash-ref lower_ i #f) (list-ref lower_ (int i))) #f) (if (hash? (if lower_ (if (hash? lower_) (hash-ref lower_ i #f) (list-ref lower_ (int i))) #f)) (hash-ref (if lower_ (if (hash? lower_) (hash-ref lower_ i #f) (list-ref lower_ (int i))) #f) k #f) (list-ref (if lower_ (if (hash? lower_) (hash-ref lower_ i #f) (list-ref lower_ (int i))) #f) (int k))) #f) (if (if upper_ (if (hash? upper_) (hash-ref upper_ k #f) (list-ref upper_ (int k))) #f) (if (hash? (if upper_ (if (hash? upper_) (hash-ref upper_ k #f) (list-ref upper_ (int k))) #f)) (hash-ref (if upper_ (if (hash? upper_) (hash-ref upper_ k #f) (list-ref upper_ (int k))) #f) j1 #f) (list-ref (if upper_ (if (hash? upper_) (hash-ref upper_ k #f) (list-ref upper_ (int k))) #f) (int j1))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (equal? (if (if upper_ (if (hash? upper_) (hash-ref upper_ j1 #f) (list-ref upper_ (int j1))) #f) (if (hash? (if upper_ (if (hash? upper_) (hash-ref upper_ j1 #f) (list-ref upper_ (int j1))) #f)) (hash-ref (if upper_ (if (hash? upper_) (hash-ref upper_ j1 #f) (list-ref upper_ (int j1))) #f) j1 #f) (list-ref (if upper_ (if (hash? upper_) (hash-ref upper_ j1 #f) (list-ref upper_ (int j1))) #f) (int j1))) #f) 0.0) (let ()
(panic "No LU decomposition exists")
) (void))
    (set! lower_ (list-set lower_ i (list-set (list-ref lower_ i) j1 (/ (- (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j1 #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j1))) #f) total) (if (if upper_ (if (hash? upper_) (hash-ref upper_ j1 #f) (list-ref upper_ (int j1))) #f) (if (hash? (if upper_ (if (hash? upper_) (hash-ref upper_ j1 #f) (list-ref upper_ (int j1))) #f)) (hash-ref (if upper_ (if (hash? upper_) (hash-ref upper_ j1 #f) (list-ref upper_ (int j1))) #f) j1 #f) (list-ref (if upper_ (if (hash? upper_) (hash-ref upper_ j1 #f) (list-ref upper_ (int j1))) #f) (int j1))) #f)))))
    (set! j1 (let ([__l j1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! lower_ (list-set lower_ i (list-set (list-ref lower_ i) i 1.0)))
    (define j2 i)
    (let/ec _break (let loop ()
  (if (< j2 n) (let/ec _cont
    (define total2 0.0)
    (define k2 0)
    (let/ec _break (let loop ()
  (if (< k2 i) (let/ec _cont
    (set! total2 (let ([__l total2] [__r (* (if (if lower_ (if (hash? lower_) (hash-ref lower_ i #f) (list-ref lower_ (int i))) #f) (if (hash? (if lower_ (if (hash? lower_) (hash-ref lower_ i #f) (list-ref lower_ (int i))) #f)) (hash-ref (if lower_ (if (hash? lower_) (hash-ref lower_ i #f) (list-ref lower_ (int i))) #f) k2 #f) (list-ref (if lower_ (if (hash? lower_) (hash-ref lower_ i #f) (list-ref lower_ (int i))) #f) (int k2))) #f) (if (if upper_ (if (hash? upper_) (hash-ref upper_ k2 #f) (list-ref upper_ (int k2))) #f) (if (hash? (if upper_ (if (hash? upper_) (hash-ref upper_ k2 #f) (list-ref upper_ (int k2))) #f)) (hash-ref (if upper_ (if (hash? upper_) (hash-ref upper_ k2 #f) (list-ref upper_ (int k2))) #f) j2 #f) (list-ref (if upper_ (if (hash? upper_) (hash-ref upper_ k2 #f) (list-ref upper_ (int k2))) #f) (int j2))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k2 (let ([__l k2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! upper_ (list-set upper_ i (list-set (list-ref upper_ i) j2 (- (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j2 #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j2))) #f) total2))))
    (set! j2 (let ([__l j2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "lower" lower_) (hash-set! h "upper" upper_) h))
))
)
(define (print_matrix mat)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)])) (let/ec _cont
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) 0] [(string? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))])) (let/ec _cont
    (set! line (string-append line (format "~a" (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j))) #f))))
    (if (< (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) 0] [(string? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))])) (let ()
(set! line (string-append line " "))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define matrix (list (list 2.0 (- 2.0) 1.0) (list 0.0 1.0 2.0) (list 5.0 3.0 1.0)))
(define result (lu_decomposition matrix))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(print_matrix (if result (hash-ref result "lower" #f) #f))
(print_matrix (if result (hash-ref result "upper" #f) #f))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
