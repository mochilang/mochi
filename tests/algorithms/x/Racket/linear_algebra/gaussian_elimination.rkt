;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (retroactive_resolution coefficients vector)
  (let/ec _return (begin
(define rows (cond [(not coefficients) 0] [(string? coefficients) (string-length coefficients)] [(hash? coefficients) (hash-count coefficients)] [else (length coefficients)]))
(define x (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (define inner (list))
    (set! inner (append inner (list 0.0)))
    (set! x (append x (list inner)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define r (- rows 1))
(let/ec _break (let loop ()
  (if (>= r 0) (let/ec _cont
    (define total 0.0)
    (define c (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< c rows) (let/ec _cont
    (set! total (let ([__l total] [__r (* (if (if coefficients (if (hash? coefficients) (hash-ref coefficients r #f) (list-ref coefficients (int r))) #f) (if (hash? (if coefficients (if (hash? coefficients) (hash-ref coefficients r #f) (list-ref coefficients (int r))) #f)) (hash-ref (if coefficients (if (hash? coefficients) (hash-ref coefficients r #f) (list-ref coefficients (int r))) #f) c #f) (list-ref (if coefficients (if (hash? coefficients) (hash-ref coefficients r #f) (list-ref coefficients (int r))) #f) (int c))) #f) (if (if x (if (hash? x) (hash-ref x c #f) (list-ref x (int c))) #f) (if (hash? (if x (if (hash? x) (hash-ref x c #f) (list-ref x (int c))) #f)) (hash-ref (if x (if (hash? x) (hash-ref x c #f) (list-ref x (int c))) #f) 0 #f) (list-ref (if x (if (hash? x) (hash-ref x c #f) (list-ref x (int c))) #f) (int 0))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! x (list-set x r (list-set (list-ref x r) 0 (/ (- (if (if vector (if (hash? vector) (hash-ref vector r #f) (list-ref vector (int r))) #f) (if (hash? (if vector (if (hash? vector) (hash-ref vector r #f) (list-ref vector (int r))) #f)) (hash-ref (if vector (if (hash? vector) (hash-ref vector r #f) (list-ref vector (int r))) #f) 0 #f) (list-ref (if vector (if (hash? vector) (hash-ref vector r #f) (list-ref vector (int r))) #f) (int 0))) #f) total) (if (if coefficients (if (hash? coefficients) (hash-ref coefficients r #f) (list-ref coefficients (int r))) #f) (if (hash? (if coefficients (if (hash? coefficients) (hash-ref coefficients r #f) (list-ref coefficients (int r))) #f)) (hash-ref (if coefficients (if (hash? coefficients) (hash-ref coefficients r #f) (list-ref coefficients (int r))) #f) r #f) (list-ref (if coefficients (if (hash? coefficients) (hash-ref coefficients r #f) (list-ref coefficients (int r))) #f) (int r))) #f)))))
    (set! r (- r 1))
    (loop)) (void))))
(_return x)
))
)
(define (gaussian_elimination coefficients vector)
  (let/ec _return (begin
(define rows (cond [(not coefficients) 0] [(string? coefficients) (string-length coefficients)] [(hash? coefficients) (hash-count coefficients)] [else (length coefficients)]))
(define columns (cond [(not (if coefficients (if (hash? coefficients) (hash-ref coefficients 0 #f) (list-ref coefficients (int 0))) #f)) 0] [(string? (if coefficients (if (hash? coefficients) (hash-ref coefficients 0 #f) (list-ref coefficients (int 0))) #f)) (string-length (if coefficients (if (hash? coefficients) (hash-ref coefficients 0 #f) (list-ref coefficients (int 0))) #f))] [(hash? (if coefficients (if (hash? coefficients) (hash-ref coefficients 0 #f) (list-ref coefficients (int 0))) #f)) (hash-count (if coefficients (if (hash? coefficients) (hash-ref coefficients 0 #f) (list-ref coefficients (int 0))) #f))] [else (length (if coefficients (if (hash? coefficients) (hash-ref coefficients 0 #f) (list-ref coefficients (int 0))) #f))]))
(if (not (equal? rows columns)) (let ()
(_return (list))
) (void))
(define augmented (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j columns) (let/ec _cont
    (set! row (append row (list (if (if coefficients (if (hash? coefficients) (hash-ref coefficients i #f) (list-ref coefficients (int i))) #f) (if (hash? (if coefficients (if (hash? coefficients) (hash-ref coefficients i #f) (list-ref coefficients (int i))) #f)) (hash-ref (if coefficients (if (hash? coefficients) (hash-ref coefficients i #f) (list-ref coefficients (int i))) #f) j #f) (list-ref (if coefficients (if (hash? coefficients) (hash-ref coefficients i #f) (list-ref coefficients (int i))) #f) (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row (append row (list (if (if vector (if (hash? vector) (hash-ref vector i #f) (list-ref vector (int i))) #f) (if (hash? (if vector (if (hash? vector) (hash-ref vector i #f) (list-ref vector (int i))) #f)) (hash-ref (if vector (if (hash? vector) (hash-ref vector i #f) (list-ref vector (int i))) #f) 0 #f) (list-ref (if vector (if (hash? vector) (hash-ref vector i #f) (list-ref vector (int i))) #f) (int 0))) #f))))
    (set! augmented (append augmented (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define row_idx 0)
(let/ec _break (let loop ()
  (if (< row_idx (- rows 1)) (let/ec _cont
    (define pivot (if (if augmented (if (hash? augmented) (hash-ref augmented row_idx #f) (list-ref augmented (int row_idx))) #f) (if (hash? (if augmented (if (hash? augmented) (hash-ref augmented row_idx #f) (list-ref augmented (int row_idx))) #f)) (hash-ref (if augmented (if (hash? augmented) (hash-ref augmented row_idx #f) (list-ref augmented (int row_idx))) #f) row_idx #f) (list-ref (if augmented (if (hash? augmented) (hash-ref augmented row_idx #f) (list-ref augmented (int row_idx))) #f) (int row_idx))) #f))
    (define col (let ([__l row_idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< col rows) (let/ec _cont
    (define factor (/ (if (if augmented (if (hash? augmented) (hash-ref augmented col #f) (list-ref augmented (int col))) #f) (if (hash? (if augmented (if (hash? augmented) (hash-ref augmented col #f) (list-ref augmented (int col))) #f)) (hash-ref (if augmented (if (hash? augmented) (hash-ref augmented col #f) (list-ref augmented (int col))) #f) row_idx #f) (list-ref (if augmented (if (hash? augmented) (hash-ref augmented col #f) (list-ref augmented (int col))) #f) (int row_idx))) #f) pivot))
    (define k row_idx)
    (let/ec _break (let loop ()
  (if (< k (let ([__l columns] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (set! augmented (list-set augmented col (list-set (list-ref augmented col) k (- (if (if augmented (if (hash? augmented) (hash-ref augmented col #f) (list-ref augmented (int col))) #f) (if (hash? (if augmented (if (hash? augmented) (hash-ref augmented col #f) (list-ref augmented (int col))) #f)) (hash-ref (if augmented (if (hash? augmented) (hash-ref augmented col #f) (list-ref augmented (int col))) #f) k #f) (list-ref (if augmented (if (hash? augmented) (hash-ref augmented col #f) (list-ref augmented (int col))) #f) (int k))) #f) (* factor (if (if augmented (if (hash? augmented) (hash-ref augmented row_idx #f) (list-ref augmented (int row_idx))) #f) (if (hash? (if augmented (if (hash? augmented) (hash-ref augmented row_idx #f) (list-ref augmented (int row_idx))) #f)) (hash-ref (if augmented (if (hash? augmented) (hash-ref augmented row_idx #f) (list-ref augmented (int row_idx))) #f) k #f) (list-ref (if augmented (if (hash? augmented) (hash-ref augmented row_idx #f) (list-ref augmented (int row_idx))) #f) (int k))) #f))))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row_idx (let ([__l row_idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define coeffs (list))
(define vec (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r rows) (let/ec _cont
    (define row (list))
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c columns) (let/ec _cont
    (set! row (append row (list (if (if augmented (if (hash? augmented) (hash-ref augmented r #f) (list-ref augmented (int r))) #f) (if (hash? (if augmented (if (hash? augmented) (hash-ref augmented r #f) (list-ref augmented (int r))) #f)) (hash-ref (if augmented (if (hash? augmented) (hash-ref augmented r #f) (list-ref augmented (int r))) #f) c #f) (list-ref (if augmented (if (hash? augmented) (hash-ref augmented r #f) (list-ref augmented (int r))) #f) (int c))) #f))))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! coeffs (append coeffs (list row)))
    (set! vec (append vec (list (list (if (if augmented (if (hash? augmented) (hash-ref augmented r #f) (list-ref augmented (int r))) #f) (if (hash? (if augmented (if (hash? augmented) (hash-ref augmented r #f) (list-ref augmented (int r))) #f)) (hash-ref (if augmented (if (hash? augmented) (hash-ref augmented r #f) (list-ref augmented (int r))) #f) columns #f) (list-ref (if augmented (if (hash? augmented) (hash-ref augmented r #f) (list-ref augmented (int r))) #f) (int columns))) #f)))))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define x (retroactive_resolution coeffs vec))
(_return x)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (gaussian_elimination (list (list 1.0 (- 4.0) (- 2.0)) (list 5.0 2.0 (- 2.0)) (list 1.0 (- 1.0) 0.0)) (list (list (- 2.0)) (list (- 3.0)) (list 4.0))))
(displayln (gaussian_elimination (list (list 1.0 2.0) (list 5.0 2.0)) (list (list 5.0) (list 5.0))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
