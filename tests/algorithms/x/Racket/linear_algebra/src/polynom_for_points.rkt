;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (contains_int xs x)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (if (equal? (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f) x) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (split s sep)
  (let/ec _return (begin
(define res (list))
(define current "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (string=? ch sep) (let ()
(set! res (append res (list current)))
(set! current "")
) (let ()
(set! current (string-append current ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! res (append res (list current)))
(_return res)
))
)
(define (pow_int_float base exp)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! result (* result (exact->inexact base)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (points_to_polynomial coordinates)
  (let/ec _return (begin
(if (equal? (cond [(not coordinates) 0] [(string? coordinates) (string-length coordinates)] [(hash? coordinates) (hash-count coordinates)] [else (length coordinates)]) 0) (let ()
(panic "The program cannot work out a fitting polynomial.")
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not coordinates) 0] [(string? coordinates) (string-length coordinates)] [(hash? coordinates) (hash-count coordinates)] [else (length coordinates)])) (let/ec _cont
    (if (not (equal? (cond [(not (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f)) 0] [(string? (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f)) (string-length (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f))] [(hash? (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f)) (hash-count (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f))] [else (length (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f))]) 2)) (let ()
(panic "The program cannot work out a fitting polynomial.")
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(not coordinates) 0] [(string? coordinates) (string-length coordinates)] [(hash? coordinates) (hash-count coordinates)] [else (length coordinates)])) (let/ec _cont
    (define k (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< k (cond [(not coordinates) 0] [(string? coordinates) (string-length coordinates)] [(hash? coordinates) (hash-count coordinates)] [else (length coordinates)])) (let/ec _cont
    (if (and (equal? (if (if coordinates (if (hash? coordinates) (hash-ref coordinates j #f) (list-ref coordinates (int j))) #f) (if (hash? (if coordinates (if (hash? coordinates) (hash-ref coordinates j #f) (list-ref coordinates (int j))) #f)) (hash-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates j #f) (list-ref coordinates (int j))) #f) 0 #f) (list-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates j #f) (list-ref coordinates (int j))) #f) (int 0))) #f) (if (if coordinates (if (hash? coordinates) (hash-ref coordinates k #f) (list-ref coordinates (int k))) #f) (if (hash? (if coordinates (if (hash? coordinates) (hash-ref coordinates k #f) (list-ref coordinates (int k))) #f)) (hash-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates k #f) (list-ref coordinates (int k))) #f) 0 #f) (list-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates k #f) (list-ref coordinates (int k))) #f) (int 0))) #f)) (equal? (if (if coordinates (if (hash? coordinates) (hash-ref coordinates j #f) (list-ref coordinates (int j))) #f) (if (hash? (if coordinates (if (hash? coordinates) (hash-ref coordinates j #f) (list-ref coordinates (int j))) #f)) (hash-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates j #f) (list-ref coordinates (int j))) #f) 1 #f) (list-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates j #f) (list-ref coordinates (int j))) #f) (int 1))) #f) (if (if coordinates (if (hash? coordinates) (hash-ref coordinates k #f) (list-ref coordinates (int k))) #f) (if (hash? (if coordinates (if (hash? coordinates) (hash-ref coordinates k #f) (list-ref coordinates (int k))) #f)) (hash-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates k #f) (list-ref coordinates (int k))) #f) 1 #f) (list-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates k #f) (list-ref coordinates (int k))) #f) (int 1))) #f))) (let ()
(panic "The program cannot work out a fitting polynomial.")
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define set_x (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not coordinates) 0] [(string? coordinates) (string-length coordinates)] [(hash? coordinates) (hash-count coordinates)] [else (length coordinates)])) (let/ec _cont
    (define x_val (if (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f) (if (hash? (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f)) (hash-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f) 0 #f) (list-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates i #f) (list-ref coordinates (int i))) #f) (int 0))) #f))
    (if (not (contains_int set_x x_val)) (let ()
(set! set_x (append set_x (list x_val)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (equal? (cond [(not set_x) 0] [(string? set_x) (string-length set_x)] [(hash? set_x) (hash-count set_x)] [else (length set_x)]) 1) (let ()
(_return (string-append "x=" (format "~a" (if (if coordinates (if (hash? coordinates) (hash-ref coordinates 0 #f) (list-ref coordinates (int 0))) #f) (if (hash? (if coordinates (if (hash? coordinates) (hash-ref coordinates 0 #f) (list-ref coordinates (int 0))) #f)) (hash-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates 0 #f) (list-ref coordinates (int 0))) #f) 0 #f) (list-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates 0 #f) (list-ref coordinates (int 0))) #f) (int 0))) #f))))
) (void))
(if (not (equal? (cond [(not set_x) 0] [(string? set_x) (string-length set_x)] [(hash? set_x) (hash-count set_x)] [else (length set_x)]) (cond [(not coordinates) 0] [(string? coordinates) (string-length coordinates)] [(hash? coordinates) (hash-count coordinates)] [else (length coordinates)]))) (let ()
(panic "The program cannot work out a fitting polynomial.")
) (void))
(define n (cond [(not coordinates) 0] [(string? coordinates) (string-length coordinates)] [(hash? coordinates) (hash-count coordinates)] [else (length coordinates)]))
(define matrix (list))
(define row 0)
(let/ec _break (let loop ()
  (if (< row n) (let/ec _cont
    (define line (list))
    (define col 0)
    (let/ec _break (let loop ()
  (if (< col n) (let/ec _cont
    (define power (pow_int_float (if (if coordinates (if (hash? coordinates) (hash-ref coordinates row #f) (list-ref coordinates (int row))) #f) (if (hash? (if coordinates (if (hash? coordinates) (hash-ref coordinates row #f) (list-ref coordinates (int row))) #f)) (hash-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates row #f) (list-ref coordinates (int row))) #f) 0 #f) (list-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates row #f) (list-ref coordinates (int row))) #f) (int 0))) #f) (- n (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! line (append line (list power)))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! matrix (append matrix (list line)))
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define vector (list))
(set! row 0)
(let/ec _break (let loop ()
  (if (< row n) (let/ec _cont
    (set! vector (append vector (list (exact->inexact (if (if coordinates (if (hash? coordinates) (hash-ref coordinates row #f) (list-ref coordinates (int row))) #f) (if (hash? (if coordinates (if (hash? coordinates) (hash-ref coordinates row #f) (list-ref coordinates (int row))) #f)) (hash-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates row #f) (list-ref coordinates (int row))) #f) 1 #f) (list-ref (if coordinates (if (hash? coordinates) (hash-ref coordinates row #f) (list-ref coordinates (int row))) #f) (int 1))) #f)))))
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define count 0)
(let/ec _break (let loop ()
  (if (< count n) (let/ec _cont
    (define number 0)
    (let/ec _break (let loop ()
  (if (< number n) (let/ec _cont
    (if (not (equal? count number)) (let ()
(define fraction (/ (if (if matrix (if (hash? matrix) (hash-ref matrix number #f) (list-ref matrix (int number))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix number #f) (list-ref matrix (int number))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix number #f) (list-ref matrix (int number))) #f) count #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix number #f) (list-ref matrix (int number))) #f) (int count))) #f) (if (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f) count #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f) (int count))) #f)))
(define cc 0)
(let/ec _break (let loop ()
  (if (< cc n) (let/ec _cont
    (set! matrix (list-set matrix number (list-set (list-ref matrix number) cc (- (if (if matrix (if (hash? matrix) (hash-ref matrix number #f) (list-ref matrix (int number))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix number #f) (list-ref matrix (int number))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix number #f) (list-ref matrix (int number))) #f) cc #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix number #f) (list-ref matrix (int number))) #f) (int cc))) #f) (* (if (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f) cc #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f) (int cc))) #f) fraction)))))
    (set! cc (let ([__l cc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! vector (list-set vector (int number) (- (if vector (if (hash? vector) (hash-ref vector number #f) (list-ref vector (int number))) #f) (* (if vector (if (hash? vector) (hash-ref vector count #f) (list-ref vector (int count))) #f) fraction))))
) (void))
    (set! number (let ([__l number] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define solution (list))
(set! count 0)
(let/ec _break (let loop ()
  (if (< count n) (let/ec _cont
    (define value (/ (if vector (if (hash? vector) (hash-ref vector count #f) (list-ref vector (int count))) #f) (if (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f) count #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix count #f) (list-ref matrix (int count))) #f) (int count))) #f)))
    (set! solution (append solution (list (format "~a" value))))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define solved "f(x)=")
(set! count 0)
(let/ec _break (let loop ()
  (if (< count n) (let/ec _cont
    (define parts (split (if solution (if (hash? solution) (hash-ref solution count #f) (list-ref solution (int count))) #f) "e"))
    (define coeff (if solution (if (hash? solution) (hash-ref solution count #f) (list-ref solution (int count))) #f))
    (if (> (cond [(not parts) 0] [(string? parts) (string-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)]) 1) (let ()
(set! coeff (string-append (string-append (if parts (if (hash? parts) (hash-ref parts 0 #f) (list-ref parts (int 0))) #f) "*10^") (if parts (if (hash? parts) (hash-ref parts 1 #f) (list-ref parts (int 1))) #f)))
) (void))
    (set! solved (string-append (string-append (string-append (string-append solved "x^") (format "~a" (- n (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) "*") coeff))
    (if (not (equal? (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) n)) (let ()
(set! solved (string-append solved "+"))
) (void))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return solved)
))
)
(define (main)
  (let/ec _return (begin
(displayln (points_to_polynomial (list (list 1 0) (list 2 0) (list 3 0))))
(displayln (points_to_polynomial (list (list 1 1) (list 2 1) (list 3 1))))
(displayln (points_to_polynomial (list (list 1 1) (list 2 4) (list 3 9))))
(displayln (points_to_polynomial (list (list 1 3) (list 2 6) (list 3 11))))
(displayln (points_to_polynomial (list (list 1 (- 3)) (list 2 (- 6)) (list 3 (- 11)))))
(displayln (points_to_polynomial (list (list 1 1) (list 1 2) (list 1 3))))
(displayln (points_to_polynomial (list (list 1 5) (list 2 2) (list 3 9))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
