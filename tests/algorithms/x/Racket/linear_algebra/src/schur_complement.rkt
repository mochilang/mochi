;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (identity n)
  (let/ec _return (begin
(define mat (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (if (equal? i j) (let ()
(set! row (append row (list 1.0)))
) (let ()
(set! row (append row (list 0.0)))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! mat (append mat (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return mat)
))
)
(define (transpose mat)
  (let/ec _return (begin
(define rows (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)]))
(define cols (cond [(not (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) 0] [(string? (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))]))
(define res (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j cols) (let/ec _cont
    (define row (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (set! row (append row (list (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matmul a b)
  (let/ec _return (begin
(define rows (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define cols (cond [(not (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) 0] [(string? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (string-length (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f))] [(hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-count (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f))] [else (length (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f))]))
(define inner (cond [(not (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) 0] [(string? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (string-length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [(hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-count (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [else (length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j cols) (let/ec _cont
    (define sum 0.0)
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k inner) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) k #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int k))) #f) (if (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) (if (hash? (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) j #f) (list-ref (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row (append row (list sum)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (mat_sub a b)
  (let/ec _return (begin
(define rows (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define cols (cond [(not (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) 0] [(string? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (string-length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [(hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-count (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [else (length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j cols) (let/ec _cont
    (set! row (append row (list (- (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) j #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int j))) #f) (if (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) (if (hash? (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) j #f) (list-ref (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) (int j))) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (inverse mat)
  (let/ec _return (begin
(define n (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)]))
(define id (identity n))
(define aug (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (append (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if id (if (hash? id) (hash-ref id i #f) (list-ref id (int i))) #f)))
    (set! aug (append aug (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define col 0)
(let/ec _break (let loop ()
  (if (< col n) (let/ec _cont
    (define pivot_row (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f))
    (define pivot (if pivot_row (if (hash? pivot_row) (hash-ref pivot_row col #f) (list-ref pivot_row (int col))) #f))
    (if (equal? pivot 0.0) (let ()
(panic "matrix is singular")
) (void))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (* 2 n)) (let/ec _cont
    (set! pivot_row (list-set pivot_row (int j) (/ (if pivot_row (if (hash? pivot_row) (hash-ref pivot_row j #f) (list-ref pivot_row (int j))) #f) pivot)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! aug (list-set aug (int col) pivot_row))
    (define r 0)
    (let/ec _break (let loop ()
  (if (< r n) (let/ec _cont
    (if (not (equal? r col)) (let ()
(define row_r (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f))
(define factor (if row_r (if (hash? row_r) (hash-ref row_r col #f) (list-ref row_r (int col))) #f))
(set! j 0)
(let/ec _break (let loop ()
  (if (< j (* 2 n)) (let/ec _cont
    (set! row_r (list-set row_r (int j) (- (if row_r (if (hash? row_r) (hash-ref row_r j #f) (list-ref row_r (int j))) #f) (* factor (if pivot_row (if (hash? pivot_row) (hash-ref pivot_row j #f) (list-ref pivot_row (int j))) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! aug (list-set aug (int r) row_r))
) (void))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define inv (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r n) (let/ec _cont
    (define row (list))
    (define c n)
    (let/ec _break (let loop ()
  (if (< c (* 2 n)) (let/ec _cont
    (set! row (append row (list (if (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f) (if (hash? (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f)) (hash-ref (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f) c #f) (list-ref (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f) (int c))) #f))))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! inv (append inv (list row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return inv)
))
)
(define (schur_complement mat_a mat_b mat_c pseudo_inv)
  (let/ec _return (begin
(define a_rows (cond [(not mat_a) 0] [(string? mat_a) (string-length mat_a)] [(hash? mat_a) (hash-count mat_a)] [else (length mat_a)]))
(define a_cols (cond [(not (if mat_a (if (hash? mat_a) (hash-ref mat_a 0 #f) (list-ref mat_a (int 0))) #f)) 0] [(string? (if mat_a (if (hash? mat_a) (hash-ref mat_a 0 #f) (list-ref mat_a (int 0))) #f)) (string-length (if mat_a (if (hash? mat_a) (hash-ref mat_a 0 #f) (list-ref mat_a (int 0))) #f))] [(hash? (if mat_a (if (hash? mat_a) (hash-ref mat_a 0 #f) (list-ref mat_a (int 0))) #f)) (hash-count (if mat_a (if (hash? mat_a) (hash-ref mat_a 0 #f) (list-ref mat_a (int 0))) #f))] [else (length (if mat_a (if (hash? mat_a) (hash-ref mat_a 0 #f) (list-ref mat_a (int 0))) #f))]))
(if (not (equal? a_rows a_cols)) (let ()
(panic "Matrix A must be square")
) (void))
(if (not (equal? a_rows (cond [(not mat_b) 0] [(string? mat_b) (string-length mat_b)] [(hash? mat_b) (hash-count mat_b)] [else (length mat_b)]))) (let ()
(panic "Expected the same number of rows for A and B")
) (void))
(if (not (equal? (cond [(not (if mat_b (if (hash? mat_b) (hash-ref mat_b 0 #f) (list-ref mat_b (int 0))) #f)) 0] [(string? (if mat_b (if (hash? mat_b) (hash-ref mat_b 0 #f) (list-ref mat_b (int 0))) #f)) (string-length (if mat_b (if (hash? mat_b) (hash-ref mat_b 0 #f) (list-ref mat_b (int 0))) #f))] [(hash? (if mat_b (if (hash? mat_b) (hash-ref mat_b 0 #f) (list-ref mat_b (int 0))) #f)) (hash-count (if mat_b (if (hash? mat_b) (hash-ref mat_b 0 #f) (list-ref mat_b (int 0))) #f))] [else (length (if mat_b (if (hash? mat_b) (hash-ref mat_b 0 #f) (list-ref mat_b (int 0))) #f))]) (cond [(not (if mat_c (if (hash? mat_c) (hash-ref mat_c 0 #f) (list-ref mat_c (int 0))) #f)) 0] [(string? (if mat_c (if (hash? mat_c) (hash-ref mat_c 0 #f) (list-ref mat_c (int 0))) #f)) (string-length (if mat_c (if (hash? mat_c) (hash-ref mat_c 0 #f) (list-ref mat_c (int 0))) #f))] [(hash? (if mat_c (if (hash? mat_c) (hash-ref mat_c 0 #f) (list-ref mat_c (int 0))) #f)) (hash-count (if mat_c (if (hash? mat_c) (hash-ref mat_c 0 #f) (list-ref mat_c (int 0))) #f))] [else (length (if mat_c (if (hash? mat_c) (hash-ref mat_c 0 #f) (list-ref mat_c (int 0))) #f))]))) (let ()
(panic "Expected the same number of columns for B and C")
) (void))
(define a_inv (list))
(if (if pseudo_inv (hash-ref pseudo_inv "ok" #f) #f) (let ()
(set! a_inv (if pseudo_inv (hash-ref pseudo_inv "value" #f) #f))
) (let ()
(set! a_inv (inverse mat_a))
))
(define bt (transpose mat_b))
(define a_inv_b (matmul a_inv mat_b))
(define bt_a_inv_b (matmul bt a_inv_b))
(_return (mat_sub mat_c bt_a_inv_b))
))
)
(define (print_matrix mat)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)])) (let/ec _cont
    (define line "")
    (define j 0)
    (define row (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))
    (let/ec _break (let loop ()
  (if (< j (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let/ec _cont
    (set! line (string-append line (format "~a" (if row (if (hash? row) (hash-ref row j #f) (list-ref row (int j))) #f))))
    (if (< (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let ()
(set! line (string-append line " "))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define a (list (list 1.0 2.0) (list 2.0 1.0)))
(define b (list (list 0.0 3.0) (list 3.0 0.0)))
(define c (list (list 2.0 1.0) (list 6.0 3.0)))
(define none (let ([h (make-hash)]) (hash-set! h "value" (list)) (hash-set! h "ok" #f) h))
(define s (schur_complement a b c none))
(print_matrix s)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
