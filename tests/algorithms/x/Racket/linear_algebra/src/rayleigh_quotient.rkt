;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (complex_conj z)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (if z (hash-ref z "re" #f) #f)) (hash-set! h "im" (- (if z (hash-ref z "im" #f) #f))) h))
))
)
(define (complex_eq a b)
  (let/ec _return (begin
(_return (and (equal? (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "re" #f) #f)) (equal? (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "im" #f) #f))))
))
)
(define (complex_add a b)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (let ([__l (if a (hash-ref a "re" #f) #f)] [__r (if b (hash-ref b "re" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "im" (let ([__l (if a (hash-ref a "im" #f) #f)] [__r (if b (hash-ref b "im" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
))
)
(define (complex_mul a b)
  (let/ec _return (begin
(define real (- (* (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "re" #f) #f)) (* (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "im" #f) #f))))
(define imag (let ([__l (* (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "im" #f) #f))] [__r (* (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "re" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (let ([h (make-hash)]) (hash-set! h "re" real) (hash-set! h "im" imag) h))
))
)
(define (conj_vector v)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let/ec _cont
    (set! res (append res (list (complex_conj (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (vec_mat_mul v m)
  (let/ec _return (begin
(define result (list))
(define col 0)
(let/ec _break (let loop ()
  (if (< col (cond [(not (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (string-length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [(hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-count (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [else (length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))])) (let/ec _cont
    (define sum (let ([h (make-hash)]) (hash-set! h "re" 0.0) (hash-set! h "im" 0.0) h))
    (define row 0)
    (let/ec _break (let loop ()
  (if (< row (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let/ec _cont
    (set! sum (complex_add sum (complex_mul (if v (if (hash? v) (hash-ref v row #f) (list-ref v (int row))) #f) (if (if m (if (hash? m) (hash-ref m row #f) (list-ref m (int row))) #f) (if (hash? (if m (if (hash? m) (hash-ref m row #f) (list-ref m (int row))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m row #f) (list-ref m (int row))) #f) col #f) (list-ref (if m (if (hash? m) (hash-ref m row #f) (list-ref m (int row))) #f) (int col))) #f))))
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! result (append result (list sum)))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (dot a b)
  (let/ec _return (begin
(define sum (let ([h (make-hash)]) (hash-set! h "re" 0.0) (hash-set! h "im" 0.0) h))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (set! sum (complex_add sum (complex_mul (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (is_hermitian m)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (if (not (complex_eq (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f) (complex_conj (if (if m (if (hash? m) (hash-ref m j #f) (list-ref m (int j))) #f) (if (hash? (if m (if (hash? m) (hash-ref m j #f) (list-ref m (int j))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m j #f) (list-ref m (int j))) #f) i #f) (list-ref (if m (if (hash? m) (hash-ref m j #f) (list-ref m (int j))) #f) (int i))) #f)))) (let ()
(_return #f)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (rayleigh_quotient a v)
  (let/ec _return (begin
(define v_star (conj_vector v))
(define v_star_dot (vec_mat_mul v_star a))
(define num (dot v_star_dot v))
(define den (dot v_star v))
(_return (/ (if num (hash-ref num "re" #f) #f) (if den (hash-ref den "re" #f) #f)))
))
)
(define a (list (list (let ([h (make-hash)]) (hash-set! h "re" 2.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" 2.0) (hash-set! h "im" 1.0) h) (let ([h (make-hash)]) (hash-set! h "re" 4.0) (hash-set! h "im" 0.0) h)) (list (let ([h (make-hash)]) (hash-set! h "re" 2.0) (hash-set! h "im" (- 1.0)) h) (let ([h (make-hash)]) (hash-set! h "re" 3.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" 0.0) (hash-set! h "im" 1.0) h)) (list (let ([h (make-hash)]) (hash-set! h "re" 4.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" 0.0) (hash-set! h "im" (- 1.0)) h) (let ([h (make-hash)]) (hash-set! h "re" 1.0) (hash-set! h "im" 0.0) h))))
(define v (list (let ([h (make-hash)]) (hash-set! h "re" 1.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" 2.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" 3.0) (hash-set! h "im" 0.0) h)))
(define b (list (list (let ([h (make-hash)]) (hash-set! h "re" 1.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" 2.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" 4.0) (hash-set! h "im" 0.0) h)) (list (let ([h (make-hash)]) (hash-set! h "re" 2.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" 3.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" (- 1.0)) (hash-set! h "im" 0.0) h)) (list (let ([h (make-hash)]) (hash-set! h "re" 4.0) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" (- 1.0)) (hash-set! h "im" 0.0) h) (let ([h (make-hash)]) (hash-set! h "re" 1.0) (hash-set! h "im" 0.0) h))))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(if (is_hermitian a) (let ()
(define r1 (rayleigh_quotient a v))
(displayln r1)
(displayln "\n")
) (void))
(if (is_hermitian b) (let ()
(define r2 (rayleigh_quotient b v))
(displayln r2)
) (void))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
