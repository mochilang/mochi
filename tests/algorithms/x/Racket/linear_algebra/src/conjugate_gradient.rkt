;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (zeros n)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! res (append res (list 0.0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (dot a b)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (mat_vec_mul m v)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (define s 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (string-length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [(hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-count (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [else (length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))])) (let/ec _cont
    (set! s (let ([__l s] [__r (* (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f) (if v (if (hash? v) (hash-ref v j #f) (list-ref v (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list s)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (vec_add a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (set! res (append res (list (let ([__l (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)] [__r (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (vec_sub a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (set! res (append res (list (- (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (scalar_mul s v)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let/ec _cont
    (set! res (append res (list (* s (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (norm v)
  (let/ec _return (begin
(_return (sqrtApprox (dot v v)))
))
)
(define (conjugate_gradient A b max_iterations tol)
  (let/ec _return (begin
(define n (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))
(define x (zeros n))
(define r (vec_sub b (mat_vec_mul A x)))
(define p r)
(define rs_old (dot r r))
(define i 0)
(let/ec _break (let loop ()
  (if (< i max_iterations) (let/ec _cont
    (define Ap (mat_vec_mul A p))
    (define alpha (/ rs_old (dot p Ap)))
    (set! x (vec_add x (scalar_mul alpha p)))
    (set! r (vec_sub r (scalar_mul alpha Ap)))
    (define rs_new (dot r r))
    (if (< (sqrtApprox rs_new) tol) (let ()
(_break)
) (void))
    (define beta (/ rs_new rs_old))
    (set! p (vec_add r (scalar_mul beta p)))
    (set! rs_old rs_new)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return x)
))
)
(define A (list (list 8.73256573 (- 5.02034289) (- 2.68709226)) (list (- 5.02034289) 3.78188322 0.91980451) (list (- 2.68709226) 0.91980451 1.94746467)))
(define b (list (- 5.80872761) 3.23807431 1.95381422))
(define x (conjugate_gradient A b 1000 1e-08))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" (if x (if (hash? x) (hash-ref x 0 #f) (list-ref x (int 0))) #f)))
(displayln (format "~a" (if x (if (hash? x) (hash-ref x 1 #f) (list-ref x (int 1))) #f)))
(displayln (format "~a" (if x (if (hash? x) (hash-ref x 2 #f) (list-ref x (int 2))) #f)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
