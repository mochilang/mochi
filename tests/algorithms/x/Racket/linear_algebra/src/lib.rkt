;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define PI 3.141592653589793)
(define seed 123456789)
(define (rand)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return seed)
))
)
(define (random_int a b)
  (let/ec _return (begin
(define r (modulo (rand) (let ([__l (- b a)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return (let ([__l a] [__r r]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (arcsin_taylor x)
  (let/ec _return (begin
(define term x)
(define sum x)
(define n 1)
(let/ec _break (let loop ()
  (if (< n 10) (let/ec _cont
    (define num (* (* (* (* (- (* 2.0 (exact->inexact n)) 1.0) (- (* 2.0 (exact->inexact n)) 1.0)) x) x) term))
    (define den (* (* 2.0 (exact->inexact n)) (let ([__l (* 2.0 (exact->inexact n))] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! term (/ num den))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (acos_taylor x)
  (let/ec _return (begin
(_return (- (/ PI 2.0) (arcsin_taylor x)))
))
)
(define (vector_len v)
  (let/ec _return (begin
(_return (cond [(not (if v (hash-ref v "components" #f) #f)) 0] [(string? (if v (hash-ref v "components" #f) #f)) (string-length (if v (hash-ref v "components" #f) #f))] [(hash? (if v (hash-ref v "components" #f) #f)) (hash-count (if v (hash-ref v "components" #f) #f))] [else (length (if v (hash-ref v "components" #f) #f))]))
))
)
(define (vector_to_string v)
  (let/ec _return (begin
(define s "(")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not (if v (hash-ref v "components" #f) #f)) 0] [(string? (if v (hash-ref v "components" #f) #f)) (string-length (if v (hash-ref v "components" #f) #f))] [(hash? (if v (hash-ref v "components" #f) #f)) (hash-count (if v (hash-ref v "components" #f) #f))] [else (length (if v (hash-ref v "components" #f) #f))])) (let/ec _cont
    (set! s (string-append s (format "~a" (if (if v (hash-ref v "components" #f) #f) (if (hash? (if v (hash-ref v "components" #f) #f)) (hash-ref (if v (hash-ref v "components" #f) #f) i #f) (list-ref (if v (hash-ref v "components" #f) #f) (int i))) #f))))
    (if (< i (- (cond [(not (if v (hash-ref v "components" #f) #f)) 0] [(string? (if v (hash-ref v "components" #f) #f)) (string-length (if v (hash-ref v "components" #f) #f))] [(hash? (if v (hash-ref v "components" #f) #f)) (hash-count (if v (hash-ref v "components" #f) #f))] [else (length (if v (hash-ref v "components" #f) #f))]) 1)) (let ()
(set! s (string-append s ","))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s ")"))
(_return s)
))
)
(define (vector_add a b)
  (let/ec _return (begin
(define size (vector_len a))
(if (not (equal? size (vector_len b))) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "components" (list)) h))
) (void))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (set! res (append res (list (let ([__l (if (if a (hash-ref a "components" #f) #f) (if (hash? (if a (hash-ref a "components" #f) #f)) (hash-ref (if a (hash-ref a "components" #f) #f) i #f) (list-ref (if a (hash-ref a "components" #f) #f) (int i))) #f)] [__r (if (if b (hash-ref b "components" #f) #f) (if (hash? (if b (hash-ref b "components" #f) #f)) (hash-ref (if b (hash-ref b "components" #f) #f) i #f) (list-ref (if b (hash-ref b "components" #f) #f) (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "components" res) h))
))
)
(define (vector_sub a b)
  (let/ec _return (begin
(define size (vector_len a))
(if (not (equal? size (vector_len b))) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "components" (list)) h))
) (void))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (set! res (append res (list (- (if (if a (hash-ref a "components" #f) #f) (if (hash? (if a (hash-ref a "components" #f) #f)) (hash-ref (if a (hash-ref a "components" #f) #f) i #f) (list-ref (if a (hash-ref a "components" #f) #f) (int i))) #f) (if (if b (hash-ref b "components" #f) #f) (if (hash? (if b (hash-ref b "components" #f) #f)) (hash-ref (if b (hash-ref b "components" #f) #f) i #f) (list-ref (if b (hash-ref b "components" #f) #f) (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "components" res) h))
))
)
(define (vector_eq a b)
  (let/ec _return (begin
(if (not (equal? (vector_len a) (vector_len b))) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (vector_len a)) (let/ec _cont
    (if (not (equal? (if (if a (hash-ref a "components" #f) #f) (if (hash? (if a (hash-ref a "components" #f) #f)) (hash-ref (if a (hash-ref a "components" #f) #f) i #f) (list-ref (if a (hash-ref a "components" #f) #f) (int i))) #f) (if (if b (hash-ref b "components" #f) #f) (if (hash? (if b (hash-ref b "components" #f) #f)) (hash-ref (if b (hash-ref b "components" #f) #f) i #f) (list-ref (if b (hash-ref b "components" #f) #f) (int i))) #f))) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (vector_mul_scalar v s)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (vector_len v)) (let/ec _cont
    (set! res (append res (list (* (if (if v (hash-ref v "components" #f) #f) (if (hash? (if v (hash-ref v "components" #f) #f)) (hash-ref (if v (hash-ref v "components" #f) #f) i #f) (list-ref (if v (hash-ref v "components" #f) #f) (int i))) #f) s))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "components" res) h))
))
)
(define (vector_dot a b)
  (let/ec _return (begin
(define size (vector_len a))
(if (not (equal? size (vector_len b))) (let ()
(_return 0.0)
) (void))
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if a (hash-ref a "components" #f) #f) (if (hash? (if a (hash-ref a "components" #f) #f)) (hash-ref (if a (hash-ref a "components" #f) #f) i #f) (list-ref (if a (hash-ref a "components" #f) #f) (int i))) #f) (if (if b (hash-ref b "components" #f) #f) (if (hash? (if b (hash-ref b "components" #f) #f)) (hash-ref (if b (hash-ref b "components" #f) #f) i #f) (list-ref (if b (hash-ref b "components" #f) #f) (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (vector_copy v)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (vector_len v)) (let/ec _cont
    (set! res (append res (list (if (if v (hash-ref v "components" #f) #f) (if (hash? (if v (hash-ref v "components" #f) #f)) (hash-ref (if v (hash-ref v "components" #f) #f) i #f) (list-ref (if v (hash-ref v "components" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "components" res) h))
))
)
(define (vector_component v idx)
  (let/ec _return (begin
(_return (if (if v (hash-ref v "components" #f) #f) (if (hash? (if v (hash-ref v "components" #f) #f)) (hash-ref (if v (hash-ref v "components" #f) #f) idx #f) (list-ref (if v (hash-ref v "components" #f) #f) (int idx))) #f))
))
)
(define (vector_change_component v pos value)
  (let/ec _return (begin
(define comps (if v (hash-ref v "components" #f) #f))
(set! comps (list-set comps (int pos) value))
(_return (let ([h (make-hash)]) (hash-set! h "components" comps) h))
))
)
(define (vector_euclidean_length v)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not (if v (hash-ref v "components" #f) #f)) 0] [(string? (if v (hash-ref v "components" #f) #f)) (string-length (if v (hash-ref v "components" #f) #f))] [(hash? (if v (hash-ref v "components" #f) #f)) (hash-count (if v (hash-ref v "components" #f) #f))] [else (length (if v (hash-ref v "components" #f) #f))])) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if v (hash-ref v "components" #f) #f) (if (hash? (if v (hash-ref v "components" #f) #f)) (hash-ref (if v (hash-ref v "components" #f) #f) i #f) (list-ref (if v (hash-ref v "components" #f) #f) (int i))) #f) (if (if v (hash-ref v "components" #f) #f) (if (hash? (if v (hash-ref v "components" #f) #f)) (hash-ref (if v (hash-ref v "components" #f) #f) i #f) (list-ref (if v (hash-ref v "components" #f) #f) (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define result (sqrtApprox sum))
(_return result)
))
)
(define (vector_angle a b deg)
  (let/ec _return (begin
(define num (vector_dot a b))
(define den (* (vector_euclidean_length a) (vector_euclidean_length b)))
(define ang (acos_taylor (/ num den)))
(if deg (let ()
(set! ang (/ (* ang 180.0) PI))
) (void))
(_return ang)
))
)
(define (zero_vector d)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i d) (let/ec _cont
    (set! res (append res (list 0.0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "components" res) h))
))
)
(define (unit_basis_vector d pos)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i d) (let/ec _cont
    (if (equal? i pos) (let ()
(set! res (append res (list 1.0)))
) (let ()
(set! res (append res (list 0.0)))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "components" res) h))
))
)
(define (axpy s x y)
  (let/ec _return (begin
(_return (vector_add (vector_mul_scalar x s) y))
))
)
(define (random_vector n a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! res (append res (list (exact->inexact (random_int a b)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "components" res) h))
))
)
(define (matrix_to_string m)
  (let/ec _return (begin
(define ans "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if m (hash-ref m "height" #f) #f)) (let/ec _cont
    (set! ans (string-append ans "|"))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (if m (hash-ref m "width" #f) #f)) (let/ec _cont
    (set! ans (string-append ans (format "~a" (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) j #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) (int j))) #f))))
    (if (< j (- (if m (hash-ref m "width" #f) #f) 1)) (let ()
(set! ans (string-append ans ","))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ans (string-append ans "|\n"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return ans)
))
)
(define (matrix_add a b)
  (let/ec _return (begin
(if (or (not (equal? (if a (hash-ref a "width" #f) #f) (if b (hash-ref b "width" #f) #f))) (not (equal? (if a (hash-ref a "height" #f) #f) (if b (hash-ref b "height" #f) #f)))) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "data" (list)) (hash-set! h "width" 0) (hash-set! h "height" 0) h))
) (void))
(define mat (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if a (hash-ref a "height" #f) #f)) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (if a (hash-ref a "width" #f) #f)) (let/ec _cont
    (set! row (append row (list (let ([__l (if (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (list-ref (if a (hash-ref a "data" #f) #f) (int i))) #f) (if (hash? (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (list-ref (if a (hash-ref a "data" #f) #f) (int i))) #f)) (hash-ref (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (list-ref (if a (hash-ref a "data" #f) #f) (int i))) #f) j #f) (list-ref (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (list-ref (if a (hash-ref a "data" #f) #f) (int i))) #f) (int j))) #f)] [__r (if (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (list-ref (if b (hash-ref b "data" #f) #f) (int i))) #f) (if (hash? (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (list-ref (if b (hash-ref b "data" #f) #f) (int i))) #f)) (hash-ref (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (list-ref (if b (hash-ref b "data" #f) #f) (int i))) #f) j #f) (list-ref (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (list-ref (if b (hash-ref b "data" #f) #f) (int i))) #f) (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! mat (append mat (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" mat) (hash-set! h "width" (if a (hash-ref a "width" #f) #f)) (hash-set! h "height" (if a (hash-ref a "height" #f) #f)) h))
))
)
(define (matrix_sub a b)
  (let/ec _return (begin
(if (or (not (equal? (if a (hash-ref a "width" #f) #f) (if b (hash-ref b "width" #f) #f))) (not (equal? (if a (hash-ref a "height" #f) #f) (if b (hash-ref b "height" #f) #f)))) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "data" (list)) (hash-set! h "width" 0) (hash-set! h "height" 0) h))
) (void))
(define mat (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if a (hash-ref a "height" #f) #f)) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (if a (hash-ref a "width" #f) #f)) (let/ec _cont
    (set! row (append row (list (- (if (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (list-ref (if a (hash-ref a "data" #f) #f) (int i))) #f) (if (hash? (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (list-ref (if a (hash-ref a "data" #f) #f) (int i))) #f)) (hash-ref (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (list-ref (if a (hash-ref a "data" #f) #f) (int i))) #f) j #f) (list-ref (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (list-ref (if a (hash-ref a "data" #f) #f) (int i))) #f) (int j))) #f) (if (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (list-ref (if b (hash-ref b "data" #f) #f) (int i))) #f) (if (hash? (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (list-ref (if b (hash-ref b "data" #f) #f) (int i))) #f)) (hash-ref (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (list-ref (if b (hash-ref b "data" #f) #f) (int i))) #f) j #f) (list-ref (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (list-ref (if b (hash-ref b "data" #f) #f) (int i))) #f) (int j))) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! mat (append mat (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" mat) (hash-set! h "width" (if a (hash-ref a "width" #f) #f)) (hash-set! h "height" (if a (hash-ref a "height" #f) #f)) h))
))
)
(define (matrix_mul_vector m v)
  (let/ec _return (begin
(if (not (equal? (cond [(not (if v (hash-ref v "components" #f) #f)) 0] [(string? (if v (hash-ref v "components" #f) #f)) (string-length (if v (hash-ref v "components" #f) #f))] [(hash? (if v (hash-ref v "components" #f) #f)) (hash-count (if v (hash-ref v "components" #f) #f))] [else (length (if v (hash-ref v "components" #f) #f))]) (if m (hash-ref m "width" #f) #f))) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "components" (list)) h))
) (void))
(define res (zero_vector (if m (hash-ref m "height" #f) #f)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if m (hash-ref m "height" #f) #f)) (let/ec _cont
    (define sum 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (if m (hash-ref m "width" #f) #f)) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) j #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) (int j))) #f) (if (if v (hash-ref v "components" #f) #f) (if (hash? (if v (hash-ref v "components" #f) #f)) (hash-ref (if v (hash-ref v "components" #f) #f) j #f) (list-ref (if v (hash-ref v "components" #f) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (vector_change_component res i sum))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matrix_mul_scalar m s)
  (let/ec _return (begin
(define mat (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if m (hash-ref m "height" #f) #f)) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (if m (hash-ref m "width" #f) #f)) (let/ec _cont
    (set! row (append row (list (* (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) j #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) (int j))) #f) s))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! mat (append mat (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" mat) (hash-set! h "width" (if m (hash-ref m "width" #f) #f)) (hash-set! h "height" (if m (hash-ref m "height" #f) #f)) h))
))
)
(define (matrix_component m x y)
  (let/ec _return (begin
(_return (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) x #f) (list-ref (if m (hash-ref m "data" #f) #f) (int x))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) x #f) (list-ref (if m (hash-ref m "data" #f) #f) (int x))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) x #f) (list-ref (if m (hash-ref m "data" #f) #f) (int x))) #f) y #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) x #f) (list-ref (if m (hash-ref m "data" #f) #f) (int x))) #f) (int y))) #f))
))
)
(define (matrix_change_component m x y value)
  (let/ec _return (begin
(define data (if m (hash-ref m "data" #f) #f))
(set! data (list-set data x (list-set (list-ref data x) y value)))
(_return (let ([h (make-hash)]) (hash-set! h "data" data) (hash-set! h "width" (if m (hash-ref m "width" #f) #f)) (hash-set! h "height" (if m (hash-ref m "height" #f) #f)) h))
))
)
(define (matrix_minor m x y)
  (let/ec _return (begin
(if (not (equal? (if m (hash-ref m "height" #f) #f) (if m (hash-ref m "width" #f) #f))) (let ()
(_return 0.0)
) (void))
(define minor (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if m (hash-ref m "height" #f) #f)) (let/ec _cont
    (if (not (equal? i x)) (let ()
(define row (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (if m (hash-ref m "width" #f) #f)) (let/ec _cont
    (if (not (equal? j y)) (let ()
(set! row (append row (list (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) j #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (list-ref (if m (hash-ref m "data" #f) #f) (int i))) #f) (int j))) #f))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! minor (append minor (list row)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define sub (let ([h (make-hash)]) (hash-set! h "data" minor) (hash-set! h "width" (- (if m (hash-ref m "width" #f) #f) 1)) (hash-set! h "height" (- (if m (hash-ref m "height" #f) #f) 1)) h))
(_return (matrix_determinant sub))
))
)
(define (matrix_cofactor m x y)
  (let/ec _return (begin
(define sign (if (equal? (modulo (let ([__l x] [__r y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2) 0) 1.0 (- 1.0)))
(_return (* sign (matrix_minor m x y)))
))
)
(define (matrix_determinant m)
  (let/ec _return (begin
(if (not (equal? (if m (hash-ref m "height" #f) #f) (if m (hash-ref m "width" #f) #f))) (let ()
(_return 0.0)
) (void))
(if (equal? (if m (hash-ref m "height" #f) #f) 0) (let ()
(_return 0.0)
) (void))
(if (equal? (if m (hash-ref m "height" #f) #f) 1) (let ()
(_return (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) 0 #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) (int 0))) #f))
) (void))
(if (equal? (if m (hash-ref m "height" #f) #f) 2) (let ()
(_return (- (* (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) 0 #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) (int 0))) #f) (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 1))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 1))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 1))) #f) 1 #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 1))) #f) (int 1))) #f)) (* (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) 1 #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) (int 1))) #f) (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 1))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 1))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 1))) #f) 0 #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 1))) #f) (int 0))) #f))))
) (void))
(define sum 0.0)
(define y 0)
(let/ec _break (let loop ()
  (if (< y (if m (hash-ref m "width" #f) #f)) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) y #f) (list-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (list-ref (if m (hash-ref m "data" #f) #f) (int 0))) #f) (int y))) #f) (matrix_cofactor m 0 y))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (square_zero_matrix n)
  (let/ec _return (begin
(define mat (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! row (append row (list 0.0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! mat (append mat (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" mat) (hash-set! h "width" n) (hash-set! h "height" n) h))
))
)
(define (random_matrix w h a b)
  (let/ec _return (begin
(define mat (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i h) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j w) (let/ec _cont
    (set! row (append row (list (exact->inexact (random_int a b)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! mat (append mat (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" mat) (hash-set! h "width" w) (hash-set! h "height" h) h))
))
)
(define (main)
  (let/ec _return (begin
(define v1 (let ([h (make-hash)]) (hash-set! h "components" (list 1.0 2.0 3.0)) h))
(define v2 (let ([h (make-hash)]) (hash-set! h "components" (list 4.0 5.0 6.0)) h))
(displayln (vector_to_string (vector_add v1 v2)))
(displayln (format "~a" (vector_dot v1 v2)))
(displayln (format "~a" (vector_euclidean_length v1)))
(define m (let ([h (make-hash)]) (hash-set! h "data" (list (list 1.0 2.0) (list 3.0 4.0))) (hash-set! h "width" 2) (hash-set! h "height" 2) h))
(displayln (format "~a" (matrix_determinant m)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
