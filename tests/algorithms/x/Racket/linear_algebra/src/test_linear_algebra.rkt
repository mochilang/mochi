;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (int_to_string n)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return "0")
) (void))
(define num n)
(define neg #f)
(if (< num 0) (let ()
(set! neg #t)
(set! num (- num))
) (void))
(define res "")
(let/ec _break (let loop ()
  (if (> num 0) (let/ec _cont
    (define digit (modulo num 10))
    (define ch (slice "0123456789" digit (let ([__l digit] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! res (string-append ch res))
    (set! num (floor (/ num 10)))
    (loop)) (void))))
(if neg (let ()
(set! res (string-append "-" res))
) (void))
(_return res)
))
)
(define (float_to_string x dec)
  (let/ec _return (begin
(define neg #f)
(define num x)
(if (< num 0.0) (let ()
(set! neg #t)
(set! num (- num))
) (void))
(define int_part (int num))
(define res (int_to_string int_part))
(if (> dec 0) (let ()
(set! res (string-append res "."))
(define frac (- num (exact->inexact int_part)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i dec) (let/ec _cont
    (set! frac (* frac 10.0))
    (define digit (int frac))
    (set! res (string-append res (slice "0123456789" digit (let ([__l digit] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! frac (- frac (exact->inexact digit)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
(if neg (let ()
(set! res (string-append "-" res))
) (void))
(_return res)
))
)
(define (vector_component v i)
  (let/ec _return (begin
(_return (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f))
))
)
(define (vector_str_int v)
  (let/ec _return (begin
(define s "(")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let/ec _cont
    (set! s (string-append s (int_to_string (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f))))
    (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let ()
(set! s (string-append s ","))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s ")"))
(_return s)
))
)
(define (vector_str_float v dec)
  (let/ec _return (begin
(define s "(")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let/ec _cont
    (set! s (string-append s (float_to_string (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f) dec)))
    (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let ()
(set! s (string-append s ","))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s ")"))
(_return s)
))
)
(define (vector_add a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (set! res (append res (list (let ([__l (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)] [__r (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (vector_sub a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (set! res (append res (list (- (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (vector_scalar_mul v s)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let/ec _cont
    (set! res (append res (list (* (exact->inexact (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f)) s))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (vector_dot a b)
  (let/ec _return (begin
(define sum 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (sqrt_newton x)
  (let/ec _return (begin
(if (equal? x 0.0) (let ()
(_return 0.0)
) (void))
(define low 0.0)
(define high x)
(if (< x 1.0) (let ()
(set! high 1.0)
) (void))
(define mid 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 40) (let/ec _cont
    (set! mid (/ (let ([__l low] [__r high]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (if (> (* mid mid) x) (let ()
(set! high mid)
) (let ()
(set! low mid)
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return mid)
))
)
(define (euclidean_length v)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (let/ec _cont
    (define val (exact->inexact (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f)))
    (set! sum (let ([__l sum] [__r (* val val)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (sqrt_newton sum))
))
)
(define (zero_vector n)
  (let/ec _return (begin
(define v (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! v (append v (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return v)
))
)
(define (unit_basis_vector n idx)
  (let/ec _return (begin
(define v (zero_vector n))
(set! v (list-set v (int idx) 1))
(_return v)
))
)
(define (axpy a x y)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not x) 0] [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)])) (let/ec _cont
    (set! res (append res (list (let ([__l (* a (if x (if (hash? x) (hash-ref x i #f) (list-ref x (int i))) #f))] [__r (if y (if (hash? y) (hash-ref y i #f) (list-ref y (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (copy_vector x)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not x) 0] [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)])) (let/ec _cont
    (set! res (append res (list (if x (if (hash? x) (hash-ref x i #f) (list-ref x (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (change_component v idx val)
  (let/ec _return (begin
(set! v (list-set v (int idx) val))
))
)
(define (matrix_str m)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (set! s (string-append s "|"))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (string-length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [(hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-count (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [else (length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))])) (let/ec _cont
    (set! s (string-append s (int_to_string (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f))))
    (if (< (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (string-length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [(hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-count (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [else (length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))])) (let ()
(set! s (string-append s ","))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! s (string-append s "|\n"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return s)
))
)
(define (submatrix m row col)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (if (not (equal? i row)) (let ()
(define r (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(not (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (string-length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [(hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-count (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [else (length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))])) (let/ec _cont
    (if (not (equal? j col)) (let ()
(set! r (append r (list (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! res (append res (list r)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (determinant m)
  (let/ec _return (begin
(define n (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]))
(if (equal? n 1) (let ()
(_return (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 0))) #f))
) (void))
(if (equal? n 2) (let ()
(_return (- (* (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 0))) #f) (if (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) 1 #f) (list-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (int 1))) #f)) (* (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 1 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 1))) #f) (if (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (int 0))) #f))))
) (void))
(define det 0)
(define c 0)
(let/ec _break (let loop ()
  (if (< c n) (let/ec _cont
    (define sub (submatrix m 0 c))
    (define sign 1)
    (if (equal? (modulo c 2) 1) (let ()
(set! sign (- 1))
) (void))
    (set! det (let ([__l det] [__r (* (* sign (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) c #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int c))) #f)) (determinant sub))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return det)
))
)
(define (matrix_minor m row col)
  (let/ec _return (begin
(_return (determinant (submatrix m row col)))
))
)
(define (matrix_cofactor m row col)
  (let/ec _return (begin
(define sign 1)
(if (equal? (modulo (let ([__l row] [__r col]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2) 1) (let ()
(set! sign (- 1))
) (void))
(_return (* sign (matrix_minor m row col)))
))
)
(define (matrix_mul_vector m v)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (define sum 0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (string-length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [(hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-count (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [else (length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))])) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f) (if v (if (hash? v) (hash-ref v j #f) (list-ref v (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list sum)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matrix_mul_scalar m s)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (string-length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [(hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-count (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))] [else (length (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f))])) (let/ec _cont
    (set! row (append row (list (* (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f) s))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matrix_change_component m i j val)
  (let/ec _return (begin
(set! m (list-set m i (list-set (list-ref m i) j val)))
))
)
(define (matrix_component m i j)
  (let/ec _return (begin
(_return (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f))
))
)
(define (matrix_add a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) 0] [(string? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (string-length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [(hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-count (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [else (length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))])) (let/ec _cont
    (set! row (append row (list (let ([__l (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) j #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int j))) #f)] [__r (if (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) (if (hash? (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) j #f) (list-ref (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matrix_sub a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) 0] [(string? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (string-length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [(hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-count (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [else (length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))])) (let/ec _cont
    (set! row (append row (list (- (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) j #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int j))) #f) (if (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) (if (hash? (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) j #f) (list-ref (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) (int j))) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (square_zero_matrix n)
  (let/ec _return (begin
(define m (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! m (append m (list (zero_vector n))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return m)
))
)
(define (assert_int name actual expected)
  (let/ec _return (begin
(if (equal? actual expected) (let ()
(displayln (string-append name " ok"))
) (let ()
(displayln (string-append (string-append (string-append (string-append name " fail ") (int_to_string actual)) " != ") (int_to_string expected)))
))
))
)
(define (assert_str name actual expected)
  (let/ec _return (begin
(if (string=? actual expected) (let ()
(displayln (string-append name " ok"))
) (let ()
(displayln (string-append name " fail"))
(displayln actual)
(displayln expected)
))
))
)
(define (assert_float name actual expected eps)
  (let/ec _return (begin
(define diff (- actual expected))
(if (< diff 0.0) (let ()
(set! diff (- diff))
) (void))
(if (<= diff eps) (let ()
(displayln (string-append name " ok"))
) (let ()
(displayln (string-append name " fail"))
))
))
)
(define vx (list 1 2 3))
(define vs (list 0 0 0 0 0 1))
(define vsize (list 1 2 3 4))
(define va (list 1 2 3))
(define vb (list 1 1 1))
(define vsum (vector_add va vb))
(define vsub (vector_sub va vb))
(define vmul (vector_scalar_mul va 3.0))
(define zvec (zero_vector 10))
(define zstr (vector_str_int zvec))
(define zcount 0)
(define zi 0)
(define vcopy (copy_vector (list 1 0 0 0 0 0)))
(define vchange (list 1 0 0))
(define ma (list (list 1 2 3) (list 2 4 5) (list 6 7 8)))
(define mb (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))
(define mv (matrix_mul_vector mb (list 1 2 3)))
(define msc (matrix_mul_scalar mb 2))
(define mc (list (list 1 2 3) (list 2 4 5) (list 6 7 8)))
(define madd (matrix_add (list (list 1 2 3) (list 2 4 5) (list 6 7 8)) (list (list 1 2 7) (list 2 4 5) (list 6 7 10))))
(define msub (matrix_sub (list (list 1 2 3) (list 2 4 5) (list 6 7 8)) (list (list 1 2 7) (list 2 4 5) (list 6 7 10))))
(define mzero (square_zero_matrix 5))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(assert_int "component0" (vector_component vx 0) 1)
(assert_int "component2" (vector_component vx 2) 3)
(assert_str "str_vector" (vector_str_int vs) "(0,0,0,0,0,1)")
(assert_int "size" (cond [(not vsize) 0] [(string? vsize) (string-length vsize)] [(hash? vsize) (hash-count vsize)] [else (length vsize)]) 4)
(assert_int "add0" (vector_component vsum 0) 2)
(assert_int "add1" (vector_component vsum 1) 3)
(assert_int "add2" (vector_component vsum 2) 4)
(assert_int "sub0" (vector_component vsub 0) 0)
(assert_int "sub1" (vector_component vsub 1) 1)
(assert_int "sub2" (vector_component vsub 2) 2)
(assert_str "scalar_mul" (vector_str_float vmul 1) "(3.0,6.0,9.0)")
(assert_int "dot_product" (vector_dot (list 2 (- 1) 4) (list 1 (- 2) (- 1))) 0)
(let/ec _break (let loop ()
  (if (< zi (cond [(not zstr) 0] [(string? zstr) (string-length zstr)] [(hash? zstr) (hash-count zstr)] [else (length zstr)])) (let/ec _cont
    (if (string=? (slice zstr zi (let ([__l zi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "0") (let ()
(set! zcount (let ([__l zcount] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! zi (let ([__l zi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(assert_int "zero_vector" zcount 10)
(assert_str "unit_basis" (vector_str_int (unit_basis_vector 3 1)) "(0,1,0)")
(assert_str "axpy" (vector_str_int (axpy 2 (list 1 2 3) (list 1 0 1))) "(3,4,7)")
(assert_str "copy" (vector_str_int vcopy) "(1,0,0,0,0,0)")
(change_component vchange 0 0)
(change_component vchange 1 1)
(assert_str "change_component" (vector_str_int vchange) "(0,1,0)")
(assert_str "matrix_str" (matrix_str ma) "|1,2,3|\n|2,4,5|\n|6,7,8|\n")
(assert_int "determinant" (determinant ma) (- 5))
(assert_str "matrix_vec_mul" (vector_str_int mv) "(14,32,50)")
(assert_str "matrix_scalar_mul" (matrix_str msc) "|2,4,6|\n|8,10,12|\n|14,16,18|\n")
(matrix_change_component mc 0 2 5)
(assert_str "change_component_matrix" (matrix_str mc) "|1,2,5|\n|2,4,5|\n|6,7,8|\n")
(assert_int "matrix_component" (matrix_component mc 2 1) 7)
(assert_str "matrix_add" (matrix_str madd) "|2,4,10|\n|4,8,10|\n|12,14,18|\n")
(assert_str "matrix_sub" (matrix_str msub) "|0,0,-4|\n|0,0,0|\n|0,0,-2|\n")
(assert_str "square_zero_matrix" (matrix_str mzero) "|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n")
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
