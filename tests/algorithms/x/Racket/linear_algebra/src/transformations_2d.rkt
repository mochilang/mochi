;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define PI 3.141592653589793)
(define (floor x)
  (let/ec _return (begin
(define i (int x))
(if (> (exact->inexact i) x) (let ()
(set! i (- i 1))
) (void))
(_return (exact->inexact i))
))
)
(define (modf x m)
  (let/ec _return (begin
(_return (- x (* (floor (/ x m)) m)))
))
)
(define (sin_taylor angle)
  (let/ec _return (begin
(define x (modf angle (* 2.0 PI)))
(if (> x PI) (let ()
(set! x (- x (* 2.0 PI)))
) (void))
(define term x)
(define sum x)
(define i 1)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (define k1 (* 2.0 (exact->inexact i)))
    (define k2 (let ([__l k1] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! term (/ (* (* (- term) x) x) (* k1 k2)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (cos_taylor angle)
  (let/ec _return (begin
(define x (modf angle (* 2.0 PI)))
(if (> x PI) (let ()
(set! x (- x (* 2.0 PI)))
) (void))
(define term 1.0)
(define sum 1.0)
(define i 1)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (define k1 (- (* 2.0 (exact->inexact i)) 1.0))
    (define k2 (* 2.0 (exact->inexact i)))
    (set! term (/ (* (* (- term) x) x) (* k1 k2)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (matrix_to_string m)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (define row (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))
    (set! s (string-append s "["))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let/ec _cont
    (set! s (string-append s (format "~a" (if row (if (hash? row) (hash-ref row j #f) (list-ref row (int j))) #f))))
    (if (< j (- (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)]) 1)) (let ()
(set! s (string-append s ", "))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! s (string-append s "]"))
    (if (< i (- (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]) 1)) (let ()
(set! s (string-append s ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (scaling f)
  (let/ec _return (begin
(_return (list (list f 0.0) (list 0.0 f)))
))
)
(define (rotation angle)
  (let/ec _return (begin
(define c (cos_taylor angle))
(define s (sin_taylor angle))
(_return (list (list c (- s)) (list s c)))
))
)
(define (projection angle)
  (let/ec _return (begin
(define c (cos_taylor angle))
(define s (sin_taylor angle))
(define cs (* c s))
(_return (list (list (* c c) cs) (list cs (* s s))))
))
)
(define (reflection angle)
  (let/ec _return (begin
(define c (cos_taylor angle))
(define s (sin_taylor angle))
(define cs (* c s))
(_return (list (list (- (* 2.0 c) 1.0) (* 2.0 cs)) (list (* 2.0 cs) (- (* 2.0 s) 1.0))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-append "    scaling(5) = " (matrix_to_string (scaling 5.0))))
(displayln (string-append "  rotation(45) = " (matrix_to_string (rotation 45.0))))
(displayln (string-append "projection(45) = " (matrix_to_string (projection 45.0))))
(displayln (string-append "reflection(45) = " (matrix_to_string (reflection 45.0))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
