;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (panic_ msg)
  (let/ec _return (begin
(displayln msg)
))
)
(define (abs_float x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (copy_matrix src)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not src) 0] [(string? src) (string-length src)] [(hash? src) (hash-count src)] [else (length src)])) (let/ec _cont
    (define row_src (if src (if (hash? src) (hash-ref src i #f) (list-ref src (int i))) #f))
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not row_src) 0] [(string? row_src) (string-length row_src)] [(hash? row_src) (hash-count row_src)] [else (length row_src)])) (let/ec _cont
    (set! row (append row (list (if row_src (if (hash? row_src) (hash-ref row_src j #f) (list-ref row_src (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (solve_linear_system matrix)
  (let/ec _return (begin
(define ab (copy_matrix matrix))
(define num_rows (cond [(not ab) 0] [(string? ab) (string-length ab)] [(hash? ab) (hash-count ab)] [else (length ab)]))
(define num_cols (- (cond [(not (if ab (if (hash? ab) (hash-ref ab 0 #f) (list-ref ab (int 0))) #f)) 0] [(string? (if ab (if (hash? ab) (hash-ref ab 0 #f) (list-ref ab (int 0))) #f)) (string-length (if ab (if (hash? ab) (hash-ref ab 0 #f) (list-ref ab (int 0))) #f))] [(hash? (if ab (if (hash? ab) (hash-ref ab 0 #f) (list-ref ab (int 0))) #f)) (hash-count (if ab (if (hash? ab) (hash-ref ab 0 #f) (list-ref ab (int 0))) #f))] [else (length (if ab (if (hash? ab) (hash-ref ab 0 #f) (list-ref ab (int 0))) #f))]) 1))
(if (not (equal? num_rows num_cols)) (let ()
(panic_ "Matrix is not square")
(_return (list))
) (void))
(define column_num 0)
(let/ec _break (let loop ()
  (if (< column_num num_rows) (let/ec _cont
    (define i column_num)
    (let/ec _break (let loop ()
  (if (< i num_cols) (let/ec _cont
    (if (> (abs_float (if (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) column_num #f) (list-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (int column_num))) #f)) (abs_float (if (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) column_num #f) (list-ref (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) (int column_num))) #f))) (let ()
(define temp (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f))
(set! ab (list-set ab (int column_num) (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f)))
(set! ab (list-set ab (int i) temp))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (< (abs_float (if (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) column_num #f) (list-ref (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) (int column_num))) #f)) 1e-08) (let ()
(panic_ "Matrix is singular")
(_return (list))
) (void))
    (if (not (equal? column_num 0)) (let ()
(set! i column_num)
(let/ec _break (let loop ()
  (if (< i num_rows) (let/ec _cont
    (define factor (/ (if (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (- column_num 1) #f) (list-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (int (- column_num 1)))) #f) (if (if ab (if (hash? ab) (hash-ref ab (- column_num 1) #f) (list-ref ab (int (- column_num 1)))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab (- column_num 1) #f) (list-ref ab (int (- column_num 1)))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab (- column_num 1) #f) (list-ref ab (int (- column_num 1)))) #f) (- column_num 1) #f) (list-ref (if ab (if (hash? ab) (hash-ref ab (- column_num 1) #f) (list-ref ab (int (- column_num 1)))) #f) (int (- column_num 1)))) #f)))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f)) 0] [(string? (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f)) (string-length (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f))] [(hash? (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f)) (hash-count (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f))] [else (length (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f))])) (let/ec _cont
    (set! ab (list-set ab i (list-set (list-ref ab i) j (- (if (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) j #f) (list-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (int j))) #f) (* factor (if (if ab (if (hash? ab) (hash-ref ab (- column_num 1) #f) (list-ref ab (int (- column_num 1)))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab (- column_num 1) #f) (list-ref ab (int (- column_num 1)))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab (- column_num 1) #f) (list-ref ab (int (- column_num 1)))) #f) j #f) (list-ref (if ab (if (hash? ab) (hash-ref ab (- column_num 1) #f) (list-ref ab (int (- column_num 1)))) #f) (int j))) #f))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! column_num (let ([__l column_num] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define x_lst (list))
(define t 0)
(let/ec _break (let loop ()
  (if (< t num_rows) (let/ec _cont
    (set! x_lst (append x_lst (list 0.0)))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! column_num (- num_rows 1))
(let/ec _break (let loop ()
  (if (>= column_num 0) (let/ec _cont
    (define x (/ (if (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) num_cols #f) (list-ref (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) (int num_cols))) #f) (if (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) column_num #f) (list-ref (if ab (if (hash? ab) (hash-ref ab column_num #f) (list-ref ab (int column_num))) #f) (int column_num))) #f)))
    (set! x_lst (list-set x_lst (int column_num) x))
    (define i (- column_num 1))
    (let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (set! ab (list-set ab i (list-set (list-ref ab i) num_cols (- (if (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) num_cols #f) (list-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (int num_cols))) #f) (* (if (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (if (hash? (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f)) (hash-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) column_num #f) (list-ref (if ab (if (hash? ab) (hash-ref ab i #f) (list-ref ab (int i))) #f) (int column_num))) #f) x)))))
    (set! i (- i 1))
    (loop)) (void))))
    (set! column_num (- column_num 1))
    (loop)) (void))))
(_return x_lst)
))
)
(define example_matrix (list (list 5.0 (- 5.0) (- 3.0) 4.0 (- 11.0)) (list 1.0 (- 4.0) 6.0 (- 4.0) (- 10.0)) (list (- 2.0) (- 5.0) 4.0 (- 5.0) (- 12.0)) (list (- 3.0) (- 3.0) 5.0 (- 5.0) 8.0)))
(define solution (solve_linear_system example_matrix))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln "Matrix:")
(displayln (format "~a" example_matrix))
(displayln (format "~a" solution))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
