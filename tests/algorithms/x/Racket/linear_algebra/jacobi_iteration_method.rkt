;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (absf x)
  (let/ec _return (begin
(_return (if (< x 0.0) (- x) x))
))
)
(define (strictly_diagonally_dominant matrix)
  (let/ec _return (begin
(define n (cond [(not matrix) 0] [(string? matrix) (string-length matrix)] [(hash? matrix) (hash-count matrix)] [else (length matrix)]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define sum 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (if (not (equal? i j)) (let ()
(set! sum (let ([__l sum] [__r (absf (if (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) j #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (<= (absf (if (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) i #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (int i))) #f)) sum) (let ()
(panic "Coefficient matrix is not strictly diagonally dominant")
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (jacobi_iteration_method coefficient constant init_val iterations)
  (let/ec _return (begin
(define n (cond [(not coefficient) 0] [(string? coefficient) (string-length coefficient)] [(hash? coefficient) (hash-count coefficient)] [else (length coefficient)]))
(if (equal? n 0) (let ()
(panic "Coefficient matrix cannot be empty")
) (void))
(if (not (equal? (cond [(not constant) 0] [(string? constant) (string-length constant)] [(hash? constant) (hash-count constant)] [else (length constant)]) n)) (let ()
(panic "Constant vector length must equal number of rows in coefficient matrix")
) (void))
(if (not (equal? (cond [(not init_val) 0] [(string? init_val) (string-length init_val)] [(hash? init_val) (hash-count init_val)] [else (length init_val)]) n)) (let ()
(panic "Initial values count must match matrix size")
) (void))
(define r 0)
(let/ec _break (let loop ()
  (if (< r n) (let/ec _cont
    (if (not (equal? (cond [(not (if coefficient (if (hash? coefficient) (hash-ref coefficient r #f) (list-ref coefficient (int r))) #f)) 0] [(string? (if coefficient (if (hash? coefficient) (hash-ref coefficient r #f) (list-ref coefficient (int r))) #f)) (string-length (if coefficient (if (hash? coefficient) (hash-ref coefficient r #f) (list-ref coefficient (int r))) #f))] [(hash? (if coefficient (if (hash? coefficient) (hash-ref coefficient r #f) (list-ref coefficient (int r))) #f)) (hash-count (if coefficient (if (hash? coefficient) (hash-ref coefficient r #f) (list-ref coefficient (int r))) #f))] [else (length (if coefficient (if (hash? coefficient) (hash-ref coefficient r #f) (list-ref coefficient (int r))) #f))]) n)) (let ()
(panic "Coefficient matrix must be square")
) (void))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (<= iterations 0) (let ()
(panic "Iterations must be at least 1")
) (void))
(strictly_diagonally_dominant coefficient)
(define x init_val)
(define k 0)
(let/ec _break (let loop ()
  (if (< k iterations) (let/ec _cont
    (define new_x (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define sum 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (if (not (equal? i j)) (let ()
(set! sum (let ([__l sum] [__r (* (if (if coefficient (if (hash? coefficient) (hash-ref coefficient i #f) (list-ref coefficient (int i))) #f) (if (hash? (if coefficient (if (hash? coefficient) (hash-ref coefficient i #f) (list-ref coefficient (int i))) #f)) (hash-ref (if coefficient (if (hash? coefficient) (hash-ref coefficient i #f) (list-ref coefficient (int i))) #f) j #f) (list-ref (if coefficient (if (hash? coefficient) (hash-ref coefficient i #f) (list-ref coefficient (int i))) #f) (int j))) #f) (if x (if (hash? x) (hash-ref x j #f) (list-ref x (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define value (/ (- (if constant (if (hash? constant) (hash-ref constant i #f) (list-ref constant (int i))) #f) sum) (if (if coefficient (if (hash? coefficient) (hash-ref coefficient i #f) (list-ref coefficient (int i))) #f) (if (hash? (if coefficient (if (hash? coefficient) (hash-ref coefficient i #f) (list-ref coefficient (int i))) #f)) (hash-ref (if coefficient (if (hash? coefficient) (hash-ref coefficient i #f) (list-ref coefficient (int i))) #f) i #f) (list-ref (if coefficient (if (hash? coefficient) (hash-ref coefficient i #f) (list-ref coefficient (int i))) #f) (int i))) #f)))
    (set! new_x (append new_x (list value)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! x new_x)
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return x)
))
)
(define coefficient (list (list 4.0 1.0 1.0) (list 1.0 5.0 2.0) (list 1.0 2.0 4.0)))
(define constant (list 2.0 (- 6.0) (- 4.0)))
(define init_val (list 0.5 (- 0.5) (- 0.5)))
(define iterations 3)
(define result (jacobi_iteration_method coefficient constant init_val iterations))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln result)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
