;; Generated by Mochi 0.10.62 on 2025-08-09 10:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (pow10 n)
  (let/ec _return (begin
(define p 1.0)
(if (>= n 0) (let ()
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (begin
    (let/ec _cont
      (set! p (* p 10.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (let ()
(define i 0)
(let/ec _break (let loop ()
  (if (> i n) (begin
    (let/ec _cont
      (set! p (/ p 10.0))
      (set! i (- i 1))
    )
    (loop)) (void))))
))
(_return p)
))
)
(define (floor x)
  (let/ec _return (begin
(define i (int x))
(define f (exact->inexact i))
(if (> f x) (let ()
(_return (exact->inexact (- i 1)))
) (void))
(_return f)
))
)
(define (format_scientific_3 x)
  (let/ec _return (begin
(if (equal? x 0.0) (let ()
(_return "0.000e+00")
) (void))
(define sign "")
(define num x)
(if (< num 0.0) (let ()
(set! sign "-")
(set! num (- num))
) (void))
(define exp 0)
(let/ec _break (let loop ()
  (if (>= num 10.0) (begin
    (let/ec _cont
      (set! num (/ num 10.0))
      (set! exp (let ([__l exp] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< num 1.0) (begin
    (let/ec _cont
      (set! num (* num 10.0))
      (set! exp (- exp 1))
    )
    (loop)) (void))))
(define temp (floor (let ([__l (* num 1000.0)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define scaled (int temp))
(if (equal? scaled 10000) (let ()
(set! scaled 1000)
(set! exp (let ([__l exp] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(define int_part (floor (/ scaled 1000)))
(define frac_part (modulo scaled 1000))
(define frac_str (to-string frac_part))
(let/ec _break (let loop ()
  (if (< (cond [(not frac_str) 0] [(string? frac_str) (string-length frac_str)] [(hash? frac_str) (hash-count frac_str)] [else (length frac_str)]) 3) (begin
    (let/ec _cont
      (set! frac_str (string-append "0" frac_str))
    )
    (loop)) (void))))
(define mantissa (string-append (string-append (to-string int_part) ".") frac_str))
(define exp_sign "+")
(define exp_abs exp)
(if (< exp 0) (let ()
(set! exp_sign "-")
(set! exp_abs (- exp))
) (void))
(define exp_str (to-string exp_abs))
(if (< exp_abs 10) (let ()
(set! exp_str (string-append "0" exp_str))
) (void))
(_return (string-append (string-append (string-append (string-append sign mantissa) "e") exp_sign) exp_str))
))
)
(define (orbital_transfer_work mass_central mass_object r_initial r_final)
  (let/ec _return (begin
(define G (* 6.6743 (pow10 (- 11))))
(if (or (<= r_initial 0.0) (<= r_final 0.0)) (let ()
(panic "Orbital radii must be greater than zero.")
) (void))
(define work (* (/ (* (* G mass_central) mass_object) 2.0) (- (/ 1.0 r_initial) (/ 1.0 r_final))))
(_return (format_scientific_3 work))
))
)
(define (test_orbital_transfer_work)
  (let/ec _return (begin
(if (not (string=? (orbital_transfer_work (* 5.972 (pow10 24)) 1000.0 (* 6.371 (pow10 6)) (* 7.0 (pow10 6))) "2.811e+09")) (let ()
(panic "case1 failed")
) (void))
(if (not (string=? (orbital_transfer_work (* 5.972 (pow10 24)) 500.0 (* 7.0 (pow10 6)) (* 6.371 (pow10 6))) "-1.405e+09")) (let ()
(panic "case2 failed")
) (void))
(if (not (string=? (orbital_transfer_work (* 1.989 (pow10 30)) 1000.0 (* 1.5 (pow10 11)) (* 2.28 (pow10 11))) "1.514e+11")) (let ()
(panic "case3 failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_orbital_transfer_work)
(displayln (orbital_transfer_work (* 5.972 (pow10 24)) 1000.0 (* 6.371 (pow10 6)) (* 7.0 (pow10 6))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
