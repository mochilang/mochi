;; Generated by Mochi 0.10.62 on 2025-08-09 10:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (make_body px py vx vy mass)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "position_x" px) (hash-set! h "position_y" py) (hash-set! h "velocity_x" vx) (hash-set! h "velocity_y" vy) (hash-set! h "mass" mass) h))
))
)
(define (update_velocity body force_x force_y delta_time)
  (let/ec _return (begin
(if (hash? body) (hash-set! body "velocity_x" (let ([__l (if body (hash-ref body "velocity_x" #f) #f)] [__r (* force_x delta_time)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! body (make-hash)) (hash-set! body "velocity_x" (let ([__l (if body (hash-ref body "velocity_x" #f) #f)] [__r (* force_x delta_time)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (hash? body) (hash-set! body "velocity_y" (let ([__l (if body (hash-ref body "velocity_y" #f) #f)] [__r (* force_y delta_time)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! body (make-hash)) (hash-set! body "velocity_y" (let ([__l (if body (hash-ref body "velocity_y" #f) #f)] [__r (* force_y delta_time)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(_return body)
))
)
(define (update_position body delta_time)
  (let/ec _return (begin
(if (hash? body) (hash-set! body "position_x" (let ([__l (if body (hash-ref body "position_x" #f) #f)] [__r (* (if body (hash-ref body "velocity_x" #f) #f) delta_time)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! body (make-hash)) (hash-set! body "position_x" (let ([__l (if body (hash-ref body "position_x" #f) #f)] [__r (* (if body (hash-ref body "velocity_x" #f) #f) delta_time)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (hash? body) (hash-set! body "position_y" (let ([__l (if body (hash-ref body "position_y" #f) #f)] [__r (* (if body (hash-ref body "velocity_y" #f) #f) delta_time)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! body (make-hash)) (hash-set! body "position_y" (let ([__l (if body (hash-ref body "position_y" #f) #f)] [__r (* (if body (hash-ref body "velocity_y" #f) #f) delta_time)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(_return body)
))
)
(define (make_body_system bodies g tf sf)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "bodies" bodies) (hash-set! h "gravitation_constant" g) (hash-set! h "time_factor" tf) (hash-set! h "softening_factor" sf) h))
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(define guess (/ x 2.0))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (begin
    (let/ec _cont
      (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return guess)
))
)
(define (update_system system delta_time)
  (let/ec _return (begin
(define bodies (if system (hash-ref system "bodies" #f) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not bodies) 0] [(string? bodies) (string-length bodies)] [(hash? bodies) (hash-count bodies)] [else (length bodies)])) (begin
    (let/ec _cont
      (define body1 (if bodies (if (hash? bodies) (hash-ref bodies i #f) (safe-index bodies (int i))) #f))
      (define force_x 0.0)
      (define force_y 0.0)
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j (cond [(not bodies) 0] [(string? bodies) (string-length bodies)] [(hash? bodies) (hash-count bodies)] [else (length bodies)])) (begin
    (let/ec _cont
      (if (not (equal? i j)) (let ()
(define body2 (if bodies (if (hash? bodies) (hash-ref bodies j #f) (safe-index bodies (int j))) #f))
(define dif_x (- (if body2 (hash-ref body2 "position_x" #f) #f) (if body1 (hash-ref body1 "position_x" #f) #f)))
(define dif_y (- (if body2 (hash-ref body2 "position_y" #f) #f) (if body1 (hash-ref body1 "position_y" #f) #f)))
(define distance_sq (let ([__l (let ([__l (* dif_x dif_x)] [__r (* dif_y dif_y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if system (hash-ref system "softening_factor" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define distance (sqrtApprox distance_sq))
(define denom (* (* distance distance) distance))
(set! force_x (let ([__l force_x] [__r (/ (* (* (if system (hash-ref system "gravitation_constant" #f) #f) (if body2 (hash-ref body2 "mass" #f) #f)) dif_x) denom)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! force_y (let ([__l force_y] [__r (/ (* (* (if system (hash-ref system "gravitation_constant" #f) #f) (if body2 (hash-ref body2 "mass" #f) #f)) dif_y) denom)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! body1 (update_velocity body1 force_x force_y (* delta_time (if system (hash-ref system "time_factor" #f) #f))))
      (set! bodies (list-set bodies (int i) body1))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not bodies) 0] [(string? bodies) (string-length bodies)] [(hash? bodies) (hash-count bodies)] [else (length bodies)])) (begin
    (let/ec _cont
      (define body (if bodies (if (hash? bodies) (hash-ref bodies i #f) (safe-index bodies (int i))) #f))
      (set! body (update_position body (* delta_time (if system (hash-ref system "time_factor" #f) #f))))
      (set! bodies (list-set bodies (int i) body))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (hash? system) (hash-set! system "bodies" bodies) (begin (set! system (make-hash)) (hash-set! system "bodies" bodies)))
(_return system)
))
)
(define (main)
  (let/ec _return (begin
(define b1 (make_body 0.0 0.0 0.0 0.0 1.0))
(define b2 (make_body 10.0 0.0 0.0 0.0 1.0))
(define sys1 (make_body_system (list b1 b2) 1.0 1.0 0.0))
(set! sys1 (update_system sys1 1.0))
(define b1_after (if (if sys1 (hash-ref sys1 "bodies" #f) #f) (if (hash? (if sys1 (hash-ref sys1 "bodies" #f) #f)) (hash-ref (if sys1 (hash-ref sys1 "bodies" #f) #f) 0 #f) (safe-index (if sys1 (hash-ref sys1 "bodies" #f) #f) (int 0))) #f))
(define pos1x (if b1_after (hash-ref b1_after "position_x" #f) #f))
(define pos1y (if b1_after (hash-ref b1_after "position_y" #f) #f))
(displayln (jsexpr->string (let ([h (make-hash)]) (hash-set! h "x" pos1x) (hash-set! h "y" pos1y) h)))
(define vel1x (if b1_after (hash-ref b1_after "velocity_x" #f) #f))
(define vel1y (if b1_after (hash-ref b1_after "velocity_y" #f) #f))
(displayln (jsexpr->string (let ([h (make-hash)]) (hash-set! h "vx" vel1x) (hash-set! h "vy" vel1y) h)))
(define b3 (make_body (- 10.0) 0.0 0.0 0.0 1.0))
(define b4 (make_body 10.0 0.0 0.0 0.0 4.0))
(define sys2 (make_body_system (list b3 b4) 1.0 10.0 0.0))
(set! sys2 (update_system sys2 1.0))
(define b2_after (if (if sys2 (hash-ref sys2 "bodies" #f) #f) (if (hash? (if sys2 (hash-ref sys2 "bodies" #f) #f)) (hash-ref (if sys2 (hash-ref sys2 "bodies" #f) #f) 0 #f) (safe-index (if sys2 (hash-ref sys2 "bodies" #f) #f) (int 0))) #f))
(define pos2x (if b2_after (hash-ref b2_after "position_x" #f) #f))
(define pos2y (if b2_after (hash-ref b2_after "position_y" #f) #f))
(displayln (jsexpr->string (let ([h (make-hash)]) (hash-set! h "x" pos2x) (hash-set! h "y" pos2y) h)))
(define vel2x (if b2_after (hash-ref b2_after "velocity_x" #f) #f))
(define vel2y (if b2_after (hash-ref b2_after "velocity_y" #f) #f))
(displayln (jsexpr->string (let ([h (make-hash)]) (hash-set! h "vx" vel2x) (hash-set! h "vy" vel2y) h)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
