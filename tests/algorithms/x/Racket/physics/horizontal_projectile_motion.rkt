;; Generated by Mochi 0.10.64 on 2025-08-12 14:09 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define PI 3.141592653589793)
(define TWO_PI 6.283185307179586)
(define g 9.80665)
(define (_mod x m)
  (let/ec _return (begin
(_return (- x (* (exact->inexact (int (/ x m))) m)))
))
)
(define (sin x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) TWO_PI) PI))
(define y2 (* y y))
(define y3 (* y2 y))
(define y5 (* y3 y2))
(define y7 (* y5 y2))
(_return (- (let ([__l (- y (/ y3 6.0))] [__r (/ y5 120.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y7 5040.0)))
))
)
(define (deg_to_rad deg)
  (let/ec _return (begin
(_return (/ (* deg PI) 180.0))
))
)
(define (floor x)
  (let/ec _return (begin
(define i (int x))
(if (let ([__l (exact->inexact i)] [__r x]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! i (- i 1))
) (void))
(_return (exact->inexact i))
))
)
(define (pow10 n)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (* result 10.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (round x n)
  (let/ec _return (begin
(define m (pow10 n))
(define y (floor (let ([__l (* x m)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return (/ y m))
))
)
(define (check_args init_velocity angle)
  (let/ec _return (begin
(if (or (let ([__l angle] [__r 90.0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ([__l angle] [__r 1.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "Invalid angle. Range is 1-90 degrees.")
) (void))
(if (let ([__l init_velocity] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(panic "Invalid velocity. Should be a positive number.")
) (void))
))
)
(define (horizontal_distance init_velocity angle)
  (let/ec _return (begin
(check_args init_velocity angle)
(define radians (deg_to_rad (* 2.0 angle)))
(_return (round (/ (* (* init_velocity init_velocity) (sin radians)) g) 2))
))
)
(define (max_height init_velocity angle)
  (let/ec _return (begin
(check_args init_velocity angle)
(define radians (deg_to_rad angle))
(define s (sin radians))
(_return (round (/ (* (* (* init_velocity init_velocity) s) s) (* 2.0 g)) 2))
))
)
(define (total_time init_velocity angle)
  (let/ec _return (begin
(check_args init_velocity angle)
(define radians (deg_to_rad angle))
(_return (round (/ (* (* 2.0 init_velocity) (sin radians)) g) 2))
))
)
(define v0 25.0)
(define angle 20.0)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (horizontal_distance v0 angle))
(displayln (max_height v0 angle))
(displayln (total_time v0 angle))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
