;; Generated by Mochi 0.10.65 on 2025-08-14 10:00 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (make_conn_mock)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "recv_called" 0) (hash-set! h "send_called" 0) (hash-set! h "close_called" 0) h))
))
)
(define (conn_recv conn size)
  (let/ec _return (begin
(if (hash? conn) (hash-set! conn "recv_called" (let ([__l (if conn (hash-ref conn "recv_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! conn (make-hash)) (hash-set! conn "recv_called" (let ([__l (if conn (hash-ref conn "recv_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(_return 0)
))
)
(define (conn_send conn data)
  (let/ec _return (begin
(if (hash? conn) (hash-set! conn "send_called" (let ([__l (if conn (hash-ref conn "send_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! conn (make-hash)) (hash-set! conn "send_called" (let ([__l (if conn (hash-ref conn "send_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
)
(define (conn_close conn)
  (let/ec _return (begin
(if (hash? conn) (hash-set! conn "close_called" (let ([__l (if conn (hash-ref conn "close_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! conn (make-hash)) (hash-set! conn "close_called" (let ([__l (if conn (hash-ref conn "close_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
)
(define (make_socket_mock conn)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "bind_called" 0) (hash-set! h "listen_called" 0) (hash-set! h "accept_called" 0) (hash-set! h "shutdown_called" 0) (hash-set! h "close_called" 0) (hash-set! h "conn" conn) h))
))
)
(define (socket_bind sock)
  (let/ec _return (begin
(if (hash? sock) (hash-set! sock "bind_called" (let ([__l (if sock (hash-ref sock "bind_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! sock (make-hash)) (hash-set! sock "bind_called" (let ([__l (if sock (hash-ref sock "bind_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
)
(define (socket_listen sock)
  (let/ec _return (begin
(if (hash? sock) (hash-set! sock "listen_called" (let ([__l (if sock (hash-ref sock "listen_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! sock (make-hash)) (hash-set! sock "listen_called" (let ([__l (if sock (hash-ref sock "listen_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
)
(define (socket_accept sock)
  (let/ec _return (begin
(if (hash? sock) (hash-set! sock "accept_called" (let ([__l (if sock (hash-ref sock "accept_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! sock (make-hash)) (hash-set! sock "accept_called" (let ([__l (if sock (hash-ref sock "accept_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(_return (if sock (hash-ref sock "conn" #f) #f))
))
)
(define (socket_shutdown sock)
  (let/ec _return (begin
(if (hash? sock) (hash-set! sock "shutdown_called" (let ([__l (if sock (hash-ref sock "shutdown_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! sock (make-hash)) (hash-set! sock "shutdown_called" (let ([__l (if sock (hash-ref sock "shutdown_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
)
(define (socket_close sock)
  (let/ec _return (begin
(if (hash? sock) (hash-set! sock "close_called" (let ([__l (if sock (hash-ref sock "close_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! sock (make-hash)) (hash-set! sock "close_called" (let ([__l (if sock (hash-ref sock "close_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
)
(define (make_file_mock values)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "read_called" 0) (hash-set! h "data" values) h))
))
)
(define (file_read f size)
  (let/ec _return (begin
(if (let ([__l (if f (hash-ref f "read_called" #f) #f)] [__r (cond [(not (if f (hash-ref f "data" #f) #f)) 0] [(string? (if f (hash-ref f "data" #f) #f)) (string-length (if f (hash-ref f "data" #f) #f))] [(hash? (if f (hash-ref f "data" #f) #f)) (hash-count (if f (hash-ref f "data" #f) #f))] [else (length (if f (hash-ref f "data" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(define value (if (if f (hash-ref f "data" #f) #f) (if (hash? (if f (hash-ref f "data" #f) #f)) (hash-ref (if f (hash-ref f "data" #f) #f) (if f (hash-ref f "read_called" #f) #f) #f) (safe-index (if f (hash-ref f "data" #f) #f) (int (if f (hash-ref f "read_called" #f) #f)))) #f))
(if (hash? f) (hash-set! f "read_called" (let ([__l (if f (hash-ref f "read_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! f (make-hash)) (hash-set! f "read_called" (let ([__l (if f (hash-ref f "read_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(_return value)
) (void))
(if (hash? f) (hash-set! f "read_called" (let ([__l (if f (hash-ref f "read_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! f (make-hash)) (hash-set! f "read_called" (let ([__l (if f (hash-ref f "read_called" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(_return 0)
))
)
(define (file_open)
  (let/ec _return (begin
(_return (make_file_mock (list 1 0)))
))
)
(define (send_file sock f)
  (let/ec _return (begin
(socket_bind sock)
(socket_listen sock)
(define conn (socket_accept sock))
(define _ (conn_recv conn 1024))
(define data (file_read f 1024))
(let/ec _break (let loop ()
  (if (not (equal? data 0)) (begin
    (let/ec _cont
      (conn_send conn data)
      (set! data (file_read f 1024))
    )
    (loop)) (void))))
(conn_close conn)
(socket_shutdown sock)
(socket_close sock)
))
)
(define (test_send_file_running_as_expected)
  (let/ec _return (begin
(define conn (make_conn_mock))
(define sock (make_socket_mock conn))
(define f (file_open))
(send_file sock f)
(if (and (and (and (and (and (and (and (and (equal? (if sock (hash-ref sock "bind_called" #f) #f) 1) (equal? (if sock (hash-ref sock "listen_called" #f) #f) 1)) (equal? (if sock (hash-ref sock "accept_called" #f) #f) 1)) (equal? (if conn (hash-ref conn "recv_called" #f) #f) 1)) (let ([__l (if f (hash-ref f "read_called" #f) #f)] [__r 1]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (equal? (if conn (hash-ref conn "send_called" #f) #f) 1)) (equal? (if conn (hash-ref conn "close_called" #f) #f) 1)) (equal? (if sock (hash-ref sock "shutdown_called" #f) #f) 1)) (equal? (if sock (hash-ref sock "close_called" #f) #f) 1)) (let ()
(_return "pass")
) (void))
(_return "fail")
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (test_send_file_running_as_expected))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
