;; Generated by Mochi 0.10.64 on 2025-08-12 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (bfs graph s t parent)
  (let/ec _return (begin
(define visited (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not graph) 0] [(string? graph) (string-length graph)] [(hash? graph) (hash-count graph)] [else (length graph)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! visited (append (or visited (list)) (list #f)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define queue (list s))
(define head 0)
(set! visited (list-set visited (int s) #t))
(let/ec _break (let loop ()
  (if (let ([__l head] [__r (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define u (if queue (if (hash? queue) (hash-ref queue head #f) (safe-index queue (int head))) #f))
      (set! head (let ([__l head] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define ind 0)
      (let/ec _break (let loop ()
  (if (let ([__l ind] [__r (cond [(not (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f)) 0] [(string? (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f)) (string-length (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f))] [(hash? (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f)) (hash-count (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f))] [else (length (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f))])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (and (not (if visited (if (hash? visited) (hash-ref visited ind #f) (safe-index visited (int ind))) #f)) (let ([__l (if (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f) (if (hash? (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f)) (hash-ref (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f) ind #f) (safe-index (if graph (if (hash? graph) (hash-ref graph u #f) (safe-index graph (int u))) #f) (int ind))) #f)] [__r 0]) (> (int __l) (int __r)))) (let ()
(set! queue (append (or queue (list)) (list ind)))
(set! visited (list-set visited (int ind) #t))
(set! parent (list-set parent (int ind) u))
) (void))
      (set! ind (let ([__l ind] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    )
    (loop)) (void))))
(_return (if visited (if (hash? visited) (hash-ref visited t #f) (safe-index visited (int t))) #f))
))
)
(define (mincut graph source sink)
  (let/ec _return (begin
(define g graph)
(define parent (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not g) 0] [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! parent (append (or parent (list)) (list (- 1))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define temp (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not g) 0] [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f)) 0] [(string? (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f)) (string-length (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f))] [(hash? (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f)) (hash-count (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f))] [else (length (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f))])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (if (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f) (if (hash? (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f) j #f) (safe-index (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f) (int j))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! temp (append (or temp (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (bfs g source sink parent) (begin
    (let/ec _cont
      (define path_flow 1000000000)
      (define s sink)
      (let/ec _break (let loop ()
  (if (not (equal? s source)) (begin
    (let/ec _cont
      (define p (if parent (if (hash? parent) (hash-ref parent s #f) (safe-index parent (int s))) #f))
      (define cap (if (if g (if (hash? g) (hash-ref g p #f) (safe-index g (int p))) #f) (if (hash? (if g (if (hash? g) (hash-ref g p #f) (safe-index g (int p))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g p #f) (safe-index g (int p))) #f) s #f) (safe-index (if g (if (hash? g) (hash-ref g p #f) (safe-index g (int p))) #f) (int s))) #f))
      (if (let ([__l cap] [__r path_flow]) (< (int __l) (int __r))) (let ()
(set! path_flow cap)
) (void))
      (set! s p)
    )
    (loop)) (void))))
      (define v sink)
      (let/ec _break (let loop ()
  (if (not (equal? v source)) (begin
    (let/ec _cont
      (define u (if parent (if (hash? parent) (hash-ref parent v #f) (safe-index parent (int v))) #f))
      (set! g (list-set g u (list-set (list-ref g u) v (- (if (if g (if (hash? g) (hash-ref g u #f) (safe-index g (int u))) #f) (if (hash? (if g (if (hash? g) (hash-ref g u #f) (safe-index g (int u))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g u #f) (safe-index g (int u))) #f) v #f) (safe-index (if g (if (hash? g) (hash-ref g u #f) (safe-index g (int u))) #f) (int v))) #f) path_flow))))
      (set! g (list-set g v (list-set (list-ref g v) u (let ([__l (if (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) (if (hash? (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) u #f) (safe-index (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) (int u))) #f)] [__r path_flow]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! v u)
    )
    (loop)) (void))))
    )
    (loop)) (void))))
(define res (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not g) 0] [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if g (if (hash? g) (hash-ref g 0 #f) (safe-index g (int 0))) #f)) 0] [(string? (if g (if (hash? g) (hash-ref g 0 #f) (safe-index g (int 0))) #f)) (string-length (if g (if (hash? g) (hash-ref g 0 #f) (safe-index g (int 0))) #f))] [(hash? (if g (if (hash? g) (hash-ref g 0 #f) (safe-index g (int 0))) #f)) (hash-count (if g (if (hash? g) (hash-ref g 0 #f) (safe-index g (int 0))) #f))] [else (length (if g (if (hash? g) (hash-ref g 0 #f) (safe-index g (int 0))) #f))])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (and (equal? (if (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f) (if (hash? (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f) j #f) (safe-index (if g (if (hash? g) (hash-ref g i #f) (safe-index g (int i))) #f) (int j))) #f) 0) (let ([__l (if (if temp (if (hash? temp) (hash-ref temp i #f) (safe-index temp (int i))) #f) (if (hash? (if temp (if (hash? temp) (hash-ref temp i #f) (safe-index temp (int i))) #f)) (hash-ref (if temp (if (hash? temp) (hash-ref temp i #f) (safe-index temp (int i))) #f) j #f) (safe-index (if temp (if (hash? temp) (hash-ref temp i #f) (safe-index temp (int i))) #f) (int j))) #f)] [__r 0]) (> (int __l) (int __r)))) (let ()
(set! res (append (or res (list)) (list (list i j))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define test_graph (list (list 0 16 13 0 0 0) (list 0 0 10 12 0 0) (list 0 4 0 0 14 0) (list 0 0 9 0 0 20) (list 0 0 0 7 0 4) (list 0 0 0 0 0 0)))
(define result (mincut test_graph 0 5))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string result))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
