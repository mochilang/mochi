;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define PI 3.141592653589793)
(define (sinApprox x)
  (let/ec _return (begin
(define term x)
(define sum x)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 10) (let/ec _cont
    (define denom (exact->inexact (* (* 2 n) (let ([__l (* 2 n)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! term (/ (* (* (- term) x) x) denom))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (cosApprox x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 10) (let/ec _cont
    (define denom (exact->inexact (* (- (* 2 n) 1) (* 2 n))))
    (set! term (/ (* (* (- term) x) x) denom))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (expApprox x)
  (let/ec _return (begin
(define sum 1.0)
(define term 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (< n 10) (let/ec _cont
    (set! term (/ (* term x) (exact->inexact n)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (ln x)
  (let/ec _return (begin
(define t (/ (- x 1.0) (let ([__l x] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define term t)
(define sum 0.0)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 19) (let/ec _cont
    (set! sum (let ([__l sum] [__r (/ term (exact->inexact n))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! term (* (* term t) t))
    (set! n (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (* 2.0 sum))
))
)
(define (log10 x)
  (let/ec _return (begin
(_return (/ (ln x) (ln 10.0)))
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (absf x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (normalize audio)
  (let/ec _return (begin
(define max_val 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not audio) 0] [(string? audio) (string-length audio)] [(hash? audio) (hash-count audio)] [else (length audio)])) (let/ec _cont
    (define v (absf (if audio (if (hash? audio) (hash-ref audio i #f) (list-ref audio (int i))) #f)))
    (if (> v max_val) (let ()
(set! max_val v)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define res (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not audio) 0] [(string? audio) (string-length audio)] [(hash? audio) (hash-count audio)] [else (length audio)])) (let/ec _cont
    (set! res (append res (list (/ (if audio (if (hash? audio) (hash-ref audio i #f) (list-ref audio (int i))) #f) max_val))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (dft frame bins)
  (let/ec _return (begin
(define N (cond [(not frame) 0] [(string? frame) (string-length frame)] [(hash? frame) (hash-count frame)] [else (length frame)]))
(define spec (list))
(define k 0)
(let/ec _break (let loop ()
  (if (< k bins) (let/ec _cont
    (define real 0.0)
    (define imag 0.0)
    (define n 0)
    (let/ec _break (let loop ()
  (if (< n N) (let/ec _cont
    (define angle (/ (* (* (* (- 2.0) PI) (exact->inexact k)) (exact->inexact n)) (exact->inexact N)))
    (set! real (let ([__l real] [__r (* (if frame (if (hash? frame) (hash-ref frame n #f) (list-ref frame (int n))) #f) (cosApprox angle))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! imag (let ([__l imag] [__r (* (if frame (if (hash? frame) (hash-ref frame n #f) (list-ref frame (int n))) #f) (sinApprox angle))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! spec (append spec (list (let ([__l (* real real)] [__r (* imag imag)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return spec)
))
)
(define (triangular_filters bins spectrum_size)
  (let/ec _return (begin
(define filters (list))
(define b 0)
(let/ec _break (let loop ()
  (if (< b bins) (let/ec _cont
    (define center (floor (/ (* (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) spectrum_size) (let ([__l bins] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (define filt (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i spectrum_size) (let/ec _cont
    (define v 0.0)
    (if (<= i center) (let ()
(set! v (/ (exact->inexact i) (exact->inexact center)))
) (let ()
(set! v (/ (exact->inexact (- spectrum_size i)) (exact->inexact (- spectrum_size center))))
))
    (set! filt (append filt (list v)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! filters (append filters (list filt)))
    (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return filters)
))
)
(define (dot mat vec)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)])) (let/ec _cont
    (define sum 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not vec) 0] [(string? vec) (string-length vec)] [(hash? vec) (hash-count vec)] [else (length vec)])) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j))) #f) (if vec (if (hash? vec) (hash-ref vec j #f) (list-ref vec (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list sum)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (discrete_cosine_transform dct_filter_num filter_num)
  (let/ec _return (begin
(define basis (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i dct_filter_num) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j filter_num) (let/ec _cont
    (if (equal? i 0) (let ()
(set! row (append row (list (/ 1.0 (sqrtApprox (exact->inexact filter_num))))))
) (let ()
(define angle (/ (* (* (exact->inexact (let ([__l (* 2 j)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (exact->inexact i)) PI) (* 2.0 (exact->inexact filter_num))))
(set! row (append row (list (* (cosApprox angle) (sqrtApprox (/ 2.0 (exact->inexact filter_num)))))))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! basis (append basis (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return basis)
))
)
(define (mfcc audio bins dct_num)
  (let/ec _return (begin
(define norm (normalize audio))
(define spec (dft norm (let ([__l bins] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define filters (triangular_filters bins (cond [(not spec) 0] [(string? spec) (string-length spec)] [(hash? spec) (hash-count spec)] [else (length spec)])))
(define energies (dot filters spec))
(define logfb (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not energies) 0] [(string? energies) (string-length energies)] [(hash? energies) (hash-count energies)] [else (length energies)])) (let/ec _cont
    (set! logfb (append logfb (list (* 10.0 (log10 (let ([__l (if energies (if (hash? energies) (hash-ref energies i #f) (list-ref energies (int i))) #f)] [__r 1e-10]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define dct_basis (discrete_cosine_transform dct_num bins))
(define res (dot dct_basis logfb))
(if (equal? (cond [(not res) 0] [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) 0) (let ()
(set! res (list 0.0 0.0 0.0))
) (void))
(_return res)
))
)
(define sample_rate 8000)
(define size 16)
(define audio (list))
(define n 0)
(define coeffs (mfcc audio 5 3))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (< n size) (let/ec _cont
    (define t (/ (exact->inexact n) (exact->inexact sample_rate)))
    (set! audio (append audio (list (sinApprox (* (* (* 2.0 PI) 440.0) t)))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (for ([c coeffs])
  (let/ec _cont
(displayln c)
  )))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
