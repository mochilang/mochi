;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (distance_sq a b)
  (let/ec _return (begin
(define sum 0.0)
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define diff (- (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)))
(set! sum (let ([__l sum] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (+ i 1))
      (loop)))
))
(_return sum)
))
)
(define (assign_clusters data centroids)
  (let/ec _return (begin
(define assignments (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]))
(define best_idx 0)
(define best (distance_sq (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f) (if centroids (if (hash? centroids) (hash-ref centroids 0 #f) (list-ref centroids (int 0))) #f)))
(let/ec _break (let ([j 1])
  (let loop ()
    (when (< j (cond [(not centroids) 0] [(string? centroids) (string-length centroids)] [(hash? centroids) (hash-count centroids)] [else (length centroids)]))
(define dist (distance_sq (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f) (if centroids (if (hash? centroids) (hash-ref centroids j #f) (list-ref centroids (int j))) #f)))
(if (< dist best) (let ()
(set! best dist)
(set! best_idx j)
) (void))
      (set! j (+ j 1))
      (loop)))
))
(set! assignments (append assignments (list best_idx)))
      (set! i (+ i 1))
      (loop)))
))
(_return assignments)
))
)
(define (revise_centroids data k assignment)
  (let/ec _return (begin
(define dim (cond [(not (if data (if (hash? data) (hash-ref data 0 #f) (list-ref data (int 0))) #f)) 0] [(string? (if data (if (hash? data) (hash-ref data 0 #f) (list-ref data (int 0))) #f)) (string-length (if data (if (hash? data) (hash-ref data 0 #f) (list-ref data (int 0))) #f))] [(hash? (if data (if (hash? data) (hash-ref data 0 #f) (list-ref data (int 0))) #f)) (hash-count (if data (if (hash? data) (hash-ref data 0 #f) (list-ref data (int 0))) #f))] [else (length (if data (if (hash? data) (hash-ref data 0 #f) (list-ref data (int 0))) #f))]))
(define sums (list))
(define counts (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i k)
(define row (list))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j dim)
(set! row (append row (list 0.0)))
      (set! j (+ j 1))
      (loop)))
))
(set! sums (append sums (list row)))
(set! counts (append counts (list 0)))
      (set! i (+ i 1))
      (loop)))
))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]))
(define c (if assignment (if (hash? assignment) (hash-ref assignment i #f) (list-ref assignment (int i))) #f))
(set! counts (list-set counts (int c) (let ([__l (if counts (if (hash? counts) (hash-ref counts c #f) (list-ref counts (int c))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j dim)
(set! sums (list-set sums c (list-set (list-ref sums c) j (let ([__l (if (if sums (if (hash? sums) (hash-ref sums c #f) (list-ref sums (int c))) #f) (if (hash? (if sums (if (hash? sums) (hash-ref sums c #f) (list-ref sums (int c))) #f)) (hash-ref (if sums (if (hash? sums) (hash-ref sums c #f) (list-ref sums (int c))) #f) j #f) (list-ref (if sums (if (hash? sums) (hash-ref sums c #f) (list-ref sums (int c))) #f) (int j))) #f)] [__r (if (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f) (if (hash? (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f)) (hash-ref (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f) j #f) (list-ref (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f) (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(define centroids (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i k)
(define row (list))
(if (> (if counts (if (hash? counts) (hash-ref counts i #f) (list-ref counts (int i))) #f) 0) (let ()
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j dim)
(set! row (append row (list (/ (if (if sums (if (hash? sums) (hash-ref sums i #f) (list-ref sums (int i))) #f) (if (hash? (if sums (if (hash? sums) (hash-ref sums i #f) (list-ref sums (int i))) #f)) (hash-ref (if sums (if (hash? sums) (hash-ref sums i #f) (list-ref sums (int i))) #f) j #f) (list-ref (if sums (if (hash? sums) (hash-ref sums i #f) (list-ref sums (int i))) #f) (int j))) #f) (exact->inexact (if counts (if (hash? counts) (hash-ref counts i #f) (list-ref counts (int i))) #f))))))
      (set! j (+ j 1))
      (loop)))
))
) (let ()
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j dim)
(set! row (append row (list 0.0)))
      (set! j (+ j 1))
      (loop)))
))
))
(set! centroids (append centroids (list row)))
      (set! i (+ i 1))
      (loop)))
))
(_return centroids)
))
)
(define (compute_heterogeneity data centroids assignment)
  (let/ec _return (begin
(define total 0.0)
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]))
(define c (if assignment (if (hash? assignment) (hash-ref assignment i #f) (list-ref assignment (int i))) #f))
(set! total (let ([__l total] [__r (distance_sq (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f) (if centroids (if (hash? centroids) (hash-ref centroids c #f) (list-ref centroids (int c))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (+ i 1))
      (loop)))
))
(_return total)
))
)
(define (lists_equal a b)
  (let/ec _return (begin
(if (not (equal? (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (let ()
(_return #f)
) (void))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(if (not (equal? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))) (let ()
(_return #f)
) (void))
      (set! i (+ i 1))
      (loop)))
))
(_return #t)
))
)
(define (kmeans data k initial_centroids max_iter)
  (let/ec _return (begin
(define centroids initial_centroids)
(define assignment (list))
(define prev (list))
(define heterogeneity (list))
(define iter 0)
(let/ec _break (let loop ()
  (if (< iter max_iter) (let/ec _cont
    (set! assignment (assign_clusters data centroids))
    (set! centroids (revise_centroids data k assignment))
    (define h (compute_heterogeneity data centroids assignment))
    (set! heterogeneity (append heterogeneity (list h)))
    (if (and (> iter 0) (lists_equal prev assignment)) (let ()
(_break)
) (void))
    (set! prev assignment)
    (set! iter (let ([__l iter] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "centroids" centroids) (hash-set! h "assignments" assignment) (hash-set! h "heterogeneity" heterogeneity) h))
))
)
(define data (list (list 1.0 2.0) (list 1.5 1.8) (list 5.0 8.0) (list 8.0 8.0) (list 1.0 0.6) (list 9.0 11.0)))
(define k 3)
(define initial_centroids (list (if data (if (hash? data) (hash-ref data 0 #f) (list-ref data (int 0))) #f) (if data (if (hash? data) (hash-ref data 2 #f) (list-ref data (int 2))) #f) (if data (if (hash? data) (hash-ref data 5 #f) (list-ref data (int 5))) #f)))
(define result (kmeans data k initial_centroids 10))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" (if result (hash-ref result "centroids" #f) #f)))
(displayln (format "~a" (if result (hash-ref result "assignments" #f) #f)))
(displayln (format "~a" (if result (hash-ref result "heterogeneity" #f) #f)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
