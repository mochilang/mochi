;; Generated by Mochi 0.10.66 on 2025-08-16 12:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) 0)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (mean xs)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (if xs (if (hash? xs) (hash-ref xs i #f) (safe-index xs (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (/ sum (* (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1.0)))
))
)
(define (stump_predict s x)
  (let/ec _return (begin
(if (let ([__l (if x (if (hash? x) (hash-ref x (if s (hash-ref s "feature" #f) #f) #f) (safe-index x (int (if s (hash-ref s "feature" #f) #f)))) #f)] [__r (if s (hash-ref s "threshold" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return (if s (hash-ref s "left" #f) #f))
) (void))
(_return (if s (hash-ref s "right" #f) #f))
))
)
(define (train_stump features residuals)
  (let/ec _return (begin
(define best_feature 0)
(define best_threshold 0.0)
(define best_error 1000000000.0)
(define best_left 0.0)
(define best_right 0.0)
(define num_features (cond [(not (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f)) 0] [(string? (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f)) (string-length (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f))] [(hash? (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f)) (hash-count (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f))] [else (length (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f))]))
(define f 0)
(let/ec _break (let loop ()
  (if (let ([__l f] [__r num_features]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define threshold (if (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) (if (hash? (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) f #f) (safe-index (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) (int f))) #f))
      (define left (list))
      (define right (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (if (hash? (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) f #f) (safe-index (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (int f))) #f)] [__r threshold]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! left (append left (list (if residuals (if (hash? residuals) (hash-ref residuals j #f) (safe-index residuals (int j))) #f))))
) (let ()
(set! right (append right (list (if residuals (if (hash? residuals) (hash-ref residuals j #f) (safe-index residuals (int j))) #f))))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (and (not (equal? (cond [(not left) 0] [(string? left) (string-length left)] [(hash? left) (hash-count left)] [else (length left)]) 0)) (not (equal? (cond [(not right) 0] [(string? right) (string-length right)] [(hash? right) (hash-count right)] [else (length right)]) 0))) (let ()
(define left_mean (mean left))
(define right_mean (mean right))
(define err 0.0)
(set! j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define pred (if (let ([__l (if (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (if (hash? (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) f #f) (safe-index (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (int f))) #f)] [__r threshold]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) left_mean right_mean))
      (define diff (- (if residuals (if (hash? residuals) (hash-ref residuals j #f) (safe-index residuals (int j))) #f) pred))
      (set! err (let ([__l err] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (let ([__l err] [__r best_error]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! best_error err)
(set! best_feature f)
(set! best_threshold threshold)
(set! best_left left_mean)
(set! best_right right_mean)
) (void))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! f (let ([__l f] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "feature" best_feature) (hash-set! h "threshold" best_threshold) (hash-set! h "left" best_left) (hash-set! h "right" best_right) h))
))
)
(define (boost features targets rounds)
  (let/ec _return (begin
(define model (list))
(define preds (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not targets) 0] [(string? targets) (string-length targets)] [(hash? targets) (hash-count targets)] [else (length targets)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! preds (append preds (list 0.0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r rounds]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define residuals (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not targets) 0] [(string? targets) (string-length targets)] [(hash? targets) (hash-count targets)] [else (length targets)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! residuals (append residuals (list (- (if targets (if (hash? targets) (hash-ref targets j #f) (safe-index targets (int j))) #f) (if preds (if (hash? preds) (hash-ref preds j #f) (safe-index preds (int j))) #f)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define stump (train_stump features residuals))
      (set! model (append model (list stump)))
      (set! j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not preds) 0] [(string? preds) (string-length preds)] [(hash? preds) (hash-count preds)] [else (length preds)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! preds (list-set preds (int j) (let ([__l (if preds (if (hash? preds) (hash-ref preds j #f) (safe-index preds (int j))) #f)] [__r (stump_predict stump (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return model)
))
)
(define (predict model x)
  (let/ec _return (begin
(define score 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not model) 0] [(string? model) (string-length model)] [(hash? model) (hash-count model)] [else (length model)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define s (if model (if (hash? model) (hash-ref model i #f) (safe-index model (int i))) #f))
      (if (let ([__l (if x (if (hash? x) (hash-ref x (if s (hash-ref s "feature" #f) #f) #f) (safe-index x (int (if s (hash-ref s "feature" #f) #f)))) #f)] [__r (if s (hash-ref s "threshold" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! score (let ([__l score] [__r (if s (hash-ref s "left" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! score (let ([__l score] [__r (if s (hash-ref s "right" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return score)
))
)
(define (main)
  (let/ec _return (begin
(define features (list (list 5.1 3.5) (list 4.9 3.0) (list 6.2 3.4) (list 5.9 3.0)))
(define targets (list 0 0 1 1))
(define model (boost features targets 3))
(define out "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define s (predict model (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f)))
      (define label (if (let ([__l s] [__r 0.5]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) 1 0))
      (if (equal? i 0) (let ()
(set! out (to-string label))
) (let ()
(set! out (string-append (string-append out " ") (to-string label)))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln out)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
