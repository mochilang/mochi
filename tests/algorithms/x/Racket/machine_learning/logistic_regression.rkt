;; Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (expApprox x)
  (let/ec _return (begin
(define y x)
(define is_neg #f)
(if (let ([__l x] [__r 0.0]) (< (int __l) (int __r))) (let ()
(set! is_neg #t)
(set! y (- x))
) (void))
(define term 1.0)
(define sum 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (let ([__l n] [__r 30]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! term (/ (* term y) (exact->inexact n)))
      (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if is_neg (let ()
(_return (/ 1.0 sum))
) (void))
(_return sum)
))
)
(define (sigmoid z)
  (let/ec _return (begin
(_return (/ 1.0 (let ([__l 1.0] [__r (expApprox (- z))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (dot a b)
  (let/ec _return (begin
(define s 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! s (let ([__l s] [__r (* (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return s)
))
)
(define (zeros n)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list 0.0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (logistic_reg alpha x y iterations)
  (let/ec _return (begin
(define m (cond [(not x) 0] [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)]))
(define n (cond [(not (if x (if (hash? x) (hash-ref x 0 #f) (safe-index x (int 0))) #f)) 0] [(string? (if x (if (hash? x) (hash-ref x 0 #f) (safe-index x (int 0))) #f)) (string-length (if x (if (hash? x) (hash-ref x 0 #f) (safe-index x (int 0))) #f))] [(hash? (if x (if (hash? x) (hash-ref x 0 #f) (safe-index x (int 0))) #f)) (hash-count (if x (if (hash? x) (hash-ref x 0 #f) (safe-index x (int 0))) #f))] [else (length (if x (if (hash? x) (hash-ref x 0 #f) (safe-index x (int 0))) #f))]))
(define theta (zeros n))
(define iter 0)
(let/ec _break (let loop ()
  (if (let ([__l iter] [__r iterations]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define grad (zeros n))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r m]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define z (dot (if x (if (hash? x) (hash-ref x i #f) (safe-index x (int i))) #f) theta))
      (define h (sigmoid z))
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! grad (list-set grad (int k) (let ([__l (if grad (if (hash? grad) (hash-ref grad k #f) (safe-index grad (int k))) #f)] [__r (* (- h (if y (if (hash? y) (hash-ref y i #f) (safe-index y (int i))) #f)) (if (if x (if (hash? x) (hash-ref x i #f) (safe-index x (int i))) #f) (if (hash? (if x (if (hash? x) (hash-ref x i #f) (safe-index x (int i))) #f)) (hash-ref (if x (if (hash? x) (hash-ref x i #f) (safe-index x (int i))) #f) k #f) (safe-index (if x (if (hash? x) (hash-ref x i #f) (safe-index x (int i))) #f) (int k))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define k2 0)
      (let/ec _break (let loop ()
  (if (let ([__l k2] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! theta (list-set theta (int k2) (- (if theta (if (hash? theta) (hash-ref theta k2 #f) (safe-index theta (int k2))) #f) (/ (* alpha (if grad (if (hash? grad) (hash-ref grad k2 #f) (safe-index grad (int k2))) #f)) (exact->inexact m)))))
      (set! k2 (let ([__l k2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! iter (let ([__l iter] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return theta)
))
)
(define x (list (list 0.5 1.5) (list 1.0 1.0) (list 1.5 0.5) (list 3.0 3.5) (list 3.5 3.0) (list 4.0 4.0)))
(define y (list 0.0 0.0 0.0 1.0 1.0 1.0))
(define alpha 0.1)
(define iterations 1000)
(define theta (logistic_reg alpha x y iterations))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not theta) 0] [(string? theta) (string-length theta)] [(hash? theta) (hash-count theta)] [else (length theta)]))
(displayln (if theta (if (hash? theta) (hash-ref theta i #f) (safe-index theta (int i))) #f))
      (set! i (+ i 1))
      (loop)))
))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
