;; Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (dot a b)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (* (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (maxf a b)
  (let/ec _return (begin
(if (let ([__l a] [__r b]) (> (int __l) (int __r))) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (minf a b)
  (let/ec _return (begin
(if (let ([__l a] [__r b]) (< (int __l) (int __r))) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (absf x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0.0]) (>= (int __l) (int __r))) (let ()
(_return x)
) (void))
(_return (- 0.0 x))
))
)
(define (predict_raw samples labels alphas b x)
  (let/ec _return (begin
(define res 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not samples) 0] [(string? samples) (string-length samples)] [(hash? samples) (hash-count samples)] [else (length samples)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! res (let ([__l res] [__r (* (* (if alphas (if (hash? alphas) (hash-ref alphas i #f) (safe-index alphas (int i))) #f) (if labels (if (hash? labels) (hash-ref labels i #f) (safe-index labels (int i))) #f)) (dot (if samples (if (hash? samples) (hash-ref samples i #f) (safe-index samples (int i))) #f) x))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([__l res] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (smo_train samples labels c tol max_passes)
  (let/ec _return (begin
(define m (cond [(not samples) 0] [(string? samples) (string-length samples)] [(hash? samples) (hash-count samples)] [else (length samples)]))
(define alphas (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r m]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! alphas (append (or alphas (list)) (list 0.0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define b 0.0)
(define passes 0)
(let/ec _break (let loop ()
  (if (let ([__l passes] [__r max_passes]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define num_changed 0)
      (define i1 0)
      (let/ec _break (let loop ()
  (if (let ([__l i1] [__r m]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define Ei (- (predict_raw samples labels alphas b (if samples (if (hash? samples) (hash-ref samples i1 #f) (safe-index samples (int i1))) #f)) (if labels (if (hash? labels) (hash-ref labels i1 #f) (safe-index labels (int i1))) #f)))
      (if (or (and (let ([__l (* (if labels (if (hash? labels) (hash-ref labels i1 #f) (safe-index labels (int i1))) #f) Ei)] [__r (- 0.0 tol)]) (< (int __l) (int __r))) (let ([__l (if alphas (if (hash? alphas) (hash-ref alphas i1 #f) (safe-index alphas (int i1))) #f)] [__r c]) (< (int __l) (int __r)))) (and (let ([__l (* (if labels (if (hash? labels) (hash-ref labels i1 #f) (safe-index labels (int i1))) #f) Ei)] [__r tol]) (> (int __l) (int __r))) (let ([__l (if alphas (if (hash? alphas) (hash-ref alphas i1 #f) (safe-index alphas (int i1))) #f)] [__r 0.0]) (> (int __l) (int __r))))) (let ()
(define i2 (modulo (let ([__l i1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) m))
(define Ej (- (predict_raw samples labels alphas b (if samples (if (hash? samples) (hash-ref samples i2 #f) (safe-index samples (int i2))) #f)) (if labels (if (hash? labels) (hash-ref labels i2 #f) (safe-index labels (int i2))) #f)))
(define alpha1_old (if alphas (if (hash? alphas) (hash-ref alphas i1 #f) (safe-index alphas (int i1))) #f))
(define alpha2_old (if alphas (if (hash? alphas) (hash-ref alphas i2 #f) (safe-index alphas (int i2))) #f))
(define L 0.0)
(define H 0.0)
(if (not (equal? (if labels (if (hash? labels) (hash-ref labels i1 #f) (safe-index labels (int i1))) #f) (if labels (if (hash? labels) (hash-ref labels i2 #f) (safe-index labels (int i2))) #f))) (let ()
(set! L (maxf 0.0 (- alpha2_old alpha1_old)))
(set! H (minf c (- (let ([__l c] [__r alpha2_old]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) alpha1_old)))
) (let ()
(set! L (maxf 0.0 (- (let ([__l alpha2_old] [__r alpha1_old]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) c)))
(set! H (minf c (let ([__l alpha2_old] [__r alpha1_old]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
(if (equal? L H) (let ()
(set! i1 (let ([__l i1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
(define eta (- (- (* 2.0 (dot (if samples (if (hash? samples) (hash-ref samples i1 #f) (safe-index samples (int i1))) #f) (if samples (if (hash? samples) (hash-ref samples i2 #f) (safe-index samples (int i2))) #f))) (dot (if samples (if (hash? samples) (hash-ref samples i1 #f) (safe-index samples (int i1))) #f) (if samples (if (hash? samples) (hash-ref samples i1 #f) (safe-index samples (int i1))) #f))) (dot (if samples (if (hash? samples) (hash-ref samples i2 #f) (safe-index samples (int i2))) #f) (if samples (if (hash? samples) (hash-ref samples i2 #f) (safe-index samples (int i2))) #f))))
(if (let ([__l eta] [__r 0.0]) (>= (int __l) (int __r))) (let ()
(set! i1 (let ([__l i1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
(set! alphas (list-set alphas (int i2) (- alpha2_old (/ (* (if labels (if (hash? labels) (hash-ref labels i2 #f) (safe-index labels (int i2))) #f) (- Ei Ej)) eta))))
(if (let ([__l (if alphas (if (hash? alphas) (hash-ref alphas i2 #f) (safe-index alphas (int i2))) #f)] [__r H]) (> (int __l) (int __r))) (let ()
(set! alphas (list-set alphas (int i2) H))
) (void))
(if (let ([__l (if alphas (if (hash? alphas) (hash-ref alphas i2 #f) (safe-index alphas (int i2))) #f)] [__r L]) (< (int __l) (int __r))) (let ()
(set! alphas (list-set alphas (int i2) L))
) (void))
(if (let ([__l (absf (- (if alphas (if (hash? alphas) (hash-ref alphas i2 #f) (safe-index alphas (int i2))) #f) alpha2_old))] [__r 1e-05]) (< (int __l) (int __r))) (let ()
(set! i1 (let ([__l i1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
(set! alphas (list-set alphas (int i1) (let ([__l alpha1_old] [__r (* (* (if labels (if (hash? labels) (hash-ref labels i1 #f) (safe-index labels (int i1))) #f) (if labels (if (hash? labels) (hash-ref labels i2 #f) (safe-index labels (int i2))) #f)) (- alpha2_old (if alphas (if (hash? alphas) (hash-ref alphas i2 #f) (safe-index alphas (int i2))) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define b1 (- (- (- b Ei) (* (* (if labels (if (hash? labels) (hash-ref labels i1 #f) (safe-index labels (int i1))) #f) (- (if alphas (if (hash? alphas) (hash-ref alphas i1 #f) (safe-index alphas (int i1))) #f) alpha1_old)) (dot (if samples (if (hash? samples) (hash-ref samples i1 #f) (safe-index samples (int i1))) #f) (if samples (if (hash? samples) (hash-ref samples i1 #f) (safe-index samples (int i1))) #f)))) (* (* (if labels (if (hash? labels) (hash-ref labels i2 #f) (safe-index labels (int i2))) #f) (- (if alphas (if (hash? alphas) (hash-ref alphas i2 #f) (safe-index alphas (int i2))) #f) alpha2_old)) (dot (if samples (if (hash? samples) (hash-ref samples i1 #f) (safe-index samples (int i1))) #f) (if samples (if (hash? samples) (hash-ref samples i2 #f) (safe-index samples (int i2))) #f)))))
(define b2 (- (- (- b Ej) (* (* (if labels (if (hash? labels) (hash-ref labels i1 #f) (safe-index labels (int i1))) #f) (- (if alphas (if (hash? alphas) (hash-ref alphas i1 #f) (safe-index alphas (int i1))) #f) alpha1_old)) (dot (if samples (if (hash? samples) (hash-ref samples i1 #f) (safe-index samples (int i1))) #f) (if samples (if (hash? samples) (hash-ref samples i2 #f) (safe-index samples (int i2))) #f)))) (* (* (if labels (if (hash? labels) (hash-ref labels i2 #f) (safe-index labels (int i2))) #f) (- (if alphas (if (hash? alphas) (hash-ref alphas i2 #f) (safe-index alphas (int i2))) #f) alpha2_old)) (dot (if samples (if (hash? samples) (hash-ref samples i2 #f) (safe-index samples (int i2))) #f) (if samples (if (hash? samples) (hash-ref samples i2 #f) (safe-index samples (int i2))) #f)))))
(if (and (let ([__l (if alphas (if (hash? alphas) (hash-ref alphas i1 #f) (safe-index alphas (int i1))) #f)] [__r 0.0]) (> (int __l) (int __r))) (let ([__l (if alphas (if (hash? alphas) (hash-ref alphas i1 #f) (safe-index alphas (int i1))) #f)] [__r c]) (< (int __l) (int __r)))) (let ()
(set! b b1)
) (let ()
(if (and (let ([__l (if alphas (if (hash? alphas) (hash-ref alphas i2 #f) (safe-index alphas (int i2))) #f)] [__r 0.0]) (> (int __l) (int __r))) (let ([__l (if alphas (if (hash? alphas) (hash-ref alphas i2 #f) (safe-index alphas (int i2))) #f)] [__r c]) (< (int __l) (int __r)))) (let ()
(set! b b2)
) (let ()
(set! b (/ (let ([__l b1] [__r b2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
))
))
(set! num_changed (let ([__l num_changed] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i1 (let ([__l i1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (equal? num_changed 0) (let ()
(set! passes (let ([__l passes] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! passes 0)
))
    )
    (loop)) (void))))
(_return (list alphas (list b)))
))
)
(define (predict samples labels model x)
  (let/ec _return (begin
(define alphas (if model (if (hash? model) (hash-ref model 0 #f) (safe-index model (int 0))) #f))
(define b (if (if model (if (hash? model) (hash-ref model 1 #f) (safe-index model (int 1))) #f) (if (hash? (if model (if (hash? model) (hash-ref model 1 #f) (safe-index model (int 1))) #f)) (hash-ref (if model (if (hash? model) (hash-ref model 1 #f) (safe-index model (int 1))) #f) 0 #f) (safe-index (if model (if (hash? model) (hash-ref model 1 #f) (safe-index model (int 1))) #f) (int 0))) #f))
(define val (predict_raw samples labels alphas b x))
(if (let ([__l val] [__r 0.0]) (>= (int __l) (int __r))) (let ()
(_return 1.0)
) (void))
(_return (- 1.0))
))
)
(define samples (list (list 2.0 2.0) (list 1.5 1.5) (list 0.0 0.0) (list 0.5 0.0)))
(define labels (list 1.0 1.0 (- 1.0) (- 1.0)))
(define model (smo_train samples labels 1.0 0.001 10))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (predict samples labels model (list 1.5 1.0)))
(displayln (predict samples labels model (list 0.2 0.1)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
