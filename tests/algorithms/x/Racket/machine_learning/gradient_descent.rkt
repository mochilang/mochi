;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (absf x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (hypothesis_value input params)
  (let/ec _return (begin
(define value (if params (if (hash? params) (hash-ref params 0 #f) (list-ref params (int 0))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not input) 0] [(string? input) (string-length input)] [(hash? input) (hash-count input)] [else (length input)])) (let/ec _cont
    (set! value (let ([__l value] [__r (* (if input (if (hash? input) (hash-ref input i #f) (list-ref input (int i))) #f) (if params (if (hash? params) (hash-ref params (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref params (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return value)
))
)
(define (calc_error dp params)
  (let/ec _return (begin
(_return (- (hypothesis_value (if dp (hash-ref dp "x" #f) #f) params) (if dp (hash-ref dp "y" #f) #f)))
))
)
(define (summation_of_cost_derivative index params data)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])) (let/ec _cont
    (define dp (if data (if (hash? data) (hash-ref data i #f) (list-ref data (int i))) #f))
    (define e (calc_error dp params))
    (if (equal? index (- 1)) (let ()
(set! sum (let ([__l sum] [__r e]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! sum (let ([__l sum] [__r (* e (if (if dp (hash-ref dp "x" #f) #f) (if (hash? (if dp (hash-ref dp "x" #f) #f)) (hash-ref (if dp (hash-ref dp "x" #f) #f) index #f) (list-ref (if dp (hash-ref dp "x" #f) #f) (int index))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (get_cost_derivative index params data)
  (let/ec _return (begin
(_return (/ (summation_of_cost_derivative index params data) (exact->inexact (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]))))
))
)
(define (allclose a b atol rtol)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (define diff (absf (- (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))))
    (define limit (let ([__l atol] [__r (* rtol (absf (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> diff limit) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (run_gradient_descent train_data initial_params)
  (let/ec _return (begin
(define learning_rate 0.009)
(define absolute_error_limit 2e-06)
(define relative_error_limit 0.0)
(define j 0)
(define params initial_params)
(let/ec _break (let loop ()
  (if #t (let/ec _cont
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define temp (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(not params) 0] [(string? params) (string-length params)] [(hash? params) (hash-count params)] [else (length params)])) (let/ec _cont
    (define deriv (get_cost_derivative (- i 1) params train_data))
    (set! temp (append temp (list (- (if params (if (hash? params) (hash-ref params i #f) (list-ref params (int i))) #f) (* learning_rate deriv)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (allclose params temp absolute_error_limit relative_error_limit) (let ()
(displayln (string-append "Number of iterations:" (format "~a" j)))
(_break)
) (void))
    (set! params temp)
    (loop)) (void))))
(_return params)
))
)
(define (test_gradient_descent test_data params)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not test_data) 0] [(string? test_data) (string-length test_data)] [(hash? test_data) (hash-count test_data)] [else (length test_data)])) (let/ec _cont
    (define dp (if test_data (if (hash? test_data) (hash-ref test_data i #f) (list-ref test_data (int i))) #f))
    (displayln (string-append "Actual output value:" (format "~a" (if dp (hash-ref dp "y" #f) #f))))
    (displayln (string-append "Hypothesis output:" (format "~a" (hypothesis_value (if dp (hash-ref dp "x" #f) #f) params))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define train_data (list (let ([h (make-hash)]) (hash-set! h "x" (list 5.0 2.0 3.0)) (hash-set! h "y" 15.0) h) (let ([h (make-hash)]) (hash-set! h "x" (list 6.0 5.0 9.0)) (hash-set! h "y" 25.0) h) (let ([h (make-hash)]) (hash-set! h "x" (list 11.0 12.0 13.0)) (hash-set! h "y" 41.0) h) (let ([h (make-hash)]) (hash-set! h "x" (list 1.0 1.0 1.0)) (hash-set! h "y" 8.0) h) (let ([h (make-hash)]) (hash-set! h "x" (list 11.0 12.0 13.0)) (hash-set! h "y" 41.0) h)))
(define test_data (list (let ([h (make-hash)]) (hash-set! h "x" (list 515.0 22.0 13.0)) (hash-set! h "y" 555.0) h) (let ([h (make-hash)]) (hash-set! h "x" (list 61.0 35.0 49.0)) (hash-set! h "y" 150.0) h)))
(define parameter_vector (list 2.0 4.0 1.0 5.0))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(set! parameter_vector (run_gradient_descent train_data parameter_vector))
(displayln "\nTesting gradient descent for a linear hypothesis function.\n")
(test_gradient_descent test_data parameter_vector)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
