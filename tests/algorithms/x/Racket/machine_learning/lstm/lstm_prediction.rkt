;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (exp_approx x)
  (let/ec _return (begin
(define sum 1.0)
(define term 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (< n 20) (let/ec _cont
    (set! term (/ (* term x) (exact->inexact n)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (sigmoid x)
  (let/ec _return (begin
(_return (/ 1.0 (let ([__l 1.0] [__r (exp_approx (- x))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (tanh_approx x)
  (let/ec _return (begin
(define e (exp_approx (* 2.0 x)))
(_return (/ (- e 1.0) (let ([__l e] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (forward seq w)
  (let/ec _return (begin
(define i_arr (list))
(define f_arr (list))
(define o_arr (list))
(define g_arr (list))
(define c_arr (list 0.0))
(define h_arr (list 0.0))
(define t 0)
(let/ec _break (let loop ()
  (if (< t (cond [(not seq) 0] [(string? seq) (string-length seq)] [(hash? seq) (hash-count seq)] [else (length seq)])) (let/ec _cont
    (define x (if seq (if (hash? seq) (hash-ref seq t #f) (list-ref seq (int t))) #f))
    (define h_prev (if h_arr (if (hash? h_arr) (hash-ref h_arr t #f) (list-ref h_arr (int t))) #f))
    (define c_prev (if c_arr (if (hash? c_arr) (hash-ref c_arr t #f) (list-ref c_arr (int t))) #f))
    (define i_t (sigmoid (let ([__l (let ([__l (* (if w (hash-ref w "w_i" #f) #f) x)] [__r (* (if w (hash-ref w "u_i" #f) #f) h_prev)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if w (hash-ref w "b_i" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define f_t (sigmoid (let ([__l (let ([__l (* (if w (hash-ref w "w_f" #f) #f) x)] [__r (* (if w (hash-ref w "u_f" #f) #f) h_prev)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if w (hash-ref w "b_f" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define o_t (sigmoid (let ([__l (let ([__l (* (if w (hash-ref w "w_o" #f) #f) x)] [__r (* (if w (hash-ref w "u_o" #f) #f) h_prev)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if w (hash-ref w "b_o" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define g_t (tanh_approx (let ([__l (let ([__l (* (if w (hash-ref w "w_c" #f) #f) x)] [__r (* (if w (hash-ref w "u_c" #f) #f) h_prev)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if w (hash-ref w "b_c" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define c_t (let ([__l (* f_t c_prev)] [__r (* i_t g_t)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define h_t (* o_t (tanh_approx c_t)))
    (set! i_arr (append i_arr (list i_t)))
    (set! f_arr (append f_arr (list f_t)))
    (set! o_arr (append o_arr (list o_t)))
    (set! g_arr (append g_arr (list g_t)))
    (set! c_arr (append c_arr (list c_t)))
    (set! h_arr (append h_arr (list h_t)))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "i" i_arr) (hash-set! h "f" f_arr) (hash-set! h "o" o_arr) (hash-set! h "g" g_arr) (hash-set! h "c" c_arr) (hash-set! h "h" h_arr) h))
))
)
(define (backward seq target w s lr)
  (let/ec _return (begin
(define dw_i 0.0)
(define du_i 0.0)
(define db_i 0.0)
(define dw_f 0.0)
(define du_f 0.0)
(define db_f 0.0)
(define dw_o 0.0)
(define du_o 0.0)
(define db_o 0.0)
(define dw_c 0.0)
(define du_c 0.0)
(define db_c 0.0)
(define dw_y 0.0)
(define db_y 0.0)
(define T (cond [(not seq) 0] [(string? seq) (string-length seq)] [(hash? seq) (hash-count seq)] [else (length seq)]))
(define h_last (if (if s (hash-ref s "h" #f) #f) (if (hash? (if s (hash-ref s "h" #f) #f)) (hash-ref (if s (hash-ref s "h" #f) #f) T #f) (list-ref (if s (hash-ref s "h" #f) #f) (int T))) #f))
(define y (let ([__l (* (if w (hash-ref w "w_y" #f) #f) h_last)] [__r (if w (hash-ref w "b_y" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define dy (- y target))
(set! dw_y (* dy h_last))
(set! db_y dy)
(define dh_next (* dy (if w (hash-ref w "w_y" #f) #f)))
(define dc_next 0.0)
(define t (- T 1))
(let/ec _break (let loop ()
  (if (>= t 0) (let/ec _cont
    (define i_t (if (if s (hash-ref s "i" #f) #f) (if (hash? (if s (hash-ref s "i" #f) #f)) (hash-ref (if s (hash-ref s "i" #f) #f) t #f) (list-ref (if s (hash-ref s "i" #f) #f) (int t))) #f))
    (define f_t (if (if s (hash-ref s "f" #f) #f) (if (hash? (if s (hash-ref s "f" #f) #f)) (hash-ref (if s (hash-ref s "f" #f) #f) t #f) (list-ref (if s (hash-ref s "f" #f) #f) (int t))) #f))
    (define o_t (if (if s (hash-ref s "o" #f) #f) (if (hash? (if s (hash-ref s "o" #f) #f)) (hash-ref (if s (hash-ref s "o" #f) #f) t #f) (list-ref (if s (hash-ref s "o" #f) #f) (int t))) #f))
    (define g_t (if (if s (hash-ref s "g" #f) #f) (if (hash? (if s (hash-ref s "g" #f) #f)) (hash-ref (if s (hash-ref s "g" #f) #f) t #f) (list-ref (if s (hash-ref s "g" #f) #f) (int t))) #f))
    (define c_t (if (if s (hash-ref s "c" #f) #f) (if (hash? (if s (hash-ref s "c" #f) #f)) (hash-ref (if s (hash-ref s "c" #f) #f) (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if s (hash-ref s "c" #f) #f) (int (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
    (define c_prev (if (if s (hash-ref s "c" #f) #f) (if (hash? (if s (hash-ref s "c" #f) #f)) (hash-ref (if s (hash-ref s "c" #f) #f) t #f) (list-ref (if s (hash-ref s "c" #f) #f) (int t))) #f))
    (define h_prev (if (if s (hash-ref s "h" #f) #f) (if (hash? (if s (hash-ref s "h" #f) #f)) (hash-ref (if s (hash-ref s "h" #f) #f) t #f) (list-ref (if s (hash-ref s "h" #f) #f) (int t))) #f))
    (define tanh_c (tanh_approx c_t))
    (define do_t (* dh_next tanh_c))
    (define da_o (* (* do_t o_t) (- 1.0 o_t)))
    (define dc (let ([__l (* (* dh_next o_t) (- 1.0 (* tanh_c tanh_c)))] [__r dc_next]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define di_t (* dc g_t))
    (define da_i (* (* di_t i_t) (- 1.0 i_t)))
    (define dg_t (* dc i_t))
    (define da_g (* dg_t (- 1.0 (* g_t g_t))))
    (define df_t (* dc c_prev))
    (define da_f (* (* df_t f_t) (- 1.0 f_t)))
    (set! dw_i (let ([__l dw_i] [__r (* da_i (if seq (if (hash? seq) (hash-ref seq t #f) (list-ref seq (int t))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! du_i (let ([__l du_i] [__r (* da_i h_prev)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! db_i (let ([__l db_i] [__r da_i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! dw_f (let ([__l dw_f] [__r (* da_f (if seq (if (hash? seq) (hash-ref seq t #f) (list-ref seq (int t))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! du_f (let ([__l du_f] [__r (* da_f h_prev)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! db_f (let ([__l db_f] [__r da_f]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! dw_o (let ([__l dw_o] [__r (* da_o (if seq (if (hash? seq) (hash-ref seq t #f) (list-ref seq (int t))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! du_o (let ([__l du_o] [__r (* da_o h_prev)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! db_o (let ([__l db_o] [__r da_o]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! dw_c (let ([__l dw_c] [__r (* da_g (if seq (if (hash? seq) (hash-ref seq t #f) (list-ref seq (int t))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! du_c (let ([__l du_c] [__r (* da_g h_prev)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! db_c (let ([__l db_c] [__r da_g]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! dh_next (let ([__l (let ([__l (let ([__l (* da_i (if w (hash-ref w "u_i" #f) #f))] [__r (* da_f (if w (hash-ref w "u_f" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* da_o (if w (hash-ref w "u_o" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* da_g (if w (hash-ref w "u_c" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! dc_next (* dc f_t))
    (set! t (- t 1))
    (loop)) (void))))
(if (hash? w) (hash-set! w "w_y" (- (if w (hash-ref w "w_y" #f) #f) (* lr dw_y))) (begin (set! w (make-hash)) (hash-set! w "w_y" (- (if w (hash-ref w "w_y" #f) #f) (* lr dw_y)))))
(if (hash? w) (hash-set! w "b_y" (- (if w (hash-ref w "b_y" #f) #f) (* lr db_y))) (begin (set! w (make-hash)) (hash-set! w "b_y" (- (if w (hash-ref w "b_y" #f) #f) (* lr db_y)))))
(if (hash? w) (hash-set! w "w_i" (- (if w (hash-ref w "w_i" #f) #f) (* lr dw_i))) (begin (set! w (make-hash)) (hash-set! w "w_i" (- (if w (hash-ref w "w_i" #f) #f) (* lr dw_i)))))
(if (hash? w) (hash-set! w "u_i" (- (if w (hash-ref w "u_i" #f) #f) (* lr du_i))) (begin (set! w (make-hash)) (hash-set! w "u_i" (- (if w (hash-ref w "u_i" #f) #f) (* lr du_i)))))
(if (hash? w) (hash-set! w "b_i" (- (if w (hash-ref w "b_i" #f) #f) (* lr db_i))) (begin (set! w (make-hash)) (hash-set! w "b_i" (- (if w (hash-ref w "b_i" #f) #f) (* lr db_i)))))
(if (hash? w) (hash-set! w "w_f" (- (if w (hash-ref w "w_f" #f) #f) (* lr dw_f))) (begin (set! w (make-hash)) (hash-set! w "w_f" (- (if w (hash-ref w "w_f" #f) #f) (* lr dw_f)))))
(if (hash? w) (hash-set! w "u_f" (- (if w (hash-ref w "u_f" #f) #f) (* lr du_f))) (begin (set! w (make-hash)) (hash-set! w "u_f" (- (if w (hash-ref w "u_f" #f) #f) (* lr du_f)))))
(if (hash? w) (hash-set! w "b_f" (- (if w (hash-ref w "b_f" #f) #f) (* lr db_f))) (begin (set! w (make-hash)) (hash-set! w "b_f" (- (if w (hash-ref w "b_f" #f) #f) (* lr db_f)))))
(if (hash? w) (hash-set! w "w_o" (- (if w (hash-ref w "w_o" #f) #f) (* lr dw_o))) (begin (set! w (make-hash)) (hash-set! w "w_o" (- (if w (hash-ref w "w_o" #f) #f) (* lr dw_o)))))
(if (hash? w) (hash-set! w "u_o" (- (if w (hash-ref w "u_o" #f) #f) (* lr du_o))) (begin (set! w (make-hash)) (hash-set! w "u_o" (- (if w (hash-ref w "u_o" #f) #f) (* lr du_o)))))
(if (hash? w) (hash-set! w "b_o" (- (if w (hash-ref w "b_o" #f) #f) (* lr db_o))) (begin (set! w (make-hash)) (hash-set! w "b_o" (- (if w (hash-ref w "b_o" #f) #f) (* lr db_o)))))
(if (hash? w) (hash-set! w "w_c" (- (if w (hash-ref w "w_c" #f) #f) (* lr dw_c))) (begin (set! w (make-hash)) (hash-set! w "w_c" (- (if w (hash-ref w "w_c" #f) #f) (* lr dw_c)))))
(if (hash? w) (hash-set! w "u_c" (- (if w (hash-ref w "u_c" #f) #f) (* lr du_c))) (begin (set! w (make-hash)) (hash-set! w "u_c" (- (if w (hash-ref w "u_c" #f) #f) (* lr du_c)))))
(if (hash? w) (hash-set! w "b_c" (- (if w (hash-ref w "b_c" #f) #f) (* lr db_c))) (begin (set! w (make-hash)) (hash-set! w "b_c" (- (if w (hash-ref w "b_c" #f) #f) (* lr db_c)))))
(_return w)
))
)
(define (make_samples data look_back)
  (let/ec _return (begin
(define X (list))
(define Y (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< (let ([__l i] [__r look_back]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)])) (let/ec _cont
    (define seq (slice data i (let ([__l i] [__r look_back]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! X (append X (list seq)))
    (set! Y (append Y (list (if data (if (hash? data) (hash-ref data (let ([__l i] [__r look_back]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref data (int (let ([__l i] [__r look_back]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "x" X) (hash-set! h "y" Y) h))
))
)
(define (init_weights)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "w_i" 0.1) (hash-set! h "u_i" 0.2) (hash-set! h "b_i" 0.0) (hash-set! h "w_f" 0.1) (hash-set! h "u_f" 0.2) (hash-set! h "b_f" 0.0) (hash-set! h "w_o" 0.1) (hash-set! h "u_o" 0.2) (hash-set! h "b_o" 0.0) (hash-set! h "w_c" 0.1) (hash-set! h "u_c" 0.2) (hash-set! h "b_c" 0.0) (hash-set! h "w_y" 0.1) (hash-set! h "b_y" 0.0) h))
))
)
(define (train data look_back epochs lr)
  (let/ec _return (begin
(define samples (make_samples data look_back))
(define w (init_weights))
(define ep 0)
(let/ec _break (let loop ()
  (if (< ep epochs) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if samples (hash-ref samples "x" #f) #f)) 0] [(string? (if samples (hash-ref samples "x" #f) #f)) (string-length (if samples (hash-ref samples "x" #f) #f))] [(hash? (if samples (hash-ref samples "x" #f) #f)) (hash-count (if samples (hash-ref samples "x" #f) #f))] [else (length (if samples (hash-ref samples "x" #f) #f))])) (let/ec _cont
    (define seq (if (if samples (hash-ref samples "x" #f) #f) (if (hash? (if samples (hash-ref samples "x" #f) #f)) (hash-ref (if samples (hash-ref samples "x" #f) #f) j #f) (list-ref (if samples (hash-ref samples "x" #f) #f) (int j))) #f))
    (define target (if (if samples (hash-ref samples "y" #f) #f) (if (hash? (if samples (hash-ref samples "y" #f) #f)) (hash-ref (if samples (hash-ref samples "y" #f) #f) j #f) (list-ref (if samples (hash-ref samples "y" #f) #f) (int j))) #f))
    (define state (forward seq w))
    (set! w (backward seq target w state lr))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ep (let ([__l ep] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return w)
))
)
(define (predict seq w)
  (let/ec _return (begin
(define state (forward seq w))
(define h_last (if (if state (hash-ref state "h" #f) #f) (if (hash? (if state (hash-ref state "h" #f) #f)) (hash-ref (if state (hash-ref state "h" #f) #f) (- (cond [(not (if state (hash-ref state "h" #f) #f)) 0] [(string? (if state (hash-ref state "h" #f) #f)) (string-length (if state (hash-ref state "h" #f) #f))] [(hash? (if state (hash-ref state "h" #f) #f)) (hash-count (if state (hash-ref state "h" #f) #f))] [else (length (if state (hash-ref state "h" #f) #f))]) 1) #f) (list-ref (if state (hash-ref state "h" #f) #f) (int (- (cond [(not (if state (hash-ref state "h" #f) #f)) 0] [(string? (if state (hash-ref state "h" #f) #f)) (string-length (if state (hash-ref state "h" #f) #f))] [(hash? (if state (hash-ref state "h" #f) #f)) (hash-count (if state (hash-ref state "h" #f) #f))] [else (length (if state (hash-ref state "h" #f) #f))]) 1)))) #f))
(_return (let ([__l (* (if w (hash-ref w "w_y" #f) #f) h_last)] [__r (if w (hash-ref w "b_y" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define data (list 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8))
(define look_back 3)
(define epochs 200)
(define lr 0.1)
(define w (train data look_back epochs lr))
(define test_seq (list 0.6 0.7 0.8))
(define pred (predict test_seq w))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-append "Predicted value: " (format "~a" pred)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
