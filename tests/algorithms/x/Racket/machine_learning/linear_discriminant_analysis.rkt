;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define PI 3.141592653589793)
(define TWO_PI 6.283185307179586)
(define seed 1)
(define (rand)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return seed)
))
)
(define (random)
  (let/ec _return (begin
(_return (/ (exact->inexact (rand)) 2147483648.0))
))
)
(define (_mod x m)
  (let/ec _return (begin
(_return (- x (* (exact->inexact (int (/ x m))) m)))
))
)
(define (cos x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) TWO_PI) PI))
(define y2 (* y y))
(define y4 (* y2 y2))
(define y6 (* y4 y2))
(_return (- (let ([__l (- 1.0 (/ y2 2.0))] [__r (/ y4 24.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y6 720.0)))
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (ln x)
  (let/ec _return (begin
(define t (/ (- x 1.0) (let ([__l x] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define term t)
(define sum 0.0)
(define n 1)
(let/ec _break (let loop ()
  (if (<= n 19) (let/ec _cont
    (set! sum (let ([__l sum] [__r (/ term (exact->inexact n))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! term (* (* term t) t))
    (set! n (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (* 2.0 sum))
))
)
(define (gaussian_distribution mean std_dev instance_count)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i instance_count) (let/ec _cont
    (define u1 (random))
    (define u2 (random))
    (define r (sqrtApprox (* (- 2.0) (ln u1))))
    (define theta (* TWO_PI u2))
    (define z (* r (cos theta)))
    (set! res (append res (list (let ([__l mean] [__r (* z std_dev)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (y_generator class_count instance_count)
  (let/ec _return (begin
(define res (list))
(define k 0)
(let/ec _break (let loop ()
  (if (< k class_count) (let/ec _cont
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (if instance_count (if (hash? instance_count) (hash-ref instance_count k #f) (list-ref instance_count (int k))) #f)) (let/ec _cont
    (set! res (append res (list k)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (calculate_mean instance_count items)
  (let/ec _return (begin
(define total 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i instance_count) (let/ec _cont
    (set! total (let ([__l total] [__r (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (/ total (exact->inexact instance_count)))
))
)
(define (calculate_probabilities instance_count total_count)
  (let/ec _return (begin
(_return (/ (exact->inexact instance_count) (exact->inexact total_count)))
))
)
(define (calculate_variance items means total_count)
  (let/ec _return (begin
(define squared_diff (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not items) 0] [(string? items) (string-length items)] [(hash? items) (hash-count items)] [else (length items)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f)) 0] [(string? (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f)) (string-length (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f))] [(hash? (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f)) (hash-count (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f))] [else (length (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f))])) (let/ec _cont
    (define diff (- (if (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f) (if (hash? (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f)) (hash-ref (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f) j #f) (list-ref (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f) (int j))) #f) (if means (if (hash? means) (hash-ref means i #f) (list-ref means (int i))) #f)))
    (set! squared_diff (append squared_diff (list (* diff diff))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define sum_sq 0.0)
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(not squared_diff) 0] [(string? squared_diff) (string-length squared_diff)] [(hash? squared_diff) (hash-count squared_diff)] [else (length squared_diff)])) (let/ec _cont
    (set! sum_sq (let ([__l sum_sq] [__r (if squared_diff (if (hash? squared_diff) (hash-ref squared_diff k #f) (list-ref squared_diff (int k))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define n_classes (cond [(not means) 0] [(string? means) (string-length means)] [(hash? means) (hash-count means)] [else (length means)]))
(_return (* (/ 1.0 (exact->inexact (- total_count n_classes))) sum_sq))
))
)
(define (predict_y_values x_items means variance probabilities)
  (let/ec _return (begin
(define results (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not x_items) 0] [(string? x_items) (string-length x_items)] [(hash? x_items) (hash-count x_items)] [else (length x_items)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f)) 0] [(string? (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f)) (string-length (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f))] [(hash? (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f)) (hash-count (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f))] [else (length (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f))])) (let/ec _cont
    (define temp (list))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k (cond [(not x_items) 0] [(string? x_items) (string-length x_items)] [(hash? x_items) (hash-count x_items)] [else (length x_items)])) (let/ec _cont
    (define discr (let ([__l (- (* (if (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f) (if (hash? (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f)) (hash-ref (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f) j #f) (list-ref (if x_items (if (hash? x_items) (hash-ref x_items i #f) (list-ref x_items (int i))) #f) (int j))) #f) (/ (if means (if (hash? means) (hash-ref means k #f) (list-ref means (int k))) #f) variance)) (/ (* (if means (if (hash? means) (hash-ref means k #f) (list-ref means (int k))) #f) (if means (if (hash? means) (hash-ref means k #f) (list-ref means (int k))) #f)) (* 2.0 variance)))] [__r (ln (if probabilities (if (hash? probabilities) (hash-ref probabilities k #f) (list-ref probabilities (int k))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! temp (append temp (list discr)))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define max_idx 0)
    (define max_val (if temp (if (hash? temp) (hash-ref temp 0 #f) (list-ref temp (int 0))) #f))
    (define t 1)
    (let/ec _break (let loop ()
  (if (< t (cond [(not temp) 0] [(string? temp) (string-length temp)] [(hash? temp) (hash-count temp)] [else (length temp)])) (let/ec _cont
    (if (> (if temp (if (hash? temp) (hash-ref temp t #f) (list-ref temp (int t))) #f) max_val) (let ()
(set! max_val (if temp (if (hash? temp) (hash-ref temp t #f) (list-ref temp (int t))) #f))
(set! max_idx t)
) (void))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! results (append results (list max_idx)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return results)
))
)
(define (accuracy actual_y predicted_y)
  (let/ec _return (begin
(define correct 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not actual_y) 0] [(string? actual_y) (string-length actual_y)] [(hash? actual_y) (hash-count actual_y)] [else (length actual_y)])) (let/ec _cont
    (if (equal? (if actual_y (if (hash? actual_y) (hash-ref actual_y i #f) (list-ref actual_y (int i))) #f) (if predicted_y (if (hash? predicted_y) (hash-ref predicted_y i #f) (list-ref predicted_y (int i))) #f)) (let ()
(set! correct (let ([__l correct] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (* (/ (exact->inexact correct) (exact->inexact (cond [(not actual_y) 0] [(string? actual_y) (string-length actual_y)] [(hash? actual_y) (hash-count actual_y)] [else (length actual_y)]))) 100.0))
))
)
(define (main)
  (let/ec _return (begin
(set! seed 1)
(define counts (list 20 20 20))
(define means (list 5.0 10.0 15.0))
(define std_dev 1.0)
(define x (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not counts) 0] [(string? counts) (string-length counts)] [(hash? counts) (hash-count counts)] [else (length counts)])) (let/ec _cont
    (set! x (append x (list (gaussian_distribution (if means (if (hash? means) (hash-ref means i #f) (list-ref means (int i))) #f) std_dev (if counts (if (hash? counts) (hash-ref counts i #f) (list-ref counts (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define y (y_generator (cond [(not counts) 0] [(string? counts) (string-length counts)] [(hash? counts) (hash-count counts)] [else (length counts)]) counts))
(define actual_means (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not counts) 0] [(string? counts) (string-length counts)] [(hash? counts) (hash-count counts)] [else (length counts)])) (let/ec _cont
    (set! actual_means (append actual_means (list (calculate_mean (if counts (if (hash? counts) (hash-ref counts i #f) (list-ref counts (int i))) #f) (if x (if (hash? x) (hash-ref x i #f) (list-ref x (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define total_count 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not counts) 0] [(string? counts) (string-length counts)] [(hash? counts) (hash-count counts)] [else (length counts)])) (let/ec _cont
    (set! total_count (let ([__l total_count] [__r (if counts (if (hash? counts) (hash-ref counts i #f) (list-ref counts (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define probabilities (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not counts) 0] [(string? counts) (string-length counts)] [(hash? counts) (hash-count counts)] [else (length counts)])) (let/ec _cont
    (set! probabilities (append probabilities (list (calculate_probabilities (if counts (if (hash? counts) (hash-ref counts i #f) (list-ref counts (int i))) #f) total_count))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define variance (calculate_variance x actual_means total_count))
(define predicted (predict_y_values x actual_means variance probabilities))
(displayln predicted)
(displayln (accuracy y predicted))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
