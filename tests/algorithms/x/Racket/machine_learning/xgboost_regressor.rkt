;; Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (data_handling dataset)
  (let/ec _return (begin
(_return dataset)
))
)
(define (xgboost features target test_features)
  (let/ec _return (begin
(define learning_rate 0.5)
(define n_estimators 3)
(define trees (list))
(define predictions (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not target) 0] [(string? target) (string-length target)] [(hash? target) (hash-count target)] [else (length target)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! predictions (append (or predictions (list)) (list 0.0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define est 0)
(let/ec _break (let loop ()
  (if (let ([__l est] [__r n_estimators]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define residuals (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not target) 0] [(string? target) (string-length target)] [(hash? target) (hash-count target)] [else (length target)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! residuals (append (or residuals (list)) (list (- (if target (if (hash? target) (hash-ref target j #f) (safe-index target (int j))) #f) (if predictions (if (hash? predictions) (hash-ref predictions j #f) (safe-index predictions (int j))) #f)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define sum_feat 0.0)
      (set! j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! sum_feat (let ([__l sum_feat] [__r (if (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (if (hash? (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) 0 #f) (safe-index (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (int 0))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define threshold (/ sum_feat (exact->inexact (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)]))))
      (define left_sum 0.0)
      (define left_count 0)
      (define right_sum 0.0)
      (define right_count 0)
      (set! j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l (if (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (if (hash? (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) 0 #f) (safe-index (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (int 0))) #f)] [__r threshold]) (<= (int __l) (int __r))) (let ()
(set! left_sum (let ([__l left_sum] [__r (if residuals (if (hash? residuals) (hash-ref residuals j #f) (safe-index residuals (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! left_count (let ([__l left_count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! right_sum (let ([__l right_sum] [__r (if residuals (if (hash? residuals) (hash-ref residuals j #f) (safe-index residuals (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! right_count (let ([__l right_count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define left_value 0.0)
      (if (let ([__l left_count] [__r 0]) (> (int __l) (int __r))) (let ()
(set! left_value (/ left_sum (exact->inexact left_count)))
) (void))
      (define right_value 0.0)
      (if (let ([__l right_count] [__r 0]) (> (int __l) (int __r))) (let ()
(set! right_value (/ right_sum (exact->inexact right_count)))
) (void))
      (set! j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l (if (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (if (hash? (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) 0 #f) (safe-index (if features (if (hash? features) (hash-ref features j #f) (safe-index features (int j))) #f) (int 0))) #f)] [__r threshold]) (<= (int __l) (int __r))) (let ()
(set! predictions (list-set predictions (int j) (let ([__l (if predictions (if (hash? predictions) (hash-ref predictions j #f) (safe-index predictions (int j))) #f)] [__r (* learning_rate left_value)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(set! predictions (list-set predictions (int j) (let ([__l (if predictions (if (hash? predictions) (hash-ref predictions j #f) (safe-index predictions (int j))) #f)] [__r (* learning_rate right_value)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! trees (append (or trees (list)) (list (let ([h (make-hash)]) (hash-set! h "threshold" threshold) (hash-set! h "left_value" left_value) (hash-set! h "right_value" right_value) h))))
      (set! est (let ([__l est] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define preds (list))
(define t 0)
(let/ec _break (let loop ()
  (if (let ([__l t] [__r (cond [(not test_features) 0] [(string? test_features) (string-length test_features)] [(hash? test_features) (hash-count test_features)] [else (length test_features)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define pred 0.0)
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not trees) 0] [(string? trees) (string-length trees)] [(hash? trees) (hash-count trees)] [else (length trees)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l (if (if test_features (if (hash? test_features) (hash-ref test_features t #f) (safe-index test_features (int t))) #f) (if (hash? (if test_features (if (hash? test_features) (hash-ref test_features t #f) (safe-index test_features (int t))) #f)) (hash-ref (if test_features (if (hash? test_features) (hash-ref test_features t #f) (safe-index test_features (int t))) #f) 0 #f) (safe-index (if test_features (if (hash? test_features) (hash-ref test_features t #f) (safe-index test_features (int t))) #f) (int 0))) #f)] [__r (if (if trees (if (hash? trees) (hash-ref trees k #f) (safe-index trees (int k))) #f) (hash-ref (if trees (if (hash? trees) (hash-ref trees k #f) (safe-index trees (int k))) #f) "threshold" #f) #f)]) (<= (int __l) (int __r))) (let ()
(set! pred (let ([__l pred] [__r (* learning_rate (if (if trees (if (hash? trees) (hash-ref trees k #f) (safe-index trees (int k))) #f) (hash-ref (if trees (if (hash? trees) (hash-ref trees k #f) (safe-index trees (int k))) #f) "left_value" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! pred (let ([__l pred] [__r (* learning_rate (if (if trees (if (hash? trees) (hash-ref trees k #f) (safe-index trees (int k))) #f) (hash-ref (if trees (if (hash? trees) (hash-ref trees k #f) (safe-index trees (int k))) #f) "right_value" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! preds (append (or preds (list)) (list pred)))
      (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return preds)
))
)
(define (mean_absolute_error y_true y_pred)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not y_true) 0] [(string? y_true) (string-length y_true)] [(hash? y_true) (hash-count y_true)] [else (length y_true)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define diff (- (if y_true (if (hash? y_true) (hash-ref y_true i #f) (safe-index y_true (int i))) #f) (if y_pred (if (hash? y_pred) (hash-ref y_pred i #f) (safe-index y_pred (int i))) #f)))
      (if (let ([__l diff] [__r 0.0]) (< (int __l) (int __r))) (let ()
(set! diff (- diff))
) (void))
      (set! sum (let ([__l sum] [__r diff]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (/ sum (exact->inexact (cond [(not y_true) 0] [(string? y_true) (string-length y_true)] [(hash? y_true) (hash-count y_true)] [else (length y_true)]))))
))
)
(define (mean_squared_error y_true y_pred)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not y_true) 0] [(string? y_true) (string-length y_true)] [(hash? y_true) (hash-count y_true)] [else (length y_true)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define diff (- (if y_true (if (hash? y_true) (hash-ref y_true i #f) (safe-index y_true (int i))) #f) (if y_pred (if (hash? y_pred) (hash-ref y_pred i #f) (safe-index y_pred (int i))) #f)))
      (set! sum (let ([__l sum] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (/ sum (exact->inexact (cond [(not y_true) 0] [(string? y_true) (string-length y_true)] [(hash? y_true) (hash-count y_true)] [else (length y_true)]))))
))
)
(define (main)
  (let/ec _return (begin
(define california (let ([h (make-hash)]) (hash-set! h "data" (list (list 1.0) (list 2.0) (list 3.0) (list 4.0))) (hash-set! h "target" (list 2.0 3.0 4.0 5.0)) h))
(define ds (data_handling california))
(define x_train (if ds (hash-ref ds "data" #f) #f))
(define y_train (if ds (hash-ref ds "target" #f) #f))
(define x_test (list (list 1.5) (list 3.5)))
(define y_test (list 2.5 4.5))
(define predictions (xgboost x_train y_train x_test))
(displayln "Predictions:")
(displayln predictions)
(displayln "Mean Absolute Error:")
(displayln (mean_absolute_error y_test predictions))
(displayln "Mean Square Error:")
(displayln (mean_squared_error y_test predictions))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
