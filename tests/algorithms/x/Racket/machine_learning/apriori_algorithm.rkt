;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (load_data)
  (let/ec _return (begin
(_return (list (list "milk") (list "milk" "butter") (list "milk" "bread") (list "milk" "bread" "chips")))
))
)
(define (contains_string xs s)
  (let/ec _return (begin
(let/ec _break (for ([v xs])
  (let/ec _cont
(if (string=? v s) (let ()
(_return #t)
) (void))
  )))
(_return #f)
))
)
(define (is_subset candidate transaction)
  (let/ec _return (begin
(let/ec _break (for ([it candidate])
  (let/ec _cont
(if (not (contains_string transaction it)) (let ()
(_return #f)
) (void))
  )))
(_return #t)
))
)
(define (lists_equal a b)
  (let/ec _return (begin
(if (not (equal? (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (if (not (string=? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (contains_list itemset item)
  (let/ec _return (begin
(let/ec _break (for ([l itemset])
  (let/ec _cont
(if (lists_equal l item) (let ()
(_return #t)
) (void))
  )))
(_return #f)
))
)
(define (count_list itemset item)
  (let/ec _return (begin
(define c 0)
(let/ec _break (for ([l itemset])
  (let/ec _cont
(if (lists_equal l item) (let ()
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
  )))
(_return c)
))
)
(define (slice_list xs start)
  (let/ec _return (begin
(define res (list))
(define i start)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (set! res (append res (list (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (combinations_lists xs k)
  (let/ec _return (begin
(define result (list))
(if (equal? k 0) (let ()
(set! result (append result (list (list))))
(_return result)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (define head (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))
    (define tail (slice_list xs (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define tail_combos (combinations_lists tail (- k 1)))
    (let/ec _break (for ([combo tail_combos])
  (let/ec _cont
(define new_combo (list))
(set! new_combo (append new_combo (list head)))
(let/ec _break (for ([c combo])
  (let/ec _cont
(set! new_combo (append new_combo (list c)))
  )))
(set! result (append result (list new_combo)))
  )))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (prune itemset candidates length_)
  (let/ec _return (begin
(define pruned (list))
(let/ec _break (for ([candidate candidates])
  (let/ec _cont
(define is_subsequence #t)
(let/ec _break (for ([item candidate])
  (let/ec _cont
(if (or (not (contains_list itemset item)) (< (count_list itemset item) (- length_ 1))) (let ()
(set! is_subsequence #f)
(_break)
) (void))
  )))
(if is_subsequence (let ()
(set! pruned (append pruned (list candidate)))
) (void))
  )))
(_return pruned)
))
)
(define (sort_strings xs)
  (let/ec _return (begin
(define res (list))
(let/ec _break (for ([s xs])
  (let/ec _cont
(set! res (append res (list s)))
  )))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not res) 0] [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)])) (let/ec _cont
    (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j (cond [(not res) 0] [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)])) (let/ec _cont
    (if (string<? (if res (if (hash? res) (hash-ref res j #f) (list-ref res (int j))) #f) (if res (if (hash? res) (hash-ref res i #f) (list-ref res (int i))) #f)) (let ()
(define tmp (if res (if (hash? res) (hash-ref res i #f) (list-ref res (int i))) #f))
(set! res (list-set res (int i) (if res (if (hash? res) (hash-ref res j #f) (list-ref res (int j))) #f)))
(set! res (list-set res (int j) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (itemset_to_string xs)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (if (> i 0) (let ()
(set! s (string-append s ", "))
) (void))
    (set! s (string-append (string-append (string-append s "'") (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f)) "'"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (apriori data min_support)
  (let/ec _return (begin
(define itemset (list))
(let/ec _break (for ([transaction data])
  (let/ec _cont
(define t (list))
(let/ec _break (for ([v transaction])
  (let/ec _cont
(set! t (append t (list v)))
  )))
(set! itemset (append itemset (list t)))
  )))
(define frequent (list))
(define length_ 1)
(let/ec _break (let loop ()
  (if (> (cond [(not itemset) 0] [(string? itemset) (string-length itemset)] [(hash? itemset) (hash-count itemset)] [else (length itemset)]) 0) (let/ec _cont
    (define counts (list))
    (define idx 0)
    (let/ec _break (let loop ()
  (if (< idx (cond [(not itemset) 0] [(string? itemset) (string-length itemset)] [(hash? itemset) (hash-count itemset)] [else (length itemset)])) (let/ec _cont
    (set! counts (append counts (list 0)))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (let/ec _break (for ([transaction data])
  (let/ec _cont
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(not itemset) 0] [(string? itemset) (string-length itemset)] [(hash? itemset) (hash-count itemset)] [else (length itemset)])) (let/ec _cont
    (define candidate (if itemset (if (hash? itemset) (hash-ref itemset j #f) (list-ref itemset (int j))) #f))
    (if (is_subset candidate transaction) (let ()
(set! counts (list-set counts (int j) (let ([__l (if counts (if (hash? counts) (hash-ref counts j #f) (list-ref counts (int j))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
  )))
    (define new_itemset (list))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k (cond [(not itemset) 0] [(string? itemset) (string-length itemset)] [(hash? itemset) (hash-count itemset)] [else (length itemset)])) (let/ec _cont
    (if (>= (if counts (if (hash? counts) (hash-ref counts k #f) (list-ref counts (int k))) #f) min_support) (let ()
(set! new_itemset (append new_itemset (list (if itemset (if (hash? itemset) (hash-ref itemset k #f) (list-ref itemset (int k))) #f))))
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! itemset new_itemset)
    (define m 0)
    (let/ec _break (let loop ()
  (if (< m (cond [(not itemset) 0] [(string? itemset) (string-length itemset)] [(hash? itemset) (hash-count itemset)] [else (length itemset)])) (let/ec _cont
    (define sorted_item (sort_strings (if itemset (if (hash? itemset) (hash-ref itemset m #f) (list-ref itemset (int m))) #f)))
    (set! frequent (append frequent (list (let ([h (make-hash)]) (hash-set! h "items" sorted_item) (hash-set! h "support" (if counts (if (hash? counts) (hash-ref counts m #f) (list-ref counts (int m))) #f)) h))))
    (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! length_ (let ([__l length_] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define combos (combinations_lists itemset length_))
    (set! itemset (prune itemset combos length_))
    (loop)) (void))))
(_return frequent)
))
)
(define frequent_itemsets (apriori (load_data) 2))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(let/ec _break (for ([fi frequent_itemsets])
  (let/ec _cont
(displayln (string-append (string-append (itemset_to_string (if fi (hash-ref fi "items" #f) #f)) ": ") (format "~a" (if fi (hash-ref fi "support" #f) #f))))
  )))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
