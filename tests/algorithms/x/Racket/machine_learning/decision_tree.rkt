;; Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define PI 3.141592653589793)
(define TWO_PI 6.283185307179586)
(define (_mod x m)
  (let/ec _return (begin
(_return (- x (* (exact->inexact (int (/ x m))) m)))
))
)
(define (sin x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) TWO_PI) PI))
(define y2 (* y y))
(define y3 (* y2 y))
(define y5 (* y3 y2))
(define y7 (* y5 y2))
(_return (- (let ([__l (- y (/ y3 6.0))] [__r (/ y5 120.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y7 5040.0)))
))
)
(define seed 123456789)
(define (rand)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* 1103515245 seed)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return (/ (exact->inexact seed) 2147483648.0))
))
)
(define (mean vals)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not vals) 0] [(string? vals) (string-length vals)] [(hash? vals) (hash-count vals)] [else (length vals)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (if vals (if (hash? vals) (hash-ref vals i #f) (safe-index vals (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (/ sum (cond [(not vals) 0] [(string? vals) (string-length vals)] [(hash? vals) (hash-count vals)] [else (length vals)])))
))
)
(define (mean_squared_error labels prediction)
  (let/ec _return (begin
(define total 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not labels) 0] [(string? labels) (string-length labels)] [(hash? labels) (hash-count labels)] [else (length labels)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define diff (- (if labels (if (hash? labels) (hash-ref labels i #f) (safe-index labels (int i))) #f) prediction))
      (set! total (let ([__l total] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (/ total (cond [(not labels) 0] [(string? labels) (string-length labels)] [(hash? labels) (hash-count labels)] [else (length labels)])))
))
)
(define (train_tree x y depth min_leaf_size)
  (let/ec _return (begin
(if (let ([__l (cond [(not x) 0] [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)])] [__r (* 2 min_leaf_size)]) (< (int __l) (int __r))) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "tag" "Leaf") (hash-set! h "prediction" (mean y)) h))
) (void))
(if (equal? depth 1) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "tag" "Leaf") (hash-set! h "prediction" (mean y)) h))
) (void))
(define best_split 0)
(define min_error (* (mean_squared_error x (mean y)) 2.0))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not x) 0] [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l (cond [(not (slice x 0 i)) 0] [(string? (slice x 0 i)) (string-length (slice x 0 i))] [(hash? (slice x 0 i)) (hash-count (slice x 0 i))] [else (length (slice x 0 i))])] [__r min_leaf_size]) (< (int __l) (int __r))) (let ()
(set! i i)
) (let ()
(if (let ([__l (cond [(not (slice x i (length x))) 0] [(string? (slice x i (length x))) (string-length (slice x i (length x)))] [(hash? (slice x i (length x))) (hash-count (slice x i (length x)))] [else (length (slice x i (length x)))])] [__r min_leaf_size]) (< (int __l) (int __r))) (let ()
(set! i i)
) (let ()
(define err_left (mean_squared_error (slice x 0 i) (mean (slice y 0 i))))
(define err_right (mean_squared_error (slice x i (length x)) (mean (slice y i (length y)))))
(define err (let ([__l err_left] [__r err_right]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l err] [__r min_error]) (< (int __l) (int __r))) (let ()
(set! best_split i)
(set! min_error err)
) (void))
))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (not (equal? best_split 0)) (let ()
(define left_x (slice x 0 best_split))
(define left_y (slice y 0 best_split))
(define right_x (slice x best_split (length x)))
(define right_y (slice y best_split (length y)))
(define boundary (if x (if (hash? x) (hash-ref x best_split #f) (safe-index x (int best_split))) #f))
(define left_tree (train_tree left_x left_y (- depth 1) min_leaf_size))
(define right_tree (train_tree right_x right_y (- depth 1) min_leaf_size))
(_return (let ([h (make-hash)]) (hash-set! h "tag" "Branch") (hash-set! h "decision_boundary" boundary) (hash-set! h "left" left_tree) (hash-set! h "right" right_tree) h))
) (void))
(_return (let ([h (make-hash)]) (hash-set! h "tag" "Leaf") (hash-set! h "prediction" (mean y)) h))
))
)
(define (predict tree value)
  (let/ec _return (begin
(_return (if (equal? (if tree (hash-ref tree "tag" #f) #f) "Leaf") (let ([p (if tree (hash-ref tree "prediction" #f) #f)]) p) (if (equal? (if tree (hash-ref tree "tag" #f) #f) "Branch") (let ([b (if tree (hash-ref tree "decision_boundary" #f) #f)] [l (if tree (hash-ref tree "left" #f) #f)] [r (if tree (hash-ref tree "right" #f) #f)]) (if (let ([__l value] [__r b]) (>= (int __l) (int __r))) (predict r value) (predict l value))) #f)))
))
)
(define (main)
  (let/ec _return (begin
(define x (list))
(define v (- 1.0))
(let/ec _break (let loop ()
  (if (let ([__l v] [__r 1.0]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! x (append (or x (list)) (list v)))
      (set! v (let ([__l v] [__r 0.005]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define y (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not x) 0] [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! y (append (or y (list)) (list (sin (if x (if (hash? x) (hash-ref x i #f) (safe-index x (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define tree (train_tree x y 10 10))
(define test_cases (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 10]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! test_cases (append (or test_cases (list)) (list (- (* (rand) 2.0) 1.0))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define predictions (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not test_cases) 0] [(string? test_cases) (string-length test_cases)] [(hash? test_cases) (hash-count test_cases)] [else (length test_cases)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! predictions (append (or predictions (list)) (list (predict tree (if test_cases (if (hash? test_cases) (hash-ref test_cases i #f) (safe-index test_cases (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define sum_err 0.0)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not test_cases) 0] [(string? test_cases) (string-length test_cases)] [(hash? test_cases) (hash-count test_cases)] [else (length test_cases)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define diff (- (if predictions (if (hash? predictions) (hash-ref predictions i #f) (safe-index predictions (int i))) #f) (if test_cases (if (hash? test_cases) (hash-ref test_cases i #f) (safe-index test_cases (int i))) #f)))
      (set! sum_err (let ([__l sum_err] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define avg_error (/ sum_err (cond [(not test_cases) 0] [(string? test_cases) (string-length test_cases)] [(hash? test_cases) (hash-count test_cases)] [else (length test_cases)])))
(displayln (string-append "Test values: " (to-string test_cases)))
(displayln (string-append "Predictions: " (to-string predictions)))
(displayln (string-append "Average error: " (to-string avg_error)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
