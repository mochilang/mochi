;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (get_winner weights sample)
  (let/ec _return (begin
(define d0 0.0)
(define d1 0.0)
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not sample) 0] [(string? sample) (string-length sample)] [(hash? sample) (hash-count sample)] [else (length sample)]))
(define diff0 (- (if sample (if (hash? sample) (hash-ref sample i #f) (list-ref sample (int i))) #f) (if (if weights (if (hash? weights) (hash-ref weights 0 #f) (list-ref weights (int 0))) #f) (if (hash? (if weights (if (hash? weights) (hash-ref weights 0 #f) (list-ref weights (int 0))) #f)) (hash-ref (if weights (if (hash? weights) (hash-ref weights 0 #f) (list-ref weights (int 0))) #f) i #f) (list-ref (if weights (if (hash? weights) (hash-ref weights 0 #f) (list-ref weights (int 0))) #f) (int i))) #f)))
(define diff1 (- (if sample (if (hash? sample) (hash-ref sample i #f) (list-ref sample (int i))) #f) (if (if weights (if (hash? weights) (hash-ref weights 1 #f) (list-ref weights (int 1))) #f) (if (hash? (if weights (if (hash? weights) (hash-ref weights 1 #f) (list-ref weights (int 1))) #f)) (hash-ref (if weights (if (hash? weights) (hash-ref weights 1 #f) (list-ref weights (int 1))) #f) i #f) (list-ref (if weights (if (hash? weights) (hash-ref weights 1 #f) (list-ref weights (int 1))) #f) (int i))) #f)))
(set! d0 (let ([__l d0] [__r (* diff0 diff0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! d1 (let ([__l d1] [__r (* diff1 diff1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (if (> d0 d1) 0 1))
      (set! i (+ i 1))
      (loop)))
))
(_return 0)
))
)
(define (update weights sample j alpha)
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not weights) 0] [(string? weights) (string-length weights)] [(hash? weights) (hash-count weights)] [else (length weights)]))
(set! weights (list-set weights j (list-set (list-ref weights j) i (let ([__l (if (if weights (if (hash? weights) (hash-ref weights j #f) (list-ref weights (int j))) #f) (if (hash? (if weights (if (hash? weights) (hash-ref weights j #f) (list-ref weights (int j))) #f)) (hash-ref (if weights (if (hash? weights) (hash-ref weights j #f) (list-ref weights (int j))) #f) i #f) (list-ref (if weights (if (hash? weights) (hash-ref weights j #f) (list-ref weights (int j))) #f) (int i))) #f)] [__r (* alpha (- (if sample (if (hash? sample) (hash-ref sample i #f) (list-ref sample (int i))) #f) (if (if weights (if (hash? weights) (hash-ref weights j #f) (list-ref weights (int j))) #f) (if (hash? (if weights (if (hash? weights) (hash-ref weights j #f) (list-ref weights (int j))) #f)) (hash-ref (if weights (if (hash? weights) (hash-ref weights j #f) (list-ref weights (int j))) #f) i #f) (list-ref (if weights (if (hash? weights) (hash-ref weights j #f) (list-ref weights (int j))) #f) (int i))) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! i (+ i 1))
      (loop)))
))
(_return weights)
))
)
(define (list_to_string xs)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (set! s (string-append s (format "~a" (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))))
    (if (< i (- (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let ()
(set! s (string-append s ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (matrix_to_string m)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (set! s (string-append s (list_to_string (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))))
    (if (< i (- (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]) 1)) (let ()
(set! s (string-append s ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define training_samples (list (list 1 1 0 0) (list 0 0 0 1) (list 1 0 0 0) (list 0 0 1 1)))
(define weights (list (list 0.2 0.6 0.5 0.9) (list 0.8 0.4 0.7 0.3)))
(define epochs 3)
(define alpha 0.5)
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ epochs)
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j (cond [(not training_samples) 0] [(string? training_samples) (string-length training_samples)] [(hash? training_samples) (hash-count training_samples)] [else (length training_samples)]))
(define sample (if training_samples (if (hash? training_samples) (hash-ref training_samples j #f) (list-ref training_samples (int j))) #f))
(define winner (get_winner weights sample))
(set! weights (update weights sample winner alpha))
      (set! j (+ j 1))
      (loop)))
))
      (set! _ (+ _ 1))
      (loop)))
))
(define sample (list 0 0 0 1))
(define winner (get_winner weights sample))
(displayln (string-append "Clusters that the test sample belongs to : " (format "~a" winner)))
(displayln (string-append "Weights that have been trained : " (matrix_to_string weights)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
