;; Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (int_to_float x)
  (let/ec _return (begin
(_return (* x 1.0))
))
)
(define (abs_float x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0.0]) (< (int __l) (int __r))) (let ()
(_return (- 0.0 x))
) (void))
(_return x)
))
)
(define (exp_approx x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 10]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! term (/ (* term x) (int_to_float i)))
      (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (floor_int x)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l (int_to_float (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))] [__r x]) (<= (int __l) (int __r))) (begin
    (let/ec _cont
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return i)
))
)
(define (dot a b)
  (let/ec _return (begin
(define s 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! s (let ([__l s] [__r (* (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return s)
))
)
(define (transpose m)
  (let/ec _return (begin
(define rows (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]))
(define cols (cond [(not (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f)) (string-length (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f))] [(hash? (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f)) (hash-count (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f))] [else (length (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f))]))
(define res (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r cols]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define row (list))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r rows]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (if (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) j #f) (safe-index (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) (int j))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! res (append (or res (list)) (list row)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (matmul a b)
  (let/ec _return (begin
(define n (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define m (cond [(not (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) 0] [(string? (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) (string-length (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))] [(hash? (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) (hash-count (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))] [else (length (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))]))
(define p (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r m]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define s 0.0)
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r p]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! s (let ([__l s] [__r (* (if (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) k #f) (safe-index (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (int k))) #f) (if (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) (if (hash? (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) j #f) (safe-index (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! row (append (or row (list)) (list s)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! res (append (or res (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (matvec a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (dot (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) b))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (identity n)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (if (equal? i j) 1.0 0.0))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! res (append (or res (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (invert mat)
  (let/ec _return (begin
(define n (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)]))
(define a mat)
(define inv (identity n))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define pivot (if (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) i #f) (safe-index (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (int i))) #f))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! a (list-set a i (list-set (list-ref a i) j (/ (if (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) j #f) (safe-index (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (int j))) #f) pivot))))
      (set! inv (list-set inv i (list-set (list-ref inv i) j (/ (if (if inv (if (hash? inv) (hash-ref inv i #f) (safe-index inv (int i))) #f) (if (hash? (if inv (if (hash? inv) (hash-ref inv i #f) (safe-index inv (int i))) #f)) (hash-ref (if inv (if (hash? inv) (hash-ref inv i #f) (safe-index inv (int i))) #f) j #f) (safe-index (if inv (if (hash? inv) (hash-ref inv i #f) (safe-index inv (int i))) #f) (int j))) #f) pivot))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (not (equal? k i)) (let ()
(define factor (if (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (if (hash? (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) i #f) (safe-index (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (int i))) #f))
(set! j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! a (list-set a k (list-set (list-ref a k) j (- (if (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (if (hash? (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) j #f) (safe-index (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (int j))) #f) (* factor (if (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) j #f) (safe-index (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (int j))) #f))))))
      (set! inv (list-set inv k (list-set (list-ref inv k) j (- (if (if inv (if (hash? inv) (hash-ref inv k #f) (safe-index inv (int k))) #f) (if (hash? (if inv (if (hash? inv) (hash-ref inv k #f) (safe-index inv (int k))) #f)) (hash-ref (if inv (if (hash? inv) (hash-ref inv k #f) (safe-index inv (int k))) #f) j #f) (safe-index (if inv (if (hash? inv) (hash-ref inv k #f) (safe-index inv (int k))) #f) (int j))) #f) (* factor (if (if inv (if (hash? inv) (hash-ref inv i #f) (safe-index inv (int i))) #f) (if (hash? (if inv (if (hash? inv) (hash-ref inv i #f) (safe-index inv (int i))) #f)) (hash-ref (if inv (if (hash? inv) (hash-ref inv i #f) (safe-index inv (int i))) #f) j #f) (safe-index (if inv (if (hash? inv) (hash-ref inv i #f) (safe-index inv (int i))) #f) (int j))) #f))))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return inv)
))
)
(define (normal_equation X y)
  (let/ec _return (begin
(define Xt (transpose X))
(define XtX (matmul Xt X))
(define XtX_inv (invert XtX))
(define Xty (matvec Xt y))
(_return (matvec XtX_inv Xty))
))
)
(define (linear_regression_prediction train_dt train_usr train_mtch test_dt test_mtch)
  (let/ec _return (begin
(define X (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not train_dt) 0] [(string? train_dt) (string-length train_dt)] [(hash? train_dt) (hash-count train_dt)] [else (length train_dt)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! X (append (or X (list)) (list (list 1.0 (if train_dt (if (hash? train_dt) (hash-ref train_dt i #f) (safe-index train_dt (int i))) #f) (if train_mtch (if (hash? train_mtch) (hash-ref train_mtch i #f) (safe-index train_mtch (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define beta (normal_equation X train_usr))
(_return (abs_float (let ([__l (let ([__l (if beta (if (hash? beta) (hash-ref beta 0 #f) (safe-index beta (int 0))) #f)] [__r (* (if test_dt (if (hash? test_dt) (hash-ref test_dt 0 #f) (safe-index test_dt (int 0))) #f) (if beta (if (hash? beta) (hash-ref beta 1 #f) (safe-index beta (int 1))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (if test_mtch (if (hash? test_mtch) (hash-ref test_mtch 0 #f) (safe-index test_mtch (int 0))) #f) (if beta (if (hash? beta) (hash-ref beta 2 #f) (safe-index beta (int 2))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (sarimax_predictor train_user train_match test_match)
  (let/ec _return (begin
(define n (cond [(not train_user) 0] [(string? train_user) (string-length train_user)] [(hash? train_user) (hash-count train_user)] [else (length train_user)]))
(define X (list))
(define y (list))
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! X (append (or X (list)) (list (list 1.0 (if train_user (if (hash? train_user) (hash-ref train_user (- i 1) #f) (safe-index train_user (int (- i 1)))) #f) (if train_match (if (hash? train_match) (hash-ref train_match i #f) (safe-index train_match (int i))) #f)))))
      (set! y (append (or y (list)) (list (if train_user (if (hash? train_user) (hash-ref train_user i #f) (safe-index train_user (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define beta (normal_equation X y))
(_return (let ([__l (let ([__l (if beta (if (hash? beta) (hash-ref beta 0 #f) (safe-index beta (int 0))) #f)] [__r (* (if beta (if (hash? beta) (hash-ref beta 1 #f) (safe-index beta (int 1))) #f) (if train_user (if (hash? train_user) (hash-ref train_user (- n 1) #f) (safe-index train_user (int (- n 1)))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (if beta (if (hash? beta) (hash-ref beta 2 #f) (safe-index beta (int 2))) #f) (if test_match (if (hash? test_match) (hash-ref test_match 0 #f) (safe-index test_match (int 0))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (rbf_kernel a b gamma)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define diff (- (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f)))
      (set! sum (let ([__l sum] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (exp_approx (* (- gamma) sum)))
))
)
(define (support_vector_regressor x_train x_test train_user)
  (let/ec _return (begin
(define gamma 0.1)
(define weights (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not x_train) 0] [(string? x_train) (string-length x_train)] [(hash? x_train) (hash-count x_train)] [else (length x_train)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! weights (append (or weights (list)) (list (rbf_kernel (if x_train (if (hash? x_train) (hash-ref x_train i #f) (safe-index x_train (int i))) #f) (if x_test (if (hash? x_test) (hash-ref x_test 0 #f) (safe-index x_test (int 0))) #f) gamma))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define num 0.0)
(define den 0.0)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not train_user) 0] [(string? train_user) (string-length train_user)] [(hash? train_user) (hash-count train_user)] [else (length train_user)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! num (let ([__l num] [__r (* (if weights (if (hash? weights) (hash-ref weights i #f) (safe-index weights (int i))) #f) (if train_user (if (hash? train_user) (hash-ref train_user i #f) (safe-index train_user (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! den (let ([__l den] [__r (if weights (if (hash? weights) (hash-ref weights i #f) (safe-index weights (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (/ num den))
))
)
(define (set_at_float xs idx value)
  (let/ec _return (begin
(define i 0)
(define res (list))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (equal? i idx) (let ()
(set! res (append (or res (list)) (list value)))
) (let ()
(set! res (append (or res (list)) (list (if xs (if (hash? xs) (hash-ref xs i #f) (safe-index xs (int i))) #f))))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (sort_float xs)
  (let/ec _return (begin
(define res xs)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not res) 0] [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define key (if res (if (hash? res) (hash-ref res i #f) (safe-index res (int i))) #f))
      (define j (- i 1))
      (let/ec _break (let loop ()
  (if (and (let ([__l j] [__r 0]) (>= (int __l) (int __r))) (let ([__l (if res (if (hash? res) (hash-ref res j #f) (safe-index res (int j))) #f)] [__r key]) (> (int __l) (int __r)))) (begin
    (let/ec _cont
      (set! res (set_at_float res (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (if res (if (hash? res) (hash-ref res j #f) (safe-index res (int j))) #f)))
      (set! j (- j 1))
    )
    (loop)) (void))))
      (set! res (set_at_float res (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) key))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (percentile data q)
  (let/ec _return (begin
(define sorted (sort_float data))
(define n (cond [(not sorted) 0] [(string? sorted) (string-length sorted)] [(hash? sorted) (hash-count sorted)] [else (length sorted)]))
(define pos (* (/ q 100.0) (int_to_float (- n 1))))
(define idx (floor_int pos))
(define frac (- pos (int_to_float idx)))
(if (let ([__l (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r n]) (< (int __l) (int __r))) (let ()
(_return (let ([__l (* (if sorted (if (hash? sorted) (hash-ref sorted idx #f) (safe-index sorted (int idx))) #f) (- 1.0 frac))] [__r (* (if sorted (if (hash? sorted) (hash-ref sorted (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index sorted (int (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) frac)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return (if sorted (if (hash? sorted) (hash-ref sorted idx #f) (safe-index sorted (int idx))) #f))
))
)
(define (interquartile_range_checker train_user)
  (let/ec _return (begin
(define q1 (percentile train_user 25.0))
(define q3 (percentile train_user 75.0))
(define iqr (- q3 q1))
(_return (- q1 (* iqr 0.1)))
))
)
(define (data_safety_checker list_vote actual_result)
  (let/ec _return (begin
(define safe 0)
(define not_safe 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not list_vote) 0] [(string? list_vote) (string-length list_vote)] [(hash? list_vote) (hash-count list_vote)] [else (length list_vote)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define v (if list_vote (if (hash? list_vote) (hash-ref list_vote i #f) (safe-index list_vote (int i))) #f))
      (if (let ([__l v] [__r actual_result]) (> (int __l) (int __r))) (let ()
(set! safe (let ([__l not_safe] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (let ([__l (abs_float (- (abs_float v) (abs_float actual_result)))] [__r 0.1]) (<= (int __l) (int __r))) (let ()
(set! safe (let ([__l safe] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! not_safe (let ([__l not_safe] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([__l safe] [__r not_safe]) (> (int __l) (int __r))))
))
)
(define (main)
  (let/ec _return (begin
(define vote (list (linear_regression_prediction (list 2.0 3.0 4.0 5.0) (list 5.0 3.0 4.0 6.0) (list 3.0 1.0 2.0 4.0) (list 2.0) (list 2.0)) (sarimax_predictor (list 4.0 2.0 6.0 8.0) (list 3.0 1.0 2.0 4.0) (list 2.0)) (support_vector_regressor (list (list 5.0 2.0) (list 1.0 5.0) (list 6.0 2.0)) (list (list 3.0 2.0)) (list 2.0 1.0 4.0))))
(displayln (if vote (if (hash? vote) (hash-ref vote 0 #f) (safe-index vote (int 0))) #f))
(displayln (if vote (if (hash? vote) (hash-ref vote 1 #f) (safe-index vote (int 1))) #f))
(displayln (if vote (if (hash? vote) (hash-ref vote 2 #f) (safe-index vote (int 2))) #f))
(displayln (data_safety_checker vote 5.0))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
