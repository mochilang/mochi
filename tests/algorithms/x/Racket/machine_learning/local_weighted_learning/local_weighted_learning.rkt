;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (expApprox x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (/ 1.0 (expApprox (- x))))
) (void))
(if (> x 1.0) (let ()
(define half (expApprox (/ x 2.0)))
(_return (* half half))
) (void))
(define sum 1.0)
(define term 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (< n 20) (let/ec _cont
    (set! term (/ (* term x) (exact->inexact n)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (transpose mat)
  (let/ec _return (begin
(define rows (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)]))
(define cols (cond [(not (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) 0] [(string? (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i cols) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j rows) (let/ec _cont
    (set! row (append row (list (if (if mat (if (hash? mat) (hash-ref mat j #f) (list-ref mat (int j))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat j #f) (list-ref mat (int j))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat j #f) (list-ref mat (int j))) #f) i #f) (list-ref (if mat (if (hash? mat) (hash-ref mat j #f) (list-ref mat (int j))) #f) (int i))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matMul a b)
  (let/ec _return (begin
(define a_rows (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define a_cols (cond [(not (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) 0] [(string? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (string-length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [(hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-count (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [else (length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))]))
(define b_cols (cond [(not (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) 0] [(string? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (string-length (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f))] [(hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-count (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f))] [else (length (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f))]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i a_rows) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j b_cols) (let/ec _cont
    (define sum 0.0)
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k a_cols) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) k #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int k))) #f) (if (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) (if (hash? (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) j #f) (list-ref (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row (append row (list sum)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matInv mat)
  (let/ec _return (begin
(define n (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)]))
(define aug (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! row (append row (list (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (if (equal? i j) (let ()
(set! row (append row (list 1.0)))
) (let ()
(set! row (append row (list 0.0)))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! aug (append aug (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define col 0)
(let/ec _break (let loop ()
  (if (< col n) (let/ec _cont
    (define pivot (if (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f) (if (hash? (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f)) (hash-ref (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f) col #f) (list-ref (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f) (int col))) #f))
    (if (equal? pivot 0.0) (let ()
(panic "Matrix is singular")
) (void))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (* 2 n)) (let/ec _cont
    (set! aug (list-set aug col (list-set (list-ref aug col) j (/ (if (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f) (if (hash? (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f)) (hash-ref (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f) j #f) (list-ref (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f) (int j))) #f) pivot))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define r 0)
    (let/ec _break (let loop ()
  (if (< r n) (let/ec _cont
    (if (not (equal? r col)) (let ()
(define factor (if (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f) (if (hash? (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f)) (hash-ref (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f) col #f) (list-ref (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f) (int col))) #f))
(set! j 0)
(let/ec _break (let loop ()
  (if (< j (* 2 n)) (let/ec _cont
    (set! aug (list-set aug r (list-set (list-ref aug r) j (- (if (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f) (if (hash? (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f)) (hash-ref (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f) j #f) (list-ref (if aug (if (hash? aug) (hash-ref aug r #f) (list-ref aug (int r))) #f) (int j))) #f) (* factor (if (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f) (if (hash? (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f)) (hash-ref (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f) j #f) (list-ref (if aug (if (hash? aug) (hash-ref aug col #f) (list-ref aug (int col))) #f) (int j))) #f))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define inv (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! row (append row (list (if (if aug (if (hash? aug) (hash-ref aug i #f) (list-ref aug (int i))) #f) (if (hash? (if aug (if (hash? aug) (hash-ref aug i #f) (list-ref aug (int i))) #f)) (hash-ref (if aug (if (hash? aug) (hash-ref aug i #f) (list-ref aug (int i))) #f) (let ([__l j] [__r n]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if aug (if (hash? aug) (hash-ref aug i #f) (list-ref aug (int i))) #f) (int (let ([__l j] [__r n]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! inv (append inv (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return inv)
))
)
(define (weight_matrix point x_train tau)
  (let/ec _return (begin
(define m (cond [(not x_train) 0] [(string? x_train) (string-length x_train)] [(hash? x_train) (hash-count x_train)] [else (length x_train)]))
(define weights (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i m) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j m) (let/ec _cont
    (if (equal? i j) (let ()
(set! row (append row (list 1.0)))
) (let ()
(set! row (append row (list 0.0)))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! weights (append weights (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j m) (let/ec _cont
    (define diff_sq 0.0)
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k (cond [(not point) 0] [(string? point) (string-length point)] [(hash? point) (hash-count point)] [else (length point)])) (let/ec _cont
    (define diff (- (if point (if (hash? point) (hash-ref point k #f) (list-ref point (int k))) #f) (if (if x_train (if (hash? x_train) (hash-ref x_train j #f) (list-ref x_train (int j))) #f) (if (hash? (if x_train (if (hash? x_train) (hash-ref x_train j #f) (list-ref x_train (int j))) #f)) (hash-ref (if x_train (if (hash? x_train) (hash-ref x_train j #f) (list-ref x_train (int j))) #f) k #f) (list-ref (if x_train (if (hash? x_train) (hash-ref x_train j #f) (list-ref x_train (int j))) #f) (int k))) #f)))
    (set! diff_sq (let ([__l diff_sq] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! weights (list-set weights j (list-set (list-ref weights j) j (expApprox (/ (- diff_sq) (* (* 2.0 tau) tau))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return weights)
))
)
(define (local_weight point x_train y_train tau)
  (let/ec _return (begin
(define w (weight_matrix point x_train tau))
(define x_t (transpose x_train))
(define x_t_w (matMul x_t w))
(define x_t_w_x (matMul x_t_w x_train))
(define inv_part (matInv x_t_w_x))
(define y_col (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not y_train) 0] [(string? y_train) (string-length y_train)] [(hash? y_train) (hash-count y_train)] [else (length y_train)])) (let/ec _cont
    (set! y_col (append y_col (list (list (if y_train (if (hash? y_train) (hash-ref y_train i #f) (list-ref y_train (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define x_t_w_y (matMul x_t_w y_col))
(_return (matMul inv_part x_t_w_y))
))
)
(define (local_weight_regression x_train y_train tau)
  (let/ec _return (begin
(define m (cond [(not x_train) 0] [(string? x_train) (string-length x_train)] [(hash? x_train) (hash-count x_train)] [else (length x_train)]))
(define preds (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i m) (let/ec _cont
    (define theta (local_weight (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f) x_train y_train tau))
    (define weights_vec (list))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k (cond [(not theta) 0] [(string? theta) (string-length theta)] [(hash? theta) (hash-count theta)] [else (length theta)])) (let/ec _cont
    (set! weights_vec (append weights_vec (list (if (if theta (if (hash? theta) (hash-ref theta k #f) (list-ref theta (int k))) #f) (if (hash? (if theta (if (hash? theta) (hash-ref theta k #f) (list-ref theta (int k))) #f)) (hash-ref (if theta (if (hash? theta) (hash-ref theta k #f) (list-ref theta (int k))) #f) 0 #f) (list-ref (if theta (if (hash? theta) (hash-ref theta k #f) (list-ref theta (int k))) #f) (int 0))) #f))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define pred 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f)) 0] [(string? (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f)) (string-length (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f))] [(hash? (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f)) (hash-count (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f))] [else (length (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f))])) (let/ec _cont
    (set! pred (let ([__l pred] [__r (* (if (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f) (if (hash? (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f)) (hash-ref (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f) j #f) (list-ref (if x_train (if (hash? x_train) (hash-ref x_train i #f) (list-ref x_train (int i))) #f) (int j))) #f) (if weights_vec (if (hash? weights_vec) (hash-ref weights_vec j #f) (list-ref weights_vec (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! preds (append preds (list pred)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return preds)
))
)
(define x_train (list (list 16.99 10.34) (list 21.01 23.68) (list 24.59 25.69)))
(define y_train (list 1.01 1.66 3.5))
(define preds (local_weight_regression x_train y_train 0.6))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (jsexpr->string preds))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
