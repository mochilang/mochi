;; Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (exp_approx x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 10]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! term (/ (* term x) (exact->inexact i)))
      (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (signf x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0.0]) (>= (int __l) (int __r))) (let ()
(_return 1.0)
) (void))
(_return (- 1.0))
))
)
(define (gradient target preds)
  (let/ec _return (begin
(define n (cond [(not target) 0] [(string? target) (string-length target)] [(hash? target) (hash-count target)] [else (length target)]))
(define residuals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define t (if target (if (hash? target) (hash-ref target i #f) (safe-index target (int i))) #f))
      (define y (if preds (if (hash? preds) (hash-ref preds i #f) (safe-index preds (int i))) #f))
      (define exp_val (exp_approx (* t y)))
      (define res (/ (- t) (let ([__l 1.0] [__r exp_val]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! residuals (append (or residuals (list)) (list res)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return residuals)
))
)
(define (predict_raw models features learning_rate)
  (let/ec _return (begin
(define n (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)]))
(define preds (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! preds (append (or preds (list)) (list 0.0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define m 0)
(let/ec _break (let loop ()
  (if (let ([__l m] [__r (cond [(not models) 0] [(string? models) (string-length models)] [(hash? models) (hash-count models)] [else (length models)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define stump (if models (if (hash? models) (hash-ref models m #f) (safe-index models (int m))) #f))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define value (if (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) (if (hash? (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) (if stump (hash-ref stump "feature" #f) #f) #f) (safe-index (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) (int (if stump (hash-ref stump "feature" #f) #f)))) #f))
      (if (let ([__l value] [__r (if stump (hash-ref stump "threshold" #f) #f)]) (<= (int __l) (int __r))) (let ()
(set! preds (list-set preds (int i) (let ([__l (if preds (if (hash? preds) (hash-ref preds i #f) (safe-index preds (int i))) #f)] [__r (* learning_rate (if stump (hash-ref stump "left" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(set! preds (list-set preds (int i) (let ([__l (if preds (if (hash? preds) (hash-ref preds i #f) (safe-index preds (int i))) #f)] [__r (* learning_rate (if stump (hash-ref stump "right" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return preds)
))
)
(define (predict models features learning_rate)
  (let/ec _return (begin
(define raw (predict_raw models features learning_rate))
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not raw) 0] [(string? raw) (string-length raw)] [(hash? raw) (hash-count raw)] [else (length raw)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! result (append (or result (list)) (list (signf (if raw (if (hash? raw) (hash-ref raw i #f) (safe-index raw (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (train_stump features residuals)
  (let/ec _return (begin
(define n_samples (cond [(not features) 0] [(string? features) (string-length features)] [(hash? features) (hash-count features)] [else (length features)]))
(define n_features (cond [(not (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f)) 0] [(string? (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f)) (string-length (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f))] [(hash? (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f)) (hash-count (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f))] [else (length (if features (if (hash? features) (hash-ref features 0 #f) (safe-index features (int 0))) #f))]))
(define best_feature 0)
(define best_threshold 0.0)
(define best_error 1000000000.0)
(define best_left 0.0)
(define best_right 0.0)
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r n_features]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define t_index 0)
      (let/ec _break (let loop ()
  (if (let ([__l t_index] [__r n_samples]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define t (if (if features (if (hash? features) (hash-ref features t_index #f) (safe-index features (int t_index))) #f) (if (hash? (if features (if (hash? features) (hash-ref features t_index #f) (safe-index features (int t_index))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features t_index #f) (safe-index features (int t_index))) #f) j #f) (safe-index (if features (if (hash? features) (hash-ref features t_index #f) (safe-index features (int t_index))) #f) (int j))) #f))
      (define sum_left 0.0)
      (define count_left 0)
      (define sum_right 0.0)
      (define count_right 0)
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r n_samples]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l (if (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) (if (hash? (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) j #f) (safe-index (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) (int j))) #f)] [__r t]) (<= (int __l) (int __r))) (let ()
(set! sum_left (let ([__l sum_left] [__r (if residuals (if (hash? residuals) (hash-ref residuals i #f) (safe-index residuals (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! count_left (let ([__l count_left] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! sum_right (let ([__l sum_right] [__r (if residuals (if (hash? residuals) (hash-ref residuals i #f) (safe-index residuals (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! count_right (let ([__l count_right] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define left_val 0.0)
      (if (not (equal? count_left 0)) (let ()
(set! left_val (/ sum_left (exact->inexact count_left)))
) (void))
      (define right_val 0.0)
      (if (not (equal? count_right 0)) (let ()
(set! right_val (/ sum_right (exact->inexact count_right)))
) (void))
      (define error 0.0)
      (set! i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r n_samples]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define pred (if (let ([__l (if (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) (if (hash? (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f)) (hash-ref (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) j #f) (safe-index (if features (if (hash? features) (hash-ref features i #f) (safe-index features (int i))) #f) (int j))) #f)] [__r t]) (<= (int __l) (int __r))) left_val right_val))
      (define diff (- (if residuals (if (hash? residuals) (hash-ref residuals i #f) (safe-index residuals (int i))) #f) pred))
      (set! error (let ([__l error] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (let ([__l error] [__r best_error]) (< (int __l) (int __r))) (let ()
(set! best_error error)
(set! best_feature j)
(set! best_threshold t)
(set! best_left left_val)
(set! best_right right_val)
) (void))
      (set! t_index (let ([__l t_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "feature" best_feature) (hash-set! h "threshold" best_threshold) (hash-set! h "left" best_left) (hash-set! h "right" best_right) h))
))
)
(define (fit n_estimators learning_rate features target)
  (let/ec _return (begin
(define models (list))
(define m 0)
(let/ec _break (let loop ()
  (if (let ([__l m] [__r n_estimators]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define preds (predict_raw models features learning_rate))
      (define grad (gradient target preds))
      (define residuals (list))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not grad) 0] [(string? grad) (string-length grad)] [(hash? grad) (hash-count grad)] [else (length grad)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! residuals (append (or residuals (list)) (list (- (if grad (if (hash? grad) (hash-ref grad i #f) (safe-index grad (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define stump (train_stump features residuals))
      (set! models (append (or models (list)) (list stump)))
      (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return models)
))
)
(define (accuracy preds target)
  (let/ec _return (begin
(define n (cond [(not target) 0] [(string? target) (string-length target)] [(hash? target) (hash-count target)] [else (length target)]))
(define correct 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (equal? (if preds (if (hash? preds) (hash-ref preds i #f) (safe-index preds (int i))) #f) (if target (if (hash? target) (hash-ref target i #f) (safe-index target (int i))) #f)) (let ()
(set! correct (let ([__l correct] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (/ (exact->inexact correct) (exact->inexact n)))
))
)
(define features (list (list 1.0) (list 2.0) (list 3.0) (list 4.0)))
(define target (list (- 1.0) (- 1.0) 1.0 1.0))
(define models (fit 5 0.5 features target))
(define predictions (predict models features 0.5))
(define acc (accuracy predictions target))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (string-append "Accuracy: " (to-string acc)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
