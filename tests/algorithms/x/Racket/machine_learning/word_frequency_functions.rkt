;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define LOWER "abcdefghijklmnopqrstuvwxyz")
(define UPPER "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define PUNCT "!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~")
(define (to_lowercase s)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define c (substring s i (+ i 1)))
    (define j 0)
    (define found #f)
    (let/ec _break (let loop ()
  (if (< j (cond [(not UPPER) 0] [(string? UPPER) (string-length UPPER)] [(hash? UPPER) (hash-count UPPER)] [else (length UPPER)])) (let/ec _cont
    (if (string=? c (substring UPPER j (+ j 1))) (let ()
(set! res (string-append res (substring LOWER j (+ j 1))))
(set! found #t)
(_break)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not found) (let ()
(set! res (string-append res c))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (is_punct c)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not PUNCT) 0] [(string? PUNCT) (string-length PUNCT)] [(hash? PUNCT) (hash-count PUNCT)] [else (length PUNCT)])) (let/ec _cont
    (if (string=? c (substring PUNCT i (+ i 1))) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (clean_text text keep_newlines)
  (let/ec _return (begin
(define lower_ (to_lowercase text))
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not lower_) 0] [(string? lower_) (string-length lower_)] [(hash? lower_) (hash-count lower_)] [else (length lower_)])) (let/ec _cont
    (define ch (substring lower_ i (+ i 1)))
    (if (is_punct ch) (void) (let ()
(if (string=? ch "\n") (let ()
(if keep_newlines (let ()
(set! res (string-append res "\n"))
) (void))
) (let ()
(set! res (string-append res ch))
))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (split s sep)
  (let/ec _return (begin
(define res (list))
(define current "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define ch (substring s i (+ i 1)))
    (if (string=? ch sep) (let ()
(set! res (append res (list current)))
(set! current "")
) (let ()
(set! current (string-append current ch))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! res (append res (list current)))
(_return res)
))
)
(define (contains s sub)
  (let/ec _return (begin
(define n (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(define m (cond [(not sub) 0] [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)]))
(if (equal? m 0) (let ()
(_return #t)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (- n m)) (let/ec _cont
    (define j 0)
    (define is_match #t)
    (let/ec _break (let loop ()
  (if (< j m) (let/ec _cont
    (if (not (string=? (substring s (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (+ (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1)) (substring sub j (+ j 1)))) (let ()
(set! is_match #f)
(_break)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if is_match (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (floor x)
  (let/ec _return (begin
(define i (int x))
(if (> (exact->inexact i) x) (let ()
(set! i (- i 1))
) (void))
(_return (exact->inexact i))
))
)
(define (round3 x)
  (let/ec _return (begin
(_return (/ (floor (let ([__l (* x 1000.0)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 1000.0))
))
)
(define (ln x)
  (let/ec _return (begin
(define t (/ (- x 1.0) (let ([__l x] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define term t)
(define sum 0.0)
(define k 1)
(let/ec _break (let loop ()
  (if (<= k 99) (let/ec _cont
    (set! sum (let ([__l sum] [__r (/ term (exact->inexact k))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! term (* (* term t) t))
    (set! k (let ([__l k] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (* 2.0 sum))
))
)
(define (log10 x)
  (let/ec _return (begin
(_return (/ (ln x) (ln 10.0)))
))
)
(define (term_frequency term document)
  (let/ec _return (begin
(define clean (clean_text document #f))
(define tokens (split clean " "))
(define t (to_lowercase term))
(define count 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not tokens) 0] [(string? tokens) (string-length tokens)] [(hash? tokens) (hash-count tokens)] [else (length tokens)])) (let/ec _cont
    (if (and (not (string=? (if tokens (if (hash? tokens) (hash-ref tokens i #f) (list-ref tokens (int i))) #f) "")) (string=? (if tokens (if (hash? tokens) (hash-ref tokens i #f) (list-ref tokens (int i))) #f) t)) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return count)
))
)
(define (document_frequency term corpus)
  (let/ec _return (begin
(define clean (clean_text corpus #t))
(define docs (split clean "\n"))
(define t (to_lowercase term))
(define matches 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not docs) 0] [(string? docs) (string-length docs)] [(hash? docs) (hash-count docs)] [else (length docs)])) (let/ec _cont
    (if (contains (if docs (if (hash? docs) (hash-ref docs i #f) (list-ref docs (int i))) #f) t) (let ()
(set! matches (let ([__l matches] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list matches (cond [(not docs) 0] [(string? docs) (string-length docs)] [(hash? docs) (hash-count docs)] [else (length docs)])))
))
)
(define (inverse_document_frequency df n smoothing)
  (let/ec _return (begin
(if smoothing (let ()
(if (equal? n 0) (let ()
(panic "log10(0) is undefined.")
) (void))
(define ratio (/ (exact->inexact n) (let ([__l 1.0] [__r (exact->inexact df)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define l (log10 ratio))
(define result (round3 (let ([__l 1.0] [__r l]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(displayln result)
(_return result)
) (void))
(if (equal? df 0) (let ()
(panic "df must be > 0")
) (void))
(if (equal? n 0) (let ()
(panic "log10(0) is undefined.")
) (void))
(define ratio (/ (exact->inexact n) (exact->inexact df)))
(define l (log10 ratio))
(define result (round3 l))
(displayln result)
(_return result)
))
)
(define (tf_idf tf idf)
  (let/ec _return (begin
(define prod (* (exact->inexact tf) idf))
(define result (round3 prod))
(displayln result)
(_return result)
))
)
(define corpus "This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus.")
(define idf_val (inverse_document_frequency 1 3 #f))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (term_frequency "to" "To be, or not to be"))
(displayln (format "~a" (document_frequency "first" corpus)))
(tf_idf 2 idf_val)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
