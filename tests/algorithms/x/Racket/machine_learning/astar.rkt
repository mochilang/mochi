;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (get_neighbours p x_limit y_limit)
  (let/ec _return (begin
(define deltas (list (let ([h (make-hash)]) (hash-set! h "x" (- 0 1)) (hash-set! h "y" (- 0 1)) h) (let ([h (make-hash)]) (hash-set! h "x" (- 0 1)) (hash-set! h "y" 0) h) (let ([h (make-hash)]) (hash-set! h "x" (- 0 1)) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 0) (hash-set! h "y" (- 0 1)) h) (let ([h (make-hash)]) (hash-set! h "x" 0) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 1) (hash-set! h "y" (- 0 1)) h) (let ([h (make-hash)]) (hash-set! h "x" 1) (hash-set! h "y" 0) h) (let ([h (make-hash)]) (hash-set! h "x" 1) (hash-set! h "y" 1) h)))
(define neighbours (list))
(let/ec _break (for ([d deltas])
  (let/ec _cont
(define nx (let ([__l (if p (hash-ref p "x" #f) #f)] [__r (if d (hash-ref d "x" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define ny (let ([__l (if p (hash-ref p "y" #f) #f)] [__r (if d (hash-ref d "y" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (and (and (and (<= 0 nx) (< nx x_limit)) (<= 0 ny)) (< ny y_limit)) (let ()
(set! neighbours (append neighbours (list (let ([h (make-hash)]) (hash-set! h "x" nx) (hash-set! h "y" ny) h))))
) (void))
  )))
(_return neighbours)
))
)
(define (contains nodes p)
  (let/ec _return (begin
(let/ec _break (for ([n nodes])
  (let/ec _cont
(if (and (equal? (if (if n (hash-ref n "pos" #f) #f) (hash-ref (if n (hash-ref n "pos" #f) #f) "x" #f) #f) (if p (hash-ref p "x" #f) #f)) (equal? (if (if n (hash-ref n "pos" #f) #f) (hash-ref (if n (hash-ref n "pos" #f) #f) "y" #f) #f) (if p (hash-ref p "y" #f) #f))) (let ()
(_return #t)
) (void))
  )))
(_return #f)
))
)
(define (get_node nodes p)
  (let/ec _return (begin
(let/ec _break (for ([n nodes])
  (let/ec _cont
(if (and (equal? (if (if n (hash-ref n "pos" #f) #f) (hash-ref (if n (hash-ref n "pos" #f) #f) "x" #f) #f) (if p (hash-ref p "x" #f) #f)) (equal? (if (if n (hash-ref n "pos" #f) #f) (hash-ref (if n (hash-ref n "pos" #f) #f) "y" #f) #f) (if p (hash-ref p "y" #f) #f))) (let ()
(_return n)
) (void))
  )))
(_return (let ([h (make-hash)]) (hash-set! h "pos" p) (hash-set! h "parent" (let ([h (make-hash)]) (hash-set! h "x" (- 0 1)) (hash-set! h "y" (- 0 1)) h)) (hash-set! h "g" 0) (hash-set! h "h" 0) (hash-set! h "f" 0) h))
))
)
(define (astar x_limit y_limit start goal)
  (let/ec _return (begin
(define open (list))
(define closed (list))
(set! open (append open (list (let ([h (make-hash)]) (hash-set! h "pos" start) (hash-set! h "parent" (let ([h (make-hash)]) (hash-set! h "x" (- 0 1)) (hash-set! h "y" (- 0 1)) h)) (hash-set! h "g" 0) (hash-set! h "h" 0) (hash-set! h "f" 0) h))))
(define current (if open (if (hash? open) (hash-ref open 0 #f) (list-ref open (int 0))) #f))
(let/ec _break (let loop ()
  (if (> (cond [(not open) 0] [(string? open) (string-length open)] [(hash? open) (hash-count open)] [else (length open)]) 0) (let/ec _cont
    (define min_index 0)
    (define i 1)
    (let/ec _break (let loop ()
  (if (< i (cond [(not open) 0] [(string? open) (string-length open)] [(hash? open) (hash-count open)] [else (length open)])) (let/ec _cont
    (if (< (if (if open (if (hash? open) (hash-ref open i #f) (list-ref open (int i))) #f) (hash-ref (if open (if (hash? open) (hash-ref open i #f) (list-ref open (int i))) #f) "f" #f) #f) (if (if open (if (hash? open) (hash-ref open min_index #f) (list-ref open (int min_index))) #f) (hash-ref (if open (if (hash? open) (hash-ref open min_index #f) (list-ref open (int min_index))) #f) "f" #f) #f)) (let ()
(set! min_index i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! current (if open (if (hash? open) (hash-ref open min_index #f) (list-ref open (int min_index))) #f))
    (define new_open (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not open) 0] [(string? open) (string-length open)] [(hash? open) (hash-count open)] [else (length open)])) (let/ec _cont
    (if (not (equal? j min_index)) (let ()
(set! new_open (append new_open (list (if open (if (hash? open) (hash-ref open j #f) (list-ref open (int j))) #f))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! open new_open)
    (set! closed (append closed (list current)))
    (if (and (equal? (if (if current (hash-ref current "pos" #f) #f) (hash-ref (if current (hash-ref current "pos" #f) #f) "x" #f) #f) (if goal (hash-ref goal "x" #f) #f)) (equal? (if (if current (hash-ref current "pos" #f) #f) (hash-ref (if current (hash-ref current "pos" #f) #f) "y" #f) #f) (if goal (hash-ref goal "y" #f) #f))) (let ()
(_break)
) (void))
    (define neighbours (get_neighbours (if current (hash-ref current "pos" #f) #f) x_limit y_limit))
    (let/ec _break (for ([np neighbours] #:unless (contains closed np))
  (let/ec _cont
(define g (let ([__l (if current (hash-ref current "g" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define dx (- (if goal (hash-ref goal "x" #f) #f) (if np (hash-ref np "x" #f) #f)))
(define dy (- (if goal (hash-ref goal "y" #f) #f) (if np (hash-ref np "y" #f) #f)))
(define h (let ([__l (* dx dx)] [__r (* dy dy)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define f (let ([__l g] [__r h]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define skip #f)
(let/ec _break (for ([node open])
  (let/ec _cont
(if (and (and (equal? (if (if node (hash-ref node "pos" #f) #f) (hash-ref (if node (hash-ref node "pos" #f) #f) "x" #f) #f) (if np (hash-ref np "x" #f) #f)) (equal? (if (if node (hash-ref node "pos" #f) #f) (hash-ref (if node (hash-ref node "pos" #f) #f) "y" #f) #f) (if np (hash-ref np "y" #f) #f))) (< (if node (hash-ref node "f" #f) #f) f)) (let ()
(set! skip #t)
) (void))
  )))
(if skip (let ()
(_cont)
) (void))
(set! open (append open (list (let ([h (make-hash)]) (hash-set! h "pos" np) (hash-set! h "parent" (if current (hash-ref current "pos" #f) #f)) (hash-set! h "g" g) (hash-set! h "h" h) (hash-set! h "f" f) h))))
  )))
    (loop)) (void))))
(define path (list))
(set! path (append path (list (if current (hash-ref current "pos" #f) #f))))
(let/ec _break (let loop ()
  (if (not (and (equal? (if (if current (hash-ref current "parent" #f) #f) (hash-ref (if current (hash-ref current "parent" #f) #f) "x" #f) #f) (- 0 1)) (equal? (if (if current (hash-ref current "parent" #f) #f) (hash-ref (if current (hash-ref current "parent" #f) #f) "y" #f) #f) (- 0 1)))) (let/ec _cont
    (set! current (get_node closed (if current (hash-ref current "parent" #f) #f)))
    (set! path (append path (list (if current (hash-ref current "pos" #f) #f))))
    (loop)) (void))))
(define rev (list))
(define k (- (cond [(not path) 0] [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)]) 1))
(let/ec _break (let loop ()
  (if (>= k 0) (let/ec _cont
    (set! rev (append rev (list (if path (if (hash? path) (hash-ref path k #f) (list-ref path (int k))) #f))))
    (set! k (- k 1))
    (loop)) (void))))
(_return rev)
))
)
(define (create_world x_limit y_limit)
  (let/ec _return (begin
(define world (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i x_limit) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j y_limit) (let/ec _cont
    (set! row (append row (list 0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! world (append world (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return world)
))
)
(define (mark_path world path)
  (let/ec _return (begin
(let/ec _break (for ([p path])
  (let/ec _cont
(set! world (list-set world (if p (hash-ref p "x" #f) #f) (list-set (list-ref world (if p (hash-ref p "x" #f) #f)) (if p (hash-ref p "y" #f) #f) 1)))
  )))
))
)
(define (print_world world)
  (let/ec _return (begin
(let/ec _break (for ([row world])
  (let/ec _cont
(displayln (format "~a" row))
  )))
))
)
(define world_x 5)
(define world_y 5)
(define start (let ([h (make-hash)]) (hash-set! h "x" 0) (hash-set! h "y" 0) h))
(define goal (let ([h (make-hash)]) (hash-set! h "x" 4) (hash-set! h "y" 4) h))
(define path (astar world_x world_y start goal))
(define world (create_world world_x world_y))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "path from (" (format "~a" (if start (hash-ref start "x" #f) #f))) ", ") (format "~a" (if start (hash-ref start "y" #f) #f))) ") to (") (format "~a" (if goal (hash-ref goal "x" #f) #f))) ", ") (format "~a" (if goal (hash-ref goal "y" #f) #f))) ")"))
(mark_path world path)
(print_world world)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
