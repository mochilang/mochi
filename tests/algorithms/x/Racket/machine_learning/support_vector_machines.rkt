;; Generated by Mochi 0.10.63 on 2025-08-11 18:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (dot a b)
  (let/ec _return (begin
(define s 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! s (let ([__l s] [__r (* (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return s)
))
)
(define (new_svc lr lambda epochs)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "weights" (list)) (hash-set! h "bias" 0.0) (hash-set! h "lr" lr) (hash-set! h "lambda" lambda) (hash-set! h "epochs" epochs) h))
))
)
(define (fit model xs ys)
  (let/ec _return (begin
(define n_features (cond [(not (if xs (if (hash? xs) (hash-ref xs 0 #f) (safe-index xs (int 0))) #f)) 0] [(string? (if xs (if (hash? xs) (hash-ref xs 0 #f) (safe-index xs (int 0))) #f)) (string-length (if xs (if (hash? xs) (hash-ref xs 0 #f) (safe-index xs (int 0))) #f))] [(hash? (if xs (if (hash? xs) (hash-ref xs 0 #f) (safe-index xs (int 0))) #f)) (hash-count (if xs (if (hash? xs) (hash-ref xs 0 #f) (safe-index xs (int 0))) #f))] [else (length (if xs (if (hash? xs) (hash-ref xs 0 #f) (safe-index xs (int 0))) #f))]))
(define w (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n_features]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! w (append (or w (list)) (list 0.0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define b 0.0)
(define epoch 0)
(let/ec _break (let loop ()
  (if (let ([__l epoch] [__r (if model (hash-ref model "epochs" #f) #f)]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define x (if xs (if (hash? xs) (hash-ref xs j #f) (safe-index xs (int j))) #f))
      (define y (exact->inexact (if ys (if (hash? ys) (hash-ref ys j #f) (safe-index ys (int j))) #f)))
      (define prod (let ([__l (dot w x)] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (if (let ([__l (* y prod)] [__r 1.0]) (< (int __l) (int __r))) (let ()
(define k 0)
(let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not w) 0] [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! w (list-set w (int k) (let ([__l (if w (if (hash? w) (hash-ref w k #f) (safe-index w (int k))) #f)] [__r (* (if model (hash-ref model "lr" #f) #f) (- (* y (if x (if (hash? x) (hash-ref x k #f) (safe-index x (int k))) #f)) (* (* 2.0 (if model (hash-ref model "lambda" #f) #f)) (if w (if (hash? w) (hash-ref w k #f) (safe-index w (int k))) #f))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! b (let ([__l b] [__r (* (if model (hash-ref model "lr" #f) #f) y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(define k 0)
(let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not w) 0] [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! w (list-set w (int k) (- (if w (if (hash? w) (hash-ref w k #f) (safe-index w (int k))) #f) (* (if model (hash-ref model "lr" #f) #f) (* (* 2.0 (if model (hash-ref model "lambda" #f) #f)) (if w (if (hash? w) (hash-ref w k #f) (safe-index w (int k))) #f))))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! epoch (let ([__l epoch] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "weights" w) (hash-set! h "bias" b) (hash-set! h "lr" (if model (hash-ref model "lr" #f) #f)) (hash-set! h "lambda" (if model (hash-ref model "lambda" #f) #f)) (hash-set! h "epochs" (if model (hash-ref model "epochs" #f) #f)) h))
))
)
(define (predict model x)
  (let/ec _return (begin
(define s (let ([__l (dot (if model (hash-ref model "weights" #f) #f) x)] [__r (if model (hash-ref model "bias" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l s] [__r 0.0]) (>= (int __l) (int __r))) (let ()
(_return 1)
) (let ()
(_return (- 1))
))
))
)
(define xs (list (list 0.0 1.0) (list 0.0 2.0) (list 1.0 1.0) (list 1.0 2.0)))
(define ys (list 1 1 (- 1) (- 1)))
(define base (new_svc 0.01 0.01 1000))
(define model (fit base xs ys))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (predict model (list 0.0 1.0)))
(displayln (predict model (list 1.0 1.0)))
(displayln (predict model (list 2.0 2.0)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
