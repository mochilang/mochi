;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (design_matrix xs degree)
  (let/ec _return (begin
(define i 0)
(define matrix (list))
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (define pow 1.0)
    (let/ec _break (let loop ()
  (if (<= j degree) (let/ec _cont
    (set! row (append row (list pow)))
    (set! pow (* pow (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! matrix (append matrix (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return matrix)
))
)
(define (transpose matrix)
  (let/ec _return (begin
(define rows (cond [(not matrix) 0] [(string? matrix) (string-length matrix)] [(hash? matrix) (hash-count matrix)] [else (length matrix)]))
(define cols (cond [(not (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f)) 0] [(string? (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f)) (string-length (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f))] [(hash? (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f)) (hash-count (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f))] [else (length (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f))]))
(define j 0)
(define result (list))
(let/ec _break (let loop ()
  (if (< j cols) (let/ec _cont
    (define row (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (set! row (append row (list (if (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) j #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (int j))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! result (append result (list row)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (matmul A B)
  (let/ec _return (begin
(define n (cond [(not A) 0] [(string? A) (string-length A)] [(hash? A) (hash-count A)] [else (length A)]))
(define m (cond [(not (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f)) 0] [(string? (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f)) (string-length (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f))] [(hash? (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f)) (hash-count (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f))] [else (length (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f))]))
(define p (cond [(not (if B (if (hash? B) (hash-ref B 0 #f) (list-ref B (int 0))) #f)) 0] [(string? (if B (if (hash? B) (hash-ref B 0 #f) (list-ref B (int 0))) #f)) (string-length (if B (if (hash? B) (hash-ref B 0 #f) (list-ref B (int 0))) #f))] [(hash? (if B (if (hash? B) (hash-ref B 0 #f) (list-ref B (int 0))) #f)) (hash-count (if B (if (hash? B) (hash-ref B 0 #f) (list-ref B (int 0))) #f))] [else (length (if B (if (hash? B) (hash-ref B 0 #f) (list-ref B (int 0))) #f))]))
(define i 0)
(define result (list))
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k p) (let/ec _cont
    (define sum 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j m) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if A (if (hash? A) (hash-ref A i #f) (list-ref A (int i))) #f) (if (hash? (if A (if (hash? A) (hash-ref A i #f) (list-ref A (int i))) #f)) (hash-ref (if A (if (hash? A) (hash-ref A i #f) (list-ref A (int i))) #f) j #f) (list-ref (if A (if (hash? A) (hash-ref A i #f) (list-ref A (int i))) #f) (int j))) #f) (if (if B (if (hash? B) (hash-ref B j #f) (list-ref B (int j))) #f) (if (hash? (if B (if (hash? B) (hash-ref B j #f) (list-ref B (int j))) #f)) (hash-ref (if B (if (hash? B) (hash-ref B j #f) (list-ref B (int j))) #f) k #f) (list-ref (if B (if (hash? B) (hash-ref B j #f) (list-ref B (int j))) #f) (int k))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row (append row (list sum)))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! result (append result (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (matvec_mul A v)
  (let/ec _return (begin
(define n (cond [(not A) 0] [(string? A) (string-length A)] [(hash? A) (hash-count A)] [else (length A)]))
(define m (cond [(not (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f)) 0] [(string? (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f)) (string-length (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f))] [(hash? (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f)) (hash-count (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f))] [else (length (if A (if (hash? A) (hash-ref A 0 #f) (list-ref A (int 0))) #f))]))
(define i 0)
(define result (list))
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define sum 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j m) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if (if A (if (hash? A) (hash-ref A i #f) (list-ref A (int i))) #f) (if (hash? (if A (if (hash? A) (hash-ref A i #f) (list-ref A (int i))) #f)) (hash-ref (if A (if (hash? A) (hash-ref A i #f) (list-ref A (int i))) #f) j #f) (list-ref (if A (if (hash? A) (hash-ref A i #f) (list-ref A (int i))) #f) (int j))) #f) (if v (if (hash? v) (hash-ref v j #f) (list-ref v (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! result (append result (list sum)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (gaussian_elimination A b)
  (let/ec _return (begin
(define n (cond [(not A) 0] [(string? A) (string-length A)] [(hash? A) (hash-count A)] [else (length A)]))
(define M (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! M (append M (list (append (if A (if (hash? A) (hash-ref A i #f) (list-ref A (int i))) #f) (list (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define k 0)
(let/ec _break (let loop ()
  (if (< k n) (let/ec _cont
    (define j (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (define factor (/ (if (if M (if (hash? M) (hash-ref M j #f) (list-ref M (int j))) #f) (if (hash? (if M (if (hash? M) (hash-ref M j #f) (list-ref M (int j))) #f)) (hash-ref (if M (if (hash? M) (hash-ref M j #f) (list-ref M (int j))) #f) k #f) (list-ref (if M (if (hash? M) (hash-ref M j #f) (list-ref M (int j))) #f) (int k))) #f) (if (if M (if (hash? M) (hash-ref M k #f) (list-ref M (int k))) #f) (if (hash? (if M (if (hash? M) (hash-ref M k #f) (list-ref M (int k))) #f)) (hash-ref (if M (if (hash? M) (hash-ref M k #f) (list-ref M (int k))) #f) k #f) (list-ref (if M (if (hash? M) (hash-ref M k #f) (list-ref M (int k))) #f) (int k))) #f)))
    (define rowj (if M (if (hash? M) (hash-ref M j #f) (list-ref M (int j))) #f))
    (define rowk (if M (if (hash? M) (hash-ref M k #f) (list-ref M (int k))) #f))
    (define l k)
    (let/ec _break (let loop ()
  (if (<= l n) (let/ec _cont
    (set! rowj (list-set rowj (int l) (- (if rowj (if (hash? rowj) (hash-ref rowj l #f) (list-ref rowj (int l))) #f) (* factor (if rowk (if (hash? rowk) (hash-ref rowk l #f) (list-ref rowk (int l))) #f)))))
    (set! l (let ([__l l] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! M (list-set M (int j) rowj))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define x (list))
(define t 0)
(let/ec _break (let loop ()
  (if (< t n) (let/ec _cont
    (set! x (append x (list 0.0)))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define i2 (- n 1))
(let/ec _break (let loop ()
  (if (>= i2 0) (let/ec _cont
    (define sum (if (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f) (if (hash? (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f)) (hash-ref (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f) n #f) (list-ref (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f) (int n))) #f))
    (define j2 (let ([__l i2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j2 n) (let/ec _cont
    (set! sum (- sum (* (if (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f) (if (hash? (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f)) (hash-ref (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f) j2 #f) (list-ref (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f) (int j2))) #f) (if x (if (hash? x) (hash-ref x j2 #f) (list-ref x (int j2))) #f))))
    (set! j2 (let ([__l j2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! x (list-set x (int i2) (/ sum (if (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f) (if (hash? (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f)) (hash-ref (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f) i2 #f) (list-ref (if M (if (hash? M) (hash-ref M i2 #f) (list-ref M (int i2))) #f) (int i2))) #f))))
    (set! i2 (- i2 1))
    (loop)) (void))))
(_return x)
))
)
(define (predict xs coeffs)
  (let/ec _return (begin
(define i 0)
(define result (list))
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (define x (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))
    (define j 0)
    (define pow 1.0)
    (define sum 0.0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not coeffs) 0] [(string? coeffs) (string-length coeffs)] [(hash? coeffs) (hash-count coeffs)] [else (length coeffs)])) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if coeffs (if (hash? coeffs) (hash-ref coeffs j #f) (list-ref coeffs (int j))) #f) pow)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! pow (* pow x))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! result (append result (list sum)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define xs (list 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0))
(define ys (list))
(define i 0)
(define X (design_matrix xs 3))
(define Xt (transpose X))
(define XtX (matmul Xt X))
(define Xty (matvec_mul Xt ys))
(define coeffs (gaussian_elimination XtX Xty))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (define x (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))
    (set! ys (append ys (list (- (let ([__l (- (* (* x x) x) (* (* 2.0 x) x))] [__r (* 3.0 x)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 5.0))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (format "~a" coeffs))
(displayln (format "~a" (predict (list (- 1.0)) coeffs)))
(displayln (format "~a" (predict (list (- 2.0)) coeffs)))
(displayln (format "~a" (predict (list 6.0) coeffs)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
