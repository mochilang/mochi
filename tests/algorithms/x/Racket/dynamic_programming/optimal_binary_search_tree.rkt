;; Generated by Mochi 0.10.64 on 2025-08-13 07:12 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (if (inexact? x) (real->decimal-string x) (format "~a" x))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (sort_nodes nodes)
  (let/ec _return (begin
(define arr nodes)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define key_node (if arr (if (hash? arr) (hash-ref arr i #f) (safe-index arr (int i))) #f))
      (define j (- i 1))
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define temp (if arr (if (hash? arr) (hash-ref arr j #f) (safe-index arr (int j))) #f))
      (if (let ([__l (if temp (hash-ref temp "key" #f) #f)] [__r (if key_node (hash-ref key_node "key" #f) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) temp))
(set! j (- j 1))
) (let ()
(_break)
))
    )
    (loop)) (void))))
      (set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) key_node))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return arr)
))
)
(define (print_node n)
  (let/ec _return (begin
(displayln (string-append (string-append (string-append (string-append "Node(key=" (to-string (if n (hash-ref n "key" #f) #f))) ", freq=") (to-string (if n (hash-ref n "freq" #f) #f))) ")"))
))
)
(define (print_binary_search_tree root keys i j parent is_left)
  (let/ec _return (begin
(if (or (or (let ([__l i] [__r j]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l j] [__r (- (cond [(not root) 0] [(string? root) (string-length root)] [(hash? root) (hash-count root)] [else (length root)]) 1)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(_return void)
) (void))
(define node (if (if root (if (hash? root) (hash-ref root i #f) (safe-index root (int i))) #f) (if (hash? (if root (if (hash? root) (hash-ref root i #f) (safe-index root (int i))) #f)) (hash-ref (if root (if (hash? root) (hash-ref root i #f) (safe-index root (int i))) #f) j #f) (safe-index (if root (if (hash? root) (hash-ref root i #f) (safe-index root (int i))) #f) (int j))) #f))
(if (equal? parent (- 1)) (let ()
(displayln (string-append (to-string (if keys (if (hash? keys) (hash-ref keys node #f) (safe-index keys (int node))) #f)) " is the root of the binary search tree."))
) (let ()
(if is_left (let ()
(displayln (string-append (string-append (string-append (to-string (if keys (if (hash? keys) (hash-ref keys node #f) (safe-index keys (int node))) #f)) " is the left child of key ") (to-string parent)) "."))
) (let ()
(displayln (string-append (string-append (string-append (to-string (if keys (if (hash? keys) (hash-ref keys node #f) (safe-index keys (int node))) #f)) " is the right child of key ") (to-string parent)) "."))
))
))
(print_binary_search_tree root keys i (- node 1) (if keys (if (hash? keys) (hash-ref keys node #f) (safe-index keys (int node))) #f) #t)
(print_binary_search_tree root keys (let ([__l node] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) j (if keys (if (hash? keys) (hash-ref keys node #f) (safe-index keys (int node))) #f) #f)
))
)
(define (find_optimal_binary_search_tree original_nodes)
  (let/ec _return (begin
(define nodes (sort_nodes original_nodes))
(define n (cond [(not nodes) 0] [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]))
(define keys (list))
(define freqs (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define node (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f))
      (set! keys (append (or keys (list)) (list (if node (hash-ref node "key" #f) #f))))
      (set! freqs (append (or freqs (list)) (list (if node (hash-ref node "freq" #f) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define dp (list))
(define total (list))
(define root (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define dp_row (list))
      (define total_row (list))
      (define root_row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? i j) (let ()
(set! dp_row (append (or dp_row (list)) (list (if freqs (if (hash? freqs) (hash-ref freqs i #f) (safe-index freqs (int i))) #f))))
(set! total_row (append (or total_row (list)) (list (if freqs (if (hash? freqs) (hash-ref freqs i #f) (safe-index freqs (int i))) #f))))
(set! root_row (append (or root_row (list)) (list i)))
) (let ()
(set! dp_row (append (or dp_row (list)) (list 0)))
(set! total_row (append (or total_row (list)) (list 0)))
(set! root_row (append (or root_row (list)) (list 0)))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! dp (append (or dp (list)) (list dp_row)))
      (set! total (append (or total (list)) (list total_row)))
      (set! root (append (or root (list)) (list root_row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define interval_length 2)
(define INF 2147483647)
(let/ec _break (let loop ()
  (if (let ([__l interval_length] [__r n]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (let ([__l (- n interval_length)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j (- (let ([__l i] [__r interval_length]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
      (set! dp (list-set dp i (list-set (list-ref dp i) j INF)))
      (set! total (list-set total i (list-set (list-ref total i) j (let ([__l (if (if total (if (hash? total) (hash-ref total i #f) (safe-index total (int i))) #f) (if (hash? (if total (if (hash? total) (hash-ref total i #f) (safe-index total (int i))) #f)) (hash-ref (if total (if (hash? total) (hash-ref total i #f) (safe-index total (int i))) #f) (- j 1) #f) (safe-index (if total (if (hash? total) (hash-ref total i #f) (safe-index total (int i))) #f) (int (- j 1)))) #f)] [__r (if freqs (if (hash? freqs) (hash-ref freqs j #f) (safe-index freqs (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (define r (if (if root (if (hash? root) (hash-ref root i #f) (safe-index root (int i))) #f) (if (hash? (if root (if (hash? root) (hash-ref root i #f) (safe-index root (int i))) #f)) (hash-ref (if root (if (hash? root) (hash-ref root i #f) (safe-index root (int i))) #f) (- j 1) #f) (safe-index (if root (if (hash? root) (hash-ref root i #f) (safe-index root (int i))) #f) (int (- j 1)))) #f))
      (let/ec _break (let loop ()
  (if (let ([__l r] [__r (if (if root (if (hash? root) (hash-ref root (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index root (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if root (if (hash? root) (hash-ref root (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index root (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if root (if (hash? root) (hash-ref root (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index root (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) j #f) (safe-index (if root (if (hash? root) (hash-ref root (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index root (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int j))) #f)]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define left (if (not (equal? r i)) (if (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (- r 1) #f) (safe-index (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (int (- r 1)))) #f) 0))
      (define right (if (not (equal? r j)) (if (if dp (if (hash? dp) (hash-ref dp (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index dp (int (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index dp (int (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index dp (int (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) j #f) (safe-index (if dp (if (hash? dp) (hash-ref dp (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index dp (int (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int j))) #f) 0))
      (define cost (let ([__l (let ([__l left] [__r (if (if total (if (hash? total) (hash-ref total i #f) (safe-index total (int i))) #f) (if (hash? (if total (if (hash? total) (hash-ref total i #f) (safe-index total (int i))) #f)) (hash-ref (if total (if (hash? total) (hash-ref total i #f) (safe-index total (int i))) #f) j #f) (safe-index (if total (if (hash? total) (hash-ref total i #f) (safe-index total (int i))) #f) (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r right]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (if (let ([__l (if (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) j #f) (safe-index (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (int j))) #f)] [__r cost]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! dp (list-set dp i (list-set (list-ref dp i) j cost)))
(set! root (list-set root i (list-set (list-ref root i) j r)))
) (void))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! interval_length (let ([__l interval_length] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln "Binary search tree nodes:")
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (print_node (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln (string-append (string-append "\nThe cost of optimal BST for given tree nodes is " (to-string (if (if dp (if (hash? dp) (hash-ref dp 0 #f) (safe-index dp (int 0))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp 0 #f) (safe-index dp (int 0))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp 0 #f) (safe-index dp (int 0))) #f) (- n 1) #f) (safe-index (if dp (if (hash? dp) (hash-ref dp 0 #f) (safe-index dp (int 0))) #f) (int (- n 1)))) #f))) "."))
(print_binary_search_tree root keys 0 (- n 1) (- 1) #f)
))
)
(define (main)
  (let/ec _return (begin
(define nodes (list (let ([h (make-hash)]) (hash-set! h "key" 12) (hash-set! h "freq" 8) h) (let ([h (make-hash)]) (hash-set! h "key" 10) (hash-set! h "freq" 34) h) (let ([h (make-hash)]) (hash-set! h "key" 20) (hash-set! h "freq" 50) h) (let ([h (make-hash)]) (hash-set! h "key" 42) (hash-set! h "freq" 3) h) (let ([h (make-hash)]) (hash-set! h "key" 25) (hash-set! h "freq" 40) h) (let ([h (make-hash)]) (hash-set! h "key" 37) (hash-set! h "freq" 30) h)))
(find_optimal_binary_search_tree nodes)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
