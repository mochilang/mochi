;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (distance_sq a b)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (define diff (- (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)))
    (set! sum (let ([__l sum] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (mean vectors)
  (let/ec _return (begin
(define dim (cond [(string? (if vectors (if (hash? vectors) (hash-ref vectors 0 #f) (list-ref vectors (int 0))) #f)) (string-length (if vectors (if (hash? vectors) (hash-ref vectors 0 #f) (list-ref vectors (int 0))) #f))] [(hash? (if vectors (if (hash? vectors) (hash-ref vectors 0 #f) (list-ref vectors (int 0))) #f)) (hash-count (if vectors (if (hash? vectors) (hash-ref vectors 0 #f) (list-ref vectors (int 0))) #f))] [else (length (if vectors (if (hash? vectors) (hash-ref vectors 0 #f) (list-ref vectors (int 0))) #f))]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i dim) (let/ec _cont
    (define total 0.0)
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? vectors) (string-length vectors)] [(hash? vectors) (hash-count vectors)] [else (length vectors)])) (let/ec _cont
    (set! total (let ([__l total] [__r (if (if vectors (if (hash? vectors) (hash-ref vectors j #f) (list-ref vectors (int j))) #f) (if (hash? (if vectors (if (hash? vectors) (hash-ref vectors j #f) (list-ref vectors (int j))) #f)) (hash-ref (if vectors (if (hash? vectors) (hash-ref vectors j #f) (list-ref vectors (int j))) #f) i #f) (list-ref (if vectors (if (hash? vectors) (hash-ref vectors j #f) (list-ref vectors (int j))) #f) (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list (/ total (cond [(string? vectors) (string-length vectors)] [(hash? vectors) (hash-count vectors)] [else (length vectors)])))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (k_means vectors k iterations)
  (let/ec _return (begin
(define centroids (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i k) (let/ec _cont
    (set! centroids (append centroids (list (if vectors (if (hash? vectors) (hash-ref vectors i #f) (list-ref vectors (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define assignments (list))
(define n (cond [(string? vectors) (string-length vectors)] [(hash? vectors) (hash-count vectors)] [else (length vectors)]))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! assignments (append assignments (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define it 0)
(let/ec _break (let loop ()
  (if (< it iterations) (let/ec _cont
    (define v 0)
    (let/ec _break (let loop ()
  (if (< v n) (let/ec _cont
    (define best 0)
    (define bestDist (distance_sq (if vectors (if (hash? vectors) (hash-ref vectors v #f) (list-ref vectors (int v))) #f) (if centroids (if (hash? centroids) (hash-ref centroids 0 #f) (list-ref centroids (int 0))) #f)))
    (define c 1)
    (let/ec _break (let loop ()
  (if (< c k) (let/ec _cont
    (define d (distance_sq (if vectors (if (hash? vectors) (hash-ref vectors v #f) (list-ref vectors (int v))) #f) (if centroids (if (hash? centroids) (hash-ref centroids c #f) (list-ref centroids (int c))) #f)))
    (if (< d bestDist) (let ()
(set! bestDist d)
(set! best c)
) (void))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! assignments (list-set assignments (int v) best))
    (set! v (let ([__l v] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define cIdx 0)
    (let/ec _break (let loop ()
  (if (< cIdx k) (let/ec _cont
    (define cluster (list))
    (define v2 0)
    (let/ec _break (let loop ()
  (if (< v2 n) (let/ec _cont
    (if (equal? (if assignments (if (hash? assignments) (hash-ref assignments v2 #f) (list-ref assignments (int v2))) #f) cIdx) (let ()
(set! cluster (append cluster (list (if vectors (if (hash? vectors) (hash-ref vectors v2 #f) (list-ref vectors (int v2))) #f))))
) (void))
    (set! v2 (let ([__l v2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (> (cond [(string? cluster) (string-length cluster)] [(hash? cluster) (hash-count cluster)] [else (length cluster)]) 0) (let ()
(set! centroids (list-set centroids (int cIdx) (mean cluster)))
) (void))
    (set! cIdx (let ([__l cIdx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! it (let ([__l it] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "centroids" centroids "assignments" assignments))
))
)
(define (main)
  (let/ec _return (begin
(define vectors (list (list 1.0 2.0) (list 1.5 1.8) (list 5.0 8.0) (list 8.0 8.0) (list 1.0 0.6) (list 9.0 11.0)))
(define result (k_means vectors 2 5))
(displayln (format "~a" (if result (hash-ref result "centroids" #f) #f)))
(displayln (format "~a" (if result (hash-ref result "assignments" #f) #f)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
