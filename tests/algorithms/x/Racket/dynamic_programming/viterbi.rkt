;; Generated by Mochi 0.10.65 on 2025-08-13 16:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (key state obs)
  (let/ec _return (begin
(_return (string-append (string-append state "|") obs))
))
)
(define (viterbi observations states start_p trans_p emit_p)
  (let/ec _return (begin
(if (or (equal? (cond [(not observations) 0] [(string? observations) (string-length observations)] [(hash? observations) (hash-count observations)] [else (length observations)]) 0) (equal? (cond [(not states) 0] [(string? states) (string-length states)] [(hash? states) (hash-count states)] [else (length states)]) 0)) (let ()
(panic "empty parameters")
) (void))
(define probs (let ([h (make-hash)]) h))
(define ptrs (let ([h (make-hash)]) h))
(define first_obs (if observations (if (hash? observations) (hash-ref observations 0 #f) (safe-index observations (int 0))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not states) 0] [(string? states) (string-length states)] [(hash? states) (hash-count states)] [else (length states)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define state (if states (if (hash? states) (hash-ref states i #f) (safe-index states (int i))) #f))
      (if (hash? probs) (hash-set! probs (key state first_obs) (* (if start_p (hash-ref start_p state 0.0) #f) (if (if emit_p (hash-ref emit_p state (hash)) #f) (hash-ref (if emit_p (hash-ref emit_p state (hash)) #f) first_obs 0.0) #f))) (begin (set! probs (make-hash)) (hash-set! probs (key state first_obs) (* (if start_p (hash-ref start_p state 0.0) #f) (if (if emit_p (hash-ref emit_p state (hash)) #f) (hash-ref (if emit_p (hash-ref emit_p state (hash)) #f) first_obs 0.0) #f)))))
      (if (hash? ptrs) (hash-set! ptrs (key state first_obs) "") (begin (set! ptrs (make-hash)) (hash-set! ptrs (key state first_obs) "")))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define t 1)
(let/ec _break (let loop ()
  (if (let ([__l t] [__r (cond [(not observations) 0] [(string? observations) (string-length observations)] [(hash? observations) (hash-count observations)] [else (length observations)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define obs (if observations (if (hash? observations) (hash-ref observations t #f) (safe-index observations (int t))) #f))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not states) 0] [(string? states) (string-length states)] [(hash? states) (hash-count states)] [else (length states)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define state (if states (if (hash? states) (hash-ref states j #f) (safe-index states (int j))) #f))
      (define max_prob (- 1.0))
      (define prev_state "")
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not states) 0] [(string? states) (string-length states)] [(hash? states) (hash-count states)] [else (length states)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define state0 (if states (if (hash? states) (hash-ref states k #f) (safe-index states (int k))) #f))
      (define obs0 (if observations (if (hash? observations) (hash-ref observations (- t 1) #f) (safe-index observations (int (- t 1)))) #f))
      (define prob_prev (if probs (hash-ref probs (key state0 obs0) 0.0) #f))
      (define prob (* (* prob_prev (if (if trans_p (hash-ref trans_p state0 (hash)) #f) (hash-ref (if trans_p (hash-ref trans_p state0 (hash)) #f) state 0.0) #f)) (if (if emit_p (hash-ref emit_p state (hash)) #f) (hash-ref (if emit_p (hash-ref emit_p state (hash)) #f) obs 0.0) #f)))
      (if (let ([__l prob] [__r max_prob]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! max_prob prob)
(set! prev_state state0)
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (hash? probs) (hash-set! probs (key state obs) max_prob) (begin (set! probs (make-hash)) (hash-set! probs (key state obs) max_prob)))
      (if (hash? ptrs) (hash-set! ptrs (key state obs) prev_state) (begin (set! ptrs (make-hash)) (hash-set! ptrs (key state obs) prev_state)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define path (list))
(define n 0)
(let/ec _break (let loop ()
  (if (let ([__l n] [__r (cond [(not observations) 0] [(string? observations) (string-length observations)] [(hash? observations) (hash-count observations)] [else (length observations)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! path (append (or path (list)) (list "")))
      (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define last_obs (if observations (if (hash? observations) (hash-ref observations (- (cond [(not observations) 0] [(string? observations) (string-length observations)] [(hash? observations) (hash-count observations)] [else (length observations)]) 1) #f) (safe-index observations (int (- (cond [(not observations) 0] [(string? observations) (string-length observations)] [(hash? observations) (hash-count observations)] [else (length observations)]) 1)))) #f))
(define max_final (- 1.0))
(define last_state "")
(define m 0)
(let/ec _break (let loop ()
  (if (let ([__l m] [__r (cond [(not states) 0] [(string? states) (string-length states)] [(hash? states) (hash-count states)] [else (length states)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define state (if states (if (hash? states) (hash-ref states m #f) (safe-index states (int m))) #f))
      (define prob (if probs (hash-ref probs (key state last_obs) 0.0) #f))
      (if (let ([__l prob] [__r max_final]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! max_final prob)
(set! last_state state)
) (void))
      (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define last_index (- (cond [(not observations) 0] [(string? observations) (string-length observations)] [(hash? observations) (hash-count observations)] [else (length observations)]) 1))
(set! path (list-set path (int last_index) last_state))
(define idx last_index)
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define obs (if observations (if (hash? observations) (hash-ref observations idx #f) (safe-index observations (int idx))) #f))
      (define prev (if ptrs (hash-ref ptrs (key (if path (if (hash? path) (hash-ref path idx #f) (safe-index path (int idx))) #f) obs) "") #f))
      (set! path (list-set path (int (- idx 1)) prev))
      (set! idx (- idx 1))
    )
    (loop)) (void))))
(_return path)
))
)
(define (join_words words)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not words) 0] [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! res (string-append res " "))
) (void))
      (set! res (string-append res (if words (if (hash? words) (hash-ref words i #f) (safe-index words (int i))) #f)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define result (viterbi observations states start_p trans_p emit_p))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(set! observations (list "normal" "cold" "dizzy"))
(set! states (list "Healthy" "Fever"))
(set! start_p (let ([h (make-hash)]) (hash-set! h "Healthy" 0.6) (hash-set! h "Fever" 0.4) h))
(set! trans_p (let ([h (make-hash)]) (hash-set! h "Healthy" (let ([h (make-hash)]) (hash-set! h "Healthy" 0.7) (hash-set! h "Fever" 0.3) h)) (hash-set! h "Fever" (let ([h (make-hash)]) (hash-set! h "Healthy" 0.4) (hash-set! h "Fever" 0.6) h)) h))
(set! emit_p (let ([h (make-hash)]) (hash-set! h "Healthy" (let ([h (make-hash)]) (hash-set! h "normal" 0.5) (hash-set! h "cold" 0.4) (hash-set! h "dizzy" 0.1) h)) (hash-set! h "Fever" (let ([h (make-hash)]) (hash-set! h "normal" 0.1) (hash-set! h "cold" 0.3) (hash-set! h "dizzy" 0.6) h)) h))
(displayln (join_words result))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
