;; Generated by Mochi 0.10.64 on 2025-08-13 07:12 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define f (list))
(define (max_int a b)
  (let/ec _return (begin
(if (let ([__l a] [__r b]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(_return a)
) (let ()
(_return b)
))
))
)
(define (init_f n w)
  (let/ec _return (begin
(define table (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r w]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (or (equal? i 0) (equal? j 0)) (let ()
(set! row (append (or row (list)) (list 0)))
) (let ()
(set! row (append (or row (list)) (list (- 1))))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! table (append (or table (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return table)
))
)
(define (mf_knapsack i wt val j)
  (let/ec _return (begin
(if (let ([__l (if (if f (if (hash? f) (hash-ref f i #f) (safe-index f (int i))) #f) (if (hash? (if f (if (hash? f) (hash-ref f i #f) (safe-index f (int i))) #f)) (hash-ref (if f (if (hash? f) (hash-ref f i #f) (safe-index f (int i))) #f) j #f) (safe-index (if f (if (hash? f) (hash-ref f i #f) (safe-index f (int i))) #f) (int j))) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(if (let ([__l j] [__r (if wt (if (hash? wt) (hash-ref wt (- i 1) #f) (safe-index wt (int (- i 1)))) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! f (list-set f i (list-set (list-ref f i) j (mf_knapsack (- i 1) wt val j))))
) (let ()
(define without_item (mf_knapsack (- i 1) wt val j))
(define with_item (let ([__l (mf_knapsack (- i 1) wt val (- j (if wt (if (hash? wt) (hash-ref wt (- i 1) #f) (safe-index wt (int (- i 1)))) #f)))] [__r (if val (if (hash? val) (hash-ref val (- i 1) #f) (safe-index val (int (- i 1)))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! f (list-set f i (list-set (list-ref f i) j (max_int without_item with_item))))
))
) (void))
(_return (if (if f (if (hash? f) (hash-ref f i #f) (safe-index f (int i))) #f) (if (hash? (if f (if (hash? f) (hash-ref f i #f) (safe-index f (int i))) #f)) (hash-ref (if f (if (hash? f) (hash-ref f i #f) (safe-index f (int i))) #f) j #f) (safe-index (if f (if (hash? f) (hash-ref f i #f) (safe-index f (int i))) #f) (int j))) #f))
))
)
(define (create_matrix rows cols)
  (let/ec _return (begin
(define matrix (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r rows]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r cols]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list 0)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! matrix (append (or matrix (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return matrix)
))
)
(define (knapsack w wt val n)
  (let/ec _return (begin
(define dp (create_matrix n w))
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define w_ 1)
      (let/ec _break (let loop ()
  (if (let ([__l w_] [__r w]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if wt (if (hash? wt) (hash-ref wt (- i 1) #f) (safe-index wt (int (- i 1)))) #f)] [__r w_]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(define include (let ([__l (if val (if (hash? val) (hash-ref val (- i 1) #f) (safe-index val (int (- i 1)))) #f)] [__r (if (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (- w_ (if wt (if (hash? wt) (hash-ref wt (- i 1) #f) (safe-index wt (int (- i 1)))) #f)) #f) (safe-index (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (int (- w_ (if wt (if (hash? wt) (hash-ref wt (- i 1) #f) (safe-index wt (int (- i 1)))) #f))))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define exclude (if (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) w_ #f) (safe-index (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (int w_))) #f))
(set! dp (list-set dp i (list-set (list-ref dp i) w_ (max_int include exclude))))
) (let ()
(set! dp (list-set dp i (list-set (list-ref dp i) w_ (if (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) w_ #f) (safe-index (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (int w_))) #f))))
))
      (set! w_ (let ([__l w_] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return dp)
))
)
(define (construct_solution dp wt i j optimal_set)
  (let/ec _return (begin
(if (and (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(if (equal? (if (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) j #f) (safe-index (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (int j))) #f) (if (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) j #f) (safe-index (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (int j))) #f)) (let ()
(_return (construct_solution dp wt (- i 1) j optimal_set))
) (let ()
(define with_prev (construct_solution dp wt (- i 1) (- j (if wt (if (hash? wt) (hash-ref wt (- i 1) #f) (safe-index wt (int (- i 1)))) #f)) optimal_set))
(_return (append (or with_prev (list)) (list i)))
))
) (void))
(_return optimal_set)
))
)
(define (knapsack_with_example_solution w wt val)
  (let/ec _return (begin
(define num_items (cond [(not wt) 0] [(string? wt) (string-length wt)] [(hash? wt) (hash-count wt)] [else (length wt)]))
(define dp_table (knapsack w wt val num_items))
(define optimal_val (if (if dp_table (if (hash? dp_table) (hash-ref dp_table num_items #f) (safe-index dp_table (int num_items))) #f) (if (hash? (if dp_table (if (hash? dp_table) (hash-ref dp_table num_items #f) (safe-index dp_table (int num_items))) #f)) (hash-ref (if dp_table (if (hash? dp_table) (hash-ref dp_table num_items #f) (safe-index dp_table (int num_items))) #f) w #f) (safe-index (if dp_table (if (hash? dp_table) (hash-ref dp_table num_items #f) (safe-index dp_table (int num_items))) #f) (int w))) #f))
(define subset (construct_solution dp_table wt num_items w (list)))
(_return (let ([h (make-hash)]) (hash-set! h "value" optimal_val) (hash-set! h "subset" subset) h))
))
)
(define (format_set xs)
  (let/ec _return (begin
(define res "{")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (string-append res (to-string (if xs (if (hash? xs) (hash-ref xs i #f) (safe-index xs (int i))) #f))))
      (if (let ([__l (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! res (string-append res ", "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! res (string-append res "}"))
(_return res)
))
)
(define val_list (list 3 2 4 4))
(define wt_list (list 4 3 2 3))
(define n 4)
(define w_cap 6)
(define dp_table (knapsack w_cap wt_list val_list n))
(define optimal_solution (if (if dp_table (if (hash? dp_table) (hash-ref dp_table n #f) (safe-index dp_table (int n))) #f) (if (hash? (if dp_table (if (hash? dp_table) (hash-ref dp_table n #f) (safe-index dp_table (int n))) #f)) (hash-ref (if dp_table (if (hash? dp_table) (hash-ref dp_table n #f) (safe-index dp_table (int n))) #f) w_cap #f) (safe-index (if dp_table (if (hash? dp_table) (hash-ref dp_table n #f) (safe-index dp_table (int n))) #f) (int w_cap))) #f))
(define example (knapsack_with_example_solution w_cap wt_list val_list))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(set! f (init_f n w_cap))
(displayln optimal_solution)
(displayln (mf_knapsack n wt_list val_list w_cap))
(displayln (string-append "optimal_value = " (to-string (if example (hash-ref example "value" #f) #f))))
(displayln (string-append "An optimal subset corresponding to the optimal value " (format_set (if example (hash-ref example "subset" #f) #f))))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
