;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (min3 a b c)
  (let/ec _return (begin
(define m a)
(if (< b m) (let ()
(set! m b)
) (void))
(if (< c m) (let ()
(set! m c)
) (void))
(_return m)
))
)
(define (helper_top_down word1 word2 dp i j)
  (let/ec _return (begin
(if (< i 0) (let ()
(_return (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (< j 0) (let ()
(_return (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (not (equal? (if (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) j #f) (list-ref (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) (int j))) #f) (- 0 1))) (let ()
(_return (if (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) j #f) (list-ref (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) (int j))) #f))
) (void))
(if (string=? (slice word1 i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (slice word2 j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(set! dp (list-set dp i (list-set (list-ref dp i) j (helper_top_down word1 word2 dp (- i 1) (- j 1)))))
) (let ()
(define insert (helper_top_down word1 word2 dp i (- j 1)))
(define delete (helper_top_down word1 word2 dp (- i 1) j))
(define replace (helper_top_down word1 word2 dp (- i 1) (- j 1)))
(set! dp (list-set dp i (list-set (list-ref dp i) j (let ([__l 1] [__r (min3 insert delete replace)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
(_return (if (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) j #f) (list-ref (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) (int j))) #f))
))
)
(define (min_dist_top_down word1 word2)
  (let/ec _return (begin
(define m (cond [(string? word1) (string-length word1)] [(hash? word1) (hash-count word1)] [else (length word1)]))
(define n (cond [(string? word2) (string-length word2)] [(hash? word2) (hash-count word2)] [else (length word2)]))
(define dp (list))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ m)
(define row (list))
(let/ec _break (let ([_2 0])
  (let loop ()
    (when (< _2 n)
(set! row (append row (list (- 0 1))))
      (set! _2 (+ _2 1))
      (loop)))
))
(set! dp (append dp (list row)))
      (set! _ (+ _ 1))
      (loop)))
))
(_return (helper_top_down word1 word2 dp (- m 1) (- n 1)))
))
)
(define (min_dist_bottom_up word1 word2)
  (let/ec _return (begin
(define m (cond [(string? word1) (string-length word1)] [(hash? word1) (hash-count word1)] [else (length word1)]))
(define n (cond [(string? word2) (string-length word2)] [(hash? word2) (hash-count word2)] [else (length word2)]))
(define dp (list))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define row (list))
(let/ec _break (let ([_2 0])
  (let loop ()
    (when (< _2 (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! row (append row (list 0)))
      (set! _2 (+ _2 1))
      (loop)))
))
(set! dp (append dp (list row)))
      (set! _ (+ _ 1))
      (loop)))
))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? i 0) (let ()
(set! dp (list-set dp i (list-set (list-ref dp i) j j)))
) (let ()
(if (equal? j 0) (let ()
(set! dp (list-set dp i (list-set (list-ref dp i) j i)))
) (let ()
(if (string=? (slice word1 (- i 1) i) (slice word2 (- j 1) j)) (let ()
(set! dp (list-set dp i (list-set (list-ref dp i) j (if (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f) (- j 1) #f) (list-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f) (int (- j 1)))) #f))))
) (let ()
(define insert (if (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) (- j 1) #f) (list-ref (if dp (if (hash? dp) (hash-ref dp i #f) (list-ref dp (int i))) #f) (int (- j 1)))) #f))
(define delete (if (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f) j #f) (list-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f) (int j))) #f))
(define replace (if (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f) (- j 1) #f) (list-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (list-ref dp (int (- i 1)))) #f) (int (- j 1)))) #f))
(set! dp (list-set dp i (list-set (list-ref dp i) j (let ([__l 1] [__r (min3 insert delete replace)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
))
))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(_return (if (if dp (if (hash? dp) (hash-ref dp m #f) (list-ref dp (int m))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp m #f) (list-ref dp (int m))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp m #f) (list-ref dp (int m))) #f) n #f) (list-ref (if dp (if (hash? dp) (hash-ref dp m #f) (list-ref dp (int m))) #f) (int n))) #f))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" (min_dist_top_down "intention" "execution")))
(displayln (format "~a" (min_dist_top_down "intention" "")))
(displayln (format "~a" (min_dist_top_down "" "")))
(displayln (format "~a" (min_dist_bottom_up "intention" "execution")))
(displayln (format "~a" (min_dist_bottom_up "intention" "")))
(displayln (format "~a" (min_dist_bottom_up "" "")))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
