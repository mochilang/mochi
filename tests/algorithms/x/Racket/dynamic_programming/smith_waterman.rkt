;; Generated by Mochi 0.10.64 on 2025-08-13 07:12 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (if (inexact? x) (real->decimal-string x) (format "~a" x))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (score_function source_char target_char match_score mismatch_score gap_score)
  (let/ec _return (begin
(if (or (string=? source_char "-") (string=? target_char "-")) (let ()
(_return gap_score)
) (void))
(if (string=? source_char target_char) (let ()
(_return match_score)
) (void))
(_return mismatch_score)
))
)
(define (smith_waterman query subject match_score mismatch_score gap_score)
  (let/ec _return (begin
(define q (upper query))
(define s (upper subject))
(define m (cond [(not q) 0] [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)]))
(define n (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(define score (list))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define row (list))
(let/ec _break (let ([_2 0])
  (let loop ()
    (when (< _2 (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! row (append (or row (list)) (list 0)))
      (set! _2 (+ _2 1))
      (loop)))
))
(set! score (append (or score (list)) (list row)))
      (set! _ (+ _ 1))
      (loop)))
))
(let/ec _break (let ([i 1])
  (let loop ()
    (when (< i (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let ([j 1])
  (let loop ()
    (when (< j (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define qc (slice q (- i 1) i))
(define sc (slice s (- j 1) j))
(define diag (let ([__l (if (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (if (hash? (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f)) (hash-ref (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (- j 1) #f) (safe-index (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (int (- j 1)))) #f)] [__r (score_function qc sc match_score mismatch_score gap_score)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define delete (let ([__l (if (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (if (hash? (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f)) (hash-ref (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) j #f) (safe-index (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (int j))) #f)] [__r gap_score]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define insert (let ([__l (if (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (if (hash? (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f)) (hash-ref (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (- j 1) #f) (safe-index (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (int (- j 1)))) #f)] [__r gap_score]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define max_val 0)
(if (let ([__l diag] [__r max_val]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! max_val diag)
) (void))
(if (let ([__l delete] [__r max_val]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! max_val delete)
) (void))
(if (let ([__l insert] [__r max_val]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! max_val insert)
) (void))
(set! score (list-set score i (list-set (list-ref score i) j max_val)))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(_return score)
))
)
(define (traceback score query subject match_score mismatch_score gap_score)
  (let/ec _return (begin
(define q (upper query))
(define s (upper subject))
(define max_value 0)
(define i_max 0)
(define j_max 0)
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not score) 0] [(string? score) (string-length score)] [(hash? score) (hash-count score)] [else (length score)]))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j (cond [(not (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f)) 0] [(string? (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f)) (string-length (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f))] [(hash? (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f)) (hash-count (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f))] [else (length (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f))]))
(if (let ([__l (if (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (if (hash? (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f)) (hash-ref (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) j #f) (safe-index (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (int j))) #f)] [__r max_value]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! max_value (if (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (if (hash? (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f)) (hash-ref (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) j #f) (safe-index (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (int j))) #f))
(set! i_max i)
(set! j_max j)
) (void))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(define i i_max)
(define j j_max)
(define align1 "")
(define align2 "")
(define gap_penalty (score_function "-" "-" match_score mismatch_score gap_score))
(if (or (equal? i 0) (equal? j 0)) (let ()
(_return "")
) (void))
(let/ec _break (let loop ()
  (if (and (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (begin
    (let/ec _cont
      (define qc (slice q (- i 1) i))
      (define sc (slice s (- j 1) j))
      (if (equal? (if (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (if (hash? (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f)) (hash-ref (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) j #f) (safe-index (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (int j))) #f) (let ([__l (if (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (if (hash? (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f)) (hash-ref (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (- j 1) #f) (safe-index (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (int (- j 1)))) #f)] [__r (score_function qc sc match_score mismatch_score gap_score)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(set! align1 (string-append qc align1))
(set! align2 (string-append sc align2))
(set! i (- i 1))
(set! j (- j 1))
) (let ()
(if (equal? (if (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (if (hash? (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f)) (hash-ref (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) j #f) (safe-index (if score (if (hash? score) (hash-ref score i #f) (safe-index score (int i))) #f) (int j))) #f) (let ([__l (if (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (if (hash? (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f)) (hash-ref (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) j #f) (safe-index (if score (if (hash? score) (hash-ref score (- i 1) #f) (safe-index score (int (- i 1)))) #f) (int j))) #f)] [__r gap_penalty]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(set! align1 (string-append qc align1))
(set! align2 (string-append "-" align2))
(set! i (- i 1))
) (let ()
(set! align1 (string-append "-" align1))
(set! align2 (string-append sc align2))
(set! j (- j 1))
))
))
    )
    (loop)) (void))))
(_return (string-append (string-append align1 "\n") align2))
))
)
(define query "HEAGAWGHEE")
(define subject "PAWHEAE")
(define score (smith_waterman query subject 1 (- 1) (- 2)))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (traceback score query subject 1 (- 1) (- 2)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
