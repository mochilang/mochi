;; Generated by Mochi 0.10.62 on 2025-08-09 16:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (solution)
  (let/ec _return (begin
(define triangle (list (list 75) (list 95 64) (list 17 47 82) (list 18 35 87 10) (list 20 4 82 47 65) (list 19 1 23 75 3 34) (list 88 2 77 73 7 63 67) (list 99 65 4 28 6 16 70 92) (list 41 41 26 56 83 40 80 70 33) (list 41 48 72 33 47 32 37 16 94 29) (list 53 71 44 65 25 43 91 52 97 51 14) (list 70 11 33 28 77 73 17 78 39 68 17 57) (list 91 71 52 38 17 14 91 43 58 50 27 29 48) (list 63 66 4 68 89 53 67 30 73 16 69 87 40 31) (list 4 62 98 27 23 9 70 98 73 93 38 53 60 4 23)))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(not triangle) 0] [(string? triangle) (string-length triangle)] [(hash? triangle) (hash-count triangle)] [else (length triangle)])) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j (cond [(not (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f)) 0] [(string? (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f)) (string-length (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f))] [(hash? (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f)) (hash-count (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f))] [else (length (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f))])) (begin
    (let/ec _cont
      (define prev_row (if triangle (if (hash? triangle) (hash-ref triangle (- i 1) #f) (safe-index triangle (int (- i 1)))) #f))
      (define number1 (if (not (equal? j (cond [(not prev_row) 0] [(string? prev_row) (string-length prev_row)] [(hash? prev_row) (hash-count prev_row)] [else (length prev_row)]))) (if prev_row (if (hash? prev_row) (hash-ref prev_row j #f) (safe-index prev_row (int j))) #f) 0))
      (define number2 (if (> j 0) (if prev_row (if (hash? prev_row) (hash-ref prev_row (- j 1) #f) (safe-index prev_row (int (- j 1)))) #f) 0))
      (define max_val (if (> number1 number2) number1 number2))
      (set! triangle (list-set triangle i (list-set (list-ref triangle i) j (let ([__l (if (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f) (if (hash? (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f)) (hash-ref (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f) j #f) (safe-index (if triangle (if (hash? triangle) (hash-ref triangle i #f) (safe-index triangle (int i))) #f) (int j))) #f)] [__r max_val]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define last (if triangle (if (hash? triangle) (hash-ref triangle (- (cond [(not triangle) 0] [(string? triangle) (string-length triangle)] [(hash? triangle) (hash-count triangle)] [else (length triangle)]) 1) #f) (safe-index triangle (int (- (cond [(not triangle) 0] [(string? triangle) (string-length triangle)] [(hash? triangle) (hash-count triangle)] [else (length triangle)]) 1)))) #f))
(define k 0)
(define best 0)
(let/ec _break (let loop ()
  (if (< k (cond [(not last) 0] [(string? last) (string-length last)] [(hash? last) (hash-count last)] [else (length last)])) (begin
    (let/ec _cont
      (if (> (if last (if (hash? last) (hash-ref last k #f) (safe-index last (int k))) #f) best) (let ()
(set! best (if last (if (hash? last) (hash-ref last k #f) (safe-index last (int k))) #f))
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return best)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string (solution)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
