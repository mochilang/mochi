;; Generated by Mochi 0.10.64 on 2025-08-12 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (gcd a b)
  (let/ec _return (begin
(define x (if (let ([__l a] [__r 0]) (< (int __l) (int __r))) (- a) a))
(define y (if (let ([__l b] [__r 0]) (< (int __l) (int __r))) (- b) b))
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (begin
    (let/ec _cont
      (define t (modulo x y))
      (set! x y)
      (set! y t)
    )
    (loop)) (void))))
(_return x)
))
)
(define (is_digit_cancelling num den)
  (let/ec _return (begin
(if (let ([__l num] [__r den]) (>= (int __l) (int __r))) (let ()
(_return #f)
) (void))
(define num_unit (modulo num 10))
(define num_tens (floor (/ num 10)))
(define den_unit (modulo den 10))
(define den_tens (floor (/ den 10)))
(if (not (equal? num_unit den_tens)) (let ()
(_return #f)
) (void))
(if (equal? den_unit 0) (let ()
(_return #f)
) (void))
(_return (equal? (* num den_unit) (* num_tens den)))
))
)
(define (find_fractions)
  (let/ec _return (begin
(define sols (list))
(define num 10)
(let/ec _break (let loop ()
  (if (let ([__l num] [__r 100]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define den (let ([__l num] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (let ([__l den] [__r 100]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (is_digit_cancelling num den) (let ()
(set! sols (append (or sols (list)) (list (let ([h (make-hash)]) (hash-set! h "num" num) (hash-set! h "den" den) h))))
) (void))
      (set! den (let ([__l den] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! num (let ([__l num] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sols)
))
)
(define (solution)
  (let/ec _return (begin
(define fracs (find_fractions))
(define num_prod 1)
(define den_prod 1)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not fracs) 0] [(string? fracs) (string-length fracs)] [(hash? fracs) (hash-count fracs)] [else (length fracs)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define f (if fracs (if (hash? fracs) (hash-ref fracs i #f) (safe-index fracs (int i))) #f))
      (set! num_prod (* num_prod (if f (hash-ref f "num" #f) #f)))
      (set! den_prod (* den_prod (if f (hash-ref f "den" #f) #f)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define g (gcd num_prod den_prod))
(_return (floor (/ den_prod g)))
))
)
(define (main)
  (let/ec _return (begin
(displayln (to-string (solution)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
