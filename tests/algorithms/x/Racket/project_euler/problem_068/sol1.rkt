;; Generated by Mochi 0.10.69 on 2025-08-22 14:19 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (if (and (inexact? x) (integer? x))
         (number->string (inexact->exact x))
         (number->string x))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (range_desc start end)
  (let/ec _return (begin
(define res (list))
(define i start)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r end]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list i)))
      (set! i (- i 1))
    )
    (loop)) (void))))
(_return res)
))
)
(define (range_asc start end)
  (let/ec _return (begin
(define res (list))
(define i start)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r end]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list i)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (concat_lists a b)
  (let/ec _return (begin
(define res a)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (swap xs i j)
  (let/ec _return (begin
(define res (list))
(define k 0)
(let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? k i) (let ()
(set! res (append (or res (list)) (list (if xs (if (hash? xs) (hash-ref xs j #f) (safe-index xs (int j))) #f))))
) (let ()
(if (equal? k j) (let ()
(set! res (append (or res (list)) (list (if xs (if (hash? xs) (hash-ref xs i #f) (safe-index xs (int i))) #f))))
) (let ()
(set! res (append (or res (list)) (list (if xs (if (hash? xs) (hash-ref xs k #f) (safe-index xs (int k))) #f))))
))
))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (generate_gon_ring gon_side perm)
  (let/ec _return (begin
(define result (list))
(set! result (append (or result (list)) (list (if perm (if (hash? perm) (hash-ref perm 0 #f) (safe-index perm (int 0))) #f))))
(set! result (append (or result (list)) (list (if perm (if (hash? perm) (hash-ref perm 1 #f) (safe-index perm (int 1))) #f))))
(set! result (append (or result (list)) (list (if perm (if (hash? perm) (hash-ref perm 2 #f) (safe-index perm (int 2))) #f))))
(define extended (append (or perm (list)) (list (if perm (if (hash? perm) (hash-ref perm 1 #f) (safe-index perm (int 1))) #f))))
(define magic_number (if (let ([__l gon_side] [__r 5]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) 1 2))
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (let ([__l (floor (/ (cond [(not extended) 0] [(string? extended) (string-length extended)] [(hash? extended) (hash-count extended)] [else (length extended)]) 3))] [__r magic_number]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (append (or result (list)) (list (if extended (if (hash? extended) (hash-ref extended (let ([__l (* 2 i)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index extended (int (let ([__l (* 2 i)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
      (set! result (append (or result (list)) (list (if result (if (hash? result) (hash-ref result (- (* 3 i) 1) #f) (safe-index result (int (- (* 3 i) 1)))) #f))))
      (set! result (append (or result (list)) (list (if extended (if (hash? extended) (hash-ref extended (let ([__l (* 2 i)] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index extended (int (let ([__l (* 2 i)] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (min_outer numbers)
  (let/ec _return (begin
(define min_val (if numbers (if (hash? numbers) (hash-ref numbers 0 #f) (safe-index numbers (int 0))) #f))
(define i 3)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not numbers) 0] [(string? numbers) (string-length numbers)] [(hash? numbers) (hash-count numbers)] [else (length numbers)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if numbers (if (hash? numbers) (hash-ref numbers i #f) (safe-index numbers (int i))) #f)] [__r min_val]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! min_val (if numbers (if (hash? numbers) (hash-ref numbers i #f) (safe-index numbers (int i))) #f))
) (void))
      (set! i (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return min_val)
))
)
(define (is_magic_gon numbers)
  (let/ec _return (begin
(if (not (equal? (modulo (cond [(not numbers) 0] [(string? numbers) (string-length numbers)] [(hash? numbers) (hash-count numbers)] [else (length numbers)]) 3) 0)) (let ()
(_return #f)
) (void))
(if (not (equal? (min_outer numbers) (if numbers (if (hash? numbers) (hash-ref numbers 0 #f) (safe-index numbers (int 0))) #f))) (let ()
(_return #f)
) (void))
(define total (let ([__l (let ([__l (if numbers (if (hash? numbers) (hash-ref numbers 0 #f) (safe-index numbers (int 0))) #f)] [__r (if numbers (if (hash? numbers) (hash-ref numbers 1 #f) (safe-index numbers (int 1))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if numbers (if (hash? numbers) (hash-ref numbers 2 #f) (safe-index numbers (int 2))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define i 3)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not numbers) 0] [(string? numbers) (string-length numbers)] [(hash? numbers) (hash-count numbers)] [else (length numbers)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? (let ([__l (let ([__l (if numbers (if (hash? numbers) (hash-ref numbers i #f) (safe-index numbers (int i))) #f)] [__r (if numbers (if (hash? numbers) (hash-ref numbers (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index numbers (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if numbers (if (hash? numbers) (hash-ref numbers (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index numbers (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) total)) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (permute_search nums start gon_side current_max)
  (let/ec _return (begin
(if (equal? start (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let ()
(define ring (generate_gon_ring gon_side nums))
(if (is_magic_gon ring) (let ()
(define s "")
(define k 0)
(let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not ring) 0] [(string? ring) (string-length ring)] [(hash? ring) (hash-count ring)] [else (length ring)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! s (string-append s (to-string (if ring (if (hash? ring) (hash-ref ring k #f) (safe-index ring (int k))) #f))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (string>? s current_max) (let ()
(_return s)
) (void))
) (void))
(_return current_max)
) (void))
(define res current_max)
(define i start)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define swapped (swap nums start i))
      (define candidate (permute_search swapped (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) gon_side res))
      (if (string>? candidate res) (let ()
(set! res candidate)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (solution gon_side)
  (let/ec _return (begin
(if (or (let ([__l gon_side] [__r 3]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l gon_side] [__r 5]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(_return "")
) (void))
(define small (range_desc (let ([__l gon_side] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
(define big (range_asc (let ([__l gon_side] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (* gon_side 2)))
(define numbers (concat_lists small big))
(define max_str (permute_search numbers 0 gon_side ""))
(_return max_str)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (solution 5))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
