;; Generated by Mochi 0.10.62 on 2025-08-09 16:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define N (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "73167176531330624919225119674426574742355349194934" "96983520312774506326239578318016984801869478851843") "85861560789112949495459501737958331952853208805511") "12540698747158523863050715693290963295227443043557") "66896648950445244523161731856403098711121722383113") "62229893423380308135336276614282806444486645238749") "30358907296290491560440772390713810515859307960866") "70172427121883998797908792274921901699720888093776") "65727333001053367881220235421809751254540594752243") "52584907711670556013604839586446706324415722155397") "53697817977846174064955149290862569321978468622482") "83972241375657056057490261407972968652414535100474") "82166370484403199890008895243450658541227588666881") "16427171479924442928230863465674813919123162824586") "17866458359124566529476545682848912883142607690042") "24219022671055626321111109370544217506941658960408") "07198403850962455444362981230987879927244284909188") "84580156166097919133875499200524063689912560717606") "05886116467109405077541002256983155200055935729725") "71636269561882670428252483600823257530420752963450"))
(define (solution n)
  (let/ec _return (begin
(define max_product 0)
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (- (cond [(not n) 0] [(string? n) (string-length n)] [(hash? n) (hash-count n)] [else (length n)]) 13)) (begin
    (let/ec _cont
      (define product 1)
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j 13) (begin
    (let/ec _cont
      (set! product (* product (int (substring n (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (+ (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (> product max_product) (let ()
(set! max_product product)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return max_product)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (solution "13978431290823798458352374"))
(displayln (solution "13978431295823798458352374"))
(displayln (solution "1397843129582379841238352374"))
(displayln (solution N))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
