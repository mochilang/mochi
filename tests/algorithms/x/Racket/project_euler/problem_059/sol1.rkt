;; Generated by Mochi 0.10.70 on 2025-08-22 23:09 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/project_euler/problem_059")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (if (and (inexact? x) (integer? x))
         (number->string (inexact->exact x))
         (number->string x))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (xor a b)
  (let/ec _return (begin
(define res 0)
(define bit 1)
(define x a)
(define y b)
(let/ec _break (let loop ()
  (if (or (let ([__l x] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ([__l y] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (begin
    (let/ec _cont
      (define abit (modulo x 2))
      (define bbit (modulo y 2))
      (if (not (equal? abit bbit)) (let ()
(set! res (let ([__l res] [__r bit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! x (floor (/ x 2)))
      (set! y (floor (/ y 2)))
      (set! bit (* bit 2))
    )
    (loop)) (void))))
(_return res)
))
)
(define ascii_chars " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
(define (chr code)
  (let/ec _return (begin
(if (equal? code 10) (let ()
(_return "\n")
) (void))
(if (equal? code 13) (let ()
(_return "\r")
) (void))
(if (equal? code 9) (let ()
(_return "\t")
) (void))
(if (and (let ([__l code] [__r 32]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l code] [__r 127]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(_return (slice ascii_chars (- code 32) (- code 31)))
) (void))
(_return "")
))
)
(define (ord ch)
  (let/ec _return (begin
(if (string=? ch "\n") (let ()
(_return 10)
) (void))
(if (string=? ch "\r") (let ()
(_return 13)
) (void))
(if (string=? ch "\t") (let ()
(_return 9)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not ascii_chars) 0] [(string? ascii_chars) (string-length ascii_chars)] [(hash? ascii_chars) (hash-count ascii_chars)] [else (length ascii_chars)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (slice ascii_chars i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return (let ([__l 32] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return 0)
))
)
(define (is_valid_ascii code)
  (let/ec _return (begin
(if (and (let ([__l code] [__r 32]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l code] [__r 126]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))]))) (let ()
(_return #t)
) (void))
(if (or (or (equal? code 9) (equal? code 10)) (equal? code 13)) (let ()
(_return #t)
) (void))
(_return #f)
))
)
(define LOWERCASE_INTS (list))
(define i 97)
(define COMMON_WORDS (list))
(define ciphertext (list))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 122]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! LOWERCASE_INTS (append (or LOWERCASE_INTS (list)) (list i)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! COMMON_WORDS (list "the" "be" "to" "of" "and" "in" "that" "have"))
(define (try_key ciphertext key)
  (let/ec _return (begin
(define decoded "")
(define i 0)
(define klen (cond [(not key) 0] [(string? key) (string-length key)] [(hash? key) (hash-count key)] [else (length key)]))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not ciphertext) 0] [(string? ciphertext) (string-length ciphertext)] [(hash? ciphertext) (hash-count ciphertext)] [else (length ciphertext)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define decodedchar (xor (if ciphertext (if (hash? ciphertext) (hash-ref ciphertext i #f) (safe-index ciphertext (int i))) #f) (if key (if (hash? key) (hash-ref key (modulo i klen) #f) (safe-index key (int (modulo i klen)))) #f)))
      (if (not (is_valid_ascii decodedchar)) (let ()
(_return #f)
) (void))
      (set! decoded (string-append decoded (chr decodedchar)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return decoded)
))
)
(define (filter_valid_chars ciphertext)
  (let/ec _return (begin
(define possibles (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not LOWERCASE_INTS) 0] [(string? LOWERCASE_INTS) (string-length LOWERCASE_INTS)] [(hash? LOWERCASE_INTS) (hash-count LOWERCASE_INTS)] [else (length LOWERCASE_INTS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not LOWERCASE_INTS) 0] [(string? LOWERCASE_INTS) (string-length LOWERCASE_INTS)] [(hash? LOWERCASE_INTS) (hash-count LOWERCASE_INTS)] [else (length LOWERCASE_INTS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not LOWERCASE_INTS) 0] [(string? LOWERCASE_INTS) (string-length LOWERCASE_INTS)] [(hash? LOWERCASE_INTS) (hash-count LOWERCASE_INTS)] [else (length LOWERCASE_INTS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define key (list (if LOWERCASE_INTS (if (hash? LOWERCASE_INTS) (hash-ref LOWERCASE_INTS i #f) (safe-index LOWERCASE_INTS (int i))) #f) (if LOWERCASE_INTS (if (hash? LOWERCASE_INTS) (hash-ref LOWERCASE_INTS j #f) (safe-index LOWERCASE_INTS (int j))) #f) (if LOWERCASE_INTS (if (hash? LOWERCASE_INTS) (hash-ref LOWERCASE_INTS k #f) (safe-index LOWERCASE_INTS (int k))) #f)))
      (define decoded (try_key ciphertext key))
      (if decoded (let ()
(set! possibles (append (or possibles (list)) (list decoded)))
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return possibles)
))
)
(define (contains s sub)
  (let/ec _return (begin
(define n (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(define m (cond [(not sub) 0] [(string? sub) (string-length sub)] [(hash? sub) (hash-count sub)] [else (length sub)]))
(if (equal? m 0) (let ()
(_return #t)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (- n m)]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j 0)
      (define is_match #t)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r m]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (string=? (if (hash? s) (hash-ref s (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (substring s (int (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (+ (int (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 1))) (if (hash? sub) (hash-ref sub j #f) (substring sub (int j) (+ (int j) 1))))) (let ()
(set! is_match #f)
(_break)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if is_match (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (filter_common_word possibles common_word)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not possibles) 0] [(string? possibles) (string-length possibles)] [(hash? possibles) (hash-count possibles)] [else (length possibles)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p (if possibles (if (hash? possibles) (hash-ref possibles i #f) (safe-index possibles (int i))) #f))
      (if (contains (lower p) common_word) (let ()
(set! res (append (or res (list)) (list p)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (solution ciphertext)
  (let/ec _return (begin
(define possibles (filter_valid_chars ciphertext))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not COMMON_WORDS) 0] [(string? COMMON_WORDS) (string-length COMMON_WORDS)] [(hash? COMMON_WORDS) (hash-count COMMON_WORDS)] [else (length COMMON_WORDS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define word (if COMMON_WORDS (if (hash? COMMON_WORDS) (hash-ref COMMON_WORDS i #f) (safe-index COMMON_WORDS (int i))) #f))
      (set! possibles (filter_common_word possibles word))
      (if (equal? (cond [(not possibles) 0] [(string? possibles) (string-length possibles)] [(hash? possibles) (hash-count possibles)] [else (length possibles)]) 1) (let ()
(_break)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define decoded_text (if possibles (if (hash? possibles) (hash-ref possibles 0 #f) (safe-index possibles (int 0))) #f))
(define sum 0)
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not decoded_text) 0] [(string? decoded_text) (string-length decoded_text)] [(hash? decoded_text) (hash-count decoded_text)] [else (length decoded_text)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (ord (slice decoded_text j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(set! ciphertext (list 17 6 1 69 12 1 69 26 11 69 1 2 69 15 10 1 78 13 11 78 16 13 15 16 69 6 5 19 11))
(displayln (to-string (solution ciphertext)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
