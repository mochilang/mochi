;; Generated by Mochi 0.10.62 on 2025-08-09 16:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define grid (list (list 8 2 22 97 38 15 0 40 0 75 4 5 7 78 52 12 50 77 91 8) (list 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 4 56 62 0) (list 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 3 49 13 36 65) (list 52 70 95 23 4 60 11 42 69 24 68 56 1 32 56 71 37 2 36 91) (list 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80) (list 24 47 32 60 99 3 45 2 44 75 33 53 78 36 84 20 35 17 12 50) (list 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70) (list 67 26 20 68 2 62 12 20 95 63 94 39 63 8 40 91 66 49 94 21) (list 24 55 58 5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72) (list 21 36 23 9 75 0 76 44 20 45 35 14 0 61 33 97 34 31 33 95) (list 78 17 53 28 22 75 31 67 15 94 3 80 4 62 16 14 9 53 56 92) (list 16 39 5 42 96 35 31 47 55 58 88 24 0 17 54 24 36 29 85 57) (list 86 56 0 48 35 71 89 7 5 44 44 37 44 60 21 58 51 54 17 58) (list 19 80 81 68 5 94 47 69 28 73 92 13 86 52 17 77 4 89 55 40) (list 4 52 8 83 97 35 99 16 7 97 57 32 16 26 26 79 33 27 98 66) (list 88 36 68 87 57 62 20 72 3 46 33 67 46 55 12 32 63 93 53 69) (list 4 42 16 73 38 25 39 11 24 94 72 18 8 46 29 32 40 62 76 36) (list 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 4 36 16) (list 20 73 35 29 78 31 90 1 74 31 49 71 48 86 81 16 23 57 5 54) (list 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52 1 89 19 67 48)))
(define (max_product_four grid)
  (let/ec _return (begin
(define maximum 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j 17) (begin
    (let/ec _cont
      (define temp (* (* (* (if (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) j #f) (safe-index (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (int j))) #f) (if (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (if (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (let ([__l j] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (int (let ([__l j] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (if (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (let ([__l j] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (int (let ([__l j] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
      (if (> temp maximum) (let ()
(set! maximum temp)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i 17) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j 20) (begin
    (let/ec _cont
      (define temp (* (* (* (if (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) j #f) (safe-index (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (int j))) #f) (if (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) j #f) (safe-index (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int j))) #f)) (if (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) j #f) (safe-index (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int j))) #f)) (if (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) j #f) (safe-index (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int j))) #f)))
      (if (> temp maximum) (let ()
(set! maximum temp)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i 17) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j 17) (begin
    (let/ec _cont
      (define temp (* (* (* (if (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) j #f) (safe-index (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (int j))) #f) (if (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (if (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l j] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l j] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (if (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l j] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l j] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
      (if (> temp maximum) (let ()
(set! maximum temp)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i 17) (begin
    (let/ec _cont
      (define j 3)
      (let/ec _break (let loop ()
  (if (< j 20) (begin
    (let/ec _cont
      (define temp (* (* (* (if (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) j #f) (safe-index (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (int j))) #f) (if (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (- j 1) #f) (safe-index (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (- j 1)))) #f)) (if (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (- j 2) #f) (safe-index (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (- j 2)))) #f)) (if (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (- j 3) #f) (safe-index (if grid (if (hash? grid) (hash-ref grid (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index grid (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (- j 3)))) #f)))
      (if (> temp maximum) (let ()
(set! maximum temp)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return maximum)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string (max_product_four grid)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
