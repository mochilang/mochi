;; Generated by Mochi 0.10.64 on 2025-08-12 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (parse_int s)
  (let/ec _return (begin
(define value 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! value (let ([__l (* value 10)] [__r (int (substring s i (+ i 1)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return value)
))
)
(define (digit_replacements number)
  (let/ec _return (begin
(define num_str (to-string number))
(define counts (list 0 0 0 0 0 0 0 0 0 0))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not num_str) 0] [(string? num_str) (string-length num_str)] [(hash? num_str) (hash-count num_str)] [else (length num_str)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define d (int (substring num_str i (+ i 1))))
      (set! counts (list-set counts (int d) (let ([__l (if counts (if (hash? counts) (hash-ref counts d #f) (safe-index counts (int d))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define result (list))
(define digits "0123456789")
(define digit 0)
(let/ec _break (let loop ()
  (if (let ([__l digit] [__r 10]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l (if counts (if (hash? counts) (hash-ref counts digit #f) (safe-index counts (int digit))) #f)] [__r 1]) (> (int __l) (int __r))) (let ()
(define family (list))
(define repl 0)
(let/ec _break (let loop ()
  (if (let ([__l repl] [__r 10]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define new_str "")
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not num_str) 0] [(string? num_str) (string-length num_str)] [(hash? num_str) (hash-count num_str)] [else (length num_str)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define c (substring num_str j (+ j 1)))
      (if (string=? c (substring digits digit (+ digit 1))) (let ()
(set! new_str (string-append new_str (substring digits repl (+ repl 1))))
) (let ()
(set! new_str (string-append new_str c))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! family (append (or family (list)) (list (parse_int new_str))))
      (set! repl (let ([__l repl] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! result (append (or result (list)) (list family)))
) (void))
      (set! digit (let ([__l digit] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (is_prime num)
  (let/ec _return (begin
(if (let ([__l num] [__r 2]) (< (int __l) (int __r))) (let ()
(_return #f)
) (void))
(if (equal? (modulo num 2) 0) (let ()
(_return (equal? num 2))
) (void))
(define i 3)
(let/ec _break (let loop ()
  (if (let ([__l (* i i)] [__r num]) (<= (int __l) (int __r))) (begin
    (let/ec _cont
      (if (equal? (modulo num i) 0) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (solution family_length)
  (let/ec _return (begin
(define candidate 121313)
(if (not (is_prime candidate)) (let ()
(_return (- 1))
) (void))
(define reps (digit_replacements candidate))
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not reps) 0] [(string? reps) (string-length reps)] [(hash? reps) (hash-count reps)] [else (length reps)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define family (if reps (if (hash? reps) (hash-ref reps r #f) (safe-index reps (int r))) #f))
      (define count 0)
      (define min_prime 0)
      (define first #t)
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not family) 0] [(string? family) (string-length family)] [(hash? family) (hash-count family)] [else (length family)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define num (if family (if (hash? family) (hash-ref family i #f) (safe-index family (int i))) #f))
      (if (is_prime num) (let ()
(if first (let ()
(set! min_prime num)
(set! first #f)
) (let ()
(if (let ([__l num] [__r min_prime]) (< (int __l) (int __r))) (let ()
(set! min_prime num)
) (void))
))
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (equal? count family_length) (let ()
(_return min_prime)
) (void))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (- 1))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string (solution 8)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
