;; Generated by Mochi 0.10.64 on 2025-08-12 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (is_prime number)
  (let/ec _return (begin
(if (and (let ([__l 1] [__r number]) (< (int __l) (int __r))) (let ([__l number] [__r 4]) (< (int __l) (int __r)))) (let ()
(_return #t)
) (void))
(if (or (or (let ([__l number] [__r 2]) (< (int __l) (int __r))) (equal? (modulo number 2) 0)) (equal? (modulo number 3) 0)) (let ()
(_return #f)
) (void))
(define i 5)
(let/ec _break (let loop ()
  (if (let ([__l (* i i)] [__r number]) (<= (int __l) (int __r))) (begin
    (let/ec _cont
      (if (or (equal? (modulo number i) 0) (equal? (modulo number (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 0)) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 6]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (search target arr)
  (let/ec _return (begin
(define left 0)
(define right (- (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1))
(let/ec _break (let loop ()
  (if (let ([__l left] [__r right]) (<= (int __l) (int __r))) (begin
    (let/ec _cont
      (define middle (floor (/ (let ([__l left] [__r right]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2)))
      (if (equal? (if arr (if (hash? arr) (hash-ref arr middle #f) (safe-index arr (int middle))) #f) target) (let ()
(_return #t)
) (void))
      (if (let ([__l (if arr (if (hash? arr) (hash-ref arr middle #f) (safe-index arr (int middle))) #f)] [__r target]) (< (int __l) (int __r))) (let ()
(set! left (let ([__l middle] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! right (- middle 1))
))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (sort_int xs)
  (let/ec _return (begin
(define arr xs)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l (if arr (if (hash? arr) (hash-ref arr j #f) (safe-index arr (int j))) #f)] [__r (if arr (if (hash? arr) (hash-ref arr i #f) (safe-index arr (int i))) #f)]) (< (int __l) (int __r))) (let ()
(define tmp (if arr (if (hash? arr) (hash-ref arr i #f) (safe-index arr (int i))) #f))
(set! arr (list-set arr (int i) (if arr (if (hash? arr) (hash-ref arr j #f) (safe-index arr (int j))) #f)))
(set! arr (list-set arr (int j) tmp))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return arr)
))
)
(define (permutations_of_number n)
  (let/ec _return (begin
(define s (to-string n))
(define d (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! d (append (or d (list)) (list (int (substring s i (+ i 1))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define res (list))
(define a 0)
(let/ec _break (let loop ()
  (if (let ([__l a] [__r (cond [(not d) 0] [(string? d) (string-length d)] [(hash? d) (hash-count d)] [else (length d)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define b 0)
      (let/ec _break (let loop ()
  (if (let ([__l b] [__r (cond [(not d) 0] [(string? d) (string-length d)] [(hash? d) (hash-count d)] [else (length d)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (not (equal? b a)) (let ()
(define c 0)
(let/ec _break (let loop ()
  (if (let ([__l c] [__r (cond [(not d) 0] [(string? d) (string-length d)] [(hash? d) (hash-count d)] [else (length d)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (and (not (equal? c a)) (not (equal? c b))) (let ()
(define e 0)
(let/ec _break (let loop ()
  (if (let ([__l e] [__r (cond [(not d) 0] [(string? d) (string-length d)] [(hash? d) (hash-count d)] [else (length d)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (and (and (not (equal? e a)) (not (equal? e b))) (not (equal? e c))) (let ()
(define val (let ([__l (let ([__l (let ([__l (* (if d (if (hash? d) (hash-ref d a #f) (safe-index d (int a))) #f) 1000)] [__r (* (if d (if (hash? d) (hash-ref d b #f) (safe-index d (int b))) #f) 100)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (if d (if (hash? d) (hash-ref d c #f) (safe-index d (int c))) #f) 10)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if d (if (hash? d) (hash-ref d e #f) (safe-index d (int e))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! res (append (or res (list)) (list val)))
) (void))
      (set! e (let ([__l e] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (void))
      (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (void))
      (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (abs_int x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0]) (< (int __l) (int __r))) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (contains_int xs v)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (equal? (if xs (if (hash? xs) (hash-ref xs i #f) (safe-index xs (int i))) #f) v) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (solution)
  (let/ec _return (begin
(define prime_list (list))
(define n 1001)
(let/ec _break (let loop ()
  (if (let ([__l n] [__r 10000]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (is_prime n) (let ()
(set! prime_list (append (or prime_list (list)) (list n)))
) (void))
      (set! n (let ([__l n] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define candidates (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not prime_list) 0] [(string? prime_list) (string-length prime_list)] [(hash? prime_list) (hash-count prime_list)] [else (length prime_list)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define number (if prime_list (if (hash? prime_list) (hash-ref prime_list i #f) (safe-index prime_list (int i))) #f))
      (define tmp (list))
      (define perms (permutations_of_number number))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not perms) 0] [(string? perms) (string-length perms)] [(hash? perms) (hash-count perms)] [else (length perms)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define prime (if perms (if (hash? perms) (hash-ref perms j #f) (safe-index perms (int j))) #f))
      (if (and (not (equal? (modulo prime 2) 0)) (search prime prime_list)) (let ()
(set! tmp (append (or tmp (list)) (list prime)))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! tmp (sort_int tmp))
      (if (let ([__l (cond [(not tmp) 0] [(string? tmp) (string-length tmp)] [(hash? tmp) (hash-count tmp)] [else (length tmp)])] [__r 3]) (>= (int __l) (int __r))) (let ()
(set! candidates (append (or candidates (list)) (list tmp)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define passed (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not candidates) 0] [(string? candidates) (string-length candidates)] [(hash? candidates) (hash-count candidates)] [else (length candidates)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define candidate (if candidates (if (hash? candidates) (hash-ref candidates i #f) (safe-index candidates (int i))) #f))
      (define found #f)
      (define a 0)
      (let/ec _break (let loop ()
  (if (let ([__l a] [__r (cond [(not candidate) 0] [(string? candidate) (string-length candidate)] [(hash? candidate) (hash-count candidate)] [else (length candidate)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define b (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (let ([__l b] [__r (cond [(not candidate) 0] [(string? candidate) (string-length candidate)] [(hash? candidate) (hash-count candidate)] [else (length candidate)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define c (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (let ([__l c] [__r (cond [(not candidate) 0] [(string? candidate) (string-length candidate)] [(hash? candidate) (hash-count candidate)] [else (length candidate)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define x (if candidate (if (hash? candidate) (hash-ref candidate a #f) (safe-index candidate (int a))) #f))
      (define y (if candidate (if (hash? candidate) (hash-ref candidate b #f) (safe-index candidate (int b))) #f))
      (define z (if candidate (if (hash? candidate) (hash-ref candidate c #f) (safe-index candidate (int c))) #f))
      (if (and (and (and (equal? (abs_int (- x y)) (abs_int (- y z))) (not (equal? x y))) (not (equal? x z))) (not (equal? y z))) (let ()
(define triple (sort_int (list x y z)))
(set! passed (append (or passed (list)) (list triple)))
(set! found #t)
(_break)
) (void))
      (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if found (let ()
(_break)
) (void))
      (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if found (let ()
(_break)
) (void))
      (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define answer_nums (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not passed) 0] [(string? passed) (string-length passed)] [(hash? passed) (hash-count passed)] [else (length passed)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define seq (if passed (if (hash? passed) (hash-ref passed i #f) (safe-index passed (int i))) #f))
      (define val (int (string-append (string-append (to-string (if seq (if (hash? seq) (hash-ref seq 0 #f) (safe-index seq (int 0))) #f)) (to-string (if seq (if (hash? seq) (hash-ref seq 1 #f) (safe-index seq (int 1))) #f))) (to-string (if seq (if (hash? seq) (hash-ref seq 2 #f) (safe-index seq (int 2))) #f)))))
      (if (not (contains_int answer_nums val)) (let ()
(set! answer_nums (append (or answer_nums (list)) (list val)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define max_val (if answer_nums (if (hash? answer_nums) (hash-ref answer_nums 0 #f) (safe-index answer_nums (int 0))) #f))
(set! i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not answer_nums) 0] [(string? answer_nums) (string-length answer_nums)] [(hash? answer_nums) (hash-count answer_nums)] [else (length answer_nums)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l (if answer_nums (if (hash? answer_nums) (hash-ref answer_nums i #f) (safe-index answer_nums (int i))) #f)] [__r max_val]) (> (int __l) (int __r))) (let ()
(set! max_val (if answer_nums (if (hash? answer_nums) (hash-ref answer_nums i #f) (safe-index answer_nums (int i))) #f))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return max_val)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (solution))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
