;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (evaluate item target)
  (let/ec _return (begin
(define score 0)
(define i 0)
(let/ec _break (let loop ()
  (if (and (< i (cond [(string? item) (string-length item)] [(hash? item) (hash-count item)] [else (length item)])) (< i (cond [(string? target) (string-length target)] [(hash? target) (hash-count target)] [else (length target)]))) (let/ec _cont
    (if (string=? (slice item i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (slice target i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(set! score (let ([__l score] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return score)
))
)
(define (crossover parent1 parent2)
  (let/ec _return (begin
(define cut (floor (/ (cond [(string? parent1) (string-length parent1)] [(hash? parent1) (hash-count parent1)] [else (length parent1)]) 2)))
(define child1 (let ([__l (slice parent1 0 cut)] [__r (slice parent2 cut (cond [(string? parent2) (string-length parent2)] [(hash? parent2) (hash-count parent2)] [else (length parent2)]))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define child2 (let ([__l (slice parent2 0 cut)] [__r (slice parent1 cut (cond [(string? parent1) (string-length parent1)] [(hash? parent1) (hash-count parent1)] [else (length parent1)]))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (hash "first" child1 "second" child2))
))
)
(define (mutate child genes)
  (let/ec _return (begin
(if (equal? (cond [(string? child) (string-length child)] [(hash? child) (hash-count child)] [else (length child)]) 0) (let ()
(_return child)
) (void))
(define gene (if genes (if (hash? genes) (hash-ref genes 0 #f) (list-ref genes (int 0))) #f))
(_return (string-append (slice child 0 (- (cond [(string? child) (string-length child)] [(hash? child) (hash-count child)] [else (length child)]) 1)) gene))
))
)
(define (main)
  (let/ec _return (begin
(displayln (format "~a" (evaluate "Helxo Worlx" "Hello World")))
(define pair (crossover "123456" "abcdef"))
(displayln (if pair (hash-ref pair "first" #f) #f))
(displayln (if pair (hash-ref pair "second" #f) #f))
(define mut (mutate "123456" (list "A" "B" "C" "D" "E" "F")))
(displayln mut)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
