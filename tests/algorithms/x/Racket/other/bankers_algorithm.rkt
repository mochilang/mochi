;; Generated by Mochi 0.10.64 on 2025-08-12 15:27 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (processes_resource_summation alloc)
  (let/ec _return (begin
(define resources (cond [(not (if alloc (if (hash? alloc) (hash-ref alloc 0 #f) (safe-index alloc (int 0))) #f)) 0] [(string? (if alloc (if (hash? alloc) (hash-ref alloc 0 #f) (safe-index alloc (int 0))) #f)) (string-length (if alloc (if (hash? alloc) (hash-ref alloc 0 #f) (safe-index alloc (int 0))) #f))] [(hash? (if alloc (if (hash? alloc) (hash-ref alloc 0 #f) (safe-index alloc (int 0))) #f)) (hash-count (if alloc (if (hash? alloc) (hash-ref alloc 0 #f) (safe-index alloc (int 0))) #f))] [else (length (if alloc (if (hash? alloc) (hash-ref alloc 0 #f) (safe-index alloc (int 0))) #f))]))
(define sums (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r resources]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define total 0)
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not alloc) 0] [(string? alloc) (string-length alloc)] [(hash? alloc) (hash-count alloc)] [else (length alloc)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! total (let ([__l total] [__r (if (if alloc (if (hash? alloc) (hash-ref alloc j #f) (safe-index alloc (int j))) #f) (if (hash? (if alloc (if (hash? alloc) (hash-ref alloc j #f) (safe-index alloc (int j))) #f)) (hash-ref (if alloc (if (hash? alloc) (hash-ref alloc j #f) (safe-index alloc (int j))) #f) i #f) (safe-index (if alloc (if (hash? alloc) (hash-ref alloc j #f) (safe-index alloc (int j))) #f) (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! sums (append (or sums (list)) (list total)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sums)
))
)
(define (available_resources claim alloc_sum)
  (let/ec _return (begin
(define avail (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not claim) 0] [(string? claim) (string-length claim)] [(hash? claim) (hash-count claim)] [else (length claim)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! avail (append (or avail (list)) (list (- (if claim (if (hash? claim) (hash-ref claim i #f) (safe-index claim (int i))) #f) (if alloc_sum (if (hash? alloc_sum) (hash-ref alloc_sum i #f) (safe-index alloc_sum (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return avail)
))
)
(define (need max alloc)
  (let/ec _return (begin
(define needs (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not max) 0] [(string? max) (string-length max)] [(hash? max) (hash-count max)] [else (length max)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if max (if (hash? max) (hash-ref max 0 #f) (safe-index max (int 0))) #f)) 0] [(string? (if max (if (hash? max) (hash-ref max 0 #f) (safe-index max (int 0))) #f)) (string-length (if max (if (hash? max) (hash-ref max 0 #f) (safe-index max (int 0))) #f))] [(hash? (if max (if (hash? max) (hash-ref max 0 #f) (safe-index max (int 0))) #f)) (hash-count (if max (if (hash? max) (hash-ref max 0 #f) (safe-index max (int 0))) #f))] [else (length (if max (if (hash? max) (hash-ref max 0 #f) (safe-index max (int 0))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (- (if (if max (if (hash? max) (hash-ref max i #f) (safe-index max (int i))) #f) (if (hash? (if max (if (hash? max) (hash-ref max i #f) (safe-index max (int i))) #f)) (hash-ref (if max (if (hash? max) (hash-ref max i #f) (safe-index max (int i))) #f) j #f) (safe-index (if max (if (hash? max) (hash-ref max i #f) (safe-index max (int i))) #f) (int j))) #f) (if (if alloc (if (hash? alloc) (hash-ref alloc i #f) (safe-index alloc (int i))) #f) (if (hash? (if alloc (if (hash? alloc) (hash-ref alloc i #f) (safe-index alloc (int i))) #f)) (hash-ref (if alloc (if (hash? alloc) (hash-ref alloc i #f) (safe-index alloc (int i))) #f) j #f) (safe-index (if alloc (if (hash? alloc) (hash-ref alloc i #f) (safe-index alloc (int i))) #f) (int j))) #f)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! needs (append (or needs (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return needs)
))
)
(define (pretty_print claim alloc max)
  (let/ec _return (begin
(displayln "         Allocated Resource Table")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not alloc) 0] [(string? alloc) (string-length alloc)] [(hash? alloc) (hash-count alloc)] [else (length alloc)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (if alloc (if (hash? alloc) (hash-ref alloc i #f) (safe-index alloc (int i))) #f))
      (define line (string-append (string-append "P" (to-string (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) "       "))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! line (string-append line (to-string (if row (if (hash? row) (hash-ref row j #f) (safe-index row (int j))) #f))))
      (if (let ([__l j] [__r (- (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)]) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! line (string-append line "        "))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (displayln line)
      (displayln "")
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln "         System Resource Table")
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not max) 0] [(string? max) (string-length max)] [(hash? max) (hash-count max)] [else (length max)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (if max (if (hash? max) (hash-ref max i #f) (safe-index max (int i))) #f))
      (define line (string-append (string-append "P" (to-string (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) "       "))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! line (string-append line (to-string (if row (if (hash? row) (hash-ref row j #f) (safe-index row (int j))) #f))))
      (if (let ([__l j] [__r (- (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)]) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! line (string-append line "        "))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (displayln line)
      (displayln "")
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define usage "")
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not claim) 0] [(string? claim) (string-length claim)] [(hash? claim) (hash-count claim)] [else (length claim)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! usage (string-append usage " "))
) (void))
      (set! usage (string-append usage (to-string (if claim (if (hash? claim) (hash-ref claim i #f) (safe-index claim (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define alloc_sum (processes_resource_summation alloc))
(define avail (available_resources claim alloc_sum))
(define avail_str "")
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not avail) 0] [(string? avail) (string-length avail)] [(hash? avail) (hash-count avail)] [else (length avail)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! avail_str (string-append avail_str " "))
) (void))
      (set! avail_str (string-append avail_str (to-string (if avail (if (hash? avail) (hash-ref avail i #f) (safe-index avail (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln (string-append "Current Usage by Active Processes: " usage))
(displayln (string-append "Initial Available Resources:       " avail_str))
))
)
(define (bankers_algorithm claim alloc max)
  (let/ec _return (begin
(define need_list (need max alloc))
(define alloc_sum (processes_resource_summation alloc))
(define avail (available_resources claim alloc_sum))
(displayln "__________________________________________________")
(displayln "")
(define finished (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not need_list) 0] [(string? need_list) (string-length need_list)] [(hash? need_list) (hash-count need_list)] [else (length need_list)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! finished (append (or finished (list)) (list #f)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define remaining (cond [(not need_list) 0] [(string? need_list) (string-length need_list)] [(hash? need_list) (hash-count need_list)] [else (length need_list)]))
(let/ec _break (let loop ()
  (if (let ([__l remaining] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define safe #f)
      (define p 0)
      (let/ec _break (let loop ()
  (if (let ([__l p] [__r (cond [(not need_list) 0] [(string? need_list) (string-length need_list)] [(hash? need_list) (hash-count need_list)] [else (length need_list)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (if finished (if (hash? finished) (hash-ref finished p #f) (safe-index finished (int p))) #f)) (let ()
(define exec #t)
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not avail) 0] [(string? avail) (string-length avail)] [(hash? avail) (hash-count avail)] [else (length avail)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if need_list (if (hash? need_list) (hash-ref need_list p #f) (safe-index need_list (int p))) #f) (if (hash? (if need_list (if (hash? need_list) (hash-ref need_list p #f) (safe-index need_list (int p))) #f)) (hash-ref (if need_list (if (hash? need_list) (hash-ref need_list p #f) (safe-index need_list (int p))) #f) r #f) (safe-index (if need_list (if (hash? need_list) (hash-ref need_list p #f) (safe-index need_list (int p))) #f) (int r))) #f)] [__r (if avail (if (hash? avail) (hash-ref avail r #f) (safe-index avail (int r))) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! exec #f)
(_break)
) (void))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if exec (let ()
(set! safe #t)
(displayln (string-append (string-append "Process " (to-string (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) " is executing."))
(set! r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not avail) 0] [(string? avail) (string-length avail)] [(hash? avail) (hash-count avail)] [else (length avail)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! avail (list-set avail (int r) (let ([__l (if avail (if (hash? avail) (hash-ref avail r #f) (safe-index avail (int r))) #f)] [__r (if (if alloc (if (hash? alloc) (hash-ref alloc p #f) (safe-index alloc (int p))) #f) (if (hash? (if alloc (if (hash? alloc) (hash-ref alloc p #f) (safe-index alloc (int p))) #f)) (hash-ref (if alloc (if (hash? alloc) (hash-ref alloc p #f) (safe-index alloc (int p))) #f) r #f) (safe-index (if alloc (if (hash? alloc) (hash-ref alloc p #f) (safe-index alloc (int p))) #f) (int r))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define avail_str "")
(set! r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not avail) 0] [(string? avail) (string-length avail)] [(hash? avail) (hash-count avail)] [else (length avail)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l r] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! avail_str (string-append avail_str " "))
) (void))
      (set! avail_str (string-append avail_str (to-string (if avail (if (hash? avail) (hash-ref avail r #f) (safe-index avail (int r))) #f))))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln (string-append "Updated available resource stack for processes: " avail_str))
(displayln "The process is in a safe state.")
(displayln "")
(set! finished (list-set finished (int p) #t))
(set! remaining (- remaining 1))
) (void))
) (void))
      (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (not safe) (let ()
(displayln "System in unsafe state. Aborting...")
(displayln "")
(_break)
) (void))
    )
    (loop)) (void))))
))
)
(define claim_vector (list 8 5 9 7))
(define allocated_resources_table (list (list 2 0 1 1) (list 0 1 2 1) (list 4 0 0 3) (list 0 2 1 0) (list 1 0 3 0)))
(define maximum_claim_table (list (list 3 2 1 4) (list 0 2 5 2) (list 5 1 0 5) (list 1 5 3 0) (list 3 0 3 3)))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(pretty_print claim_vector allocated_resources_table maximum_claim_table)
(bankers_algorithm claim_vector allocated_resources_table maximum_claim_table)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
