;; Generated by Mochi 0.10.64 on 2025-08-12 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (new_clause lits)
  (let/ec _return (begin
(define m (let ([h (make-hash)]) h))
(define names (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not lits) 0] [(string? lits) (string-length lits)] [(hash? lits) (hash-count lits)] [else (length lits)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define lit (if lits (if (hash? lits) (hash-ref lits i #f) (safe-index lits (int i))) #f))
      (if (hash? m) (hash-set! m lit (- 0 1)) (begin (set! m (make-hash)) (hash-set! m lit (- 0 1))))
      (set! names (append (or names (list)) (list lit)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "literals" m) (hash-set! h "names" names) h))
))
)
(define (assign_clause c model)
  (let/ec _return (begin
(define lits (if c (hash-ref c "literals" #f) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if c (hash-ref c "names" #f) #f)) 0] [(string? (if c (hash-ref c "names" #f) #f)) (string-length (if c (hash-ref c "names" #f) #f))] [(hash? (if c (hash-ref c "names" #f) #f)) (hash-count (if c (hash-ref c "names" #f) #f))] [else (length (if c (hash-ref c "names" #f) #f))])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define lit (if (if c (hash-ref c "names" #f) #f) (if (hash? (if c (hash-ref c "names" #f) #f)) (hash-ref (if c (hash-ref c "names" #f) #f) i #f) (safe-index (if c (hash-ref c "names" #f) #f) (int i))) #f))
      (define symbol (slice lit 0 2))
      (if (hash-has-key? model symbol) (let ()
(define value (if model (hash-ref model symbol 0) #f))
(if (and (string=? (slice lit (- (cond [(not lit) 0] [(string? lit) (string-length lit)] [(hash? lit) (hash-count lit)] [else (length lit)]) 1) (cond [(not lit) 0] [(string? lit) (string-length lit)] [(hash? lit) (hash-count lit)] [else (length lit)])) "'") (not (equal? value (- 0 1)))) (let ()
(set! value (- 1 value))
) (void))
(if (hash? lits) (hash-set! lits lit value) (begin (set! lits (make-hash)) (hash-set! lits lit value)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (hash? c) (hash-set! c "literals" lits) (begin (set! c (make-hash)) (hash-set! c "literals" lits)))
(_return c)
))
)
(define (evaluate_clause c model)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if c (hash-ref c "names" #f) #f)) 0] [(string? (if c (hash-ref c "names" #f) #f)) (string-length (if c (hash-ref c "names" #f) #f))] [(hash? (if c (hash-ref c "names" #f) #f)) (hash-count (if c (hash-ref c "names" #f) #f))] [else (length (if c (hash-ref c "names" #f) #f))])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define lit (if (if c (hash-ref c "names" #f) #f) (if (hash? (if c (hash-ref c "names" #f) #f)) (hash-ref (if c (hash-ref c "names" #f) #f) i #f) (safe-index (if c (hash-ref c "names" #f) #f) (int i))) #f))
      (define sym (if (string=? (slice lit (- (cond [(not lit) 0] [(string? lit) (string-length lit)] [(hash? lit) (hash-count lit)] [else (length lit)]) 1) (cond [(not lit) 0] [(string? lit) (string-length lit)] [(hash? lit) (hash-count lit)] [else (length lit)])) "'") (slice lit 0 2) (string-append lit "'")))
      (if (hash-has-key? (if c (hash-ref c "literals" #f) #f) sym) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "value" 1) (hash-set! h "clause" c) h))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! c (assign_clause c model))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if c (hash-ref c "names" #f) #f)) 0] [(string? (if c (hash-ref c "names" #f) #f)) (string-length (if c (hash-ref c "names" #f) #f))] [(hash? (if c (hash-ref c "names" #f) #f)) (hash-count (if c (hash-ref c "names" #f) #f))] [else (length (if c (hash-ref c "names" #f) #f))])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define lit (if (if c (hash-ref c "names" #f) #f) (if (hash? (if c (hash-ref c "names" #f) #f)) (hash-ref (if c (hash-ref c "names" #f) #f) i #f) (safe-index (if c (hash-ref c "names" #f) #f) (int i))) #f))
      (define value (if (if c (hash-ref c "literals" #f) #f) (if (hash? (if c (hash-ref c "literals" #f) #f)) (hash-ref (if c (hash-ref c "literals" #f) #f) lit #f) (safe-index (if c (hash-ref c "literals" #f) #f) (int lit))) #f))
      (if (equal? value 1) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "value" 1) (hash-set! h "clause" c) h))
) (void))
      (if (equal? value (- 0 1)) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "value" (- 0 1)) (hash-set! h "clause" c) h))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define any_true 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if c (hash-ref c "names" #f) #f)) 0] [(string? (if c (hash-ref c "names" #f) #f)) (string-length (if c (hash-ref c "names" #f) #f))] [(hash? (if c (hash-ref c "names" #f) #f)) (hash-count (if c (hash-ref c "names" #f) #f))] [else (length (if c (hash-ref c "names" #f) #f))])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define lit (if (if c (hash-ref c "names" #f) #f) (if (hash? (if c (hash-ref c "names" #f) #f)) (hash-ref (if c (hash-ref c "names" #f) #f) i #f) (safe-index (if c (hash-ref c "names" #f) #f) (int i))) #f))
      (if (equal? (if (if c (hash-ref c "literals" #f) #f) (if (hash? (if c (hash-ref c "literals" #f) #f)) (hash-ref (if c (hash-ref c "literals" #f) #f) lit #f) (safe-index (if c (hash-ref c "literals" #f) #f) (int lit))) #f) 1) (let ()
(set! any_true 1)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "value" any_true) (hash-set! h "clause" c) h))
))
)
(define (new_formula cs)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "clauses" cs) h))
))
)
(define (remove_symbol symbols s)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not symbols) 0] [(string? symbols) (string-length symbols)] [(hash? symbols) (hash-count symbols)] [else (length symbols)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (not (string=? (if symbols (if (hash? symbols) (hash-ref symbols i #f) (safe-index symbols (int i))) #f) s)) (let ()
(set! res (append (or res (list)) (list (if symbols (if (hash? symbols) (hash-ref symbols i #f) (safe-index symbols (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (dpll_algorithm clauses symbols model)
  (let/ec _return (begin
(define all_true #t)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not clauses) 0] [(string? clauses) (string-length clauses)] [(hash? clauses) (hash-count clauses)] [else (length clauses)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define ev (evaluate_clause (if clauses (if (hash? clauses) (hash-ref clauses i #f) (safe-index clauses (int i))) #f) model))
      (set! clauses (list-set clauses (int i) (if ev (hash-ref ev "clause" #f) #f)))
      (if (equal? (if ev (hash-ref ev "value" #f) #f) 0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "sat" #f) (hash-set! h "model" (let ([h (make-hash)]) h)) h))
) (let ()
(if (equal? (if ev (hash-ref ev "value" #f) #f) (- 0 1)) (let ()
(set! all_true #f)
) (void))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if all_true (let ()
(_return (let ([h (make-hash)]) (hash-set! h "sat" #t) (hash-set! h "model" model) h))
) (void))
(define p (if symbols (if (hash? symbols) (hash-ref symbols 0 #f) (safe-index symbols (int 0))) #f))
(define rest (remove_symbol symbols p))
(define tmp1 model)
(define tmp2 model)
(if (hash? tmp1) (hash-set! tmp1 p 1) (begin (set! tmp1 (make-hash)) (hash-set! tmp1 p 1)))
(if (hash? tmp2) (hash-set! tmp2 p 0) (begin (set! tmp2 (make-hash)) (hash-set! tmp2 p 0)))
(define res1 (dpll_algorithm clauses rest tmp1))
(if (if res1 (hash-ref res1 "sat" #f) #f) (let ()
(_return res1)
) (void))
(_return (dpll_algorithm clauses rest tmp2))
))
)
(define (str_clause c)
  (let/ec _return (begin
(define line "{")
(define first #t)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if c (hash-ref c "names" #f) #f)) 0] [(string? (if c (hash-ref c "names" #f) #f)) (string-length (if c (hash-ref c "names" #f) #f))] [(hash? (if c (hash-ref c "names" #f) #f)) (hash-count (if c (hash-ref c "names" #f) #f))] [else (length (if c (hash-ref c "names" #f) #f))])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define lit (if (if c (hash-ref c "names" #f) #f) (if (hash? (if c (hash-ref c "names" #f) #f)) (hash-ref (if c (hash-ref c "names" #f) #f) i #f) (safe-index (if c (hash-ref c "names" #f) #f) (int i))) #f))
      (if first (let ()
(set! first #f)
) (let ()
(set! line (string-append line " , "))
))
      (set! line (string-append line lit))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! line (string-append line "}"))
(_return line)
))
)
(define (str_formula f)
  (let/ec _return (begin
(define line "{")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if f (hash-ref f "clauses" #f) #f)) 0] [(string? (if f (hash-ref f "clauses" #f) #f)) (string-length (if f (hash-ref f "clauses" #f) #f))] [(hash? (if f (hash-ref f "clauses" #f) #f)) (hash-count (if f (hash-ref f "clauses" #f) #f))] [else (length (if f (hash-ref f "clauses" #f) #f))])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! line (string-append line (str_clause (if (if f (hash-ref f "clauses" #f) #f) (if (hash? (if f (hash-ref f "clauses" #f) #f)) (hash-ref (if f (hash-ref f "clauses" #f) #f) i #f) (safe-index (if f (hash-ref f "clauses" #f) #f) (int i))) #f))))
      (if (let ([__l i] [__r (- (cond [(not (if f (hash-ref f "clauses" #f) #f)) 0] [(string? (if f (hash-ref f "clauses" #f) #f)) (string-length (if f (hash-ref f "clauses" #f) #f))] [(hash? (if f (hash-ref f "clauses" #f) #f)) (hash-count (if f (hash-ref f "clauses" #f) #f))] [else (length (if f (hash-ref f "clauses" #f) #f))]) 1)]) (< (int __l) (int __r))) (let ()
(set! line (string-append line " , "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! line (string-append line "}"))
(_return line)
))
)
(define clause1 (new_clause (list "A4" "A3" "A5'" "A1" "A3'")))
(define clause2 (new_clause (list "A4")))
(define formula (new_formula (list clause1 clause2)))
(define formula_str (str_formula formula))
(define clauses (list clause1 clause2))
(define symbols (list "A4" "A3" "A5" "A1"))
(define model (let ([h (make-hash)]) h))
(define result (dpll_algorithm clauses symbols model))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(if (if result (hash-ref result "sat" #f) #f) (let ()
(displayln (string-append (string-append "The formula " formula_str) " is satisfiable."))
) (let ()
(displayln (string-append (string-append "The formula " formula_str) " is not satisfiable."))
))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
