;; Generated by Mochi 0.10.62 on 2025-08-09 10:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (apply_table inp table)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not table) 0] [(string? table) (string-length table)] [(hash? table) (hash-count table)] [else (length table)])) (begin
    (let/ec _cont
      (define idx (- (if table (if (hash? table) (hash-ref table i #f) (safe-index table (int i))) #f) 1))
      (if (< idx 0) (let ()
(set! idx (- (cond [(not inp) 0] [(string? inp) (string-length inp)] [(hash? inp) (hash-count inp)] [else (length inp)]) 1))
) (void))
      (set! res (string-append res (slice inp idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (left_shift data)
  (let/ec _return (begin
(_return (let ([__l (slice data 1 (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]))] [__r (slice data 0 1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (xor a b)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (and (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (< i (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (begin
    (let/ec _cont
      (if (string=? (slice a i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (slice b i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(set! res (string-append res "0"))
) (let ()
(set! res (string-append res "1"))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (int_to_binary n)
  (let/ec _return (begin
(if (equal? n 0) (let ()
(_return "0")
) (void))
(define res "")
(define num n)
(let/ec _break (let loop ()
  (if (> num 0) (begin
    (let/ec _cont
      (set! res (string-append (to-string (modulo num 2)) res))
      (set! num (floor (/ num 2)))
    )
    (loop)) (void))))
(_return res)
))
)
(define (pad_left s width)
  (let/ec _return (begin
(define res s)
(let/ec _break (let loop ()
  (if (< (cond [(not res) 0] [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) width) (begin
    (let/ec _cont
      (set! res (string-append "0" res))
    )
    (loop)) (void))))
(_return res)
))
)
(define (bin_to_int s)
  (let/ec _return (begin
(define result 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (begin
    (let/ec _cont
      (define digit (int (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! result (let ([__l (* result 2)] [__r digit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (apply_sbox s data)
  (let/ec _return (begin
(define row_bits (let ([__l (slice data 0 1)] [__r (slice data (- (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]) 1) (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define col_bits (slice data 1 3))
(define row (bin_to_int row_bits))
(define col (bin_to_int col_bits))
(define val (if (if s (if (hash? s) (hash-ref s row #f) (safe-index s (int row))) #f) (if (hash? (if s (if (hash? s) (hash-ref s row #f) (safe-index s (int row))) #f)) (hash-ref (if s (if (hash? s) (hash-ref s row #f) (safe-index s (int row))) #f) col #f) (safe-index (if s (if (hash? s) (hash-ref s row #f) (safe-index s (int row))) #f) (int col))) #f))
(define out (int_to_binary val))
(_return out)
))
)
(define p4_table (list 2 4 3 1))
(define (f expansion s0 s1 key message)
  (let/ec _return (begin
(define left (slice message 0 4))
(define right (slice message 4 8))
(define temp (apply_table right expansion))
(set! temp (xor temp key))
(define left_bin_str (apply_sbox s0 (slice temp 0 4)))
(define right_bin_str (apply_sbox s1 (slice temp 4 8)))
(set! left_bin_str (pad_left left_bin_str 2))
(set! right_bin_str (pad_left right_bin_str 2))
(set! temp (apply_table (string-append left_bin_str right_bin_str) p4_table))
(set! temp (xor left temp))
(_return (string-append temp right))
))
)
(define key "1010000010")
(define message "11010111")
(define p8_table (list 6 3 7 4 8 5 10 9))
(define p10_table (list 3 5 2 7 4 10 1 9 8 6))
(define IP (list 2 6 3 1 4 8 5 7))
(define IP_inv (list 4 1 3 5 7 2 8 6))
(define expansion (list 4 1 2 3 2 3 4 1))
(define s0 (list (list 1 0 3 2) (list 3 2 1 0) (list 0 2 1 3) (list 3 1 3 2)))
(define s1 (list (list 0 1 2 3) (list 2 0 1 3) (list 3 0 1 0) (list 2 1 0 3)))
(define temp (apply_table key p10_table))
(define left (slice temp 0 5))
(define right (slice temp 5 10))
(define key1 (apply_table (string-append left right) p8_table))
(define key2 (apply_table (string-append left right) p8_table))
(define CT (apply_table temp IP_inv))
(define PT (apply_table temp IP_inv))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(set! left (left_shift left))
(set! right (left_shift right))
(set! left (left_shift left))
(set! right (left_shift right))
(set! left (left_shift left))
(set! right (left_shift right))
(set! temp (apply_table message IP))
(set! temp (f expansion s0 s1 key1 temp))
(set! temp (let ([__l (slice temp 4 8)] [__r (slice temp 0 4)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! temp (f expansion s0 s1 key2 temp))
(displayln (string-append "Cipher text is: " CT))
(set! temp (apply_table CT IP))
(set! temp (f expansion s0 s1 key2 temp))
(set! temp (let ([__l (slice temp 4 8)] [__r (slice temp 0 4)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! temp (f expansion s0 s1 key1 temp))
(displayln (string-append "Plain text after decypting is: " PT))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
