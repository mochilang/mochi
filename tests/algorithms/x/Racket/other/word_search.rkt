;; Generated by Mochi 0.10.73 on 2025-08-26 08:36 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port racket/vector net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/other")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (cond
       [(and (inexact? x) (integer? x)) (format "~a.0" (inexact->exact x))]
       [else (number->string x)])]
    [(vector? x) (format "~a" (map (lambda (v) (cond [(hash? v) (read (open-input-string (to-string v)))] [(vector? v) (vector->list v)] [else v])) (vector->list x)))]
    [(hash? x)
     (format "~a"
             (for/hash ([k (in-hash-keys x)])
               (values k (let ([v (hash-ref x k)]) (if (vector? v) (vector->list v) v)))))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (cond
    [(string? lst) (substring lst start end)]
    [(vector? lst) (vector->list (vector-copy lst start end))]
    [else (take (drop lst start) (- end start))]))

(define (slice seq start end)
  (define len (cond [(string? seq) (string-length seq)] [(vector? seq) (vector-length seq)] [(list? seq) (length seq)] [else 0]))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (cond
    [(string? seq) (substring seq s e)]
    [(vector? seq) (vector-copy seq s e)]
    [else (sublist seq s e)]))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (appendv a b)
  (cond
    [(vector? a) (vector-append a (cond [(vector? b) b] [(list? b) (list->vector b)] [else (vector b)]))]
    [(list? a) (append a (cond [(list? b) b] [(vector? b) (vector->list b)] [else (list b)]))]
    [else (append a b)]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) 0)] [(vector? lst) (if (and (>= i 0) (< i (vector-length lst))) (vector-ref lst i) 0)] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (cond
    [(vector? lst) (when (< i (vector-length lst)) (vector-set! lst i val)) lst]
    [else
     (define len (length lst))
     (cond
       [(>= i len) (append lst (make-list (- i len) '()) (list val))]
       [(zero? i) (cons val (cdr lst))]
       [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))])]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define seed 123456789)
(define (rand)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return seed)
))
)
(define (rand_range max)
  (let/ec _return (begin
(_return (modulo (rand) max))
))
)
(define (shuffle list_int)
  (let/ec _return (begin
(define i (- (cond [(not list_int) 0] [(string? list_int) (string-length list_int)] [(vector? list_int) (vector-length list_int)] [(hash? list_int) (hash-count list_int)] [(list? list_int) (length list_int)] [else 0]) 1))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j (rand_range (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (define tmp (if list_int (if (hash? list_int) (hash-ref list_int i #f) (safe-index list_int (int i))) #f))
      (vector-set! list_int (int i) (if list_int (if (hash? list_int) (hash-ref list_int j #f) (safe-index list_int (int j))) #f))
      (vector-set! list_int (int j) tmp)
      (set! i (- i 1))
    )
    (loop)) (void))))
(_return list_int)
))
)
(define (rand_letter)
  (let/ec _return (begin
(define letters "abcdefghijklmnopqrstuvwxyz")
(define i (rand_range 26))
(_return (slice letters i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (make_word_search words width height)
  (let/ec _return (begin
(define board (vector))
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r height]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (vector))
      (define c 0)
      (let/ec _break (let loop ()
  (if (let ([__l c] [__r width]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (appendv (or row (vector)) (vector "")))
      (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! board (appendv (or board (vector)) (vector row)))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "words" words) (hash-set! h "width" width) (hash-set! h "height" height) (hash-set! h "board" board) h))
))
)
(define (insert_dir ws word dr dc rows cols)
  (let/ec _return (begin
(define word_len (cond [(not word) 0] [(string? word) (string-length word)] [(vector? word) (vector-length word)] [(hash? word) (hash-count word)] [(list? word) (length word)] [else 0]))
(define ri 0)
(let/ec _break (let loop ()
  (if (let ([__l ri] [__r (cond [(not rows) 0] [(string? rows) (string-length rows)] [(vector? rows) (vector-length rows)] [(hash? rows) (hash-count rows)] [(list? rows) (length rows)] [else 0])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (if rows (if (hash? rows) (hash-ref rows ri #f) (safe-index rows (int ri))) #f))
      (define ci 0)
      (let/ec _break (let loop ()
  (if (let ([__l ci] [__r (cond [(not cols) 0] [(string? cols) (string-length cols)] [(vector? cols) (vector-length cols)] [(hash? cols) (hash-count cols)] [(list? cols) (length cols)] [else 0])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define col (if cols (if (hash? cols) (hash-ref cols ci #f) (safe-index cols (int ci))) #f))
      (define end_r (let ([__l row] [__r (* dr (- word_len 1))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define end_c (let ([__l col] [__r (* dc (- word_len 1))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (if (or (or (or (let ([__l end_r] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l end_r] [__r (if ws (hash-ref ws "height" #f) #f)]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ([__l end_c] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l end_c] [__r (if ws (hash-ref ws "width" #f) #f)]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ()
(set! ci (let ([__l ci] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
      (define k 0)
      (define ok #t)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r word_len]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define rr (let ([__l row] [__r (* dr k)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define cc (let ([__l col] [__r (* dc k)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (if (not (string=? (if (if (if ws (hash-ref ws "board" #f) #f) (if (hash? (if ws (hash-ref ws "board" #f) #f)) (hash-ref (if ws (hash-ref ws "board" #f) #f) rr #f) (safe-index (if ws (hash-ref ws "board" #f) #f) (int rr))) #f) (if (hash? (if (if ws (hash-ref ws "board" #f) #f) (if (hash? (if ws (hash-ref ws "board" #f) #f)) (hash-ref (if ws (hash-ref ws "board" #f) #f) rr #f) (safe-index (if ws (hash-ref ws "board" #f) #f) (int rr))) #f)) (hash-ref (if (if ws (hash-ref ws "board" #f) #f) (if (hash? (if ws (hash-ref ws "board" #f) #f)) (hash-ref (if ws (hash-ref ws "board" #f) #f) rr #f) (safe-index (if ws (hash-ref ws "board" #f) #f) (int rr))) #f) cc #f) (safe-index (if (if ws (hash-ref ws "board" #f) #f) (if (hash? (if ws (hash-ref ws "board" #f) #f)) (hash-ref (if ws (hash-ref ws "board" #f) #f) rr #f) (safe-index (if ws (hash-ref ws "board" #f) #f) (int rr))) #f) (int cc))) #f) "")) (let ()
(set! ok #f)
(_break)
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if ok (let ()
(set! k 0)
(let/ec _break (let loop ()
  (if (let ([__l k] [__r word_len]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define rr2 (let ([__l row] [__r (* dr k)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define cc2 (let ([__l col] [__r (* dc k)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define row_list (if (if ws (hash-ref ws "board" #f) #f) (if (hash? (if ws (hash-ref ws "board" #f) #f)) (hash-ref (if ws (hash-ref ws "board" #f) #f) rr2 #f) (safe-index (if ws (hash-ref ws "board" #f) #f) (int rr2))) #f))
      (vector-set! row_list (int cc2) (slice word k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
) (void))
      (set! ci (let ([__l ci] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! ri (let ([__l ri] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (generate_board ws)
  (let/ec _return (begin
(define dirs_r (vector (- 1) (- 1) 0 1 1 1 0 (- 1)))
(define dirs_c (vector 0 1 1 1 0 (- 1) (- 1) (- 1)))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if ws (hash-ref ws "words" #f) #f)) 0] [(string? (if ws (hash-ref ws "words" #f) #f)) (string-length (if ws (hash-ref ws "words" #f) #f))] [(vector? (if ws (hash-ref ws "words" #f) #f)) (vector-length (if ws (hash-ref ws "words" #f) #f))] [(hash? (if ws (hash-ref ws "words" #f) #f)) (hash-count (if ws (hash-ref ws "words" #f) #f))] [(list? (if ws (hash-ref ws "words" #f) #f)) (length (if ws (hash-ref ws "words" #f) #f))] [else 0])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define word (if (if ws (hash-ref ws "words" #f) #f) (if (hash? (if ws (hash-ref ws "words" #f) #f)) (hash-ref (if ws (hash-ref ws "words" #f) #f) i #f) (safe-index (if ws (hash-ref ws "words" #f) #f) (int i))) #f))
      (define rows (vector))
      (define r 0)
      (let/ec _break (let loop ()
  (if (let ([__l r] [__r (if ws (hash-ref ws "height" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! rows (appendv (or rows (vector)) (vector r)))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define cols (vector))
      (define c 0)
      (let/ec _break (let loop ()
  (if (let ([__l c] [__r (if ws (hash-ref ws "width" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! cols (appendv (or cols (vector)) (vector c)))
      (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! rows (shuffle rows))
      (set! cols (shuffle cols))
      (define d (rand_range 8))
      (insert_dir ws word (if dirs_r (if (hash? dirs_r) (hash-ref dirs_r d #f) (safe-index dirs_r (int d))) #f) (if dirs_c (if (hash? dirs_c) (hash-ref dirs_c d #f) (safe-index dirs_c (int d))) #f) rows cols)
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (visualise ws add_fake_chars)
  (let/ec _return (begin
(define result "")
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (if ws (hash-ref ws "height" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define c 0)
      (let/ec _break (let loop ()
  (if (let ([__l c] [__r (if ws (hash-ref ws "width" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (if (if (if ws (hash-ref ws "board" #f) #f) (if (hash? (if ws (hash-ref ws "board" #f) #f)) (hash-ref (if ws (hash-ref ws "board" #f) #f) r #f) (safe-index (if ws (hash-ref ws "board" #f) #f) (int r))) #f) (if (hash? (if (if ws (hash-ref ws "board" #f) #f) (if (hash? (if ws (hash-ref ws "board" #f) #f)) (hash-ref (if ws (hash-ref ws "board" #f) #f) r #f) (safe-index (if ws (hash-ref ws "board" #f) #f) (int r))) #f)) (hash-ref (if (if ws (hash-ref ws "board" #f) #f) (if (hash? (if ws (hash-ref ws "board" #f) #f)) (hash-ref (if ws (hash-ref ws "board" #f) #f) r #f) (safe-index (if ws (hash-ref ws "board" #f) #f) (int r))) #f) c #f) (safe-index (if (if ws (hash-ref ws "board" #f) #f) (if (hash? (if ws (hash-ref ws "board" #f) #f)) (hash-ref (if ws (hash-ref ws "board" #f) #f) r #f) (safe-index (if ws (hash-ref ws "board" #f) #f) (int r))) #f) (int c))) #f))
      (if (string=? ch "") (let ()
(if add_fake_chars (let ()
(set! ch (rand_letter))
) (let ()
(set! ch "#")
))
) (void))
      (set! result (string-append (string-append result ch) " "))
      (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! result (string-append result "\n"))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (main)
  (let/ec _return (begin
(define words (vector "cat" "dog" "snake" "fish"))
(define ws (make_word_search words 10 10))
(generate_board ws)
(displayln (to-string (visualise ws #t)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
