;; Generated by Mochi 0.10.62 on 2025-08-09 10:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (new_list)
  (let/ec _return (begin
(define nodes (list))
(define head (let ([h (make-hash)]) (hash-set! h "key" 0) (hash-set! h "value" 0) (hash-set! h "prev" (- 0 1)) (hash-set! h "next" 1) h))
(define tail (let ([h (make-hash)]) (hash-set! h "key" 0) (hash-set! h "value" 0) (hash-set! h "prev" 0) (hash-set! h "next" (- 0 1)) h))
(set! nodes (append (or nodes (list)) (list head)))
(set! nodes (append (or nodes (list)) (list tail)))
(_return (let ([h (make-hash)]) (hash-set! h "nodes" nodes) (hash-set! h "head" 0) (hash-set! h "tail" 1) h))
))
)
(define (dll_add lst idx)
  (let/ec _return (begin
(define nodes (if lst (hash-ref lst "nodes" #f) #f))
(define tail_idx (if lst (hash-ref lst "tail" #f) #f))
(define tail_node (if nodes (if (hash? nodes) (hash-ref nodes tail_idx #f) (safe-index nodes (int tail_idx))) #f))
(define prev_idx (if tail_node (hash-ref tail_node "prev" #f) #f))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (safe-index nodes (int idx))) #f))
(if (hash? node) (hash-set! node "prev" prev_idx) (begin (set! node (make-hash)) (hash-set! node "prev" prev_idx)))
(if (hash? node) (hash-set! node "next" tail_idx) (begin (set! node (make-hash)) (hash-set! node "next" tail_idx)))
(set! nodes (list-set nodes (int idx) node))
(define prev_node (if nodes (if (hash? nodes) (hash-ref nodes prev_idx #f) (safe-index nodes (int prev_idx))) #f))
(if (hash? prev_node) (hash-set! prev_node "next" idx) (begin (set! prev_node (make-hash)) (hash-set! prev_node "next" idx)))
(set! nodes (list-set nodes (int prev_idx) prev_node))
(if (hash? tail_node) (hash-set! tail_node "prev" idx) (begin (set! tail_node (make-hash)) (hash-set! tail_node "prev" idx)))
(set! nodes (list-set nodes (int tail_idx) tail_node))
(if (hash? lst) (hash-set! lst "nodes" nodes) (begin (set! lst (make-hash)) (hash-set! lst "nodes" nodes)))
(_return lst)
))
)
(define (dll_remove lst idx)
  (let/ec _return (begin
(define nodes (if lst (hash-ref lst "nodes" #f) #f))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (safe-index nodes (int idx))) #f))
(define prev_idx (if node (hash-ref node "prev" #f) #f))
(define next_idx (if node (hash-ref node "next" #f) #f))
(if (or (equal? prev_idx (- 0 1)) (equal? next_idx (- 0 1))) (let ()
(_return lst)
) (void))
(define prev_node (if nodes (if (hash? nodes) (hash-ref nodes prev_idx #f) (safe-index nodes (int prev_idx))) #f))
(if (hash? prev_node) (hash-set! prev_node "next" next_idx) (begin (set! prev_node (make-hash)) (hash-set! prev_node "next" next_idx)))
(set! nodes (list-set nodes (int prev_idx) prev_node))
(define next_node (if nodes (if (hash? nodes) (hash-ref nodes next_idx #f) (safe-index nodes (int next_idx))) #f))
(if (hash? next_node) (hash-set! next_node "prev" prev_idx) (begin (set! next_node (make-hash)) (hash-set! next_node "prev" prev_idx)))
(set! nodes (list-set nodes (int next_idx) next_node))
(if (hash? node) (hash-set! node "prev" (- 0 1)) (begin (set! node (make-hash)) (hash-set! node "prev" (- 0 1))))
(if (hash? node) (hash-set! node "next" (- 0 1)) (begin (set! node (make-hash)) (hash-set! node "next" (- 0 1))))
(set! nodes (list-set nodes (int idx) node))
(if (hash? lst) (hash-set! lst "nodes" nodes) (begin (set! lst (make-hash)) (hash-set! lst "nodes" nodes)))
(_return lst)
))
)
(define (new_cache cap)
  (let/ec _return (begin
(define empty_map (let ([h (make-hash)]) h))
(_return (let ([h (make-hash)]) (hash-set! h "list" (new_list)) (hash-set! h "capacity" cap) (hash-set! h "num_keys" 0) (hash-set! h "hits" 0) (hash-set! h "misses" 0) (hash-set! h "cache" empty_map) h))
))
)
(define (lru_get c key)
  (let/ec _return (begin
(define cache c)
(define key_str (to-string key))
(if (hash-has-key? (if cache (hash-ref cache "cache" #f) #f) key_str) (let ()
(define idx (if (if cache (hash-ref cache "cache" #f) #f) (if (hash? (if cache (hash-ref cache "cache" #f) #f)) (hash-ref (if cache (hash-ref cache "cache" #f) #f) key_str #f) (safe-index (if cache (hash-ref cache "cache" #f) #f) (int key_str))) #f))
(if (not (equal? idx (- 0 1))) (let ()
(if (hash? cache) (hash-set! cache "hits" (let ([__l (if cache (hash-ref cache "hits" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! cache (make-hash)) (hash-set! cache "hits" (let ([__l (if cache (hash-ref cache "hits" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(define node (if (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f) (if (hash? (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f)) (hash-ref (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f) idx #f) (safe-index (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f) (int idx))) #f))
(define value (if node (hash-ref node "value" #f) #f))
(if (hash? cache) (hash-set! cache "list" (dll_remove (if cache (hash-ref cache "list" #f) #f) idx)) (begin (set! cache (make-hash)) (hash-set! cache "list" (dll_remove (if cache (hash-ref cache "list" #f) #f) idx))))
(if (hash? cache) (hash-set! cache "list" (dll_add (if cache (hash-ref cache "list" #f) #f) idx)) (begin (set! cache (make-hash)) (hash-set! cache "list" (dll_add (if cache (hash-ref cache "list" #f) #f) idx))))
(_return (let ([h (make-hash)]) (hash-set! h "cache" cache) (hash-set! h "value" value) (hash-set! h "ok" #t) h))
) (void))
) (void))
(if (hash? cache) (hash-set! cache "misses" (let ([__l (if cache (hash-ref cache "misses" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! cache (make-hash)) (hash-set! cache "misses" (let ([__l (if cache (hash-ref cache "misses" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(_return (let ([h (make-hash)]) (hash-set! h "cache" cache) (hash-set! h "value" 0) (hash-set! h "ok" #f) h))
))
)
(define (lru_put c key value)
  (let/ec _return (begin
(define cache c)
(define key_str (to-string key))
(if (not (hash-has-key? (if cache (hash-ref cache "cache" #f) #f) key_str)) (let ()
(if (>= (if cache (hash-ref cache "num_keys" #f) #f) (if cache (hash-ref cache "capacity" #f) #f)) (let ()
(define head_node (if (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f) (if (hash? (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f)) (hash-ref (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f) (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "head" #f) #f) #f) (safe-index (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f) (int (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "head" #f) #f)))) #f))
(define first_idx (if head_node (hash-ref head_node "next" #f) #f))
(define first_node (if (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f) (if (hash? (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f)) (hash-ref (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f) first_idx #f) (safe-index (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f) (int first_idx))) #f))
(define old_key (if first_node (hash-ref first_node "key" #f) #f))
(if (hash? cache) (hash-set! cache "list" (dll_remove (if cache (hash-ref cache "list" #f) #f) first_idx)) (begin (set! cache (make-hash)) (hash-set! cache "list" (dll_remove (if cache (hash-ref cache "list" #f) #f) first_idx))))
(define mdel (if cache (hash-ref cache "cache" #f) #f))
(if (hash? mdel) (hash-set! mdel (to-string old_key) (- 0 1)) (begin (set! mdel (make-hash)) (hash-set! mdel (to-string old_key) (- 0 1))))
(if (hash? cache) (hash-set! cache "cache" mdel) (begin (set! cache (make-hash)) (hash-set! cache "cache" mdel)))
(if (hash? cache) (hash-set! cache "num_keys" (- (if cache (hash-ref cache "num_keys" #f) #f) 1)) (begin (set! cache (make-hash)) (hash-set! cache "num_keys" (- (if cache (hash-ref cache "num_keys" #f) #f) 1))))
) (void))
(define nodes (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f))
(define new_node (let ([h (make-hash)]) (hash-set! h "key" key) (hash-set! h "value" value) (hash-set! h "prev" (- 0 1)) (hash-set! h "next" (- 0 1)) h))
(set! nodes (append (or nodes (list)) (list new_node)))
(define idx (- (cond [(not nodes) 0] [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
(let ([__m (hash-ref cache "list" #f)]) (if (hash? __m) (hash-set! __m "nodes" nodes) (begin (set! __m (make-hash)) (hash-set! cache "list" __m) (hash-set! __m "nodes" nodes))))
(if (hash? cache) (hash-set! cache "list" (dll_add (if cache (hash-ref cache "list" #f) #f) idx)) (begin (set! cache (make-hash)) (hash-set! cache "list" (dll_add (if cache (hash-ref cache "list" #f) #f) idx))))
(define m (if cache (hash-ref cache "cache" #f) #f))
(if (hash? m) (hash-set! m key_str idx) (begin (set! m (make-hash)) (hash-set! m key_str idx)))
(if (hash? cache) (hash-set! cache "cache" m) (begin (set! cache (make-hash)) (hash-set! cache "cache" m)))
(if (hash? cache) (hash-set! cache "num_keys" (let ([__l (if cache (hash-ref cache "num_keys" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! cache (make-hash)) (hash-set! cache "num_keys" (let ([__l (if cache (hash-ref cache "num_keys" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (let ()
(define m (if cache (hash-ref cache "cache" #f) #f))
(define idx (if m (hash-ref m key_str 0) #f))
(define nodes (if (if cache (hash-ref cache "list" #f) #f) (hash-ref (if cache (hash-ref cache "list" #f) #f) "nodes" #f) #f))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (safe-index nodes (int idx))) #f))
(if (hash? node) (hash-set! node "value" value) (begin (set! node (make-hash)) (hash-set! node "value" value)))
(set! nodes (list-set nodes (int idx) node))
(let ([__m (hash-ref cache "list" #f)]) (if (hash? __m) (hash-set! __m "nodes" nodes) (begin (set! __m (make-hash)) (hash-set! cache "list" __m) (hash-set! __m "nodes" nodes))))
(if (hash? cache) (hash-set! cache "list" (dll_remove (if cache (hash-ref cache "list" #f) #f) idx)) (begin (set! cache (make-hash)) (hash-set! cache "list" (dll_remove (if cache (hash-ref cache "list" #f) #f) idx))))
(if (hash? cache) (hash-set! cache "list" (dll_add (if cache (hash-ref cache "list" #f) #f) idx)) (begin (set! cache (make-hash)) (hash-set! cache "list" (dll_add (if cache (hash-ref cache "list" #f) #f) idx))))
(if (hash? cache) (hash-set! cache "cache" m) (begin (set! cache (make-hash)) (hash-set! cache "cache" m)))
))
(_return cache)
))
)
(define (cache_info cache)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "CacheInfo(hits=" (to-string (if cache (hash-ref cache "hits" #f) #f))) ", misses=") (to-string (if cache (hash-ref cache "misses" #f) #f))) ", capacity=") (to-string (if cache (hash-ref cache "capacity" #f) #f))) ", current size=") (to-string (if cache (hash-ref cache "num_keys" #f) #f))) ")"))
))
)
(define (print_result res)
  (let/ec _return (begin
(if (if res (hash-ref res "ok" #f) #f) (let ()
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
) (let ()
(displayln "None")
))
))
)
(define (main)
  (let/ec _return (begin
(define cache (new_cache 2))
(set! cache (lru_put cache 1 1))
(set! cache (lru_put cache 2 2))
(define r1 (lru_get cache 1))
(set! cache (if r1 (hash-ref r1 "cache" #f) #f))
(print_result r1)
(set! cache (lru_put cache 3 3))
(define r2 (lru_get cache 2))
(set! cache (if r2 (hash-ref r2 "cache" #f) #f))
(print_result r2)
(set! cache (lru_put cache 4 4))
(define r3 (lru_get cache 1))
(set! cache (if r3 (hash-ref r3 "cache" #f) #f))
(print_result r3)
(define r4 (lru_get cache 3))
(set! cache (if r4 (hash-ref r4 "cache" #f) #f))
(print_result r4)
(define r5 (lru_get cache 4))
(set! cache (if r5 (hash-ref r5 "cache" #f) #f))
(print_result r5)
(displayln (cache_info cache))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
