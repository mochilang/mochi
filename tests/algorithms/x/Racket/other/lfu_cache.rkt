;; Generated by Mochi 0.10.64 on 2025-08-12 15:27 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (lfu_new cap)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "entries" (list)) (hash-set! h "capacity" cap) (hash-set! h "hits" 0) (hash-set! h "miss" 0) (hash-set! h "tick" 0) h))
))
)
(define (find_entry entries key)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not entries) 0] [(string? entries) (string-length entries)] [(hash? entries) (hash-count entries)] [else (length entries)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define e (if entries (if (hash? entries) (hash-ref entries i #f) (safe-index entries (int i))) #f))
      (if (equal? (if e (hash-ref e "key" #f) #f) key) (let ()
(_return i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (- 0 1))
))
)
(define (lfu_get cache key)
  (let/ec _return (begin
(define idx (find_entry (if cache (hash-ref cache "entries" #f) #f) key))
(if (equal? idx (- 0 1)) (let ()
(define new_cache (let ([h (make-hash)]) (hash-set! h "entries" (if cache (hash-ref cache "entries" #f) #f)) (hash-set! h "capacity" (if cache (hash-ref cache "capacity" #f) #f)) (hash-set! h "hits" (if cache (hash-ref cache "hits" #f) #f)) (hash-set! h "miss" (let ([__l (if cache (hash-ref cache "miss" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "tick" (if cache (hash-ref cache "tick" #f) #f)) h))
(_return (let ([h (make-hash)]) (hash-set! h "cache" new_cache) (hash-set! h "value" 0) (hash-set! h "ok" #f) h))
) (void))
(define entries (if cache (hash-ref cache "entries" #f) #f))
(define e (if entries (if (hash? entries) (hash-ref entries idx #f) (safe-index entries (int idx))) #f))
(if (hash? e) (hash-set! e "freq" (let ([__l (if e (hash-ref e "freq" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! e (make-hash)) (hash-set! e "freq" (let ([__l (if e (hash-ref e "freq" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(define new_tick (let ([__l (if cache (hash-ref cache "tick" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (hash? e) (hash-set! e "order" new_tick) (begin (set! e (make-hash)) (hash-set! e "order" new_tick)))
(set! entries (list-set entries (int idx) e))
(define new_cache (let ([h (make-hash)]) (hash-set! h "entries" entries) (hash-set! h "capacity" (if cache (hash-ref cache "capacity" #f) #f)) (hash-set! h "hits" (let ([__l (if cache (hash-ref cache "hits" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "miss" (if cache (hash-ref cache "miss" #f) #f)) (hash-set! h "tick" new_tick) h))
(_return (let ([h (make-hash)]) (hash-set! h "cache" new_cache) (hash-set! h "value" (if e (hash-ref e "val" #f) #f)) (hash-set! h "ok" #t) h))
))
)
(define (remove_lfu entries)
  (let/ec _return (begin
(if (equal? (cond [(not entries) 0] [(string? entries) (string-length entries)] [(hash? entries) (hash-count entries)] [else (length entries)]) 0) (let ()
(_return entries)
) (void))
(define min_idx 0)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not entries) 0] [(string? entries) (string-length entries)] [(hash? entries) (hash-count entries)] [else (length entries)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define e (if entries (if (hash? entries) (hash-ref entries i #f) (safe-index entries (int i))) #f))
      (define m (if entries (if (hash? entries) (hash-ref entries min_idx #f) (safe-index entries (int min_idx))) #f))
      (if (or (let ([__l (if e (hash-ref e "freq" #f) #f)] [__r (if m (hash-ref m "freq" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (and (equal? (if e (hash-ref e "freq" #f) #f) (if m (hash-ref m "freq" #f) #f)) (let ([__l (if e (hash-ref e "order" #f) #f)] [__r (if m (hash-ref m "order" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])))) (let ()
(set! min_idx i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define res (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not entries) 0] [(string? entries) (string-length entries)] [(hash? entries) (hash-count entries)] [else (length entries)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? j min_idx)) (let ()
(set! res (append (or res (list)) (list (if entries (if (hash? entries) (hash-ref entries j #f) (safe-index entries (int j))) #f))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (lfu_put cache key value)
  (let/ec _return (begin
(define entries (if cache (hash-ref cache "entries" #f) #f))
(define idx (find_entry entries key))
(if (not (equal? idx (- 0 1))) (let ()
(define e (if entries (if (hash? entries) (hash-ref entries idx #f) (safe-index entries (int idx))) #f))
(if (hash? e) (hash-set! e "val" value) (begin (set! e (make-hash)) (hash-set! e "val" value)))
(if (hash? e) (hash-set! e "freq" (let ([__l (if e (hash-ref e "freq" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! e (make-hash)) (hash-set! e "freq" (let ([__l (if e (hash-ref e "freq" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(define new_tick (let ([__l (if cache (hash-ref cache "tick" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (hash? e) (hash-set! e "order" new_tick) (begin (set! e (make-hash)) (hash-set! e "order" new_tick)))
(set! entries (list-set entries (int idx) e))
(_return (let ([h (make-hash)]) (hash-set! h "entries" entries) (hash-set! h "capacity" (if cache (hash-ref cache "capacity" #f) #f)) (hash-set! h "hits" (if cache (hash-ref cache "hits" #f) #f)) (hash-set! h "miss" (if cache (hash-ref cache "miss" #f) #f)) (hash-set! h "tick" new_tick) h))
) (void))
(if (let ([__l (cond [(not entries) 0] [(string? entries) (string-length entries)] [(hash? entries) (hash-count entries)] [else (length entries)])] [__r (if cache (hash-ref cache "capacity" #f) #f)]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(set! entries (remove_lfu entries))
) (void))
(define new_tick (let ([__l (if cache (hash-ref cache "tick" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define new_entry (let ([h (make-hash)]) (hash-set! h "key" key) (hash-set! h "val" value) (hash-set! h "freq" 1) (hash-set! h "order" new_tick) h))
(set! entries (append (or entries (list)) (list new_entry)))
(_return (let ([h (make-hash)]) (hash-set! h "entries" entries) (hash-set! h "capacity" (if cache (hash-ref cache "capacity" #f) #f)) (hash-set! h "hits" (if cache (hash-ref cache "hits" #f) #f)) (hash-set! h "miss" (if cache (hash-ref cache "miss" #f) #f)) (hash-set! h "tick" new_tick) h))
))
)
(define (cache_info cache)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append (string-append (string-append (string-append (string-append "CacheInfo(hits=" (to-string (if cache (hash-ref cache "hits" #f) #f))) ", misses=") (to-string (if cache (hash-ref cache "miss" #f) #f))) ", capacity=") (to-string (if cache (hash-ref cache "capacity" #f) #f))) ", current_size=") (to-string (cond [(not (if cache (hash-ref cache "entries" #f) #f)) 0] [(string? (if cache (hash-ref cache "entries" #f) #f)) (string-length (if cache (hash-ref cache "entries" #f) #f))] [(hash? (if cache (hash-ref cache "entries" #f) #f)) (hash-count (if cache (hash-ref cache "entries" #f) #f))] [else (length (if cache (hash-ref cache "entries" #f) #f))]))) ")"))
))
)
(define (main)
  (let/ec _return (begin
(define cache (lfu_new 2))
(set! cache (lfu_put cache 1 1))
(set! cache (lfu_put cache 2 2))
(define r (lfu_get cache 1))
(set! cache (if r (hash-ref r "cache" #f) #f))
(if (if r (hash-ref r "ok" #f) #f) (let ()
(displayln (to-string (if r (hash-ref r "value" #f) #f)))
) (let ()
(displayln "None")
))
(set! cache (lfu_put cache 3 3))
(set! r (lfu_get cache 2))
(set! cache (if r (hash-ref r "cache" #f) #f))
(if (if r (hash-ref r "ok" #f) #f) (let ()
(displayln (to-string (if r (hash-ref r "value" #f) #f)))
) (let ()
(displayln "None")
))
(set! cache (lfu_put cache 4 4))
(set! r (lfu_get cache 1))
(set! cache (if r (hash-ref r "cache" #f) #f))
(if (if r (hash-ref r "ok" #f) #f) (let ()
(displayln (to-string (if r (hash-ref r "value" #f) #f)))
) (let ()
(displayln "None")
))
(set! r (lfu_get cache 3))
(set! cache (if r (hash-ref r "cache" #f) #f))
(if (if r (hash-ref r "ok" #f) #f) (let ()
(displayln (to-string (if r (hash-ref r "value" #f) #f)))
) (let ()
(displayln "None")
))
(set! r (lfu_get cache 4))
(set! cache (if r (hash-ref r "cache" #f) #f))
(if (if r (hash-ref r "ok" #f) #f) (let ()
(displayln (to-string (if r (hash-ref r "value" #f) #f)))
) (let ()
(displayln "None")
))
(displayln (cache_info cache))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
