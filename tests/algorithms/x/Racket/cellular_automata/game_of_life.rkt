;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (count_alive_neighbours board row col)
  (let/ec _return (begin
(define size (cond [(string? board) (string-length board)] [(hash? board) (hash-count board)] [else (length board)]))
(define alive 0)
(define dr (- 1))
(let/ec _break (let loop ()
  (if (< dr 2) (let/ec _cont
    (define dc (- 1))
    (let/ec _break (let loop ()
  (if (< dc 2) (let/ec _cont
    (define nr (let ([__l row] [__r dr]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define nc (let ([__l col] [__r dc]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (and (and (and (and (not (and (equal? dr 0) (equal? dc 0))) (>= nr 0)) (< nr size)) (>= nc 0)) (< nc size)) (let ()
(if (if (if board (if (hash? board) (hash-ref board nr #f) (list-ref board (int nr))) #f) (if (hash? (if board (if (hash? board) (hash-ref board nr #f) (list-ref board (int nr))) #f)) (hash-ref (if board (if (hash? board) (hash-ref board nr #f) (list-ref board (int nr))) #f) nc #f) (list-ref (if board (if (hash? board) (hash-ref board nr #f) (list-ref board (int nr))) #f) (int nc))) #f) (let ()
(set! alive (let ([__l alive] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
) (void))
    (set! dc (let ([__l dc] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! dr (let ([__l dr] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return alive)
))
)
(define (next_state current alive)
  (let/ec _return (begin
(define state current)
(if current (let ()
(if (< alive 2) (let ()
(set! state #f)
) (let ()
(if (or (equal? alive 2) (equal? alive 3)) (let ()
(set! state #t)
) (let ()
(set! state #f)
))
))
) (let ()
(if (equal? alive 3) (let ()
(set! state #t)
) (void))
))
(_return state)
))
)
(define (step board)
  (let/ec _return (begin
(define size (cond [(string? board) (string-length board)] [(hash? board) (hash-count board)] [else (length board)]))
(define new_board (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r size) (let/ec _cont
    (define new_row (list))
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c size) (let/ec _cont
    (define alive (count_alive_neighbours board r c))
    (define cell (if (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f) (if (hash? (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f)) (hash-ref (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f) c #f) (list-ref (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f) (int c))) #f))
    (define updated (next_state cell alive))
    (set! new_row (append new_row (list updated)))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! new_board (append new_board (list new_row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return new_board)
))
)
(define (show board)
  (let/ec _return (begin
(define r 0)
(let/ec _break (let loop ()
  (if (< r (cond [(string? board) (string-length board)] [(hash? board) (hash-count board)] [else (length board)])) (let/ec _cont
    (define line "")
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c (cond [(string? (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f)) (string-length (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f))] [(hash? (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f)) (hash-count (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f))] [else (length (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f))])) (let/ec _cont
    (if (if (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f) (if (hash? (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f)) (hash-ref (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f) c #f) (list-ref (if board (if (hash? board) (hash-ref board r #f) (list-ref board (int r))) #f) (int c))) #f) (let ()
(set! line (string-append line "#"))
) (let ()
(set! line (string-append line "."))
))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define glider (list (list #f #t #f #f #f) (list #f #f #t #f #f) (list #t #t #t #f #f) (list #f #f #f #f #f) (list #f #f #f #f #f)))
(define board glider)
(define i 0)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln "Initial")
(show board)
(let/ec _break (let loop ()
  (if (< i 4) (let/ec _cont
    (set! board (step board))
    (displayln (string-append "\nStep " (format "~a" (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (show board)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
