;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define seed 1)
(define NEG_ONE (- 1))
(define (rand)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return seed)
))
)
(define (randint a b)
  (let/ec _return (begin
(define r (rand))
(_return (let ([__l a] [__r (modulo r (let ([__l (- b a)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (random)
  (let/ec _return (begin
(_return (/ (* 1.0 (rand)) 2147483648.0))
))
)
(define (construct_highway number_of_cells frequency initial_speed random_frequency random_speed max_speed)
  (let/ec _return (begin
(define row (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i number_of_cells) (let/ec _cont
    (set! row (append row (list (- 1))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define highway (list))
(set! highway (append highway (list row)))
(set! i 0)
(if (< initial_speed 0) (let ()
(set! initial_speed 0)
) (void))
(let/ec _break (let loop ()
  (if (< i number_of_cells) (let/ec _cont
    (define speed initial_speed)
    (if random_speed (let ()
(set! speed (randint 0 max_speed))
) (void))
    (set! highway (list-set highway 0 (list-set (list-ref highway 0) i speed)))
    (define step frequency)
    (if random_frequency (let ()
(set! step (randint 1 (* max_speed 2)))
) (void))
    (set! i (let ([__l i] [__r step]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return highway)
))
)
(define (get_distance highway_now car_index)
  (let/ec _return (begin
(define distance 0)
(define i (let ([__l car_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (< i (cond [(string? highway_now) (string-length highway_now)] [(hash? highway_now) (hash-count highway_now)] [else (length highway_now)])) (let/ec _cont
    (if (> (if highway_now (if (hash? highway_now) (hash-ref highway_now i #f) (list-ref highway_now (int i))) #f) NEG_ONE) (let ()
(_return distance)
) (void))
    (set! distance (let ([__l distance] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([__l distance] [__r (get_distance highway_now (- 1))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (update highway_now probability max_speed)
  (let/ec _return (begin
(define number_of_cells (cond [(string? highway_now) (string-length highway_now)] [(hash? highway_now) (hash-count highway_now)] [else (length highway_now)]))
(define next_highway (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i number_of_cells) (let/ec _cont
    (set! next_highway (append next_highway (list (- 1))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define car_index 0)
(let/ec _break (let loop ()
  (if (< car_index number_of_cells) (let/ec _cont
    (define speed (if highway_now (if (hash? highway_now) (hash-ref highway_now car_index #f) (list-ref highway_now (int car_index))) #f))
    (if (> speed NEG_ONE) (let ()
(define new_speed (let ([__l speed] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (> new_speed max_speed) (let ()
(set! new_speed max_speed)
) (void))
(define dn (- (get_distance highway_now car_index) 1))
(if (> new_speed dn) (let ()
(set! new_speed dn)
) (void))
(if (< (random) probability) (let ()
(set! new_speed (- new_speed 1))
(if (< new_speed 0) (let ()
(set! new_speed 0)
) (void))
) (void))
(set! next_highway (list-set next_highway (int car_index) new_speed))
) (void))
    (set! car_index (let ([__l car_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return next_highway)
))
)
(define (simulate highway number_of_update probability max_speed)
  (let/ec _return (begin
(define number_of_cells (cond [(string? (if highway (if (hash? highway) (hash-ref highway 0 #f) (list-ref highway (int 0))) #f)) (string-length (if highway (if (hash? highway) (hash-ref highway 0 #f) (list-ref highway (int 0))) #f))] [(hash? (if highway (if (hash? highway) (hash-ref highway 0 #f) (list-ref highway (int 0))) #f)) (hash-count (if highway (if (hash? highway) (hash-ref highway 0 #f) (list-ref highway (int 0))) #f))] [else (length (if highway (if (hash? highway) (hash-ref highway 0 #f) (list-ref highway (int 0))) #f))]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i number_of_update) (let/ec _cont
    (define next_speeds (update (if highway (if (hash? highway) (hash-ref highway i #f) (list-ref highway (int i))) #f) probability max_speed))
    (define real_next (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j number_of_cells) (let/ec _cont
    (set! real_next (append real_next (list (- 1))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k number_of_cells) (let/ec _cont
    (define speed (if next_speeds (if (hash? next_speeds) (hash-ref next_speeds k #f) (list-ref next_speeds (int k))) #f))
    (if (> speed NEG_ONE) (let ()
(define index (modulo (let ([__l k] [__r speed]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) number_of_cells))
(set! real_next (list-set real_next (int index) speed))
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! highway (append highway (list real_next)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return highway)
))
)
(define (main)
  (let/ec _return (begin
(define ex1 (simulate (construct_highway 6 3 0 #f #f 2) 2 0.0 2))
(displayln (format "~a" ex1))
(define ex2 (simulate (construct_highway 5 2 (- 2) #f #f 2) 3 0.0 2))
(displayln (format "~a" ex2))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
