;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (create_board width height)
  (let/ec _return (begin
(define board (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i height) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j width) (let/ec _cont
    (set! row (append row (list #t)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! board (append board (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return board)
))
)
(define (move_ant board x y direction)
  (let/ec _return (begin
(if (if (if board (if (hash? board) (hash-ref board x #f) (list-ref board (int x))) #f) (if (hash? (if board (if (hash? board) (hash-ref board x #f) (list-ref board (int x))) #f)) (hash-ref (if board (if (hash? board) (hash-ref board x #f) (list-ref board (int x))) #f) y #f) (list-ref (if board (if (hash? board) (hash-ref board x #f) (list-ref board (int x))) #f) (int y))) #f) (let ()
(set! direction (modulo (let ([__l direction] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 4))
) (let ()
(set! direction (modulo (let ([__l direction] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 4))
))
(define old_x x)
(define old_y y)
(if (equal? direction 0) (let ()
(set! x (- x 1))
) (let ()
(if (equal? direction 1) (let ()
(set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (equal? direction 2) (let ()
(set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! y (- y 1))
))
))
))
(set! board (list-set board old_x (list-set (list-ref board old_x) old_y (not (if (if board (if (hash? board) (hash-ref board old_x #f) (list-ref board (int old_x))) #f) (if (hash? (if board (if (hash? board) (hash-ref board old_x #f) (list-ref board (int old_x))) #f)) (hash-ref (if board (if (hash? board) (hash-ref board old_x #f) (list-ref board (int old_x))) #f) old_y #f) (list-ref (if board (if (hash? board) (hash-ref board old_x #f) (list-ref board (int old_x))) #f) (int old_y))) #f)))))
(_return (list x y direction))
))
)
(define (langtons_ant width height steps)
  (let/ec _return (begin
(define board (create_board width height))
(define x (quotient width 2))
(define y (quotient height 2))
(define dir 3)
(define s 0)
(let/ec _break (let loop ()
  (if (< s steps) (let/ec _cont
    (define state (move_ant board x y dir))
    (set! x (if state (if (hash? state) (hash-ref state 0 #f) (list-ref state (int 0))) #f))
    (set! y (if state (if (hash? state) (hash-ref state 1 #f) (list-ref state (int 1))) #f))
    (set! dir (if state (if (hash? state) (hash-ref state 2 #f) (list-ref state (int 2))) #f))
    (set! s (let ([__l s] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return board)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
