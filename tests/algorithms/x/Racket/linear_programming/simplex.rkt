;; Generated by Mochi 0.10.66 on 2025-08-16 11:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (pivot t row col)
  (let/ec _return (begin
(define pivotRow (list))
(define pivotVal (if (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f) (if (hash? (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f) col #f) (safe-index (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f) (int col))) #f))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j (cond [(not (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f)) 0] [(string? (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f)) (string-length (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f))] [(hash? (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f)) (hash-count (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f))] [else (length (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f))]))
(set! pivotRow (append (or pivotRow (list)) (list (/ (if (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f) (if (hash? (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f) j #f) (safe-index (if t (if (hash? t) (hash-ref t row #f) (safe-index t (int row))) #f) (int j))) #f) pivotVal))))
      (set! j (+ j 1))
      (loop)))
))
(set! t (list-set t (int row) pivotRow))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not t) 0] [(string? t) (string-length t)] [(hash? t) (hash-count t)] [else (length t)]))
(if (not (equal? i row)) (let ()
(define factor (if (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) (if (hash? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) col #f) (safe-index (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) (int col))) #f))
(define newRow (list))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j (cond [(not (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) 0] [(string? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (string-length (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f))] [(hash? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (hash-count (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f))] [else (length (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f))]))
(define value (- (if (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) (if (hash? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) j #f) (safe-index (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) (int j))) #f) (* factor (if pivotRow (if (hash? pivotRow) (hash-ref pivotRow j #f) (safe-index pivotRow (int j))) #f))))
(set! newRow (append (or newRow (list)) (list value)))
      (set! j (+ j 1))
      (loop)))
))
(set! t (list-set t (int i) newRow))
) (void))
      (set! i (+ i 1))
      (loop)))
))
(_return t)
))
)
(define (findPivot t)
  (let/ec _return (begin
(define col 0)
(define minVal 0.0)
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j (- (cond [(not (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f)) 0] [(string? (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f)) (string-length (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f))] [(hash? (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f)) (hash-count (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f))] [else (length (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f))]) 1))
(define v (if (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f) (if (hash? (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f) j #f) (safe-index (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f) (int j))) #f))
(if (let ([__l v] [__r minVal]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! minVal v)
(set! col j)
) (void))
      (set! j (+ j 1))
      (loop)))
))
(if (let ([__l minVal] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(_return (list (- 1) (- 1)))
) (void))
(define row (- 1))
(define minRatio 0.0)
(define first #t)
(let/ec _break (let ([i 1])
  (let loop ()
    (when (< i (cond [(not t) 0] [(string? t) (string-length t)] [(hash? t) (hash-count t)] [else (length t)]))
(define coeff (if (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) (if (hash? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) col #f) (safe-index (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) (int col))) #f))
(if (let ([__l coeff] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(define rhs (if (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) (if (hash? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) (- (cond [(not (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) 0] [(string? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (string-length (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f))] [(hash? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (hash-count (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f))] [else (length (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f))]) 1) #f) (safe-index (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f) (int (- (cond [(not (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) 0] [(string? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (string-length (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f))] [(hash? (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f)) (hash-count (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f))] [else (length (if t (if (hash? t) (hash-ref t i #f) (safe-index t (int i))) #f))]) 1)))) #f))
(define ratio (/ rhs coeff))
(if (or first (let ([__l ratio] [__r minRatio]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(set! minRatio ratio)
(set! row i)
(set! first #f)
) (void))
) (void))
      (set! i (+ i 1))
      (loop)))
))
(_return (list row col))
))
)
(define (interpret t nVars)
  (let/ec _return (begin
(define lastCol (- (cond [(not (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f)) 0] [(string? (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f)) (string-length (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f))] [(hash? (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f)) (hash-count (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f))] [else (length (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f))]) 1))
(define p (if (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f) (if (hash? (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f) lastCol #f) (safe-index (if t (if (hash? t) (hash-ref t 0 #f) (safe-index t (int 0))) #f) (int lastCol))) #f))
(if (let ([__l p] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! p (- p))
) (void))
(define result (let ([h (make-hash)]) h))
(if (hash? result) (hash-set! result "P" p) (begin (set! result (make-hash)) (hash-set! result "P" p)))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i nVars)
(define nzRow (- 1))
(define nzCount 0)
(let/ec _break (let ([r 0])
  (let loop ()
    (when (< r (cond [(not t) 0] [(string? t) (string-length t)] [(hash? t) (hash-count t)] [else (length t)]))
(define val (if (if t (if (hash? t) (hash-ref t r #f) (safe-index t (int r))) #f) (if (hash? (if t (if (hash? t) (hash-ref t r #f) (safe-index t (int r))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t r #f) (safe-index t (int r))) #f) i #f) (safe-index (if t (if (hash? t) (hash-ref t r #f) (safe-index t (int r))) #f) (int i))) #f))
(if (not (equal? val 0.0)) (let ()
(set! nzCount (let ([__l nzCount] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! nzRow r)
) (void))
      (set! r (+ r 1))
      (loop)))
))
(if (and (equal? nzCount 1) (equal? (if (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f) (if (hash? (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f) i #f) (safe-index (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f) (int i))) #f) 1.0)) (let ()
(if (hash? result) (hash-set! result (string-append "x" (to-string (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (if (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f) (if (hash? (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f) lastCol #f) (safe-index (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f) (int lastCol))) #f)) (begin (set! result (make-hash)) (hash-set! result (string-append "x" (to-string (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (if (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f) (if (hash? (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f)) (hash-ref (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f) lastCol #f) (safe-index (if t (if (hash? t) (hash-ref t nzRow #f) (safe-index t (int nzRow))) #f) (int lastCol))) #f))))
) (void))
      (set! i (+ i 1))
      (loop)))
))
(_return result)
))
)
(define (simplex tab)
  (let/ec _return (begin
(define t tab)
(let/ec _break (let loop ()
  (if #t (begin
    (let/ec _cont
      (define p (findPivot t))
      (define row (if p (if (hash? p) (hash-ref p 0 #f) (safe-index p (int 0))) #f))
      (define col (if p (if (hash? p) (hash-ref p 1 #f) (safe-index p (int 1))) #f))
      (if (let ([__l row] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_break)
) (void))
      (set! t (pivot t row col))
    )
    (loop)) (void))))
(_return t)
))
)
(define tableau (list (list (- 1.0) (- 1.0) 0.0 0.0 0.0) (list 1.0 3.0 1.0 0.0 4.0) (list 3.0 1.0 0.0 1.0 4.0)))
(define finalTab (simplex tableau))
(define res (interpret finalTab 2))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (string-append "P: " (to-string (if res (hash-ref res "P" 0.0) #f))))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i 2)
(define key (string-append "x" (to-string (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (hash-has-key? res key) (let ()
(displayln (string-append (string-append key ": ") (to-string (if res (hash-ref res key 0.0) #f))))
) (void))
      (set! i (+ i 1))
      (loop)))
))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
