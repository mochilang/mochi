;; Generated by Mochi 0.10.64 on 2025-08-12 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (max_tasks tasks_info)
  (let/ec _return (begin
(define order (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not tasks_info) 0] [(string? tasks_info) (string-length tasks_info)] [(hash? tasks_info) (hash-count tasks_info)] [else (length tasks_info)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! order (append (or order (list)) (list i)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define n (cond [(not order) 0] [(string? order) (string-length order)] [(hash? order) (hash-count order)] [else (length order)]))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l (if (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info (if order (if (hash? order) (hash-ref order j #f) (safe-index order (int j))) #f) #f) (safe-index tasks_info (int (if order (if (hash? order) (hash-ref order j #f) (safe-index order (int j))) #f)))) #f) (if (hash? (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info (if order (if (hash? order) (hash-ref order j #f) (safe-index order (int j))) #f) #f) (safe-index tasks_info (int (if order (if (hash? order) (hash-ref order j #f) (safe-index order (int j))) #f)))) #f)) (hash-ref (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info (if order (if (hash? order) (hash-ref order j #f) (safe-index order (int j))) #f) #f) (safe-index tasks_info (int (if order (if (hash? order) (hash-ref order j #f) (safe-index order (int j))) #f)))) #f) 1 #f) (safe-index (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info (if order (if (hash? order) (hash-ref order j #f) (safe-index order (int j))) #f) #f) (safe-index tasks_info (int (if order (if (hash? order) (hash-ref order j #f) (safe-index order (int j))) #f)))) #f) (int 1))) #f)] [__r (if (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f) #f) (safe-index tasks_info (int (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f)))) #f) (if (hash? (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f) #f) (safe-index tasks_info (int (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f)))) #f)) (hash-ref (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f) #f) (safe-index tasks_info (int (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f)))) #f) 1 #f) (safe-index (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f) #f) (safe-index tasks_info (int (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f)))) #f) (int 1))) #f)]) (> (int __l) (int __r))) (let ()
(define tmp (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f))
(set! order (list-set order (int i) (if order (if (hash? order) (hash-ref order j #f) (safe-index order (int j))) #f)))
(set! order (list-set order (int j) tmp))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define result (list))
(define pos 1)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define id (if order (if (hash? order) (hash-ref order i #f) (safe-index order (int i))) #f))
      (define deadline (if (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info id #f) (safe-index tasks_info (int id))) #f) (if (hash? (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info id #f) (safe-index tasks_info (int id))) #f)) (hash-ref (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info id #f) (safe-index tasks_info (int id))) #f) 0 #f) (safe-index (if tasks_info (if (hash? tasks_info) (hash-ref tasks_info id #f) (safe-index tasks_info (int id))) #f) (int 0))) #f))
      (if (let ([__l deadline] [__r pos]) (>= (int __l) (int __r))) (let ()
(set! result (append (or result (list)) (list id)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! pos (let ([__l pos] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (main)
  (let/ec _return (begin
(define ex1 (list (list 4 20) (list 1 10) (list 1 40) (list 1 30)))
(define ex2 (list (list 1 10) (list 2 20) (list 3 30) (list 2 40)))
(displayln (to-string (max_tasks ex1)))
(displayln (to-string (max_tasks ex2)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
