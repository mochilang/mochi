;; Generated by Mochi 0.10.64 on 2025-08-12 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (sort_jobs_by_profit jobs)
  (let/ec _return (begin
(define js jobs)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not js) 0] [(string? js) (string-length js)] [(hash? js) (hash-count js)] [else (length js)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (- (- (cond [(not js) 0] [(string? js) (string-length js)] [(hash? js) (hash-count js)] [else (length js)]) i) 1)]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define a (if js (if (hash? js) (hash-ref js j #f) (safe-index js (int j))) #f))
      (define b (if js (if (hash? js) (hash-ref js (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index js (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
      (if (let ([__l (if a (hash-ref a "profit" #f) #f)] [__r (if b (hash-ref b "profit" #f) #f)]) (< (int __l) (int __r))) (let ()
(set! js (list-set js (int j) b))
(set! js (list-set js (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) a))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return js)
))
)
(define (max_deadline jobs)
  (let/ec _return (begin
(define max_d 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not jobs) 0] [(string? jobs) (string-length jobs)] [(hash? jobs) (hash-count jobs)] [else (length jobs)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define job (if jobs (if (hash? jobs) (hash-ref jobs i #f) (safe-index jobs (int i))) #f))
      (define d (if job (hash-ref job "deadline" #f) #f))
      (if (let ([__l d] [__r max_d]) (> (int __l) (int __r))) (let ()
(set! max_d d)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return max_d)
))
)
(define (job_sequencing_with_deadlines jobs)
  (let/ec _return (begin
(define js (sort_jobs_by_profit jobs))
(define max_d (max_deadline js))
(define time_slots (list))
(define t 0)
(let/ec _break (let loop ()
  (if (let ([__l t] [__r max_d]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! time_slots (append (or time_slots (list)) (list (- 0 1))))
      (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define count 0)
(define max_profit 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not js) 0] [(string? js) (string-length js)] [(hash? js) (hash-count js)] [else (length js)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define job (if js (if (hash? js) (hash-ref js i #f) (safe-index js (int i))) #f))
      (define j (- (if job (hash-ref job "deadline" #f) #f) 1))
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r 0]) (>= (int __l) (int __r))) (begin
    (let/ec _cont
      (if (equal? (if time_slots (if (hash? time_slots) (hash-ref time_slots j #f) (safe-index time_slots (int j))) #f) (- 0 1)) (let ()
(set! time_slots (list-set time_slots (int j) (if job (hash-ref job "id" #f) #f)))
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! max_profit (let ([__l max_profit] [__r (if job (hash-ref job "profit" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_break)
) (void))
      (set! j (- j 1))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define result (list))
(set! result (append (or result (list)) (list count)))
(set! result (append (or result (list)) (list max_profit)))
(_return result)
))
)
(define jobs1 (list))
(define jobs2 (list))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(set! jobs1 (append (or jobs1 (list)) (list (let ([h (make-hash)]) (hash-set! h "id" 1) (hash-set! h "deadline" 4) (hash-set! h "profit" 20) h))))
(set! jobs1 (append (or jobs1 (list)) (list (let ([h (make-hash)]) (hash-set! h "id" 2) (hash-set! h "deadline" 1) (hash-set! h "profit" 10) h))))
(set! jobs1 (append (or jobs1 (list)) (list (let ([h (make-hash)]) (hash-set! h "id" 3) (hash-set! h "deadline" 1) (hash-set! h "profit" 40) h))))
(set! jobs1 (append (or jobs1 (list)) (list (let ([h (make-hash)]) (hash-set! h "id" 4) (hash-set! h "deadline" 1) (hash-set! h "profit" 30) h))))
(displayln (to-string (job_sequencing_with_deadlines jobs1)))
(set! jobs2 (append (or jobs2 (list)) (list (let ([h (make-hash)]) (hash-set! h "id" 1) (hash-set! h "deadline" 2) (hash-set! h "profit" 100) h))))
(set! jobs2 (append (or jobs2 (list)) (list (let ([h (make-hash)]) (hash-set! h "id" 2) (hash-set! h "deadline" 1) (hash-set! h "profit" 19) h))))
(set! jobs2 (append (or jobs2 (list)) (list (let ([h (make-hash)]) (hash-set! h "id" 3) (hash-set! h "deadline" 2) (hash-set! h "profit" 27) h))))
(set! jobs2 (append (or jobs2 (list)) (list (let ([h (make-hash)]) (hash-set! h "id" 4) (hash-set! h "deadline" 1) (hash-set! h "profit" 25) h))))
(set! jobs2 (append (or jobs2 (list)) (list (let ([h (make-hash)]) (hash-set! h "id" 5) (hash-set! h "deadline" 1) (hash-set! h "profit" 15) h))))
(displayln (to-string (job_sequencing_with_deadlines jobs2)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
