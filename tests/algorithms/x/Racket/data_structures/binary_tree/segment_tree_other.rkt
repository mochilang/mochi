;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (combine a b op)
  (let/ec _return (begin
(if (equal? op 0) (let ()
(_return (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (equal? op 1) (let ()
(if (> a b) (let ()
(_return a)
) (void))
(_return b)
) (void))
(if (< a b) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (build_tree nodes arr start end op)
  (let/ec _return (begin
(if (equal? start end) (let ()
(define node (hash "start" start "end" end "val" (if arr (if (hash? arr) (hash-ref arr start #f) (list-ref arr (int start))) #f) "mid" start "left" (- 1) "right" (- 1)))
(define new_nodes (append nodes (list node)))
(_return (hash "nodes" new_nodes "idx" (- (cond [(string? new_nodes) (string-length new_nodes)] [(hash? new_nodes) (hash-count new_nodes)] [else (length new_nodes)]) 1)))
) (void))
(define mid (quotient (let ([__l start] [__r end]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
(define left_res (build_tree nodes arr start mid op))
(define right_res (build_tree (if left_res (hash-ref left_res "nodes" #f) #f) arr (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) end op))
(define left_node (if (if right_res (hash-ref right_res "nodes" #f) #f) (if (hash? (if right_res (hash-ref right_res "nodes" #f) #f)) (hash-ref (if right_res (hash-ref right_res "nodes" #f) #f) (if left_res (hash-ref left_res "idx" #f) #f) #f) (list-ref (if right_res (hash-ref right_res "nodes" #f) #f) (int (if left_res (hash-ref left_res "idx" #f) #f)))) #f))
(define right_node (if (if right_res (hash-ref right_res "nodes" #f) #f) (if (hash? (if right_res (hash-ref right_res "nodes" #f) #f)) (hash-ref (if right_res (hash-ref right_res "nodes" #f) #f) (if right_res (hash-ref right_res "idx" #f) #f) #f) (list-ref (if right_res (hash-ref right_res "nodes" #f) #f) (int (if right_res (hash-ref right_res "idx" #f) #f)))) #f))
(define val (combine (if left_node (hash-ref left_node "val" #f) #f) (if right_node (hash-ref right_node "val" #f) #f) op))
(define parent (hash "start" start "end" end "val" val "mid" mid "left" (if left_res (hash-ref left_res "idx" #f) #f) "right" (if right_res (hash-ref right_res "idx" #f) #f)))
(define new_nodes (append (if right_res (hash-ref right_res "nodes" #f) #f) (list parent)))
(_return (hash "nodes" new_nodes "idx" (- (cond [(string? new_nodes) (string-length new_nodes)] [(hash? new_nodes) (hash-count new_nodes)] [else (length new_nodes)]) 1)))
))
)
(define (new_segment_tree collection op)
  (let/ec _return (begin
(_return (hash "arr" collection "op" op))
))
)
(define (update tree i val)
  (let/ec _return (begin
(define new_arr (list))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? (if tree (hash-ref tree "arr" #f) #f)) (string-length (if tree (hash-ref tree "arr" #f) #f))] [(hash? (if tree (hash-ref tree "arr" #f) #f)) (hash-count (if tree (hash-ref tree "arr" #f) #f))] [else (length (if tree (hash-ref tree "arr" #f) #f))])) (let/ec _cont
    (if (equal? idx i) (let ()
(set! new_arr (append new_arr (list val)))
) (let ()
(set! new_arr (append new_arr (list (if (if tree (hash-ref tree "arr" #f) #f) (if (hash? (if tree (hash-ref tree "arr" #f) #f)) (hash-ref (if tree (hash-ref tree "arr" #f) #f) idx #f) (list-ref (if tree (hash-ref tree "arr" #f) #f) (int idx))) #f))))
))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "arr" new_arr "op" (if tree (hash-ref tree "op" #f) #f)))
))
)
(define (query_range tree i j)
  (let/ec _return (begin
(define result (if (if tree (hash-ref tree "arr" #f) #f) (if (hash? (if tree (hash-ref tree "arr" #f) #f)) (hash-ref (if tree (hash-ref tree "arr" #f) #f) i #f) (list-ref (if tree (hash-ref tree "arr" #f) #f) (int i))) #f))
(define idx (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (<= idx j) (let/ec _cont
    (set! result (combine result (if (if tree (hash-ref tree "arr" #f) #f) (if (hash? (if tree (hash-ref tree "arr" #f) #f)) (hash-ref (if tree (hash-ref tree "arr" #f) #f) idx #f) (list-ref (if tree (hash-ref tree "arr" #f) #f) (int idx))) #f) (if tree (hash-ref tree "op" #f) #f)))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (traverse tree)
  (let/ec _return (begin
(if (equal? (cond [(string? (if tree (hash-ref tree "arr" #f) #f)) (string-length (if tree (hash-ref tree "arr" #f) #f))] [(hash? (if tree (hash-ref tree "arr" #f) #f)) (hash-count (if tree (hash-ref tree "arr" #f) #f))] [else (length (if tree (hash-ref tree "arr" #f) #f))]) 0) (let ()
(_return (list))
) (void))
(define res (build_tree (list) (if tree (hash-ref tree "arr" #f) #f) 0 (- (cond [(string? (if tree (hash-ref tree "arr" #f) #f)) (string-length (if tree (hash-ref tree "arr" #f) #f))] [(hash? (if tree (hash-ref tree "arr" #f) #f)) (hash-count (if tree (hash-ref tree "arr" #f) #f))] [else (length (if tree (hash-ref tree "arr" #f) #f))]) 1) (if tree (hash-ref tree "op" #f) #f)))
(_return (if res (hash-ref res "nodes" #f) #f))
))
)
(define (node_to_string node)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append (string-append (string-append "SegmentTreeNode(start=" (format "~a" (if node (hash-ref node "start" #f) #f))) ", end=") (format "~a" (if node (hash-ref node "end" #f) #f))) ", val=") (format "~a" (if node (hash-ref node "val" #f) #f))) ")"))
))
)
(define (print_traverse tree)
  (let/ec _return (begin
(define nodes (traverse tree))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])) (let/ec _cont
    (displayln (node_to_string (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln "")
))
)
(define arr (list 2 1 5 3 4))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(let/ec _break (for ([op (list 0 1 2)])
  (let/ec _cont
(displayln "**************************************************")
(define tree (new_segment_tree arr op))
(print_traverse tree)
(set! tree (update tree 1 5))
(print_traverse tree)
(displayln (query_range tree 3 4))
(displayln (query_range tree 2 2))
(displayln (query_range tree 1 3))
(displayln "")
  )))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
