;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (pow2 exp)
  (let/ec _return (begin
(define res 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! res (* res 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (create_sparse max_node parent)
  (let/ec _return (begin
(define j 1)
(let/ec _break (let loop ()
  (if (< (pow2 j) max_node) (let/ec _cont
    (define i 1)
    (let/ec _break (let loop ()
  (if (<= i max_node) (let/ec _cont
    (set! parent (list-set parent j (list-set (list-ref parent j) i (if (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f) (if (hash? (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f)) (hash-ref (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f) (if (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f) (if (hash? (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f)) (hash-ref (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f) i #f) (list-ref (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f) (int i))) #f) #f) (list-ref (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f) (int (if (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f) (if (hash? (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f)) (hash-ref (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f) i #f) (list-ref (if parent (if (hash? parent) (hash-ref parent (- j 1) #f) (list-ref parent (int (- j 1)))) #f) (int i))) #f)))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return parent)
))
)
(define (lowest_common_ancestor u v level parent)
  (let/ec _return (begin
(if (< (if level (if (hash? level) (hash-ref level u #f) (list-ref level (int u))) #f) (if level (if (hash? level) (hash-ref level v #f) (list-ref level (int v))) #f)) (let ()
(define temp u)
(set! u v)
(set! v temp)
) (void))
(define i 18)
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (if (>= (- (if level (if (hash? level) (hash-ref level u #f) (list-ref level (int u))) #f) (pow2 i)) (if level (if (hash? level) (hash-ref level v #f) (list-ref level (int v))) #f)) (let ()
(set! u (if (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f) (if (hash? (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f)) (hash-ref (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f) u #f) (list-ref (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f) (int u))) #f))
) (void))
    (set! i (- i 1))
    (loop)) (void))))
(if (equal? u v) (let ()
(_return u)
) (void))
(set! i 18)
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (define pu (if (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f) (if (hash? (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f)) (hash-ref (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f) u #f) (list-ref (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f) (int u))) #f))
    (define pv (if (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f) (if (hash? (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f)) (hash-ref (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f) v #f) (list-ref (if parent (if (hash? parent) (hash-ref parent i #f) (list-ref parent (int i))) #f) (int v))) #f))
    (if (and (not (equal? pu 0)) (not (equal? pu pv))) (let ()
(set! u pu)
(set! v pv)
) (void))
    (set! i (- i 1))
    (loop)) (void))))
(_return (if (if parent (if (hash? parent) (hash-ref parent 0 #f) (list-ref parent (int 0))) #f) (if (hash? (if parent (if (hash? parent) (hash-ref parent 0 #f) (list-ref parent (int 0))) #f)) (hash-ref (if parent (if (hash? parent) (hash-ref parent 0 #f) (list-ref parent (int 0))) #f) u #f) (list-ref (if parent (if (hash? parent) (hash-ref parent 0 #f) (list-ref parent (int 0))) #f) (int u))) #f))
))
)
(define (breadth_first_search level parent max_node graph root)
  (let/ec _return (begin
(set! level (list-set level (int root) 0))
(define q (list))
(set! q (append q (list root)))
(define head 0)
(let/ec _break (let loop ()
  (if (< head (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])) (let/ec _cont
    (define u (if q (if (hash? q) (hash-ref q head #f) (list-ref q (int head))) #f))
    (set! head (let ([__l head] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define adj (if graph (hash-ref graph u #f) #f))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? adj) (string-length adj)] [(hash? adj) (hash-count adj)] [else (length adj)])) (let/ec _cont
    (define v (if adj (if (hash? adj) (hash-ref adj j #f) (list-ref adj (int j))) #f))
    (if (equal? (if level (if (hash? level) (hash-ref level v #f) (list-ref level (int v))) #f) (- 0 1)) (let ()
(set! level (list-set level (int v) (let ([__l (if level (if (hash? level) (hash-ref level u #f) (list-ref level (int u))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! parent (list-set parent 0 (list-set (list-ref parent 0) v u)))
(set! q (append q (list v)))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define max_node 13)
(define parent (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (let ([__l max_node] [__r 10]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (set! row (append row (list 0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! parent (append parent (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define level (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (let ([__l max_node] [__r 10]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (set! level (append level (list (- 0 1))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define graph (hash))
(set! graph (hash-set (or graph (hash)) 1 (list 2 3 4)))
(set! graph (hash-set (or graph (hash)) 2 (list 5)))
(set! graph (hash-set (or graph (hash)) 3 (list 6 7)))
(set! graph (hash-set (or graph (hash)) 4 (list 8)))
(set! graph (hash-set (or graph (hash)) 5 (list 9 10)))
(set! graph (hash-set (or graph (hash)) 6 (list 11)))
(set! graph (hash-set (or graph (hash)) 7 (list)))
(set! graph (hash-set (or graph (hash)) 8 (list 12 13)))
(set! graph (hash-set (or graph (hash)) 9 (list)))
(set! graph (hash-set (or graph (hash)) 10 (list)))
(set! graph (hash-set (or graph (hash)) 11 (list)))
(set! graph (hash-set (or graph (hash)) 12 (list)))
(set! graph (hash-set (or graph (hash)) 13 (list)))
(breadth_first_search level parent max_node graph 1)
(set! parent (create_sparse max_node parent))
(displayln (string-append "LCA of node 1 and 3 is: " (format "~a" (lowest_common_ancestor 1 3 level parent))))
(displayln (string-append "LCA of node 5 and 6 is: " (format "~a" (lowest_common_ancestor 5 6 level parent))))
(displayln (string-append "LCA of node 7 and 11 is: " (format "~a" (lowest_common_ancestor 7 11 level parent))))
(displayln (string-append "LCA of node 6 and 7 is: " (format "~a" (lowest_common_ancestor 6 7 level parent))))
(displayln (string-append "LCA of node 4 and 12 is: " (format "~a" (lowest_common_ancestor 4 12 level parent))))
(displayln (string-append "LCA of node 8 and 8 is: " (format "~a" (lowest_common_ancestor 8 8 level parent))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
