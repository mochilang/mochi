;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define NIL (- 0 1))
(define nodes (list))
(define (new_node value)
  (let/ec _return (begin
(define node (hash "data" value "left" NIL "right" NIL "height" 1))
(set! nodes (append nodes (list node)))
(_return (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
))
)
(define (get_height i)
  (let/ec _return (begin
(if (equal? i NIL) (let ()
(_return 0)
) (void))
(_return (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "height" #f) #f))
))
)
(define (my_max a b)
  (let/ec _return (begin
(if (> a b) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (update_height i)
  (let/ec _return (begin
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "height" (let ([__l (my_max (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)) (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
)
(define (right_rotation i)
  (let/ec _return (begin
(define left (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f))
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "left" (if (if nodes (if (hash? nodes) (hash-ref nodes left #f) (list-ref nodes (int left))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes left #f) (list-ref nodes (int left))) #f) "right" #f) #f))))
(set! nodes (list-set nodes left (hash-set (list-ref nodes left) "right" i)))
(update_height i)
(update_height left)
(_return left)
))
)
(define (left_rotation i)
  (let/ec _return (begin
(define right (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f))
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "right" (if (if nodes (if (hash? nodes) (hash-ref nodes right #f) (list-ref nodes (int right))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes right #f) (list-ref nodes (int right))) #f) "left" #f) #f))))
(set! nodes (list-set nodes right (hash-set (list-ref nodes right) "left" i)))
(update_height i)
(update_height right)
(_return right)
))
)
(define (lr_rotation i)
  (let/ec _return (begin
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "left" (left_rotation (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)))))
(_return (right_rotation i))
))
)
(define (rl_rotation i)
  (let/ec _return (begin
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "right" (right_rotation (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))))
(_return (left_rotation i))
))
)
(define (insert_node i value)
  (let/ec _return (begin
(if (equal? i NIL) (let ()
(_return (new_node value))
) (void))
(if (< value (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "data" #f) #f)) (let ()
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "left" (insert_node (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) value))))
(if (equal? (- (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)) (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f))) 2) (let ()
(if (< value (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)))) #f) "data" #f) #f)) (let ()
(set! i (right_rotation i))
) (let ()
(set! i (lr_rotation i))
))
) (void))
) (let ()
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "right" (insert_node (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) value))))
(if (equal? (- (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)) (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f))) 2) (let ()
(if (< value (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))) #f) "data" #f) #f)) (let ()
(set! i (rl_rotation i))
) (let ()
(set! i (left_rotation i))
))
) (void))
))
(update_height i)
(_return i)
))
)
(define (get_left_most i)
  (let/ec _return (begin
(define cur i)
(let/ec _break (let loop ()
  (if (not (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes cur #f) (list-ref nodes (int cur))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes cur #f) (list-ref nodes (int cur))) #f) "left" #f) #f) NIL)) (let/ec _cont
    (set! cur (if (if nodes (if (hash? nodes) (hash-ref nodes cur #f) (list-ref nodes (int cur))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes cur #f) (list-ref nodes (int cur))) #f) "left" #f) #f))
    (loop)) (void))))
(_return (if (if nodes (if (hash? nodes) (hash-ref nodes cur #f) (list-ref nodes (int cur))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes cur #f) (list-ref nodes (int cur))) #f) "data" #f) #f))
))
)
(define (del_node i value)
  (let/ec _return (begin
(if (equal? i NIL) (let ()
(_return NIL)
) (void))
(if (< value (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "data" #f) #f)) (let ()
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "left" (del_node (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) value))))
) (let ()
(if (> value (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "data" #f) #f)) (let ()
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "right" (del_node (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) value))))
) (let ()
(if (and (not (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) NIL)) (not (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) NIL))) (let ()
(define temp (get_left_most (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "data" temp)))
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "right" (del_node (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) temp))))
) (let ()
(if (not (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) NIL)) (let ()
(set! i (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f))
) (let ()
(set! i (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f))
))
))
))
))
(if (equal? i NIL) (let ()
(_return NIL)
) (void))
(define lh (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)))
(define rh (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))
(if (equal? (- rh lh) 2) (let ()
(if (> (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))) #f) "right" #f) #f)) (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))) #f) "left" #f) #f))) (let ()
(set! i (left_rotation i))
) (let ()
(set! i (rl_rotation i))
))
) (let ()
(if (equal? (- lh rh) 2) (let ()
(if (> (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)))) #f) "left" #f) #f)) (get_height (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)))) #f) "right" #f) #f))) (let ()
(set! i (right_rotation i))
) (let ()
(set! i (lr_rotation i))
))
) (void))
))
(update_height i)
(_return i)
))
)
(define (inorder i)
  (let/ec _return (begin
(if (equal? i NIL) (let ()
(_return "")
) (void))
(define left (inorder (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)))
(define right (inorder (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)))
(define res (format "~a" (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "data" #f) #f)))
(if (not (string=? left "")) (let ()
(set! res (string-append (string-append left " ") res))
) (void))
(if (not (string=? right "")) (let ()
(set! res (string-append (string-append res " ") right))
) (void))
(_return res)
))
)
(define (main)
  (let/ec _return (begin
(set! nodes (list))
(define root NIL)
(set! root (insert_node root 4))
(set! root (insert_node root 2))
(set! root (insert_node root 3))
(displayln (inorder root))
(displayln (format "~a" (get_height root)))
(set! root (del_node root 3))
(displayln (inorder root))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
