;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (init_int_array n)
  (let/ec _return (begin
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (let ([__l (* 4 n)] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (set! arr (append arr (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (init_bool_array n)
  (let/ec _return (begin
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (let ([__l (* 4 n)] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (set! arr (append arr (list #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (left idx)
  (let/ec _return (begin
(_return (* idx 2))
))
)
(define (right idx)
  (let/ec _return (begin
(_return (let ([__l (* idx 2)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (build segment_tree idx l r a)
  (let/ec _return (begin
(if (equal? l r) (let ()
(set! segment_tree (list-set segment_tree (int idx) (if a (if (hash? a) (hash-ref a (- l 1) #f) (list-ref a (int (- l 1)))) #f)))
) (let ()
(define mid (quotient (let ([__l l] [__r r]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
(build segment_tree (left idx) l mid a)
(build segment_tree (right idx) (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) r a)
(define lv (if segment_tree (if (hash? segment_tree) (hash-ref segment_tree (left idx) #f) (list-ref segment_tree (int (left idx)))) #f))
(define rv (if segment_tree (if (hash? segment_tree) (hash-ref segment_tree (right idx) #f) (list-ref segment_tree (int (right idx)))) #f))
(if (> lv rv) (let ()
(set! segment_tree (list-set segment_tree (int idx) lv))
) (let ()
(set! segment_tree (list-set segment_tree (int idx) rv))
))
))
))
)
(define (update segment_tree lazy flag idx l r a b val)
  (let/ec _return (begin
(if (if flag (if (hash? flag) (hash-ref flag idx #f) (list-ref flag (int idx))) #f) (let ()
(set! segment_tree (list-set segment_tree (int idx) (if lazy (if (hash? lazy) (hash-ref lazy idx #f) (list-ref lazy (int idx))) #f)))
(set! flag (list-set flag (int idx) #f))
(if (not (equal? l r)) (let ()
(set! lazy (list-set lazy (int (left idx)) (if lazy (if (hash? lazy) (hash-ref lazy idx #f) (list-ref lazy (int idx))) #f)))
(set! lazy (list-set lazy (int (right idx)) (if lazy (if (hash? lazy) (hash-ref lazy idx #f) (list-ref lazy (int idx))) #f)))
(set! flag (list-set flag (int (left idx)) #t))
(set! flag (list-set flag (int (right idx)) #t))
) (void))
) (void))
(if (or (< r a) (> l b)) (let ()
(_return void)
) (void))
(if (and (>= l a) (<= r b)) (let ()
(set! segment_tree (list-set segment_tree (int idx) val))
(if (not (equal? l r)) (let ()
(set! lazy (list-set lazy (int (left idx)) val))
(set! lazy (list-set lazy (int (right idx)) val))
(set! flag (list-set flag (int (left idx)) #t))
(set! flag (list-set flag (int (right idx)) #t))
) (void))
(_return void)
) (void))
(define mid (quotient (let ([__l l] [__r r]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
(update segment_tree lazy flag (left idx) l mid a b val)
(update segment_tree lazy flag (right idx) (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) r a b val)
(define lv (if segment_tree (if (hash? segment_tree) (hash-ref segment_tree (left idx) #f) (list-ref segment_tree (int (left idx)))) #f))
(define rv (if segment_tree (if (hash? segment_tree) (hash-ref segment_tree (right idx) #f) (list-ref segment_tree (int (right idx)))) #f))
(if (> lv rv) (let ()
(set! segment_tree (list-set segment_tree (int idx) lv))
) (let ()
(set! segment_tree (list-set segment_tree (int idx) rv))
))
))
)
(define NEG_INF (- 1000000000))
(define (query segment_tree lazy flag idx l r a b)
  (let/ec _return (begin
(if (if flag (if (hash? flag) (hash-ref flag idx #f) (list-ref flag (int idx))) #f) (let ()
(set! segment_tree (list-set segment_tree (int idx) (if lazy (if (hash? lazy) (hash-ref lazy idx #f) (list-ref lazy (int idx))) #f)))
(set! flag (list-set flag (int idx) #f))
(if (not (equal? l r)) (let ()
(set! lazy (list-set lazy (int (left idx)) (if lazy (if (hash? lazy) (hash-ref lazy idx #f) (list-ref lazy (int idx))) #f)))
(set! lazy (list-set lazy (int (right idx)) (if lazy (if (hash? lazy) (hash-ref lazy idx #f) (list-ref lazy (int idx))) #f)))
(set! flag (list-set flag (int (left idx)) #t))
(set! flag (list-set flag (int (right idx)) #t))
) (void))
) (void))
(if (or (< r a) (> l b)) (let ()
(_return NEG_INF)
) (void))
(if (and (>= l a) (<= r b)) (let ()
(_return (if segment_tree (if (hash? segment_tree) (hash-ref segment_tree idx #f) (list-ref segment_tree (int idx))) #f))
) (void))
(define mid (quotient (let ([__l l] [__r r]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
(define q1 (query segment_tree lazy flag (left idx) l mid a b))
(define q2 (query segment_tree lazy flag (right idx) (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) r a b))
(if (> q1 q2) (let ()
(_return q1)
) (let ()
(_return q2)
))
))
)
(define (segtree_to_string segment_tree lazy flag n)
  (let/ec _return (begin
(define res "[")
(define i 1)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (define v (query segment_tree lazy flag 1 1 n i i))
    (set! res (string-append res (format "~a" v)))
    (if (< i n) (let ()
(set! res (string-append res ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! res (string-append res "]"))
(_return res)
))
)
(define A (list 1 2 (- 4) 7 3 (- 5) 6 11 (- 20) 9 14 15 5 2 (- 8)))
(define n 15)
(define segment_tree (init_int_array n))
(define lazy (init_int_array n))
(define flag (init_bool_array n))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(build segment_tree 1 1 n A)
(displayln (query segment_tree lazy flag 1 1 n 4 6))
(displayln (query segment_tree lazy flag 1 1 n 7 11))
(displayln (query segment_tree lazy flag 1 1 n 7 12))
(update segment_tree lazy flag 1 1 n 1 3 111)
(displayln (query segment_tree lazy flag 1 1 n 1 15))
(update segment_tree lazy flag 1 1 n 7 8 235)
(displayln (segtree_to_string segment_tree lazy flag n))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
