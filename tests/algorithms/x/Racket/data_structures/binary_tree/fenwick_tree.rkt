;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (fenwick_from_list arr)
  (let/ec _return (begin
(define size (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define tree (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (set! tree (append tree (list (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 1)
(let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (define j (fenwick_next i))
    (if (< j size) (let ()
(set! tree (list-set tree (int j) (let ([__l (if tree (if (hash? tree) (hash-ref tree j #f) (list-ref tree (int j))) #f)] [__r (if tree (if (hash? tree) (hash-ref tree i #f) (list-ref tree (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "size" size "tree" tree))
))
)
(define (fenwick_empty size)
  (let/ec _return (begin
(define tree (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (set! tree (append tree (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "size" size "tree" tree))
))
)
(define (fenwick_get_array f)
  (let/ec _return (begin
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if f (hash-ref f "size" #f) #f)) (let/ec _cont
    (set! arr (append arr (list (if (if f (hash-ref f "tree" #f) #f) (if (hash? (if f (hash-ref f "tree" #f) #f)) (hash-ref (if f (hash-ref f "tree" #f) #f) i #f) (list-ref (if f (hash-ref f "tree" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i (- (if f (hash-ref f "size" #f) #f) 1))
(let/ec _break (let loop ()
  (if (> i 0) (let/ec _cont
    (define j (fenwick_next i))
    (if (< j (if f (hash-ref f "size" #f) #f)) (let ()
(set! arr (list-set arr (int j) (- (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))))
) (void))
    (set! i (- i 1))
    (loop)) (void))))
(_return arr)
))
)
(define (bit_and a b)
  (let/ec _return (begin
(define ua a)
(define ub b)
(define res 0)
(define bit 1)
(let/ec _break (let loop ()
  (if (or (not (equal? ua 0)) (not (equal? ub 0))) (let/ec _cont
    (if (and (equal? (modulo ua 2) 1) (equal? (modulo ub 2) 1)) (let ()
(set! res (let ([__l res] [__r bit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! ua (int (quotient ua 2)))
    (set! ub (int (quotient ub 2)))
    (set! bit (* bit 2))
    (loop)) (void))))
(_return res)
))
)
(define (low_bit x)
  (let/ec _return (begin
(if (equal? x 0) (let ()
(_return 0)
) (void))
(_return (- x (bit_and x (- x 1))))
))
)
(define (fenwick_next index)
  (let/ec _return (begin
(_return (let ([__l index] [__r (low_bit index)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (fenwick_prev index)
  (let/ec _return (begin
(_return (- index (low_bit index)))
))
)
(define (fenwick_add f index value)
  (let/ec _return (begin
(define tree (if f (hash-ref f "tree" #f) #f))
(if (equal? index 0) (let ()
(set! tree (list-set tree (int 0) (let ([__l (if tree (if (hash? tree) (hash-ref tree 0 #f) (list-ref tree (int 0))) #f)] [__r value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return (hash "size" (if f (hash-ref f "size" #f) #f) "tree" tree))
) (void))
(define i index)
(let/ec _break (let loop ()
  (if (< i (if f (hash-ref f "size" #f) #f)) (let/ec _cont
    (set! tree (list-set tree (int i) (let ([__l (if tree (if (hash? tree) (hash-ref tree i #f) (list-ref tree (int i))) #f)] [__r value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! i (fenwick_next i))
    (loop)) (void))))
(_return (hash "size" (if f (hash-ref f "size" #f) #f) "tree" tree))
))
)
(define (fenwick_update f index value)
  (let/ec _return (begin
(define current (fenwick_get f index))
(_return (fenwick_add f index (- value current)))
))
)
(define (fenwick_prefix f right)
  (let/ec _return (begin
(if (equal? right 0) (let ()
(_return 0)
) (void))
(define result (if (if f (hash-ref f "tree" #f) #f) (if (hash? (if f (hash-ref f "tree" #f) #f)) (hash-ref (if f (hash-ref f "tree" #f) #f) 0 #f) (list-ref (if f (hash-ref f "tree" #f) #f) (int 0))) #f))
(define r (- right 1))
(let/ec _break (let loop ()
  (if (> r 0) (let/ec _cont
    (set! result (let ([__l result] [__r (if (if f (hash-ref f "tree" #f) #f) (if (hash? (if f (hash-ref f "tree" #f) #f)) (hash-ref (if f (hash-ref f "tree" #f) #f) r #f) (list-ref (if f (hash-ref f "tree" #f) #f) (int r))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! r (fenwick_prev r))
    (loop)) (void))))
(_return result)
))
)
(define (fenwick_query f left right)
  (let/ec _return (begin
(_return (- (fenwick_prefix f right) (fenwick_prefix f left)))
))
)
(define (fenwick_get f index)
  (let/ec _return (begin
(_return (fenwick_query f index (let ([__l index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (fenwick_rank_query f value)
  (let/ec _return (begin
(define v (- value (if (if f (hash-ref f "tree" #f) #f) (if (hash? (if f (hash-ref f "tree" #f) #f)) (hash-ref (if f (hash-ref f "tree" #f) #f) 0 #f) (list-ref (if f (hash-ref f "tree" #f) #f) (int 0))) #f)))
(if (< v 0) (let ()
(_return (- 1))
) (void))
(define j 1)
(let/ec _break (let loop ()
  (if (< (* j 2) (if f (hash-ref f "size" #f) #f)) (let/ec _cont
    (set! j (* j 2))
    (loop)) (void))))
(define i 0)
(define jj j)
(let/ec _break (let loop ()
  (if (> jj 0) (let/ec _cont
    (if (and (< (let ([__l i] [__r jj]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (if f (hash-ref f "size" #f) #f)) (<= (if (if f (hash-ref f "tree" #f) #f) (if (hash? (if f (hash-ref f "tree" #f) #f)) (hash-ref (if f (hash-ref f "tree" #f) #f) (let ([__l i] [__r jj]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if f (hash-ref f "tree" #f) #f) (int (let ([__l i] [__r jj]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) v)) (let ()
(set! v (- v (if (if f (hash-ref f "tree" #f) #f) (if (hash? (if f (hash-ref f "tree" #f) #f)) (hash-ref (if f (hash-ref f "tree" #f) #f) (let ([__l i] [__r jj]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if f (hash-ref f "tree" #f) #f) (int (let ([__l i] [__r jj]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! i (let ([__l i] [__r jj]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! jj (quotient jj 2))
    (loop)) (void))))
(_return i)
))
)
(define f_base (fenwick_from_list (list 1 2 3 4 5)))
(define f (fenwick_from_list (list 1 2 3 4 5)))
(define f2 (fenwick_from_list (list 1 2 3 4 5)))
(define f3 (fenwick_from_list (list 1 2 0 3 0 5)))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (fenwick_get_array f_base))
(set! f (fenwick_add f 0 1))
(set! f (fenwick_add f 1 2))
(set! f (fenwick_add f 2 3))
(set! f (fenwick_add f 3 4))
(set! f (fenwick_add f 4 5))
(displayln (fenwick_get_array f))
(displayln (fenwick_prefix f2 3))
(displayln (fenwick_query f2 1 4))
(displayln (fenwick_rank_query f3 0))
(displayln (fenwick_rank_query f3 2))
(displayln (fenwick_rank_query f3 1))
(displayln (fenwick_rank_query f3 3))
(displayln (fenwick_rank_query f3 5))
(displayln (fenwick_rank_query f3 6))
(displayln (fenwick_rank_query f3 11))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
