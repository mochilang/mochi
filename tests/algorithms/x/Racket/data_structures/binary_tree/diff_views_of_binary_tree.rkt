;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define NIL (- 0 1))
(define (make_tree)
  (let/ec _return (begin
(_return (hash "values" (list 3 9 20 15 7) "lefts" (list 1 NIL 3 NIL NIL) "rights" (list 2 NIL 4 NIL NIL) "root" 0))
))
)
(define (index_of xs x)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (if (equal? (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f) x) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return NIL)
))
)
(define (sort_pairs hds vals)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? hds) (string-length hds)] [(hash? hds) (hash-count hds)] [else (length hds)])) (let/ec _cont
    (define j i)
    (let/ec _break (let loop ()
  (if (and (> j 0) (> (if hds (if (hash? hds) (hash-ref hds (- j 1) #f) (list-ref hds (int (- j 1)))) #f) (if hds (if (hash? hds) (hash-ref hds j #f) (list-ref hds (int j))) #f))) (let/ec _cont
    (define hd_tmp (if hds (if (hash? hds) (hash-ref hds (- j 1) #f) (list-ref hds (int (- j 1)))) #f))
    (set! hds (list-set hds (int (- j 1)) (if hds (if (hash? hds) (hash-ref hds j #f) (list-ref hds (int j))) #f)))
    (set! hds (list-set hds (int j) hd_tmp))
    (define val_tmp (if vals (if (hash? vals) (hash-ref vals (- j 1) #f) (list-ref vals (int (- j 1)))) #f))
    (set! vals (list-set vals (int (- j 1)) (if vals (if (hash? vals) (hash-ref vals j #f) (list-ref vals (int j))) #f)))
    (set! vals (list-set vals (int j) val_tmp))
    (set! j (- j 1))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (right_view t)
  (let/ec _return (begin
(define res (list))
(define queue (list (if t (hash-ref t "root" #f) #f)))
(let/ec _break (let loop ()
  (if (> (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)]) 0) (let/ec _cont
    (define size (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)]))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (define idx (if queue (if (hash? queue) (hash-ref queue i #f) (list-ref queue (int i))) #f))
    (if (not (equal? (if (if t (hash-ref t "lefts" #f) #f) (if (hash? (if t (hash-ref t "lefts" #f) #f)) (hash-ref (if t (hash-ref t "lefts" #f) #f) idx #f) (list-ref (if t (hash-ref t "lefts" #f) #f) (int idx))) #f) NIL)) (let ()
(set! queue (append queue (list (if (if t (hash-ref t "lefts" #f) #f) (if (hash? (if t (hash-ref t "lefts" #f) #f)) (hash-ref (if t (hash-ref t "lefts" #f) #f) idx #f) (list-ref (if t (hash-ref t "lefts" #f) #f) (int idx))) #f))))
) (void))
    (if (not (equal? (if (if t (hash-ref t "rights" #f) #f) (if (hash? (if t (hash-ref t "rights" #f) #f)) (hash-ref (if t (hash-ref t "rights" #f) #f) idx #f) (list-ref (if t (hash-ref t "rights" #f) #f) (int idx))) #f) NIL)) (let ()
(set! queue (append queue (list (if (if t (hash-ref t "rights" #f) #f) (if (hash? (if t (hash-ref t "rights" #f) #f)) (hash-ref (if t (hash-ref t "rights" #f) #f) idx #f) (list-ref (if t (hash-ref t "rights" #f) #f) (int idx))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list (if (if t (hash-ref t "values" #f) #f) (if (hash? (if t (hash-ref t "values" #f) #f)) (hash-ref (if t (hash-ref t "values" #f) #f) (if queue (if (hash? queue) (hash-ref queue (- size 1) #f) (list-ref queue (int (- size 1)))) #f) #f) (list-ref (if t (hash-ref t "values" #f) #f) (int (if queue (if (hash? queue) (hash-ref queue (- size 1) #f) (list-ref queue (int (- size 1)))) #f)))) #f))))
    (set! queue (slice queue size (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])))
    (loop)) (void))))
(_return res)
))
)
(define (left_view t)
  (let/ec _return (begin
(define res (list))
(define queue (list (if t (hash-ref t "root" #f) #f)))
(let/ec _break (let loop ()
  (if (> (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)]) 0) (let/ec _cont
    (define size (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)]))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (define idx (if queue (if (hash? queue) (hash-ref queue i #f) (list-ref queue (int i))) #f))
    (if (not (equal? (if (if t (hash-ref t "lefts" #f) #f) (if (hash? (if t (hash-ref t "lefts" #f) #f)) (hash-ref (if t (hash-ref t "lefts" #f) #f) idx #f) (list-ref (if t (hash-ref t "lefts" #f) #f) (int idx))) #f) NIL)) (let ()
(set! queue (append queue (list (if (if t (hash-ref t "lefts" #f) #f) (if (hash? (if t (hash-ref t "lefts" #f) #f)) (hash-ref (if t (hash-ref t "lefts" #f) #f) idx #f) (list-ref (if t (hash-ref t "lefts" #f) #f) (int idx))) #f))))
) (void))
    (if (not (equal? (if (if t (hash-ref t "rights" #f) #f) (if (hash? (if t (hash-ref t "rights" #f) #f)) (hash-ref (if t (hash-ref t "rights" #f) #f) idx #f) (list-ref (if t (hash-ref t "rights" #f) #f) (int idx))) #f) NIL)) (let ()
(set! queue (append queue (list (if (if t (hash-ref t "rights" #f) #f) (if (hash? (if t (hash-ref t "rights" #f) #f)) (hash-ref (if t (hash-ref t "rights" #f) #f) idx #f) (list-ref (if t (hash-ref t "rights" #f) #f) (int idx))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list (if (if t (hash-ref t "values" #f) #f) (if (hash? (if t (hash-ref t "values" #f) #f)) (hash-ref (if t (hash-ref t "values" #f) #f) (if queue (if (hash? queue) (hash-ref queue 0 #f) (list-ref queue (int 0))) #f) #f) (list-ref (if t (hash-ref t "values" #f) #f) (int (if queue (if (hash? queue) (hash-ref queue 0 #f) (list-ref queue (int 0))) #f)))) #f))))
    (set! queue (slice queue size (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])))
    (loop)) (void))))
(_return res)
))
)
(define (top_view t)
  (let/ec _return (begin
(define hds (list))
(define vals (list))
(define queue_idx (list (if t (hash-ref t "root" #f) #f)))
(define queue_hd (list 0))
(let/ec _break (let loop ()
  (if (> (cond [(string? queue_idx) (string-length queue_idx)] [(hash? queue_idx) (hash-count queue_idx)] [else (length queue_idx)]) 0) (let/ec _cont
    (define idx (if queue_idx (if (hash? queue_idx) (hash-ref queue_idx 0 #f) (list-ref queue_idx (int 0))) #f))
    (set! queue_idx (slice queue_idx 1 (cond [(string? queue_idx) (string-length queue_idx)] [(hash? queue_idx) (hash-count queue_idx)] [else (length queue_idx)])))
    (define hd (if queue_hd (if (hash? queue_hd) (hash-ref queue_hd 0 #f) (list-ref queue_hd (int 0))) #f))
    (set! queue_hd (slice queue_hd 1 (cond [(string? queue_hd) (string-length queue_hd)] [(hash? queue_hd) (hash-count queue_hd)] [else (length queue_hd)])))
    (if (equal? (index_of hds hd) NIL) (let ()
(set! hds (append hds (list hd)))
(set! vals (append vals (list (if (if t (hash-ref t "values" #f) #f) (if (hash? (if t (hash-ref t "values" #f) #f)) (hash-ref (if t (hash-ref t "values" #f) #f) idx #f) (list-ref (if t (hash-ref t "values" #f) #f) (int idx))) #f))))
) (void))
    (if (not (equal? (if (if t (hash-ref t "lefts" #f) #f) (if (hash? (if t (hash-ref t "lefts" #f) #f)) (hash-ref (if t (hash-ref t "lefts" #f) #f) idx #f) (list-ref (if t (hash-ref t "lefts" #f) #f) (int idx))) #f) NIL)) (let ()
(set! queue_idx (append queue_idx (list (if (if t (hash-ref t "lefts" #f) #f) (if (hash? (if t (hash-ref t "lefts" #f) #f)) (hash-ref (if t (hash-ref t "lefts" #f) #f) idx #f) (list-ref (if t (hash-ref t "lefts" #f) #f) (int idx))) #f))))
(set! queue_hd (append queue_hd (list (- hd 1))))
) (void))
    (if (not (equal? (if (if t (hash-ref t "rights" #f) #f) (if (hash? (if t (hash-ref t "rights" #f) #f)) (hash-ref (if t (hash-ref t "rights" #f) #f) idx #f) (list-ref (if t (hash-ref t "rights" #f) #f) (int idx))) #f) NIL)) (let ()
(set! queue_idx (append queue_idx (list (if (if t (hash-ref t "rights" #f) #f) (if (hash? (if t (hash-ref t "rights" #f) #f)) (hash-ref (if t (hash-ref t "rights" #f) #f) idx #f) (list-ref (if t (hash-ref t "rights" #f) #f) (int idx))) #f))))
(set! queue_hd (append queue_hd (list (let ([__l hd] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
    (loop)) (void))))
(sort_pairs hds vals)
(_return vals)
))
)
(define (bottom_view t)
  (let/ec _return (begin
(define hds (list))
(define vals (list))
(define queue_idx (list (if t (hash-ref t "root" #f) #f)))
(define queue_hd (list 0))
(let/ec _break (let loop ()
  (if (> (cond [(string? queue_idx) (string-length queue_idx)] [(hash? queue_idx) (hash-count queue_idx)] [else (length queue_idx)]) 0) (let/ec _cont
    (define idx (if queue_idx (if (hash? queue_idx) (hash-ref queue_idx 0 #f) (list-ref queue_idx (int 0))) #f))
    (set! queue_idx (slice queue_idx 1 (cond [(string? queue_idx) (string-length queue_idx)] [(hash? queue_idx) (hash-count queue_idx)] [else (length queue_idx)])))
    (define hd (if queue_hd (if (hash? queue_hd) (hash-ref queue_hd 0 #f) (list-ref queue_hd (int 0))) #f))
    (set! queue_hd (slice queue_hd 1 (cond [(string? queue_hd) (string-length queue_hd)] [(hash? queue_hd) (hash-count queue_hd)] [else (length queue_hd)])))
    (define pos (index_of hds hd))
    (if (equal? pos NIL) (let ()
(set! hds (append hds (list hd)))
(set! vals (append vals (list (if (if t (hash-ref t "values" #f) #f) (if (hash? (if t (hash-ref t "values" #f) #f)) (hash-ref (if t (hash-ref t "values" #f) #f) idx #f) (list-ref (if t (hash-ref t "values" #f) #f) (int idx))) #f))))
) (let ()
(set! vals (list-set vals (int pos) (if (if t (hash-ref t "values" #f) #f) (if (hash? (if t (hash-ref t "values" #f) #f)) (hash-ref (if t (hash-ref t "values" #f) #f) idx #f) (list-ref (if t (hash-ref t "values" #f) #f) (int idx))) #f)))
))
    (if (not (equal? (if (if t (hash-ref t "lefts" #f) #f) (if (hash? (if t (hash-ref t "lefts" #f) #f)) (hash-ref (if t (hash-ref t "lefts" #f) #f) idx #f) (list-ref (if t (hash-ref t "lefts" #f) #f) (int idx))) #f) NIL)) (let ()
(set! queue_idx (append queue_idx (list (if (if t (hash-ref t "lefts" #f) #f) (if (hash? (if t (hash-ref t "lefts" #f) #f)) (hash-ref (if t (hash-ref t "lefts" #f) #f) idx #f) (list-ref (if t (hash-ref t "lefts" #f) #f) (int idx))) #f))))
(set! queue_hd (append queue_hd (list (- hd 1))))
) (void))
    (if (not (equal? (if (if t (hash-ref t "rights" #f) #f) (if (hash? (if t (hash-ref t "rights" #f) #f)) (hash-ref (if t (hash-ref t "rights" #f) #f) idx #f) (list-ref (if t (hash-ref t "rights" #f) #f) (int idx))) #f) NIL)) (let ()
(set! queue_idx (append queue_idx (list (if (if t (hash-ref t "rights" #f) #f) (if (hash? (if t (hash-ref t "rights" #f) #f)) (hash-ref (if t (hash-ref t "rights" #f) #f) idx #f) (list-ref (if t (hash-ref t "rights" #f) #f) (int idx))) #f))))
(set! queue_hd (append queue_hd (list (let ([__l hd] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
    (loop)) (void))))
(sort_pairs hds vals)
(_return vals)
))
)
(define tree (make_tree))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (right_view tree))
(displayln (left_view tree))
(displayln (top_view tree))
(displayln (bottom_view tree))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
