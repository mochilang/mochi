;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (merge_two_binary_trees t1 t2)
  (let/ec _return (begin
(_return (if (equal? (if t1 (hash-ref t1 "tag" #f) #f) "Leaf") t2 (if (equal? (if t1 (hash-ref t1 "tag" #f) #f) "Node") (let ([l1 (if t1 (hash-ref t1 "left" #f) #f)] [v1 (if t1 (hash-ref t1 "value" #f) #f)] [r1 (if t1 (hash-ref t1 "right" #f) #f)]) (if (equal? (if t2 (hash-ref t2 "tag" #f) #f) "Leaf") t1 (if (equal? (if t2 (hash-ref t2 "tag" #f) #f) "Node") (let ([l2 (if t2 (hash-ref t2 "left" #f) #f)] [v2 (if t2 (hash-ref t2 "value" #f) #f)] [r2 (if t2 (hash-ref t2 "right" #f) #f)]) (hash "tag" "Node" "left" (merge_two_binary_trees l1 l2) "value" (let ([__l v1] [__r v2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "right" (merge_two_binary_trees r1 r2))) #f))) #f)))
))
)
(define (is_leaf t)
  (let/ec _return (begin
(_return (if (equal? (if t (hash-ref t "tag" #f) #f) "Leaf") #t (if #t #f #f)))
))
)
(define (get_left t)
  (let/ec _return (begin
(_return (if (equal? (if t (hash-ref t "tag" #f) #f) "Node") (let ([l (if t (hash-ref t "left" #f) #f)]) l) (if #t (hash "tag" "Leaf") #f)))
))
)
(define (get_right t)
  (let/ec _return (begin
(_return (if (equal? (if t (hash-ref t "tag" #f) #f) "Node") (let ([r (if t (hash-ref t "right" #f) #f)]) r) (if #t (hash "tag" "Leaf") #f)))
))
)
(define (get_value t)
  (let/ec _return (begin
(_return (if (equal? (if t (hash-ref t "tag" #f) #f) "Node") (let ([v (if t (hash-ref t "value" #f) #f)]) v) (if #t 0 #f)))
))
)
(define (print_preorder t)
  (let/ec _return (begin
(if (not (is_leaf t)) (let ()
(define v (get_value t))
(define l (get_left t))
(define r (get_right t))
(displayln v)
(print_preorder l)
(print_preorder r)
) (void))
))
)
(define tree1 (hash "tag" "Node" "left" (hash "tag" "Node" "left" (hash "tag" "Node" "left" (hash "tag" "Leaf") "value" 4 "right" (hash "tag" "Leaf")) "value" 2 "right" (hash "tag" "Leaf")) "value" 1 "right" (hash "tag" "Node" "left" (hash "tag" "Leaf") "value" 3 "right" (hash "tag" "Leaf"))))
(define tree2 (hash "tag" "Node" "left" (hash "tag" "Node" "left" (hash "tag" "Leaf") "value" 4 "right" (hash "tag" "Node" "left" (hash "tag" "Leaf") "value" 9 "right" (hash "tag" "Leaf"))) "value" 2 "right" (hash "tag" "Node" "left" (hash "tag" "Leaf") "value" 6 "right" (hash "tag" "Node" "left" (hash "tag" "Leaf") "value" 5 "right" (hash "tag" "Leaf")))))
(define merged_tree (merge_two_binary_trees tree1 tree2))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln "Tree1 is:")
(print_preorder tree1)
(displayln "Tree2 is:")
(print_preorder tree2)
(displayln "Merged Tree is:")
(print_preorder merged_tree)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
