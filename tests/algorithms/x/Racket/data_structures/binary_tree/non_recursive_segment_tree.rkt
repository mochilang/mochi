;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (build arr combine)
  (let/ec _return (begin
(define n (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define st (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (* 2 n)) (let/ec _cont
    (set! st (append st (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! st (list-set st (int (let ([__l n] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i (- n 1))
(let/ec _break (let loop ()
  (if (> i 0) (let/ec _cont
    (set! st (list-set st (int i) (combine (if st (if (hash? st) (hash-ref st (* i 2) #f) (list-ref st (int (* i 2)))) #f) (if st (if (hash? st) (hash-ref st (let ([__l (* i 2)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref st (int (let ([__l (* i 2)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
    (set! i (- i 1))
    (loop)) (void))))
(_return st)
))
)
(define (update st n combine p v)
  (let/ec _return (begin
(define idx (let ([__l p] [__r n]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! st (list-set st (int idx) v))
(let/ec _break (let loop ()
  (if (> idx 1) (let/ec _cont
    (set! idx (int (quotient idx 2)))
    (set! st (list-set st (int idx) (combine (if st (if (hash? st) (hash-ref st (* idx 2) #f) (list-ref st (int (* idx 2)))) #f) (if st (if (hash? st) (hash-ref st (let ([__l (* idx 2)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref st (int (let ([__l (* idx 2)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
    (loop)) (void))))
))
)
(define (query st n combine left right)
  (let/ec _return (begin
(define l (let ([__l left] [__r n]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define r (let ([__l right] [__r n]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define res 0)
(define has #f)
(let/ec _break (let loop ()
  (if (<= l r) (let/ec _cont
    (if (equal? (modulo l 2) 1) (let ()
(if (not has) (let ()
(set! res (if st (if (hash? st) (hash-ref st l #f) (list-ref st (int l))) #f))
(set! has #t)
) (let ()
(set! res (combine res (if st (if (hash? st) (hash-ref st l #f) (list-ref st (int l))) #f)))
))
(set! l (let ([__l l] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (if (equal? (modulo r 2) 0) (let ()
(if (not has) (let ()
(set! res (if st (if (hash? st) (hash-ref st r #f) (list-ref st (int r))) #f))
(set! has #t)
) (let ()
(set! res (combine res (if st (if (hash? st) (hash-ref st r #f) (list-ref st (int r))) #f)))
))
(set! r (- r 1))
) (void))
    (set! l (int (quotient l 2)))
    (set! r (int (quotient r 2)))
    (loop)) (void))))
(_return res)
))
)
(define (add a b)
  (let/ec _return (begin
(_return (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (min_int a b)
  (let/ec _return (begin
(if (< a b) (let ()
(_return a)
) (let ()
(_return b)
))
))
)
(define (max_int a b)
  (let/ec _return (begin
(if (> a b) (let ()
(_return a)
) (let ()
(_return b)
))
))
)
(define arr1 (list 1 2 3))
(define st1 (build arr1 add))
(define arr2 (list 3 1 2))
(define st2 (build arr2 min_int))
(define arr3 (list 2 3 1))
(define st3 (build arr3 max_int))
(define arr4 (list 1 5 7 (- 1) 6))
(define n4 (cond [(string? arr4) (string-length arr4)] [(hash? arr4) (hash-count arr4)] [else (length arr4)]))
(define st4 (build arr4 add))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" (query st1 (cond [(string? arr1) (string-length arr1)] [(hash? arr1) (hash-count arr1)] [else (length arr1)]) add 0 2)))
(displayln (format "~a" (query st2 (cond [(string? arr2) (string-length arr2)] [(hash? arr2) (hash-count arr2)] [else (length arr2)]) min_int 0 2)))
(displayln (format "~a" (query st3 (cond [(string? arr3) (string-length arr3)] [(hash? arr3) (hash-count arr3)] [else (length arr3)]) max_int 0 2)))
(update st4 n4 add 1 (- 1))
(update st4 n4 add 2 3)
(displayln (format "~a" (query st4 n4 add 1 2)))
(displayln (format "~a" (query st4 n4 add 1 1)))
(update st4 n4 add 4 1)
(displayln (format "~a" (query st4 n4 add 3 4)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
