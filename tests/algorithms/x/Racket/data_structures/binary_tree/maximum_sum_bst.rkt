;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (min_int a b)
  (let/ec _return (begin
(if (< a b) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (max_int a b)
  (let/ec _return (begin
(if (> a b) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (solver nodes idx)
  (let/ec _return (begin
(if (equal? idx (- 0 1)) (let ()
(_return (hash "is_bst" #t "min_val" 2147483647 "max_val" (- 2147483648) "total" 0 "best" 0))
) (void))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (list-ref nodes (int idx))) #f))
(define left_info (solver nodes (if node (hash-ref node "left" #f) #f)))
(define right_info (solver nodes (if node (hash-ref node "right" #f) #f)))
(define current_best (max_int (if left_info (hash-ref left_info "best" #f) #f) (if right_info (hash-ref right_info "best" #f) #f)))
(if (and (and (and (if left_info (hash-ref left_info "is_bst" #f) #f) (if right_info (hash-ref right_info "is_bst" #f) #f)) (< (if left_info (hash-ref left_info "max_val" #f) #f) (if node (hash-ref node "val" #f) #f))) (< (if node (hash-ref node "val" #f) #f) (if right_info (hash-ref right_info "min_val" #f) #f))) (let ()
(define sum_val (let ([__l (let ([__l (if left_info (hash-ref left_info "total" #f) #f)] [__r (if right_info (hash-ref right_info "total" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if node (hash-ref node "val" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! current_best (max_int current_best sum_val))
(_return (hash "is_bst" #t "min_val" (min_int (if left_info (hash-ref left_info "min_val" #f) #f) (if node (hash-ref node "val" #f) #f)) "max_val" (max_int (if right_info (hash-ref right_info "max_val" #f) #f) (if node (hash-ref node "val" #f) #f)) "total" sum_val "best" current_best))
) (void))
(_return (hash "is_bst" #f "min_val" 0 "max_val" 0 "total" 0 "best" current_best))
))
)
(define (max_sum_bst nodes root)
  (let/ec _return (begin
(define info (solver nodes root))
(_return (if info (hash-ref info "best" #f) #f))
))
)
(define (main)
  (let/ec _return (begin
(define t1_nodes (list (hash "val" 4 "left" 1 "right" (- 0 1)) (hash "val" 3 "left" 2 "right" 3) (hash "val" 1 "left" (- 0 1) "right" (- 0 1)) (hash "val" 2 "left" (- 0 1) "right" (- 0 1))))
(displayln (max_sum_bst t1_nodes 0))
(define t2_nodes (list (hash "val" (- 4) "left" 1 "right" 2) (hash "val" (- 2) "left" (- 0 1) "right" (- 0 1)) (hash "val" (- 5) "left" (- 0 1) "right" (- 0 1))))
(displayln (max_sum_bst t2_nodes 0))
(define t3_nodes (list (hash "val" 1 "left" 1 "right" 2) (hash "val" 4 "left" 3 "right" 4) (hash "val" 3 "left" 5 "right" 6) (hash "val" 2 "left" (- 0 1) "right" (- 0 1)) (hash "val" 4 "left" (- 0 1) "right" (- 0 1)) (hash "val" 2 "left" (- 0 1) "right" (- 0 1)) (hash "val" 5 "left" 7 "right" 8) (hash "val" 4 "left" (- 0 1) "right" (- 0 1)) (hash "val" 6 "left" (- 0 1) "right" (- 0 1))))
(displayln (max_sum_bst t3_nodes 0))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
