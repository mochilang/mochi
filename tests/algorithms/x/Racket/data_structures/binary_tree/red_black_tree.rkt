;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define LABEL 0)
(define COLOR 1)
(define PARENT 2)
(define LEFT 3)
(define RIGHT 4)
(define NEG_ONE (- 1))
(define (make_tree)
  (let/ec _return (begin
(_return (hash "nodes" (list) "root" (- 1)))
))
)
(define (rotate_left t x)
  (let/ec _return (begin
(define nodes (if t (hash-ref t "nodes" #f) #f))
(define y (if (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) RIGHT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (int RIGHT))) #f))
(define yLeft (if (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) LEFT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (int LEFT))) #f))
(set! nodes (list-set nodes x (list-set (list-ref nodes x) RIGHT yLeft)))
(if (not (equal? yLeft NEG_ONE)) (let ()
(set! nodes (list-set nodes yLeft (list-set (list-ref nodes yLeft) PARENT x)))
) (void))
(define xParent (if (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (int PARENT))) #f))
(set! nodes (list-set nodes y (list-set (list-ref nodes y) PARENT xParent)))
(if (equal? xParent NEG_ONE) (let ()
(set! t (hash-set (or t (hash)) "root" y))
) (let ()
(if (equal? x (if (if nodes (if (hash? nodes) (hash-ref nodes xParent #f) (list-ref nodes (int xParent))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes xParent #f) (list-ref nodes (int xParent))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes xParent #f) (list-ref nodes (int xParent))) #f) LEFT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes xParent #f) (list-ref nodes (int xParent))) #f) (int LEFT))) #f)) (let ()
(set! nodes (list-set nodes xParent (list-set (list-ref nodes xParent) LEFT y)))
) (let ()
(set! nodes (list-set nodes xParent (list-set (list-ref nodes xParent) RIGHT y)))
))
))
(set! nodes (list-set nodes y (list-set (list-ref nodes y) LEFT x)))
(set! nodes (list-set nodes x (list-set (list-ref nodes x) PARENT y)))
(set! t (hash-set (or t (hash)) "nodes" nodes))
(_return t)
))
)
(define (rotate_right t x)
  (let/ec _return (begin
(define nodes (if t (hash-ref t "nodes" #f) #f))
(define y (if (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) LEFT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (int LEFT))) #f))
(define yRight (if (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) RIGHT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (int RIGHT))) #f))
(set! nodes (list-set nodes x (list-set (list-ref nodes x) LEFT yRight)))
(if (not (equal? yRight NEG_ONE)) (let ()
(set! nodes (list-set nodes yRight (list-set (list-ref nodes yRight) PARENT x)))
) (void))
(define xParent (if (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (int PARENT))) #f))
(set! nodes (list-set nodes y (list-set (list-ref nodes y) PARENT xParent)))
(if (equal? xParent NEG_ONE) (let ()
(set! t (hash-set (or t (hash)) "root" y))
) (let ()
(if (equal? x (if (if nodes (if (hash? nodes) (hash-ref nodes xParent #f) (list-ref nodes (int xParent))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes xParent #f) (list-ref nodes (int xParent))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes xParent #f) (list-ref nodes (int xParent))) #f) RIGHT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes xParent #f) (list-ref nodes (int xParent))) #f) (int RIGHT))) #f)) (let ()
(set! nodes (list-set nodes xParent (list-set (list-ref nodes xParent) RIGHT y)))
) (let ()
(set! nodes (list-set nodes xParent (list-set (list-ref nodes xParent) LEFT y)))
))
))
(set! nodes (list-set nodes y (list-set (list-ref nodes y) RIGHT x)))
(set! nodes (list-set nodes x (list-set (list-ref nodes x) PARENT y)))
(set! t (hash-set (or t (hash)) "nodes" nodes))
(_return t)
))
)
(define (insert_fix t z)
  (let/ec _return (begin
(define nodes (if t (hash-ref t "nodes" #f) #f))
(let/ec _break (let loop ()
  (if (and (not (equal? z (if t (hash-ref t "root" #f) #f))) (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) COLOR #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int COLOR))) #f) 1)) (let/ec _cont
    (if (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f) LEFT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f) (int LEFT))) #f)) (let ()
(define y (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f) RIGHT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f) (int RIGHT))) #f))
(if (and (not (equal? y NEG_ONE)) (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) COLOR #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (int COLOR))) #f) 1)) (let ()
(set! nodes (list-set nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) (list-set (list-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)) COLOR 0)))
(set! nodes (list-set nodes y (list-set (list-ref nodes y) COLOR 0)))
(define gp (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f))
(set! nodes (list-set nodes gp (list-set (list-ref nodes gp) COLOR 1)))
(set! z gp)
) (let ()
(if (equal? z (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) RIGHT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int RIGHT))) #f)) (let ()
(set! z (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f))
(set! t (hash-set (or t (hash)) "nodes" nodes))
(set! t (rotate_left t z))
(set! nodes (if t (hash-ref t "nodes" #f) #f))
) (void))
(set! nodes (list-set nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) (list-set (list-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)) COLOR 0)))
(define gp (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f))
(set! nodes (list-set nodes gp (list-set (list-ref nodes gp) COLOR 1)))
(set! t (hash-set (or t (hash)) "nodes" nodes))
(set! t (rotate_right t gp))
(set! nodes (if t (hash-ref t "nodes" #f) #f))
))
) (let ()
(define y (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f) LEFT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f)))) #f) (int LEFT))) #f))
(if (and (not (equal? y NEG_ONE)) (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) COLOR #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (int COLOR))) #f) 1)) (let ()
(set! nodes (list-set nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) (list-set (list-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)) COLOR 0)))
(set! nodes (list-set nodes y (list-set (list-ref nodes y) COLOR 0)))
(define gp (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f))
(set! nodes (list-set nodes gp (list-set (list-ref nodes gp) COLOR 1)))
(set! z gp)
) (let ()
(if (equal? z (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) LEFT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int LEFT))) #f)) (let ()
(set! z (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f))
(set! t (hash-set (or t (hash)) "nodes" nodes))
(set! t (rotate_right t z))
(set! nodes (if t (hash-ref t "nodes" #f) #f))
) (void))
(set! nodes (list-set nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) (list-set (list-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)) COLOR 0)))
(define gp (if (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f) #f) (list-ref nodes (int (if (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) PARENT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes z #f) (list-ref nodes (int z))) #f) (int PARENT))) #f)))) #f) (int PARENT))) #f))
(set! nodes (list-set nodes gp (list-set (list-ref nodes gp) COLOR 1)))
(set! t (hash-set (or t (hash)) "nodes" nodes))
(set! t (rotate_left t gp))
(set! nodes (if t (hash-ref t "nodes" #f) #f))
))
))
    (loop)) (void))))
(set! nodes (if t (hash-ref t "nodes" #f) #f))
(set! nodes (list-set nodes (if t (hash-ref t "root" #f) #f) (list-set (list-ref nodes (if t (hash-ref t "root" #f) #f)) COLOR 0)))
(set! t (hash-set (or t (hash)) "nodes" nodes))
(_return t)
))
)
(define (tree_insert t v)
  (let/ec _return (begin
(define nodes (if t (hash-ref t "nodes" #f) #f))
(define node (list v 1 (- 1) (- 1) (- 1)))
(set! nodes (append nodes (list node)))
(define idx (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
(define y NEG_ONE)
(define x (if t (hash-ref t "root" #f) #f))
(let/ec _break (let loop ()
  (if (not (equal? x NEG_ONE)) (let/ec _cont
    (set! y x)
    (if (< v (if (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) LABEL #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (int LABEL))) #f)) (let ()
(set! x (if (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) LEFT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (int LEFT))) #f))
) (let ()
(set! x (if (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) RIGHT #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes x #f) (list-ref nodes (int x))) #f) (int RIGHT))) #f))
))
    (loop)) (void))))
(set! nodes (list-set nodes idx (list-set (list-ref nodes idx) PARENT y)))
(if (equal? y NEG_ONE) (let ()
(set! t (hash-set (or t (hash)) "root" idx))
) (let ()
(if (< v (if (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (if (hash? (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f)) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) LABEL #f) (list-ref (if nodes (if (hash? nodes) (hash-ref nodes y #f) (list-ref nodes (int y))) #f) (int LABEL))) #f)) (let ()
(set! nodes (list-set nodes y (list-set (list-ref nodes y) LEFT idx)))
) (let ()
(set! nodes (list-set nodes y (list-set (list-ref nodes y) RIGHT idx)))
))
))
(set! t (hash-set (or t (hash)) "nodes" nodes))
(set! t (insert_fix t idx))
(_return t)
))
)
(define (inorder t x acc)
  (let/ec _return (begin
(if (equal? x NEG_ONE) (let ()
(_return acc)
) (void))
(set! acc (inorder t (if (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f) (if (hash? (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f)) (hash-ref (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f) LEFT #f) (list-ref (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f) (int LEFT))) #f) acc))
(set! acc (append acc (list (if (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f) (if (hash? (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f)) (hash-ref (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f) LABEL #f) (list-ref (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f) (int LABEL))) #f))))
(set! acc (inorder t (if (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f) (if (hash? (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f)) (hash-ref (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f) RIGHT #f) (list-ref (if (if t (hash-ref t "nodes" #f) #f) (if (hash? (if t (hash-ref t "nodes" #f) #f)) (hash-ref (if t (hash-ref t "nodes" #f) #f) x #f) (list-ref (if t (hash-ref t "nodes" #f) #f) (int x))) #f) (int RIGHT))) #f) acc))
(_return acc)
))
)
(define (main)
  (let/ec _return (begin
(define t (make_tree))
(define values (list 10 20 30 15 25 5 1))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? values) (string-length values)] [(hash? values) (hash-count values)] [else (length values)])) (let/ec _cont
    (set! t (tree_insert t (if values (if (hash? values) (hash-ref values i #f) (list-ref values (int i))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define res (list))
(set! res (inorder t (if t (hash-ref t "root" #f) #f) res))
(displayln (format "~a" res))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
