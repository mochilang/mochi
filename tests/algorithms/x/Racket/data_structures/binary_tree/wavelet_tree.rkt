;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define nodes (list))
(define (make_list length_ value)
  (let/ec _return (begin
(define lst (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i length_) (let/ec _cont
    (set! lst (append lst (list value)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return lst)
))
)
(define (min_list arr)
  (let/ec _return (begin
(define m (if arr (if (hash? arr) (hash-ref arr 0 #f) (list-ref arr (int 0))) #f))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (if (< (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) m) (let ()
(set! m (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return m)
))
)
(define (max_list arr)
  (let/ec _return (begin
(define m (if arr (if (hash? arr) (hash-ref arr 0 #f) (list-ref arr (int 0))) #f))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (if (> (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) m) (let ()
(set! m (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return m)
))
)
(define (build_tree arr)
  (let/ec _return (begin
(define n (hash "minn" (min_list arr) "maxx" (max_list arr) "map_left" (make_list (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 0) "left" (- 1) "right" (- 1)))
(if (equal? (if n (hash-ref n "minn" #f) #f) (if n (hash-ref n "maxx" #f) #f)) (let ()
(set! nodes (append nodes (list n)))
(_return (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
) (void))
(define pivot (quotient (let ([__l (if n (hash-ref n "minn" #f) #f)] [__r (if n (hash-ref n "maxx" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
(define left_arr (list))
(define right_arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (define num (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))
    (if (<= num pivot) (let ()
(set! left_arr (append left_arr (list num)))
) (let ()
(set! right_arr (append right_arr (list num)))
))
    (define ml (if n (hash-ref n "map_left" #f) #f))
    (set! ml (list-set ml (int i) (cond [(string? left_arr) (string-length left_arr)] [(hash? left_arr) (hash-count left_arr)] [else (length left_arr)])))
    (set! n (hash-set (or n (hash)) "map_left" ml))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(string? left_arr) (string-length left_arr)] [(hash? left_arr) (hash-count left_arr)] [else (length left_arr)]) 0) (let ()
(set! n (hash-set (or n (hash)) "left" (build_tree left_arr)))
) (void))
(if (> (cond [(string? right_arr) (string-length right_arr)] [(hash? right_arr) (hash-count right_arr)] [else (length right_arr)]) 0) (let ()
(set! n (hash-set (or n (hash)) "right" (build_tree right_arr)))
) (void))
(set! nodes (append nodes (list n)))
(_return (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
))
)
(define (rank_till_index node_idx num index)
  (let/ec _return (begin
(if (or (< index 0) (< node_idx 0)) (let ()
(_return 0)
) (void))
(define node (if nodes (if (hash? nodes) (hash-ref nodes node_idx #f) (list-ref nodes (int node_idx))) #f))
(if (equal? (if node (hash-ref node "minn" #f) #f) (if node (hash-ref node "maxx" #f) #f)) (let ()
(if (equal? (if node (hash-ref node "minn" #f) #f) num) (let ()
(_return (let ([__l index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(_return 0)
))
) (void))
(define pivot (quotient (let ([__l (if node (hash-ref node "minn" #f) #f)] [__r (if node (hash-ref node "maxx" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2))
(if (<= num pivot) (let ()
(_return (rank_till_index (if node (hash-ref node "left" #f) #f) num (- (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) index #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int index))) #f) 1)))
) (let ()
(_return (rank_till_index (if node (hash-ref node "right" #f) #f) num (- index (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) index #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int index))) #f))))
))
))
)
(define (rank node_idx num start end)
  (let/ec _return (begin
(if (> start end) (let ()
(_return 0)
) (void))
(define rank_till_end (rank_till_index node_idx num end))
(define rank_before_start (rank_till_index node_idx num (- start 1)))
(_return (- rank_till_end rank_before_start))
))
)
(define (quantile node_idx index start end)
  (let/ec _return (begin
(if (or (or (> index (- end start)) (> start end)) (< node_idx 0)) (let ()
(_return (- 1))
) (void))
(define node (if nodes (if (hash? nodes) (hash-ref nodes node_idx #f) (list-ref nodes (int node_idx))) #f))
(if (equal? (if node (hash-ref node "minn" #f) #f) (if node (hash-ref node "maxx" #f) #f)) (let ()
(_return (if node (hash-ref node "minn" #f) #f))
) (void))
(define left_start (if (equal? start 0) 0 (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) (- start 1) #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int (- start 1)))) #f)))
(define num_left (- (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) end #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int end))) #f) left_start))
(if (> num_left index) (let ()
(_return (quantile (if node (hash-ref node "left" #f) #f) index left_start (- (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) end #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int end))) #f) 1)))
) (let ()
(_return (quantile (if node (hash-ref node "right" #f) #f) (- index num_left) (- start left_start) (- end (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) end #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int end))) #f))))
))
))
)
(define (range_counting node_idx start end start_num end_num)
  (let/ec _return (begin
(if (or (or (> start end) (< node_idx 0)) (> start_num end_num)) (let ()
(_return 0)
) (void))
(define node (if nodes (if (hash? nodes) (hash-ref nodes node_idx #f) (list-ref nodes (int node_idx))) #f))
(if (or (> (if node (hash-ref node "minn" #f) #f) end_num) (< (if node (hash-ref node "maxx" #f) #f) start_num)) (let ()
(_return 0)
) (void))
(if (and (<= start_num (if node (hash-ref node "minn" #f) #f)) (<= (if node (hash-ref node "maxx" #f) #f) end_num)) (let ()
(_return (let ([__l (- end start)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(define left (range_counting (if node (hash-ref node "left" #f) #f) (if (equal? start 0) 0 (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) (- start 1) #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int (- start 1)))) #f)) (- (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) end #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int end))) #f) 1) start_num end_num))
(define right (range_counting (if node (hash-ref node "right" #f) #f) (- start (if (equal? start 0) 0 (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) (- start 1) #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int (- start 1)))) #f))) (- end (if (if node (hash-ref node "map_left" #f) #f) (if (hash? (if node (hash-ref node "map_left" #f) #f)) (hash-ref (if node (hash-ref node "map_left" #f) #f) end #f) (list-ref (if node (hash-ref node "map_left" #f) #f) (int end))) #f)) start_num end_num))
(_return (let ([__l left] [__r right]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define test_array (list 2 1 4 5 6 0 8 9 1 2 0 6 4 2 0 6 5 3 2 7))
(define root (build_tree test_array))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-append "rank_till_index 6 at 6 -> " (format "~a" (rank_till_index root 6 6))))
(displayln (string-append "rank 6 in [3,13] -> " (format "~a" (rank root 6 3 13))))
(displayln (string-append "quantile index 2 in [2,5] -> " (format "~a" (quantile root 2 2 5))))
(displayln (string-append "range_counting [3,7] in [1,10] -> " (format "~a" (range_counting root 1 10 3 7))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
