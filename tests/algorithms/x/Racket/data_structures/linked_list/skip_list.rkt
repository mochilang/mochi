;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define NIL (- 0 1))
(define MAX_LEVEL 6)
(define P 0.5)
(define seed 1)
(define (random)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 13)] [__r 7]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 100))
(_return (/ (exact->inexact seed) 100.0))
))
)
(define (random_level)
  (let/ec _return (begin
(define lvl 1)
(let/ec _break (let loop ()
  (if (and (< (random) P) (< lvl MAX_LEVEL)) (let/ec _cont
    (set! lvl (let ([__l lvl] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return lvl)
))
)
(define (empty_forward)
  (let/ec _return (begin
(define f (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i MAX_LEVEL) (let/ec _cont
    (set! f (append f (list NIL)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return f)
))
)
(define node_keys (list))
(define node_vals (list))
(define node_forwards (list))
(define level 1)
(define (init)
  (let/ec _return (begin
(set! node_keys (list (- 1)))
(set! node_vals (list 0))
(set! node_forwards (list (empty_forward)))
(set! level 1)
))
)
(define (insert key value)
  (let/ec _return (begin
(define update (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i MAX_LEVEL) (let/ec _cont
    (set! update (append update (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define x 0)
(set! i (- level 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (let/ec _break (let loop ()
  (if (and (not (equal? (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f) NIL)) (< (if node_keys (if (hash? node_keys) (hash-ref node_keys (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f) #f) (list-ref node_keys (int (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f)))) #f) key)) (let/ec _cont
    (set! x (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f))
    (loop)) (void))))
    (set! update (list-set update (int i) x))
    (set! i (- i 1))
    (loop)) (void))))
(set! x (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) 0 #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int 0))) #f))
(if (and (not (equal? x NIL)) (equal? (if node_keys (if (hash? node_keys) (hash-ref node_keys x #f) (list-ref node_keys (int x))) #f) key)) (let ()
(set! node_vals (list-set node_vals (int x) value))
(_return void)
) (void))
(define lvl (random_level))
(if (> lvl level) (let ()
(define j level)
(let/ec _break (let loop ()
  (if (< j lvl) (let/ec _cont
    (set! update (list-set update (int j) 0))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! level lvl)
) (void))
(set! node_keys (append node_keys (list key)))
(set! node_vals (append node_vals (list value)))
(define forwards (empty_forward))
(define idx (- (cond [(string? node_keys) (string-length node_keys)] [(hash? node_keys) (hash-count node_keys)] [else (length node_keys)]) 1))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i lvl) (let/ec _cont
    (set! forwards (list-set forwards (int i) (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) #f) (list-ref node_forwards (int (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) #f) (list-ref node_forwards (int (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) #f) (list-ref node_forwards (int (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) #f) (list-ref node_forwards (int (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)))) #f) (int i))) #f)))
    (set! node_forwards (list-set node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) (list-set (list-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)) i idx)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! node_forwards (append node_forwards (list forwards)))
))
)
(define (find key)
  (let/ec _return (begin
(define x 0)
(define i (- level 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (let/ec _break (let loop ()
  (if (and (not (equal? (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f) NIL)) (< (if node_keys (if (hash? node_keys) (hash-ref node_keys (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f) #f) (list-ref node_keys (int (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f)))) #f) key)) (let/ec _cont
    (set! x (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f))
    (loop)) (void))))
    (set! i (- i 1))
    (loop)) (void))))
(set! x (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) 0 #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int 0))) #f))
(if (and (not (equal? x NIL)) (equal? (if node_keys (if (hash? node_keys) (hash-ref node_keys x #f) (list-ref node_keys (int x))) #f) key)) (let ()
(_return (if node_vals (if (hash? node_vals) (hash-ref node_vals x #f) (list-ref node_vals (int x))) #f))
) (void))
(_return (- 1))
))
)
(define (delete key)
  (let/ec _return (begin
(define update (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i MAX_LEVEL) (let/ec _cont
    (set! update (append update (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define x 0)
(set! i (- level 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (let/ec _break (let loop ()
  (if (and (not (equal? (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f) NIL)) (< (if node_keys (if (hash? node_keys) (hash-ref node_keys (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f) #f) (list-ref node_keys (int (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f)))) #f) key)) (let/ec _cont
    (set! x (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f))
    (loop)) (void))))
    (set! update (list-set update (int i) x))
    (set! i (- i 1))
    (loop)) (void))))
(set! x (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) 0 #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int 0))) #f))
(if (or (equal? x NIL) (not (equal? (if node_keys (if (hash? node_keys) (hash-ref node_keys x #f) (list-ref node_keys (int x))) #f) key))) (let ()
(_return void)
) (void))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i level) (let/ec _cont
    (if (equal? (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) #f) (list-ref node_forwards (int (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) #f) (list-ref node_forwards (int (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) #f) (list-ref node_forwards (int (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) #f) (list-ref node_forwards (int (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)))) #f) (int i))) #f) x) (let ()
(set! node_forwards (list-set node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f) (list-set (list-ref node_forwards (if update (if (hash? update) (hash-ref update i #f) (list-ref update (int i))) #f)) i (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) i #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int i))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (and (> level 1) (equal? (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards 0 #f) (list-ref node_forwards (int 0))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards 0 #f) (list-ref node_forwards (int 0))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards 0 #f) (list-ref node_forwards (int 0))) #f) (- level 1) #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards 0 #f) (list-ref node_forwards (int 0))) #f) (int (- level 1)))) #f) NIL)) (let/ec _cont
    (set! level (- level 1))
    (loop)) (void))))
))
)
(define (to_string)
  (let/ec _return (begin
(define s "")
(define x (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards 0 #f) (list-ref node_forwards (int 0))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards 0 #f) (list-ref node_forwards (int 0))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards 0 #f) (list-ref node_forwards (int 0))) #f) 0 #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards 0 #f) (list-ref node_forwards (int 0))) #f) (int 0))) #f))
(let/ec _break (let loop ()
  (if (not (equal? x NIL)) (let/ec _cont
    (if (not (string=? s "")) (let ()
(set! s (string-append s " -> "))
) (void))
    (set! s (string-append (string-append (string-append s (format "~a" (if node_keys (if (hash? node_keys) (hash-ref node_keys x #f) (list-ref node_keys (int x))) #f))) ":") (format "~a" (if node_vals (if (hash? node_vals) (hash-ref node_vals x #f) (list-ref node_vals (int x))) #f))))
    (set! x (if (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (if (hash? (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f)) (hash-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) 0 #f) (list-ref (if node_forwards (if (hash? node_forwards) (hash-ref node_forwards x #f) (list-ref node_forwards (int x))) #f) (int 0))) #f))
    (loop)) (void))))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(init)
(insert 2 2)
(insert 4 4)
(insert 6 4)
(insert 4 5)
(insert 8 4)
(insert 9 4)
(delete 4)
(displayln (to_string))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
