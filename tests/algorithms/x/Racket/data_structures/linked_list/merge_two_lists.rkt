;; Generated by Mochi 0.10.72 on 2025-08-24 23:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port racket/vector net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/data_structures/linked_list")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (cond
       [(and (inexact? x) (integer? x)) (format "~a.0" (inexact->exact x))]
       [else (number->string x)])]
    [(vector? x) (format "~a" (map (lambda (v) (cond [(hash? v) (read (open-input-string (to-string v)))] [(vector? v) (vector->list v)] [else v])) (vector->list x)))]
    [(hash? x)
     (format "~a"
             (for/hash ([k (in-hash-keys x)])
               (values k (let ([v (hash-ref x k)]) (if (vector? v) (vector->list v) v)))))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (cond
    [(string? lst) (substring lst start end)]
    [(vector? lst) (vector->list (vector-copy lst start end))]
    [else (take (drop lst start) (- end start))]))

(define (slice seq start end)
  (define len (cond [(string? seq) (string-length seq)] [(vector? seq) (vector-length seq)] [else (length seq)]))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (cond
    [(string? seq) (substring seq s e)]
    [(vector? seq) (vector-copy seq s e)]
    [else (sublist seq s e)]))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (appendv a b)
  (cond
    [(vector? a) (vector-append a (cond [(vector? b) b] [(list? b) (list->vector b)] [else (vector b)]))]
    [(list? a) (append a (cond [(list? b) b] [(vector? b) (vector->list b)] [else (list b)]))]
    [else (append a b)]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(vector? lst) (if (and (>= i 0) (< i (vector-length lst))) (vector-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (cond
    [(vector? lst) (when (< i (vector-length lst)) (vector-set! lst i val)) lst]
    [else
     (define len (length lst))
     (cond
       [(>= i len) (append lst (make-list (- i len) '()) (list val))]
       [(zero? i) (cons val (cdr lst))]
       [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))])]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (sort_list nums)
  (let/ec _return (begin
(define arr (vector))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not nums) 0] [(string? nums) (string-length nums)] [(vector? nums) (vector-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! arr (appendv (or arr (vector)) (vector (if nums (if (hash? nums) (hash-ref nums i #f) (safe-index nums (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(vector? arr) (vector-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define k (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(vector? arr) (vector-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if arr (if (hash? arr) (hash-ref arr k #f) (safe-index arr (int k))) #f)] [__r (if arr (if (hash? arr) (hash-ref arr j #f) (safe-index arr (int j))) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(define tmp (if arr (if (hash? arr) (hash-ref arr j #f) (safe-index arr (int j))) #f))
(vector-set! arr (int j) (if arr (if (hash? arr) (hash-ref arr k #f) (safe-index arr (int k))) #f))
(vector-set! arr (int k) tmp)
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return arr)
))
)
(define (make_sorted_linked_list ints)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "values" (sort_list ints)) h))
))
)
(define (len_sll sll)
  (let/ec _return (begin
(_return (cond [(not (if sll (hash-ref sll "values" #f) #f)) 0] [(string? (if sll (hash-ref sll "values" #f) #f)) (string-length (if sll (hash-ref sll "values" #f) #f))] [(vector? (if sll (hash-ref sll "values" #f) #f)) (vector-length (if sll (hash-ref sll "values" #f) #f))] [(hash? (if sll (hash-ref sll "values" #f) #f)) (hash-count (if sll (hash-ref sll "values" #f) #f))] [else (length (if sll (hash-ref sll "values" #f) #f))]))
))
)
(define (str_sll sll)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if sll (hash-ref sll "values" #f) #f)) 0] [(string? (if sll (hash-ref sll "values" #f) #f)) (string-length (if sll (hash-ref sll "values" #f) #f))] [(vector? (if sll (hash-ref sll "values" #f) #f)) (vector-length (if sll (hash-ref sll "values" #f) #f))] [(hash? (if sll (hash-ref sll "values" #f) #f)) (hash-count (if sll (hash-ref sll "values" #f) #f))] [else (length (if sll (hash-ref sll "values" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (string-append res (to-string (if (if sll (hash-ref sll "values" #f) #f) (if (hash? (if sll (hash-ref sll "values" #f) #f)) (hash-ref (if sll (hash-ref sll "values" #f) #f) i #f) (safe-index (if sll (hash-ref sll "values" #f) #f) (int i))) #f))))
      (if (let ([__l (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (cond [(not (if sll (hash-ref sll "values" #f) #f)) 0] [(string? (if sll (hash-ref sll "values" #f) #f)) (string-length (if sll (hash-ref sll "values" #f) #f))] [(vector? (if sll (hash-ref sll "values" #f) #f)) (vector-length (if sll (hash-ref sll "values" #f) #f))] [(hash? (if sll (hash-ref sll "values" #f) #f)) (hash-count (if sll (hash-ref sll "values" #f) #f))] [else (length (if sll (hash-ref sll "values" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! res (string-append res " -> "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (merge_lists a b)
  (let/ec _return (begin
(define combined (vector))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if a (hash-ref a "values" #f) #f)) 0] [(string? (if a (hash-ref a "values" #f) #f)) (string-length (if a (hash-ref a "values" #f) #f))] [(vector? (if a (hash-ref a "values" #f) #f)) (vector-length (if a (hash-ref a "values" #f) #f))] [(hash? (if a (hash-ref a "values" #f) #f)) (hash-count (if a (hash-ref a "values" #f) #f))] [else (length (if a (hash-ref a "values" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! combined (appendv (or combined (vector)) (vector (if (if a (hash-ref a "values" #f) #f) (if (hash? (if a (hash-ref a "values" #f) #f)) (hash-ref (if a (hash-ref a "values" #f) #f) i #f) (safe-index (if a (hash-ref a "values" #f) #f) (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if b (hash-ref b "values" #f) #f)) 0] [(string? (if b (hash-ref b "values" #f) #f)) (string-length (if b (hash-ref b "values" #f) #f))] [(vector? (if b (hash-ref b "values" #f) #f)) (vector-length (if b (hash-ref b "values" #f) #f))] [(hash? (if b (hash-ref b "values" #f) #f)) (hash-count (if b (hash-ref b "values" #f) #f))] [else (length (if b (hash-ref b "values" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! combined (appendv (or combined (vector)) (vector (if (if b (hash-ref b "values" #f) #f) (if (hash? (if b (hash-ref b "values" #f) #f)) (hash-ref (if b (hash-ref b "values" #f) #f) i #f) (safe-index (if b (hash-ref b "values" #f) #f) (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (make_sorted_linked_list combined))
))
)
(define (main)
  (let/ec _return (begin
(define test_data_odd (vector 3 9 (- 11) 0 7 5 1 (- 1)))
(define test_data_even (vector 4 6 2 0 8 10 3 (- 2)))
(define sll_one (make_sorted_linked_list test_data_odd))
(define sll_two (make_sorted_linked_list test_data_even))
(define merged (merge_lists sll_one sll_two))
(displayln (to-string (to-string (len_sll merged))))
(displayln (to-string (str_sll merged)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
