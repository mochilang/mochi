;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (empty_list)
  (let/ec _return (begin
(_return (hash "nodes" (list) "head_idx" (- 1) "tail_idx" (- 1)))
))
)
(define (get_head_data ll)
  (let/ec _return (begin
(if (equal? (if ll (hash-ref ll "head_idx" #f) #f) (- 1)) (let ()
(_return (- 1))
) (void))
(define node (if (if ll (hash-ref ll "nodes" #f) #f) (if (hash? (if ll (hash-ref ll "nodes" #f) #f)) (hash-ref (if ll (hash-ref ll "nodes" #f) #f) (if ll (hash-ref ll "head_idx" #f) #f) #f) (list-ref (if ll (hash-ref ll "nodes" #f) #f) (int (if ll (hash-ref ll "head_idx" #f) #f)))) #f))
(_return (if node (hash-ref node "data" #f) #f))
))
)
(define (get_tail_data ll)
  (let/ec _return (begin
(if (equal? (if ll (hash-ref ll "tail_idx" #f) #f) (- 1)) (let ()
(_return (- 1))
) (void))
(define node (if (if ll (hash-ref ll "nodes" #f) #f) (if (hash? (if ll (hash-ref ll "nodes" #f) #f)) (hash-ref (if ll (hash-ref ll "nodes" #f) #f) (if ll (hash-ref ll "tail_idx" #f) #f) #f) (list-ref (if ll (hash-ref ll "nodes" #f) #f) (int (if ll (hash-ref ll "tail_idx" #f) #f)))) #f))
(_return (if node (hash-ref node "data" #f) #f))
))
)
(define (insert_before_node ll idx new_idx)
  (let/ec _return (begin
(define nodes (if ll (hash-ref ll "nodes" #f) #f))
(define new_node (if nodes (if (hash? nodes) (hash-ref nodes new_idx #f) (list-ref nodes (int new_idx))) #f))
(set! new_node (hash-set (or new_node (hash)) "next_index" idx))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (list-ref nodes (int idx))) #f))
(define p (if node (hash-ref node "prev_index" #f) #f))
(set! new_node (hash-set (or new_node (hash)) "prev_index" p))
(set! nodes (list-set nodes (int new_idx) new_node))
(if (equal? p (- 1)) (let ()
(set! ll (hash-set (or ll (hash)) "head_idx" new_idx))
) (let ()
(define prev_node (if nodes (if (hash? nodes) (hash-ref nodes p #f) (list-ref nodes (int p))) #f))
(set! prev_node (hash-set (or prev_node (hash)) "next_index" new_idx))
(set! nodes (list-set nodes (int p) prev_node))
))
(set! node (hash-set (or node (hash)) "prev_index" new_idx))
(set! nodes (list-set nodes (int idx) node))
(set! ll (hash-set (or ll (hash)) "nodes" nodes))
))
)
(define (insert_after_node ll idx new_idx)
  (let/ec _return (begin
(define nodes (if ll (hash-ref ll "nodes" #f) #f))
(define new_node (if nodes (if (hash? nodes) (hash-ref nodes new_idx #f) (list-ref nodes (int new_idx))) #f))
(set! new_node (hash-set (or new_node (hash)) "prev_index" idx))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (list-ref nodes (int idx))) #f))
(define nxt (if node (hash-ref node "next_index" #f) #f))
(set! new_node (hash-set (or new_node (hash)) "next_index" nxt))
(set! nodes (list-set nodes (int new_idx) new_node))
(if (equal? nxt (- 1)) (let ()
(set! ll (hash-set (or ll (hash)) "tail_idx" new_idx))
) (let ()
(define next_node (if nodes (if (hash? nodes) (hash-ref nodes nxt #f) (list-ref nodes (int nxt))) #f))
(set! next_node (hash-set (or next_node (hash)) "prev_index" new_idx))
(set! nodes (list-set nodes (int nxt) next_node))
))
(set! node (hash-set (or node (hash)) "next_index" new_idx))
(set! nodes (list-set nodes (int idx) node))
(set! ll (hash-set (or ll (hash)) "nodes" nodes))
))
)
(define (set_head ll idx)
  (let/ec _return (begin
(if (equal? (if ll (hash-ref ll "head_idx" #f) #f) (- 1)) (let ()
(set! ll (hash-set (or ll (hash)) "head_idx" idx))
(set! ll (hash-set (or ll (hash)) "tail_idx" idx))
) (let ()
(insert_before_node ll (if ll (hash-ref ll "head_idx" #f) #f) idx)
))
))
)
(define (set_tail ll idx)
  (let/ec _return (begin
(if (equal? (if ll (hash-ref ll "tail_idx" #f) #f) (- 1)) (let ()
(set! ll (hash-set (or ll (hash)) "head_idx" idx))
(set! ll (hash-set (or ll (hash)) "tail_idx" idx))
) (let ()
(insert_after_node ll (if ll (hash-ref ll "tail_idx" #f) #f) idx)
))
))
)
(define (insert ll value)
  (let/ec _return (begin
(define nodes (if ll (hash-ref ll "nodes" #f) #f))
(set! nodes (append nodes (list (hash "data" value "prev_index" (- 1) "next_index" (- 1)))))
(define idx (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
(set! ll (hash-set (or ll (hash)) "nodes" nodes))
(if (equal? (if ll (hash-ref ll "head_idx" #f) #f) (- 1)) (let ()
(set! ll (hash-set (or ll (hash)) "head_idx" idx))
(set! ll (hash-set (or ll (hash)) "tail_idx" idx))
) (let ()
(insert_after_node ll (if ll (hash-ref ll "tail_idx" #f) #f) idx)
))
))
)
(define (insert_at_position ll position value)
  (let/ec _return (begin
(define current (if ll (hash-ref ll "head_idx" #f) #f))
(define current_pos 1)
(let/ec _break (let loop ()
  (if (not (equal? current (- 1))) (let/ec _cont
    (if (equal? current_pos position) (let ()
(define nodes (if ll (hash-ref ll "nodes" #f) #f))
(set! nodes (append nodes (list (hash "data" value "prev_index" (- 1) "next_index" (- 1)))))
(define new_idx (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
(set! ll (hash-set (or ll (hash)) "nodes" nodes))
(insert_before_node ll current new_idx)
(_return void)
) (void))
    (define node (if (if ll (hash-ref ll "nodes" #f) #f) (if (hash? (if ll (hash-ref ll "nodes" #f) #f)) (hash-ref (if ll (hash-ref ll "nodes" #f) #f) current #f) (list-ref (if ll (hash-ref ll "nodes" #f) #f) (int current))) #f))
    (set! current (if node (hash-ref node "next_index" #f) #f))
    (set! current_pos (let ([__l current_pos] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(insert ll value)
))
)
(define (get_node ll item)
  (let/ec _return (begin
(define current (if ll (hash-ref ll "head_idx" #f) #f))
(let/ec _break (let loop ()
  (if (not (equal? current (- 1))) (let/ec _cont
    (define node (if (if ll (hash-ref ll "nodes" #f) #f) (if (hash? (if ll (hash-ref ll "nodes" #f) #f)) (hash-ref (if ll (hash-ref ll "nodes" #f) #f) current #f) (list-ref (if ll (hash-ref ll "nodes" #f) #f) (int current))) #f))
    (if (equal? (if node (hash-ref node "data" #f) #f) item) (let ()
(_return current)
) (void))
    (set! current (if node (hash-ref node "next_index" #f) #f))
    (loop)) (void))))
(_return (- 1))
))
)
(define (remove_node_pointers ll idx)
  (let/ec _return (begin
(define nodes (if ll (hash-ref ll "nodes" #f) #f))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (list-ref nodes (int idx))) #f))
(define nxt (if node (hash-ref node "next_index" #f) #f))
(define p (if node (hash-ref node "prev_index" #f) #f))
(if (not (equal? nxt (- 1))) (let ()
(define nxt_node (if nodes (if (hash? nodes) (hash-ref nodes nxt #f) (list-ref nodes (int nxt))) #f))
(set! nxt_node (hash-set (or nxt_node (hash)) "prev_index" p))
(set! nodes (list-set nodes (int nxt) nxt_node))
) (void))
(if (not (equal? p (- 1))) (let ()
(define prev_node (if nodes (if (hash? nodes) (hash-ref nodes p #f) (list-ref nodes (int p))) #f))
(set! prev_node (hash-set (or prev_node (hash)) "next_index" nxt))
(set! nodes (list-set nodes (int p) prev_node))
) (void))
(set! node (hash-set (or node (hash)) "next_index" (- 1)))
(set! node (hash-set (or node (hash)) "prev_index" (- 1)))
(set! nodes (list-set nodes (int idx) node))
(set! ll (hash-set (or ll (hash)) "nodes" nodes))
))
)
(define (delete_value ll value)
  (let/ec _return (begin
(define idx (get_node ll value))
(if (equal? idx (- 1)) (let ()
(_return void)
) (void))
(if (equal? idx (if ll (hash-ref ll "head_idx" #f) #f)) (let ()
(define node (if (if ll (hash-ref ll "nodes" #f) #f) (if (hash? (if ll (hash-ref ll "nodes" #f) #f)) (hash-ref (if ll (hash-ref ll "nodes" #f) #f) idx #f) (list-ref (if ll (hash-ref ll "nodes" #f) #f) (int idx))) #f))
(set! ll (hash-set (or ll (hash)) "head_idx" (if node (hash-ref node "next_index" #f) #f)))
) (void))
(if (equal? idx (if ll (hash-ref ll "tail_idx" #f) #f)) (let ()
(define node (if (if ll (hash-ref ll "nodes" #f) #f) (if (hash? (if ll (hash-ref ll "nodes" #f) #f)) (hash-ref (if ll (hash-ref ll "nodes" #f) #f) idx #f) (list-ref (if ll (hash-ref ll "nodes" #f) #f) (int idx))) #f))
(set! ll (hash-set (or ll (hash)) "tail_idx" (if node (hash-ref node "prev_index" #f) #f)))
) (void))
(remove_node_pointers ll idx)
))
)
(define (contains ll value)
  (let/ec _return (begin
(_return (not (equal? (get_node ll value) (- 1))))
))
)
(define (is_empty ll)
  (let/ec _return (begin
(_return (equal? (if ll (hash-ref ll "head_idx" #f) #f) (- 1)))
))
)
(define (to_string ll)
  (let/ec _return (begin
(define res "")
(define first #t)
(define current (if ll (hash-ref ll "head_idx" #f) #f))
(let/ec _break (let loop ()
  (if (not (equal? current (- 1))) (let/ec _cont
    (define node (if (if ll (hash-ref ll "nodes" #f) #f) (if (hash? (if ll (hash-ref ll "nodes" #f) #f)) (hash-ref (if ll (hash-ref ll "nodes" #f) #f) current #f) (list-ref (if ll (hash-ref ll "nodes" #f) #f) (int current))) #f))
    (define val (format "~a" (if node (hash-ref node "data" #f) #f)))
    (if first (let ()
(set! res val)
(set! first #f)
) (let ()
(set! res (string-append (string-append res " ") val))
))
    (set! current (if node (hash-ref node "next_index" #f) #f))
    (loop)) (void))))
(_return res)
))
)
(define (print_list ll)
  (let/ec _return (begin
(define current (if ll (hash-ref ll "head_idx" #f) #f))
(let/ec _break (let loop ()
  (if (not (equal? current (- 1))) (let/ec _cont
    (define node (if (if ll (hash-ref ll "nodes" #f) #f) (if (hash? (if ll (hash-ref ll "nodes" #f) #f)) (hash-ref (if ll (hash-ref ll "nodes" #f) #f) current #f) (list-ref (if ll (hash-ref ll "nodes" #f) #f) (int current))) #f))
    (displayln (format "~a" (if node (hash-ref node "data" #f) #f)))
    (set! current (if node (hash-ref node "next_index" #f) #f))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define ll (empty_list))
(displayln (format "~a" (get_head_data ll)))
(displayln (format "~a" (get_tail_data ll)))
(displayln (format "~a" (is_empty ll)))
(insert ll 10)
(displayln (format "~a" (get_head_data ll)))
(displayln (format "~a" (get_tail_data ll)))
(insert_at_position ll 3 20)
(displayln (format "~a" (get_head_data ll)))
(displayln (format "~a" (get_tail_data ll)))
(define nodes (if ll (hash-ref ll "nodes" #f) #f))
(set! nodes (append nodes (list (hash "data" 1000 "prev_index" (- 1) "next_index" (- 1)))))
(define idx_head (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
(set! ll (hash-set (or ll (hash)) "nodes" nodes))
(set_head ll idx_head)
(set! nodes (if ll (hash-ref ll "nodes" #f) #f))
(set! nodes (append nodes (list (hash "data" 2000 "prev_index" (- 1) "next_index" (- 1)))))
(define idx_tail (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
(set! ll (hash-set (or ll (hash)) "nodes" nodes))
(set_tail ll idx_tail)
(print_list ll)
(displayln (format "~a" (is_empty ll)))
(print_list ll)
(displayln (format "~a" (contains ll 10)))
(delete_value ll 10)
(displayln (format "~a" (contains ll 10)))
(delete_value ll 2000)
(displayln (format "~a" (get_tail_data ll)))
(delete_value ll 1000)
(displayln (format "~a" (get_tail_data ll)))
(displayln (format "~a" (get_head_data ll)))
(print_list ll)
(delete_value ll 20)
(print_list ll)
(define i 1)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (insert ll i)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(print_list ll)
(define ll2 (empty_list))
(insert_at_position ll2 1 10)
(displayln (to_string ll2))
(insert_at_position ll2 2 20)
(displayln (to_string ll2))
(insert_at_position ll2 1 30)
(displayln (to_string ll2))
(insert_at_position ll2 3 40)
(displayln (to_string ll2))
(insert_at_position ll2 5 50)
(displayln (to_string ll2))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
