;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (empty_list)
  (let/ec _return (begin
(_return (hash "data" (list)))
))
)
(define (push lst value)
  (let/ec _return (begin
(define res (list value))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if lst (hash-ref lst "data" #f) #f)) (string-length (if lst (hash-ref lst "data" #f) #f))] [(hash? (if lst (hash-ref lst "data" #f) #f)) (hash-count (if lst (hash-ref lst "data" #f) #f))] [else (length (if lst (hash-ref lst "data" #f) #f))])) (let/ec _cont
    (set! res (append res (list (if (if lst (hash-ref lst "data" #f) #f) (if (hash? (if lst (hash-ref lst "data" #f) #f)) (hash-ref (if lst (hash-ref lst "data" #f) #f) i #f) (list-ref (if lst (hash-ref lst "data" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "data" res))
))
)
(define (middle_element lst)
  (let/ec _return (begin
(define n (cond [(string? (if lst (hash-ref lst "data" #f) #f)) (string-length (if lst (hash-ref lst "data" #f) #f))] [(hash? (if lst (hash-ref lst "data" #f) #f)) (hash-count (if lst (hash-ref lst "data" #f) #f))] [else (length (if lst (hash-ref lst "data" #f) #f))]))
(if (equal? n 0) (let ()
(displayln "No element found.")
(_return 0)
) (void))
(define slow 0)
(define fast 0)
(let/ec _break (let loop ()
  (if (< (let ([__l fast] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) n) (let/ec _cont
    (set! fast (let ([__l fast] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! slow (let ([__l slow] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (if (if lst (hash-ref lst "data" #f) #f) (if (hash? (if lst (hash-ref lst "data" #f) #f)) (hash-ref (if lst (hash-ref lst "data" #f) #f) slow #f) (list-ref (if lst (hash-ref lst "data" #f) #f) (int slow))) #f))
))
)
(define (main)
  (let/ec _return (begin
(define lst (empty_list))
(middle_element lst)
(set! lst (push lst 5))
(displayln 5)
(set! lst (push lst 6))
(displayln 6)
(set! lst (push lst 8))
(displayln 8)
(set! lst (push lst 8))
(displayln 8)
(set! lst (push lst 10))
(displayln 10)
(set! lst (push lst 12))
(displayln 12)
(set! lst (push lst 17))
(displayln 17)
(set! lst (push lst 7))
(displayln 7)
(set! lst (push lst 3))
(displayln 3)
(set! lst (push lst 20))
(displayln 20)
(set! lst (push lst (- 20)))
(displayln (- 20))
(displayln (middle_element lst))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
