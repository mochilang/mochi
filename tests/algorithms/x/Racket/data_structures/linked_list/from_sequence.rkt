;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define NIL (- 0 1))
(define nodes (list))
(define (make_linked_list elements)
  (let/ec _return (begin
(if (equal? (cond [(string? elements) (string-length elements)] [(hash? elements) (hash-count elements)] [else (length elements)]) 0) (let ()
(panic "The Elements List is empty")
) (void))
(set! nodes (list))
(set! nodes (append nodes (list (hash "data" (if elements (if (hash? elements) (hash-ref elements 0 #f) (list-ref elements (int 0))) #f) "next" NIL))))
(define head 0)
(define current head)
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? elements) (string-length elements)] [(hash? elements) (hash-count elements)] [else (length elements)])) (let/ec _cont
    (set! nodes (append nodes (list (hash "data" (if elements (if (hash? elements) (hash-ref elements i #f) (list-ref elements (int i))) #f) "next" NIL))))
    (set! nodes (list-set nodes current (hash-set (list-ref nodes current) "next" (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))))
    (set! current (- (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return head)
))
)
(define (node_to_string head)
  (let/ec _return (begin
(define s "")
(define index head)
(let/ec _break (let loop ()
  (if (not (equal? index NIL)) (let/ec _cont
    (define node (if nodes (if (hash? nodes) (hash-ref nodes index #f) (list-ref nodes (int index))) #f))
    (set! s (string-append (string-append (string-append s "<") (format "~a" (if node (hash-ref node "data" #f) #f))) "> ---> "))
    (set! index (if node (hash-ref node "next" #f) #f))
    (loop)) (void))))
(set! s (string-append s "<END>"))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define list_data (list 1 3 5 32 44 12 43))
(displayln (string-append "List: " (format "~a" list_data)))
(displayln "Creating Linked List from List.")
(define head (make_linked_list list_data))
(displayln "Linked List:")
(displayln (node_to_string head))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
