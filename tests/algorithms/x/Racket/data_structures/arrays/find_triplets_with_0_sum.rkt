;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (sort_triplet a b c)
  (let/ec _return (begin
(define x a)
(define y b)
(define z c)
(if (> x y) (let ()
(define t x)
(set! x y)
(set! y t)
) (void))
(if (> y z) (let ()
(define t y)
(set! y z)
(set! z t)
) (void))
(if (> x y) (let ()
(define t x)
(set! x y)
(set! y t)
) (void))
(_return (list x y z))
))
)
(define (contains_triplet arr target)
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define item (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))
(define same #t)
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j (cond [(string? target) (string-length target)] [(hash? target) (hash-count target)] [else (length target)]))
(if (not (equal? (if item (if (hash? item) (hash-ref item j #f) (list-ref item (int j))) #f) (if target (if (hash? target) (hash-ref target j #f) (list-ref target (int j))) #f))) (let ()
(set! same #f)
(_break)
) (void))
      (set! j (+ j 1))
      (loop)))
))
(if same (let ()
(_return #t)
) (void))
      (set! i (+ i 1))
      (loop)))
))
(_return #f)
))
)
(define (contains_int arr value)
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(if (equal? (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) value) (let ()
(_return #t)
) (void))
      (set! i (+ i 1))
      (loop)))
))
(_return #f)
))
)
(define (find_triplets_with_0_sum nums)
  (let/ec _return (begin
(define n (cond [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)]))
(define result (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i n)
(let/ec _break (let ([j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))])
  (let loop ()
    (when (< j n)
(let/ec _break (let ([k (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))])
  (let loop ()
    (when (< k n)
(define a (if nums (if (hash? nums) (hash-ref nums i #f) (list-ref nums (int i))) #f))
(define b (if nums (if (hash? nums) (hash-ref nums j #f) (list-ref nums (int j))) #f))
(define c (if nums (if (hash? nums) (hash-ref nums k #f) (list-ref nums (int k))) #f))
(if (equal? (let ([__l (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 0) (let ()
(define trip (sort_triplet a b c))
(if (not (contains_triplet result trip)) (let ()
(set! result (append result (list trip)))
) (void))
) (void))
      (set! k (+ k 1))
      (loop)))
))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(_return result)
))
)
(define (find_triplets_with_0_sum_hashing arr)
  (let/ec _return (begin
(define target_sum 0)
(define output (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define seen (list))
(define current_sum (- target_sum (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f)))
(let/ec _break (let ([j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))])
  (let loop ()
    (when (< j (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define other (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f))
(define required (- current_sum other))
(if (contains_int seen required) (let ()
(define trip (sort_triplet (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) other required))
(if (not (contains_triplet output trip)) (let ()
(set! output (append output (list trip)))
) (void))
) (void))
(set! seen (append seen (list other)))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(_return output)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" (find_triplets_with_0_sum (list (- 1) 0 1 2 (- 1) (- 4)))))
(displayln (format "~a" (find_triplets_with_0_sum (list))))
(displayln (format "~a" (find_triplets_with_0_sum (list 0 0 0))))
(displayln (format "~a" (find_triplets_with_0_sum (list 1 2 3 0 (- 1) (- 2) (- 3)))))
(displayln (format "~a" (find_triplets_with_0_sum_hashing (list (- 1) 0 1 2 (- 1) (- 4)))))
(displayln (format "~a" (find_triplets_with_0_sum_hashing (list))))
(displayln (format "~a" (find_triplets_with_0_sum_hashing (list 0 0 0))))
(displayln (format "~a" (find_triplets_with_0_sum_hashing (list 1 2 3 0 (- 1) (- 2) (- 3)))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
