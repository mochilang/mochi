;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (pow2 n)
  (let/ec _return (begin
(define result 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! result (* result 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (int_log2 n)
  (let/ec _return (begin
(define v n)
(define res 0)
(let/ec _break (let loop ()
  (if (> v 1) (let/ec _cont
    (set! v (quotient v 2))
    (set! res (let ([__l res] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (build_sparse_table number_list)
  (let/ec _return (begin
(if (equal? (cond [(string? number_list) (string-length number_list)] [(hash? number_list) (hash-count number_list)] [else (length number_list)]) 0) (let ()
(panic "empty number list not allowed")
) (void))
(define length_ (cond [(string? number_list) (string-length number_list)] [(hash? number_list) (hash-count number_list)] [else (length number_list)]))
(define row (let ([__l (int_log2 length_)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define sparse_table (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j row) (let/ec _cont
    (define inner (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i length_) (let/ec _cont
    (set! inner (append inner (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! sparse_table (append sparse_table (list inner)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define i 0)
(let/ec _break (let loop ()
  (if (< i length_) (let/ec _cont
    (set! sparse_table (list-set sparse_table 0 (list-set (list-ref sparse_table 0) i (if number_list (if (hash? number_list) (hash-ref number_list i #f) (list-ref number_list (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! j 1)
(let/ec _break (let loop ()
  (if (<= (pow2 j) length_) (let/ec _cont
    (set! i 0)
    (let/ec _break (let loop ()
  (if (< (- (let ([__l i] [__r (pow2 j)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1) length_) (let/ec _cont
    (define left (if (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table (- j 1) #f) (list-ref sparse_table (int (- j 1)))) #f) (if (hash? (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table (- j 1) #f) (list-ref sparse_table (int (- j 1)))) #f)) (hash-ref (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table (- j 1) #f) (list-ref sparse_table (int (- j 1)))) #f) (let ([__l i] [__r (pow2 (- j 1))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table (- j 1) #f) (list-ref sparse_table (int (- j 1)))) #f) (int (let ([__l i] [__r (pow2 (- j 1))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
    (define right (if (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table (- j 1) #f) (list-ref sparse_table (int (- j 1)))) #f) (if (hash? (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table (- j 1) #f) (list-ref sparse_table (int (- j 1)))) #f)) (hash-ref (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table (- j 1) #f) (list-ref sparse_table (int (- j 1)))) #f) i #f) (list-ref (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table (- j 1) #f) (list-ref sparse_table (int (- j 1)))) #f) (int i))) #f))
    (if (< left right) (let ()
(set! sparse_table (list-set sparse_table j (list-set (list-ref sparse_table j) i left)))
) (let ()
(set! sparse_table (list-set sparse_table j (list-set (list-ref sparse_table j) i right)))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sparse_table)
))
)
(define (query sparse_table left_bound right_bound)
  (let/ec _return (begin
(if (or (< left_bound 0) (>= right_bound (cond [(string? (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table 0 #f) (list-ref sparse_table (int 0))) #f)) (string-length (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table 0 #f) (list-ref sparse_table (int 0))) #f))] [(hash? (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table 0 #f) (list-ref sparse_table (int 0))) #f)) (hash-count (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table 0 #f) (list-ref sparse_table (int 0))) #f))] [else (length (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table 0 #f) (list-ref sparse_table (int 0))) #f))]))) (let ()
(panic "list index out of range")
) (void))
(define interval (let ([__l (- right_bound left_bound)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define j (int_log2 interval))
(define val1 (if (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table j #f) (list-ref sparse_table (int j))) #f) (if (hash? (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table j #f) (list-ref sparse_table (int j))) #f)) (hash-ref (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table j #f) (list-ref sparse_table (int j))) #f) (let ([__l (- right_bound (pow2 j))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table j #f) (list-ref sparse_table (int j))) #f) (int (let ([__l (- right_bound (pow2 j))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
(define val2 (if (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table j #f) (list-ref sparse_table (int j))) #f) (if (hash? (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table j #f) (list-ref sparse_table (int j))) #f)) (hash-ref (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table j #f) (list-ref sparse_table (int j))) #f) left_bound #f) (list-ref (if sparse_table (if (hash? sparse_table) (hash-ref sparse_table j #f) (list-ref sparse_table (int j))) #f) (int left_bound))) #f))
(if (< val1 val2) (let ()
(_return val1)
) (void))
(_return val2)
))
)
(define st1 (build_sparse_table (list 8 1 0 3 4 9 3)))
(define st2 (build_sparse_table (list 3 1 9)))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" st1))
(displayln (format "~a" st2))
(displayln (format "~a" (query st1 0 4)))
(displayln (format "~a" (query st1 4 6)))
(displayln (format "~a" (query st2 2 2)))
(displayln (format "~a" (query st2 0 1)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
