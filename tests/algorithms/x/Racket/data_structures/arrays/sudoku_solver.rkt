;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (string_to_grid s)
  (let/ec _return (begin
(define grid (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 9) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 9) (let/ec _cont
    (define ch (slice s (let ([__l (* i 9)] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (let ([__l (* i 9)] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define val 0)
    (if (and (not (string=? ch "0")) (not (string=? ch "."))) (let ()
(set! val (int ch))
) (void))
    (set! row (append row (list val)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! grid (append grid (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return grid)
))
)
(define (print_grid grid)
  (let/ec _return (begin
(let/ec _break (let ([r 0])
  (let loop ()
    (when (< r 9)
(define line "")
(let/ec _break (let ([c 0])
  (let loop ()
    (when (< c 9)
(set! line (string-append line (format "~a" (if (if grid (if (hash? grid) (hash-ref grid r #f) (list-ref grid (int r))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid r #f) (list-ref grid (int r))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid r #f) (list-ref grid (int r))) #f) c #f) (list-ref (if grid (if (hash? grid) (hash-ref grid r #f) (list-ref grid (int r))) #f) (int c))) #f))))
(if (< c 8) (let ()
(set! line (string-append line " "))
) (void))
      (set! c (+ c 1))
      (loop)))
))
(displayln line)
      (set! r (+ r 1))
      (loop)))
))
))
)
(define (is_safe grid row column n)
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i 9)
(if (or (equal? (if (if grid (if (hash? grid) (hash-ref grid row #f) (list-ref grid (int row))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid row #f) (list-ref grid (int row))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid row #f) (list-ref grid (int row))) #f) i #f) (list-ref (if grid (if (hash? grid) (hash-ref grid row #f) (list-ref grid (int row))) #f) (int i))) #f) n) (equal? (if (if grid (if (hash? grid) (hash-ref grid i #f) (list-ref grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (list-ref grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (list-ref grid (int i))) #f) column #f) (list-ref (if grid (if (hash? grid) (hash-ref grid i #f) (list-ref grid (int i))) #f) (int column))) #f) n)) (let ()
(_return #f)
) (void))
      (set! i (+ i 1))
      (loop)))
))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i 3)
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j 3)
(if (equal? (if (if grid (if (hash? grid) (hash-ref grid (let ([__l (- row (modulo row 3))] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref grid (int (let ([__l (- row (modulo row 3))] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid (let ([__l (- row (modulo row 3))] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref grid (int (let ([__l (- row (modulo row 3))] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l (- row (modulo row 3))] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref grid (int (let ([__l (- row (modulo row 3))] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l (- column (modulo column 3))] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if grid (if (hash? grid) (hash-ref grid (let ([__l (- row (modulo row 3))] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref grid (int (let ([__l (- row (modulo row 3))] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l (- column (modulo column 3))] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) n) (let ()
(_return #f)
) (void))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(_return #t)
))
)
(define (find_empty grid)
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i 9)
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j 9)
(if (equal? (if (if grid (if (hash? grid) (hash-ref grid i #f) (list-ref grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (list-ref grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (list-ref grid (int i))) #f) j #f) (list-ref (if grid (if (hash? grid) (hash-ref grid i #f) (list-ref grid (int i))) #f) (int j))) #f) 0) (let ()
(_return (list i j))
) (void))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(_return (list))
))
)
(define (solve grid)
  (let/ec _return (begin
(define loc (find_empty grid))
(if (equal? (cond [(string? loc) (string-length loc)] [(hash? loc) (hash-count loc)] [else (length loc)]) 0) (let ()
(_return #t)
) (void))
(define row (if loc (if (hash? loc) (hash-ref loc 0 #f) (list-ref loc (int 0))) #f))
(define column (if loc (if (hash? loc) (hash-ref loc 1 #f) (list-ref loc (int 1))) #f))
(let/ec _break (let ([digit 1])
  (let loop ()
    (when (< digit 10)
(if (is_safe grid row column digit) (let ()
(set! grid (list-set grid row (list-set (list-ref grid row) column digit)))
(if (solve grid) (let ()
(_return #t)
) (void))
(set! grid (list-set grid row (list-set (list-ref grid row) column 0)))
) (void))
      (set! digit (+ digit 1))
      (loop)))
))
(_return #f)
))
)
(define puzzle "003020600900305001001806400008102900700000008006708200002609500800203009005010300")
(define grid (string_to_grid puzzle))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln "Original grid:")
(print_grid grid)
(if (solve grid) (let ()
(displayln "\nSolved grid:")
(print_grid grid)
) (let ()
(displayln "\nNo solution found")
))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
