;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define tree (list))
(define (sort_points points axis)
  (let/ec _return (begin
(define arr points)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1)) (let/ec _cont
    (if (> (if (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (if (hash? (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f)) (hash-ref (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) axis #f) (list-ref (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (int axis))) #f) (if (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) axis #f) (list-ref (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int axis))) #f)) (let ()
(define tmp (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f))
(set! arr (list-set arr (int j) (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (build_kdtree points depth)
  (let/ec _return (begin
(if (equal? (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)]) 0) (let ()
(_return (- 0 1))
) (void))
(define k (cond [(string? (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f)) (string-length (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f))] [(hash? (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f)) (hash-count (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f))] [else (length (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f))]))
(define axis (modulo depth k))
(define sorted (sort_points points axis))
(define median_idx (floor (/ (cond [(string? sorted) (string-length sorted)] [(hash? sorted) (hash-count sorted)] [else (length sorted)]) 2)))
(define left_points (slice sorted 0 median_idx))
(define right_points (slice sorted (let ([__l median_idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? sorted) (string-length sorted)] [(hash? sorted) (hash-count sorted)] [else (length sorted)])))
(define idx (cond [(string? tree) (string-length tree)] [(hash? tree) (hash-count tree)] [else (length tree)]))
(set! tree (append tree (list (hash "point" (if sorted (if (hash? sorted) (hash-ref sorted median_idx #f) (list-ref sorted (int median_idx))) #f) "left" (- 0 1) "right" (- 0 1)))))
(define left_idx (build_kdtree left_points (let ([__l depth] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define right_idx (build_kdtree right_points (let ([__l depth] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define node (if tree (if (hash? tree) (hash-ref tree idx #f) (list-ref tree (int idx))) #f))
(set! node (hash-set (or node (hash)) "left" left_idx))
(set! node (hash-set (or node (hash)) "right" right_idx))
(set! tree (list-set tree (int idx) node))
(_return idx)
))
)
(define pts (list (list 2.0 3.0) (list 5.0 4.0) (list 9.0 6.0) (list 4.0 7.0) (list 8.0 1.0) (list 7.0 2.0)))
(define root (build_kdtree pts 0))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" tree))
(displayln root)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
