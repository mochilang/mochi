;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (square_distance a b)
  (let/ec _return (begin
(define i 0)
(define total 0.0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (define diff (- (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)))
    (set! total (let ([__l total] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return total)
))
)
(define (search nodes index query_point depth best)
  (let/ec _return (begin
(if (equal? index (- 1)) (let ()
(_return best)
) (void))
(define result best)
(set! result (hash-set (or result (hash)) "nodes_visited" (let ([__l (if result (hash-ref result "nodes_visited" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define node (if nodes (if (hash? nodes) (hash-ref nodes index #f) (list-ref nodes (int index))) #f))
(define current_point (if node (hash-ref node "point" #f) #f))
(define current_dist (square_distance query_point current_point))
(if (or (equal? (cond [(string? (if result (hash-ref result "point" #f) #f)) (string-length (if result (hash-ref result "point" #f) #f))] [(hash? (if result (hash-ref result "point" #f) #f)) (hash-count (if result (hash-ref result "point" #f) #f))] [else (length (if result (hash-ref result "point" #f) #f))]) 0) (< current_dist (if result (hash-ref result "distance" #f) #f))) (let ()
(set! result (hash-set (or result (hash)) "point" current_point))
(set! result (hash-set (or result (hash)) "distance" current_dist))
) (void))
(define k (cond [(string? query_point) (string-length query_point)] [(hash? query_point) (hash-count query_point)] [else (length query_point)]))
(define axis (modulo depth k))
(define nearer (if node (hash-ref node "left" #f) #f))
(define further (if node (hash-ref node "right" #f) #f))
(if (> (if query_point (if (hash? query_point) (hash-ref query_point axis #f) (list-ref query_point (int axis))) #f) (if current_point (if (hash? current_point) (hash-ref current_point axis #f) (list-ref current_point (int axis))) #f)) (let ()
(set! nearer (if node (hash-ref node "right" #f) #f))
(set! further (if node (hash-ref node "left" #f) #f))
) (void))
(set! result (search nodes nearer query_point (let ([__l depth] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) result))
(define diff (- (if query_point (if (hash? query_point) (hash-ref query_point axis #f) (list-ref query_point (int axis))) #f) (if current_point (if (hash? current_point) (hash-ref current_point axis #f) (list-ref current_point (int axis))) #f)))
(if (< (* diff diff) (if result (hash-ref result "distance" #f) #f)) (let ()
(set! result (search nodes further query_point (let ([__l depth] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) result))
) (void))
(_return result)
))
)
(define (nearest_neighbour_search nodes root query_point)
  (let/ec _return (begin
(define initial (hash "point" (list) "distance" 1e+30 "nodes_visited" 0))
(_return (search nodes root query_point 0 initial))
))
)
(define nodes (list (hash "point" (list 9.0 1.0) "left" 1 "right" 4) (hash "point" (list 2.0 7.0) "left" 2 "right" 3) (hash "point" (list 3.0 6.0) "left" (- 1) "right" (- 1)) (hash "point" (list 6.0 12.0) "left" (- 1) "right" (- 1)) (hash "point" (list 17.0 15.0) "left" 5 "right" 6) (hash "point" (list 13.0 15.0) "left" (- 1) "right" (- 1)) (hash "point" (list 10.0 19.0) "left" (- 1) "right" (- 1))))
(define queries (list (list 9.0 2.0) (list 12.0 15.0) (list 1.0 3.0)))
(define q 0)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (< q (cond [(string? queries) (string-length queries)] [(hash? queries) (hash-count queries)] [else (length queries)])) (let/ec _cont
    (define res (nearest_neighbour_search nodes 0 (if queries (if (hash? queries) (hash-ref queries q #f) (list-ref queries (int q))) #f)))
    (displayln (string-append (string-append (string-append (string-append (string-append (format "~a" (if res (hash-ref res "point" #f) #f)) " ") (format "~a" (if res (hash-ref res "distance" #f) #f))) " ") (format "~a" (if res (hash-ref res "nodes_visited" #f) #f))) "\n"))
    (set! q (let ([__l q] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
