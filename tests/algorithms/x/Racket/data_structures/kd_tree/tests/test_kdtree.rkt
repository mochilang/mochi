;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define INF 1000000000.0)
(define seed 1)
(define (rand_float)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return (/ (exact->inexact seed) 2147483648.0))
))
)
(define (hypercube_points num_points cube_size num_dimensions)
  (let/ec _return (begin
(define pts (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i num_points) (let/ec _cont
    (define p (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j num_dimensions) (let/ec _cont
    (define v (* cube_size (rand_float)))
    (set! p (append p (list v)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! pts (append pts (list p)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return pts)
))
)
(define (build_kdtree points depth)
  (let/ec _return (begin
(_return points)
))
)
(define (distance_sq a b)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (define d (- (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)))
    (set! sum (let ([__l sum] [__r (* d d)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (nearest_neighbour_search points query)
  (let/ec _return (begin
(if (equal? (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)]) 0) (let ()
(_return (hash "index" (- 1.0) "dist" INF "visited" 0.0))
) (void))
(define nearest_idx 0)
(define nearest_dist INF)
(define visited 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)])) (let/ec _cont
    (define d (distance_sq query (if points (if (hash? points) (hash-ref points i #f) (list-ref points (int i))) #f)))
    (set! visited (let ([__l visited] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (< d nearest_dist) (let ()
(set! nearest_dist d)
(set! nearest_idx i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "index" (exact->inexact nearest_idx) "dist" nearest_dist "visited" (exact->inexact visited)))
))
)
(define (test_build_cases)
  (let/ec _return (begin
(define empty_pts (list))
(define tree0 (build_kdtree empty_pts 0))
(if (equal? (cond [(string? tree0) (string-length tree0)] [(hash? tree0) (hash-count tree0)] [else (length tree0)]) 0) (let ()
(displayln "case1 true")
) (let ()
(displayln "case1 false")
))
(define pts1 (hypercube_points 10 10.0 2))
(define tree1 (build_kdtree pts1 2))
(if (and (> (cond [(string? tree1) (string-length tree1)] [(hash? tree1) (hash-count tree1)] [else (length tree1)]) 0) (equal? (cond [(string? (if tree1 (if (hash? tree1) (hash-ref tree1 0 #f) (list-ref tree1 (int 0))) #f)) (string-length (if tree1 (if (hash? tree1) (hash-ref tree1 0 #f) (list-ref tree1 (int 0))) #f))] [(hash? (if tree1 (if (hash? tree1) (hash-ref tree1 0 #f) (list-ref tree1 (int 0))) #f)) (hash-count (if tree1 (if (hash? tree1) (hash-ref tree1 0 #f) (list-ref tree1 (int 0))) #f))] [else (length (if tree1 (if (hash? tree1) (hash-ref tree1 0 #f) (list-ref tree1 (int 0))) #f))]) 2)) (let ()
(displayln "case2 true")
) (let ()
(displayln "case2 false")
))
(define pts2 (hypercube_points 10 10.0 3))
(define tree2 (build_kdtree pts2 (- 2)))
(if (and (> (cond [(string? tree2) (string-length tree2)] [(hash? tree2) (hash-count tree2)] [else (length tree2)]) 0) (equal? (cond [(string? (if tree2 (if (hash? tree2) (hash-ref tree2 0 #f) (list-ref tree2 (int 0))) #f)) (string-length (if tree2 (if (hash? tree2) (hash-ref tree2 0 #f) (list-ref tree2 (int 0))) #f))] [(hash? (if tree2 (if (hash? tree2) (hash-ref tree2 0 #f) (list-ref tree2 (int 0))) #f)) (hash-count (if tree2 (if (hash? tree2) (hash-ref tree2 0 #f) (list-ref tree2 (int 0))) #f))] [else (length (if tree2 (if (hash? tree2) (hash-ref tree2 0 #f) (list-ref tree2 (int 0))) #f))]) 3)) (let ()
(displayln "case3 true")
) (let ()
(displayln "case3 false")
))
))
)
(define (test_search)
  (let/ec _return (begin
(define pts (hypercube_points 10 10.0 2))
(define tree (build_kdtree pts 0))
(define qp (if (hypercube_points 1 10.0 2) (if (hash? (hypercube_points 1 10.0 2)) (hash-ref (hypercube_points 1 10.0 2) 0 #f) (list-ref (hypercube_points 1 10.0 2) (int 0))) #f))
(define res (nearest_neighbour_search tree qp))
(if (and (and (not (equal? (if res (hash-ref res "index" 0.0) #f) (- 1.0))) (>= (if res (hash-ref res "dist" 0.0) #f) 0.0)) (> (if res (hash-ref res "visited" 0.0) #f) 0.0)) (let ()
(displayln "search true")
) (let ()
(displayln "search false")
))
))
)
(define (test_edge)
  (let/ec _return (begin
(define empty_pts (list))
(define tree (build_kdtree empty_pts 0))
(define query (list 0.0 0.0))
(define res (nearest_neighbour_search tree query))
(if (and (and (equal? (if res (hash-ref res "index" 0.0) #f) (- 1.0)) (> (if res (hash-ref res "dist" 0.0) #f) 100000000.0)) (equal? (if res (hash-ref res "visited" 0.0) #f) 0.0)) (let ()
(displayln "edge true")
) (let ()
(displayln "edge false")
))
))
)
(define (main)
  (let/ec _return (begin
(set! seed 1)
(test_build_cases)
(test_search)
(test_edge)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
