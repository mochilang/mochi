;; Generated by Mochi 0.10.72 on 2025-08-24 23:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port racket/vector net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/data_structures/kd_tree/example")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (if (and (inexact? x) (integer? x))
         (number->string (inexact->exact x))
         (number->string x))]
    [(vector? x) (format "~a" (map (lambda (v) (cond [(hash? v) (read (open-input-string (to-string v)))] [(vector? v) (vector->list v)] [else v])) (vector->list x)))]
    [(hash? x)
     (format "~a"
             (for/hash ([k (in-hash-keys x)])
               (values k (let ([v (hash-ref x k)]) (if (vector? v) (vector->list v) v)))))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (cond
    [(string? lst) (substring lst start end)]
    [(vector? lst) (vector->list (vector-copy lst start end))]
    [else (take (drop lst start) (- end start))]))

(define (slice seq start end)
  (define len (cond [(string? seq) (string-length seq)] [(vector? seq) (vector-length seq)] [else (length seq)]))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (cond
    [(string? seq) (substring seq s e)]
    [(vector? seq) (vector-copy seq s e)]
    [else (sublist seq s e)]))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (appendv a b)
  (cond
    [(vector? a) (vector-append a (cond [(vector? b) b] [(list? b) (list->vector b)] [else (vector b)]))]
    [(list? a) (append a (cond [(list? b) b] [(vector? b) (vector->list b)] [else (list b)]))]
    [else (append a b)]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(vector? lst) (if (and (>= i 0) (< i (vector-length lst))) (vector-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (cond
    [(vector? lst) (when (< i (vector-length lst)) (vector-set! lst i val)) lst]
    [else
     (define len (length lst))
     (cond
       [(>= i len) (append lst (make-list (- i len) '()) (list val))]
       [(zero? i) (cons val (cdr lst))]
       [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))])]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define seed 1)
(define (rand)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return seed)
))
)
(define (random)
  (let/ec _return (begin
(_return (/ (* 1.0 (rand)) 2147483648.0))
))
)
(define (hypercube_points num_points cube_size num_dimensions)
  (let/ec _return (begin
(define pts (vector))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r num_points]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p (vector))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r num_dimensions]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! p (appendv (or p (vector)) (* cube_size (random))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! pts (appendv (or pts (vector)) p))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return pts)
))
)
(define (sort_points points axis)
  (let/ec _return (begin
(define n (cond [(not points) 0] [(string? points) (string-length points)] [(vector? points) (vector-length points)] [(hash? points) (hash-count points)] [else (length points)]))
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define key (if points (if (hash? points) (hash-ref points i #f) (safe-index points (int i))) #f))
      (define j (- i 1))
      (let/ec _break (let loop ()
  (if (and (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l (if (if points (if (hash? points) (hash-ref points j #f) (safe-index points (int j))) #f) (if (hash? (if points (if (hash? points) (hash-ref points j #f) (safe-index points (int j))) #f)) (hash-ref (if points (if (hash? points) (hash-ref points j #f) (safe-index points (int j))) #f) axis #f) (safe-index (if points (if (hash? points) (hash-ref points j #f) (safe-index points (int j))) #f) (int axis))) #f)] [__r (if key (if (hash? key) (hash-ref key axis #f) (safe-index key (int axis))) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (begin
    (let/ec _cont
      (vector-set! points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (if points (if (hash? points) (hash-ref points j #f) (safe-index points (int j))) #f))
      (set! j (- j 1))
    )
    (loop)) (void))))
      (vector-set! points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) key)
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return points)
))
)
(define (sublist_ arr start end)
  (let/ec _return (begin
(define res (vector))
(define i start)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r end]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (appendv (or res (vector)) (if arr (if (hash? arr) (hash-ref arr i #f) (safe-index arr (int i))) #f)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (shift_nodes nodes offset)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not nodes) 0] [(string? nodes) (string-length nodes)] [(vector? nodes) (vector-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f) "left" #f) #f) (- 0 1))) (let ()
(hash-set! (safe-index nodes i) "left" (let ([__l (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f) "left" #f) #f)] [__r offset]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (if (not (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f) "right" #f) #f) (- 0 1))) (let ()
(hash-set! (safe-index nodes i) "right" (let ([__l (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f) "right" #f) #f)] [__r offset]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return nodes)
))
)
(define (build_kdtree points depth)
  (let/ec _return (begin
(if (equal? (cond [(not points) 0] [(string? points) (string-length points)] [(vector? points) (vector-length points)] [(hash? points) (hash-count points)] [else (length points)]) 0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "index" (- 0 1)) (hash-set! h "nodes" (vector)) h))
) (void))
(define k (cond [(not (if points (if (hash? points) (hash-ref points 0 #f) (safe-index points (int 0))) #f)) 0] [(string? (if points (if (hash? points) (hash-ref points 0 #f) (safe-index points (int 0))) #f)) (string-length (if points (if (hash? points) (hash-ref points 0 #f) (safe-index points (int 0))) #f))] [(vector? (if points (if (hash? points) (hash-ref points 0 #f) (safe-index points (int 0))) #f)) (vector-length (if points (if (hash? points) (hash-ref points 0 #f) (safe-index points (int 0))) #f))] [(hash? (if points (if (hash? points) (hash-ref points 0 #f) (safe-index points (int 0))) #f)) (hash-count (if points (if (hash? points) (hash-ref points 0 #f) (safe-index points (int 0))) #f))] [else (length (if points (if (hash? points) (hash-ref points 0 #f) (safe-index points (int 0))) #f))]))
(define axis (modulo depth k))
(set! points (sort_points points axis))
(define median (floor (/ (cond [(not points) 0] [(string? points) (string-length points)] [(vector? points) (vector-length points)] [(hash? points) (hash-count points)] [else (length points)]) 2)))
(define left_points (sublist_ points 0 median))
(define right_points (sublist_ points (let ([__l median] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not points) 0] [(string? points) (string-length points)] [(vector? points) (vector-length points)] [(hash? points) (hash-count points)] [else (length points)])))
(define left_res (build_kdtree left_points (let ([__l depth] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define right_res (build_kdtree right_points (let ([__l depth] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define offset (let ([__l (cond [(not (if left_res (hash-ref left_res "nodes" #f) #f)) 0] [(string? (if left_res (hash-ref left_res "nodes" #f) #f)) (string-length (if left_res (hash-ref left_res "nodes" #f) #f))] [(vector? (if left_res (hash-ref left_res "nodes" #f) #f)) (vector-length (if left_res (hash-ref left_res "nodes" #f) #f))] [(hash? (if left_res (hash-ref left_res "nodes" #f) #f)) (hash-count (if left_res (hash-ref left_res "nodes" #f) #f))] [else (length (if left_res (hash-ref left_res "nodes" #f) #f))])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define shifted_right (shift_nodes (if right_res (hash-ref right_res "nodes" #f) #f) offset))
(define nodes (if left_res (hash-ref left_res "nodes" #f) #f))
(define left_index (if left_res (hash-ref left_res "index" #f) #f))
(define right_index (if (equal? (if right_res (hash-ref right_res "index" #f) #f) (- 0 1)) (- 0 1) (let ([__l (if right_res (hash-ref right_res "index" #f) #f)] [__r offset]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! nodes (appendv (or nodes (vector)) (let ([h (make-hash)]) (hash-set! h "point" (if points (if (hash? points) (hash-ref points median #f) (safe-index points (int median))) #f)) (hash-set! h "left" left_index) (hash-set! h "right" right_index) h)))
(set! nodes (append nodes shifted_right))
(define root_index (cond [(not (if left_res (hash-ref left_res "nodes" #f) #f)) 0] [(string? (if left_res (hash-ref left_res "nodes" #f) #f)) (string-length (if left_res (hash-ref left_res "nodes" #f) #f))] [(vector? (if left_res (hash-ref left_res "nodes" #f) #f)) (vector-length (if left_res (hash-ref left_res "nodes" #f) #f))] [(hash? (if left_res (hash-ref left_res "nodes" #f) #f)) (hash-count (if left_res (hash-ref left_res "nodes" #f) #f))] [else (length (if left_res (hash-ref left_res "nodes" #f) #f))]))
(_return (let ([h (make-hash)]) (hash-set! h "index" root_index) (hash-set! h "nodes" nodes) h))
))
)
(define (square_distance a b)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(vector? a) (vector-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define diff (- (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f)))
      (set! sum (let ([__l sum] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (nearest_neighbour_search tree root query_point)
  (let/ec _return (begin
(define nearest_point (vector))
(define nearest_dist 0.0)
(define visited 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not tree) 0] [(string? tree) (string-length tree)] [(vector? tree) (vector-length tree)] [(hash? tree) (hash-count tree)] [else (length tree)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define node (if tree (if (hash? tree) (hash-ref tree i #f) (safe-index tree (int i))) #f))
      (define dist (square_distance query_point (if node (hash-ref node "point" #f) #f)))
      (set! visited (let ([__l visited] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (if (or (equal? visited 1) (let ([__l dist] [__r nearest_dist]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(set! nearest_point (if node (hash-ref node "point" #f) #f))
(set! nearest_dist dist)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "point" nearest_point) (hash-set! h "dist" nearest_dist) (hash-set! h "visited" visited) h))
))
)
(define (list_to_string arr)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(vector? arr) (vector-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! s (string-append s (to-string (if arr (if (hash? arr) (hash-ref arr i #f) (safe-index arr (int i))) #f))))
      (if (let ([__l i] [__r (- (cond [(not arr) 0] [(string? arr) (string-length arr)] [(vector? arr) (vector-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! s (string-append s ", "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (string-append s "]"))
))
)
(define (main)
  (let/ec _return (begin
(define num_points 5000)
(define cube_size 10.0)
(define num_dimensions 10)
(define pts (hypercube_points num_points cube_size num_dimensions))
(define build (build_kdtree pts 0))
(define root (if build (hash-ref build "index" #f) #f))
(define tree (if build (hash-ref build "nodes" #f) #f))
(define query (vector))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r num_dimensions]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! query (appendv (or query (vector)) (random)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define res (nearest_neighbour_search tree root query))
(displayln (to-string (string-append "Query point: " (list_to_string query))))
(displayln (to-string (string-append "Nearest point: " (list_to_string (if res (hash-ref res "point" #f) #f)))))
(displayln (to-string (string-append "Distance: " (to-string (if res (hash-ref res "dist" #f) #f)))))
(displayln (to-string (string-append "Nodes visited: " (to-string (if res (hash-ref res "visited" #f) #f)))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
