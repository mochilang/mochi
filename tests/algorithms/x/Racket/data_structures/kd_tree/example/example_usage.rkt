;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define seed 1)
(define (rand)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return seed)
))
)
(define (random)
  (let/ec _return (begin
(_return (/ (* 1.0 (rand)) 2147483648.0))
))
)
(define (hypercube_points num_points cube_size num_dimensions)
  (let/ec _return (begin
(define pts (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i num_points) (let/ec _cont
    (define p (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j num_dimensions) (let/ec _cont
    (set! p (append p (list (* cube_size (random)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! pts (append pts (list p)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return pts)
))
)
(define (sort_points points axis)
  (let/ec _return (begin
(define n (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)]))
(define i 1)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define key (if points (if (hash? points) (hash-ref points i #f) (list-ref points (int i))) #f))
    (define j (- i 1))
    (let/ec _break (let loop ()
  (if (and (>= j 0) (> (if (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f) (if (hash? (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f)) (hash-ref (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f) axis #f) (list-ref (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f) (int axis))) #f) (if key (if (hash? key) (hash-ref key axis #f) (list-ref key (int axis))) #f))) (let/ec _cont
    (set! points (list-set points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f)))
    (set! j (- j 1))
    (loop)) (void))))
    (set! points (list-set points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) key))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return points)
))
)
(define (sublist arr start end)
  (let/ec _return (begin
(define res (list))
(define i start)
(let/ec _break (let loop ()
  (if (< i end) (let/ec _cont
    (set! res (append res (list (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (shift_nodes nodes offset)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])) (let/ec _cont
    (if (not (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f) (- 0 1))) (let ()
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "left" (let ([__l (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "left" #f) #f)] [__r offset]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
    (if (not (equal? (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f) (- 0 1))) (let ()
(set! nodes (list-set nodes i (hash-set (list-ref nodes i) "right" (let ([__l (if (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f) "right" #f) #f)] [__r offset]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return nodes)
))
)
(define (build_kdtree points depth)
  (let/ec _return (begin
(if (equal? (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)]) 0) (let ()
(_return (hash "index" (- 0 1) "nodes" (list)))
) (void))
(define k (cond [(string? (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f)) (string-length (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f))] [(hash? (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f)) (hash-count (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f))] [else (length (if points (if (hash? points) (hash-ref points 0 #f) (list-ref points (int 0))) #f))]))
(define axis (modulo depth k))
(set! points (sort_points points axis))
(define median (floor (/ (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)]) 2)))
(define left_points (sublist points 0 median))
(define right_points (sublist points (let ([__l median] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)])))
(define left_res (build_kdtree left_points (let ([__l depth] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define right_res (build_kdtree right_points (let ([__l depth] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define offset (let ([__l (cond [(string? (if left_res (hash-ref left_res "nodes" #f) #f)) (string-length (if left_res (hash-ref left_res "nodes" #f) #f))] [(hash? (if left_res (hash-ref left_res "nodes" #f) #f)) (hash-count (if left_res (hash-ref left_res "nodes" #f) #f))] [else (length (if left_res (hash-ref left_res "nodes" #f) #f))])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define shifted_right (shift_nodes (if right_res (hash-ref right_res "nodes" #f) #f) offset))
(define nodes (if left_res (hash-ref left_res "nodes" #f) #f))
(define left_index (if left_res (hash-ref left_res "index" #f) #f))
(define right_index (if (equal? (if right_res (hash-ref right_res "index" #f) #f) (- 0 1)) (- 0 1) (let ([__l (if right_res (hash-ref right_res "index" #f) #f)] [__r offset]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! nodes (append nodes (list (hash "point" (if points (if (hash? points) (hash-ref points median #f) (list-ref points (int median))) #f) "left" left_index "right" right_index))))
(set! nodes (append nodes shifted_right))
(define root_index (cond [(string? (if left_res (hash-ref left_res "nodes" #f) #f)) (string-length (if left_res (hash-ref left_res "nodes" #f) #f))] [(hash? (if left_res (hash-ref left_res "nodes" #f) #f)) (hash-count (if left_res (hash-ref left_res "nodes" #f) #f))] [else (length (if left_res (hash-ref left_res "nodes" #f) #f))]))
(_return (hash "index" root_index "nodes" nodes))
))
)
(define (square_distance a b)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (define diff (- (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)))
    (set! sum (let ([__l sum] [__r (* diff diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (nearest_neighbour_search tree root query_point)
  (let/ec _return (begin
(define nearest_point (list))
(define nearest_dist 0.0)
(define visited 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? tree) (string-length tree)] [(hash? tree) (hash-count tree)] [else (length tree)])) (let/ec _cont
    (define node (if tree (if (hash? tree) (hash-ref tree i #f) (list-ref tree (int i))) #f))
    (define dist (square_distance query_point (if node (hash-ref node "point" #f) #f)))
    (set! visited (let ([__l visited] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (or (equal? visited 1) (< dist nearest_dist)) (let ()
(set! nearest_point (if node (hash-ref node "point" #f) #f))
(set! nearest_dist dist)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "point" nearest_point "dist" nearest_dist "visited" visited))
))
)
(define (list_to_string arr)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (set! s (string-append s (format "~a" (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))))
    (if (< i (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1)) (let ()
(set! s (string-append s ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append s "]"))
))
)
(define (main)
  (let/ec _return (begin
(define num_points 5000)
(define cube_size 10.0)
(define num_dimensions 10)
(define pts (hypercube_points num_points cube_size num_dimensions))
(define build (build_kdtree pts 0))
(define root (if build (hash-ref build "index" #f) #f))
(define tree (if build (hash-ref build "nodes" #f) #f))
(define query (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i num_dimensions) (let/ec _cont
    (set! query (append query (list (random))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define res (nearest_neighbour_search tree root query))
(displayln (string-append "Query point: " (list_to_string query)))
(displayln (string-append "Nearest point: " (list_to_string (if res (hash-ref res "point" #f) #f))))
(displayln (string-append "Distance: " (format "~a" (if res (hash-ref res "dist" #f) #f))))
(displayln (string-append "Nodes visited: " (format "~a" (if res (hash-ref res "visited" #f) #f))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
