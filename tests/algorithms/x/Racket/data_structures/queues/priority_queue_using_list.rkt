;; Generated by Mochi 0.10.72 on 2025-08-24 23:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port racket/vector net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/data_structures/queues")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (cond
       [(and (inexact? x) (integer? x)) (format "~a.0" (inexact->exact x))]
       [else (number->string x)])]
    [(vector? x) (format "~a" (map (lambda (v) (cond [(hash? v) (read (open-input-string (to-string v)))] [(vector? v) (vector->list v)] [else v])) (vector->list x)))]
    [(hash? x)
     (format "~a"
             (for/hash ([k (in-hash-keys x)])
               (values k (let ([v (hash-ref x k)]) (if (vector? v) (vector->list v) v)))))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (cond
    [(string? lst) (substring lst start end)]
    [(vector? lst) (vector->list (vector-copy lst start end))]
    [else (take (drop lst start) (- end start))]))

(define (slice seq start end)
  (define len (cond [(string? seq) (string-length seq)] [(vector? seq) (vector-length seq)] [else (length seq)]))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (cond
    [(string? seq) (substring seq s e)]
    [(vector? seq) (vector-copy seq s e)]
    [else (sublist seq s e)]))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (appendv a b)
  (cond
    [(vector? a) (vector-append a (cond [(vector? b) b] [(list? b) (list->vector b)] [else (vector b)]))]
    [(list? a) (append a (cond [(list? b) b] [(vector? b) (vector->list b)] [else (list b)]))]
    [else (append a b)]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(vector? lst) (if (and (>= i 0) (< i (vector-length lst))) (vector-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (cond
    [(vector? lst) (when (< i (vector-length lst)) (vector-set! lst i val)) lst]
    [else
     (define len (length lst))
     (cond
       [(>= i len) (append lst (make-list (- i len) '()) (list val))]
       [(zero? i) (cons val (cdr lst))]
       [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))])]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (panic_ msg)
  (let/ec _return (begin
(displayln (to-string msg))
))
)
(define (fpq_new)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "queues" (vector (vector) (vector) (vector))) h))
))
)
(define (fpq_enqueue fpq priority data)
  (let/ec _return (begin
(if (or (let ([__l priority] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l priority] [__r (cond [(not (if fpq (hash-ref fpq "queues" #f) #f)) 0] [(string? (if fpq (hash-ref fpq "queues" #f) #f)) (string-length (if fpq (hash-ref fpq "queues" #f) #f))] [(vector? (if fpq (hash-ref fpq "queues" #f) #f)) (vector-length (if fpq (hash-ref fpq "queues" #f) #f))] [(hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-count (if fpq (hash-ref fpq "queues" #f) #f))] [else (length (if fpq (hash-ref fpq "queues" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ()
(panic_ "Valid priorities are 0, 1, and 2")
(_return fpq)
) (void))
(if (let ([__l (cond [(not (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (safe-index (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f)) 0] [(string? (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (safe-index (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f)) (string-length (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (safe-index (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f))] [(vector? (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (safe-index (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f)) (vector-length (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (safe-index (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f))] [(hash? (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (safe-index (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f)) (hash-count (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (safe-index (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f))] [else (length (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (safe-index (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f))])] [__r 100]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(panic_ "Maximum queue size is 100")
(_return fpq)
) (void))
(define qs (if fpq (hash-ref fpq "queues" #f) #f))
(vector-set! qs (int priority) (appendv (or (if qs (if (hash? qs) (hash-ref qs priority #f) (safe-index qs (int priority))) #f) (vector)) (vector data)))
(if (hash? fpq) (hash-set! fpq "queues" qs) (begin (set! fpq (make-hash)) (hash-set! fpq "queues" qs)))
(_return fpq)
))
)
(define (fpq_dequeue fpq)
  (let/ec _return (begin
(define qs (if fpq (hash-ref fpq "queues" #f) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not qs) 0] [(string? qs) (string-length qs)] [(vector? qs) (vector-length qs)] [(hash? qs) (hash-count qs)] [else (length qs)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define q (if qs (if (hash? qs) (hash-ref qs i #f) (safe-index qs (int i))) #f))
      (if (let ([__l (cond [(not q) 0] [(string? q) (string-length q)] [(vector? q) (vector-length q)] [(hash? q) (hash-count q)] [else (length q)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(define val (if q (if (hash? q) (hash-ref q 0 #f) (safe-index q (int 0))) #f))
(define new_q (vector))
(define j 1)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not q) 0] [(string? q) (string-length q)] [(vector? q) (vector-length q)] [(hash? q) (hash-count q)] [else (length q)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! new_q (appendv (or new_q (vector)) (vector (if q (if (hash? q) (hash-ref q j #f) (safe-index q (int j))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(vector-set! qs (int i) new_q)
(if (hash? fpq) (hash-set! fpq "queues" qs) (begin (set! fpq (make-hash)) (hash-set! fpq "queues" qs)))
(_return (let ([h (make-hash)]) (hash-set! h "queue" fpq) (hash-set! h "value" val) h))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(panic_ "All queues are empty")
(_return (let ([h (make-hash)]) (hash-set! h "queue" fpq) (hash-set! h "value" 0) h))
))
)
(define (fpq_to_string fpq)
  (let/ec _return (begin
(define lines (vector))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if fpq (hash-ref fpq "queues" #f) #f)) 0] [(string? (if fpq (hash-ref fpq "queues" #f) #f)) (string-length (if fpq (hash-ref fpq "queues" #f) #f))] [(vector? (if fpq (hash-ref fpq "queues" #f) #f)) (vector-length (if fpq (hash-ref fpq "queues" #f) #f))] [(hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-count (if fpq (hash-ref fpq "queues" #f) #f))] [else (length (if fpq (hash-ref fpq "queues" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define q_str "[")
      (define q (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) i #f) (safe-index (if fpq (hash-ref fpq "queues" #f) #f) (int i))) #f))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not q) 0] [(string? q) (string-length q)] [(vector? q) (vector-length q)] [(hash? q) (hash-count q)] [else (length q)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! q_str (string-append q_str ", "))
) (void))
      (set! q_str (string-append q_str (to-string (if q (if (hash? q) (hash-ref q j #f) (safe-index q (int j))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! q_str (string-append q_str "]"))
      (set! lines (appendv (or lines (vector)) (vector (string-append (string-append (string-append "Priority " (to-string i)) ": ") q_str))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define res "")
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not lines) 0] [(string? lines) (string-length lines)] [(vector? lines) (vector-length lines)] [(hash? lines) (hash-count lines)] [else (length lines)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! res (string-append res "\n"))
) (void))
      (set! res (string-append res (if lines (if (hash? lines) (hash-ref lines i #f) (safe-index lines (int i))) #f)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (epq_new)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "queue" (vector)) h))
))
)
(define (epq_enqueue epq data)
  (let/ec _return (begin
(if (let ([__l (cond [(not (if epq (hash-ref epq "queue" #f) #f)) 0] [(string? (if epq (hash-ref epq "queue" #f) #f)) (string-length (if epq (hash-ref epq "queue" #f) #f))] [(vector? (if epq (hash-ref epq "queue" #f) #f)) (vector-length (if epq (hash-ref epq "queue" #f) #f))] [(hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-count (if epq (hash-ref epq "queue" #f) #f))] [else (length (if epq (hash-ref epq "queue" #f) #f))])] [__r 100]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(panic_ "Maximum queue size is 100")
(_return epq)
) (void))
(if (hash? epq) (hash-set! epq "queue" (appendv (or (if epq (hash-ref epq "queue" #f) #f) (vector)) (vector data))) (begin (set! epq (make-hash)) (hash-set! epq "queue" (appendv (or (if epq (hash-ref epq "queue" #f) #f) (vector)) (vector data)))))
(_return epq)
))
)
(define (epq_dequeue epq)
  (let/ec _return (begin
(if (equal? (cond [(not (if epq (hash-ref epq "queue" #f) #f)) 0] [(string? (if epq (hash-ref epq "queue" #f) #f)) (string-length (if epq (hash-ref epq "queue" #f) #f))] [(vector? (if epq (hash-ref epq "queue" #f) #f)) (vector-length (if epq (hash-ref epq "queue" #f) #f))] [(hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-count (if epq (hash-ref epq "queue" #f) #f))] [else (length (if epq (hash-ref epq "queue" #f) #f))]) 0) (let ()
(panic_ "The queue is empty")
(_return (let ([h (make-hash)]) (hash-set! h "queue" epq) (hash-set! h "value" 0) h))
) (void))
(define min_val (if (if epq (hash-ref epq "queue" #f) #f) (if (hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-ref (if epq (hash-ref epq "queue" #f) #f) 0 #f) (safe-index (if epq (hash-ref epq "queue" #f) #f) (int 0))) #f))
(define idx 0)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if epq (hash-ref epq "queue" #f) #f)) 0] [(string? (if epq (hash-ref epq "queue" #f) #f)) (string-length (if epq (hash-ref epq "queue" #f) #f))] [(vector? (if epq (hash-ref epq "queue" #f) #f)) (vector-length (if epq (hash-ref epq "queue" #f) #f))] [(hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-count (if epq (hash-ref epq "queue" #f) #f))] [else (length (if epq (hash-ref epq "queue" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define v (if (if epq (hash-ref epq "queue" #f) #f) (if (hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-ref (if epq (hash-ref epq "queue" #f) #f) i #f) (safe-index (if epq (hash-ref epq "queue" #f) #f) (int i))) #f))
      (if (let ([__l v] [__r min_val]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! min_val v)
(set! idx i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define new_q (vector))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if epq (hash-ref epq "queue" #f) #f)) 0] [(string? (if epq (hash-ref epq "queue" #f) #f)) (string-length (if epq (hash-ref epq "queue" #f) #f))] [(vector? (if epq (hash-ref epq "queue" #f) #f)) (vector-length (if epq (hash-ref epq "queue" #f) #f))] [(hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-count (if epq (hash-ref epq "queue" #f) #f))] [else (length (if epq (hash-ref epq "queue" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? i idx)) (let ()
(set! new_q (appendv (or new_q (vector)) (vector (if (if epq (hash-ref epq "queue" #f) #f) (if (hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-ref (if epq (hash-ref epq "queue" #f) #f) i #f) (safe-index (if epq (hash-ref epq "queue" #f) #f) (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (hash? epq) (hash-set! epq "queue" new_q) (begin (set! epq (make-hash)) (hash-set! epq "queue" new_q)))
(_return (let ([h (make-hash)]) (hash-set! h "queue" epq) (hash-set! h "value" min_val) h))
))
)
(define (epq_to_string epq)
  (let/ec _return (begin
(_return (to-string (if epq (hash-ref epq "queue" #f) #f)))
))
)
(define (fixed_priority_queue)
  (let/ec _return (begin
(define fpq (fpq_new))
(set! fpq (fpq_enqueue fpq 0 10))
(set! fpq (fpq_enqueue fpq 1 70))
(set! fpq (fpq_enqueue fpq 0 100))
(set! fpq (fpq_enqueue fpq 2 1))
(set! fpq (fpq_enqueue fpq 2 5))
(set! fpq (fpq_enqueue fpq 1 7))
(set! fpq (fpq_enqueue fpq 2 4))
(set! fpq (fpq_enqueue fpq 1 64))
(set! fpq (fpq_enqueue fpq 0 128))
(displayln (to-string (fpq_to_string fpq)))
(define res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(displayln (to-string (fpq_to_string fpq)))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
))
)
(define (element_priority_queue)
  (let/ec _return (begin
(define epq (epq_new))
(set! epq (epq_enqueue epq 10))
(set! epq (epq_enqueue epq 70))
(set! epq (epq_enqueue epq 100))
(set! epq (epq_enqueue epq 1))
(set! epq (epq_enqueue epq 5))
(set! epq (epq_enqueue epq 7))
(set! epq (epq_enqueue epq 4))
(set! epq (epq_enqueue epq 64))
(set! epq (epq_enqueue epq 128))
(displayln (to-string (epq_to_string epq)))
(define res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(displayln (to-string (epq_to_string epq)))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (to-string (if res (hash-ref res "value" #f) #f)))
))
)
(define (main)
  (let/ec _return (begin
(fixed_priority_queue)
(element_priority_queue)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
