;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (panic_ msg)
  (let/ec _return (begin
(displayln msg)
))
)
(define (fpq_new)
  (let/ec _return (begin
(_return (hash "queues" (list (list) (list) (list))))
))
)
(define (fpq_enqueue fpq priority data)
  (let/ec _return (begin
(if (or (< priority 0) (>= priority (cond [(string? (if fpq (hash-ref fpq "queues" #f) #f)) (string-length (if fpq (hash-ref fpq "queues" #f) #f))] [(hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-count (if fpq (hash-ref fpq "queues" #f) #f))] [else (length (if fpq (hash-ref fpq "queues" #f) #f))]))) (let ()
(panic_ "Valid priorities are 0, 1, and 2")
(_return fpq)
) (void))
(if (>= (cond [(string? (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (list-ref (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f)) (string-length (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (list-ref (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f))] [(hash? (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (list-ref (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f)) (hash-count (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (list-ref (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f))] [else (length (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) priority #f) (list-ref (if fpq (hash-ref fpq "queues" #f) #f) (int priority))) #f))]) 100) (let ()
(panic_ "Maximum queue size is 100")
(_return fpq)
) (void))
(define qs (if fpq (hash-ref fpq "queues" #f) #f))
(set! qs (list-set qs (int priority) (append (if qs (if (hash? qs) (hash-ref qs priority #f) (list-ref qs (int priority))) #f) (list data))))
(set! fpq (hash-set (or fpq (hash)) "queues" qs))
(_return fpq)
))
)
(define (fpq_dequeue fpq)
  (let/ec _return (begin
(define qs (if fpq (hash-ref fpq "queues" #f) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? qs) (string-length qs)] [(hash? qs) (hash-count qs)] [else (length qs)])) (let/ec _cont
    (define q (if qs (if (hash? qs) (hash-ref qs i #f) (list-ref qs (int i))) #f))
    (if (> (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)]) 0) (let ()
(define val (if q (if (hash? q) (hash-ref q 0 #f) (list-ref q (int 0))) #f))
(define new_q (list))
(define j 1)
(let/ec _break (let loop ()
  (if (< j (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])) (let/ec _cont
    (set! new_q (append new_q (list (if q (if (hash? q) (hash-ref q j #f) (list-ref q (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! qs (list-set qs (int i) new_q))
(set! fpq (hash-set (or fpq (hash)) "queues" qs))
(_return (hash "queue" fpq "value" val))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(panic_ "All queues are empty")
(_return (hash "queue" fpq "value" 0))
))
)
(define (fpq_to_string fpq)
  (let/ec _return (begin
(define lines (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if fpq (hash-ref fpq "queues" #f) #f)) (string-length (if fpq (hash-ref fpq "queues" #f) #f))] [(hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-count (if fpq (hash-ref fpq "queues" #f) #f))] [else (length (if fpq (hash-ref fpq "queues" #f) #f))])) (let/ec _cont
    (define q_str "[")
    (define q (if (if fpq (hash-ref fpq "queues" #f) #f) (if (hash? (if fpq (hash-ref fpq "queues" #f) #f)) (hash-ref (if fpq (hash-ref fpq "queues" #f) #f) i #f) (list-ref (if fpq (hash-ref fpq "queues" #f) #f) (int i))) #f))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])) (let/ec _cont
    (if (> j 0) (let ()
(set! q_str (string-append q_str ", "))
) (void))
    (set! q_str (string-append q_str (format "~a" (if q (if (hash? q) (hash-ref q j #f) (list-ref q (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! q_str (string-append q_str "]"))
    (set! lines (append lines (list (string-append (string-append (string-append "Priority " (format "~a" i)) ": ") q_str))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define res "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lines) (string-length lines)] [(hash? lines) (hash-count lines)] [else (length lines)])) (let/ec _cont
    (if (> i 0) (let ()
(set! res (string-append res "\n"))
) (void))
    (set! res (string-append res (if lines (if (hash? lines) (hash-ref lines i #f) (list-ref lines (int i))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (epq_new)
  (let/ec _return (begin
(_return (hash "queue" (list)))
))
)
(define (epq_enqueue epq data)
  (let/ec _return (begin
(if (>= (cond [(string? (if epq (hash-ref epq "queue" #f) #f)) (string-length (if epq (hash-ref epq "queue" #f) #f))] [(hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-count (if epq (hash-ref epq "queue" #f) #f))] [else (length (if epq (hash-ref epq "queue" #f) #f))]) 100) (let ()
(panic_ "Maximum queue size is 100")
(_return epq)
) (void))
(set! epq (hash-set (or epq (hash)) "queue" (append (if epq (hash-ref epq "queue" #f) #f) (list data))))
(_return epq)
))
)
(define (epq_dequeue epq)
  (let/ec _return (begin
(if (equal? (cond [(string? (if epq (hash-ref epq "queue" #f) #f)) (string-length (if epq (hash-ref epq "queue" #f) #f))] [(hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-count (if epq (hash-ref epq "queue" #f) #f))] [else (length (if epq (hash-ref epq "queue" #f) #f))]) 0) (let ()
(panic_ "The queue is empty")
(_return (hash "queue" epq "value" 0))
) (void))
(define min_val (if (if epq (hash-ref epq "queue" #f) #f) (if (hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-ref (if epq (hash-ref epq "queue" #f) #f) 0 #f) (list-ref (if epq (hash-ref epq "queue" #f) #f) (int 0))) #f))
(define idx 0)
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if epq (hash-ref epq "queue" #f) #f)) (string-length (if epq (hash-ref epq "queue" #f) #f))] [(hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-count (if epq (hash-ref epq "queue" #f) #f))] [else (length (if epq (hash-ref epq "queue" #f) #f))])) (let/ec _cont
    (define v (if (if epq (hash-ref epq "queue" #f) #f) (if (hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-ref (if epq (hash-ref epq "queue" #f) #f) i #f) (list-ref (if epq (hash-ref epq "queue" #f) #f) (int i))) #f))
    (if (< v min_val) (let ()
(set! min_val v)
(set! idx i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define new_q (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if epq (hash-ref epq "queue" #f) #f)) (string-length (if epq (hash-ref epq "queue" #f) #f))] [(hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-count (if epq (hash-ref epq "queue" #f) #f))] [else (length (if epq (hash-ref epq "queue" #f) #f))])) (let/ec _cont
    (if (not (equal? i idx)) (let ()
(set! new_q (append new_q (list (if (if epq (hash-ref epq "queue" #f) #f) (if (hash? (if epq (hash-ref epq "queue" #f) #f)) (hash-ref (if epq (hash-ref epq "queue" #f) #f) i #f) (list-ref (if epq (hash-ref epq "queue" #f) #f) (int i))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! epq (hash-set (or epq (hash)) "queue" new_q))
(_return (hash "queue" epq "value" min_val))
))
)
(define (epq_to_string epq)
  (let/ec _return (begin
(_return (format "~a" (if epq (hash-ref epq "queue" #f) #f)))
))
)
(define (fixed_priority_queue)
  (let/ec _return (begin
(define fpq (fpq_new))
(set! fpq (fpq_enqueue fpq 0 10))
(set! fpq (fpq_enqueue fpq 1 70))
(set! fpq (fpq_enqueue fpq 0 100))
(set! fpq (fpq_enqueue fpq 2 1))
(set! fpq (fpq_enqueue fpq 2 5))
(set! fpq (fpq_enqueue fpq 1 7))
(set! fpq (fpq_enqueue fpq 2 4))
(set! fpq (fpq_enqueue fpq 1 64))
(set! fpq (fpq_enqueue fpq 0 128))
(displayln (fpq_to_string fpq))
(define res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(displayln (fpq_to_string fpq))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (fpq_dequeue fpq))
(set! fpq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
))
)
(define (element_priority_queue)
  (let/ec _return (begin
(define epq (epq_new))
(set! epq (epq_enqueue epq 10))
(set! epq (epq_enqueue epq 70))
(set! epq (epq_enqueue epq 100))
(set! epq (epq_enqueue epq 1))
(set! epq (epq_enqueue epq 5))
(set! epq (epq_enqueue epq 7))
(set! epq (epq_enqueue epq 4))
(set! epq (epq_enqueue epq 64))
(set! epq (epq_enqueue epq 128))
(displayln (epq_to_string epq))
(define res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(displayln (epq_to_string epq))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
(set! res (epq_dequeue epq))
(set! epq (if res (hash-ref res "queue" #f) #f))
(displayln (if res (hash-ref res "value" #f) #f))
))
)
(define (main)
  (let/ec _return (begin
(fixed_priority_queue)
(element_priority_queue)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
