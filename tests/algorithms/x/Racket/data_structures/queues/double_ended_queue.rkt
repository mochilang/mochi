;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (empty_deque)
  (let/ec _return (begin
(_return (hash "data" (list)))
))
)
(define (push_back dq value)
  (let/ec _return (begin
(_return (hash "data" (append (if dq (hash-ref dq "data" #f) #f) (list value))))
))
)
(define (push_front dq value)
  (let/ec _return (begin
(define res (list value))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))])) (let/ec _cont
    (set! res (append res (list (if (if dq (hash-ref dq "data" #f) #f) (if (hash? (if dq (hash-ref dq "data" #f) #f)) (hash-ref (if dq (hash-ref dq "data" #f) #f) i #f) (list-ref (if dq (hash-ref dq "data" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "data" res))
))
)
(define (extend_back dq values)
  (let/ec _return (begin
(define res (if dq (hash-ref dq "data" #f) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? values) (string-length values)] [(hash? values) (hash-count values)] [else (length values)])) (let/ec _cont
    (set! res (append res (list (if values (if (hash? values) (hash-ref values i #f) (list-ref values (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "data" res))
))
)
(define (extend_front dq values)
  (let/ec _return (begin
(define res (list))
(define i (- (cond [(string? values) (string-length values)] [(hash? values) (hash-count values)] [else (length values)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (set! res (append res (list (if values (if (hash? values) (hash-ref values i #f) (list-ref values (int i))) #f))))
    (set! i (- i 1))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))])) (let/ec _cont
    (set! res (append res (list (if (if dq (hash-ref dq "data" #f) #f) (if (hash? (if dq (hash-ref dq "data" #f) #f)) (hash-ref (if dq (hash-ref dq "data" #f) #f) j #f) (list-ref (if dq (hash-ref dq "data" #f) #f) (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "data" res))
))
)
(define (pop_back dq)
  (let/ec _return (begin
(if (equal? (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))]) 0) (let ()
(panic "pop from empty deque")
) (void))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))]) 1)) (let/ec _cont
    (set! res (append res (list (if (if dq (hash-ref dq "data" #f) #f) (if (hash? (if dq (hash-ref dq "data" #f) #f)) (hash-ref (if dq (hash-ref dq "data" #f) #f) i #f) (list-ref (if dq (hash-ref dq "data" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "deque" (hash "data" res) "value" (if (if dq (hash-ref dq "data" #f) #f) (if (hash? (if dq (hash-ref dq "data" #f) #f)) (hash-ref (if dq (hash-ref dq "data" #f) #f) (- (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))]) 1) #f) (list-ref (if dq (hash-ref dq "data" #f) #f) (int (- (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))]) 1)))) #f)))
))
)
(define (pop_front dq)
  (let/ec _return (begin
(if (equal? (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))]) 0) (let ()
(panic "popleft from empty deque")
) (void))
(define res (list))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))])) (let/ec _cont
    (set! res (append res (list (if (if dq (hash-ref dq "data" #f) #f) (if (hash? (if dq (hash-ref dq "data" #f) #f)) (hash-ref (if dq (hash-ref dq "data" #f) #f) i #f) (list-ref (if dq (hash-ref dq "data" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "deque" (hash "data" res) "value" (if (if dq (hash-ref dq "data" #f) #f) (if (hash? (if dq (hash-ref dq "data" #f) #f)) (hash-ref (if dq (hash-ref dq "data" #f) #f) 0 #f) (list-ref (if dq (hash-ref dq "data" #f) #f) (int 0))) #f)))
))
)
(define (is_empty dq)
  (let/ec _return (begin
(_return (equal? (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))]) 0))
))
)
(define (length_ dq)
  (let/ec _return (begin
(_return (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))]))
))
)
(define (to_string dq)
  (let/ec _return (begin
(if (equal? (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))]) 0) (let ()
(_return "[]")
) (void))
(define s (string-append "[" (format "~a" (if (if dq (hash-ref dq "data" #f) #f) (if (hash? (if dq (hash-ref dq "data" #f) #f)) (hash-ref (if dq (hash-ref dq "data" #f) #f) 0 #f) (list-ref (if dq (hash-ref dq "data" #f) #f) (int 0))) #f))))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if dq (hash-ref dq "data" #f) #f)) (string-length (if dq (hash-ref dq "data" #f) #f))] [(hash? (if dq (hash-ref dq "data" #f) #f)) (hash-count (if dq (hash-ref dq "data" #f) #f))] [else (length (if dq (hash-ref dq "data" #f) #f))])) (let/ec _cont
    (set! s (string-append (string-append s ", ") (format "~a" (if (if dq (hash-ref dq "data" #f) #f) (if (hash? (if dq (hash-ref dq "data" #f) #f)) (hash-ref (if dq (hash-ref dq "data" #f) #f) i #f) (list-ref (if dq (hash-ref dq "data" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append s "]"))
))
)
(define (main)
  (let/ec _return (begin
(define dq (empty_deque))
(set! dq (push_back dq 2))
(set! dq (push_front dq 1))
(set! dq (extend_back dq (list 3 4)))
(set! dq (extend_front dq (list 0)))
(displayln (to_string dq))
(define r (pop_back dq))
(set! dq (if r (hash-ref r "deque" #f) #f))
(displayln (if r (hash-ref r "value" #f) #f))
(set! r (pop_front dq))
(set! dq (if r (hash-ref r "deque" #f) #f))
(displayln (if r (hash-ref r "value" #f) #f))
(displayln (to_string dq))
(displayln (is_empty (empty_deque)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
