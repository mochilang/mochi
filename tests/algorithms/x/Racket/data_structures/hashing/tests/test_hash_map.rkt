;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (make_hash_map)
  (let/ec _return (begin
(_return (hash "entries" (list)))
))
)
(define (hm_len m)
  (let/ec _return (begin
(_return (cond [(string? (if m (hash-ref m "entries" #f) #f)) (string-length (if m (hash-ref m "entries" #f) #f))] [(hash? (if m (hash-ref m "entries" #f) #f)) (hash-count (if m (hash-ref m "entries" #f) #f))] [else (length (if m (hash-ref m "entries" #f) #f))]))
))
)
(define (hm_set m key value)
  (let/ec _return (begin
(define entries (if m (hash-ref m "entries" #f) #f))
(define updated #f)
(define new_entries (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? entries) (string-length entries)] [(hash? entries) (hash-count entries)] [else (length entries)])) (let/ec _cont
    (define e (if entries (if (hash? entries) (hash-ref entries i #f) (list-ref entries (int i))) #f))
    (if (string=? (if e (hash-ref e "key" #f) #f) key) (let ()
(set! new_entries (append new_entries (list (hash "key" key "value" value))))
(set! updated #t)
) (let ()
(set! new_entries (append new_entries (list e)))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (not updated) (let ()
(set! new_entries (append new_entries (list (hash "key" key "value" value))))
) (void))
(_return (hash "entries" new_entries))
))
)
(define (hm_get m key)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if m (hash-ref m "entries" #f) #f)) (string-length (if m (hash-ref m "entries" #f) #f))] [(hash? (if m (hash-ref m "entries" #f) #f)) (hash-count (if m (hash-ref m "entries" #f) #f))] [else (length (if m (hash-ref m "entries" #f) #f))])) (let/ec _cont
    (define e (if (if m (hash-ref m "entries" #f) #f) (if (hash? (if m (hash-ref m "entries" #f) #f)) (hash-ref (if m (hash-ref m "entries" #f) #f) i #f) (list-ref (if m (hash-ref m "entries" #f) #f) (int i))) #f))
    (if (string=? (if e (hash-ref e "key" #f) #f) key) (let ()
(_return (hash "found" #t "value" (if e (hash-ref e "value" #f) #f)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "found" #f "value" ""))
))
)
(define (hm_del m key)
  (let/ec _return (begin
(define entries (if m (hash-ref m "entries" #f) #f))
(define new_entries (list))
(define removed #f)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? entries) (string-length entries)] [(hash? entries) (hash-count entries)] [else (length entries)])) (let/ec _cont
    (define e (if entries (if (hash? entries) (hash-ref entries i #f) (list-ref entries (int i))) #f))
    (if (string=? (if e (hash-ref e "key" #f) #f) key) (let ()
(set! removed #t)
) (let ()
(set! new_entries (append new_entries (list e)))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if removed (let ()
(_return (hash "map" (hash "entries" new_entries) "ok" #t))
) (void))
(_return (hash "map" m "ok" #f))
))
)
(define (test_add_items)
  (let/ec _return (begin
(define h (make_hash_map))
(set! h (hm_set h "key_a" "val_a"))
(set! h (hm_set h "key_b" "val_b"))
(define a (hm_get h "key_a"))
(define b (hm_get h "key_b"))
(_return (and (and (and (and (equal? (hm_len h) 2) (if a (hash-ref a "found" #f) #f)) (if b (hash-ref b "found" #f) #f)) (string=? (if a (hash-ref a "value" #f) #f) "val_a")) (string=? (if b (hash-ref b "value" #f) #f) "val_b")))
))
)
(define (test_overwrite_items)
  (let/ec _return (begin
(define h (make_hash_map))
(set! h (hm_set h "key_a" "val_a"))
(set! h (hm_set h "key_a" "val_b"))
(define a (hm_get h "key_a"))
(_return (and (and (equal? (hm_len h) 1) (if a (hash-ref a "found" #f) #f)) (string=? (if a (hash-ref a "value" #f) #f) "val_b")))
))
)
(define (test_delete_items)
  (let/ec _return (begin
(define h (make_hash_map))
(set! h (hm_set h "key_a" "val_a"))
(set! h (hm_set h "key_b" "val_b"))
(define d1 (hm_del h "key_a"))
(set! h (if d1 (hash-ref d1 "map" #f) #f))
(define d2 (hm_del h "key_b"))
(set! h (if d2 (hash-ref d2 "map" #f) #f))
(set! h (hm_set h "key_a" "val_a"))
(define d3 (hm_del h "key_a"))
(set! h (if d3 (hash-ref d3 "map" #f) #f))
(_return (equal? (hm_len h) 0))
))
)
(define (test_access_absent_items)
  (let/ec _return (begin
(define h (make_hash_map))
(define g1 (hm_get h "key_a"))
(define d1 (hm_del h "key_a"))
(set! h (if d1 (hash-ref d1 "map" #f) #f))
(set! h (hm_set h "key_a" "val_a"))
(define d2 (hm_del h "key_a"))
(set! h (if d2 (hash-ref d2 "map" #f) #f))
(define d3 (hm_del h "key_a"))
(set! h (if d3 (hash-ref d3 "map" #f) #f))
(define g2 (hm_get h "key_a"))
(_return (and (and (and (and (and (not (if g1 (hash-ref g1 "found" #f) #f)) (not (if d1 (hash-ref d1 "ok" #f) #f))) (if d2 (hash-ref d2 "ok" #f) #f)) (not (if d3 (hash-ref d3 "ok" #f) #f))) (not (if g2 (hash-ref g2 "found" #f) #f))) (equal? (hm_len h) 0)))
))
)
(define (test_add_with_resize_up)
  (let/ec _return (begin
(define h (make_hash_map))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 5) (let/ec _cont
    (define s (format "~a" i))
    (set! h (hm_set h s s))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (equal? (hm_len h) 5))
))
)
(define (test_add_with_resize_down)
  (let/ec _return (begin
(define h (make_hash_map))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 5) (let/ec _cont
    (define s (format "~a" i))
    (set! h (hm_set h s s))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j 5) (let/ec _cont
    (define s (format "~a" j))
    (define d (hm_del h s))
    (set! h (if d (hash-ref d "map" #f) #f))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! h (hm_set h "key_a" "val_b"))
(define a (hm_get h "key_a"))
(_return (and (and (equal? (hm_len h) 1) (if a (hash-ref a "found" #f) #f)) (string=? (if a (hash-ref a "value" #f) #f) "val_b")))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (test_add_items))
(displayln (test_overwrite_items))
(displayln (test_delete_items))
(displayln (test_access_absent_items))
(displayln (test_add_with_resize_up))
(displayln (test_add_with_resize_down))
(displayln #t)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
