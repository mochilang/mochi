;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (make_table size_table charge_factor)
  (let/ec _return (begin
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i size_table) (let/ec _cont
    (set! vals (append vals (list (list))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "size_table" size_table "charge_factor" charge_factor "values" vals "keys" (hash)))
))
)
(define (hash_function ht key)
  (let/ec _return (begin
(define res (modulo key (if ht (hash-ref ht "size_table" #f) #f)))
(if (< res 0) (let ()
(set! res (let ([__l res] [__r (if ht (hash-ref ht "size_table" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return res)
))
)
(define (prepend lst value)
  (let/ec _return (begin
(define result (list value))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (set! result (append result (list (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (set_value ht key data)
  (let/ec _return (begin
(define current (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))
(define updated (prepend current data))
(define vals (if ht (hash-ref ht "values" #f) #f))
(set! vals (list-set vals (int key) updated))
(set! ht (hash-set (or ht (hash)) "values" vals))
(define ks (if ht (hash-ref ht "keys" #f) #f))
(set! ks (hash-set (or ks (hash)) key updated))
(set! ht (hash-set (or ht (hash)) "keys" ks))
))
)
(define (count_empty ht)
  (let/ec _return (begin
(define count 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if ht (hash-ref ht "values" #f) #f)) (string-length (if ht (hash-ref ht "values" #f) #f))] [(hash? (if ht (hash-ref ht "values" #f) #f)) (hash-count (if ht (hash-ref ht "values" #f) #f))] [else (length (if ht (hash-ref ht "values" #f) #f))])) (let/ec _cont
    (if (equal? (cond [(string? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f)) (string-length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f))] [(hash? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f)) (hash-count (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f))] [else (length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f))]) 0) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return count)
))
)
(define (balanced_factor ht)
  (let/ec _return (begin
(define total 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if ht (hash-ref ht "values" #f) #f)) (string-length (if ht (hash-ref ht "values" #f) #f))] [(hash? (if ht (hash-ref ht "values" #f) #f)) (hash-count (if ht (hash-ref ht "values" #f) #f))] [else (length (if ht (hash-ref ht "values" #f) #f))])) (let/ec _cont
    (set! total (let ([__l total] [__r (- (if ht (hash-ref ht "charge_factor" #f) #f) (cond [(string? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f)) (string-length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f))] [(hash? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f)) (hash-count (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f))] [else (length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) i #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int i))) #f))]))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (* (/ (exact->inexact total) (exact->inexact (if ht (hash-ref ht "size_table" #f) #f))) (exact->inexact (if ht (hash-ref ht "charge_factor" #f) #f))))
))
)
(define (collision_resolution ht key)
  (let/ec _return (begin
(if (not (and (equal? (cond [(string? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f)) (string-length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))] [(hash? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f)) (hash-count (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))] [else (length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))]) (if ht (hash-ref ht "charge_factor" #f) #f)) (equal? (count_empty ht) 0))) (let ()
(_return key)
) (void))
(define new_key (modulo (let ([__l key] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (if ht (hash-ref ht "size_table" #f) #f)))
(define steps 0)
(let/ec _break (let loop ()
  (if (and (equal? (cond [(string? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f)) (string-length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f))] [(hash? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f)) (hash-count (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f))] [else (length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f))]) (if ht (hash-ref ht "charge_factor" #f) #f)) (< steps (- (if ht (hash-ref ht "size_table" #f) #f) 1))) (let/ec _cont
    (set! new_key (modulo (let ([__l new_key] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (if ht (hash-ref ht "size_table" #f) #f)))
    (set! steps (let ([__l steps] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (< (cond [(string? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f)) (string-length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f))] [(hash? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f)) (hash-count (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f))] [else (length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) new_key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int new_key))) #f))]) (if ht (hash-ref ht "charge_factor" #f) #f)) (let ()
(_return new_key)
) (void))
(_return (- 1))
))
)
(define (insert ht data)
  (let/ec _return (begin
(define key (hash_function ht data))
(if (or (equal? (cond [(string? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f)) (string-length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))] [(hash? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f)) (hash-count (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))] [else (length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))]) 0) (< (cond [(string? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f)) (string-length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))] [(hash? (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f)) (hash-count (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))] [else (length (if (if ht (hash-ref ht "values" #f) #f) (if (hash? (if ht (hash-ref ht "values" #f) #f)) (hash-ref (if ht (hash-ref ht "values" #f) #f) key #f) (list-ref (if ht (hash-ref ht "values" #f) #f) (int key))) #f))]) (if ht (hash-ref ht "charge_factor" #f) #f))) (let ()
(set_value ht key data)
(_return void)
) (void))
(define dest (collision_resolution ht key))
(if (>= dest 0) (let ()
(set_value ht dest data)
) (let ()
(displayln "table full")
))
))
)
(define (main)
  (let/ec _return (begin
(define ht (make_table 3 2))
(insert ht 10)
(insert ht 20)
(insert ht 30)
(insert ht 40)
(insert ht 50)
(displayln (format "~a" (if ht (hash-ref ht "values" #f) #f)))
(displayln (format "~a" (balanced_factor ht)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
