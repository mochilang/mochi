;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define ascii " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
(define (ord ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? ascii) (string-length ascii)] [(hash? ascii) (hash-count ascii)] [else (length ascii)])) (let/ec _cont
    (if (string=? (slice ascii i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return (let ([__l 32] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return 0)
))
)
(define (new_bloom size)
  (let/ec _return (begin
(define bits (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (set! bits (append bits (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "size" size "bits" bits))
))
)
(define (hash1 value size)
  (let/ec _return (begin
(define h 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? value) (string-length value)] [(hash? value) (hash-count value)] [else (length value)])) (let/ec _cont
    (set! h (modulo (let ([__l (* h 31)] [__r (ord (slice value i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) size))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return h)
))
)
(define (hash2 value size)
  (let/ec _return (begin
(define h 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? value) (string-length value)] [(hash? value) (hash-count value)] [else (length value)])) (let/ec _cont
    (set! h (modulo (let ([__l (* h 131)] [__r (ord (slice value i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) size))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return h)
))
)
(define (hash_positions value size)
  (let/ec _return (begin
(define h1 (hash1 value size))
(define h2 (hash2 value size))
(define res (list))
(set! res (append res (list h1)))
(set! res (append res (list h2)))
(_return res)
))
)
(define (bloom_add b value)
  (let/ec _return (begin
(define pos (hash_positions value (if b (hash-ref b "size" #f) #f)))
(define bits (if b (hash-ref b "bits" #f) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pos) (string-length pos)] [(hash? pos) (hash-count pos)] [else (length pos)])) (let/ec _cont
    (define idx (- (- (if b (hash-ref b "size" #f) #f) 1) (if pos (if (hash? pos) (hash-ref pos i #f) (list-ref pos (int i))) #f)))
    (set! bits (list-set bits (int idx) 1))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "size" (if b (hash-ref b "size" #f) #f) "bits" bits))
))
)
(define (bloom_exists b value)
  (let/ec _return (begin
(define pos (hash_positions value (if b (hash-ref b "size" #f) #f)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pos) (string-length pos)] [(hash? pos) (hash-count pos)] [else (length pos)])) (let/ec _cont
    (define idx (- (- (if b (hash-ref b "size" #f) #f) 1) (if pos (if (hash? pos) (hash-ref pos i #f) (list-ref pos (int i))) #f)))
    (if (not (equal? (if (if b (hash-ref b "bits" #f) #f) (if (hash? (if b (hash-ref b "bits" #f) #f)) (hash-ref (if b (hash-ref b "bits" #f) #f) idx #f) (list-ref (if b (hash-ref b "bits" #f) #f) (int idx))) #f) 1)) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (bitstring b)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if b (hash-ref b "size" #f) #f)) (let/ec _cont
    (set! res (string-append res (format "~a" (if (if b (hash-ref b "bits" #f) #f) (if (hash? (if b (hash-ref b "bits" #f) #f)) (hash-ref (if b (hash-ref b "bits" #f) #f) i #f) (list-ref (if b (hash-ref b "bits" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (format_hash b value)
  (let/ec _return (begin
(define pos (hash_positions value (if b (hash-ref b "size" #f) #f)))
(define bits (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if b (hash-ref b "size" #f) #f)) (let/ec _cont
    (set! bits (append bits (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pos) (string-length pos)] [(hash? pos) (hash-count pos)] [else (length pos)])) (let/ec _cont
    (define idx (- (- (if b (hash-ref b "size" #f) #f) 1) (if pos (if (hash? pos) (hash-ref pos i #f) (list-ref pos (int i))) #f)))
    (set! bits (list-set bits (int idx) 1))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define res "")
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (if b (hash-ref b "size" #f) #f)) (let/ec _cont
    (set! res (string-append res (format "~a" (if bits (if (hash? bits) (hash-ref bits i #f) (list-ref bits (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (estimated_error_rate b)
  (let/ec _return (begin
(define ones 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if b (hash-ref b "size" #f) #f)) (let/ec _cont
    (if (equal? (if (if b (hash-ref b "bits" #f) #f) (if (hash? (if b (hash-ref b "bits" #f) #f)) (hash-ref (if b (hash-ref b "bits" #f) #f) i #f) (list-ref (if b (hash-ref b "bits" #f) #f) (int i))) #f) 1) (let ()
(set! ones (let ([__l ones] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define frac (/ (exact->inexact ones) (exact->inexact (if b (hash-ref b "size" #f) #f))))
(_return (* frac frac))
))
)
(define (any_in b items)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? items) (string-length items)] [(hash? items) (hash-count items)] [else (length items)])) (let/ec _cont
    (if (bloom_exists b (if items (if (hash? items) (hash-ref items i #f) (list-ref items (int i))) #f)) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (main)
  (let/ec _return (begin
(define bloom (new_bloom 8))
(displayln (bitstring bloom))
(displayln (bloom_exists bloom "Titanic"))
(set! bloom (bloom_add bloom "Titanic"))
(displayln (bitstring bloom))
(displayln (bloom_exists bloom "Titanic"))
(set! bloom (bloom_add bloom "Avatar"))
(displayln (bloom_exists bloom "Avatar"))
(displayln (format_hash bloom "Avatar"))
(displayln (bitstring bloom))
(define not_present (list "The Godfather" "Interstellar" "Parasite" "Pulp Fiction"))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? not_present) (string-length not_present)] [(hash? not_present) (hash-count not_present)] [else (length not_present)])) (let/ec _cont
    (define film (if not_present (if (hash? not_present) (hash-ref not_present i #f) (list-ref not_present (int i))) #f))
    (displayln (string-append (string-append film ":") (format_hash bloom film)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (any_in bloom not_present))
(displayln (bloom_exists bloom "Ratatouille"))
(displayln (format_hash bloom "Ratatouille"))
(displayln (format "~a" (estimated_error_rate bloom)))
(set! bloom (bloom_add bloom "The Godfather"))
(displayln (format "~a" (estimated_error_rate bloom)))
(displayln (bitstring bloom))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
