;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (make_buckets n)
  (let/ec _return (begin
(define buckets (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! buckets (append buckets (list (hash "state" 0 "key" 0 "val" 0))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return buckets)
))
)
(define (hashmap_new initial_size)
  (let/ec _return (begin
(_return (hash "buckets" (make_buckets initial_size) "len" 0 "cap_num" 3 "cap_den" 4 "initial_size" initial_size))
))
)
(define (bucket_index hm key)
  (let/ec _return (begin
(define ind (modulo key (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))])))
(if (< ind 0) (let ()
(set! ind (let ([__l ind] [__r (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return ind)
))
)
(define (next_index hm ind)
  (let/ec _return (begin
(_return (modulo (let ([__l ind] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))])))
))
)
(define (try_set hm ind key val)
  (let/ec _return (begin
(define buckets (if hm (hash-ref hm "buckets" #f) #f))
(define b (if buckets (if (hash? buckets) (hash-ref buckets ind #f) (list-ref buckets (int ind))) #f))
(if (or (equal? (if b (hash-ref b "state" #f) #f) 0) (equal? (if b (hash-ref b "state" #f) #f) 2)) (let ()
(set! buckets (list-set buckets (int ind) (hash "state" 1 "key" key "val" val)))
(set! hm (hash-set (or hm (hash)) "buckets" buckets))
(set! hm (hash-set (or hm (hash)) "len" (let ([__l (if hm (hash-ref hm "len" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return #t)
) (void))
(if (equal? (if b (hash-ref b "key" #f) #f) key) (let ()
(set! buckets (list-set buckets (int ind) (hash "state" 1 "key" key "val" val)))
(set! hm (hash-set (or hm (hash)) "buckets" buckets))
(_return #t)
) (void))
(_return #f)
))
)
(define (is_full hm)
  (let/ec _return (begin
(define limit (/ (* (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))]) (if hm (hash-ref hm "cap_num" #f) #f)) (if hm (hash-ref hm "cap_den" #f) #f)))
(_return (>= (if hm (hash-ref hm "len" #f) #f) limit))
))
)
(define (is_sparse hm)
  (let/ec _return (begin
(if (<= (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))]) (if hm (hash-ref hm "initial_size" #f) #f)) (let ()
(_return #f)
) (void))
(define limit (/ (* (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))]) (if hm (hash-ref hm "cap_num" #f) #f)) (* 2 (if hm (hash-ref hm "cap_den" #f) #f))))
(_return (< (if hm (hash-ref hm "len" #f) #f) limit))
))
)
(define (resize hm new_size)
  (let/ec _return (begin
(define old (if hm (hash-ref hm "buckets" #f) #f))
(set! hm (hash-set (or hm (hash)) "buckets" (make_buckets new_size)))
(set! hm (hash-set (or hm (hash)) "len" 0))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? old) (string-length old)] [(hash? old) (hash-count old)] [else (length old)])) (let/ec _cont
    (define it (if old (if (hash? old) (hash-ref old i #f) (list-ref old (int i))) #f))
    (if (equal? (if it (hash-ref it "state" #f) #f) 1) (let ()
(add_item hm (if it (hash-ref it "key" #f) #f) (if it (hash-ref it "val" #f) #f))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (size_up hm)
  (let/ec _return (begin
(resize hm (* (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))]) 2))
))
)
(define (size_down hm)
  (let/ec _return (begin
(resize hm (quotient (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))]) 2))
))
)
(define (add_item hm key val)
  (let/ec _return (begin
(define ind (bucket_index hm key))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))])) (let/ec _cont
    (if (try_set hm ind key val) (let ()
(_break)
) (void))
    (set! ind (next_index hm ind))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (hashmap_set hm key val)
  (let/ec _return (begin
(if (is_full hm) (let ()
(size_up hm)
) (void))
(add_item hm key val)
))
)
(define (hashmap_get hm key)
  (let/ec _return (begin
(define buckets (if hm (hash-ref hm "buckets" #f) #f))
(define ind (bucket_index hm key))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? buckets) (string-length buckets)] [(hash? buckets) (hash-count buckets)] [else (length buckets)])) (let/ec _cont
    (define it (if buckets (if (hash? buckets) (hash-ref buckets ind #f) (list-ref buckets (int ind))) #f))
    (if (equal? (if it (hash-ref it "state" #f) #f) 0) (let ()
(_break)
) (void))
    (if (and (equal? (if it (hash-ref it "state" #f) #f) 1) (equal? (if it (hash-ref it "key" #f) #f) key)) (let ()
(_return (if it (hash-ref it "val" #f) #f))
) (void))
    (set! ind (next_index hm ind))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return 0)
))
)
(define (hashmap_del hm key)
  (let/ec _return (begin
(define buckets (if hm (hash-ref hm "buckets" #f) #f))
(define ind (bucket_index hm key))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? buckets) (string-length buckets)] [(hash? buckets) (hash-count buckets)] [else (length buckets)])) (let/ec _cont
    (define it (if buckets (if (hash? buckets) (hash-ref buckets ind #f) (list-ref buckets (int ind))) #f))
    (if (equal? (if it (hash-ref it "state" #f) #f) 0) (let ()
(displayln (string-append "KeyError: " (format "~a" key)))
(_return void)
) (void))
    (if (and (equal? (if it (hash-ref it "state" #f) #f) 1) (equal? (if it (hash-ref it "key" #f) #f) key)) (let ()
(set! buckets (list-set buckets (int ind) (hash "state" 2 "key" 0 "val" 0)))
(set! hm (hash-set (or hm (hash)) "buckets" buckets))
(set! hm (hash-set (or hm (hash)) "len" (- (if hm (hash-ref hm "len" #f) #f) 1)))
(_break)
) (void))
    (set! ind (next_index hm ind))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (is_sparse hm) (let ()
(size_down hm)
) (void))
))
)
(define (hashmap_len hm)
  (let/ec _return (begin
(_return (if hm (hash-ref hm "len" #f) #f))
))
)
(define (hashmap_repr hm)
  (let/ec _return (begin
(define out "HashMap(")
(define first #t)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? (if hm (hash-ref hm "buckets" #f) #f)) (string-length (if hm (hash-ref hm "buckets" #f) #f))] [(hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-count (if hm (hash-ref hm "buckets" #f) #f))] [else (length (if hm (hash-ref hm "buckets" #f) #f))])) (let/ec _cont
    (define b (if (if hm (hash-ref hm "buckets" #f) #f) (if (hash? (if hm (hash-ref hm "buckets" #f) #f)) (hash-ref (if hm (hash-ref hm "buckets" #f) #f) i #f) (list-ref (if hm (hash-ref hm "buckets" #f) #f) (int i))) #f))
    (if (equal? (if b (hash-ref b "state" #f) #f) 1) (let ()
(if (not first) (let ()
(set! out (string-append out ", "))
) (let ()
(set! first #f)
))
(set! out (string-append (string-append (string-append out (format "~a" (if b (hash-ref b "key" #f) #f))) ": ") (format "~a" (if b (hash-ref b "val" #f) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! out (string-append out ")"))
(_return out)
))
)
(define hm (hashmap_new 5))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(hashmap_set hm 1 10)
(hashmap_set hm 2 20)
(hashmap_set hm 3 30)
(displayln (hashmap_repr hm))
(displayln (format "~a" (hashmap_get hm 2)))
(hashmap_del hm 1)
(displayln (hashmap_repr hm))
(displayln (format "~a" (hashmap_len hm)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
