;; Generated by Mochi 0.10.59 on 2025-08-07 09:52 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (new_heap key)
  (let/ec _return (begin
(_return (hash "arr" (list) "pos_map" (hash) "size" 0 "key" key))
))
)
(define (parent i)
  (let/ec _return (begin
(if (> i 0) (let ()
(_return (floor (/ (- i 1) 2)))
) (void))
(_return (- 1))
))
)
(define (left i size)
  (let/ec _return (begin
(define l (let ([__l (* 2 i)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (< l size) (let ()
(_return l)
) (void))
(_return (- 1))
))
)
(define (right i size)
  (let/ec _return (begin
(define r (let ([__l (* 2 i)] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (< r size) (let ()
(_return r)
) (void))
(_return (- 1))
))
)
(define (swap h i j)
  (let/ec _return (begin
(define arr (if h (hash-ref h "arr" #f) #f))
(define item_i (if (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) (if (hash? (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f)) (hash-ref (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) 0 #f) (list-ref (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) (int 0))) #f))
(define item_j (if (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (if (hash? (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f)) (hash-ref (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) 0 #f) (list-ref (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (int 0))) #f))
(define pm (if h (hash-ref h "pos_map" #f) #f))
(set! pm (hash-set (or pm (hash)) item_i (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! pm (hash-set (or pm (hash)) item_j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! h (hash-set (or h (hash)) "pos_map" pm))
(define tmp (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))
(set! arr (list-set arr (int i) (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f)))
(set! arr (list-set arr (int j) tmp))
(set! h (hash-set (or h (hash)) "arr" arr))
))
)
(define (cmp h i j)
  (let/ec _return (begin
(define arr (if h (hash-ref h "arr" #f) #f))
(_return (< (if (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) (if (hash? (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f)) (hash-ref (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) 1 #f) (list-ref (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) (int 1))) #f) (if (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (if (hash? (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f)) (hash-ref (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) 1 #f) (list-ref (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (int 1))) #f)))
))
)
(define (get_valid_parent h i)
  (let/ec _return (begin
(define vp i)
(define l (left i (if h (hash-ref h "size" #f) #f)))
(if (and (not (equal? l (- 0 1))) (not (cmp h l vp))) (let ()
(set! vp l)
) (void))
(define r (right i (if h (hash-ref h "size" #f) #f)))
(if (and (not (equal? r (- 0 1))) (not (cmp h r vp))) (let ()
(set! vp r)
) (void))
(_return vp)
))
)
(define (heapify_up h index)
  (let/ec _return (begin
(define idx index)
(define p (parent idx))
(let/ec _break (let loop ()
  (if (and (not (equal? p (- 0 1))) (not (cmp h idx p))) (let/ec _cont
    (swap h idx p)
    (set! idx p)
    (set! p (parent p))
    (loop)) (void))))
))
)
(define (heapify_down h index)
  (let/ec _return (begin
(define idx index)
(define vp (get_valid_parent h idx))
(let/ec _break (let loop ()
  (if (not (equal? vp idx)) (let/ec _cont
    (swap h idx vp)
    (set! idx vp)
    (set! vp (get_valid_parent h idx))
    (loop)) (void))))
))
)
(define (update_item h item item_value)
  (let/ec _return (begin
(define pm (if h (hash-ref h "pos_map" #f) #f))
(if (equal? (if pm (hash-ref pm item 0) #f) 0) (let ()
(_return void)
) (void))
(define index (- (if pm (hash-ref pm item 0) #f) 1))
(define arr (if h (hash-ref h "arr" #f) #f))
(set! arr (list-set arr (int index) (list item ((if h (hash-ref h "key" #f) #f) item_value))))
(set! h (hash-set (or h (hash)) "arr" arr))
(set! h (hash-set (or h (hash)) "pos_map" pm))
(heapify_up h index)
(heapify_down h index)
))
)
(define (delete_item h item)
  (let/ec _return (begin
(define pm (if h (hash-ref h "pos_map" #f) #f))
(if (equal? (if pm (hash-ref pm item 0) #f) 0) (let ()
(_return void)
) (void))
(define index (- (if pm (hash-ref pm item 0) #f) 1))
(set! pm (hash-set (or pm (hash)) item 0))
(define arr (if h (hash-ref h "arr" #f) #f))
(define last_index (- (if h (hash-ref h "size" #f) #f) 1))
(if (not (equal? index last_index)) (let ()
(set! arr (list-set arr (int index) (if arr (if (hash? arr) (hash-ref arr last_index #f) (list-ref arr (int last_index))) #f)))
(define moved (if (if arr (if (hash? arr) (hash-ref arr index #f) (list-ref arr (int index))) #f) (if (hash? (if arr (if (hash? arr) (hash-ref arr index #f) (list-ref arr (int index))) #f)) (hash-ref (if arr (if (hash? arr) (hash-ref arr index #f) (list-ref arr (int index))) #f) 0 #f) (list-ref (if arr (if (hash? arr) (hash-ref arr index #f) (list-ref arr (int index))) #f) (int 0))) #f))
(set! pm (hash-set (or pm (hash)) moved (let ([__l index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(set! h (hash-set (or h (hash)) "size" (- (if h (hash-ref h "size" #f) #f) 1)))
(set! h (hash-set (or h (hash)) "arr" arr))
(set! h (hash-set (or h (hash)) "pos_map" pm))
(if (> (if h (hash-ref h "size" #f) #f) index) (let ()
(heapify_up h index)
(heapify_down h index)
) (void))
))
)
(define (insert_item h item item_value)
  (let/ec _return (begin
(define arr (if h (hash-ref h "arr" #f) #f))
(define arr_len (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(if (equal? arr_len (if h (hash-ref h "size" #f) #f)) (let ()
(set! arr (append arr (list (list item ((if h (hash-ref h "key" #f) #f) item_value)))))
) (let ()
(set! arr (list-set arr (int (if h (hash-ref h "size" #f) #f)) (list item ((if h (hash-ref h "key" #f) #f) item_value))))
))
(define pm (if h (hash-ref h "pos_map" #f) #f))
(set! pm (hash-set (or pm (hash)) item (let ([__l (if h (hash-ref h "size" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! h (hash-set (or h (hash)) "size" (let ([__l (if h (hash-ref h "size" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! h (hash-set (or h (hash)) "arr" arr))
(set! h (hash-set (or h (hash)) "pos_map" pm))
(heapify_up h (- (if h (hash-ref h "size" #f) #f) 1))
))
)
(define (get_top h)
  (let/ec _return (begin
(define arr (if h (hash-ref h "arr" #f) #f))
(if (> (if h (hash-ref h "size" #f) #f) 0) (let ()
(_return (if arr (if (hash? arr) (hash-ref arr 0 #f) (list-ref arr (int 0))) #f))
) (void))
(_return (list))
))
)
(define (extract_top h)
  (let/ec _return (begin
(define top (get_top h))
(if (> (cond [(string? top) (string-length top)] [(hash? top) (hash-count top)] [else (length top)]) 0) (let ()
(delete_item h (if top (if (hash? top) (hash-ref top 0 #f) (list-ref top (int 0))) #f))
) (void))
(_return top)
))
)
(define (identity x)
  (let/ec _return (begin
(_return x)
))
)
(define (negate x)
  (let/ec _return (begin
(_return (- 0 x))
))
)
(define h (new_heap identity))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(insert_item h 5 34)
(insert_item h 6 31)
(insert_item h 7 37)
(displayln (format "~a" (get_top h)))
(displayln (format "~a" (extract_top h)))
(displayln (format "~a" (extract_top h)))
(displayln (format "~a" (extract_top h)))
(set! h (new_heap negate))
(insert_item h 5 34)
(insert_item h 6 31)
(insert_item h 7 37)
(displayln (format "~a" (get_top h)))
(displayln (format "~a" (extract_top h)))
(displayln (format "~a" (extract_top h)))
(displayln (format "~a" (extract_top h)))
(insert_item h 8 45)
(insert_item h 9 40)
(insert_item h 10 50)
(displayln (format "~a" (get_top h)))
(update_item h 10 30)
(displayln (format "~a" (get_top h)))
(delete_item h 10)
(displayln (format "~a" (get_top h)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
