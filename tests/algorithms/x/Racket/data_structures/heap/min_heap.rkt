;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (get_parent_idx idx)
  (let/ec _return (begin
(_return (floor (/ (- idx 1) 2)))
))
)
(define (get_left_child_idx idx)
  (let/ec _return (begin
(_return (let ([__l (* idx 2)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (get_right_child_idx idx)
  (let/ec _return (begin
(_return (let ([__l (* idx 2)] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (remove_key m k)
  (let/ec _return (begin
(define out (hash))
(let/ec _break (for ([key (in-hash-keys m)])
  (let/ec _cont
(if (not (string=? key k)) (let ()
(set! out (hash-set (or out (hash)) key (if m (hash-ref m key 0) #f)))
) (void))
  )))
(_return out)
))
)
(define (slice_without_last xs)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)) (let/ec _cont
    (set! res (append res (list (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (sift_down mh idx)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define i idx)
(let/ec _break (let loop ()
  (if #t (let/ec _cont
    (define left (get_left_child_idx i))
    (define right (get_right_child_idx i))
    (define smallest i)
    (if (and (< left (cond [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])) (< (if (if heap (if (hash? heap) (hash-ref heap left #f) (list-ref heap (int left))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap left #f) (list-ref heap (int left))) #f) "val" #f) #f) (if (if heap (if (hash? heap) (hash-ref heap smallest #f) (list-ref heap (int smallest))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap smallest #f) (list-ref heap (int smallest))) #f) "val" #f) #f))) (let ()
(set! smallest left)
) (void))
    (if (and (< right (cond [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])) (< (if (if heap (if (hash? heap) (hash-ref heap right #f) (list-ref heap (int right))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap right #f) (list-ref heap (int right))) #f) "val" #f) #f) (if (if heap (if (hash? heap) (hash-ref heap smallest #f) (list-ref heap (int smallest))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap smallest #f) (list-ref heap (int smallest))) #f) "val" #f) #f))) (let ()
(set! smallest right)
) (void))
    (if (not (equal? smallest i)) (let ()
(define tmp (if heap (if (hash? heap) (hash-ref heap i #f) (list-ref heap (int i))) #f))
(set! heap (list-set heap (int i) (if heap (if (hash? heap) (hash-ref heap smallest #f) (list-ref heap (int smallest))) #f)))
(set! heap (list-set heap (int smallest) tmp))
(set! idx_map (hash-set (or idx_map (hash)) (if (if heap (if (hash? heap) (hash-ref heap i #f) (list-ref heap (int i))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap i #f) (list-ref heap (int i))) #f) "name" #f) #f) i))
(set! idx_map (hash-set (or idx_map (hash)) (if (if heap (if (hash? heap) (hash-ref heap smallest #f) (list-ref heap (int smallest))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap smallest #f) (list-ref heap (int smallest))) #f) "name" #f) #f) smallest))
(set! i smallest)
) (let ()
(_break)
))
    (loop)) (void))))
(set! mh (hash-set (or mh (hash)) "heap" heap))
(set! mh (hash-set (or mh (hash)) "idx_of_element" idx_map))
))
)
(define (sift_up mh idx)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define i idx)
(define p (get_parent_idx i))
(let/ec _break (let loop ()
  (if (and (>= p 0) (> (if (if heap (if (hash? heap) (hash-ref heap p #f) (list-ref heap (int p))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap p #f) (list-ref heap (int p))) #f) "val" #f) #f) (if (if heap (if (hash? heap) (hash-ref heap i #f) (list-ref heap (int i))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap i #f) (list-ref heap (int i))) #f) "val" #f) #f))) (let/ec _cont
    (define tmp (if heap (if (hash? heap) (hash-ref heap p #f) (list-ref heap (int p))) #f))
    (set! heap (list-set heap (int p) (if heap (if (hash? heap) (hash-ref heap i #f) (list-ref heap (int i))) #f)))
    (set! heap (list-set heap (int i) tmp))
    (set! idx_map (hash-set (or idx_map (hash)) (if (if heap (if (hash? heap) (hash-ref heap p #f) (list-ref heap (int p))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap p #f) (list-ref heap (int p))) #f) "name" #f) #f) p))
    (set! idx_map (hash-set (or idx_map (hash)) (if (if heap (if (hash? heap) (hash-ref heap i #f) (list-ref heap (int i))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap i #f) (list-ref heap (int i))) #f) "name" #f) #f) i))
    (set! i p)
    (set! p (get_parent_idx i))
    (loop)) (void))))
(set! mh (hash-set (or mh (hash)) "heap" heap))
(set! mh (hash-set (or mh (hash)) "idx_of_element" idx_map))
))
)
(define (new_min_heap array)
  (let/ec _return (begin
(define idx_map (hash))
(define val_map (hash))
(define heap array)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? array) (string-length array)] [(hash? array) (hash-count array)] [else (length array)])) (let/ec _cont
    (define n (if array (if (hash? array) (hash-ref array i #f) (list-ref array (int i))) #f))
    (set! idx_map (hash-set (or idx_map (hash)) (if n (hash-ref n "name" #f) #f) i))
    (set! val_map (hash-set (or val_map (hash)) (if n (hash-ref n "name" #f) #f) (if n (hash-ref n "val" #f) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define mh (hash "heap" heap "idx_of_element" idx_map "heap_dict" val_map))
(define start (get_parent_idx (- (cond [(string? array) (string-length array)] [(hash? array) (hash-count array)] [else (length array)]) 1)))
(let/ec _break (let loop ()
  (if (>= start 0) (let/ec _cont
    (sift_down mh start)
    (set! start (- start 1))
    (loop)) (void))))
(_return mh)
))
)
(define (peek mh)
  (let/ec _return (begin
(_return (if (if mh (hash-ref mh "heap" #f) #f) (if (hash? (if mh (hash-ref mh "heap" #f) #f)) (hash-ref (if mh (hash-ref mh "heap" #f) #f) 0 #f) (list-ref (if mh (hash-ref mh "heap" #f) #f) (int 0))) #f))
))
)
(define (remove_min mh)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define val_map (if mh (hash-ref mh "heap_dict" #f) #f))
(define last_idx (- (cond [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)]) 1))
(define top (if heap (if (hash? heap) (hash-ref heap 0 #f) (list-ref heap (int 0))) #f))
(define last (if heap (if (hash? heap) (hash-ref heap last_idx #f) (list-ref heap (int last_idx))) #f))
(set! heap (list-set heap (int 0) last))
(set! idx_map (hash-set (or idx_map (hash)) (if last (hash-ref last "name" #f) #f) 0))
(set! heap (slice_without_last heap))
(set! idx_map (remove_key idx_map (if top (hash-ref top "name" #f) #f)))
(set! val_map (remove_key val_map (if top (hash-ref top "name" #f) #f)))
(set! mh (hash-set (or mh (hash)) "heap" heap))
(set! mh (hash-set (or mh (hash)) "idx_of_element" idx_map))
(set! mh (hash-set (or mh (hash)) "heap_dict" val_map))
(if (> (cond [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)]) 0) (let ()
(sift_down mh 0)
) (void))
(_return top)
))
)
(define (insert mh node)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define val_map (if mh (hash-ref mh "heap_dict" #f) #f))
(set! heap (append heap (list node)))
(define idx (- (cond [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)]) 1))
(set! idx_map (hash-set (or idx_map (hash)) (if node (hash-ref node "name" #f) #f) idx))
(set! val_map (hash-set (or val_map (hash)) (if node (hash-ref node "name" #f) #f) (if node (hash-ref node "val" #f) #f)))
(set! mh (hash-set (or mh (hash)) "heap" heap))
(set! mh (hash-set (or mh (hash)) "idx_of_element" idx_map))
(set! mh (hash-set (or mh (hash)) "heap_dict" val_map))
(sift_up mh idx)
))
)
(define (is_empty mh)
  (let/ec _return (begin
(_return (equal? (cond [(string? (if mh (hash-ref mh "heap" #f) #f)) (string-length (if mh (hash-ref mh "heap" #f) #f))] [(hash? (if mh (hash-ref mh "heap" #f) #f)) (hash-count (if mh (hash-ref mh "heap" #f) #f))] [else (length (if mh (hash-ref mh "heap" #f) #f))]) 0))
))
)
(define (get_value mh key)
  (let/ec _return (begin
(_return (if (if mh (hash-ref mh "heap_dict" #f) #f) (if (hash? (if mh (hash-ref mh "heap_dict" #f) #f)) (hash-ref (if mh (hash-ref mh "heap_dict" #f) #f) key #f) (list-ref (if mh (hash-ref mh "heap_dict" #f) #f) (int key))) #f))
))
)
(define (decrease_key mh node new_value)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define val_map (if mh (hash-ref mh "heap_dict" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define idx (if idx_map (hash-ref idx_map (if node (hash-ref node "name" #f) #f) 0) #f))
(if (not (> (if (if heap (if (hash? heap) (hash-ref heap idx #f) (list-ref heap (int idx))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap idx #f) (list-ref heap (int idx))) #f) "val" #f) #f) new_value)) (let ()
(panic "newValue must be less than current value")
) (void))
(set! node (hash-set (or node (hash)) "val" new_value))
(set! heap (list-set heap idx (hash-set (list-ref heap idx) "val" new_value)))
(set! val_map (hash-set (or val_map (hash)) (if node (hash-ref node "name" #f) #f) new_value))
(set! mh (hash-set (or mh (hash)) "heap" heap))
(set! mh (hash-set (or mh (hash)) "heap_dict" val_map))
(sift_up mh idx)
))
)
(define (node_to_string n)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append "Node(" (if n (hash-ref n "name" #f) #f)) ", ") (format "~a" (if n (hash-ref n "val" #f) #f))) ")"))
))
)
(define r (hash "name" "R" "val" (- 1)))
(define b (hash "name" "B" "val" 6))
(define a (hash "name" "A" "val" 3))
(define x (hash "name" "X" "val" 1))
(define e (hash "name" "E" "val" 4))
(define my_min_heap (new_min_heap (list r b a x e)))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln "Min Heap - before decrease key")
(let/ec _break (for ([n (if my_min_heap (hash-ref my_min_heap "heap" #f) #f)])
  (let/ec _cont
(displayln (node_to_string n))
  )))
(displayln "Min Heap - After decrease key of node [B -> -17]")
(decrease_key my_min_heap b (- 17))
(let/ec _break (for ([n (if my_min_heap (hash-ref my_min_heap "heap" #f) #f)])
  (let/ec _cont
(displayln (node_to_string n))
  )))
(displayln (format "~a" (get_value my_min_heap "B")))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
