;; Generated by Mochi 0.10.72 on 2025-08-24 23:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port racket/vector net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/data_structures/heap")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (if (and (inexact? x) (integer? x))
         (number->string (inexact->exact x))
         (number->string x))]
    [(vector? x) (format "~a" (vector->list x))]
    [(hash? x)
     (format "~a"
             (for/hash ([k (in-hash-keys x)])
               (values k (let ([v (hash-ref x k)]) (if (vector? v) (vector->list v) v)))))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (cond
    [(string? lst) (substring lst start end)]
    [(vector? lst) (vector->list (vector-copy lst start end))]
    [else (take (drop lst start) (- end start))]))

(define (slice seq start end)
  (define len (cond [(string? seq) (string-length seq)] [(vector? seq) (vector-length seq)] [else (length seq)]))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (cond
    [(string? seq) (substring seq s e)]
    [(vector? seq) (vector-copy seq s e)]
    [else (sublist seq s e)]))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (appendv a b)
  (cond
    [(vector? a) (vector-append a b)]
    [(list? a) (append a (vector->list b))]
    [else (append a b)]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(vector? lst) (if (and (>= i 0) (< i (vector-length lst))) (vector-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (cond
    [(vector? lst) (when (< i (vector-length lst)) (vector-set! lst i val)) lst]
    [else
     (define len (length lst))
     (cond
       [(>= i len) (append lst (make-list (- i len) '()) (list val))]
       [(zero? i) (cons val (cdr lst))]
       [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))])]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (get_parent_idx idx)
  (let/ec _return (begin
(_return (floor (/ (- idx 1) 2)))
))
)
(define (get_left_child_idx idx)
  (let/ec _return (begin
(_return (let ([__l (* idx 2)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (get_right_child_idx idx)
  (let/ec _return (begin
(_return (let ([__l (* idx 2)] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (remove_key m k)
  (let/ec _return (begin
(define out (let ([h (make-hash)]) h))
(let ([__seq m]) (let/ec _break (for ([key (in-hash-keys __seq)])
  (let/ec _cont
(if (not (string=? key k)) (let ()
(if (hash? out) (hash-set! out key (if m (hash-ref m key 0) #f)) (begin (set! out (make-hash)) (hash-set! out key (if m (hash-ref m key 0) #f))))
) (void))
  ))))
(_return out)
))
)
(define (slice_without_last xs)
  (let/ec _return (begin
(define res (vector))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (- (cond [(not xs) 0] [(string? xs) (string-length xs)] [(vector? xs) (vector-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (appendv (or res (vector)) (vector (if xs (if (hash? xs) (hash-ref xs i #f) (safe-index xs (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (sift_down mh idx)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define i idx)
(let/ec _break (let loop ()
  (if #t (begin
    (let/ec _cont
      (define left (get_left_child_idx i))
      (define right (get_right_child_idx i))
      (define smallest i)
      (if (and (let ([__l left] [__r (cond [(not heap) 0] [(string? heap) (string-length heap)] [(vector? heap) (vector-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l (if (if heap (if (hash? heap) (hash-ref heap left #f) (safe-index heap (int left))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap left #f) (safe-index heap (int left))) #f) "val" #f) #f)] [__r (if (if heap (if (hash? heap) (hash-ref heap smallest #f) (safe-index heap (int smallest))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap smallest #f) (safe-index heap (int smallest))) #f) "val" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(set! smallest left)
) (void))
      (if (and (let ([__l right] [__r (cond [(not heap) 0] [(string? heap) (string-length heap)] [(vector? heap) (vector-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l (if (if heap (if (hash? heap) (hash-ref heap right #f) (safe-index heap (int right))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap right #f) (safe-index heap (int right))) #f) "val" #f) #f)] [__r (if (if heap (if (hash? heap) (hash-ref heap smallest #f) (safe-index heap (int smallest))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap smallest #f) (safe-index heap (int smallest))) #f) "val" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(set! smallest right)
) (void))
      (if (not (equal? smallest i)) (let ()
(define tmp (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f))
(vector-set! heap (int i) (if heap (if (hash? heap) (hash-ref heap smallest #f) (safe-index heap (int smallest))) #f))
(vector-set! heap (int smallest) tmp)
(if (hash? idx_map) (hash-set! idx_map (if (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) "name" #f) #f) i) (begin (set! idx_map (make-hash)) (hash-set! idx_map (if (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) "name" #f) #f) i)))
(if (hash? idx_map) (hash-set! idx_map (if (if heap (if (hash? heap) (hash-ref heap smallest #f) (safe-index heap (int smallest))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap smallest #f) (safe-index heap (int smallest))) #f) "name" #f) #f) smallest) (begin (set! idx_map (make-hash)) (hash-set! idx_map (if (if heap (if (hash? heap) (hash-ref heap smallest #f) (safe-index heap (int smallest))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap smallest #f) (safe-index heap (int smallest))) #f) "name" #f) #f) smallest)))
(set! i smallest)
) (let ()
(_break)
))
    )
    (loop)) (void))))
(if (hash? mh) (hash-set! mh "heap" heap) (begin (set! mh (make-hash)) (hash-set! mh "heap" heap)))
(if (hash? mh) (hash-set! mh "idx_of_element" idx_map) (begin (set! mh (make-hash)) (hash-set! mh "idx_of_element" idx_map)))
))
)
(define (sift_up mh idx)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define i idx)
(define p (get_parent_idx i))
(let/ec _break (let loop ()
  (if (and (let ([__l p] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l (if (if heap (if (hash? heap) (hash-ref heap p #f) (safe-index heap (int p))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap p #f) (safe-index heap (int p))) #f) "val" #f) #f)] [__r (if (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) "val" #f) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (begin
    (let/ec _cont
      (define tmp (if heap (if (hash? heap) (hash-ref heap p #f) (safe-index heap (int p))) #f))
      (vector-set! heap (int p) (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f))
      (vector-set! heap (int i) tmp)
      (if (hash? idx_map) (hash-set! idx_map (if (if heap (if (hash? heap) (hash-ref heap p #f) (safe-index heap (int p))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap p #f) (safe-index heap (int p))) #f) "name" #f) #f) p) (begin (set! idx_map (make-hash)) (hash-set! idx_map (if (if heap (if (hash? heap) (hash-ref heap p #f) (safe-index heap (int p))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap p #f) (safe-index heap (int p))) #f) "name" #f) #f) p)))
      (if (hash? idx_map) (hash-set! idx_map (if (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) "name" #f) #f) i) (begin (set! idx_map (make-hash)) (hash-set! idx_map (if (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) "name" #f) #f) i)))
      (set! i p)
      (set! p (get_parent_idx i))
    )
    (loop)) (void))))
(if (hash? mh) (hash-set! mh "heap" heap) (begin (set! mh (make-hash)) (hash-set! mh "heap" heap)))
(if (hash? mh) (hash-set! mh "idx_of_element" idx_map) (begin (set! mh (make-hash)) (hash-set! mh "idx_of_element" idx_map)))
))
)
(define (new_min_heap array)
  (let/ec _return (begin
(define idx_map (let ([h (make-hash)]) h))
(define val_map (let ([h (make-hash)]) h))
(define heap array)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not array) 0] [(string? array) (string-length array)] [(vector? array) (vector-length array)] [(hash? array) (hash-count array)] [else (length array)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define n (if array (if (hash? array) (hash-ref array i #f) (safe-index array (int i))) #f))
      (if (hash? idx_map) (hash-set! idx_map (if n (hash-ref n "name" #f) #f) i) (begin (set! idx_map (make-hash)) (hash-set! idx_map (if n (hash-ref n "name" #f) #f) i)))
      (if (hash? val_map) (hash-set! val_map (if n (hash-ref n "name" #f) #f) (if n (hash-ref n "val" #f) #f)) (begin (set! val_map (make-hash)) (hash-set! val_map (if n (hash-ref n "name" #f) #f) (if n (hash-ref n "val" #f) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define mh (let ([h (make-hash)]) (hash-set! h "heap" heap) (hash-set! h "idx_of_element" idx_map) (hash-set! h "heap_dict" val_map) h))
(define start (get_parent_idx (- (cond [(not array) 0] [(string? array) (string-length array)] [(vector? array) (vector-length array)] [(hash? array) (hash-count array)] [else (length array)]) 1)))
(let/ec _break (let loop ()
  (if (let ([__l start] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (sift_down mh start)
      (set! start (- start 1))
    )
    (loop)) (void))))
(_return mh)
))
)
(define (peek mh)
  (let/ec _return (begin
(_return (if (if mh (hash-ref mh "heap" #f) #f) (if (hash? (if mh (hash-ref mh "heap" #f) #f)) (hash-ref (if mh (hash-ref mh "heap" #f) #f) 0 #f) (safe-index (if mh (hash-ref mh "heap" #f) #f) (int 0))) #f))
))
)
(define (remove_min mh)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define val_map (if mh (hash-ref mh "heap_dict" #f) #f))
(define last_idx (- (cond [(not heap) 0] [(string? heap) (string-length heap)] [(vector? heap) (vector-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)]) 1))
(define top (if heap (if (hash? heap) (hash-ref heap 0 #f) (safe-index heap (int 0))) #f))
(define last (if heap (if (hash? heap) (hash-ref heap last_idx #f) (safe-index heap (int last_idx))) #f))
(vector-set! heap (int 0) last)
(if (hash? idx_map) (hash-set! idx_map (if last (hash-ref last "name" #f) #f) 0) (begin (set! idx_map (make-hash)) (hash-set! idx_map (if last (hash-ref last "name" #f) #f) 0)))
(set! heap (slice_without_last heap))
(set! idx_map (remove_key idx_map (if top (hash-ref top "name" #f) #f)))
(set! val_map (remove_key val_map (if top (hash-ref top "name" #f) #f)))
(if (hash? mh) (hash-set! mh "heap" heap) (begin (set! mh (make-hash)) (hash-set! mh "heap" heap)))
(if (hash? mh) (hash-set! mh "idx_of_element" idx_map) (begin (set! mh (make-hash)) (hash-set! mh "idx_of_element" idx_map)))
(if (hash? mh) (hash-set! mh "heap_dict" val_map) (begin (set! mh (make-hash)) (hash-set! mh "heap_dict" val_map)))
(if (let ([__l (cond [(not heap) 0] [(string? heap) (string-length heap)] [(vector? heap) (vector-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(sift_down mh 0)
) (void))
(_return top)
))
)
(define (insert mh node)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define val_map (if mh (hash-ref mh "heap_dict" #f) #f))
(set! heap (appendv (or heap (vector)) (vector node)))
(define idx (- (cond [(not heap) 0] [(string? heap) (string-length heap)] [(vector? heap) (vector-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)]) 1))
(if (hash? idx_map) (hash-set! idx_map (if node (hash-ref node "name" #f) #f) idx) (begin (set! idx_map (make-hash)) (hash-set! idx_map (if node (hash-ref node "name" #f) #f) idx)))
(if (hash? val_map) (hash-set! val_map (if node (hash-ref node "name" #f) #f) (if node (hash-ref node "val" #f) #f)) (begin (set! val_map (make-hash)) (hash-set! val_map (if node (hash-ref node "name" #f) #f) (if node (hash-ref node "val" #f) #f))))
(if (hash? mh) (hash-set! mh "heap" heap) (begin (set! mh (make-hash)) (hash-set! mh "heap" heap)))
(if (hash? mh) (hash-set! mh "idx_of_element" idx_map) (begin (set! mh (make-hash)) (hash-set! mh "idx_of_element" idx_map)))
(if (hash? mh) (hash-set! mh "heap_dict" val_map) (begin (set! mh (make-hash)) (hash-set! mh "heap_dict" val_map)))
(sift_up mh idx)
))
)
(define (is_empty mh)
  (let/ec _return (begin
(_return (equal? (cond [(not (if mh (hash-ref mh "heap" #f) #f)) 0] [(string? (if mh (hash-ref mh "heap" #f) #f)) (string-length (if mh (hash-ref mh "heap" #f) #f))] [(vector? (if mh (hash-ref mh "heap" #f) #f)) (vector-length (if mh (hash-ref mh "heap" #f) #f))] [(hash? (if mh (hash-ref mh "heap" #f) #f)) (hash-count (if mh (hash-ref mh "heap" #f) #f))] [else (length (if mh (hash-ref mh "heap" #f) #f))]) 0))
))
)
(define (get_value mh key)
  (let/ec _return (begin
(_return (if (if mh (hash-ref mh "heap_dict" #f) #f) (if (hash? (if mh (hash-ref mh "heap_dict" #f) #f)) (hash-ref (if mh (hash-ref mh "heap_dict" #f) #f) key #f) (safe-index (if mh (hash-ref mh "heap_dict" #f) #f) (int key))) #f))
))
)
(define (decrease_key mh node new_value)
  (let/ec _return (begin
(define heap (if mh (hash-ref mh "heap" #f) #f))
(define val_map (if mh (hash-ref mh "heap_dict" #f) #f))
(define idx_map (if mh (hash-ref mh "idx_of_element" #f) #f))
(define idx (if idx_map (hash-ref idx_map (if node (hash-ref node "name" #f) #f) 0) #f))
(if (not (let ([__l (if (if heap (if (hash? heap) (hash-ref heap idx #f) (safe-index heap (int idx))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap idx #f) (safe-index heap (int idx))) #f) "val" #f) #f)] [__r new_value]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(panic "newValue must be less than current value")
) (void))
(if (hash? node) (hash-set! node "val" new_value) (begin (set! node (make-hash)) (hash-set! node "val" new_value)))
(hash-set! (safe-index heap idx) "val" new_value)
(if (hash? val_map) (hash-set! val_map (if node (hash-ref node "name" #f) #f) new_value) (begin (set! val_map (make-hash)) (hash-set! val_map (if node (hash-ref node "name" #f) #f) new_value)))
(if (hash? mh) (hash-set! mh "heap" heap) (begin (set! mh (make-hash)) (hash-set! mh "heap" heap)))
(if (hash? mh) (hash-set! mh "heap_dict" val_map) (begin (set! mh (make-hash)) (hash-set! mh "heap_dict" val_map)))
(sift_up mh idx)
))
)
(define (node_to_string n)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append "Node(" (if n (hash-ref n "name" #f) #f)) ", ") (to-string (if n (hash-ref n "val" #f) #f))) ")"))
))
)
(define r (let ([h (make-hash)]) (hash-set! h "name" "R") (hash-set! h "val" (- 1)) h))
(define b (let ([h (make-hash)]) (hash-set! h "name" "B") (hash-set! h "val" 6) h))
(define a (let ([h (make-hash)]) (hash-set! h "name" "A") (hash-set! h "val" 3) h))
(define x (let ([h (make-hash)]) (hash-set! h "name" "X") (hash-set! h "val" 1) h))
(define e (let ([h (make-hash)]) (hash-set! h "name" "E") (hash-set! h "val" 4) h))
(define my_min_heap (new_min_heap (vector r b a x e)))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string "Min Heap - before decrease key"))
(let ([__seq (if my_min_heap (hash-ref my_min_heap "heap" #f) #f)]) (let/ec _break (for ([n (if (hash? __seq) (in-hash-keys __seq) __seq)])
  (let/ec _cont
(displayln (to-string (node_to_string n)))
  ))))
(displayln (to-string "Min Heap - After decrease key of node [B -> -17]"))
(decrease_key my_min_heap b (- 17))
(let ([__seq (if my_min_heap (hash-ref my_min_heap "heap" #f) #f)]) (let/ec _break (for ([n (if (hash? __seq) (in-hash-keys __seq) __seq)])
  (let/ec _cont
(displayln (to-string (node_to_string n)))
  ))))
(displayln (to-string (to-string (get_value my_min_heap "B"))))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
