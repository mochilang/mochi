;; Generated by Mochi 0.10.72 on 2025-08-24 23:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port racket/vector net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/data_structures/heap")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (if (and (inexact? x) (integer? x))
         (number->string (inexact->exact x))
         (number->string x))]
    [(vector? x) (format "~a" (vector->list x))]
    [(hash? x)
     (format "~a"
             (for/hash ([k (in-hash-keys x)])
               (values k (let ([v (hash-ref x k)]) (if (vector? v) (vector->list v) v)))))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (cond
    [(string? lst) (substring lst start end)]
    [(vector? lst) (vector->list (vector-copy lst start end))]
    [else (take (drop lst start) (- end start))]))

(define (slice seq start end)
  (define len (cond [(string? seq) (string-length seq)] [(vector? seq) (vector-length seq)] [else (length seq)]))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (cond
    [(string? seq) (substring seq s e)]
    [(vector? seq) (vector-copy seq s e)]
    [else (sublist seq s e)]))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (appendv a b)
  (cond
    [(vector? a) (vector-append a b)]
    [(list? a) (append a (vector->list b))]
    [else (append a b)]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(vector? lst) (if (and (>= i 0) (< i (vector-length lst))) (vector-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (cond
    [(vector? lst) (when (< i (vector-length lst)) (vector-set! lst i val)) lst]
    [else
     (define len (length lst))
     (cond
       [(>= i len) (append lst (make-list (- i len) '()) (list val))]
       [(zero? i) (cons val (cdr lst))]
       [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))])]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define NIL (- 0 1))
(define seed 1)
(define (set_seed s)
  (let/ec _return (begin
(set! seed s)
))
)
(define (randint a b)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return (let ([__l (modulo seed (let ([__l (- b a)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (rand_bool)
  (let/ec _return (begin
(_return (equal? (randint 0 1) 1))
))
)
(define nodes (vector))
(define root NIL)
(define (new_heap)
  (let/ec _return (begin
(set! nodes (vector))
(set! root NIL)
))
)
(define (merge r1 r2)
  (let/ec _return (begin
(if (equal? r1 NIL) (let ()
(_return r2)
) (void))
(if (equal? r2 NIL) (let ()
(_return r1)
) (void))
(if (let ([__l (if (if nodes (if (hash? nodes) (hash-ref nodes r1 #f) (safe-index nodes (int r1))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes r1 #f) (safe-index nodes (int r1))) #f) "value" 0) #f)] [__r (if (if nodes (if (hash? nodes) (hash-ref nodes r2 #f) (safe-index nodes (int r2))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes r2 #f) (safe-index nodes (int r2))) #f) "value" 0) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(define tmp r1)
(set! r1 r2)
(set! r2 tmp)
) (void))
(if (rand_bool) (let ()
(define tmp (if (if nodes (if (hash? nodes) (hash-ref nodes r1 #f) (safe-index nodes (int r1))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes r1 #f) (safe-index nodes (int r1))) #f) "left" 0) #f))
(hash-set! (safe-index nodes r1) "left" (if (if nodes (if (hash? nodes) (hash-ref nodes r1 #f) (safe-index nodes (int r1))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes r1 #f) (safe-index nodes (int r1))) #f) "right" 0) #f))
(hash-set! (safe-index nodes r1) "right" tmp)
) (void))
(hash-set! (safe-index nodes r1) "left" (merge (if (if nodes (if (hash? nodes) (hash-ref nodes r1 #f) (safe-index nodes (int r1))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes r1 #f) (safe-index nodes (int r1))) #f) "left" 0) #f) r2))
(_return r1)
))
)
(define (insert value)
  (let/ec _return (begin
(define node (let ([h (make-hash)]) (hash-set! h "value" value) (hash-set! h "left" NIL) (hash-set! h "right" NIL) h))
(set! nodes (appendv (or nodes (vector)) (vector node)))
(define idx (- (cond [(not nodes) 0] [(string? nodes) (string-length nodes)] [(vector? nodes) (vector-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]) 1))
(set! root (merge root idx))
))
)
(define (top)
  (let/ec _return (begin
(if (equal? root NIL) (let ()
(_return 0)
) (void))
(_return (if (if nodes (if (hash? nodes) (hash-ref nodes root #f) (safe-index nodes (int root))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes root #f) (safe-index nodes (int root))) #f) "value" 0) #f))
))
)
(define (pop)
  (let/ec _return (begin
(define result (top))
(define l (if (if nodes (if (hash? nodes) (hash-ref nodes root #f) (safe-index nodes (int root))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes root #f) (safe-index nodes (int root))) #f) "left" 0) #f))
(define r (if (if nodes (if (hash? nodes) (hash-ref nodes root #f) (safe-index nodes (int root))) #f) (hash-ref (if nodes (if (hash? nodes) (hash-ref nodes root #f) (safe-index nodes (int root))) #f) "right" 0) #f))
(set! root (merge l r))
(_return result)
))
)
(define (is_empty)
  (let/ec _return (begin
(_return (equal? root NIL))
))
)
(define (to_sorted_list)
  (let/ec _return (begin
(define res (vector))
(let/ec _break (let loop ()
  (if (not (is_empty)) (begin
    (let/ec _cont
      (set! res (appendv (or res (vector)) (vector (pop))))
    )
    (loop)) (void))))
(_return res)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(set_seed 1)
(new_heap)
(insert 2)
(insert 3)
(insert 1)
(insert 5)
(insert 1)
(insert 7)
(displayln (to-string (to_sorted_list)))
(new_heap)
(insert 1)
(insert (- 1))
(insert 0)
(displayln (to-string (to_sorted_list)))
(new_heap)
(insert 3)
(insert 1)
(insert 3)
(insert 7)
(displayln (to-string (pop)))
(displayln (to-string (pop)))
(displayln (to-string (pop)))
(displayln (to-string (pop)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
