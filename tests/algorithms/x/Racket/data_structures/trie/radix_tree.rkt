;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (new_node prefix is_leaf)
  (let/ec _return (begin
(_return (hash "prefix" prefix "is_leaf" is_leaf "children" (hash)))
))
)
(define (new_tree)
  (let/ec _return (begin
(define nodes (list (new_node "" #f)))
(_return (hash "nodes" nodes))
))
)
(define (match_prefix node word)
  (let/ec _return (begin
(define x 0)
(define p (if node (hash-ref node "prefix" #f) #f))
(define w word)
(define min_len (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]))
(if (< (cond [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)]) min_len) (let ()
(set! min_len (cond [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)]))
) (void))
(let/ec _break (let loop ()
  (if (< x min_len) (let/ec _cont
    (if (not (string=? (slice p x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (slice w x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) (let ()
(_break)
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define common (slice p 0 x))
(define rem_prefix (slice p x (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)])))
(define rem_word (slice w x (cond [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)])))
(_return (hash "common" common "rem_prefix" rem_prefix "rem_word" rem_word))
))
)
(define (insert_many tree words)
  (let/ec _return (begin
(let/ec _break (for ([w words])
  (let/ec _cont
(insert tree 0 w)
  )))
))
)
(define (insert tree idx word)
  (let/ec _return (begin
(define nodes (if tree (hash-ref tree "nodes" #f) #f))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (list-ref nodes (int idx))) #f))
(if (and (string=? (if node (hash-ref node "prefix" #f) #f) word) (not (if node (hash-ref node "is_leaf" #f) #f))) (let ()
(set! node (hash-set (or node (hash)) "is_leaf" #t))
(set! nodes (list-set nodes (int idx) node))
(set! tree (hash-set (or tree (hash)) "nodes" nodes))
(_return void)
) (void))
(define first (slice word 0 1))
(define children (if node (hash-ref node "children" #f) #f))
(if (not (has_key children first)) (let ()
(define new_idx (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]))
(set! nodes (append nodes (list (new_node word #t))))
(set! children (hash-set (or children (hash)) first new_idx))
(set! node (hash-set (or node (hash)) "children" children))
(set! nodes (list-set nodes (int idx) node))
(set! tree (hash-set (or tree (hash)) "nodes" nodes))
(_return void)
) (void))
(define child_idx (if children (hash-ref children first 0) #f))
(define child (if nodes (if (hash? nodes) (hash-ref nodes child_idx #f) (list-ref nodes (int child_idx))) #f))
(define res (match_prefix child word))
(if (string=? (if res (hash-ref res "rem_prefix" #f) #f) "") (let ()
(insert tree child_idx (if res (hash-ref res "rem_word" #f) #f))
(_return void)
) (void))
(set! child (hash-set (or child (hash)) "prefix" (if res (hash-ref res "rem_prefix" #f) #f)))
(set! nodes (list-set nodes (int child_idx) child))
(define new_children (hash))
(set! new_children (hash-set (or new_children (hash)) (slice (if res (hash-ref res "rem_prefix" #f) #f) 0 1) child_idx))
(define new_idx (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]))
(set! nodes (append nodes (list (new_node (if res (hash-ref res "common" #f) #f) #f))))
(set! nodes (list-set nodes new_idx (hash-set (list-ref nodes new_idx) "children" new_children)))
(if (string=? (if res (hash-ref res "rem_word" #f) #f) "") (let ()
(set! nodes (list-set nodes new_idx (hash-set (list-ref nodes new_idx) "is_leaf" #t)))
) (let ()
(insert tree new_idx (if res (hash-ref res "rem_word" #f) #f))
))
(set! children (hash-set (or children (hash)) first new_idx))
(set! node (hash-set (or node (hash)) "children" children))
(set! nodes (list-set nodes (int idx) node))
(set! tree (hash-set (or tree (hash)) "nodes" nodes))
))
)
(define (find tree idx word)
  (let/ec _return (begin
(define nodes (if tree (hash-ref tree "nodes" #f) #f))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (list-ref nodes (int idx))) #f))
(define first (slice word 0 1))
(define children (if node (hash-ref node "children" #f) #f))
(if (not (has_key children first)) (let ()
(_return #f)
) (void))
(define child_idx (if children (hash-ref children first 0) #f))
(define child (if nodes (if (hash? nodes) (hash-ref nodes child_idx #f) (list-ref nodes (int child_idx))) #f))
(define res (match_prefix child word))
(if (not (string=? (if res (hash-ref res "rem_prefix" #f) #f) "")) (let ()
(_return #f)
) (void))
(if (string=? (if res (hash-ref res "rem_word" #f) #f) "") (let ()
(_return (if child (hash-ref child "is_leaf" #f) #f))
) (void))
(_return (find tree child_idx (if res (hash-ref res "rem_word" #f) #f)))
))
)
(define (remove_key m k)
  (let/ec _return (begin
(define out (hash))
(let/ec _break (for ([key (in-hash-keys m)])
  (let/ec _cont
(if (not (string=? key k)) (let ()
(set! out (hash-set (or out (hash)) key (if m (hash-ref m key 0) #f)))
) (void))
  )))
(_return out)
))
)
(define (has_key m k)
  (let/ec _return (begin
(let/ec _break (for ([key (in-hash-keys m)])
  (let/ec _cont
(if (string=? key k) (let ()
(_return #t)
) (void))
  )))
(_return #f)
))
)
(define (delete tree idx word)
  (let/ec _return (begin
(define nodes (if tree (hash-ref tree "nodes" #f) #f))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (list-ref nodes (int idx))) #f))
(define first (slice word 0 1))
(define children (if node (hash-ref node "children" #f) #f))
(if (not (has_key children first)) (let ()
(_return #f)
) (void))
(define child_idx (if children (hash-ref children first 0) #f))
(define child (if nodes (if (hash? nodes) (hash-ref nodes child_idx #f) (list-ref nodes (int child_idx))) #f))
(define res (match_prefix child word))
(if (not (string=? (if res (hash-ref res "rem_prefix" #f) #f) "")) (let ()
(_return #f)
) (void))
(if (not (string=? (if res (hash-ref res "rem_word" #f) #f) "")) (let ()
(define deleted (delete tree child_idx (if res (hash-ref res "rem_word" #f) #f)))
(if deleted (let ()
(set! nodes (if tree (hash-ref tree "nodes" #f) #f))
(set! node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (list-ref nodes (int idx))) #f))
) (void))
(_return deleted)
) (void))
(if (not (if child (hash-ref child "is_leaf" #f) #f)) (let ()
(_return #f)
) (void))
(if (equal? (cond [(string? (if child (hash-ref child "children" #f) #f)) (string-length (if child (hash-ref child "children" #f) #f))] [(hash? (if child (hash-ref child "children" #f) #f)) (hash-count (if child (hash-ref child "children" #f) #f))] [else (length (if child (hash-ref child "children" #f) #f))]) 0) (let ()
(set! children (remove_key children first))
(set! node (hash-set (or node (hash)) "children" children))
(set! nodes (list-set nodes (int idx) node))
(set! tree (hash-set (or tree (hash)) "nodes" nodes))
(if (and (equal? (cond [(string? children) (string-length children)] [(hash? children) (hash-count children)] [else (length children)]) 1) (not (if node (hash-ref node "is_leaf" #f) #f))) (let ()
(define only_key "")
(let/ec _break (for ([k (in-hash-keys children)])
  (let/ec _cont
(set! only_key k)
  )))
(define merge_idx (if children (hash-ref children only_key 0) #f))
(define merge_node (if nodes (if (hash? nodes) (hash-ref nodes merge_idx #f) (list-ref nodes (int merge_idx))) #f))
(set! node (hash-set (or node (hash)) "is_leaf" (if merge_node (hash-ref merge_node "is_leaf" #f) #f)))
(set! node (hash-set (or node (hash)) "prefix" (string-append (if node (hash-ref node "prefix" #f) #f) (if merge_node (hash-ref merge_node "prefix" #f) #f))))
(set! node (hash-set (or node (hash)) "children" (if merge_node (hash-ref merge_node "children" #f) #f)))
(set! nodes (list-set nodes (int idx) node))
(set! tree (hash-set (or tree (hash)) "nodes" nodes))
) (void))
) (let ()
(if (> (cond [(string? (if child (hash-ref child "children" #f) #f)) (string-length (if child (hash-ref child "children" #f) #f))] [(hash? (if child (hash-ref child "children" #f) #f)) (hash-count (if child (hash-ref child "children" #f) #f))] [else (length (if child (hash-ref child "children" #f) #f))]) 1) (let ()
(set! child (hash-set (or child (hash)) "is_leaf" #f))
(set! nodes (list-set nodes (int child_idx) child))
(set! tree (hash-set (or tree (hash)) "nodes" nodes))
) (let ()
(define only_key "")
(let/ec _break (for ([k (in-hash-keys (if child (hash-ref child "children" #f) #f))])
  (let/ec _cont
(set! only_key k)
  )))
(define merge_idx (if (if child (hash-ref child "children" #f) #f) (if (hash? (if child (hash-ref child "children" #f) #f)) (hash-ref (if child (hash-ref child "children" #f) #f) only_key #f) (list-ref (if child (hash-ref child "children" #f) #f) (int only_key))) #f))
(define merge_node (if nodes (if (hash? nodes) (hash-ref nodes merge_idx #f) (list-ref nodes (int merge_idx))) #f))
(set! child (hash-set (or child (hash)) "is_leaf" (if merge_node (hash-ref merge_node "is_leaf" #f) #f)))
(set! child (hash-set (or child (hash)) "prefix" (string-append (if child (hash-ref child "prefix" #f) #f) (if merge_node (hash-ref merge_node "prefix" #f) #f))))
(set! child (hash-set (or child (hash)) "children" (if merge_node (hash-ref merge_node "children" #f) #f)))
(set! nodes (list-set nodes (int child_idx) child))
(set! tree (hash-set (or tree (hash)) "nodes" nodes))
))
))
(_return #t)
))
)
(define (print_tree tree idx height)
  (let/ec _return (begin
(define nodes (if tree (hash-ref tree "nodes" #f) #f))
(define node (if nodes (if (hash? nodes) (hash-ref nodes idx #f) (list-ref nodes (int idx))) #f))
(if (not (string=? (if node (hash-ref node "prefix" #f) #f) "")) (let ()
(define line "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i height) (let/ec _cont
    (set! line (string-append line "-"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! line (string-append (string-append line " ") (if node (hash-ref node "prefix" #f) #f)))
(if (if node (hash-ref node "is_leaf" #f) #f) (let ()
(set! line (string-append line "  (leaf)"))
) (void))
(displayln line)
) (void))
(define children (if node (hash-ref node "children" #f) #f))
(let/ec _break (for ([k (in-hash-keys children)])
  (let/ec _cont
(define child_idx (if children (hash-ref children k 0) #f))
(print_tree tree child_idx (let ([__l height] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
  )))
))
)
(define (test_trie)
  (let/ec _return (begin
(define words (list "banana" "bananas" "bandana" "band" "apple" "all" "beast"))
(define tree (new_tree))
(insert_many tree words)
(define ok #t)
(let/ec _break (for ([w words])
  (let/ec _cont
(if (not (find tree 0 w)) (let ()
(set! ok #f)
) (void))
  )))
(if (find tree 0 "bandanas") (let ()
(set! ok #f)
) (void))
(if (find tree 0 "apps") (let ()
(set! ok #f)
) (void))
(delete tree 0 "all")
(if (find tree 0 "all") (let ()
(set! ok #f)
) (void))
(delete tree 0 "banana")
(if (find tree 0 "banana") (let ()
(set! ok #f)
) (void))
(if (not (find tree 0 "bananas")) (let ()
(set! ok #f)
) (void))
(_return ok)
))
)
(define (pytests)
  (let/ec _return (begin
(if (not (test_trie)) (let ()
(panic "test failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(define tree (new_tree))
(define words (list "banana" "bananas" "bandanas" "bandana" "band" "apple" "all" "beast"))
(insert_many tree words)
(displayln (string-append "Words: " (format "~a" words)))
(displayln "Tree:")
(print_tree tree 0 0)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
