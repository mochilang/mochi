;; Generated by Mochi 0.10.72 on 2025-08-24 23:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port racket/vector net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/data_structures/stacks")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (cond
       [(and (inexact? x) (integer? x)) (format "~a.0" (inexact->exact x))]
       [else (number->string x)])]
    [(vector? x) (format "~a" (map (lambda (v) (cond [(hash? v) (read (open-input-string (to-string v)))] [(vector? v) (vector->list v)] [else v])) (vector->list x)))]
    [(hash? x)
     (format "~a"
             (for/hash ([k (in-hash-keys x)])
               (values k (let ([v (hash-ref x k)]) (if (vector? v) (vector->list v) v)))))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (cond
    [(string? lst) (substring lst start end)]
    [(vector? lst) (vector->list (vector-copy lst start end))]
    [else (take (drop lst start) (- end start))]))

(define (slice seq start end)
  (define len (cond [(string? seq) (string-length seq)] [(vector? seq) (vector-length seq)] [else (length seq)]))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (cond
    [(string? seq) (substring seq s e)]
    [(vector? seq) (vector-copy seq s e)]
    [else (sublist seq s e)]))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (appendv a b)
  (cond
    [(vector? a) (vector-append a (cond [(vector? b) b] [(list? b) (list->vector b)] [else (vector b)]))]
    [(list? a) (append a (cond [(list? b) b] [(vector? b) (vector->list b)] [else (list b)]))]
    [else (append a b)]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(vector? lst) (if (and (>= i 0) (< i (vector-length lst))) (vector-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (cond
    [(vector? lst) (when (< i (vector-length lst)) (vector-set! lst i val)) lst]
    [else
     (define len (length lst))
     (cond
       [(>= i len) (append lst (make-list (- i len) '()) (list val))]
       [(zero? i) (cons val (cdr lst))]
       [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))])]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (split_custom s sep)
  (let/ec _return (begin
(define res (vector))
(define current "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(vector? s) (vector-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (string=? ch sep) (let ()
(set! res (appendv (or res (vector)) (vector current)))
(set! current "")
) (let ()
(set! current (string-append current ch))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! res (appendv (or res (vector)) (vector current)))
(_return res)
))
)
(define (tokenize s)
  (let/ec _return (begin
(define parts (split_custom s " "))
(define res (vector))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not parts) 0] [(string? parts) (string-length parts)] [(vector? parts) (vector-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p (if parts (if (hash? parts) (hash-ref parts i #f) (safe-index parts (int i))) #f))
      (if (not (string=? p "")) (let ()
(set! res (appendv (or res (vector)) (vector p)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (is_digit ch)
  (let/ec _return (begin
(_return (and (string>=? ch "0") (string<=? ch "9")))
))
)
(define (is_operand token)
  (let/ec _return (begin
(if (string=? token "") (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not token) 0] [(string? token) (string-length token)] [(vector? token) (vector-length token)] [(hash? token) (hash-count token)] [else (length token)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (slice token i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (not (is_digit ch)) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (to_int token)
  (let/ec _return (begin
(define res 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not token) 0] [(string? token) (string-length token)] [(vector? token) (vector-length token)] [(hash? token) (hash-count token)] [else (length token)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (let ([__l (* res 10)] [__r (int (slice token i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (apply_op op a b)
  (let/ec _return (begin
(if (string=? op "+") (let ()
(_return (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(if (string=? op "-") (let ()
(_return (- a b))
) (void))
(if (string=? op "*") (let ()
(_return (* a b))
) (void))
(if (string=? op "/") (let ()
(_return (/ a b))
) (void))
(_return 0.0)
))
)
(define (evaluate expression)
  (let/ec _return (begin
(define tokens (tokenize expression))
(define stack (vector))
(define i (- (cond [(not tokens) 0] [(string? tokens) (string-length tokens)] [(vector? tokens) (vector-length tokens)] [(hash? tokens) (hash-count tokens)] [else (length tokens)]) 1))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define token (if tokens (if (hash? tokens) (hash-ref tokens i #f) (safe-index tokens (int i))) #f))
      (if (not (string=? token "")) (let ()
(if (is_operand token) (let ()
(set! stack (appendv (or stack (vector)) (exact->inexact (to_int token))))
) (let ()
(define o1 (if stack (if (hash? stack) (hash-ref stack (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(vector? stack) (vector-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1) #f) (safe-index stack (int (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(vector? stack) (vector-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))) #f))
(define o2 (if stack (if (hash? stack) (hash-ref stack (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(vector? stack) (vector-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2) #f) (safe-index stack (int (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(vector? stack) (vector-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2)))) #f))
(set! stack (slice stack 0 (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(vector? stack) (vector-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 2)))
(define res (apply_op token o1 o2))
(set! stack (appendv (or stack (vector)) (vector res)))
))
) (void))
      (set! i (- i 1))
    )
    (loop)) (void))))
(_return (if stack (if (hash? stack) (hash-ref stack 0 #f) (safe-index stack (int 0))) #f))
))
)
(define (eval_rec tokens pos)
  (let/ec _return (begin
(define token (if tokens (if (hash? tokens) (hash-ref tokens pos #f) (safe-index tokens (int pos))) #f))
(define next (let ([__l pos] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (is_operand token) (let ()
(_return (vector (exact->inexact (to_int token)) (exact->inexact next)))
) (void))
(define left (eval_rec tokens next))
(define a (if left (if (hash? left) (hash-ref left 0 #f) (safe-index left (int 0))) #f))
(define p1 (int (if left (if (hash? left) (hash-ref left 1 #f) (safe-index left (int 1))) #f)))
(define right (eval_rec tokens p1))
(define b (if right (if (hash? right) (hash-ref right 0 #f) (safe-index right (int 0))) #f))
(define p2 (if right (if (hash? right) (hash-ref right 1 #f) (safe-index right (int 1))) #f))
(_return (vector (apply_op token a b) p2))
))
)
(define (evaluate_recursive expression)
  (let/ec _return (begin
(define tokens (tokenize expression))
(define res (eval_rec tokens 0))
(_return (if res (if (hash? res) (hash-ref res 0 #f) (safe-index res (int 0))) #f))
))
)
(define test_expression "+ 9 * 2 6")
(define test_expression2 "")
(define test_expression3 "")
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string (to-string (evaluate test_expression))))
(set! test_expression2 "/ * 10 2 + 4 1 ")
(displayln (to-string (to-string (evaluate test_expression2))))
(set! test_expression3 "+ * 2 3 / 8 4")
(displayln (to-string (to-string (evaluate_recursive test_expression3))))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
