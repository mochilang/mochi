;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (make_set ds x)
  (let/ec _return (begin
(define p (if ds (hash-ref ds "parent" #f) #f))
(define r (if ds (hash-ref ds "rank" #f) #f))
(set! p (list-set p (int x) x))
(set! r (list-set r (int x) 0))
(_return (hash "parent" p "rank" r))
))
)
(define (find_set ds x)
  (let/ec _return (begin
(if (equal? (if (if ds (hash-ref ds "parent" #f) #f) (if (hash? (if ds (hash-ref ds "parent" #f) #f)) (hash-ref (if ds (hash-ref ds "parent" #f) #f) x #f) (list-ref (if ds (hash-ref ds "parent" #f) #f) (int x))) #f) x) (let ()
(_return (hash "ds" ds "root" x))
) (void))
(define res (find_set ds (if (if ds (hash-ref ds "parent" #f) #f) (if (hash? (if ds (hash-ref ds "parent" #f) #f)) (hash-ref (if ds (hash-ref ds "parent" #f) #f) x #f) (list-ref (if ds (hash-ref ds "parent" #f) #f) (int x))) #f)))
(define p (if (if res (hash-ref res "ds" #f) #f) (hash-ref (if res (hash-ref res "ds" #f) #f) "parent" #f) #f))
(set! p (list-set p (int x) (if res (hash-ref res "root" #f) #f)))
(_return (hash "ds" (hash "parent" p "rank" (if (if res (hash-ref res "ds" #f) #f) (hash-ref (if res (hash-ref res "ds" #f) #f) "rank" #f) #f)) "root" (if res (hash-ref res "root" #f) #f)))
))
)
(define (union_set ds x y)
  (let/ec _return (begin
(define fx (find_set ds x))
(define ds1 (if fx (hash-ref fx "ds" #f) #f))
(define x_root (if fx (hash-ref fx "root" #f) #f))
(define fy (find_set ds1 y))
(define ds2 (if fy (hash-ref fy "ds" #f) #f))
(define y_root (if fy (hash-ref fy "root" #f) #f))
(if (equal? x_root y_root) (let ()
(_return ds2)
) (void))
(define p (if ds2 (hash-ref ds2 "parent" #f) #f))
(define r (if ds2 (hash-ref ds2 "rank" #f) #f))
(if (> (if r (if (hash? r) (hash-ref r x_root #f) (list-ref r (int x_root))) #f) (if r (if (hash? r) (hash-ref r y_root #f) (list-ref r (int y_root))) #f)) (let ()
(set! p (list-set p (int y_root) x_root))
) (let ()
(set! p (list-set p (int x_root) y_root))
(if (equal? (if r (if (hash? r) (hash-ref r x_root #f) (list-ref r (int x_root))) #f) (if r (if (hash? r) (hash-ref r y_root #f) (list-ref r (int y_root))) #f)) (let ()
(set! r (list-set r (int y_root) (let ([__l (if r (if (hash? r) (hash-ref r y_root #f) (list-ref r (int y_root))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
))
(_return (hash "parent" p "rank" r))
))
)
(define (same_python_set a b)
  (let/ec _return (begin
(if (and (< a 3) (< b 3)) (let ()
(_return #t)
) (void))
(if (and (and (and (>= a 3) (< a 6)) (>= b 3)) (< b 6)) (let ()
(_return #t)
) (void))
(_return #f)
))
)
(define ds (hash "parent" (list) "rank" (list)))
(define i 0)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (< i 6) (let/ec _cont
    (set! ds (hash-set (or ds (hash)) "parent" (append (if ds (hash-ref ds "parent" #f) #f) (list 0))))
    (set! ds (hash-set (or ds (hash)) "rank" (append (if ds (hash-ref ds "rank" #f) #f) (list 0))))
    (set! ds (make_set ds i))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! ds (union_set ds 0 1))
(set! ds (union_set ds 1 2))
(set! ds (union_set ds 3 4))
(set! ds (union_set ds 3 5))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i 6) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j 6) (let/ec _cont
    (define res_i (find_set ds i))
    (set! ds (if res_i (hash-ref res_i "ds" #f) #f))
    (define root_i (if res_i (hash-ref res_i "root" #f) #f))
    (define res_j (find_set ds j))
    (set! ds (if res_j (hash-ref res_j "ds" #f) #f))
    (define root_j (if res_j (hash-ref res_j "root" #f) #f))
    (define same (same_python_set i j))
    (define root_same (equal? root_i root_j))
    (if same (let ()
(if (not root_same) (let ()
(panic "nodes should be in same set")
) (void))
) (let ()
(if root_same (let ()
(panic "nodes should be in different sets")
) (void))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i 6) (let/ec _cont
    (define res (find_set ds i))
    (set! ds (if res (hash-ref res "ds" #f) #f))
    (displayln (format "~a" (if res (hash-ref res "root" #f) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
