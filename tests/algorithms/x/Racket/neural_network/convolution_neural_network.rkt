;; Generated by Mochi 0.10.64 on 2025-08-12 15:27 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define seed 1)
(define (random)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 13)] [__r 7]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 100))
(_return (/ (exact->inexact seed) 100.0))
))
)
(define (sigmoid x)
  (let/ec _return (begin
(_return (/ 1.0 (let ([__l 1.0] [__r (exp (- x))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (to_float x)
  (let/ec _return (begin
(_return (* x 1.0))
))
)
(define (exp x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (let ([__l n] [__r 20]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! term (/ (* term x) (to_float n)))
      (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (convolve data kernel step bias)
  (let/ec _return (begin
(define size_data (cond [(not data) 0] [(string? data) (string-length data)] [(hash? data) (hash-count data)] [else (length data)]))
(define size_kernel (cond [(not kernel) 0] [(string? kernel) (string-length kernel)] [(hash? kernel) (hash-count kernel)] [else (length kernel)]))
(define out (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (- size_data size_kernel)]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (- size_data size_kernel)]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define sum 0.0)
      (define a 0)
      (let/ec _break (let loop ()
  (if (let ([__l a] [__r size_kernel]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define b 0)
      (let/ec _break (let loop ()
  (if (let ([__l b] [__r size_kernel]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (* (if (if data (if (hash? data) (hash-ref data (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index data (int (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if data (if (hash? data) (hash-ref data (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index data (int (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if data (if (hash? data) (hash-ref data (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index data (int (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l j] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index (if data (if (hash? data) (hash-ref data (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index data (int (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l j] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (if kernel (if (hash? kernel) (hash-ref kernel a #f) (safe-index kernel (int a))) #f) (if (hash? (if kernel (if (hash? kernel) (hash-ref kernel a #f) (safe-index kernel (int a))) #f)) (hash-ref (if kernel (if (hash? kernel) (hash-ref kernel a #f) (safe-index kernel (int a))) #f) b #f) (safe-index (if kernel (if (hash? kernel) (hash-ref kernel a #f) (safe-index kernel (int a))) #f) (int b))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! row (append (or row (list)) (list (sigmoid (- sum bias)))))
      (set! j (let ([__l j] [__r step]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! out (append (or out (list)) (list row)))
      (set! i (let ([__l i] [__r step]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return out)
))
)
(define (average_pool map size)
  (let/ec _return (begin
(define out (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not map) 0] [(string? map) (string-length map)] [(hash? map) (hash-count map)] [else (length map)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if map (if (hash? map) (hash-ref map i #f) (safe-index map (int i))) #f)) 0] [(string? (if map (if (hash? map) (hash-ref map i #f) (safe-index map (int i))) #f)) (string-length (if map (if (hash? map) (hash-ref map i #f) (safe-index map (int i))) #f))] [(hash? (if map (if (hash? map) (hash-ref map i #f) (safe-index map (int i))) #f)) (hash-count (if map (if (hash? map) (hash-ref map i #f) (safe-index map (int i))) #f))] [else (length (if map (if (hash? map) (hash-ref map i #f) (safe-index map (int i))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define sum 0.0)
      (define a 0)
      (let/ec _break (let loop ()
  (if (let ([__l a] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define b 0)
      (let/ec _break (let loop ()
  (if (let ([__l b] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (if (if map (if (hash? map) (hash-ref map (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index map (int (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if map (if (hash? map) (hash-ref map (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index map (int (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if map (if (hash? map) (hash-ref map (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index map (int (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l j] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index (if map (if (hash? map) (hash-ref map (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index map (int (let ([__l i] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l j] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! row (append (or row (list)) (list (/ sum (exact->inexact (* size size))))))
      (set! j (let ([__l j] [__r size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! out (append (or out (list)) (list row)))
      (set! i (let ([__l i] [__r size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return out)
))
)
(define (flatten maps)
  (let/ec _return (begin
(define out (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not maps) 0] [(string? maps) (string-length maps)] [(hash? maps) (hash-count maps)] [else (length maps)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) 0] [(string? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (string-length (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f))] [(hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-count (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f))] [else (length (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f)) 0] [(string? (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f)) (string-length (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f))] [(hash? (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f)) (hash-count (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f))] [else (length (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! out (append (or out (list)) (list (if (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f) (if (hash? (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f)) (hash-ref (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f) k #f) (safe-index (if (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (if (hash? (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f)) (hash-ref (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) j #f) (safe-index (if maps (if (hash? maps) (hash-ref maps i #f) (safe-index maps (int i))) #f) (int j))) #f) (int k))) #f))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return out)
))
)
(define (vec_mul_mat v m)
  (let/ec _return (begin
(define cols (cond [(not (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f)) (string-length (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f))] [(hash? (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f)) (hash-count (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f))] [else (length (if m (if (hash? m) (hash-ref m 0 #f) (safe-index m (int 0))) #f))]))
(define res (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r cols]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define sum 0.0)
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (* (if v (if (hash? v) (hash-ref v i #f) (safe-index v (int i))) #f) (if (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) j #f) (safe-index (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! res (append (or res (list)) (list sum)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (matT_vec_mul m v)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define sum 0.0)
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f)) 0] [(string? (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f)) (string-length (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f))] [(hash? (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f)) (hash-count (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f))] [else (length (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (* (if (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) j #f) (safe-index (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) (int j))) #f) (if v (if (hash? v) (hash-ref v j #f) (safe-index v (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! res (append (or res (list)) (list sum)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (vec_add a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (let ([__l (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)] [__r (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (vec_sub a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (- (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (vec_mul a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (* (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (vec_map_sig v)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (sigmoid (if v (if (hash? v) (hash-ref v i #f) (safe-index v (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (new_cnn)
  (let/ec _return (begin
(define k1 (list (list 1.0 0.0) (list 0.0 1.0)))
(define k2 (list (list 0.0 1.0) (list 1.0 0.0)))
(define conv_kernels (list k1 k2))
(define conv_bias (list 0.0 0.0))
(define conv_step 2)
(define pool_size 2)
(define input_size 2)
(define hidden_size 2)
(define output_size 2)
(define w_hidden (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r input_size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r hidden_size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (- (random) 0.5))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! w_hidden (append (or w_hidden (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define w_out (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r hidden_size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r output_size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (- (random) 0.5))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! w_out (append (or w_out (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define b_hidden (list 0.0 0.0))
(define b_out (list 0.0 0.0))
(_return (let ([h (make-hash)]) (hash-set! h "conv_kernels" conv_kernels) (hash-set! h "conv_bias" conv_bias) (hash-set! h "conv_step" conv_step) (hash-set! h "pool_size" pool_size) (hash-set! h "w_hidden" w_hidden) (hash-set! h "w_out" w_out) (hash-set! h "b_hidden" b_hidden) (hash-set! h "b_out" b_out) (hash-set! h "rate_weight" 0.2) (hash-set! h "rate_bias" 0.2) h))
))
)
(define (forward cnn data)
  (let/ec _return (begin
(define maps (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if cnn (hash-ref cnn "conv_kernels" #f) #f)) 0] [(string? (if cnn (hash-ref cnn "conv_kernels" #f) #f)) (string-length (if cnn (hash-ref cnn "conv_kernels" #f) #f))] [(hash? (if cnn (hash-ref cnn "conv_kernels" #f) #f)) (hash-count (if cnn (hash-ref cnn "conv_kernels" #f) #f))] [else (length (if cnn (hash-ref cnn "conv_kernels" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define conv_map (convolve data (if (if cnn (hash-ref cnn "conv_kernels" #f) #f) (if (hash? (if cnn (hash-ref cnn "conv_kernels" #f) #f)) (hash-ref (if cnn (hash-ref cnn "conv_kernels" #f) #f) i #f) (safe-index (if cnn (hash-ref cnn "conv_kernels" #f) #f) (int i))) #f) (if cnn (hash-ref cnn "conv_step" #f) #f) (if (if cnn (hash-ref cnn "conv_bias" #f) #f) (if (hash? (if cnn (hash-ref cnn "conv_bias" #f) #f)) (hash-ref (if cnn (hash-ref cnn "conv_bias" #f) #f) i #f) (safe-index (if cnn (hash-ref cnn "conv_bias" #f) #f) (int i))) #f)))
      (define pooled (average_pool conv_map (if cnn (hash-ref cnn "pool_size" #f) #f)))
      (set! maps (append (or maps (list)) (list pooled)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define flat (flatten maps))
(define hidden_net (vec_add (vec_mul_mat flat (if cnn (hash-ref cnn "w_hidden" #f) #f)) (if cnn (hash-ref cnn "b_hidden" #f) #f)))
(define hidden_out (vec_map_sig hidden_net))
(define out_net (vec_add (vec_mul_mat hidden_out (if cnn (hash-ref cnn "w_out" #f) #f)) (if cnn (hash-ref cnn "b_out" #f) #f)))
(define out (vec_map_sig out_net))
(_return out)
))
)
(define (train cnn samples epochs)
  (let/ec _return (begin
(define w_out (if cnn (hash-ref cnn "w_out" #f) #f))
(define b_out (if cnn (hash-ref cnn "b_out" #f) #f))
(define w_hidden (if cnn (hash-ref cnn "w_hidden" #f) #f))
(define b_hidden (if cnn (hash-ref cnn "b_hidden" #f) #f))
(define e 0)
(let/ec _break (let loop ()
  (if (let ([__l e] [__r epochs]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define s 0)
      (let/ec _break (let loop ()
  (if (let ([__l s] [__r (cond [(not samples) 0] [(string? samples) (string-length samples)] [(hash? samples) (hash-count samples)] [else (length samples)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define data (if (if samples (if (hash? samples) (hash-ref samples s #f) (safe-index samples (int s))) #f) (hash-ref (if samples (if (hash? samples) (hash-ref samples s #f) (safe-index samples (int s))) #f) "image" #f) #f))
      (define target (if (if samples (if (hash? samples) (hash-ref samples s #f) (safe-index samples (int s))) #f) (hash-ref (if samples (if (hash? samples) (hash-ref samples s #f) (safe-index samples (int s))) #f) "target" #f) #f))
      (define maps (list))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if cnn (hash-ref cnn "conv_kernels" #f) #f)) 0] [(string? (if cnn (hash-ref cnn "conv_kernels" #f) #f)) (string-length (if cnn (hash-ref cnn "conv_kernels" #f) #f))] [(hash? (if cnn (hash-ref cnn "conv_kernels" #f) #f)) (hash-count (if cnn (hash-ref cnn "conv_kernels" #f) #f))] [else (length (if cnn (hash-ref cnn "conv_kernels" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define conv_map (convolve data (if (if cnn (hash-ref cnn "conv_kernels" #f) #f) (if (hash? (if cnn (hash-ref cnn "conv_kernels" #f) #f)) (hash-ref (if cnn (hash-ref cnn "conv_kernels" #f) #f) i #f) (safe-index (if cnn (hash-ref cnn "conv_kernels" #f) #f) (int i))) #f) (if cnn (hash-ref cnn "conv_step" #f) #f) (if (if cnn (hash-ref cnn "conv_bias" #f) #f) (if (hash? (if cnn (hash-ref cnn "conv_bias" #f) #f)) (hash-ref (if cnn (hash-ref cnn "conv_bias" #f) #f) i #f) (safe-index (if cnn (hash-ref cnn "conv_bias" #f) #f) (int i))) #f)))
      (define pooled (average_pool conv_map (if cnn (hash-ref cnn "pool_size" #f) #f)))
      (set! maps (append (or maps (list)) (list pooled)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define flat (flatten maps))
      (define hidden_net (vec_add (vec_mul_mat flat w_hidden) b_hidden))
      (define hidden_out (vec_map_sig hidden_net))
      (define out_net (vec_add (vec_mul_mat hidden_out w_out) b_out))
      (define out (vec_map_sig out_net))
      (define error_out (vec_sub target out))
      (define pd_out (vec_mul error_out (vec_mul out (vec_sub (list 1.0 1.0) out))))
      (define error_hidden (matT_vec_mul w_out pd_out))
      (define pd_hidden (vec_mul error_hidden (vec_mul hidden_out (vec_sub (list 1.0 1.0) hidden_out))))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not w_out) 0] [(string? w_out) (string-length w_out)] [(hash? w_out) (hash-count w_out)] [else (length w_out)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f)) 0] [(string? (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f)) (string-length (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f))] [(hash? (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f)) (hash-count (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f))] [else (length (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! w_out (list-set w_out j (list-set (list-ref w_out j) k (let ([__l (if (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f) (if (hash? (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f)) (hash-ref (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f) k #f) (safe-index (if w_out (if (hash? w_out) (hash-ref w_out j #f) (safe-index w_out (int j))) #f) (int k))) #f)] [__r (* (* (if cnn (hash-ref cnn "rate_weight" #f) #f) (if hidden_out (if (hash? hidden_out) (hash-ref hidden_out j #f) (safe-index hidden_out (int j))) #f)) (if pd_out (if (hash? pd_out) (hash-ref pd_out k #f) (safe-index pd_out (int k))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not b_out) 0] [(string? b_out) (string-length b_out)] [(hash? b_out) (hash-count b_out)] [else (length b_out)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! b_out (list-set b_out (int j) (- (if b_out (if (hash? b_out) (hash-ref b_out j #f) (safe-index b_out (int j))) #f) (* (if cnn (hash-ref cnn "rate_bias" #f) #f) (if pd_out (if (hash? pd_out) (hash-ref pd_out j #f) (safe-index pd_out (int j))) #f)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define i_h 0)
      (let/ec _break (let loop ()
  (if (let ([__l i_h] [__r (cond [(not w_hidden) 0] [(string? w_hidden) (string-length w_hidden)] [(hash? w_hidden) (hash-count w_hidden)] [else (length w_hidden)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j_h 0)
      (let/ec _break (let loop ()
  (if (let ([__l j_h] [__r (cond [(not (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f)) 0] [(string? (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f)) (string-length (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f))] [(hash? (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f)) (hash-count (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f))] [else (length (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! w_hidden (list-set w_hidden i_h (list-set (list-ref w_hidden i_h) j_h (let ([__l (if (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f) (if (hash? (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f)) (hash-ref (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f) j_h #f) (safe-index (if w_hidden (if (hash? w_hidden) (hash-ref w_hidden i_h #f) (safe-index w_hidden (int i_h))) #f) (int j_h))) #f)] [__r (* (* (if cnn (hash-ref cnn "rate_weight" #f) #f) (if flat (if (hash? flat) (hash-ref flat i_h #f) (safe-index flat (int i_h))) #f)) (if pd_hidden (if (hash? pd_hidden) (hash-ref pd_hidden j_h #f) (safe-index pd_hidden (int j_h))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! j_h (let ([__l j_h] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i_h (let ([__l i_h] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not b_hidden) 0] [(string? b_hidden) (string-length b_hidden)] [(hash? b_hidden) (hash-count b_hidden)] [else (length b_hidden)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! b_hidden (list-set b_hidden (int j) (- (if b_hidden (if (hash? b_hidden) (hash-ref b_hidden j #f) (safe-index b_hidden (int j))) #f) (* (if cnn (hash-ref cnn "rate_bias" #f) #f) (if pd_hidden (if (hash? pd_hidden) (hash-ref pd_hidden j #f) (safe-index pd_hidden (int j))) #f)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! s (let ([__l s] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! e (let ([__l e] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "conv_kernels" (if cnn (hash-ref cnn "conv_kernels" #f) #f)) (hash-set! h "conv_bias" (if cnn (hash-ref cnn "conv_bias" #f) #f)) (hash-set! h "conv_step" (if cnn (hash-ref cnn "conv_step" #f) #f)) (hash-set! h "pool_size" (if cnn (hash-ref cnn "pool_size" #f) #f)) (hash-set! h "w_hidden" w_hidden) (hash-set! h "w_out" w_out) (hash-set! h "b_hidden" b_hidden) (hash-set! h "b_out" b_out) (hash-set! h "rate_weight" (if cnn (hash-ref cnn "rate_weight" #f) #f)) (hash-set! h "rate_bias" (if cnn (hash-ref cnn "rate_bias" #f) #f)) h))
))
)
(define (main)
  (let/ec _return (begin
(define cnn (new_cnn))
(define image (list (list 1.0 0.0 1.0 0.0) (list 0.0 1.0 0.0 1.0) (list 1.0 0.0 1.0 0.0) (list 0.0 1.0 0.0 1.0)))
(define sample (let ([h (make-hash)]) (hash-set! h "image" image) (hash-set! h "target" (list 1.0 0.0)) h))
(displayln (string-join (map (lambda (x) (to-string x)) (list "Before training:" (forward cnn image))) " "))
(define trained (train cnn (list sample) 50))
(displayln (string-join (map (lambda (x) (to-string x)) (list "After training:" (forward trained image))) " "))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
