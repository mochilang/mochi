;; Generated by Mochi 0.10.64 on 2025-08-12 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (dense_to_one_hot labels num_classes)
  (let/ec _return (begin
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not labels) 0] [(string? labels) (string-length labels)] [(hash? labels) (hash-count labels)] [else (length labels)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r num_classes]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (equal? j (if labels (if (hash? labels) (hash-ref labels i #f) (safe-index labels (int i))) #f)) (let ()
(set! row (append (or row (list)) (list 1)))
) (let ()
(set! row (append (or row (list)) (list 0)))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! result (append (or result (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (new_dataset images labels)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "images" images) (hash-set! h "labels" labels) (hash-set! h "num_examples" (cond [(not images) 0] [(string? images) (string-length images)] [(hash? images) (hash-count images)] [else (length images)])) (hash-set! h "index_in_epoch" 0) (hash-set! h "epochs_completed" 0) h))
))
)
(define (next_batch ds batch_size)
  (let/ec _return (begin
(define start (if ds (hash-ref ds "index_in_epoch" #f) #f))
(if (let ([__l (let ([__l start] [__r batch_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if ds (hash-ref ds "num_examples" #f) #f)]) (> (int __l) (int __r))) (let ()
(define rest (- (if ds (hash-ref ds "num_examples" #f) #f) start))
(define images_rest (slice (if ds (hash-ref ds "images" #f) #f) start (if ds (hash-ref ds "num_examples" #f) #f)))
(define labels_rest (slice (if ds (hash-ref ds "labels" #f) #f) start (if ds (hash-ref ds "num_examples" #f) #f)))
(define new_index (- batch_size rest))
(define images_new (slice (if ds (hash-ref ds "images" #f) #f) 0 new_index))
(define labels_new (slice (if ds (hash-ref ds "labels" #f) #f) 0 new_index))
(define batch_images (append images_rest images_new))
(define batch_labels (append labels_rest labels_new))
(define new_ds (let ([h (make-hash)]) (hash-set! h "images" (if ds (hash-ref ds "images" #f) #f)) (hash-set! h "labels" (if ds (hash-ref ds "labels" #f) #f)) (hash-set! h "num_examples" (if ds (hash-ref ds "num_examples" #f) #f)) (hash-set! h "index_in_epoch" new_index) (hash-set! h "epochs_completed" (let ([__l (if ds (hash-ref ds "epochs_completed" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
(_return (let ([h (make-hash)]) (hash-set! h "dataset" new_ds) (hash-set! h "images" batch_images) (hash-set! h "labels" batch_labels) h))
) (let ()
(define end (let ([__l start] [__r batch_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define batch_images (slice (if ds (hash-ref ds "images" #f) #f) start end))
(define batch_labels (slice (if ds (hash-ref ds "labels" #f) #f) start end))
(define new_ds (let ([h (make-hash)]) (hash-set! h "images" (if ds (hash-ref ds "images" #f) #f)) (hash-set! h "labels" (if ds (hash-ref ds "labels" #f) #f)) (hash-set! h "num_examples" (if ds (hash-ref ds "num_examples" #f) #f)) (hash-set! h "index_in_epoch" end) (hash-set! h "epochs_completed" (if ds (hash-ref ds "epochs_completed" #f) #f)) h))
(_return (let ([h (make-hash)]) (hash-set! h "dataset" new_ds) (hash-set! h "images" batch_images) (hash-set! h "labels" batch_labels) h))
))
))
)
(define (read_data_sets train_images train_labels_raw test_images test_labels_raw validation_size num_classes)
  (let/ec _return (begin
(define train_labels (dense_to_one_hot train_labels_raw num_classes))
(define test_labels (dense_to_one_hot test_labels_raw num_classes))
(define validation_images (slice train_images 0 validation_size))
(define validation_labels (slice train_labels 0 validation_size))
(define train_images_rest (slice train_images validation_size (cond [(not train_images) 0] [(string? train_images) (string-length train_images)] [(hash? train_images) (hash-count train_images)] [else (length train_images)])))
(define train_labels_rest (slice train_labels validation_size (cond [(not train_labels) 0] [(string? train_labels) (string-length train_labels)] [(hash? train_labels) (hash-count train_labels)] [else (length train_labels)])))
(define train (new_dataset train_images_rest train_labels_rest))
(define validation (new_dataset validation_images validation_labels))
(define testset (new_dataset test_images test_labels))
(_return (let ([h (make-hash)]) (hash-set! h "train" train) (hash-set! h "validation" validation) (hash-set! h "test_ds" testset) h))
))
)
(define (main)
  (let/ec _return (begin
(define train_images (list (list 0 1) (list 1 2) (list 2 3) (list 3 4) (list 4 5)))
(define train_labels_raw (list 0 1 2 3 4))
(define test_images (list (list 5 6) (list 6 7)))
(define test_labels_raw (list 5 6))
(define data (read_data_sets train_images train_labels_raw test_images test_labels_raw 2 10))
(define ds (if data (hash-ref data "train" #f) #f))
(define res (next_batch ds 2))
(set! ds (if res (hash-ref res "dataset" #f) #f))
(displayln (to-string (if res (hash-ref res "images" #f) #f)))
(displayln (to-string (if res (hash-ref res "labels" #f) #f)))
(set! res (next_batch ds 2))
(set! ds (if res (hash-ref res "dataset" #f) #f))
(displayln (to-string (if res (hash-ref res "images" #f) #f)))
(displayln (to-string (if res (hash-ref res "labels" #f) #f)))
(set! res (next_batch ds 2))
(set! ds (if res (hash-ref res "dataset" #f) #f))
(displayln (to-string (if res (hash-ref res "images" #f) #f)))
(displayln (to-string (if res (hash-ref res "labels" #f) #f)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
