;; Generated by Mochi 0.10.70 on 2025-08-23 13:46 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/strings")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (if (and (inexact? x) (integer? x))
         (number->string (inexact->exact x))
         (number->string x))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define LOWER "abcdefghijklmnopqrstuvwxyz")
(define UPPER "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define DIGITS "0123456789")
(define (is_lower ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not LOWER) 0] [(string? LOWER) (string-length LOWER)] [(hash? LOWER) (hash-count LOWER)] [else (length LOWER)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (if (hash? LOWER) (hash-ref LOWER i #f) (substring LOWER (int i) (+ (int i) 1))) ch) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (is_upper ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not UPPER) 0] [(string? UPPER) (string-length UPPER)] [(hash? UPPER) (hash-count UPPER)] [else (length UPPER)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (if (hash? UPPER) (hash-ref UPPER i #f) (substring UPPER (int i) (+ (int i) 1))) ch) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (is_digit ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not DIGITS) 0] [(string? DIGITS) (string-length DIGITS)] [(hash? DIGITS) (hash-count DIGITS)] [else (length DIGITS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (if (hash? DIGITS) (hash-ref DIGITS i #f) (substring DIGITS (int i) (+ (int i) 1))) ch) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (is_alpha ch)
  (let/ec _return (begin
(if (is_lower ch) (let ()
(_return #t)
) (void))
(if (is_upper ch) (let ()
(_return #t)
) (void))
(_return #f)
))
)
(define (is_alnum ch)
  (let/ec _return (begin
(if (is_alpha ch) (let ()
(_return #t)
) (void))
(if (is_digit ch) (let ()
(_return #t)
) (void))
(_return #f)
))
)
(define (to_lower ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not UPPER) 0] [(string? UPPER) (string-length UPPER)] [(hash? UPPER) (hash-count UPPER)] [else (length UPPER)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (if (hash? UPPER) (hash-ref UPPER i #f) (substring UPPER (int i) (+ (int i) 1))) ch) (let ()
(_return (if (hash? LOWER) (hash-ref LOWER i #f) (substring LOWER (int i) (+ (int i) 1))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return ch)
))
)
(define (camel_to_snake_case input_str)
  (let/ec _return (begin
(define snake_str "")
(define i 0)
(define prev_is_digit #f)
(define prev_is_alpha #f)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not input_str) 0] [(string? input_str) (string-length input_str)] [(hash? input_str) (hash-count input_str)] [else (length input_str)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (if (hash? input_str) (hash-ref input_str i #f) (substring input_str (int i) (+ (int i) 1))))
      (if (is_upper ch) (let ()
(set! snake_str (string-append (string-append snake_str "_") (to_lower ch)))
) (let ()
(if (and prev_is_digit (is_lower ch)) (let ()
(set! snake_str (string-append (string-append snake_str "_") ch))
) (let ()
(if (and prev_is_alpha (is_digit ch)) (let ()
(set! snake_str (string-append (string-append snake_str "_") ch))
) (let ()
(if (not (is_alnum ch)) (let ()
(set! snake_str (string-append snake_str "_"))
) (let ()
(set! snake_str (string-append snake_str ch))
))
))
))
))
      (set! prev_is_digit (is_digit ch))
      (set! prev_is_alpha (is_alpha ch))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (and (let ([__l (cond [(not snake_str) 0] [(string? snake_str) (string-length snake_str)] [(hash? snake_str) (hash-count snake_str)] [else (length snake_str)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (string=? (if (hash? snake_str) (hash-ref snake_str 0 #f) (substring snake_str (int 0) (+ (int 0) 1))) "_")) (let ()
(set! snake_str (slice snake_str 1 (cond [(not snake_str) 0] [(string? snake_str) (string-length snake_str)] [(hash? snake_str) (hash-count snake_str)] [else (length snake_str)])))
) (void))
(_return snake_str)
))
)
(define (main)
  (let/ec _return (begin
(displayln (camel_to_snake_case "someRandomString"))
(displayln (camel_to_snake_case "SomeRandomStr#ng"))
(displayln (camel_to_snake_case "123SomeRandom123String123"))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
