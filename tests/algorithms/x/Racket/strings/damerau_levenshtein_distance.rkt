;; Generated by Mochi 0.10.63 on 2025-08-11 15:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (damerau_levenshtein_distance first_string second_string)
  (let/ec _return (begin
(define len1 (cond [(not first_string) 0] [(string? first_string) (string-length first_string)] [(hash? first_string) (hash-count first_string)] [else (length first_string)]))
(define len2 (cond [(not second_string) 0] [(string? second_string) (string-length second_string)] [(hash? second_string) (hash-count second_string)] [else (length second_string)]))
(define dp_matrix (list))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ (let ([__l len1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define row (list))
(let/ec _break (let ([_2 0])
  (let loop ()
    (when (< _2 (let ([__l len2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! row (append (or row (list)) (list 0)))
      (set! _2 (+ _2 1))
      (loop)))
))
(set! dp_matrix (append (or dp_matrix (list)) (list row)))
      (set! _ (+ _ 1))
      (loop)))
))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (let ([__l len1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define row (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix i #f) (safe-index dp_matrix (int i))) #f))
(set! row (list-set row (int 0) i))
(set! dp_matrix (list-set dp_matrix (int i) row))
      (set! i (+ i 1))
      (loop)))
))
(define first_row (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix 0 #f) (safe-index dp_matrix (int 0))) #f))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j (let ([__l len2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! first_row (list-set first_row (int j) j))
      (set! j (+ j 1))
      (loop)))
))
(set! dp_matrix (list-set dp_matrix (int 0) first_row))
(let/ec _break (let ([i 1])
  (let loop ()
    (when (< i (let ([__l len1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define row (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix i #f) (safe-index dp_matrix (int i))) #f))
(define first_char (slice first_string (- i 1) i))
(let/ec _break (let ([j 1])
  (let loop ()
    (when (< j (let ([__l len2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define second_char (slice second_string (- j 1) j))
(define cost (if (string=? first_char second_char) 0 1))
(define value (let ([__l (if (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 1) #f) (safe-index dp_matrix (int (- i 1)))) #f) (if (hash? (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 1) #f) (safe-index dp_matrix (int (- i 1)))) #f)) (hash-ref (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 1) #f) (safe-index dp_matrix (int (- i 1)))) #f) j #f) (safe-index (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 1) #f) (safe-index dp_matrix (int (- i 1)))) #f) (int j))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define insertion (let ([__l (if row (if (hash? row) (hash-ref row (- j 1) #f) (safe-index row (int (- j 1)))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l insertion] [__r value]) (< (int __l) (int __r))) (let ()
(set! value insertion)
) (void))
(define substitution (let ([__l (if (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 1) #f) (safe-index dp_matrix (int (- i 1)))) #f) (if (hash? (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 1) #f) (safe-index dp_matrix (int (- i 1)))) #f)) (hash-ref (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 1) #f) (safe-index dp_matrix (int (- i 1)))) #f) (- j 1) #f) (safe-index (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 1) #f) (safe-index dp_matrix (int (- i 1)))) #f) (int (- j 1)))) #f)] [__r cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l substitution] [__r value]) (< (int __l) (int __r))) (let ()
(set! value substitution)
) (void))
(set! row (list-set row (int j) value))
(if (and (and (and (let ([__l i] [__r 1]) (> (int __l) (int __r))) (let ([__l j] [__r 1]) (> (int __l) (int __r)))) (equal? (slice first_string (- i 1) i) (slice second_string (- j 2) (- j 1)))) (equal? (slice first_string (- i 2) (- i 1)) (slice second_string (- j 1) j))) (let ()
(define transposition (let ([__l (if (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 2) #f) (safe-index dp_matrix (int (- i 2)))) #f) (if (hash? (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 2) #f) (safe-index dp_matrix (int (- i 2)))) #f)) (hash-ref (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 2) #f) (safe-index dp_matrix (int (- i 2)))) #f) (- j 2) #f) (safe-index (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix (- i 2) #f) (safe-index dp_matrix (int (- i 2)))) #f) (int (- j 2)))) #f)] [__r cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l transposition] [__r (if row (if (hash? row) (hash-ref row j #f) (safe-index row (int j))) #f)]) (< (int __l) (int __r))) (let ()
(set! row (list-set row (int j) transposition))
) (void))
) (void))
      (set! j (+ j 1))
      (loop)))
))
(set! dp_matrix (list-set dp_matrix (int i) row))
      (set! i (+ i 1))
      (loop)))
))
(_return (if (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix len1 #f) (safe-index dp_matrix (int len1))) #f) (if (hash? (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix len1 #f) (safe-index dp_matrix (int len1))) #f)) (hash-ref (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix len1 #f) (safe-index dp_matrix (int len1))) #f) len2 #f) (safe-index (if dp_matrix (if (hash? dp_matrix) (hash-ref dp_matrix len1 #f) (safe-index dp_matrix (int len1))) #f) (int len2))) #f))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string (damerau_levenshtein_distance "cat" "cut")))
(displayln (to-string (damerau_levenshtein_distance "kitten" "sitting")))
(displayln (to-string (damerau_levenshtein_distance "hello" "world")))
(displayln (to-string (damerau_levenshtein_distance "book" "back")))
(displayln (to-string (damerau_levenshtein_distance "container" "containment")))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
