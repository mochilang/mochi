;; Generated by Mochi 0.10.63 on 2025-08-11 15:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define MAX_LOCAL_PART_OCTETS 64)
(define MAX_DOMAIN_OCTETS 255)
(define ASCII_LETTERS "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define DIGITS "0123456789")
(define LOCAL_EXTRA ".(!#$%&'*+-/=?^_`{|}~)")
(define DOMAIN_EXTRA ".-")
(define (count_char s target)
  (let/ec _return (begin
(define cnt 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) target) (let ()
(set! cnt (let ([__l cnt] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return cnt)
))
)
(define (char_in c allowed)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not allowed) 0] [(string? allowed) (string-length allowed)] [(hash? allowed) (hash-count allowed)] [else (length allowed)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (string=? (slice allowed i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) c) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (starts_with_char s c)
  (let/ec _return (begin
(_return (and (let ([__l (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])] [__r 0]) (> (int __l) (int __r))) (string=? (slice s 0 1) c)))
))
)
(define (ends_with_char s c)
  (let/ec _return (begin
(_return (and (let ([__l (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])] [__r 0]) (> (int __l) (int __r))) (string=? (slice s (- (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1) (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) c)))
))
)
(define (contains_double_dot s)
  (let/ec _return (begin
(if (let ([__l (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])] [__r 2]) (< (int __l) (int __r))) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (- (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1)]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (string=? (slice s i (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "..") (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (is_valid_email_address email)
  (let/ec _return (begin
(if (not (equal? (count_char email "@") 1)) (let ()
(_return #f)
) (void))
(define at_idx 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not email) 0] [(string? email) (string-length email)] [(hash? email) (hash-count email)] [else (length email)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (string=? (slice email i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "@") (let ()
(set! at_idx i)
(_break)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define local_part (slice email 0 at_idx))
(define domain (slice email (let ([__l at_idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not email) 0] [(string? email) (string-length email)] [(hash? email) (hash-count email)] [else (length email)])))
(if (or (let ([__l (cond [(not local_part) 0] [(string? local_part) (string-length local_part)] [(hash? local_part) (hash-count local_part)] [else (length local_part)])] [__r MAX_LOCAL_PART_OCTETS]) (> (int __l) (int __r))) (let ([__l (cond [(not domain) 0] [(string? domain) (string-length domain)] [(hash? domain) (hash-count domain)] [else (length domain)])] [__r MAX_DOMAIN_OCTETS]) (> (int __l) (int __r)))) (let ()
(_return #f)
) (void))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not local_part) 0] [(string? local_part) (string-length local_part)] [(hash? local_part) (hash-count local_part)] [else (length local_part)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define ch (slice local_part i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (not (char_in ch (string-append (string-append ASCII_LETTERS DIGITS) LOCAL_EXTRA))) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (or (or (starts_with_char local_part ".") (ends_with_char local_part ".")) (contains_double_dot local_part)) (let ()
(_return #f)
) (void))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not domain) 0] [(string? domain) (string-length domain)] [(hash? domain) (hash-count domain)] [else (length domain)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define ch (slice domain i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (not (char_in ch (string-append (string-append ASCII_LETTERS DIGITS) DOMAIN_EXTRA))) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (or (starts_with_char domain "-") (ends_with_char domain ".")) (let ()
(_return #f)
) (void))
(if (or (or (starts_with_char domain ".") (ends_with_char domain ".")) (contains_double_dot domain)) (let ()
(_return #f)
) (void))
(_return #t)
))
)
(define email_tests (list "simple@example.com" "very.common@example.com" "disposable.style.email.with+symbol@example.com" "other-email-with-hyphen@and.subdomains.example.com" "fully-qualified-domain@example.com" "user.name+tag+sorting@example.com" "x@example.com" "example-indeed@strange-example.com" "test/test@test.com" "123456789012345678901234567890123456789012345678901234567890123@example.com" "admin@mailserver1" "example@s.example" "Abc.example.com" "A@b@c@example.com" "abc@example..com" "a(c)d,e:f;g<h>i[j\\k]l@example.com" "12345678901234567890123456789012345678901234567890123456789012345@example.com" "i.like.underscores@but_its_not_allowed_in_this_part" ""))
(define idx 0)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not email_tests) 0] [(string? email_tests) (string-length email_tests)] [(hash? email_tests) (hash-count email_tests)] [else (length email_tests)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define email (if email_tests (if (hash? email_tests) (hash-ref email_tests idx #f) (safe-index email_tests (int idx))) #f))
      (displayln (to-string (is_valid_email_address email)))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
