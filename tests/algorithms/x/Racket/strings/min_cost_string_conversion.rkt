;; Generated by Mochi 0.10.63 on 2025-08-11 15:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (string_to_chars s)
  (let/ec _return (begin
(define chars (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! chars (append (or chars (list)) (list (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return chars)
))
)
(define (join_chars chars)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not chars) 0] [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! res (string-append res (if chars (if (hash? chars) (hash-ref chars i #f) (safe-index chars (int i))) #f)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (insert_at chars index ch)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r index]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (if chars (if (hash? chars) (hash-ref chars i #f) (safe-index chars (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! res (append (or res (list)) (list ch)))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not chars) 0] [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (if chars (if (hash? chars) (hash-ref chars i #f) (safe-index chars (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (remove_at chars index)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not chars) 0] [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (not (equal? i index)) (let ()
(set! res (append (or res (list)) (list (if chars (if (hash? chars) (hash-ref chars i #f) (safe-index chars (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (make_matrix_int rows cols init)
  (let/ec _return (begin
(define matrix (list))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ rows)
(define row (list))
(let/ec _break (let ([_2 0])
  (let loop ()
    (when (< _2 cols)
(set! row (append (or row (list)) (list init)))
      (set! _2 (+ _2 1))
      (loop)))
))
(set! matrix (append (or matrix (list)) (list row)))
      (set! _ (+ _ 1))
      (loop)))
))
(_return matrix)
))
)
(define (make_matrix_string rows cols init)
  (let/ec _return (begin
(define matrix (list))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ rows)
(define row (list))
(let/ec _break (let ([_2 0])
  (let loop ()
    (when (< _2 cols)
(set! row (append (or row (list)) (list init)))
      (set! _2 (+ _2 1))
      (loop)))
))
(set! matrix (append (or matrix (list)) (list row)))
      (set! _ (+ _ 1))
      (loop)))
))
(_return matrix)
))
)
(define (compute_transform_tables source_string destination_string copy_cost replace_cost delete_cost insert_cost)
  (let/ec _return (begin
(define source_seq (string_to_chars source_string))
(define dest_seq (string_to_chars destination_string))
(define m (cond [(not source_seq) 0] [(string? source_seq) (string-length source_seq)] [(hash? source_seq) (hash-count source_seq)] [else (length source_seq)]))
(define n (cond [(not dest_seq) 0] [(string? dest_seq) (string-length dest_seq)] [(hash? dest_seq) (hash-count dest_seq)] [else (length dest_seq)]))
(define costs (make_matrix_int (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 0))
(define ops (make_matrix_string (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "0"))
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r m]) (<= (int __l) (int __r))) (begin
    (let/ec _cont
      (set! costs (list-set costs i (list-set (list-ref costs i) 0 (* i delete_cost))))
      (set! ops (list-set ops i (list-set (list-ref ops i) 0 (string-append "D" (if source_seq (if (hash? source_seq) (hash-ref source_seq (- i 1) #f) (safe-index source_seq (int (- i 1)))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define j 1)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (<= (int __l) (int __r))) (begin
    (let/ec _cont
      (set! costs (list-set costs 0 (list-set (list-ref costs 0) j (* j insert_cost))))
      (set! ops (list-set ops 0 (list-set (list-ref ops 0) j (string-append "I" (if dest_seq (if (hash? dest_seq) (hash-ref dest_seq (- j 1) #f) (safe-index dest_seq (int (- j 1)))) #f)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r m]) (<= (int __l) (int __r))) (begin
    (let/ec _cont
      (set! j 1)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (<= (int __l) (int __r))) (begin
    (let/ec _cont
      (if (string=? (if source_seq (if (hash? source_seq) (hash-ref source_seq (- i 1) #f) (safe-index source_seq (int (- i 1)))) #f) (if dest_seq (if (hash? dest_seq) (hash-ref dest_seq (- j 1) #f) (safe-index dest_seq (int (- j 1)))) #f)) (let ()
(set! costs (list-set costs i (list-set (list-ref costs i) j (let ([__l (if (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (if (hash? (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f)) (hash-ref (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (- j 1) #f) (safe-index (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (int (- j 1)))) #f)] [__r copy_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! ops (list-set ops i (list-set (list-ref ops i) j (string-append "C" (if source_seq (if (hash? source_seq) (hash-ref source_seq (- i 1) #f) (safe-index source_seq (int (- i 1)))) #f)))))
) (let ()
(set! costs (list-set costs i (list-set (list-ref costs i) j (let ([__l (if (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (if (hash? (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f)) (hash-ref (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (- j 1) #f) (safe-index (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (int (- j 1)))) #f)] [__r replace_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! ops (list-set ops i (list-set (list-ref ops i) j (string-append (string-append "R" (if source_seq (if (hash? source_seq) (hash-ref source_seq (- i 1) #f) (safe-index source_seq (int (- i 1)))) #f)) (if dest_seq (if (hash? dest_seq) (hash-ref dest_seq (- j 1) #f) (safe-index dest_seq (int (- j 1)))) #f)))))
))
      (if (let ([__l (let ([__l (if (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (if (hash? (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f)) (hash-ref (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) j #f) (safe-index (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (int j))) #f)] [__r delete_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (if (hash? (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f)) (hash-ref (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) j #f) (safe-index (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (int j))) #f)]) (< (int __l) (int __r))) (let ()
(set! costs (list-set costs i (list-set (list-ref costs i) j (let ([__l (if (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (if (hash? (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f)) (hash-ref (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) j #f) (safe-index (if costs (if (hash? costs) (hash-ref costs (- i 1) #f) (safe-index costs (int (- i 1)))) #f) (int j))) #f)] [__r delete_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! ops (list-set ops i (list-set (list-ref ops i) j (string-append "D" (if source_seq (if (hash? source_seq) (hash-ref source_seq (- i 1) #f) (safe-index source_seq (int (- i 1)))) #f)))))
) (void))
      (if (let ([__l (let ([__l (if (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (if (hash? (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f)) (hash-ref (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (- j 1) #f) (safe-index (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (int (- j 1)))) #f)] [__r insert_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (if (hash? (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f)) (hash-ref (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) j #f) (safe-index (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (int j))) #f)]) (< (int __l) (int __r))) (let ()
(set! costs (list-set costs i (list-set (list-ref costs i) j (let ([__l (if (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (if (hash? (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f)) (hash-ref (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (- j 1) #f) (safe-index (if costs (if (hash? costs) (hash-ref costs i #f) (safe-index costs (int i))) #f) (int (- j 1)))) #f)] [__r insert_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! ops (list-set ops i (list-set (list-ref ops i) j (string-append "I" (if dest_seq (if (hash? dest_seq) (hash-ref dest_seq (- j 1) #f) (safe-index dest_seq (int (- j 1)))) #f)))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "costs" costs) (hash-set! h "ops" ops) h))
))
)
(define (assemble_transformation ops i j)
  (let/ec _return (begin
(if (and (equal? i 0) (equal? j 0)) (let ()
(_return (list))
) (void))
(define op (if (if ops (if (hash? ops) (hash-ref ops i #f) (safe-index ops (int i))) #f) (if (hash? (if ops (if (hash? ops) (hash-ref ops i #f) (safe-index ops (int i))) #f)) (hash-ref (if ops (if (hash? ops) (hash-ref ops i #f) (safe-index ops (int i))) #f) j #f) (safe-index (if ops (if (hash? ops) (hash-ref ops i #f) (safe-index ops (int i))) #f) (int j))) #f))
(define kind (slice op 0 1))
(if (or (string=? kind "C") (string=? kind "R")) (let ()
(define seq (assemble_transformation ops (- i 1) (- j 1)))
(set! seq (append (or seq (list)) (list op)))
(_return seq)
) (let ()
(if (string=? kind "D") (let ()
(define seq (assemble_transformation ops (- i 1) j))
(set! seq (append (or seq (list)) (list op)))
(_return seq)
) (let ()
(define seq (assemble_transformation ops i (- j 1)))
(set! seq (append (or seq (list)) (list op)))
(_return seq)
))
))
))
)
(define (main)
  (let/ec _return (begin
(define copy_cost (- 1))
(define replace_cost 1)
(define delete_cost 2)
(define insert_cost 2)
(define src "Python")
(define dst "Algorithms")
(define tables (compute_transform_tables src dst copy_cost replace_cost delete_cost insert_cost))
(define operations (if tables (hash-ref tables "ops" #f) #f))
(define m (cond [(not operations) 0] [(string? operations) (string-length operations)] [(hash? operations) (hash-count operations)] [else (length operations)]))
(define n (cond [(not (if operations (if (hash? operations) (hash-ref operations 0 #f) (safe-index operations (int 0))) #f)) 0] [(string? (if operations (if (hash? operations) (hash-ref operations 0 #f) (safe-index operations (int 0))) #f)) (string-length (if operations (if (hash? operations) (hash-ref operations 0 #f) (safe-index operations (int 0))) #f))] [(hash? (if operations (if (hash? operations) (hash-ref operations 0 #f) (safe-index operations (int 0))) #f)) (hash-count (if operations (if (hash? operations) (hash-ref operations 0 #f) (safe-index operations (int 0))) #f))] [else (length (if operations (if (hash? operations) (hash-ref operations 0 #f) (safe-index operations (int 0))) #f))]))
(define sequence (assemble_transformation operations (- m 1) (- n 1)))
(define string_list (string_to_chars src))
(define idx 0)
(define cost 0)
(define k 0)
(let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not sequence) 0] [(string? sequence) (string-length sequence)] [(hash? sequence) (hash-count sequence)] [else (length sequence)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (displayln (join_chars string_list))
      (define op (if sequence (if (hash? sequence) (hash-ref sequence k #f) (safe-index sequence (int k))) #f))
      (define kind (slice op 0 1))
      (if (string=? kind "C") (let ()
(set! cost (let ([__l cost] [__r copy_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? kind "R") (let ()
(set! string_list (list-set string_list (int idx) (slice op 2 3)))
(set! cost (let ([__l cost] [__r replace_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (string=? kind "D") (let ()
(set! string_list (remove_at string_list idx))
(set! cost (let ([__l cost] [__r delete_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! string_list (insert_at string_list idx (slice op 1 2)))
(set! cost (let ([__l cost] [__r insert_cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
))
))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln (join_chars string_list))
(displayln (string-append "Cost: " (to-string cost)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
