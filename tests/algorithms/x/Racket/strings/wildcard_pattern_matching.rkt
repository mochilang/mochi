;; Generated by Mochi 0.10.63 on 2025-08-11 15:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (make_matrix_bool rows cols init)
  (let/ec _return (begin
(define matrix (list))
(let/ec _break (let ([_ 0])
  (let loop ()
    (when (< _ rows)
(define row (list))
(let/ec _break (let ([_2 0])
  (let loop ()
    (when (< _2 cols)
(set! row (append (or row (list)) (list init)))
      (set! _2 (+ _2 1))
      (loop)))
))
(set! matrix (append (or matrix (list)) (list row)))
      (set! _ (+ _ 1))
      (loop)))
))
(_return matrix)
))
)
(define (match_pattern input_string pattern)
  (let/ec _return (begin
(define len_string (let ([__l (cond [(not input_string) 0] [(string? input_string) (string-length input_string)] [(hash? input_string) (hash-count input_string)] [else (length input_string)])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define len_pattern (let ([__l (cond [(not pattern) 0] [(string? pattern) (string-length pattern)] [(hash? pattern) (hash-count pattern)] [else (length pattern)])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define dp (make_matrix_bool len_string len_pattern #f))
(define row0 (if dp (if (hash? dp) (hash-ref dp 0 #f) (safe-index dp (int 0))) #f))
(set! row0 (list-set row0 (int 0) #t))
(set! dp (list-set dp (int 0) row0))
(define j 1)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r len_pattern]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! row0 (if dp (if (hash? dp) (hash-ref dp 0 #f) (safe-index dp (int 0))) #f))
      (if (string=? (slice pattern (- j 1) j) "*") (let ()
(set! row0 (list-set row0 (int j) (if row0 (if (hash? row0) (hash-ref row0 (- j 2) #f) (safe-index row0 (int (- j 2)))) #f)))
) (let ()
(set! row0 (list-set row0 (int j) #f))
))
      (set! dp (list-set dp (int 0) row0))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r len_string]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define row (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f))
      (define j2 1)
      (let/ec _break (let loop ()
  (if (let ([__l j2] [__r len_pattern]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define s_char (slice input_string (- i 1) i))
      (define p_char (slice pattern (- j2 1) j2))
      (if (or (string=? s_char p_char) (string=? p_char ".")) (let ()
(set! row (list-set row (int j2) (if (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (- j2 1) #f) (safe-index (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (int (- j2 1)))) #f)))
) (let ()
(if (string=? p_char "*") (let ()
(define val (if (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (- j2 2) #f) (safe-index (if dp (if (hash? dp) (hash-ref dp i #f) (safe-index dp (int i))) #f) (int (- j2 2)))) #f))
(define prev_p (slice pattern (- j2 2) (- j2 1)))
(if (and (not val) (or (string=? prev_p s_char) (string=? prev_p "."))) (let ()
(set! val (if (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) j2 #f) (safe-index (if dp (if (hash? dp) (hash-ref dp (- i 1) #f) (safe-index dp (int (- i 1)))) #f) (int j2))) #f))
) (void))
(set! row (list-set row (int j2) val))
) (let ()
(set! row (list-set row (int j2) #f))
))
))
      (set! j2 (let ([__l j2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! dp (list-set dp (int i) row))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (if (if dp (if (hash? dp) (hash-ref dp (- len_string 1) #f) (safe-index dp (int (- len_string 1)))) #f) (if (hash? (if dp (if (hash? dp) (hash-ref dp (- len_string 1) #f) (safe-index dp (int (- len_string 1)))) #f)) (hash-ref (if dp (if (hash? dp) (hash-ref dp (- len_string 1) #f) (safe-index dp (int (- len_string 1)))) #f) (- len_pattern 1) #f) (safe-index (if dp (if (hash? dp) (hash-ref dp (- len_string 1) #f) (safe-index dp (int (- len_string 1)))) #f) (int (- len_pattern 1)))) #f))
))
)
(define (main)
  (let/ec _return (begin
(if (not (match_pattern "aab" "c*a*b")) (let ()
(panic "case1 failed")
) (void))
(if (match_pattern "dabc" "*abc") (let ()
(panic "case2 failed")
) (void))
(if (match_pattern "aaa" "aa") (let ()
(panic "case3 failed")
) (void))
(if (not (match_pattern "aaa" "a.a")) (let ()
(panic "case4 failed")
) (void))
(if (match_pattern "aaab" "aa*") (let ()
(panic "case5 failed")
) (void))
(if (not (match_pattern "aaab" ".*")) (let ()
(panic "case6 failed")
) (void))
(if (match_pattern "a" "bbbb") (let ()
(panic "case7 failed")
) (void))
(if (match_pattern "" "bbbb") (let ()
(panic "case8 failed")
) (void))
(if (match_pattern "a" "") (let ()
(panic "case9 failed")
) (void))
(if (not (match_pattern "" "")) (let ()
(panic "case10 failed")
) (void))
(displayln (to-string (match_pattern "aab" "c*a*b")))
(displayln (to-string (match_pattern "dabc" "*abc")))
(displayln (to-string (match_pattern "aaa" "aa")))
(displayln (to-string (match_pattern "aaa" "a.a")))
(displayln (to-string (match_pattern "aaab" "aa*")))
(displayln (to-string (match_pattern "aaab" ".*")))
(displayln (to-string (match_pattern "a" "bbbb")))
(displayln (to-string (match_pattern "" "bbbb")))
(displayln (to-string (match_pattern "a" "")))
(displayln (to-string (match_pattern "" "")))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
