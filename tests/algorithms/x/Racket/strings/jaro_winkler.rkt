;; Generated by Mochi 0.10.63 on 2025-08-11 15:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (min_int a b)
  (let/ec _return (begin
(if (let ([__l a] [__r b]) (< (int __l) (int __r))) (let ()
(_return a)
) (let ()
(_return b)
))
))
)
(define (max_int a b)
  (let/ec _return (begin
(if (let ([__l a] [__r b]) (> (int __l) (int __r))) (let ()
(_return a)
) (let ()
(_return b)
))
))
)
(define (repeat_bool n value)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list value)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (set_bool xs idx value)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (equal? i idx) (let ()
(set! res (append (or res (list)) (list value)))
) (let ()
(set! res (append (or res (list)) (list (if xs (if (hash? xs) (hash-ref xs i #f) (safe-index xs (int i))) #f))))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (jaro_winkler s1 s2)
  (let/ec _return (begin
(define len1 (cond [(not s1) 0] [(string? s1) (string-length s1)] [(hash? s1) (hash-count s1)] [else (length s1)]))
(define len2 (cond [(not s2) 0] [(string? s2) (string-length s2)] [(hash? s2) (hash-count s2)] [else (length s2)]))
(define limit (floor (/ (min_int len1 len2) 2)))
(define match1 (repeat_bool len1 #f))
(define match2 (repeat_bool len2 #f))
(define matches 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r len1]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define start (max_int 0 (- i limit)))
      (define end (min_int (let ([__l (let ([__l i] [__r limit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) len2))
      (define j start)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r end]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (and (not (if match2 (if (hash? match2) (hash-ref match2 j #f) (safe-index match2 (int j))) #f)) (equal? (slice s1 i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (slice s2 j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) (let ()
(set! match1 (set_bool match1 i #t))
(set! match2 (set_bool match2 j #t))
(set! matches (let ([__l matches] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_break)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (equal? matches 0) (let ()
(_return 0.0)
) (void))
(define transpositions 0)
(define k 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r len1]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (if match1 (if (hash? match1) (hash-ref match1 i #f) (safe-index match1 (int i))) #f) (let ()
(let/ec _break (let loop ()
  (if (not (if match2 (if (hash? match2) (hash-ref match2 k #f) (safe-index match2 (int k))) #f)) (begin
    (let/ec _cont
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (not (string=? (slice s1 i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (slice s2 k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) (let ()
(set! transpositions (let ([__l transpositions] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define m (exact->inexact matches))
(define jaro (/ (let ([__l (let ([__l (/ m (exact->inexact len1))] [__r (/ m (exact->inexact len2))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (/ (- m (/ (exact->inexact transpositions) 2.0)) m)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 3.0))
(define prefix_len 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (and (and (let ([__l i] [__r 4]) (< (int __l) (int __r))) (let ([__l i] [__r len1]) (< (int __l) (int __r)))) (let ([__l i] [__r len2]) (< (int __l) (int __r)))) (begin
    (let/ec _cont
      (if (string=? (slice s1 i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (slice s2 i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(set! prefix_len (let ([__l prefix_len] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(_break)
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([__l jaro] [__r (* (* 0.1 (exact->inexact prefix_len)) (- 1.0 jaro))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string (jaro_winkler "hello" "world")))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
