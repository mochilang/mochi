;; Generated by Mochi 0.10.71 on 2025-08-24 08:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port racket/vector net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define _data_dir "tests/github/TheAlgorithms/Mochi/strings")
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (if (and (inexact? x) (integer? x))
         (number->string (inexact->exact x))
         (number->string x))]
    [(vector? x) (format "~a" (vector->list x))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (cond
    [(string? lst) (substring lst start end)]
    [(vector? lst) (vector->list (vector-copy lst start end))]
    [else (take (drop lst start) (- end start))]))

(define (slice seq start end)
  (define len (cond [(string? seq) (string-length seq)] [(vector? seq) (vector-length seq)] [else (length seq)]))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (cond
    [(string? seq) (substring seq s e)]
    [(vector? seq) (vector-copy seq s e)]
    [else (sublist seq s e)]))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (appendv a b)
  (cond
    [(vector? a) (vector-append a b)]
    [(list? a) (append a (vector->list b))]
    [else (append a b)]))
(define (safe-index lst idx) (let ([i (int idx)]) (cond [(list? lst) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) '())] [(vector? lst) (if (and (>= i 0) (< i (vector-length lst))) (vector-ref lst i) '())] [(string? lst) (if (and (>= i 0) (< i (string-length lst))) (substring lst i (add1 i)) "")] [else 0])))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_ord s) (char->integer (string-ref s 0)))
(define (read_file path)
  (define p path)
  (let ([root (getenv "MOCHI_ROOT")])
    (when (and root (not (file-exists? p)))
      (set! p (path->string (build-path root _data_dir path)))))
  (with-input-from-file p port->string))
(define (list-set lst idx val)
  (define i (int idx))
  (cond
    [(vector? lst) (when (< i (vector-length lst)) (vector-set! lst i val)) lst]
    [else
     (define len (length lst))
     (cond
       [(>= i len) (append lst (make-list (- i len) '()) (list val))]
       [(zero? i) (cons val (cdr lst))]
       [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))])]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define ETAOIN "ETAOINSHRDLCUMWFGYPBVKJXQZ")
(define LETTERS "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define (etaoin_index letter)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not ETAOIN) 0] [(string? ETAOIN) (string-length ETAOIN)] [(vector? ETAOIN) (vector-length ETAOIN)] [(hash? ETAOIN) (hash-count ETAOIN)] [else (length ETAOIN)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (slice ETAOIN i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) letter) (let ()
(_return i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (cond [(not ETAOIN) 0] [(string? ETAOIN) (string-length ETAOIN)] [(vector? ETAOIN) (vector-length ETAOIN)] [(hash? ETAOIN) (hash-count ETAOIN)] [else (length ETAOIN)]))
))
)
(define (get_letter_count message)
  (let/ec _return (begin
(define letter_count (let ([h (make-hash)]) h))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not LETTERS) 0] [(string? LETTERS) (string-length LETTERS)] [(vector? LETTERS) (vector-length LETTERS)] [(hash? LETTERS) (hash-count LETTERS)] [else (length LETTERS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define c (slice LETTERS i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (hash? letter_count) (hash-set! letter_count c 0) (begin (set! letter_count (make-hash)) (hash-set! letter_count c 0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define msg (upper message))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not msg) 0] [(string? msg) (string-length msg)] [(vector? msg) (vector-length msg)] [(hash? msg) (hash-count msg)] [else (length msg)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (slice msg j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (string-contains? LETTERS ch) (let ()
(if (hash? letter_count) (hash-set! letter_count ch (let ([__l (if letter_count (hash-ref letter_count ch 0) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! letter_count (make-hash)) (hash-set! letter_count ch (let ([__l (if letter_count (hash-ref letter_count ch 0) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return letter_count)
))
)
(define (get_frequency_order message)
  (let/ec _return (begin
(define letter_to_freq (get_letter_count message))
(define max_freq 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not LETTERS) 0] [(string? LETTERS) (string-length LETTERS)] [(vector? LETTERS) (vector-length LETTERS)] [(hash? LETTERS) (hash-count LETTERS)] [else (length LETTERS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define letter (slice LETTERS i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (define f (if letter_to_freq (hash-ref letter_to_freq letter 0) #f))
      (if (let ([__l f] [__r max_freq]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! max_freq f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define result "")
(define freq max_freq)
(let/ec _break (let loop ()
  (if (let ([__l freq] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define group (vector))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not LETTERS) 0] [(string? LETTERS) (string-length LETTERS)] [(vector? LETTERS) (vector-length LETTERS)] [(hash? LETTERS) (hash-count LETTERS)] [else (length LETTERS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define letter (slice LETTERS j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (equal? (if letter_to_freq (hash-ref letter_to_freq letter 0) #f) freq) (let ()
(set! group (appendv (or group (vector)) (vector letter)))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define g_len (cond [(not group) 0] [(string? group) (string-length group)] [(vector? group) (vector-length group)] [(hash? group) (hash-count group)] [else (length group)]))
      (define a 0)
      (let/ec _break (let loop ()
  (if (let ([__l a] [__r g_len]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define b 0)
      (let/ec _break (let loop ()
  (if (let ([__l b] [__r (- (- g_len a) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define g1 (if group (if (hash? group) (hash-ref group b #f) (safe-index group (int b))) #f))
      (define g2 (if group (if (hash? group) (hash-ref group (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index group (int (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
      (define idx1 (etaoin_index g1))
      (define idx2 (etaoin_index g2))
      (if (let ([__l idx1] [__r idx2]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(define tmp (if group (if (hash? group) (hash-ref group b #f) (safe-index group (int b))) #f))
(vector-set! group (int b) (if group (if (hash? group) (hash-ref group (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index group (int (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
(vector-set! group (int (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp)
) (void))
      (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define g 0)
      (let/ec _break (let loop ()
  (if (let ([__l g] [__r (cond [(not group) 0] [(string? group) (string-length group)] [(vector? group) (vector-length group)] [(hash? group) (hash-count group)] [else (length group)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (string-append result (if group (if (hash? group) (hash-ref group g #f) (safe-index group (int g))) #f)))
      (set! g (let ([__l g] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! freq (- freq 1))
    )
    (loop)) (void))))
(_return result)
))
)
(define (english_freq_match_score message)
  (let/ec _return (begin
(define freq_order (get_frequency_order message))
(define top (slice freq_order 0 6))
(define bottom (slice freq_order (- (cond [(not freq_order) 0] [(string? freq_order) (string-length freq_order)] [(vector? freq_order) (vector-length freq_order)] [(hash? freq_order) (hash-count freq_order)] [else (length freq_order)]) 6) (cond [(not freq_order) 0] [(string? freq_order) (string-length freq_order)] [(vector? freq_order) (vector-length freq_order)] [(hash? freq_order) (hash-count freq_order)] [else (length freq_order)])))
(define score 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 6]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define c (slice ETAOIN i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (string-contains? top c) (let ()
(set! score (let ([__l score] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define j (- (cond [(not ETAOIN) 0] [(string? ETAOIN) (string-length ETAOIN)] [(vector? ETAOIN) (vector-length ETAOIN)] [(hash? ETAOIN) (hash-count ETAOIN)] [else (length ETAOIN)]) 6))
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not ETAOIN) 0] [(string? ETAOIN) (string-length ETAOIN)] [(vector? ETAOIN) (vector-length ETAOIN)] [(hash? ETAOIN) (hash-count ETAOIN)] [else (length ETAOIN)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define c (slice ETAOIN j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (string-contains? bottom c) (let ()
(set! score (let ([__l score] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return score)
))
)
(define (main)
  (let/ec _return (begin
(displayln (get_frequency_order "Hello World"))
(displayln (english_freq_match_score "Hello World"))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
