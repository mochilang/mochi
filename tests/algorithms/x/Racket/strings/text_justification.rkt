;; Generated by Mochi 0.10.63 on 2025-08-11 15:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (repeat_str s count)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r count]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! res (string-append res s))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (split_words s)
  (let/ec _return (begin
(define res (list))
(define current "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (string=? ch " ") (let ()
(if (not (string=? current "")) (let ()
(set! res (append (or res (list)) (list current)))
(set! current "")
) (void))
) (let ()
(set! current (string-append current ch))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (not (string=? current "")) (let ()
(set! res (append (or res (list)) (list current)))
) (void))
(_return res)
))
)
(define (justify_line line width max_width)
  (let/ec _return (begin
(define overall_spaces_count (- max_width width))
(define words_count (cond [(not line) 0] [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)]))
(if (equal? words_count 1) (let ()
(_return (string-append (if line (if (hash? line) (hash-ref line 0 #f) (safe-index line (int 0))) #f) (repeat_str " " overall_spaces_count)))
) (void))
(define spaces_to_insert_between_words (- words_count 1))
(define num_spaces_between_words_list (list))
(define base (floor (/ overall_spaces_count spaces_to_insert_between_words)))
(define extra (modulo overall_spaces_count spaces_to_insert_between_words))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r spaces_to_insert_between_words]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define spaces base)
      (if (let ([__l i] [__r extra]) (< (int __l) (int __r))) (let ()
(set! spaces (let ([__l spaces] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! num_spaces_between_words_list (append (or num_spaces_between_words_list (list)) (list spaces)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define aligned "")
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r spaces_to_insert_between_words]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (set! aligned (string-append (string-append aligned (if line (if (hash? line) (hash-ref line i #f) (safe-index line (int i))) #f)) (repeat_str " " (if num_spaces_between_words_list (if (hash? num_spaces_between_words_list) (hash-ref num_spaces_between_words_list i #f) (safe-index num_spaces_between_words_list (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! aligned (string-append aligned (if line (if (hash? line) (hash-ref line spaces_to_insert_between_words #f) (safe-index line (int spaces_to_insert_between_words))) #f)))
(_return aligned)
))
)
(define (text_justification word max_width)
  (let/ec _return (begin
(define words (split_words word))
(define answer (list))
(define line (list))
(define width 0)
(define idx 0)
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not words) 0] [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (define w (if words (if (hash? words) (hash-ref words idx #f) (safe-index words (int idx))) #f))
      (if (let ([__l (let ([__l (let ([__l width] [__r (cond [(not w) 0] [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (cond [(not line) 0] [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r max_width]) (<= (int __l) (int __r))) (let ()
(set! line (append (or line (list)) (list w)))
(set! width (let ([__l width] [__r (cond [(not w) 0] [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! answer (append (or answer (list)) (list (justify_line line width max_width))))
(set! line (list w))
(set! width (cond [(not w) 0] [(string? w) (string-length w)] [(hash? w) (hash-count w)] [else (length w)]))
))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define remaining_spaces (- (- max_width width) (cond [(not line) 0] [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)])))
(define last_line "")
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not line) 0] [(string? line) (string-length line)] [(hash? line) (hash-count line)] [else (length line)])]) (< (int __l) (int __r))) (begin
    (let/ec _cont
      (if (let ([__l j] [__r 0]) (> (int __l) (int __r))) (let ()
(set! last_line (string-append last_line " "))
) (void))
      (set! last_line (string-append last_line (if line (if (hash? line) (hash-ref line j #f) (safe-index line (int j))) #f)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! last_line (string-append last_line (repeat_str " " (let ([__l remaining_spaces] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! answer (append (or answer (list)) (list last_line)))
(_return answer)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string (text_justification "This is an example of text justification." 16)))
(displayln (to-string (text_justification "Two roads diverged in a yellow wood" 16)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
