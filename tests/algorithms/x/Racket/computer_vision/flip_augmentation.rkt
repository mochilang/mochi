;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (flip_horizontal_image img)
  (let/ec _return (begin
(define flipped (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)])) (let/ec _cont
    (define row (if img (if (hash? img) (hash-ref img i #f) (list-ref img (int i))) #f))
    (define j (- (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)]) 1))
    (define new_row (list))
    (let/ec _break (let loop ()
  (if (>= j 0) (let/ec _cont
    (set! new_row (append new_row (list (if row (if (hash? row) (hash-ref row j #f) (list-ref row (int j))) #f))))
    (set! j (- j 1))
    (loop)) (void))))
    (set! flipped (append flipped (list new_row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return flipped)
))
)
(define (flip_vertical_image img)
  (let/ec _return (begin
(define flipped (list))
(define i (- (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (set! flipped (append flipped (list (if img (if (hash? img) (hash-ref img i #f) (list-ref img (int i))) #f))))
    (set! i (- i 1))
    (loop)) (void))))
(_return flipped)
))
)
(define (flip_horizontal_boxes boxes)
  (let/ec _return (begin
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? boxes) (string-length boxes)] [(hash? boxes) (hash-count boxes)] [else (length boxes)])) (let/ec _cont
    (define b (if boxes (if (hash? boxes) (hash-ref boxes i #f) (list-ref boxes (int i))) #f))
    (define x_new (- 1.0 (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f)))
    (set! result (append result (list (list (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) x_new (if b (if (hash? b) (hash-ref b 2 #f) (list-ref b (int 2))) #f) (if b (if (hash? b) (hash-ref b 3 #f) (list-ref b (int 3))) #f) (if b (if (hash? b) (hash-ref b 4 #f) (list-ref b (int 4))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (flip_vertical_boxes boxes)
  (let/ec _return (begin
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? boxes) (string-length boxes)] [(hash? boxes) (hash-count boxes)] [else (length boxes)])) (let/ec _cont
    (define b (if boxes (if (hash? boxes) (hash-ref boxes i #f) (list-ref boxes (int i))) #f))
    (define y_new (- 1.0 (if b (if (hash? b) (hash-ref b 2 #f) (list-ref b (int 2))) #f)))
    (set! result (append result (list (list (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) y_new (if b (if (hash? b) (hash-ref b 3 #f) (list-ref b (int 3))) #f) (if b (if (hash? b) (hash-ref b 4 #f) (list-ref b (int 4))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (print_image img)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)])) (let/ec _cont
    (define row (if img (if (hash? img) (hash-ref img i #f) (list-ref img (int i))) #f))
    (define j 0)
    (define line "")
    (let/ec _break (let loop ()
  (if (< j (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let/ec _cont
    (set! line (string-append (string-append line (format "~a" (if row (if (hash? row) (hash-ref row j #f) (list-ref row (int j))) #f))) " "))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define image (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))
(define boxes (list (list 0.0 0.25 0.25 0.5 0.5) (list 1.0 0.75 0.75 0.5 0.5)))
(define h_img (flip_horizontal_image image))
(define h_boxes (flip_horizontal_boxes boxes))
(define v_img (flip_vertical_image image))
(define v_boxes (flip_vertical_boxes boxes))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln "Original image:")
(print_image image)
(displayln (format "~a" boxes))
(displayln "Horizontal flip:")
(print_image h_img)
(displayln (format "~a" h_boxes))
(displayln "Vertical flip:")
(print_image v_img)
(displayln (format "~a" v_boxes))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
