;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (round_int x)
  (let/ec _return (begin
(if (>= x 0.0) (let ()
(_return (int (let ([__l x] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(_return (int (- x 0.5)))
))
)
(define (zeros rows cols)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j cols) (let/ec _cont
    (set! row (append row (list 0.0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (warp image h_flow v_flow)
  (let/ec _return (begin
(define h (cond [(string? image) (string-length image)] [(hash? image) (hash-count image)] [else (length image)]))
(define w (cond [(string? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (string-length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [(hash? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (hash-count (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [else (length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))]))
(define out (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (define sx (- x (round_int (if (if h_flow (if (hash? h_flow) (hash-ref h_flow y #f) (list-ref h_flow (int y))) #f) (if (hash? (if h_flow (if (hash? h_flow) (hash-ref h_flow y #f) (list-ref h_flow (int y))) #f)) (hash-ref (if h_flow (if (hash? h_flow) (hash-ref h_flow y #f) (list-ref h_flow (int y))) #f) x #f) (list-ref (if h_flow (if (hash? h_flow) (hash-ref h_flow y #f) (list-ref h_flow (int y))) #f) (int x))) #f))))
    (define sy (- y (round_int (if (if v_flow (if (hash? v_flow) (hash-ref v_flow y #f) (list-ref v_flow (int y))) #f) (if (hash? (if v_flow (if (hash? v_flow) (hash-ref v_flow y #f) (list-ref v_flow (int y))) #f)) (hash-ref (if v_flow (if (hash? v_flow) (hash-ref v_flow y #f) (list-ref v_flow (int y))) #f) x #f) (list-ref (if v_flow (if (hash? v_flow) (hash-ref v_flow y #f) (list-ref v_flow (int y))) #f) (int x))) #f))))
    (if (and (and (and (>= sx 0) (< sx w)) (>= sy 0)) (< sy h)) (let ()
(set! row (append row (list (if (if image (if (hash? image) (hash-ref image sy #f) (list-ref image (int sy))) #f) (if (hash? (if image (if (hash? image) (hash-ref image sy #f) (list-ref image (int sy))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image sy #f) (list-ref image (int sy))) #f) sx #f) (list-ref (if image (if (hash? image) (hash-ref image sy #f) (list-ref image (int sy))) #f) (int sx))) #f))))
) (let ()
(set! row (append row (list 0.0)))
))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (convolve img ker)
  (let/ec _return (begin
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define kh (cond [(string? ker) (string-length ker)] [(hash? ker) (hash-count ker)] [else (length ker)]))
(define kw (cond [(string? (if ker (if (hash? ker) (hash-ref ker 0 #f) (list-ref ker (int 0))) #f)) (string-length (if ker (if (hash? ker) (hash-ref ker 0 #f) (list-ref ker (int 0))) #f))] [(hash? (if ker (if (hash? ker) (hash-ref ker 0 #f) (list-ref ker (int 0))) #f)) (hash-count (if ker (if (hash? ker) (hash-ref ker 0 #f) (list-ref ker (int 0))) #f))] [else (length (if ker (if (hash? ker) (hash-ref ker 0 #f) (list-ref ker (int 0))) #f))]))
(define py (quotient kh 2))
(define px (quotient kw 2))
(define out (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (define s 0.0)
    (define ky 0)
    (let/ec _break (let loop ()
  (if (< ky kh) (let/ec _cont
    (define kx 0)
    (let/ec _break (let loop ()
  (if (< kx kw) (let/ec _cont
    (define iy (- (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) py))
    (define ix (- (let ([__l x] [__r kx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) px))
    (if (and (and (and (>= iy 0) (< iy h)) (>= ix 0)) (< ix w)) (let ()
(set! s (let ([__l s] [__r (* (if (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) (if (hash? (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) ix #f) (list-ref (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) (int ix))) #f) (if (if ker (if (hash? ker) (hash-ref ker ky #f) (list-ref ker (int ky))) #f) (if (hash? (if ker (if (hash? ker) (hash-ref ker ky #f) (list-ref ker (int ky))) #f)) (hash-ref (if ker (if (hash? ker) (hash-ref ker ky #f) (list-ref ker (int ky))) #f) kx #f) (list-ref (if ker (if (hash? ker) (hash-ref ker ky #f) (list-ref ker (int ky))) #f) (int kx))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! kx (let ([__l kx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ky (let ([__l ky] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row (append row (list s)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (horn_schunck image0 image1 num_iter alpha)
  (let/ec _return (begin
(define h (cond [(string? image0) (string-length image0)] [(hash? image0) (hash-count image0)] [else (length image0)]))
(define w (cond [(string? (if image0 (if (hash? image0) (hash-ref image0 0 #f) (list-ref image0 (int 0))) #f)) (string-length (if image0 (if (hash? image0) (hash-ref image0 0 #f) (list-ref image0 (int 0))) #f))] [(hash? (if image0 (if (hash? image0) (hash-ref image0 0 #f) (list-ref image0 (int 0))) #f)) (hash-count (if image0 (if (hash? image0) (hash-ref image0 0 #f) (list-ref image0 (int 0))) #f))] [else (length (if image0 (if (hash? image0) (hash-ref image0 0 #f) (list-ref image0 (int 0))) #f))]))
(define u (zeros h w))
(define v (zeros h w))
(define kernel_x (list (list (- 0.25) 0.25) (list (- 0.25) 0.25)))
(define kernel_y (list (list (- 0.25) (- 0.25)) (list 0.25 0.25)))
(define kernel_t (list (list 0.25 0.25) (list 0.25 0.25)))
(define laplacian (list (list 0.0833333333333 0.166666666667 0.0833333333333) (list 0.166666666667 0.0 0.166666666667) (list 0.0833333333333 0.166666666667 0.0833333333333)))
(define it 0)
(let/ec _break (let loop ()
  (if (< it num_iter) (let/ec _cont
    (define warped (warp image0 u v))
    (define dx1 (convolve warped kernel_x))
    (define dx2 (convolve image1 kernel_x))
    (define dy1 (convolve warped kernel_y))
    (define dy2 (convolve image1 kernel_y))
    (define dt1 (convolve warped kernel_t))
    (define dt2 (convolve image1 kernel_t))
    (define avg_u (convolve u laplacian))
    (define avg_v (convolve v laplacian))
    (define y 0)
    (let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (define dx (let ([__l (if (if dx1 (if (hash? dx1) (hash-ref dx1 y #f) (list-ref dx1 (int y))) #f) (if (hash? (if dx1 (if (hash? dx1) (hash-ref dx1 y #f) (list-ref dx1 (int y))) #f)) (hash-ref (if dx1 (if (hash? dx1) (hash-ref dx1 y #f) (list-ref dx1 (int y))) #f) x #f) (list-ref (if dx1 (if (hash? dx1) (hash-ref dx1 y #f) (list-ref dx1 (int y))) #f) (int x))) #f)] [__r (if (if dx2 (if (hash? dx2) (hash-ref dx2 y #f) (list-ref dx2 (int y))) #f) (if (hash? (if dx2 (if (hash? dx2) (hash-ref dx2 y #f) (list-ref dx2 (int y))) #f)) (hash-ref (if dx2 (if (hash? dx2) (hash-ref dx2 y #f) (list-ref dx2 (int y))) #f) x #f) (list-ref (if dx2 (if (hash? dx2) (hash-ref dx2 y #f) (list-ref dx2 (int y))) #f) (int x))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define dy (let ([__l (if (if dy1 (if (hash? dy1) (hash-ref dy1 y #f) (list-ref dy1 (int y))) #f) (if (hash? (if dy1 (if (hash? dy1) (hash-ref dy1 y #f) (list-ref dy1 (int y))) #f)) (hash-ref (if dy1 (if (hash? dy1) (hash-ref dy1 y #f) (list-ref dy1 (int y))) #f) x #f) (list-ref (if dy1 (if (hash? dy1) (hash-ref dy1 y #f) (list-ref dy1 (int y))) #f) (int x))) #f)] [__r (if (if dy2 (if (hash? dy2) (hash-ref dy2 y #f) (list-ref dy2 (int y))) #f) (if (hash? (if dy2 (if (hash? dy2) (hash-ref dy2 y #f) (list-ref dy2 (int y))) #f)) (hash-ref (if dy2 (if (hash? dy2) (hash-ref dy2 y #f) (list-ref dy2 (int y))) #f) x #f) (list-ref (if dy2 (if (hash? dy2) (hash-ref dy2 y #f) (list-ref dy2 (int y))) #f) (int x))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define dt (- (if (if dt1 (if (hash? dt1) (hash-ref dt1 y #f) (list-ref dt1 (int y))) #f) (if (hash? (if dt1 (if (hash? dt1) (hash-ref dt1 y #f) (list-ref dt1 (int y))) #f)) (hash-ref (if dt1 (if (hash? dt1) (hash-ref dt1 y #f) (list-ref dt1 (int y))) #f) x #f) (list-ref (if dt1 (if (hash? dt1) (hash-ref dt1 y #f) (list-ref dt1 (int y))) #f) (int x))) #f) (if (if dt2 (if (hash? dt2) (hash-ref dt2 y #f) (list-ref dt2 (int y))) #f) (if (hash? (if dt2 (if (hash? dt2) (hash-ref dt2 y #f) (list-ref dt2 (int y))) #f)) (hash-ref (if dt2 (if (hash? dt2) (hash-ref dt2 y #f) (list-ref dt2 (int y))) #f) x #f) (list-ref (if dt2 (if (hash? dt2) (hash-ref dt2 y #f) (list-ref dt2 (int y))) #f) (int x))) #f)))
    (define au (if (if avg_u (if (hash? avg_u) (hash-ref avg_u y #f) (list-ref avg_u (int y))) #f) (if (hash? (if avg_u (if (hash? avg_u) (hash-ref avg_u y #f) (list-ref avg_u (int y))) #f)) (hash-ref (if avg_u (if (hash? avg_u) (hash-ref avg_u y #f) (list-ref avg_u (int y))) #f) x #f) (list-ref (if avg_u (if (hash? avg_u) (hash-ref avg_u y #f) (list-ref avg_u (int y))) #f) (int x))) #f))
    (define av (if (if avg_v (if (hash? avg_v) (hash-ref avg_v y #f) (list-ref avg_v (int y))) #f) (if (hash? (if avg_v (if (hash? avg_v) (hash-ref avg_v y #f) (list-ref avg_v (int y))) #f)) (hash-ref (if avg_v (if (hash? avg_v) (hash-ref avg_v y #f) (list-ref avg_v (int y))) #f) x #f) (list-ref (if avg_v (if (hash? avg_v) (hash-ref avg_v y #f) (list-ref avg_v (int y))) #f) (int x))) #f))
    (define numer (let ([__l (let ([__l (* dx au)] [__r (* dy av)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r dt]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define denom (let ([__l (let ([__l (* alpha alpha)] [__r (* dx dx)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* dy dy)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define upd (/ numer denom))
    (set! u (list-set u y (list-set (list-ref u y) x (- au (* dx upd)))))
    (set! v (list-set v y (list-set (list-ref v y) x (- av (* dy upd)))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! it (let ([__l it] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list u v))
))
)
(define (print_matrix mat)
  (let/ec _return (begin
(define y 0)
(let/ec _break (let loop ()
  (if (< y (cond [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)])) (let/ec _cont
    (define row (if mat (if (hash? mat) (hash-ref mat y #f) (list-ref mat (int y))) #f))
    (define x 0)
    (define line "")
    (let/ec _break (let loop ()
  (if (< x (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let/ec _cont
    (set! line (string-append line (format "~a" (round_int (if row (if (hash? row) (hash-ref row x #f) (list-ref row (int x))) #f)))))
    (if (< (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let ()
(set! line (string-append line " "))
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define image0 (list (list 0.0 0.0 2.0) (list 0.0 0.0 2.0)))
(define image1 (list (list 0.0 2.0 0.0) (list 0.0 2.0 0.0)))
(define flows (horn_schunck image0 image1 20 0.1))
(define u (if flows (if (hash? flows) (hash-ref flows 0 #f) (list-ref flows (int 0))) #f))
(define v (if flows (if (hash? flows) (hash-ref flows 1 #f) (list-ref flows (int 1))) #f))
(print_matrix u)
(displayln "---")
(print_matrix v)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
