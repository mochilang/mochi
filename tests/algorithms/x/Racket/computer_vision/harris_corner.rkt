;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (zeros h w)
  (let/ec _return (begin
(define m (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (set! row (append row (list 0.0)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! m (append m (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return m)
))
)
(define (gradient img)
  (let/ec _return (begin
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define dx (zeros h w))
(define dy (zeros h w))
(define y 1)
(let/ec _break (let loop ()
  (if (< y (- h 1)) (let/ec _cont
    (define x 1)
    (let/ec _break (let loop ()
  (if (< x (- w 1)) (let/ec _cont
    (set! dx (list-set dx y (list-set (list-ref dx y) x (- (exact->inexact (if (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (if (hash? (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (int (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (exact->inexact (if (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (if (hash? (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (- x 1) #f) (list-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (int (- x 1)))) #f))))))
    (set! dy (list-set dy y (list-set (list-ref dy y) x (- (exact->inexact (if (if img (if (hash? img) (hash-ref img (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref img (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if img (if (hash? img) (hash-ref img (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref img (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref img (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) x #f) (list-ref (if img (if (hash? img) (hash-ref img (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref img (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int x))) #f)) (exact->inexact (if (if img (if (hash? img) (hash-ref img (- y 1) #f) (list-ref img (int (- y 1)))) #f) (if (hash? (if img (if (hash? img) (hash-ref img (- y 1) #f) (list-ref img (int (- y 1)))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img (- y 1) #f) (list-ref img (int (- y 1)))) #f) x #f) (list-ref (if img (if (hash? img) (hash-ref img (- y 1) #f) (list-ref img (int (- y 1)))) #f) (int x))) #f))))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list dx dy))
))
)
(define (harris img k window thresh)
  (let/ec _return (begin
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define grads (gradient img))
(define dx (if grads (if (hash? grads) (hash-ref grads 0 #f) (list-ref grads (int 0))) #f))
(define dy (if grads (if (hash? grads) (hash-ref grads 1 #f) (list-ref grads (int 1))) #f))
(define ixx (zeros h w))
(define iyy (zeros h w))
(define ixy (zeros h w))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (define gx (if (if dx (if (hash? dx) (hash-ref dx y #f) (list-ref dx (int y))) #f) (if (hash? (if dx (if (hash? dx) (hash-ref dx y #f) (list-ref dx (int y))) #f)) (hash-ref (if dx (if (hash? dx) (hash-ref dx y #f) (list-ref dx (int y))) #f) x #f) (list-ref (if dx (if (hash? dx) (hash-ref dx y #f) (list-ref dx (int y))) #f) (int x))) #f))
    (define gy (if (if dy (if (hash? dy) (hash-ref dy y #f) (list-ref dy (int y))) #f) (if (hash? (if dy (if (hash? dy) (hash-ref dy y #f) (list-ref dy (int y))) #f)) (hash-ref (if dy (if (hash? dy) (hash-ref dy y #f) (list-ref dy (int y))) #f) x #f) (list-ref (if dy (if (hash? dy) (hash-ref dy y #f) (list-ref dy (int y))) #f) (int x))) #f))
    (set! ixx (list-set ixx y (list-set (list-ref ixx y) x (* gx gx))))
    (set! iyy (list-set iyy y (list-set (list-ref iyy y) x (* gy gy))))
    (set! ixy (list-set ixy y (list-set (list-ref ixy y) x (* gx gy))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define offset (quotient window 2))
(define corners (list))
(set! y offset)
(let/ec _break (let loop ()
  (if (< y (- h offset)) (let/ec _cont
    (define x offset)
    (let/ec _break (let loop ()
  (if (< x (- w offset)) (let/ec _cont
    (define wxx 0.0)
    (define wyy 0.0)
    (define wxy 0.0)
    (define yy (- y offset))
    (let/ec _break (let loop ()
  (if (<= yy (let ([__l y] [__r offset]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (define xx (- x offset))
    (let/ec _break (let loop ()
  (if (<= xx (let ([__l x] [__r offset]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (set! wxx (let ([__l wxx] [__r (if (if ixx (if (hash? ixx) (hash-ref ixx yy #f) (list-ref ixx (int yy))) #f) (if (hash? (if ixx (if (hash? ixx) (hash-ref ixx yy #f) (list-ref ixx (int yy))) #f)) (hash-ref (if ixx (if (hash? ixx) (hash-ref ixx yy #f) (list-ref ixx (int yy))) #f) xx #f) (list-ref (if ixx (if (hash? ixx) (hash-ref ixx yy #f) (list-ref ixx (int yy))) #f) (int xx))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! wyy (let ([__l wyy] [__r (if (if iyy (if (hash? iyy) (hash-ref iyy yy #f) (list-ref iyy (int yy))) #f) (if (hash? (if iyy (if (hash? iyy) (hash-ref iyy yy #f) (list-ref iyy (int yy))) #f)) (hash-ref (if iyy (if (hash? iyy) (hash-ref iyy yy #f) (list-ref iyy (int yy))) #f) xx #f) (list-ref (if iyy (if (hash? iyy) (hash-ref iyy yy #f) (list-ref iyy (int yy))) #f) (int xx))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! wxy (let ([__l wxy] [__r (if (if ixy (if (hash? ixy) (hash-ref ixy yy #f) (list-ref ixy (int yy))) #f) (if (hash? (if ixy (if (hash? ixy) (hash-ref ixy yy #f) (list-ref ixy (int yy))) #f)) (hash-ref (if ixy (if (hash? ixy) (hash-ref ixy yy #f) (list-ref ixy (int yy))) #f) xx #f) (list-ref (if ixy (if (hash? ixy) (hash-ref ixy yy #f) (list-ref ixy (int yy))) #f) (int xx))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! xx (let ([__l xx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! yy (let ([__l yy] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define det (- (* wxx wyy) (* wxy wxy)))
    (define trace (let ([__l wxx] [__r wyy]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define r (- det (* k (* trace trace))))
    (if (> r thresh) (let ()
(set! corners (append corners (list (list x y))))
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return corners)
))
)
(define img (list (list 1 1 1 1 1) (list 1 255 255 255 1) (list 1 255 0 255 1) (list 1 255 255 255 1) (list 1 1 1 1 1)))
(define corners (harris img 0.04 3 10000000000.0))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln corners)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
