;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (abs_int n)
  (let/ec _return (begin
(if (< n 0) (let ()
(_return (- n))
) (void))
(_return n)
))
)
(define (sqrt x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (ln x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define e 2.718281828)
(define n 0)
(define y x)
(let/ec _break (let loop ()
  (if (>= y e) (let/ec _cont
    (set! y (/ y e))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (<= y (/ 1.0 e)) (let/ec _cont
    (set! y (* y e))
    (set! n (- n 1))
    (loop)) (void))))
(set! y (- y 1.0))
(define term y)
(define result 0.0)
(define k 1)
(let/ec _break (let loop ()
  (if (<= k 20) (let/ec _cont
    (if (equal? (modulo k 2) 1) (let ()
(set! result (let ([__l result] [__r (/ term (* 1.0 k))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! result (- result (/ term (* 1.0 k))))
))
    (set! term (* term y))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([__l result] [__r (* 1.0 n)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (matrix_concurrency image coord)
  (let/ec _return (begin
(define offset_x (if coord (if (hash? coord) (hash-ref coord 0 #f) (list-ref coord (int 0))) #f))
(define offset_y (if coord (if (hash? coord) (hash-ref coord 1 #f) (list-ref coord (int 1))) #f))
(define max_val 0)
(let/ec _break (let ([r 0])
  (let loop ()
    (when (< r (cond [(string? image) (string-length image)] [(hash? image) (hash-count image)] [else (length image)]))
(let/ec _break (let ([c 0])
  (let loop ()
    (when (< c (cond [(string? (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f)) (string-length (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f))] [(hash? (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f)) (hash-count (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f))] [else (length (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f))]))
(if (> (if (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f) (if (hash? (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f) c #f) (list-ref (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f) (int c))) #f) max_val) (let ()
(set! max_val (if (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f) (if (hash? (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f) c #f) (list-ref (if image (if (hash? image) (hash-ref image r #f) (list-ref image (int r))) #f) (int c))) #f))
) (void))
      (set! c (+ c 1))
      (loop)))
))
      (set! r (+ r 1))
      (loop)))
))
(define size (let ([__l max_val] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define matrix (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i size)
(define row (list))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j size)
(set! row (append row (list 0.0)))
      (set! j (+ j 1))
      (loop)))
))
(set! matrix (append matrix (list row)))
      (set! i (+ i 1))
      (loop)))
))
(let/ec _break (let ([x 1])
  (let loop ()
    (when (< x (- (cond [(string? image) (string-length image)] [(hash? image) (hash-count image)] [else (length image)]) 1))
(let/ec _break (let ([y 1])
  (let loop ()
    (when (< y (- (cond [(string? (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f)) (string-length (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f))] [(hash? (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f)) (hash-count (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f))] [else (length (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f))]) 1))
(define base (if (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f) (if (hash? (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f) y #f) (list-ref (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f) (int y))) #f))
(define offset (if (if image (if (hash? image) (hash-ref image (let ([__l x] [__r offset_x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref image (int (let ([__l x] [__r offset_x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if image (if (hash? image) (hash-ref image (let ([__l x] [__r offset_x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref image (int (let ([__l x] [__r offset_x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image (let ([__l x] [__r offset_x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref image (int (let ([__l x] [__r offset_x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l y] [__r offset_y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if image (if (hash? image) (hash-ref image (let ([__l x] [__r offset_x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref image (int (let ([__l x] [__r offset_x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l y] [__r offset_y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
(set! matrix (list-set matrix base (list-set (list-ref matrix base) offset (let ([__l (if (if matrix (if (hash? matrix) (hash-ref matrix base #f) (list-ref matrix (int base))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix base #f) (list-ref matrix (int base))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix base #f) (list-ref matrix (int base))) #f) offset #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix base #f) (list-ref matrix (int base))) #f) (int offset))) #f)] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! y (+ y 1))
      (loop)))
))
      (set! x (+ x 1))
      (loop)))
))
(define total 0.0)
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i size)
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j size)
(set! total (let ([__l total] [__r (if (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) j #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(if (equal? total 0.0) (let ()
(_return matrix)
) (void))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i size)
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j size)
(set! matrix (list-set matrix i (list-set (list-ref matrix i) j (/ (if (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) j #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (int j))) #f) total))))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(_return matrix)
))
)
(define (haralick_descriptors matrix)
  (let/ec _return (begin
(define rows (cond [(string? matrix) (string-length matrix)] [(hash? matrix) (hash-count matrix)] [else (length matrix)]))
(define cols (cond [(string? (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f)) (string-length (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f))] [(hash? (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f)) (hash-count (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f))] [else (length (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f))]))
(define maximum_prob 0.0)
(define correlation 0.0)
(define energy 0.0)
(define contrast 0.0)
(define dissimilarity 0.0)
(define inverse_difference 0.0)
(define homogeneity 0.0)
(define entropy 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j cols) (let/ec _cont
    (define val (if (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) j #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (int j))) #f))
    (if (> val maximum_prob) (let ()
(set! maximum_prob val)
) (void))
    (set! correlation (let ([__l correlation] [__r (* (* (* 1.0 i) j) val)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! energy (let ([__l energy] [__r (* val val)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define diff (- i j))
    (define adiff (abs_int diff))
    (set! contrast (let ([__l contrast] [__r (* val (* (* 1.0 diff) diff))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! dissimilarity (let ([__l dissimilarity] [__r (* val (* 1.0 adiff))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! inverse_difference (let ([__l inverse_difference] [__r (/ val (let ([__l 1.0] [__r (* 1.0 adiff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! homogeneity (let ([__l homogeneity] [__r (/ val (let ([__l 1.0] [__r (* (* 1.0 diff) diff)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> val 0.0) (let ()
(set! entropy (- entropy (* val (ln val))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list maximum_prob correlation energy contrast dissimilarity inverse_difference homogeneity entropy))
))
)
(define image (list (list 0 1 0) (list 1 0 1) (list 0 1 0)))
(define glcm (matrix_concurrency image (list 0 1)))
(define descriptors (haralick_descriptors glcm))
(define idx 0)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (< idx (cond [(string? descriptors) (string-length descriptors)] [(hash? descriptors) (hash-count descriptors)] [else (length descriptors)])) (let/ec _cont
    (displayln (format "~a" (if descriptors (if (hash? descriptors) (hash-ref descriptors idx #f) (list-ref descriptors (int idx))) #f)))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
