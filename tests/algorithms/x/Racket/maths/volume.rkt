;; Generated by Mochi 0.10.64 on 2025-08-12 13:41 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define PI 3.141592653589793)
(define SQRT5 2.23606797749979)
(define (minf a b)
  (let/ec _return (begin
(if (let ([__l a] [__r b]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (maxf a b)
  (let/ec _return (begin
(if (let ([__l a] [__r b]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (vol_cube side_length)
  (let/ec _return (begin
(if (let ([__l side_length] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(panic "vol_cube() only accepts non-negative values")
) (void))
(_return (* (* side_length side_length) side_length))
))
)
(define (vol_spherical_cap height radius)
  (let/ec _return (begin
(if (or (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_spherical_cap() only accepts non-negative values")
) (void))
(_return (* (* (* (* (/ 1.0 3.0) PI) height) height) (- (* 3.0 radius) height)))
))
)
(define (vol_sphere radius)
  (let/ec _return (begin
(if (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(panic "vol_sphere() only accepts non-negative values")
) (void))
(_return (* (* (* (* (/ 4.0 3.0) PI) radius) radius) radius))
))
)
(define (vol_spheres_intersect radius_1 radius_2 centers_distance)
  (let/ec _return (begin
(if (or (or (let ([__l radius_1] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l radius_2] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l centers_distance] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_spheres_intersect() only accepts non-negative values")
) (void))
(if (equal? centers_distance 0.0) (let ()
(_return (vol_sphere (minf radius_1 radius_2)))
) (void))
(define h1 (/ (* (let ([__l (- radius_1 radius_2)] [__r centers_distance]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- (let ([__l radius_1] [__r radius_2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) centers_distance)) (* 2.0 centers_distance)))
(define h2 (/ (* (let ([__l (- radius_2 radius_1)] [__r centers_distance]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- (let ([__l radius_2] [__r radius_1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) centers_distance)) (* 2.0 centers_distance)))
(_return (let ([__l (vol_spherical_cap h1 radius_2)] [__r (vol_spherical_cap h2 radius_1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (vol_spheres_union radius_1 radius_2 centers_distance)
  (let/ec _return (begin
(if (or (or (let ([__l radius_1] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ([__l radius_2] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))]))) (let ([__l centers_distance] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_spheres_union() only accepts non-negative values, non-zero radius")
) (void))
(if (equal? centers_distance 0.0) (let ()
(_return (vol_sphere (maxf radius_1 radius_2)))
) (void))
(_return (- (let ([__l (vol_sphere radius_1)] [__r (vol_sphere radius_2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (vol_spheres_intersect radius_1 radius_2 centers_distance)))
))
)
(define (vol_cuboid width height length_)
  (let/ec _return (begin
(if (or (or (let ([__l width] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l length_] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_cuboid() only accepts non-negative values")
) (void))
(_return (* (* width height) length_))
))
)
(define (vol_cone area_of_base height)
  (let/ec _return (begin
(if (or (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l area_of_base] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_cone() only accepts non-negative values")
) (void))
(_return (/ (* area_of_base height) 3.0))
))
)
(define (vol_right_circ_cone radius height)
  (let/ec _return (begin
(if (or (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_right_circ_cone() only accepts non-negative values")
) (void))
(_return (/ (* (* (* PI radius) radius) height) 3.0))
))
)
(define (vol_prism area_of_base height)
  (let/ec _return (begin
(if (or (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l area_of_base] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_prism() only accepts non-negative values")
) (void))
(_return (* area_of_base height))
))
)
(define (vol_pyramid area_of_base height)
  (let/ec _return (begin
(if (or (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l area_of_base] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_pyramid() only accepts non-negative values")
) (void))
(_return (/ (* area_of_base height) 3.0))
))
)
(define (vol_hemisphere radius)
  (let/ec _return (begin
(if (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(panic "vol_hemisphere() only accepts non-negative values")
) (void))
(_return (/ (* (* (* (* radius radius) radius) PI) 2.0) 3.0))
))
)
(define (vol_circular_cylinder radius height)
  (let/ec _return (begin
(if (or (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_circular_cylinder() only accepts non-negative values")
) (void))
(_return (* (* (* radius radius) height) PI))
))
)
(define (vol_hollow_circular_cylinder inner_radius outer_radius height)
  (let/ec _return (begin
(if (or (or (let ([__l inner_radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l outer_radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_hollow_circular_cylinder() only accepts non-negative values")
) (void))
(if (let ([__l outer_radius] [__r inner_radius]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(panic "outer_radius must be greater than inner_radius")
) (void))
(_return (* (* PI (- (* outer_radius outer_radius) (* inner_radius inner_radius))) height))
))
)
(define (vol_conical_frustum height radius_1 radius_2)
  (let/ec _return (begin
(if (or (or (let ([__l radius_1] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l radius_2] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_conical_frustum() only accepts non-negative values")
) (void))
(_return (* (* (* (/ 1.0 3.0) PI) height) (let ([__l (let ([__l (* radius_1 radius_1)] [__r (* radius_2 radius_2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* radius_1 radius_2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (vol_torus torus_radius tube_radius)
  (let/ec _return (begin
(if (or (let ([__l torus_radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l tube_radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(panic "vol_torus() only accepts non-negative values")
) (void))
(_return (* (* (* (* (* 2.0 PI) PI) torus_radius) tube_radius) tube_radius))
))
)
(define (vol_icosahedron tri_side)
  (let/ec _return (begin
(if (let ([__l tri_side] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(panic "vol_icosahedron() only accepts non-negative values")
) (void))
(_return (/ (* (* (* (* tri_side tri_side) tri_side) (let ([__l 3.0] [__r SQRT5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 5.0) 12.0))
))
)
(define (main)
  (let/ec _return (begin
(displayln "Volumes:")
(displayln (string-append "Cube: " (to-string (vol_cube 2.0))))
(displayln (string-append "Cuboid: " (to-string (vol_cuboid 2.0 2.0 2.0))))
(displayln (string-append "Cone: " (to-string (vol_cone 2.0 2.0))))
(displayln (string-append "Right Circular Cone: " (to-string (vol_right_circ_cone 2.0 2.0))))
(displayln (string-append "Prism: " (to-string (vol_prism 2.0 2.0))))
(displayln (string-append "Pyramid: " (to-string (vol_pyramid 2.0 2.0))))
(displayln (string-append "Sphere: " (to-string (vol_sphere 2.0))))
(displayln (string-append "Hemisphere: " (to-string (vol_hemisphere 2.0))))
(displayln (string-append "Circular Cylinder: " (to-string (vol_circular_cylinder 2.0 2.0))))
(displayln (string-append "Torus: " (to-string (vol_torus 2.0 2.0))))
(displayln (string-append "Conical Frustum: " (to-string (vol_conical_frustum 2.0 2.0 4.0))))
(displayln (string-append "Spherical cap: " (to-string (vol_spherical_cap 1.0 2.0))))
(displayln (string-append "Spheres intersection: " (to-string (vol_spheres_intersect 2.0 2.0 1.0))))
(displayln (string-append "Spheres union: " (to-string (vol_spheres_union 2.0 2.0 1.0))))
(displayln (string-append "Hollow Circular Cylinder: " (to-string (vol_hollow_circular_cylinder 1.0 2.0 3.0))))
(displayln (string-append "Icosahedron: " (to-string (vol_icosahedron 2.5))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
