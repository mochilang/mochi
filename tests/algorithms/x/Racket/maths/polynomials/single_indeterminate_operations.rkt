;; Generated by Mochi 0.10.61 on 2025-08-08 16:56 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (copy_list xs)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (begin
    (let/ec _cont
      (set! res (append res (list (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (polynomial_new degree coeffs)
  (let/ec _return (begin
(if (not (equal? (cond [(not coeffs) 0] [(string? coeffs) (string-length coeffs)] [(hash? coeffs) (hash-count coeffs)] [else (length coeffs)]) (let ([__l degree] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) (let ()
(panic "The number of coefficients should be equal to the degree + 1.")
) (void))
(_return (let ([h (make-hash)]) (hash-set! h "degree" degree) (hash-set! h "coefficients" (copy_list coeffs)) h))
))
)
(define (add p q)
  (let/ec _return (begin
(if (> (if p (hash-ref p "degree" #f) #f) (if q (hash-ref q "degree" #f) #f)) (let ()
(define coeffs (copy_list (if p (hash-ref p "coefficients" #f) #f)))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (if q (hash-ref q "degree" #f) #f)) (begin
    (let/ec _cont
      (set! coeffs (list-set coeffs (int i) (let ([__l (if coeffs (if (hash? coeffs) (hash-ref coeffs i #f) (list-ref coeffs (int i))) #f)] [__r (if (if q (hash-ref q "coefficients" #f) #f) (if (hash? (if q (hash-ref q "coefficients" #f) #f)) (hash-ref (if q (hash-ref q "coefficients" #f) #f) i #f) (list-ref (if q (hash-ref q "coefficients" #f) #f) (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "degree" (if p (hash-ref p "degree" #f) #f)) (hash-set! h "coefficients" coeffs) h))
) (let ()
(define coeffs (copy_list (if q (hash-ref q "coefficients" #f) #f)))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (if p (hash-ref p "degree" #f) #f)) (begin
    (let/ec _cont
      (set! coeffs (list-set coeffs (int i) (let ([__l (if coeffs (if (hash? coeffs) (hash-ref coeffs i #f) (list-ref coeffs (int i))) #f)] [__r (if (if p (hash-ref p "coefficients" #f) #f) (if (hash? (if p (hash-ref p "coefficients" #f) #f)) (hash-ref (if p (hash-ref p "coefficients" #f) #f) i #f) (list-ref (if p (hash-ref p "coefficients" #f) #f) (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "degree" (if q (hash-ref q "degree" #f) #f)) (hash-set! h "coefficients" coeffs) h))
))
))
)
(define (neg p)
  (let/ec _return (begin
(define coeffs (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (if p (hash-ref p "degree" #f) #f)) (begin
    (let/ec _cont
      (set! coeffs (append coeffs (list (- (if (if p (hash-ref p "coefficients" #f) #f) (if (hash? (if p (hash-ref p "coefficients" #f) #f)) (hash-ref (if p (hash-ref p "coefficients" #f) #f) i #f) (list-ref (if p (hash-ref p "coefficients" #f) #f) (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "degree" (if p (hash-ref p "degree" #f) #f)) (hash-set! h "coefficients" coeffs) h))
))
)
(define (sub p q)
  (let/ec _return (begin
(_return (add p (neg q)))
))
)
(define (mul p q)
  (let/ec _return (begin
(define size (let ([__l (let ([__l (if p (hash-ref p "degree" #f) #f)] [__r (if q (hash-ref q "degree" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define coeffs (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i size) (begin
    (let/ec _cont
      (set! coeffs (append coeffs (list 0.0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (<= i (if p (hash-ref p "degree" #f) #f)) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (<= j (if q (hash-ref q "degree" #f) #f)) (begin
    (let/ec _cont
      (set! coeffs (list-set coeffs (int (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ([__l (if coeffs (if (hash? coeffs) (hash-ref coeffs (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref coeffs (int (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (* (if (if p (hash-ref p "coefficients" #f) #f) (if (hash? (if p (hash-ref p "coefficients" #f) #f)) (hash-ref (if p (hash-ref p "coefficients" #f) #f) i #f) (list-ref (if p (hash-ref p "coefficients" #f) #f) (int i))) #f) (if (if q (hash-ref q "coefficients" #f) #f) (if (hash? (if q (hash-ref q "coefficients" #f) #f)) (hash-ref (if q (hash-ref q "coefficients" #f) #f) j #f) (list-ref (if q (hash-ref q "coefficients" #f) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "degree" (let ([__l (if p (hash-ref p "degree" #f) #f)] [__r (if q (hash-ref q "degree" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "coefficients" coeffs) h))
))
)
(define (power base exp)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (begin
    (let/ec _cont
      (set! result (* result base))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (evaluate p x)
  (let/ec _return (begin
(define result 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (if p (hash-ref p "degree" #f) #f)) (begin
    (let/ec _cont
      (set! result (let ([__l result] [__r (* (if (if p (hash-ref p "coefficients" #f) #f) (if (hash? (if p (hash-ref p "coefficients" #f) #f)) (hash-ref (if p (hash-ref p "coefficients" #f) #f) i #f) (list-ref (if p (hash-ref p "coefficients" #f) #f) (int i))) #f) (power x i))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (poly_to_string p)
  (let/ec _return (begin
(define s "")
(define i (if p (hash-ref p "degree" #f) #f))
(let/ec _break (let loop ()
  (if (>= i 0) (begin
    (let/ec _cont
      (define coeff (if (if p (hash-ref p "coefficients" #f) #f) (if (hash? (if p (hash-ref p "coefficients" #f) #f)) (hash-ref (if p (hash-ref p "coefficients" #f) #f) i #f) (list-ref (if p (hash-ref p "coefficients" #f) #f) (int i))) #f))
      (if (not (equal? coeff 0.0)) (let ()
(if (> (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (let ()
(if (> coeff 0.0) (let ()
(set! s (string-append s " + "))
) (let ()
(set! s (string-append s " - "))
))
) (let ()
(if (< coeff 0.0) (let ()
(set! s (string-append s "-"))
) (void))
))
(define abs_coeff (if (< coeff 0.0) (- coeff) coeff))
(if (equal? i 0) (let ()
(set! s (string-append s (format "~a" abs_coeff)))
) (let ()
(if (equal? i 1) (let ()
(set! s (string-append (string-append s (format "~a" abs_coeff)) "x"))
) (let ()
(set! s (string-append (string-append (string-append s (format "~a" abs_coeff)) "x^") (format "~a" i)))
))
))
) (void))
      (set! i (- i 1))
    )
    (loop)) (void))))
(if (string=? s "") (let ()
(set! s "0")
) (void))
(_return s)
))
)
(define (derivative p)
  (let/ec _return (begin
(if (equal? (if p (hash-ref p "degree" #f) #f) 0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "degree" 0) (hash-set! h "coefficients" (list 0.0)) h))
) (void))
(define coeffs (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if p (hash-ref p "degree" #f) #f)) (begin
    (let/ec _cont
      (set! coeffs (append coeffs (list (* (if (if p (hash-ref p "coefficients" #f) #f) (if (hash? (if p (hash-ref p "coefficients" #f) #f)) (hash-ref (if p (hash-ref p "coefficients" #f) #f) (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if p (hash-ref p "coefficients" #f) #f) (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (float (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "degree" (- (if p (hash-ref p "degree" #f) #f) 1)) (hash-set! h "coefficients" coeffs) h))
))
)
(define (integral p constant)
  (let/ec _return (begin
(define coeffs (list constant))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (if p (hash-ref p "degree" #f) #f)) (begin
    (let/ec _cont
      (set! coeffs (append coeffs (list (/ (if (if p (hash-ref p "coefficients" #f) #f) (if (hash? (if p (hash-ref p "coefficients" #f) #f)) (hash-ref (if p (hash-ref p "coefficients" #f) #f) i #f) (list-ref (if p (hash-ref p "coefficients" #f) #f) (int i))) #f) (float (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "degree" (let ([__l (if p (hash-ref p "degree" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "coefficients" coeffs) h))
))
)
(define (equals p q)
  (let/ec _return (begin
(if (not (equal? (if p (hash-ref p "degree" #f) #f) (if q (hash-ref q "degree" #f) #f))) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i (if p (hash-ref p "degree" #f) #f)) (begin
    (let/ec _cont
      (if (not (equal? (if (if p (hash-ref p "coefficients" #f) #f) (if (hash? (if p (hash-ref p "coefficients" #f) #f)) (hash-ref (if p (hash-ref p "coefficients" #f) #f) i #f) (list-ref (if p (hash-ref p "coefficients" #f) #f) (int i))) #f) (if (if q (hash-ref q "coefficients" #f) #f) (if (hash? (if q (hash-ref q "coefficients" #f) #f)) (hash-ref (if q (hash-ref q "coefficients" #f) #f) i #f) (list-ref (if q (hash-ref q "coefficients" #f) #f) (int i))) #f))) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (not_equals p q)
  (let/ec _return (begin
(_return (not (equals p q)))
))
)
(define (test_polynomial)
  (let/ec _return (begin
(define p (polynomial_new 2 (list 1.0 2.0 3.0)))
(define q (polynomial_new 2 (list 1.0 2.0 3.0)))
(if (not (string=? (poly_to_string (add p q)) "6x^2 + 4x + 2")) (let ()
(panic "add failed")
) (void))
(if (not (string=? (poly_to_string (sub p q)) "0")) (let ()
(panic "sub failed")
) (void))
(if (not (equal? (evaluate p 2.0) 17.0)) (let ()
(panic "evaluate failed")
) (void))
(if (not (string=? (poly_to_string (derivative p)) "6x + 2")) (let ()
(panic "derivative failed")
) (void))
(define integ (poly_to_string (integral p 0.0)))
(if (not (string=? integ "1x^3 + 1x^2 + 1x")) (let ()
(panic "integral failed")
) (void))
(if (not (equals p q)) (let ()
(panic "equals failed")
) (void))
(if (not_equals p q) (let ()
(panic "not_equals failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_polynomial)
(define p (polynomial_new 2 (list 1.0 2.0 3.0)))
(define d (derivative p))
(displayln (poly_to_string d))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
