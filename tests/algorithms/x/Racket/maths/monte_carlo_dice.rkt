;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define lcg_seed 1)
(define (lcg_rand)
  (let/ec _return (begin
(set! lcg_seed (modulo (let ([__l (* lcg_seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return lcg_seed)
))
)
(define (roll)
  (let/ec _return (begin
(define rv (exact->inexact (lcg_rand)))
(define r (/ (* rv 6.0) 2147483648.0))
(_return (let ([__l 1] [__r (int r)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (round2 x)
  (let/ec _return (begin
(define y (let ([__l (* x 100.0)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define z (int y))
(_return (/ (exact->inexact z) 100.0))
))
)
(define (throw_dice num_throws num_dice)
  (let/ec _return (begin
(define count_of_sum (list))
(define max_sum (let ([__l (* num_dice 6)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define i 0)
(let/ec _break (let loop ()
  (if (< i max_sum) (let/ec _cont
    (set! count_of_sum (append count_of_sum (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define t 0)
(let/ec _break (let loop ()
  (if (< t num_throws) (let/ec _cont
    (define s 0)
    (define d 0)
    (let/ec _break (let loop ()
  (if (< d num_dice) (let/ec _cont
    (set! s (let ([__l s] [__r (roll)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! count_of_sum (list-set count_of_sum (int s) (let ([__l (if count_of_sum (if (hash? count_of_sum) (hash-ref count_of_sum s #f) (list-ref count_of_sum (int s))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define probability (list))
(set! i num_dice)
(let/ec _break (let loop ()
  (if (< i max_sum) (let/ec _cont
    (define p (/ (* (exact->inexact (if count_of_sum (if (hash? count_of_sum) (hash-ref count_of_sum i #f) (list-ref count_of_sum (int i))) #f)) 100.0) (exact->inexact num_throws)))
    (set! probability (append probability (list (round2 p))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return probability)
))
)
(define (main)
  (let/ec _return (begin
(set! lcg_seed 1)
(define result (throw_dice 10000 2))
(displayln (format "~a" result))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
