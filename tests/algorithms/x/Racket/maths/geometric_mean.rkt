;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (abs x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (pow_int base exp)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (nth_root x n)
  (let/ec _return (begin
(if (equal? x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (define denom (pow_int guess (- n 1)))
    (set! guess (/ (let ([__l (* (exact->inexact (- n 1)) guess)] [__r (/ x denom)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (exact->inexact n)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (round_nearest x)
  (let/ec _return (begin
(if (>= x 0.0) (let ()
(define n (int (let ([__l x] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return (exact->inexact n))
) (void))
(define n (int (- x 0.5)))
(_return (exact->inexact n))
))
)
(define (compute_geometric_mean nums)
  (let/ec _return (begin
(if (equal? (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)]) 0) (let ()
(panic "no numbers")
) (void))
(define product 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let/ec _cont
    (set! product (* product (if nums (if (hash? nums) (hash-ref nums i #f) (list-ref nums (int i))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (and (< product 0.0) (equal? (modulo (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)]) 2) 0)) (let ()
(panic "Cannot Compute Geometric Mean for these numbers.")
) (void))
(define mean (nth_root (abs product) (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])))
(if (< product 0.0) (let ()
(set! mean (- mean))
) (void))
(define possible (round_nearest mean))
(if (equal? (pow_int possible (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) product) (let ()
(set! mean possible)
) (void))
(_return mean)
))
)
(define (test_compute_geometric_mean)
  (let/ec _return (begin
(define eps 0.0001)
(define m1 (compute_geometric_mean (list 2.0 8.0)))
(if (> (abs (- m1 4.0)) eps) (let ()
(panic "test1 failed")
) (void))
(define m2 (compute_geometric_mean (list 5.0 125.0)))
(if (> (abs (- m2 25.0)) eps) (let ()
(panic "test2 failed")
) (void))
(define m3 (compute_geometric_mean (list 1.0 0.0)))
(if (> (abs (- m3 0.0)) eps) (let ()
(panic "test3 failed")
) (void))
(define m4 (compute_geometric_mean (list 1.0 5.0 25.0 5.0)))
(if (> (abs (- m4 5.0)) eps) (let ()
(panic "test4 failed")
) (void))
(define m5 (compute_geometric_mean (list (- 5.0) 25.0 1.0)))
(if (> (abs (let ([__l m5] [__r 5.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) eps) (let ()
(panic "test5 failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_compute_geometric_mean)
(displayln (compute_geometric_mean (list (- 3.0) (- 27.0))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
