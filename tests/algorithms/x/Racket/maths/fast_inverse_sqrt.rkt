;; Generated by Mochi 0.10.66 on 2025-08-16 12:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) 0)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (pow2_int n)
  (let/ec _return (begin
(define result 1)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (* result 2))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (pow2_float n)
  (let/ec _return (begin
(define result 1.0)
(if (let ([__l n] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (* result 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (let ()
(define i 0)
(define m (- 0 n))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r m]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (/ result 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
(_return result)
))
)
(define (lshift num k)
  (let/ec _return (begin
(define result num)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r k]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (* result 2))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (rshift num k)
  (let/ec _return (begin
(define result num)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r k]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (floor (/ (- result (modulo result 2)) 2)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (log2_floor x)
  (let/ec _return (begin
(define n x)
(define e 0)
(let/ec _break (let loop ()
  (if (let ([__l n] [__r 2.0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! n (/ n 2.0))
      (set! e (let ([__l e] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (let ([__l n] [__r 1.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! n (* n 2.0))
      (set! e (- e 1))
    )
    (loop)) (void))))
(_return e)
))
)
(define (float_to_bits x)
  (let/ec _return (begin
(define num x)
(define sign 0)
(if (let ([__l num] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! sign 1)
(set! num (- num))
) (void))
(define exp_ (log2_floor num))
(define pow (pow2_float exp_))
(define normalized (/ num pow))
(define frac (- normalized 1.0))
(define mantissa (int (* frac (pow2_float 23))))
(define exp_bits (let ([__l exp_] [__r 127]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (let ([__l (let ([__l (lshift sign 31)] [__r (lshift exp_bits 23)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r mantissa]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (bits_to_float bits)
  (let/ec _return (begin
(define sign_bit (modulo (rshift bits 31) 2))
(define sign 1.0)
(if (equal? sign_bit 1) (let ()
(set! sign (- 1.0))
) (void))
(define exp_bits (modulo (rshift bits 23) 256))
(define exp_ (- exp_bits 127))
(define mantissa_bits (modulo bits (pow2_int 23)))
(define mantissa (let ([__l 1.0] [__r (/ (exact->inexact mantissa_bits) (pow2_float 23))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (* (* sign mantissa) (pow2_float exp_)))
))
)
(define (absf x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(_return 0.0)
) (void))
(define guess (/ x 2.0))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 20]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return guess)
))
)
(define (is_close a b rel_tol)
  (let/ec _return (begin
(_return (let ([__l (absf (- a b))] [__r (* rel_tol (absf b))]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])))
))
)
(define (fast_inverse_sqrt number)
  (let/ec _return (begin
(if (let ([__l number] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(panic "Input must be a positive number.")
) (void))
(define i (float_to_bits number))
(define magic 1597463007)
(define y_bits (- magic (rshift i 1)))
(define y (bits_to_float y_bits))
(set! y (* y (- 1.5 (* (* (* 0.5 number) y) y))))
(_return y)
))
)
(define (test_fast_inverse_sqrt)
  (let/ec _return (begin
(if (let ([__l (absf (- (fast_inverse_sqrt 10.0) 0.3156857923527257))] [__r 0.0001]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(panic "fast_inverse_sqrt(10) failed")
) (void))
(if (let ([__l (absf (- (fast_inverse_sqrt 4.0) 0.49915357479239103))] [__r 0.0001]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(panic "fast_inverse_sqrt(4) failed")
) (void))
(if (let ([__l (absf (- (fast_inverse_sqrt 4.1) 0.4932849504615651))] [__r 0.0001]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(panic "fast_inverse_sqrt(4.1) failed")
) (void))
(define i 50)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 60]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define y (fast_inverse_sqrt (exact->inexact i)))
      (define actual (/ 1.0 (sqrtApprox (exact->inexact i))))
      (if (not (is_close y actual 0.00132)) (let ()
(panic "relative error too high")
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(test_fast_inverse_sqrt)
(define i 5)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 100]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define diff (- (/ 1.0 (sqrtApprox (exact->inexact i))) (fast_inverse_sqrt (exact->inexact i))))
      (displayln (string-append (string-append (to-string i) ": ") (to-string diff)))
      (set! i (let ([__l i] [__r 5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
