;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (mod_pow base exponent modulus)
  (let/ec _return (begin
(define result 1)
(define b (modulo base modulus))
(define e exponent)
(let/ec _break (let loop ()
  (if (> e 0) (let/ec _cont
    (if (equal? (modulo e 2) 1) (let ()
(set! result (modulo (* result b) modulus))
) (void))
    (set! b (modulo (* b b) modulus))
    (set! e (floor (/ e 2)))
    (loop)) (void))))
(_return result)
))
)
(define (pow_float base exponent)
  (let/ec _return (begin
(define exp exponent)
(define result 1.0)
(if (< exp 0) (let ()
(set! exp (- exp))
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (< exponent 0) (let ()
(set! result (/ 1.0 result))
) (void))
(_return result)
))
)
(define (hex_digit n)
  (let/ec _return (begin
(if (< n 10) (let ()
(_return (format "~a" n))
) (void))
(define letters (list "a" "b" "c" "d" "e" "f"))
(_return (if letters (if (hash? letters) (hash-ref letters (- n 10) #f) (list-ref letters (int (- n 10)))) #f))
))
)
(define (floor_float x)
  (let/ec _return (begin
(define i (int x))
(if (> (exact->inexact i) x) (let ()
(set! i (- i 1))
) (void))
(_return (exact->inexact i))
))
)
(define (subsum digit_pos_to_extract denominator_addend precision)
  (let/ec _return (begin
(define total 0.0)
(define sum_index 0)
(let/ec _break (let loop ()
  (if (< sum_index (let ([__l digit_pos_to_extract] [__r precision]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (define denominator (let ([__l (* 8 sum_index)] [__r denominator_addend]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (< sum_index digit_pos_to_extract) (let ()
(define exponent (- (- digit_pos_to_extract 1) sum_index))
(define exponential_term (mod_pow 16 exponent denominator))
(set! total (let ([__l total] [__r (/ (exact->inexact exponential_term) (exact->inexact denominator))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(define exponent (- (- digit_pos_to_extract 1) sum_index))
(define exponential_term (pow_float 16.0 exponent))
(set! total (let ([__l total] [__r (/ exponential_term (exact->inexact denominator))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (set! sum_index (let ([__l sum_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return total)
))
)
(define (bailey_borwein_plouffe digit_position precision)
  (let/ec _return (begin
(if (<= digit_position 0) (let ()
(panic "Digit position must be a positive integer")
) (void))
(if (< precision 0) (let ()
(panic "Precision must be a nonnegative integer")
) (void))
(define sum_result (- (- (- (* 4.0 (subsum digit_position 1 precision)) (* 2.0 (subsum digit_position 4 precision))) (* 1.0 (subsum digit_position 5 precision))) (* 1.0 (subsum digit_position 6 precision))))
(define fraction (- sum_result (floor_float sum_result)))
(define digit (int (* fraction 16.0)))
(define hd (hex_digit digit))
(_return hd)
))
)
(define digits "")
(define i 1)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (<= i 10) (let/ec _cont
    (set! digits (string-append digits (bailey_borwein_plouffe i 1000)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln digits)
(displayln (bailey_borwein_plouffe 5 10000))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
