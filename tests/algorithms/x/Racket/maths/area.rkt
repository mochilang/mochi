;; Generated by Mochi 0.10.66 on 2025-08-16 12:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) 0)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define PI 3.141592653589793)
(define TWO_PI 6.283185307179586)
(define (_mod x m)
  (let/ec _return (begin
(_return (- x (* (exact->inexact (int (/ x m))) m)))
))
)
(define (sin_approx x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) TWO_PI) PI))
(define y2 (* y y))
(define y3 (* y2 y))
(define y5 (* y3 y2))
(define y7 (* y5 y2))
(_return (- (let ([__l (- y (/ y3 6.0))] [__r (/ y5 120.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y7 5040.0)))
))
)
(define (cos_approx x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) TWO_PI) PI))
(define y2 (* y y))
(define y4 (* y2 y2))
(define y6 (* y4 y2))
(_return (- (let ([__l (- 1.0 (/ y2 2.0))] [__r (/ y4 24.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y6 720.0)))
))
)
(define (tan_approx x)
  (let/ec _return (begin
(_return (/ (sin_approx x) (cos_approx x)))
))
)
(define (sqrt_approx x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(_return 0.0)
) (void))
(define guess (/ x 2.0))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 20]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return guess)
))
)
(define (surface_area_cube side_length)
  (let/ec _return (begin
(if (let ([__l side_length] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(displayln "ValueError: surface_area_cube() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* (* 6.0 side_length) side_length))
))
)
(define (surface_area_cuboid length_ breadth height)
  (let/ec _return (begin
(if (or (or (let ([__l length_] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l breadth] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: surface_area_cuboid() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* 2.0 (let ([__l (let ([__l (* length_ breadth)] [__r (* breadth height)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* length_ height)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (surface_area_sphere radius)
  (let/ec _return (begin
(if (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(displayln "ValueError: surface_area_sphere() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* (* (* 4.0 PI) radius) radius))
))
)
(define (surface_area_hemisphere radius)
  (let/ec _return (begin
(if (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(displayln "ValueError: surface_area_hemisphere() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* (* (* 3.0 PI) radius) radius))
))
)
(define (surface_area_cone radius height)
  (let/ec _return (begin
(if (or (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: surface_area_cone() only accepts non-negative values")
(_return 0.0)
) (void))
(define slant (sqrt_approx (let ([__l (* height height)] [__r (* radius radius)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return (* (* PI radius) (let ([__l radius] [__r slant]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (surface_area_conical_frustum radius1 radius2 height)
  (let/ec _return (begin
(if (or (or (let ([__l radius1] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l radius2] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: surface_area_conical_frustum() only accepts non-negative values")
(_return 0.0)
) (void))
(define slant (sqrt_approx (let ([__l (* height height)] [__r (* (- radius1 radius2) (- radius1 radius2))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(_return (* PI (let ([__l (let ([__l (* slant (let ([__l radius1] [__r radius2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))] [__r (* radius1 radius1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* radius2 radius2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (surface_area_cylinder radius height)
  (let/ec _return (begin
(if (or (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: surface_area_cylinder() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* (* (* 2.0 PI) radius) (let ([__l height] [__r radius]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (surface_area_torus torus_radius tube_radius)
  (let/ec _return (begin
(if (or (let ([__l torus_radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l tube_radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: surface_area_torus() only accepts non-negative values")
(_return 0.0)
) (void))
(if (let ([__l torus_radius] [__r tube_radius]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(displayln "ValueError: surface_area_torus() does not support spindle or self intersecting tori")
(_return 0.0)
) (void))
(_return (* (* (* (* 4.0 PI) PI) torus_radius) tube_radius))
))
)
(define (area_rectangle length_ width)
  (let/ec _return (begin
(if (or (let ([__l length_] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l width] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: area_rectangle() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* length_ width))
))
)
(define (area_square side_length)
  (let/ec _return (begin
(if (let ([__l side_length] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(displayln "ValueError: area_square() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* side_length side_length))
))
)
(define (area_triangle base height)
  (let/ec _return (begin
(if (or (let ([__l base] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: area_triangle() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (/ (* base height) 2.0))
))
)
(define (area_triangle_three_sides side1 side2 side3)
  (let/ec _return (begin
(if (or (or (let ([__l side1] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l side2] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l side3] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: area_triangle_three_sides() only accepts non-negative values")
(_return 0.0)
) (void))
(if (or (or (let ([__l (let ([__l side1] [__r side2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r side3]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l (let ([__l side1] [__r side3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r side2]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l (let ([__l side2] [__r side3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r side1]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: Given three sides do not form a triangle")
(_return 0.0)
) (void))
(define s (/ (let ([__l (let ([__l side1] [__r side2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r side3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
(define prod (* (* (* s (- s side1)) (- s side2)) (- s side3)))
(define res (sqrt_approx prod))
(_return res)
))
)
(define (area_parallelogram base height)
  (let/ec _return (begin
(if (or (let ([__l base] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: area_parallelogram() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* base height))
))
)
(define (area_trapezium base1 base2 height)
  (let/ec _return (begin
(if (or (or (let ([__l base1] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l base2] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l height] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: area_trapezium() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* (* 0.5 (let ([__l base1] [__r base2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) height))
))
)
(define (area_circle radius)
  (let/ec _return (begin
(if (let ([__l radius] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(displayln "ValueError: area_circle() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* (* PI radius) radius))
))
)
(define (area_ellipse radius_x radius_y)
  (let/ec _return (begin
(if (or (let ([__l radius_x] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l radius_y] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: area_ellipse() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* (* PI radius_x) radius_y))
))
)
(define (area_rhombus diagonal1 diagonal2)
  (let/ec _return (begin
(if (or (let ([__l diagonal1] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l diagonal2] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(displayln "ValueError: area_rhombus() only accepts non-negative values")
(_return 0.0)
) (void))
(_return (* (* 0.5 diagonal1) diagonal2))
))
)
(define (area_reg_polygon sides length_)
  (let/ec _return (begin
(if (let ([__l sides] [__r 3]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(displayln "ValueError: area_reg_polygon() only accepts integers greater than or equal to three as number of sides")
(_return 0.0)
) (void))
(if (let ([__l length_] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(displayln "ValueError: area_reg_polygon() only accepts non-negative values as length of a side")
(_return 0.0)
) (void))
(define n (exact->inexact sides))
(_return (/ (* (* n length_) length_) (* 4.0 (tan_approx (/ PI n)))))
))
)
(define TRI_THREE_SIDES (area_triangle_three_sides 5.0 12.0 13.0))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln "[DEMO] Areas of various geometric shapes:")
(displayln (string-append "Rectangle: " (to-string (area_rectangle 10.0 20.0))))
(displayln (string-append "Square: " (to-string (area_square 10.0))))
(displayln (string-append "Triangle: " (to-string (area_triangle 10.0 10.0))))
(displayln (string-append "Triangle Three Sides: " (to-string TRI_THREE_SIDES)))
(displayln (string-append "Parallelogram: " (to-string (area_parallelogram 10.0 20.0))))
(displayln (string-append "Rhombus: " (to-string (area_rhombus 10.0 20.0))))
(displayln (string-append "Trapezium: " (to-string (area_trapezium 10.0 20.0 30.0))))
(displayln (string-append "Circle: " (to-string (area_circle 20.0))))
(displayln (string-append "Ellipse: " (to-string (area_ellipse 10.0 20.0))))
(displayln "")
(displayln "Surface Areas of various geometric shapes:")
(displayln (string-append "Cube: " (to-string (surface_area_cube 20.0))))
(displayln (string-append "Cuboid: " (to-string (surface_area_cuboid 10.0 20.0 30.0))))
(displayln (string-append "Sphere: " (to-string (surface_area_sphere 20.0))))
(displayln (string-append "Hemisphere: " (to-string (surface_area_hemisphere 20.0))))
(displayln (string-append "Cone: " (to-string (surface_area_cone 10.0 20.0))))
(displayln (string-append "Conical Frustum: " (to-string (surface_area_conical_frustum 10.0 20.0 30.0))))
(displayln (string-append "Cylinder: " (to-string (surface_area_cylinder 10.0 20.0))))
(displayln (string-append "Torus: " (to-string (surface_area_torus 20.0 10.0))))
(displayln (string-append "Equilateral Triangle: " (to-string (area_reg_polygon 3 10.0))))
(displayln (string-append "Square: " (to-string (area_reg_polygon 4 10.0))))
(displayln (string-append "Regular Pentagon: " (to-string (area_reg_polygon 5 10.0))))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
