;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (identity n)
  (let/ec _return (begin
(define i 0)
(define mat (list))
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (if (equal? i j) (let ()
(set! row (append row (list 1)))
) (let ()
(set! row (append row (list 0)))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! mat (append mat (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return mat)
))
)
(define (matrix_mul a b)
  (let/ec _return (begin
(define n (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (define cell 0)
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k n) (let/ec _cont
    (set! cell (let ([__l cell] [__r (* (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) k #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int k))) #f) (if (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) (if (hash? (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) j #f) (list-ref (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row (append row (list cell)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! result (append result (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (matrix_pow base exp)
  (let/ec _return (begin
(define result (identity (cond [(not base) 0] [(string? base) (string-length base)] [(hash? base) (hash-count base)] [else (length base)])))
(define b base)
(define e exp)
(let/ec _break (let loop ()
  (if (> e 0) (let/ec _cont
    (if (equal? (modulo e 2) 1) (let ()
(set! result (matrix_mul result b))
) (void))
    (set! b (matrix_mul b b))
    (set! e (floor (/ e 2)))
    (loop)) (void))))
(_return result)
))
)
(define (fibonacci_with_matrix_exponentiation n f1 f2)
  (let/ec _return (begin
(if (equal? n 1) (let ()
(_return f1)
) (void))
(if (equal? n 2) (let ()
(_return f2)
) (void))
(define base (list (list 1 1) (list 1 0)))
(define m (matrix_pow base (- n 2)))
(_return (let ([__l (* f2 (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 0))) #f))] [__r (* f1 (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 1 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 1))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (simple_fibonacci n f1 f2)
  (let/ec _return (begin
(if (equal? n 1) (let ()
(_return f1)
) (void))
(if (equal? n 2) (let ()
(_return f2)
) (void))
(define a f1)
(define b f2)
(define count (- n 2))
(let/ec _break (let loop ()
  (if (> count 0) (let/ec _cont
    (define tmp (let ([__l a] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! a b)
    (set! b tmp)
    (set! count (- count 1))
    (loop)) (void))))
(_return b)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (format "~a" (fibonacci_with_matrix_exponentiation 1 5 6)))
(displayln (format "~a" (fibonacci_with_matrix_exponentiation 2 10 11)))
(displayln (format "~a" (fibonacci_with_matrix_exponentiation 13 0 1)))
(displayln (format "~a" (fibonacci_with_matrix_exponentiation 10 5 9)))
(displayln (format "~a" (fibonacci_with_matrix_exponentiation 9 2 3)))
(displayln (format "~a" (simple_fibonacci 1 5 6)))
(displayln (format "~a" (simple_fibonacci 2 10 11)))
(displayln (format "~a" (simple_fibonacci 13 0 1)))
(displayln (format "~a" (simple_fibonacci 10 5 9)))
(displayln (format "~a" (simple_fibonacci 9 2 3)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
