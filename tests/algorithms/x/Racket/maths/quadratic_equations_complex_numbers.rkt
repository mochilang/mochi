;; Generated by Mochi 0.10.61 on 2025-08-08 17:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (add a b)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (let ([__l (if a (hash-ref a "re" #f) #f)] [__r (if b (hash-ref b "re" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "im" (let ([__l (if a (hash-ref a "im" #f) #f)] [__r (if b (hash-ref b "im" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
))
)
(define (sub a b)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (- (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "re" #f) #f))) (hash-set! h "im" (- (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "im" #f) #f))) h))
))
)
(define (div_real a r)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (/ (if a (hash-ref a "re" #f) #f) r)) (hash-set! h "im" (/ (if a (hash-ref a "im" #f) #f) r)) h))
))
)
(define (sqrt_newton x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess (/ x 2.0))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (begin
    (let/ec _cont
      (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return guess)
))
)
(define (sqrt_to_complex d)
  (let/ec _return (begin
(if (>= d 0.0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "re" (sqrt_newton d)) (hash-set! h "im" 0.0) h))
) (void))
(_return (let ([h (make-hash)]) (hash-set! h "re" 0.0) (hash-set! h "im" (sqrt_newton (- d))) h))
))
)
(define (quadratic_roots a b c)
  (let/ec _return (begin
(if (equal? a 0.0) (let ()
(displayln "ValueError: coefficient 'a' must not be zero")
(_return (list))
) (void))
(define delta (- (* b b) (* (* 4.0 a) c)))
(define sqrt_d (sqrt_to_complex delta))
(define minus_b (let ([h (make-hash)]) (hash-set! h "re" (- b)) (hash-set! h "im" 0.0) h))
(define two_a (* 2.0 a))
(define root1 (div_real (add minus_b sqrt_d) two_a))
(define root2 (div_real (sub minus_b sqrt_d) two_a))
(_return (list root1 root2))
))
)
(define (root_str r)
  (let/ec _return (begin
(if (equal? (if r (hash-ref r "im" #f) #f) 0.0) (let ()
(_return (to-string (if r (hash-ref r "re" #f) #f)))
) (void))
(define s (to-string (if r (hash-ref r "re" #f) #f)))
(if (>= (if r (hash-ref r "im" #f) #f) 0.0) (let ()
(set! s (string-append (string-append (string-append s "+") (to-string (if r (hash-ref r "im" #f) #f))) "i"))
) (let ()
(set! s (string-append (string-append s (to-string (if r (hash-ref r "im" #f) #f))) "i"))
))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define roots (quadratic_roots 5.0 6.0 1.0))
(if (equal? (cond [(not roots) 0] [(string? roots) (string-length roots)] [(hash? roots) (hash-count roots)] [else (length roots)]) 2) (let ()
(displayln (string-append (string-append (string-append "The solutions are: " (root_str (if roots (if (hash? roots) (hash-ref roots 0 #f) (list-ref roots (int 0))) #f))) " and ") (root_str (if roots (if (hash? roots) (hash-ref roots 1 #f) (list-ref roots (int 1))) #f))))
) (void))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
