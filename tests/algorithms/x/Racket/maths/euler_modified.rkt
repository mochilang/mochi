;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (ceil_float x)
  (let/ec _return (begin
(define i (int x))
(if (> x (exact->inexact i)) (let ()
(_return (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return i)
))
)
(define (exp_approx x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (< n 20) (let/ec _cont
    (set! term (/ (* term x) (exact->inexact n)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (euler_modified ode_func y0 x0 step x_end)
  (let/ec _return (begin
(define n (ceil_float (/ (- x_end x0) step)))
(define y (list y0))
(define x x0)
(define k 0)
(let/ec _break (let loop ()
  (if (< k n) (let/ec _cont
    (define y_predict (let ([__l (if y (if (hash? y) (hash-ref y k #f) (list-ref y (int k))) #f)] [__r (* step (ode_func x (if y (if (hash? y) (hash-ref y k #f) (list-ref y (int k))) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define slope1 (ode_func x (if y (if (hash? y) (hash-ref y k #f) (list-ref y (int k))) #f)))
    (define slope2 (ode_func (let ([__l x] [__r step]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) y_predict))
    (define y_next (let ([__l (if y (if (hash? y) (hash-ref y k #f) (list-ref y (int k))) #f)] [__r (* (/ step 2.0) (let ([__l slope1] [__r slope2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! y (append y (list y_next)))
    (set! x (let ([__l x] [__r step]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return y)
))
)
(define (f1 x y)
  (let/ec _return (begin
(_return (* (* (* (- 2.0) x) y) y))
))
)
(define (f2 x y)
  (let/ec _return (begin
(_return (let ([__l (* (- 2.0) y)] [__r (* (* (* x x) x) (exp_approx (* (- 2.0) x)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (main)
  (let/ec _return (begin
(define y1 (euler_modified f1 1.0 0.0 0.2 1.0))
(displayln (if y1 (if (hash? y1) (hash-ref y1 (- (cond [(not y1) 0] [(string? y1) (string-length y1)] [(hash? y1) (hash-count y1)] [else (length y1)]) 1) #f) (list-ref y1 (int (- (cond [(not y1) 0] [(string? y1) (string-length y1)] [(hash? y1) (hash-count y1)] [else (length y1)]) 1)))) #f))
(define y2 (euler_modified f2 1.0 0.0 0.1 0.3))
(displayln (if y2 (if (hash? y2) (hash-ref y2 (- (cond [(not y2) 0] [(string? y2) (string-length y2)] [(hash? y2) (hash-count y2)] [else (length y2)]) 1) #f) (list-ref y2 (int (- (cond [(not y2) 0] [(string? y2) (string-length y2)] [(hash? y2) (hash-count y2)] [else (length y2)]) 1)))) #f))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
