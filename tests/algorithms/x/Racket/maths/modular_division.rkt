;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (mod a n)
  (let/ec _return (begin
(define r (modulo a n))
(if (< r 0) (let ()
(_return (let ([__l r] [__r n]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return r)
))
)
(define (greatest_common_divisor a b)
  (let/ec _return (begin
(define x (if (< a 0) (- a) a))
(define y (if (< b 0) (- b) b))
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (let/ec _cont
    (define t (modulo x y))
    (set! x y)
    (set! y t)
    (loop)) (void))))
(_return x)
))
)
(define (extended_gcd a b)
  (let/ec _return (begin
(if (equal? b 0) (let ()
(_return (list a 1 0))
) (void))
(define res (extended_gcd b (modulo a b)))
(define d (if res (if (hash? res) (hash-ref res 0 #f) (list-ref res (int 0))) #f))
(define p (if res (if (hash? res) (hash-ref res 1 #f) (list-ref res (int 1))) #f))
(define q (if res (if (hash? res) (hash-ref res 2 #f) (list-ref res (int 2))) #f))
(define x q)
(define y (- p (* q (floor (/ a b)))))
(_return (list d x y))
))
)
(define (extended_euclid a b)
  (let/ec _return (begin
(if (equal? b 0) (let ()
(_return (list 1 0))
) (void))
(define res (extended_euclid b (modulo a b)))
(define x (if res (if (hash? res) (hash-ref res 1 #f) (list-ref res (int 1))) #f))
(define y (- (if res (if (hash? res) (hash-ref res 0 #f) (list-ref res (int 0))) #f) (* (floor (/ a b)) (if res (if (hash? res) (hash-ref res 1 #f) (list-ref res (int 1))) #f))))
(_return (list x y))
))
)
(define (invert_modulo a n)
  (let/ec _return (begin
(define res (extended_euclid a n))
(define inv (if res (if (hash? res) (hash-ref res 0 #f) (list-ref res (int 0))) #f))
(_return (mod inv n))
))
)
(define (modular_division a b n)
  (let/ec _return (begin
(if (<= n 1) (let ()
(panic "n must be > 1")
) (void))
(if (<= a 0) (let ()
(panic "a must be > 0")
) (void))
(if (not (equal? (greatest_common_divisor a n) 1)) (let ()
(panic "gcd(a,n) != 1")
) (void))
(define eg (extended_gcd n a))
(define s (if eg (if (hash? eg) (hash-ref eg 2 #f) (list-ref eg (int 2))) #f))
(_return (mod (* b s) n))
))
)
(define (modular_division2 a b n)
  (let/ec _return (begin
(define s (invert_modulo a n))
(_return (mod (* b s) n))
))
)
(define (tests)
  (let/ec _return (begin
(if (not (equal? (modular_division 4 8 5) 2)) (let ()
(panic "md1")
) (void))
(if (not (equal? (modular_division 3 8 5) 1)) (let ()
(panic "md2")
) (void))
(if (not (equal? (modular_division 4 11 5) 4)) (let ()
(panic "md3")
) (void))
(if (not (equal? (modular_division2 4 8 5) 2)) (let ()
(panic "md21")
) (void))
(if (not (equal? (modular_division2 3 8 5) 1)) (let ()
(panic "md22")
) (void))
(if (not (equal? (modular_division2 4 11 5) 4)) (let ()
(panic "md23")
) (void))
(if (not (equal? (invert_modulo 2 5) 3)) (let ()
(panic "inv")
) (void))
(define eg (extended_gcd 10 6))
(if (or (or (not (equal? (if eg (if (hash? eg) (hash-ref eg 0 #f) (list-ref eg (int 0))) #f) 2)) (not (equal? (if eg (if (hash? eg) (hash-ref eg 1 #f) (list-ref eg (int 1))) #f) (- 1)))) (not (equal? (if eg (if (hash? eg) (hash-ref eg 2 #f) (list-ref eg (int 2))) #f) 2))) (let ()
(panic "eg")
) (void))
(define eu (extended_euclid 10 6))
(if (or (not (equal? (if eu (if (hash? eu) (hash-ref eu 0 #f) (list-ref eu (int 0))) #f) (- 1))) (not (equal? (if eu (if (hash? eu) (hash-ref eu 1 #f) (list-ref eu (int 1))) #f) 2))) (let ()
(panic "eu")
) (void))
(if (not (equal? (greatest_common_divisor 121 11) 11)) (let ()
(panic "gcd")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(tests)
(displayln (format "~a" (modular_division 4 8 5)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
