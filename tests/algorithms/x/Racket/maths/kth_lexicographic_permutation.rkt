;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (remove_at xs idx)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (if (not (equal? i idx)) (let ()
(set! res (append res (list (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (kth_permutation k n)
  (let/ec _return (begin
(if (<= n 0) (let ()
(panic "n must be positive")
) (void))
(define factorials (list 1))
(define i 2)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! factorials (append factorials (list (* (if factorials (if (hash? factorials) (hash-ref factorials (- (cond [(not factorials) 0] [(string? factorials) (string-length factorials)] [(hash? factorials) (hash-count factorials)] [else (length factorials)]) 1) #f) (list-ref factorials (int (- (cond [(not factorials) 0] [(string? factorials) (string-length factorials)] [(hash? factorials) (hash-count factorials)] [else (length factorials)]) 1)))) #f) i))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define total (* (if factorials (if (hash? factorials) (hash-ref factorials (- (cond [(not factorials) 0] [(string? factorials) (string-length factorials)] [(hash? factorials) (hash-count factorials)] [else (length factorials)]) 1) #f) (list-ref factorials (int (- (cond [(not factorials) 0] [(string? factorials) (string-length factorials)] [(hash? factorials) (hash-count factorials)] [else (length factorials)]) 1)))) #f) n))
(if (or (< k 0) (>= k total)) (let ()
(panic "k out of bounds")
) (void))
(define elements (list))
(define e 0)
(let/ec _break (let loop ()
  (if (< e n) (let/ec _cont
    (set! elements (append elements (list e)))
    (set! e (let ([__l e] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define permutation (list))
(define idx (- (cond [(not factorials) 0] [(string? factorials) (string-length factorials)] [(hash? factorials) (hash-count factorials)] [else (length factorials)]) 1))
(let/ec _break (let loop ()
  (if (>= idx 0) (let/ec _cont
    (define factorial (if factorials (if (hash? factorials) (hash-ref factorials idx #f) (list-ref factorials (int idx))) #f))
    (define number (floor (/ k factorial)))
    (set! k (modulo k factorial))
    (set! permutation (append permutation (list (if elements (if (hash? elements) (hash-ref elements number #f) (list-ref elements (int number))) #f))))
    (set! elements (remove_at elements number))
    (set! idx (- idx 1))
    (loop)) (void))))
(set! permutation (append permutation (list (if elements (if (hash? elements) (hash-ref elements 0 #f) (list-ref elements (int 0))) #f))))
(_return permutation)
))
)
(define (list_equal a b)
  (let/ec _return (begin
(if (not (equal? (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (if (not (equal? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (list_to_string xs)
  (let/ec _return (begin
(if (equal? (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]) 0) (let ()
(_return "[]")
) (void))
(define s (string-append "[" (format "~a" (if xs (if (hash? xs) (hash-ref xs 0 #f) (list-ref xs (int 0))) #f))))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (set! s (string-append (string-append s ", ") (format "~a" (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (test_kth_permutation)
  (let/ec _return (begin
(define expected1 (list 0 1 2 3 4))
(define res1 (kth_permutation 0 5))
(if (not (list_equal res1 expected1)) (let ()
(panic "test case 1 failed")
) (void))
(define expected2 (list 1 3 0 2))
(define res2 (kth_permutation 10 4))
(if (not (list_equal res2 expected2)) (let ()
(panic "test case 2 failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_kth_permutation)
(define res (kth_permutation 10 4))
(displayln (list_to_string res))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
