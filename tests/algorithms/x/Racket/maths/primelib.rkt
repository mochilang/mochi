;; Generated by Mochi 0.10.61 on 2025-08-08 17:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (abs_int x)
  (let/ec _return (begin
(if (< x 0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (gcd_iter a b)
  (let/ec _return (begin
(define x (abs_int a))
(define y (abs_int b))
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (begin
    (let/ec _cont
      (define t y)
      (set! y (modulo x y))
      (set! x t)
    )
    (loop)) (void))))
(_return x)
))
)
(define (is_prime n)
  (let/ec _return (begin
(if (<= n 1) (let ()
(_return #f)
) (void))
(define d 2)
(let/ec _break (let loop ()
  (if (<= (* d d) n) (begin
    (let/ec _cont
      (if (equal? (modulo n d) 0) (let ()
(_return #f)
) (void))
      (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (sieve_er n)
  (let/ec _return (begin
(define nums (list))
(define i 2)
(let/ec _break (let loop ()
  (if (<= i n) (begin
    (let/ec _cont
      (set! nums (append nums (list i)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (begin
    (let/ec _cont
      (define j (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (< j (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (begin
    (let/ec _cont
      (if (not (equal? (if nums (if (hash? nums) (hash-ref nums idx #f) (list-ref nums (int idx))) #f) 0)) (let ()
(if (equal? (modulo (if nums (if (hash? nums) (hash-ref nums j #f) (list-ref nums (int j))) #f) (if nums (if (hash? nums) (hash-ref nums idx #f) (list-ref nums (int idx))) #f)) 0) (let ()
(set! nums (list-set nums (int j) 0))
) (void))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define res (list))
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (begin
    (let/ec _cont
      (define v (if nums (if (hash? nums) (hash-ref nums k #f) (list-ref nums (int k))) #f))
      (if (not (equal? v 0)) (let ()
(set! res (append res (list v)))
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (get_prime_numbers n)
  (let/ec _return (begin
(define ans (list))
(define num 2)
(let/ec _break (let loop ()
  (if (<= num n) (begin
    (let/ec _cont
      (if (is_prime num) (let ()
(set! ans (append ans (list num)))
) (void))
      (set! num (let ([__l num] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return ans)
))
)
(define (prime_factorization number)
  (let/ec _return (begin
(if (equal? number 0) (let ()
(_return (list 0))
) (void))
(if (equal? number 1) (let ()
(_return (list 1))
) (void))
(define ans (list))
(if (is_prime number) (let ()
(set! ans (append ans (list number)))
(_return ans)
) (void))
(define quotient_ number)
(define factor 2)
(let/ec _break (let loop ()
  (if (not (equal? quotient_ 1)) (begin
    (let/ec _cont
      (if (and (is_prime factor) (equal? (modulo quotient_ factor) 0)) (let ()
(set! ans (append ans (list factor)))
(set! quotient_ (floor (/ quotient_ factor)))
) (let ()
(set! factor (let ([__l factor] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    )
    (loop)) (void))))
(_return ans)
))
)
(define (greatest_prime_factor number)
  (let/ec _return (begin
(define factors (prime_factorization number))
(define m (if factors (if (hash? factors) (hash-ref factors 0 #f) (list-ref factors (int 0))) #f))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(not factors) 0] [(string? factors) (string-length factors)] [(hash? factors) (hash-count factors)] [else (length factors)])) (begin
    (let/ec _cont
      (if (> (if factors (if (hash? factors) (hash-ref factors i #f) (list-ref factors (int i))) #f) m) (let ()
(set! m (if factors (if (hash? factors) (hash-ref factors i #f) (list-ref factors (int i))) #f))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return m)
))
)
(define (smallest_prime_factor number)
  (let/ec _return (begin
(define factors (prime_factorization number))
(define m (if factors (if (hash? factors) (hash-ref factors 0 #f) (list-ref factors (int 0))) #f))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(not factors) 0] [(string? factors) (string-length factors)] [(hash? factors) (hash-count factors)] [else (length factors)])) (begin
    (let/ec _cont
      (if (< (if factors (if (hash? factors) (hash-ref factors i #f) (list-ref factors (int i))) #f) m) (let ()
(set! m (if factors (if (hash? factors) (hash-ref factors i #f) (list-ref factors (int i))) #f))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return m)
))
)
(define (kg_v number1 number2)
  (let/ec _return (begin
(if (or (< number1 1) (< number2 1)) (let ()
(panic "numbers must be positive")
) (void))
(define g (gcd_iter number1 number2))
(_return (* (floor (/ number1 g)) number2))
))
)
(define (is_even number)
  (let/ec _return (begin
(_return (equal? (modulo number 2) 0))
))
)
(define (is_odd number)
  (let/ec _return (begin
(_return (not (equal? (modulo number 2) 0)))
))
)
(define (goldbach number)
  (let/ec _return (begin
(if (or (not (is_even number)) (<= number 2)) (let ()
(panic "number must be even and > 2")
) (void))
(define primes (get_prime_numbers number))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not primes) 0] [(string? primes) (string-length primes)] [(hash? primes) (hash-count primes)] [else (length primes)])) (begin
    (let/ec _cont
      (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (< j (cond [(not primes) 0] [(string? primes) (string-length primes)] [(hash? primes) (hash-count primes)] [else (length primes)])) (begin
    (let/ec _cont
      (if (equal? (let ([__l (if primes (if (hash? primes) (hash-ref primes i #f) (list-ref primes (int i))) #f)] [__r (if primes (if (hash? primes) (hash-ref primes j #f) (list-ref primes (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) number) (let ()
(_return (list (if primes (if (hash? primes) (hash-ref primes i #f) (list-ref primes (int i))) #f) (if primes (if (hash? primes) (hash-ref primes j #f) (list-ref primes (int j))) #f)))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (list))
))
)
(define (get_prime n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "n must be non-negative")
) (void))
(define index 0)
(define ans 2)
(let/ec _break (let loop ()
  (if (< index n) (begin
    (let/ec _cont
      (set! index (let ([__l index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! ans (let ([__l ans] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (not (is_prime ans)) (begin
    (let/ec _cont
      (set! ans (let ([__l ans] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    )
    (loop)) (void))))
(_return ans)
))
)
(define (get_primes_between p1 p2)
  (let/ec _return (begin
(define bad1 (not (is_prime p1)))
(define bad2 (not (is_prime p2)))
(if (or (or bad1 bad2) (>= p1 p2)) (let ()
(panic "arguments must be prime and p1 < p2")
) (void))
(define num (let ([__l p1] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (< num p2) (begin
    (let/ec _cont
      (if (is_prime num) (let ()
(_break)
) (void))
      (set! num (let ([__l num] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define ans (list))
(let/ec _break (let loop ()
  (if (< num p2) (begin
    (let/ec _cont
      (set! ans (append ans (list num)))
      (set! num (let ([__l num] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (< num p2) (begin
    (let/ec _cont
      (if (is_prime num) (let ()
(_break)
) (void))
      (set! num (let ([__l num] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    )
    (loop)) (void))))
(_return ans)
))
)
(define (get_divisors n)
  (let/ec _return (begin
(if (< n 1) (let ()
(panic "n must be >= 1")
) (void))
(define ans (list))
(define d 1)
(let/ec _break (let loop ()
  (if (<= d n) (begin
    (let/ec _cont
      (if (equal? (modulo n d) 0) (let ()
(set! ans (append ans (list d)))
) (void))
      (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return ans)
))
)
(define (is_perfect_number number)
  (let/ec _return (begin
(if (<= number 1) (let ()
(panic "number must be > 1")
) (void))
(define divisors (get_divisors number))
(define sum 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- (cond [(not divisors) 0] [(string? divisors) (string-length divisors)] [(hash? divisors) (hash-count divisors)] [else (length divisors)]) 1)) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (if divisors (if (hash? divisors) (hash-ref divisors i #f) (list-ref divisors (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (equal? sum number))
))
)
(define (simplify_fraction numerator denominator)
  (let/ec _return (begin
(if (equal? denominator 0) (let ()
(panic "denominator cannot be zero")
) (void))
(define g (gcd_iter (abs_int numerator) (abs_int denominator)))
(_return (list (floor (/ numerator g)) (floor (/ denominator g))))
))
)
(define (factorial n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "n must be >= 0")
) (void))
(define ans 1)
(define i 1)
(let/ec _break (let loop ()
  (if (<= i n) (begin
    (let/ec _cont
      (set! ans (* ans i))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return ans)
))
)
(define (fib n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "n must be >= 0")
) (void))
(if (<= n 1) (let ()
(_return 1)
) (void))
(define tmp 0)
(define fib1 1)
(define ans 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- n 1)) (begin
    (let/ec _cont
      (set! tmp ans)
      (set! ans (let ([__l ans] [__r fib1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! fib1 tmp)
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return ans)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string (is_prime 97)))
(displayln (to-string (sieve_er 20)))
(displayln (to-string (get_prime_numbers 20)))
(displayln (to-string (prime_factorization 287)))
(displayln (to-string (greatest_prime_factor 287)))
(displayln (to-string (smallest_prime_factor 287)))
(displayln (to-string (kg_v 8 10)))
(displayln (to-string (goldbach 28)))
(displayln (to-string (get_prime 8)))
(displayln (to-string (get_primes_between 3 20)))
(displayln (to-string (get_divisors 28)))
(displayln (to-string (is_perfect_number 28)))
(displayln (to-string (simplify_fraction 10 20)))
(displayln (to-string (factorial 5)))
(displayln (to-string (fib 10)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
