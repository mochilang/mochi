;; Generated by Mochi 0.10.60 on 2025-08-08 11:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (make_dual real rank)
  (let/ec _return (begin
(define ds (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i rank) (let/ec _cont
    (set! ds (append ds (list 1.0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "real" real) (hash-set! h "duals" ds) h))
))
)
(define (dual_from_list real ds)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "real" real) (hash-set! h "duals" ds) h))
))
)
(define (dual_add a b)
  (let/ec _return (begin
(define s_dual (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not (if a (hash-ref a "duals" #f) #f)) 0] [(string? (if a (hash-ref a "duals" #f) #f)) (string-length (if a (hash-ref a "duals" #f) #f))] [(hash? (if a (hash-ref a "duals" #f) #f)) (hash-count (if a (hash-ref a "duals" #f) #f))] [else (length (if a (hash-ref a "duals" #f) #f))])) (let/ec _cont
    (set! s_dual (append s_dual (list (if (if a (hash-ref a "duals" #f) #f) (if (hash? (if a (hash-ref a "duals" #f) #f)) (hash-ref (if a (hash-ref a "duals" #f) #f) i #f) (list-ref (if a (hash-ref a "duals" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define o_dual (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(not (if b (hash-ref b "duals" #f) #f)) 0] [(string? (if b (hash-ref b "duals" #f) #f)) (string-length (if b (hash-ref b "duals" #f) #f))] [(hash? (if b (hash-ref b "duals" #f) #f)) (hash-count (if b (hash-ref b "duals" #f) #f))] [else (length (if b (hash-ref b "duals" #f) #f))])) (let/ec _cont
    (set! o_dual (append o_dual (list (if (if b (hash-ref b "duals" #f) #f) (if (hash? (if b (hash-ref b "duals" #f) #f)) (hash-ref (if b (hash-ref b "duals" #f) #f) j #f) (list-ref (if b (hash-ref b "duals" #f) #f) (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> (cond [(not s_dual) 0] [(string? s_dual) (string-length s_dual)] [(hash? s_dual) (hash-count s_dual)] [else (length s_dual)]) (cond [(not o_dual) 0] [(string? o_dual) (string-length o_dual)] [(hash? o_dual) (hash-count o_dual)] [else (length o_dual)])) (let ()
(define diff (- (cond [(not s_dual) 0] [(string? s_dual) (string-length s_dual)] [(hash? s_dual) (hash-count s_dual)] [else (length s_dual)]) (cond [(not o_dual) 0] [(string? o_dual) (string-length o_dual)] [(hash? o_dual) (hash-count o_dual)] [else (length o_dual)])))
(define k 0)
(let/ec _break (let loop ()
  (if (< k diff) (let/ec _cont
    (set! o_dual (append o_dual (list 1.0)))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (let ()
(if (< (cond [(not s_dual) 0] [(string? s_dual) (string-length s_dual)] [(hash? s_dual) (hash-count s_dual)] [else (length s_dual)]) (cond [(not o_dual) 0] [(string? o_dual) (string-length o_dual)] [(hash? o_dual) (hash-count o_dual)] [else (length o_dual)])) (let ()
(define diff2 (- (cond [(not o_dual) 0] [(string? o_dual) (string-length o_dual)] [(hash? o_dual) (hash-count o_dual)] [else (length o_dual)]) (cond [(not s_dual) 0] [(string? s_dual) (string-length s_dual)] [(hash? s_dual) (hash-count s_dual)] [else (length s_dual)])))
(define k2 0)
(let/ec _break (let loop ()
  (if (< k2 diff2) (let/ec _cont
    (set! s_dual (append s_dual (list 1.0)))
    (set! k2 (let ([__l k2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
))
(define new_duals (list))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(not s_dual) 0] [(string? s_dual) (string-length s_dual)] [(hash? s_dual) (hash-count s_dual)] [else (length s_dual)])) (let/ec _cont
    (set! new_duals (append new_duals (list (let ([__l (if s_dual (if (hash? s_dual) (hash-ref s_dual idx #f) (list-ref s_dual (int idx))) #f)] [__r (if o_dual (if (hash? o_dual) (hash-ref o_dual idx #f) (list-ref o_dual (int idx))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "real" (let ([__l (if a (hash-ref a "real" #f) #f)] [__r (if b (hash-ref b "real" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "duals" new_duals) h))
))
)
(define (dual_add_real a b)
  (let/ec _return (begin
(define ds (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not (if a (hash-ref a "duals" #f) #f)) 0] [(string? (if a (hash-ref a "duals" #f) #f)) (string-length (if a (hash-ref a "duals" #f) #f))] [(hash? (if a (hash-ref a "duals" #f) #f)) (hash-count (if a (hash-ref a "duals" #f) #f))] [else (length (if a (hash-ref a "duals" #f) #f))])) (let/ec _cont
    (set! ds (append ds (list (if (if a (hash-ref a "duals" #f) #f) (if (hash? (if a (hash-ref a "duals" #f) #f)) (hash-ref (if a (hash-ref a "duals" #f) #f) i #f) (list-ref (if a (hash-ref a "duals" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "real" (let ([__l (if a (hash-ref a "real" #f) #f)] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "duals" ds) h))
))
)
(define (dual_mul a b)
  (let/ec _return (begin
(define new_len (let ([__l (let ([__l (cond [(not (if a (hash-ref a "duals" #f) #f)) 0] [(string? (if a (hash-ref a "duals" #f) #f)) (string-length (if a (hash-ref a "duals" #f) #f))] [(hash? (if a (hash-ref a "duals" #f) #f)) (hash-count (if a (hash-ref a "duals" #f) #f))] [else (length (if a (hash-ref a "duals" #f) #f))])] [__r (cond [(not (if b (hash-ref b "duals" #f) #f)) 0] [(string? (if b (hash-ref b "duals" #f) #f)) (string-length (if b (hash-ref b "duals" #f) #f))] [(hash? (if b (hash-ref b "duals" #f) #f)) (hash-count (if b (hash-ref b "duals" #f) #f))] [else (length (if b (hash-ref b "duals" #f) #f))])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define new_duals (list))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx new_len) (let/ec _cont
    (set! new_duals (append new_duals (list 0.0)))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not (if a (hash-ref a "duals" #f) #f)) 0] [(string? (if a (hash-ref a "duals" #f) #f)) (string-length (if a (hash-ref a "duals" #f) #f))] [(hash? (if a (hash-ref a "duals" #f) #f)) (hash-count (if a (hash-ref a "duals" #f) #f))] [else (length (if a (hash-ref a "duals" #f) #f))])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not (if b (hash-ref b "duals" #f) #f)) 0] [(string? (if b (hash-ref b "duals" #f) #f)) (string-length (if b (hash-ref b "duals" #f) #f))] [(hash? (if b (hash-ref b "duals" #f) #f)) (hash-count (if b (hash-ref b "duals" #f) #f))] [else (length (if b (hash-ref b "duals" #f) #f))])) (let/ec _cont
    (define pos (let ([__l (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define val (let ([__l (if new_duals (if (hash? new_duals) (hash-ref new_duals pos #f) (list-ref new_duals (int pos))) #f)] [__r (* (if (if a (hash-ref a "duals" #f) #f) (if (hash? (if a (hash-ref a "duals" #f) #f)) (hash-ref (if a (hash-ref a "duals" #f) #f) i #f) (list-ref (if a (hash-ref a "duals" #f) #f) (int i))) #f) (if (if b (hash-ref b "duals" #f) #f) (if (hash? (if b (hash-ref b "duals" #f) #f)) (hash-ref (if b (hash-ref b "duals" #f) #f) j #f) (list-ref (if b (hash-ref b "duals" #f) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! new_duals (list-set new_duals (int pos) val))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(not (if a (hash-ref a "duals" #f) #f)) 0] [(string? (if a (hash-ref a "duals" #f) #f)) (string-length (if a (hash-ref a "duals" #f) #f))] [(hash? (if a (hash-ref a "duals" #f) #f)) (hash-count (if a (hash-ref a "duals" #f) #f))] [else (length (if a (hash-ref a "duals" #f) #f))])) (let/ec _cont
    (define val (let ([__l (if new_duals (if (hash? new_duals) (hash-ref new_duals k #f) (list-ref new_duals (int k))) #f)] [__r (* (if (if a (hash-ref a "duals" #f) #f) (if (hash? (if a (hash-ref a "duals" #f) #f)) (hash-ref (if a (hash-ref a "duals" #f) #f) k #f) (list-ref (if a (hash-ref a "duals" #f) #f) (int k))) #f) (if b (hash-ref b "real" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! new_duals (list-set new_duals (int k) val))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define l 0)
(let/ec _break (let loop ()
  (if (< l (cond [(not (if b (hash-ref b "duals" #f) #f)) 0] [(string? (if b (hash-ref b "duals" #f) #f)) (string-length (if b (hash-ref b "duals" #f) #f))] [(hash? (if b (hash-ref b "duals" #f) #f)) (hash-count (if b (hash-ref b "duals" #f) #f))] [else (length (if b (hash-ref b "duals" #f) #f))])) (let/ec _cont
    (define val (let ([__l (if new_duals (if (hash? new_duals) (hash-ref new_duals l #f) (list-ref new_duals (int l))) #f)] [__r (* (if (if b (hash-ref b "duals" #f) #f) (if (hash? (if b (hash-ref b "duals" #f) #f)) (hash-ref (if b (hash-ref b "duals" #f) #f) l #f) (list-ref (if b (hash-ref b "duals" #f) #f) (int l))) #f) (if a (hash-ref a "real" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! new_duals (list-set new_duals (int l) val))
    (set! l (let ([__l l] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "real" (* (if a (hash-ref a "real" #f) #f) (if b (hash-ref b "real" #f) #f))) (hash-set! h "duals" new_duals) h))
))
)
(define (dual_mul_real a b)
  (let/ec _return (begin
(define ds (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not (if a (hash-ref a "duals" #f) #f)) 0] [(string? (if a (hash-ref a "duals" #f) #f)) (string-length (if a (hash-ref a "duals" #f) #f))] [(hash? (if a (hash-ref a "duals" #f) #f)) (hash-count (if a (hash-ref a "duals" #f) #f))] [else (length (if a (hash-ref a "duals" #f) #f))])) (let/ec _cont
    (set! ds (append ds (list (* (if (if a (hash-ref a "duals" #f) #f) (if (hash? (if a (hash-ref a "duals" #f) #f)) (hash-ref (if a (hash-ref a "duals" #f) #f) i #f) (list-ref (if a (hash-ref a "duals" #f) #f) (int i))) #f) b))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "real" (* (if a (hash-ref a "real" #f) #f) b)) (hash-set! h "duals" ds) h))
))
)
(define (dual_pow x n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "power must be a positive integer")
) (void))
(if (equal? n 0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "real" 1.0) (hash-set! h "duals" (list)) h))
) (void))
(define res x)
(define i 1)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! res (dual_mul res x))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (factorial n)
  (let/ec _return (begin
(define res 1.0)
(define i 2)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (set! res (* res (exact->inexact i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (differentiate func position order)
  (let/ec _return (begin
(define d (make_dual position 1))
(define result (func d))
(if (equal? order 0) (let ()
(_return (if result (hash-ref result "real" #f) #f))
) (void))
(_return (* (if (if result (hash-ref result "duals" #f) #f) (if (hash? (if result (hash-ref result "duals" #f) #f)) (hash-ref (if result (hash-ref result "duals" #f) #f) (- order 1) #f) (list-ref (if result (hash-ref result "duals" #f) #f) (int (- order 1)))) #f) (factorial order)))
))
)
(define (test_differentiate)
  (let/ec _return (begin
(define (f1 x)
  (let/ec _return (begin
(_return (dual_pow x 2))
))
)
(if (not (equal? (differentiate f1 2.0 2) 2.0)) (let ()
(panic "f1 failed")
) (void))
(define (f2 x)
  (let/ec _return (begin
(_return (dual_mul (dual_pow x 2) (dual_pow x 4)))
))
)
(if (not (equal? (differentiate f2 9.0 2) 196830.0)) (let ()
(panic "f2 failed")
) (void))
(define (f3 y)
  (let/ec _return (begin
(_return (dual_mul_real (dual_pow (dual_add_real y 3.0) 6) 0.5))
))
)
(if (not (equal? (differentiate f3 3.5 4) 7605.0)) (let ()
(panic "f3 failed")
) (void))
(define (f4 y)
  (let/ec _return (begin
(_return (dual_pow y 2))
))
)
(if (not (equal? (differentiate f4 4.0 3) 0.0)) (let ()
(panic "f4 failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_differentiate)
(define (f y)
  (let/ec _return (begin
(_return (dual_mul (dual_pow y 2) (dual_pow y 4)))
))
)
(define res (differentiate f 9.0 2))
(displayln res)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
