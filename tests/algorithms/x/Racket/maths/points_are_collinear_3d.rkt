;; Generated by Mochi 0.10.61 on 2025-08-08 16:56 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (create_vector p1 p2)
  (let/ec _return (begin
(define vx (- (if p2 (hash-ref p2 "x" #f) #f) (if p1 (hash-ref p1 "x" #f) #f)))
(define vy (- (if p2 (hash-ref p2 "y" #f) #f) (if p1 (hash-ref p1 "y" #f) #f)))
(define vz (- (if p2 (hash-ref p2 "z" #f) #f) (if p1 (hash-ref p1 "z" #f) #f)))
(_return (let ([h (make-hash)]) (hash-set! h "x" vx) (hash-set! h "y" vy) (hash-set! h "z" vz) h))
))
)
(define (get_3d_vectors_cross ab ac)
  (let/ec _return (begin
(define cx (- (* (if ab (hash-ref ab "y" #f) #f) (if ac (hash-ref ac "z" #f) #f)) (* (if ab (hash-ref ab "z" #f) #f) (if ac (hash-ref ac "y" #f) #f))))
(define cy (- (* (if ab (hash-ref ab "z" #f) #f) (if ac (hash-ref ac "x" #f) #f)) (* (if ab (hash-ref ab "x" #f) #f) (if ac (hash-ref ac "z" #f) #f))))
(define cz (- (* (if ab (hash-ref ab "x" #f) #f) (if ac (hash-ref ac "y" #f) #f)) (* (if ab (hash-ref ab "y" #f) #f) (if ac (hash-ref ac "x" #f) #f))))
(_return (let ([h (make-hash)]) (hash-set! h "x" cx) (hash-set! h "y" cy) (hash-set! h "z" cz) h))
))
)
(define (pow10 exp)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! result (* result 10.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (round_float x digits)
  (let/ec _return (begin
(define factor (pow10 digits))
(define v (* x factor))
(if (>= v 0.0) (let ()
(set! v (let ([__l v] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! v (- v 0.5))
))
(define t (int v))
(_return (/ (exact->inexact t) factor))
))
)
(define (is_zero_vector v accuracy)
  (let/ec _return (begin
(_return (and (and (equal? (round_float (if v (hash-ref v "x" #f) #f) accuracy) 0.0) (equal? (round_float (if v (hash-ref v "y" #f) #f) accuracy) 0.0)) (equal? (round_float (if v (hash-ref v "z" #f) #f) accuracy) 0.0)))
))
)
(define (are_collinear a b c accuracy)
  (let/ec _return (begin
(define ab (create_vector a b))
(define ac (create_vector a c))
(define cross (get_3d_vectors_cross ab ac))
(_return (is_zero_vector cross accuracy))
))
)
(define (test_are_collinear)
  (let/ec _return (begin
(define p1 (let ([h (make-hash)]) (hash-set! h "x" 0.0) (hash-set! h "y" 0.0) (hash-set! h "z" 0.0) h))
(define p2 (let ([h (make-hash)]) (hash-set! h "x" 1.0) (hash-set! h "y" 1.0) (hash-set! h "z" 1.0) h))
(define p3 (let ([h (make-hash)]) (hash-set! h "x" 2.0) (hash-set! h "y" 2.0) (hash-set! h "z" 2.0) h))
(if (not (are_collinear p1 p2 p3 10)) (let ()
(panic "collinear test failed")
) (void))
(define q3 (let ([h (make-hash)]) (hash-set! h "x" 1.0) (hash-set! h "y" 2.0) (hash-set! h "z" 3.0) h))
(if (are_collinear p1 p2 q3 10) (let ()
(panic "non-collinear test failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_are_collinear)
(define a (let ([h (make-hash)]) (hash-set! h "x" 4.802293498137402) (hash-set! h "y" 3.536233125455244) (hash-set! h "z" 0.0) h))
(define b (let ([h (make-hash)]) (hash-set! h "x" (- 2.186788107953106)) (hash-set! h "y" (- 9.24561398001649)) (hash-set! h "z" 7.141509524846482) h))
(define c (let ([h (make-hash)]) (hash-set! h "x" 1.530169574640268) (hash-set! h "y" (- 2.447927606600034)) (hash-set! h "z" 3.343487096469054) h))
(displayln (format "~a" (are_collinear a b c 10)))
(define d (let ([h (make-hash)]) (hash-set! h "x" 2.399001826862445) (hash-set! h "y" (- 2.452009976680793)) (hash-set! h "z" 4.464656666157666) h))
(define e (let ([h (make-hash)]) (hash-set! h "x" (- 3.682816335934376)) (hash-set! h "y" 5.753788986533145) (hash-set! h "z" 9.490993909044244) h))
(define f (let ([h (make-hash)]) (hash-set! h "x" 1.962903518985307) (hash-set! h "y" 3.741415730125627) (hash-set! h "z" 7.0) h))
(displayln (format "~a" (are_collinear d e f 10)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
