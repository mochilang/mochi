;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (sqrt x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (powf x n)
  (let/ec _return (begin
(define res 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! res (* res x))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (roundf x)
  (let/ec _return (begin
(if (>= x 0.0) (let ()
(_return (int (let ([__l x] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(_return (int (- x 0.5)))
))
)
(define (fib_iterative n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "n is negative")
) (void))
(if (equal? n 0) (let ()
(_return (list 0))
) (void))
(define fib (list 0 1))
(define i 2)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (set! fib (append fib (list (let ([__l (if fib (if (hash? fib) (hash-ref fib (- i 1) #f) (list-ref fib (int (- i 1)))) #f)] [__r (if fib (if (hash? fib) (hash-ref fib (- i 2) #f) (list-ref fib (int (- i 2)))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return fib)
))
)
(define (fib_recursive_term i)
  (let/ec _return (begin
(if (< i 0) (let ()
(panic "n is negative")
) (void))
(if (< i 2) (let ()
(_return i)
) (void))
(_return (let ([__l (fib_recursive_term (- i 1))] [__r (fib_recursive_term (- i 2))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (fib_recursive n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "n is negative")
) (void))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (set! res (append res (list (fib_recursive_term i))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define fib_cache_global (let ([h (make-hash)]) h))
(define (fib_recursive_cached_term i)
  (let/ec _return (begin
(if (< i 0) (let ()
(panic "n is negative")
) (void))
(if (< i 2) (let ()
(_return i)
) (void))
(if (hash-has-key? fib_cache_global i) (let ()
(_return (if fib_cache_global (hash-ref fib_cache_global i 0) #f))
) (void))
(define val (let ([__l (fib_recursive_cached_term (- i 1))] [__r (fib_recursive_cached_term (- i 2))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (hash? fib_cache_global) (hash-set! fib_cache_global i val) (begin (set! fib_cache_global (make-hash)) (hash-set! fib_cache_global i val)))
(_return val)
))
)
(define (fib_recursive_cached n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "n is negative")
) (void))
(define res (list))
(define j 0)
(let/ec _break (let loop ()
  (if (<= j n) (let/ec _cont
    (set! res (append res (list (fib_recursive_cached_term j))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define fib_memo_cache (let ([h (make-hash)]) (hash-set! h 0 0) (hash-set! h 1 1) (hash-set! h 2 1) h))
(define (fib_memoization_term num)
  (let/ec _return (begin
(if (hash-has-key? fib_memo_cache num) (let ()
(_return (if fib_memo_cache (hash-ref fib_memo_cache num 0) #f))
) (void))
(define value (let ([__l (fib_memoization_term (- num 1))] [__r (fib_memoization_term (- num 2))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (hash? fib_memo_cache) (hash-set! fib_memo_cache num value) (begin (set! fib_memo_cache (make-hash)) (hash-set! fib_memo_cache num value)))
(_return value)
))
)
(define (fib_memoization n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "n is negative")
) (void))
(define out (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (set! out (append out (list (fib_memoization_term i))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (fib_binet n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "n is negative")
) (void))
(if (>= n 1475) (let ()
(panic "n is too large")
) (void))
(define sqrt5 (sqrt 5.0))
(define phi (/ (let ([__l 1.0] [__r sqrt5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (define val (roundf (/ (powf phi i) sqrt5)))
    (set! res (append res (list val)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matrix_mul a b)
  (let/ec _return (begin
(define a00 (let ([__l (* (if (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) 0 #f) (list-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (int 0))) #f) (if (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) 0 #f) (list-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (int 0))) #f))] [__r (* (if (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) 1 #f) (list-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (int 1))) #f) (if (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) 0 #f) (list-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (int 0))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define a01 (let ([__l (* (if (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) 0 #f) (list-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (int 0))) #f) (if (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) 1 #f) (list-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (int 1))) #f))] [__r (* (if (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) 1 #f) (list-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (int 1))) #f) (if (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) 1 #f) (list-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (int 1))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define a10 (let ([__l (* (if (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) 0 #f) (list-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (int 0))) #f) (if (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) 0 #f) (list-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (int 0))) #f))] [__r (* (if (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) 1 #f) (list-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (int 1))) #f) (if (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) 0 #f) (list-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (int 0))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define a11 (let ([__l (* (if (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) 0 #f) (list-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (int 0))) #f) (if (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) 1 #f) (list-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (int 1))) #f))] [__r (* (if (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) 1 #f) (list-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (int 1))) #f) (if (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) 1 #f) (list-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (int 1))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (list (list a00 a01) (list a10 a11)))
))
)
(define (matrix_pow m power)
  (let/ec _return (begin
(if (< power 0) (let ()
(panic "power is negative")
) (void))
(define result (list (list 1 0) (list 0 1)))
(define base m)
(define p power)
(let/ec _break (let loop ()
  (if (> p 0) (let/ec _cont
    (if (equal? (modulo p 2) 1) (let ()
(set! result (matrix_mul result base))
) (void))
    (set! base (matrix_mul base base))
    (set! p (int (floor (/ p 2))))
    (loop)) (void))))
(_return result)
))
)
(define (fib_matrix n)
  (let/ec _return (begin
(if (< n 0) (let ()
(panic "n is negative")
) (void))
(if (equal? n 0) (let ()
(_return 0)
) (void))
(define m (list (list 1 1) (list 1 0)))
(define res (matrix_pow m (- n 1)))
(_return (if (if res (if (hash? res) (hash-ref res 0 #f) (list-ref res (int 0))) #f) (if (hash? (if res (if (hash? res) (hash-ref res 0 #f) (list-ref res (int 0))) #f)) (hash-ref (if res (if (hash? res) (hash-ref res 0 #f) (list-ref res (int 0))) #f) 0 #f) (list-ref (if res (if (hash? res) (hash-ref res 0 #f) (list-ref res (int 0))) #f) (int 0))) #f))
))
)
(define (run_tests)
  (let/ec _return (begin
(define expected (list 0 1 1 2 3 5 8 13 21 34 55))
(define it (fib_iterative 10))
(define rec (fib_recursive 10))
(define cache (fib_recursive_cached 10))
(define memo (fib_memoization 10))
(define bin (fib_binet 10))
(define m (fib_matrix 10))
(if (not (equal? it expected)) (let ()
(panic "iterative failed")
) (void))
(if (not (equal? rec expected)) (let ()
(panic "recursive failed")
) (void))
(if (not (equal? cache expected)) (let ()
(panic "cached failed")
) (void))
(if (not (equal? memo expected)) (let ()
(panic "memoization failed")
) (void))
(if (not (equal? bin expected)) (let ()
(panic "binet failed")
) (void))
(if (not (equal? m 55)) (let ()
(panic "matrix failed")
) (void))
(_return m)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (format "~a" (run_tests)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
