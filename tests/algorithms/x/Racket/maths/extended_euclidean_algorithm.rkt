;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (abs_val n)
  (let/ec _return (begin
(if (< n 0) (let ()
(_return (- n))
) (void))
(_return n)
))
)
(define (extended_euclidean_algorithm a b)
  (let/ec _return (begin
(if (equal? (abs_val a) 1) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "x" a) (hash-set! h "y" 0) h))
) (void))
(if (equal? (abs_val b) 1) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "x" 0) (hash-set! h "y" b) h))
) (void))
(define old_remainder a)
(define remainder b)
(define old_coeff_a 1)
(define coeff_a 0)
(define old_coeff_b 0)
(define coeff_b 1)
(let/ec _break (let loop ()
  (if (not (equal? remainder 0)) (let/ec _cont
    (define quotient_ (floor (/ old_remainder remainder)))
    (define temp_remainder (- old_remainder (* quotient_ remainder)))
    (set! old_remainder remainder)
    (set! remainder temp_remainder)
    (define temp_a (- old_coeff_a (* quotient_ coeff_a)))
    (set! old_coeff_a coeff_a)
    (set! coeff_a temp_a)
    (define temp_b (- old_coeff_b (* quotient_ coeff_b)))
    (set! old_coeff_b coeff_b)
    (set! coeff_b temp_b)
    (loop)) (void))))
(if (< a 0) (let ()
(set! old_coeff_a (- old_coeff_a))
) (void))
(if (< b 0) (let ()
(set! old_coeff_b (- old_coeff_b))
) (void))
(_return (let ([h (make-hash)]) (hash-set! h "x" old_coeff_a) (hash-set! h "y" old_coeff_b) h))
))
)
(define (test_extended_euclidean_algorithm)
  (let/ec _return (begin
(define r1 (extended_euclidean_algorithm 1 24))
(if (or (not (equal? (if r1 (hash-ref r1 "x" #f) #f) 1)) (not (equal? (if r1 (hash-ref r1 "y" #f) #f) 0))) (let ()
(panic "test1 failed")
) (void))
(define r2 (extended_euclidean_algorithm 8 14))
(if (or (not (equal? (if r2 (hash-ref r2 "x" #f) #f) 2)) (not (equal? (if r2 (hash-ref r2 "y" #f) #f) (- 1)))) (let ()
(panic "test2 failed")
) (void))
(define r3 (extended_euclidean_algorithm 240 46))
(if (or (not (equal? (if r3 (hash-ref r3 "x" #f) #f) (- 9))) (not (equal? (if r3 (hash-ref r3 "y" #f) #f) 47))) (let ()
(panic "test3 failed")
) (void))
(define r4 (extended_euclidean_algorithm 1 (- 4)))
(if (or (not (equal? (if r4 (hash-ref r4 "x" #f) #f) 1)) (not (equal? (if r4 (hash-ref r4 "y" #f) #f) 0))) (let ()
(panic "test4 failed")
) (void))
(define r5 (extended_euclidean_algorithm (- 2) (- 4)))
(if (or (not (equal? (if r5 (hash-ref r5 "x" #f) #f) (- 1))) (not (equal? (if r5 (hash-ref r5 "y" #f) #f) 0))) (let ()
(panic "test5 failed")
) (void))
(define r6 (extended_euclidean_algorithm 0 (- 4)))
(if (or (not (equal? (if r6 (hash-ref r6 "x" #f) #f) 0)) (not (equal? (if r6 (hash-ref r6 "y" #f) #f) (- 1)))) (let ()
(panic "test6 failed")
) (void))
(define r7 (extended_euclidean_algorithm 2 0))
(if (or (not (equal? (if r7 (hash-ref r7 "x" #f) #f) 1)) (not (equal? (if r7 (hash-ref r7 "y" #f) #f) 0))) (let ()
(panic "test7 failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_extended_euclidean_algorithm)
(define res (extended_euclidean_algorithm 240 46))
(displayln (string-append (string-append (string-append (string-append "(" (format "~a" (if res (hash-ref res "x" #f) #f))) ", ") (format "~a" (if res (hash-ref res "y" #f) #f))) ")"))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
