;; Generated by Mochi 0.10.61 on 2025-08-08 17:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (sqrt_approx x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (begin
    (let/ec _cont
      (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return guess)
))
)
(define (sign x)
  (let/ec _return (begin
(if (>= x 0.0) (let ()
(_return 1.0)
) (let ()
(_return (- 1.0))
))
))
)
(define (vector_norm v)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (* (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f) (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define n (sqrt_approx sum))
(_return n)
))
)
(define (identity_matrix n)
  (let/ec _return (begin
(define mat (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j n) (begin
    (let/ec _cont
      (if (equal? i j) (let ()
(set! row (append row (list 1.0)))
) (let ()
(set! row (append row (list 0.0)))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! mat (append mat (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return mat)
))
)
(define (copy_matrix a)
  (let/ec _return (begin
(define mat (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j (cond [(not (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) 0] [(string? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (string-length (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f))] [(hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-count (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f))] [else (length (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f))])) (begin
    (let/ec _cont
      (set! row (append row (list (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) j #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int j))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! mat (append mat (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return mat)
))
)
(define (matmul a b)
  (let/ec _return (begin
(define m (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define n (cond [(not (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) 0] [(string? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (string-length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [(hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-count (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [else (length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))]))
(define p (cond [(not (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) 0] [(string? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (string-length (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f))] [(hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-count (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f))] [else (length (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f))]))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i m) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j p) (begin
    (let/ec _cont
      (define sum 0.0)
      (define k 0)
      (let/ec _break (let loop ()
  (if (< k n) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (* (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) k #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int k))) #f) (if (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) (if (hash? (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) j #f) (list-ref (if b (if (hash? b) (hash-ref b k #f) (list-ref b (int k))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! row (append row (list sum)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! res (append res (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (qr_decomposition a)
  (let/ec _return (begin
(define m (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define n (cond [(not (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) 0] [(string? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (string-length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [(hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-count (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))] [else (length (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f))]))
(define t (if (< m n) m n))
(define q (identity_matrix m))
(define r (copy_matrix a))
(define k 0)
(let/ec _break (let loop ()
  (if (< k (- t 1)) (begin
    (let/ec _cont
      (define x (list))
      (define i k)
      (let/ec _break (let loop ()
  (if (< i m) (begin
    (let/ec _cont
      (set! x (append x (list (if (if r (if (hash? r) (hash-ref r i #f) (list-ref r (int i))) #f) (if (hash? (if r (if (hash? r) (hash-ref r i #f) (list-ref r (int i))) #f)) (hash-ref (if r (if (hash? r) (hash-ref r i #f) (list-ref r (int i))) #f) k #f) (list-ref (if r (if (hash? r) (hash-ref r i #f) (list-ref r (int i))) #f) (int k))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define e1 (list))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (< i (cond [(not x) 0] [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)])) (begin
    (let/ec _cont
      (if (equal? i 0) (let ()
(set! e1 (append e1 (list 1.0)))
) (let ()
(set! e1 (append e1 (list 0.0)))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define alpha (vector_norm x))
      (define s (* (sign (if x (if (hash? x) (hash-ref x 0 #f) (list-ref x (int 0))) #f)) alpha))
      (define v (list))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (< i (cond [(not x) 0] [(string? x) (string-length x)] [(hash? x) (hash-count x)] [else (length x)])) (begin
    (let/ec _cont
      (set! v (append v (list (let ([__l (if x (if (hash? x) (hash-ref x i #f) (list-ref x (int i))) #f)] [__r (* s (if e1 (if (hash? e1) (hash-ref e1 i #f) (list-ref e1 (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define vnorm (vector_norm v))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (< i (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])) (begin
    (let/ec _cont
      (set! v (list-set v (int i) (/ (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f) vnorm)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define size (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)]))
      (define qk_small (list))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (< i size) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j size) (begin
    (let/ec _cont
      (define delta (if (equal? i j) 1.0 0.0))
      (set! row (append row (list (- delta (* (* 2.0 (if v (if (hash? v) (hash-ref v i #f) (list-ref v (int i))) #f)) (if v (if (hash? v) (hash-ref v j #f) (list-ref v (int j))) #f))))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! qk_small (append qk_small (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define qk (identity_matrix m))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (< i size) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j size) (begin
    (let/ec _cont
      (set! qk (list-set qk (let ([__l k] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref qk (let ([__l k] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ([__l k] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (if (if qk_small (if (hash? qk_small) (hash-ref qk_small i #f) (list-ref qk_small (int i))) #f) (if (hash? (if qk_small (if (hash? qk_small) (hash-ref qk_small i #f) (list-ref qk_small (int i))) #f)) (hash-ref (if qk_small (if (hash? qk_small) (hash-ref qk_small i #f) (list-ref qk_small (int i))) #f) j #f) (list-ref (if qk_small (if (hash? qk_small) (hash-ref qk_small i #f) (list-ref qk_small (int i))) #f) (int j))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! q (matmul q qk))
      (set! r (matmul qk r))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "q" q) (hash-set! h "r" r) h))
))
)
(define (print_matrix mat)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not mat) 0] [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)])) (begin
    (let/ec _cont
      (define line "")
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j (cond [(not (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) 0] [(string? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))])) (begin
    (let/ec _cont
      (set! line (string-append line (to-string (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j))) #f))))
      (if (< (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) 0] [(string? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))])) (let ()
(set! line (string-append line " "))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (displayln line)
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define A (list (list 12.0 (- 51.0) 4.0) (list 6.0 167.0 (- 68.0)) (list (- 4.0) 24.0 (- 41.0))))
(define result (qr_decomposition A))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(print_matrix (if result (hash-ref result "q" #f) #f))
(print_matrix (if result (hash-ref result "r" #f) #f))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
