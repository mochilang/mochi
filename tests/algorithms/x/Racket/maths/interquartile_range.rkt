;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (bubble_sort nums)
  (let/ec _return (begin
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let/ec _cont
    (set! arr (append arr (list (if nums (if (hash? nums) (hash-ref nums i #f) (list-ref nums (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define n (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define a 0)
(let/ec _break (let loop ()
  (if (< a n) (let/ec _cont
    (define b 0)
    (let/ec _break (let loop ()
  (if (< b (- (- n a) 1)) (let/ec _cont
    (if (> (if arr (if (hash? arr) (hash-ref arr b #f) (list-ref arr (int b))) #f) (if arr (if (hash? arr) (hash-ref arr (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (let ()
(define temp (if arr (if (hash? arr) (hash-ref arr b #f) (list-ref arr (int b))) #f))
(set! arr (list-set arr (int b) (if arr (if (hash? arr) (hash-ref arr (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! arr (list-set arr (int (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) temp))
) (void))
    (set! b (let ([__l b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (find_median nums)
  (let/ec _return (begin
(define length_ (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)]))
(define div (floor (/ length_ 2)))
(define mod (modulo length_ 2))
(if (not (equal? mod 0)) (let ()
(_return (if nums (if (hash? nums) (hash-ref nums div #f) (list-ref nums (int div))) #f))
) (void))
(_return (/ (let ([__l (if nums (if (hash? nums) (hash-ref nums div #f) (list-ref nums (int div))) #f)] [__r (if nums (if (hash? nums) (hash-ref nums (- div 1) #f) (list-ref nums (int (- div 1)))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
))
)
(define (interquartile_range nums)
  (let/ec _return (begin
(if (equal? (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)]) 0) (let ()
(panic "The list is empty. Provide a non-empty list.")
) (void))
(define sorted (bubble_sort nums))
(define length_ (cond [(not sorted) 0] [(string? sorted) (string-length sorted)] [(hash? sorted) (hash-count sorted)] [else (length sorted)]))
(define div (floor (/ length_ 2)))
(define mod (modulo length_ 2))
(define lower_ (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i div) (let/ec _cont
    (set! lower_ (append lower_ (list (if sorted (if (hash? sorted) (hash-ref sorted i #f) (list-ref sorted (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define upper_ (list))
(define j (let ([__l div] [__r mod]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (< j length_) (let/ec _cont
    (set! upper_ (append upper_ (list (if sorted (if (hash? sorted) (hash-ref sorted j #f) (list-ref sorted (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define q1 (find_median lower_))
(define q3 (find_median upper_))
(_return (- q3 q1))
))
)
(define (absf x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (float_equal a b)
  (let/ec _return (begin
(define diff (absf (- a b)))
(_return (< diff 1e-07))
))
)
(define (test_interquartile_range)
  (let/ec _return (begin
(if (not (float_equal (interquartile_range (list 4.0 1.0 2.0 3.0 2.0)) 2.0)) (let ()
(panic "interquartile_range case1 failed")
) (void))
(if (not (float_equal (interquartile_range (list (- 2.0) (- 7.0) (- 10.0) 9.0 8.0 4.0 (- 67.0) 45.0)) 17.0)) (let ()
(panic "interquartile_range case2 failed")
) (void))
(if (not (float_equal (interquartile_range (list (- 2.1) (- 7.1) (- 10.1) 9.1 8.1 4.1 (- 67.1) 45.1)) 17.2)) (let ()
(panic "interquartile_range case3 failed")
) (void))
(if (not (float_equal (interquartile_range (list 0.0 0.0 0.0 0.0 0.0)) 0.0)) (let ()
(panic "interquartile_range case4 failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_interquartile_range)
(displayln (format "~a" (interquartile_range (list 4.0 1.0 2.0 3.0 2.0))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
