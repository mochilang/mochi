;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (key x y)
  (let/ec _return (begin
(_return (string-append (string-append (format "~a" x) ",") (format "~a" y)))
))
)
(define (joint_probability_distribution x_values y_values x_probabilities y_probabilities)
  (let/ec _return (begin
(define result (let ([h (make-hash)]) h))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not x_values) 0] [(string? x_values) (string-length x_values)] [(hash? x_values) (hash-count x_values)] [else (length x_values)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not y_values) 0] [(string? y_values) (string-length y_values)] [(hash? y_values) (hash-count y_values)] [else (length y_values)])) (let/ec _cont
    (define k (key (if x_values (if (hash? x_values) (hash-ref x_values i #f) (list-ref x_values (int i))) #f) (if y_values (if (hash? y_values) (hash-ref y_values j #f) (list-ref y_values (int j))) #f)))
    (if (hash? result) (hash-set! result k (* (if x_probabilities (if (hash? x_probabilities) (hash-ref x_probabilities i #f) (list-ref x_probabilities (int i))) #f) (if y_probabilities (if (hash? y_probabilities) (hash-ref y_probabilities j #f) (list-ref y_probabilities (int j))) #f))) (begin (set! result (make-hash)) (hash-set! result k (* (if x_probabilities (if (hash? x_probabilities) (hash-ref x_probabilities i #f) (list-ref x_probabilities (int i))) #f) (if y_probabilities (if (hash? y_probabilities) (hash-ref y_probabilities j #f) (list-ref y_probabilities (int j))) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (expectation values probabilities)
  (let/ec _return (begin
(define total 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not values) 0] [(string? values) (string-length values)] [(hash? values) (hash-count values)] [else (length values)])) (let/ec _cont
    (set! total (let ([__l total] [__r (* (exact->inexact (if values (if (hash? values) (hash-ref values i #f) (list-ref values (int i))) #f)) (if probabilities (if (hash? probabilities) (hash-ref probabilities i #f) (list-ref probabilities (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return total)
))
)
(define (variance values probabilities)
  (let/ec _return (begin
(define mean (expectation values probabilities))
(define total 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not values) 0] [(string? values) (string-length values)] [(hash? values) (hash-count values)] [else (length values)])) (let/ec _cont
    (define diff (- (exact->inexact (if values (if (hash? values) (hash-ref values i #f) (list-ref values (int i))) #f)) mean))
    (set! total (let ([__l total] [__r (* (* diff diff) (if probabilities (if (hash? probabilities) (hash-ref probabilities i #f) (list-ref probabilities (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return total)
))
)
(define (covariance x_values y_values x_probabilities y_probabilities)
  (let/ec _return (begin
(define mean_x (expectation x_values x_probabilities))
(define mean_y (expectation y_values y_probabilities))
(define total 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not x_values) 0] [(string? x_values) (string-length x_values)] [(hash? x_values) (hash-count x_values)] [else (length x_values)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not y_values) 0] [(string? y_values) (string-length y_values)] [(hash? y_values) (hash-count y_values)] [else (length y_values)])) (let/ec _cont
    (define diff_x (- (exact->inexact (if x_values (if (hash? x_values) (hash-ref x_values i #f) (list-ref x_values (int i))) #f)) mean_x))
    (define diff_y (- (exact->inexact (if y_values (if (hash? y_values) (hash-ref y_values j #f) (list-ref y_values (int j))) #f)) mean_y))
    (set! total (let ([__l total] [__r (* (* (* diff_x diff_y) (if x_probabilities (if (hash? x_probabilities) (hash-ref x_probabilities i #f) (list-ref x_probabilities (int i))) #f)) (if y_probabilities (if (hash? y_probabilities) (hash-ref y_probabilities j #f) (list-ref y_probabilities (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return total)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess (/ x 2.0))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (standard_deviation v)
  (let/ec _return (begin
(_return (sqrtApprox v))
))
)
(define (main)
  (let/ec _return (begin
(define x_values (list 1 2))
(define y_values (list (- 2) 5 8))
(define x_probabilities (list 0.7 0.3))
(define y_probabilities (list 0.3 0.5 0.2))
(define jpd (joint_probability_distribution x_values y_values x_probabilities y_probabilities))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not x_values) 0] [(string? x_values) (string-length x_values)] [(hash? x_values) (hash-count x_values)] [else (length x_values)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(not y_values) 0] [(string? y_values) (string-length y_values)] [(hash? y_values) (hash-count y_values)] [else (length y_values)])) (let/ec _cont
    (define k (key (if x_values (if (hash? x_values) (hash-ref x_values i #f) (list-ref x_values (int i))) #f) (if y_values (if (hash? y_values) (hash-ref y_values j #f) (list-ref y_values (int j))) #f)))
    (define prob (if jpd (hash-ref jpd k 0.0) #f))
    (displayln (string-append (string-append k "=") (format "~a" prob)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define ex (expectation x_values x_probabilities))
(define ey (expectation y_values y_probabilities))
(define vx (variance x_values x_probabilities))
(define vy (variance y_values y_probabilities))
(define cov (covariance x_values y_values x_probabilities y_probabilities))
(displayln (string-append "Ex=" (format "~a" ex)))
(displayln (string-append "Ey=" (format "~a" ey)))
(displayln (string-append "Vx=" (format "~a" vx)))
(displayln (string-append "Vy=" (format "~a" vy)))
(displayln (string-append "Cov=" (format "~a" cov)))
(displayln (string-append "Sx=" (format "~a" (standard_deviation vx))))
(displayln (string-append "Sy=" (format "~a" (standard_deviation vy))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
