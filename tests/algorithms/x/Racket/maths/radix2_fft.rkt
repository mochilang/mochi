;; Generated by Mochi 0.10.61 on 2025-08-08 17:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (c_add a b)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (let ([__l (if a (hash-ref a "re" #f) #f)] [__r (if b (hash-ref b "re" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "im" (let ([__l (if a (hash-ref a "im" #f) #f)] [__r (if b (hash-ref b "im" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
))
)
(define (c_sub a b)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (- (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "re" #f) #f))) (hash-set! h "im" (- (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "im" #f) #f))) h))
))
)
(define (c_mul a b)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (- (* (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "re" #f) #f)) (* (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "im" #f) #f)))) (hash-set! h "im" (let ([__l (* (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "im" #f) #f))] [__r (* (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "re" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
))
)
(define (c_mul_scalar a s)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (* (if a (hash-ref a "re" #f) #f) s)) (hash-set! h "im" (* (if a (hash-ref a "im" #f) #f) s)) h))
))
)
(define (c_div_scalar a s)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (/ (if a (hash-ref a "re" #f) #f) s)) (hash-set! h "im" (/ (if a (hash-ref a "im" #f) #f) s)) h))
))
)
(define PI 3.141592653589793)
(define (sin_taylor x)
  (let/ec _return (begin
(define term x)
(define sum x)
(define i 1)
(let/ec _break (let loop ()
  (if (< i 10) (begin
    (let/ec _cont
      (define k1 (* 2.0 (exact->inexact i)))
      (define k2 (let ([__l k1] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! term (/ (* (* (- term) x) x) (* k1 k2)))
      (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (cos_taylor x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define i 1)
(let/ec _break (let loop ()
  (if (< i 10) (begin
    (let/ec _cont
      (define k1 (- (* 2.0 (exact->inexact i)) 1.0))
      (define k2 (* 2.0 (exact->inexact i)))
      (set! term (/ (* (* (- term) x) x) (* k1 k2)))
      (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (exp_i theta)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (cos_taylor theta)) (hash-set! h "im" (sin_taylor theta)) h))
))
)
(define (make_complex_list n value)
  (let/ec _return (begin
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (begin
    (let/ec _cont
      (set! arr (append arr (list value)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return arr)
))
)
(define (fft a invert)
  (let/ec _return (begin
(define n (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(if (equal? n 1) (let ()
(_return (list (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)))
) (void))
(define a0 (list))
(define a1 (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (floor (/ n 2))) (begin
    (let/ec _cont
      (set! a0 (append a0 (list (if a (if (hash? a) (hash-ref a (* 2 i) #f) (list-ref a (int (* 2 i)))) #f))))
      (set! a1 (append a1 (list (if a (if (hash? a) (hash-ref a (let ([__l (* 2 i)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref a (int (let ([__l (* 2 i)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define y0 (fft a0 invert))
(define y1 (fft a1 invert))
(define angle (* (/ (* 2.0 PI) (exact->inexact n)) (if invert (- 1.0) 1.0)))
(define w (let ([h (make-hash)]) (hash-set! h "re" 1.0) (hash-set! h "im" 0.0) h))
(define wn (exp_i angle))
(define y (make_complex_list n (let ([h (make-hash)]) (hash-set! h "re" 0.0) (hash-set! h "im" 0.0) h)))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (floor (/ n 2))) (begin
    (let/ec _cont
      (define t (c_mul w (if y1 (if (hash? y1) (hash-ref y1 i #f) (list-ref y1 (int i))) #f)))
      (define u (if y0 (if (hash? y0) (hash-ref y0 i #f) (list-ref y0 (int i))) #f))
      (define even (c_add u t))
      (define odd (c_sub u t))
      (if invert (let ()
(set! even (c_div_scalar even 2.0))
(set! odd (c_div_scalar odd 2.0))
) (void))
      (set! y (list-set y (int i) even))
      (set! y (list-set y (int (let ([__l i] [__r (floor (/ n 2))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) odd))
      (set! w (c_mul w wn))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return y)
))
)
(define (floor x)
  (let/ec _return (begin
(define i (int x))
(if (> (exact->inexact i) x) (let ()
(set! i (- i 1))
) (void))
(_return (exact->inexact i))
))
)
(define (pow10 n)
  (let/ec _return (begin
(define p 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (begin
    (let/ec _cont
      (set! p (* p 10.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return p)
))
)
(define (round_to x ndigits)
  (let/ec _return (begin
(define m (pow10 ndigits))
(_return (/ (floor (let ([__l (* x m)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) m))
))
)
(define (list_to_string l)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not l) 0] [(string? l) (string-length l)] [(hash? l) (hash-count l)] [else (length l)])) (begin
    (let/ec _cont
      (set! s (string-append s (to-string (if l (if (hash? l) (hash-ref l i #f) (list-ref l (int i))) #f))))
      (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not l) 0] [(string? l) (string-length l)] [(hash? l) (hash-count l)] [else (length l)])) (let ()
(set! s (string-append s ", "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (multiply_poly a b)
  (let/ec _return (begin
(define n 1)
(let/ec _break (let loop ()
  (if (< n (- (let ([__l (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])] [__r (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1)) (begin
    (let/ec _cont
      (set! n (* n 2))
    )
    (loop)) (void))))
(define fa (make_complex_list n (let ([h (make-hash)]) (hash-set! h "re" 0.0) (hash-set! h "im" 0.0) h)))
(define fb (make_complex_list n (let ([h (make-hash)]) (hash-set! h "re" 0.0) (hash-set! h "im" 0.0) h)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (begin
    (let/ec _cont
      (set! fa (list-set fa (int i) (let ([h (make-hash)]) (hash-set! h "re" (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-set! h "im" 0.0) h)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (begin
    (let/ec _cont
      (set! fb (list-set fb (int i) (let ([h (make-hash)]) (hash-set! h "re" (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)) (hash-set! h "im" 0.0) h)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! fa (fft fa #f))
(set! fb (fft fb #f))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i n) (begin
    (let/ec _cont
      (set! fa (list-set fa (int i) (c_mul (if fa (if (hash? fa) (hash-ref fa i #f) (list-ref fa (int i))) #f) (if fb (if (hash? fb) (hash-ref fb i #f) (list-ref fb (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! fa (fft fa #t))
(define res (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (- (let ([__l (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])] [__r (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1)) (begin
    (let/ec _cont
      (define val (if fa (if (hash? fa) (hash-ref fa i #f) (list-ref fa (int i))) #f))
      (set! res (append res (list (round_to (if val (hash-ref val "re" #f) #f) 8))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (and (> (cond [(not res) 0] [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) 0) (equal? (if res (if (hash? res) (hash-ref res (- (cond [(not res) 0] [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) 1) #f) (list-ref res (int (- (cond [(not res) 0] [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) 1)))) #f) 0.0)) (begin
    (let/ec _cont
      (set! res (slice res 0 (- (cond [(not res) 0] [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) 1)))
    )
    (loop)) (void))))
(_return res)
))
)
(define A (list 0.0 1.0 0.0 2.0))
(define B (list 2.0 3.0 4.0 0.0))
(define product (multiply_poly A B))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (list_to_string product))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
