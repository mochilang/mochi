;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (abs_float x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (let ()
(_return x)
))
))
)
(define (validate_inputs x_initials step_size x_final)
  (let/ec _return (begin
(if (>= (if x_initials (if (hash? x_initials) (hash-ref x_initials (- (cond [(not x_initials) 0] [(string? x_initials) (string-length x_initials)] [(hash? x_initials) (hash-count x_initials)] [else (length x_initials)]) 1) #f) (list-ref x_initials (int (- (cond [(not x_initials) 0] [(string? x_initials) (string-length x_initials)] [(hash? x_initials) (hash-count x_initials)] [else (length x_initials)]) 1)))) #f) x_final) (let ()
(panic "The final value of x must be greater than the initial values of x.")
) (void))
(if (<= step_size 0.0) (let ()
(panic "Step size must be positive.")
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- (cond [(not x_initials) 0] [(string? x_initials) (string-length x_initials)] [(hash? x_initials) (hash-count x_initials)] [else (length x_initials)]) 1)) (let/ec _cont
    (define diff (- (if x_initials (if (hash? x_initials) (hash-ref x_initials (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref x_initials (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if x_initials (if (hash? x_initials) (hash-ref x_initials i #f) (list-ref x_initials (int i))) #f)))
    (if (> (abs_float (- diff step_size)) 1e-10) (let ()
(panic "x-values must be equally spaced according to step size.")
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (list_to_string xs)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (set! s (string-append s (format "~a" (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))))
    (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let ()
(set! s (string-append s ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (adams_bashforth_step2 f x_initials y_initials step_size x_final)
  (let/ec _return (begin
(validate_inputs x_initials step_size x_final)
(if (or (not (equal? (cond [(not x_initials) 0] [(string? x_initials) (string-length x_initials)] [(hash? x_initials) (hash-count x_initials)] [else (length x_initials)]) 2)) (not (equal? (cond [(not y_initials) 0] [(string? y_initials) (string-length y_initials)] [(hash? y_initials) (hash-count y_initials)] [else (length y_initials)]) 2))) (let ()
(panic "Insufficient initial points information.")
) (void))
(define x0 (if x_initials (if (hash? x_initials) (hash-ref x_initials 0 #f) (list-ref x_initials (int 0))) #f))
(define x1 (if x_initials (if (hash? x_initials) (hash-ref x_initials 1 #f) (list-ref x_initials (int 1))) #f))
(define y (list))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 0 #f) (list-ref y_initials (int 0))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 1 #f) (list-ref y_initials (int 1))) #f))))
(define n (int (/ (- x_final x1) step_size)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define term (- (* 3.0 (f x1 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))) (f x0 (if y (if (hash? y) (hash-ref y i #f) (list-ref y (int i))) #f))))
    (define y_next (let ([__l (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (* (/ step_size 2.0) term)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! y (append y (list y_next)))
    (set! x0 x1)
    (set! x1 (let ([__l x1] [__r step_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return y)
))
)
(define (adams_bashforth_step3 f x_initials y_initials step_size x_final)
  (let/ec _return (begin
(validate_inputs x_initials step_size x_final)
(if (or (not (equal? (cond [(not x_initials) 0] [(string? x_initials) (string-length x_initials)] [(hash? x_initials) (hash-count x_initials)] [else (length x_initials)]) 3)) (not (equal? (cond [(not y_initials) 0] [(string? y_initials) (string-length y_initials)] [(hash? y_initials) (hash-count y_initials)] [else (length y_initials)]) 3))) (let ()
(panic "Insufficient initial points information.")
) (void))
(define x0 (if x_initials (if (hash? x_initials) (hash-ref x_initials 0 #f) (list-ref x_initials (int 0))) #f))
(define x1 (if x_initials (if (hash? x_initials) (hash-ref x_initials 1 #f) (list-ref x_initials (int 1))) #f))
(define x2 (if x_initials (if (hash? x_initials) (hash-ref x_initials 2 #f) (list-ref x_initials (int 2))) #f))
(define y (list))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 0 #f) (list-ref y_initials (int 0))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 1 #f) (list-ref y_initials (int 1))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 2 #f) (list-ref y_initials (int 2))) #f))))
(define n (int (/ (- x_final x2) step_size)))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (define term (let ([__l (- (* 23.0 (f x2 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))) (* 16.0 (f x1 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))] [__r (* 5.0 (f x0 (if y (if (hash? y) (hash-ref y i #f) (list-ref y (int i))) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define y_next (let ([__l (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (* (/ step_size 12.0) term)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! y (append y (list y_next)))
    (set! x0 x1)
    (set! x1 x2)
    (set! x2 (let ([__l x2] [__r step_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return y)
))
)
(define (adams_bashforth_step4 f x_initials y_initials step_size x_final)
  (let/ec _return (begin
(validate_inputs x_initials step_size x_final)
(if (or (not (equal? (cond [(not x_initials) 0] [(string? x_initials) (string-length x_initials)] [(hash? x_initials) (hash-count x_initials)] [else (length x_initials)]) 4)) (not (equal? (cond [(not y_initials) 0] [(string? y_initials) (string-length y_initials)] [(hash? y_initials) (hash-count y_initials)] [else (length y_initials)]) 4))) (let ()
(panic "Insufficient initial points information.")
) (void))
(define x0 (if x_initials (if (hash? x_initials) (hash-ref x_initials 0 #f) (list-ref x_initials (int 0))) #f))
(define x1 (if x_initials (if (hash? x_initials) (hash-ref x_initials 1 #f) (list-ref x_initials (int 1))) #f))
(define x2 (if x_initials (if (hash? x_initials) (hash-ref x_initials 2 #f) (list-ref x_initials (int 2))) #f))
(define x3 (if x_initials (if (hash? x_initials) (hash-ref x_initials 3 #f) (list-ref x_initials (int 3))) #f))
(define y (list))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 0 #f) (list-ref y_initials (int 0))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 1 #f) (list-ref y_initials (int 1))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 2 #f) (list-ref y_initials (int 2))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 3 #f) (list-ref y_initials (int 3))) #f))))
(define n (int (/ (- x_final x3) step_size)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define term (- (let ([__l (- (* 55.0 (f x3 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))) (* 59.0 (f x2 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))] [__r (* 37.0 (f x1 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (* 9.0 (f x0 (if y (if (hash? y) (hash-ref y i #f) (list-ref y (int i))) #f)))))
    (define y_next (let ([__l (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (* (/ step_size 24.0) term)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! y (append y (list y_next)))
    (set! x0 x1)
    (set! x1 x2)
    (set! x2 x3)
    (set! x3 (let ([__l x3] [__r step_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return y)
))
)
(define (adams_bashforth_step5 f x_initials y_initials step_size x_final)
  (let/ec _return (begin
(validate_inputs x_initials step_size x_final)
(if (or (not (equal? (cond [(not x_initials) 0] [(string? x_initials) (string-length x_initials)] [(hash? x_initials) (hash-count x_initials)] [else (length x_initials)]) 5)) (not (equal? (cond [(not y_initials) 0] [(string? y_initials) (string-length y_initials)] [(hash? y_initials) (hash-count y_initials)] [else (length y_initials)]) 5))) (let ()
(panic "Insufficient initial points information.")
) (void))
(define x0 (if x_initials (if (hash? x_initials) (hash-ref x_initials 0 #f) (list-ref x_initials (int 0))) #f))
(define x1 (if x_initials (if (hash? x_initials) (hash-ref x_initials 1 #f) (list-ref x_initials (int 1))) #f))
(define x2 (if x_initials (if (hash? x_initials) (hash-ref x_initials 2 #f) (list-ref x_initials (int 2))) #f))
(define x3 (if x_initials (if (hash? x_initials) (hash-ref x_initials 3 #f) (list-ref x_initials (int 3))) #f))
(define x4 (if x_initials (if (hash? x_initials) (hash-ref x_initials 4 #f) (list-ref x_initials (int 4))) #f))
(define y (list))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 0 #f) (list-ref y_initials (int 0))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 1 #f) (list-ref y_initials (int 1))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 2 #f) (list-ref y_initials (int 2))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 3 #f) (list-ref y_initials (int 3))) #f))))
(set! y (append y (list (if y_initials (if (hash? y_initials) (hash-ref y_initials 4 #f) (list-ref y_initials (int 4))) #f))))
(define n (int (/ (- x_final x4) step_size)))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (define term (let ([__l (- (- (- (* 1901.0 (f x4 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))) (* 2774.0 (f x3 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))) (* 2616.0 (f x2 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))) (* 1274.0 (f x1 (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))] [__r (* 251.0 (f x0 (if y (if (hash? y) (hash-ref y i #f) (list-ref y (int i))) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define y_next (let ([__l (if y (if (hash? y) (hash-ref y (let ([__l i] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref y (int (let ([__l i] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (* (/ step_size 720.0) term)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! y (append y (list y_next)))
    (set! x0 x1)
    (set! x1 x2)
    (set! x2 x3)
    (set! x3 x4)
    (set! x4 (let ([__l x4] [__r step_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return y)
))
)
(define (f_x x y)
  (let/ec _return (begin
(_return x)
))
)
(define (f_xy x y)
  (let/ec _return (begin
(_return (let ([__l x] [__r y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define y2 (adams_bashforth_step2 f_x (list 0.0 0.2) (list 0.0 0.0) 0.2 1.0))
(define y3 (adams_bashforth_step3 f_xy (list 0.0 0.2 0.4) (list 0.0 0.0 0.04) 0.2 1.0))
(define y4 (adams_bashforth_step4 f_xy (list 0.0 0.2 0.4 0.6) (list 0.0 0.0 0.04 0.128) 0.2 1.0))
(define y5 (adams_bashforth_step5 f_xy (list 0.0 0.2 0.4 0.6 0.8) (list 0.0 0.0214 0.0214 0.22211 0.42536) 0.2 1.0))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (list_to_string y2))
(displayln (format "~a" (if y3 (if (hash? y3) (hash-ref y3 3 #f) (list-ref y3 (int 3))) #f)))
(displayln (format "~a" (if y4 (if (hash? y4) (hash-ref y4 4 #f) (list-ref y4 (int 4))) #f)))
(displayln (format "~a" (if y4 (if (hash? y4) (hash-ref y4 5 #f) (list-ref y4 (int 5))) #f)))
(displayln (format "~a" (if y5 (if (hash? y5) (hash-ref y5 (- (cond [(not y5) 0] [(string? y5) (string-length y5)] [(hash? y5) (hash-count y5)] [else (length y5)]) 1) #f) (list-ref y5 (int (- (cond [(not y5) 0] [(string? y5) (string-length y5)] [(hash? y5) (hash-count y5)] [else (length y5)]) 1)))) #f)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
