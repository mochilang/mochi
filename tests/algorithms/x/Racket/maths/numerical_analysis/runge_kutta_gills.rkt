;; Generated by Mochi 0.10.61 on 2025-08-08 16:56 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (sqrt x)
  (let/ec _return (begin
(define guess (if (> x 1.0) (/ x 2.0) 1.0))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let/ec _cont
    (set! guess (* 0.5 (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (runge_kutta_gills func x_initial y_initial step_size x_final)
  (let/ec _return (begin
(if (>= x_initial x_final) (let ()
(panic "The final value of x must be greater than initial value of x.")
) (void))
(if (<= step_size 0.0) (let ()
(panic "Step size must be positive.")
) (void))
(define n (int (/ (- x_final x_initial) step_size)))
(define y (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (set! y (append y (list 0.0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! y (list-set y (int 0) y_initial))
(define xi x_initial)
(define idx 0)
(define root2 (sqrt 2.0))
(let/ec _break (let loop ()
  (if (< idx n) (let/ec _cont
    (define k1 (* step_size (func xi (if y (if (hash? y) (hash-ref y idx #f) (list-ref y (int idx))) #f))))
    (define k2 (* step_size (func (let ([__l xi] [__r (/ step_size 2.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if y (if (hash? y) (hash-ref y idx #f) (list-ref y (int idx))) #f)] [__r (/ k1 2.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (define k3 (* step_size (func (let ([__l xi] [__r (/ step_size 2.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (let ([__l (if y (if (hash? y) (hash-ref y idx #f) (list-ref y (int idx))) #f)] [__r (* (let ([__l (- 0.5)] [__r (/ 1.0 root2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) k1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (- 1.0 (/ 1.0 root2)) k2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (define k4 (* step_size (func (let ([__l xi] [__r step_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (- (if y (if (hash? y) (hash-ref y idx #f) (list-ref y (int idx))) #f) (* (/ 1.0 root2) k2))] [__r (* (let ([__l 1.0] [__r (/ 1.0 root2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) k3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! y (list-set y (int (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ([__l (if y (if (hash? y) (hash-ref y idx #f) (list-ref y (int idx))) #f)] [__r (/ (let ([__l (let ([__l (let ([__l k1] [__r (* (- 2.0 root2) k2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (let ([__l 2.0] [__r root2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) k3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r k4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 6.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! xi (let ([__l xi] [__r step_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return y)
))
)
(define (f1 x y)
  (let/ec _return (begin
(_return (/ (- x y) 2.0))
))
)
(define y1 (runge_kutta_gills f1 0.0 3.0 0.2 5.0))
(define (f2 x y)
  (let/ec _return (begin
(_return x)
))
)
(define y2 (runge_kutta_gills f2 (- 1.0) 0.0 0.2 0.0))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (format "~a" (if y1 (if (hash? y1) (hash-ref y1 (- (cond [(not y1) 0] [(string? y1) (string-length y1)] [(hash? y1) (hash-count y1)] [else (length y1)]) 1) #f) (list-ref y1 (int (- (cond [(not y1) 0] [(string? y1) (string-length y1)] [(hash? y1) (hash-count y1)] [else (length y1)]) 1)))) #f)))
(displayln (format "~a" y2))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
