;; Generated by Mochi 0.10.67 on 2025-08-17 13:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (let ([s (~r x #:precision 15 #:notation 'positional)])
       (if (and (inexact? x) (integer? x))
           (number->string (inexact->exact x))
           s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) 0)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (parse_decimal s)
  (let/ec _return (begin
(define value 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define c (if (hash? s) (hash-ref s i #f) (substring s (int i) (+ (int i) 1))))
      (if (or (string<? c "0") (string>? c "9")) (let ()
(panic "invalid literal")
) (void))
      (set! value (let ([__l (* value 10)] [__r (int c)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return value)
))
)
(define (zeller_day date_input)
  (let/ec _return (begin
(define days (let ([h (make-hash)]) (hash-set! h 0 "Sunday") (hash-set! h 1 "Monday") (hash-set! h 2 "Tuesday") (hash-set! h 3 "Wednesday") (hash-set! h 4 "Thursday") (hash-set! h 5 "Friday") (hash-set! h 6 "Saturday") h))
(if (not (equal? (cond [(not date_input) 0] [(string? date_input) (string-length date_input)] [(hash? date_input) (hash-count date_input)] [else (length date_input)]) 10)) (let ()
(panic "Must be 10 characters long")
) (void))
(define m (parse_decimal (slice date_input 0 2)))
(if (or (let ([__l m] [__r 0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ([__l m] [__r 13]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ()
(panic "Month must be between 1 - 12")
) (void))
(define sep1 (if (hash? date_input) (hash-ref date_input 2 #f) (substring date_input (int 2) (+ (int 2) 1))))
(if (and (not (string=? sep1 "-")) (not (string=? sep1 "/"))) (let ()
(panic "Date separator must be '-' or '/'")
) (void))
(define d (parse_decimal (slice date_input 3 5)))
(if (or (let ([__l d] [__r 0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ([__l d] [__r 32]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ()
(panic "Date must be between 1 - 31")
) (void))
(define sep2 (if (hash? date_input) (hash-ref date_input 5 #f) (substring date_input (int 5) (+ (int 5) 1))))
(if (and (not (string=? sep2 "-")) (not (string=? sep2 "/"))) (let ()
(panic "Date separator must be '-' or '/'")
) (void))
(define y (parse_decimal (slice date_input 6 10)))
(if (or (let ([__l y] [__r 45]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ([__l y] [__r 8500]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ()
(panic "Year out of range. There has to be some sort of limit...right?")
) (void))
(define year y)
(define month m)
(if (let ([__l month] [__r 2]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(set! year (- year 1))
(set! month (let ([__l month] [__r 12]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(define c (floor (/ year 100)))
(define k (modulo year 100))
(define t (int (- (* 2.6 (exact->inexact month)) 5.39)))
(define u (floor (/ c 4)))
(define v (floor (/ k 4)))
(define x (let ([__l d] [__r k]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define z (let ([__l (let ([__l (let ([__l t] [__r u]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r v]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define w (- z (* 2 c)))
(define f (modulo w 7))
(if (let ([__l f] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! f (let ([__l f] [__r 7]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return (if days (hash-ref days f "") #f))
))
)
(define (zeller date_input)
  (let/ec _return (begin
(define day (zeller_day date_input))
(_return (string-append (string-append (string-append (string-append "Your date " date_input) ", is a ") day) "!"))
))
)
(define (test_zeller)
  (let/ec _return (begin
(define inputs (list "01-31-2010" "02-01-2010" "11-26-2024" "07-04-1776"))
(define expected (list "Sunday" "Monday" "Tuesday" "Thursday"))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not inputs) 0] [(string? inputs) (string-length inputs)] [(hash? inputs) (hash-count inputs)] [else (length inputs)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define res (zeller_day (if inputs (if (hash? inputs) (hash-ref inputs i #f) (safe-index inputs (int i))) #f)))
      (if (not (string=? res (if expected (if (hash? expected) (hash-ref expected i #f) (safe-index expected (int i))) #f))) (let ()
(panic "zeller test failed")
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(test_zeller)
(displayln (zeller "01-31-2010"))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
