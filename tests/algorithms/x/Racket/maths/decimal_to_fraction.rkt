;; Generated by Mochi 0.10.66 on 2025-08-16 12:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) 0)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (pow10 n)
  (let/ec _return (begin
(define result 1)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (* result 10))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (gcd a b)
  (let/ec _return (begin
(define x a)
(define y b)
(if (let ([__l x] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! x (- x))
) (void))
(if (let ([__l y] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! y (- y))
) (void))
(let/ec _break (let loop ()
  (if (not (equal? y 0)) (begin
    (let/ec _cont
      (define r (modulo x y))
      (set! x y)
      (set! y r)
    )
    (loop)) (void))))
(_return x)
))
)
(define (parse_decimal s)
  (let/ec _return (begin
(if (equal? (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (let ()
(panic "invalid number")
) (void))
(define idx 0)
(define sign 1)
(define first (slice s 0 1))
(if (string=? first "-") (let ()
(set! sign (- 1))
(set! idx 1)
) (let ()
(if (string=? first "+") (let ()
(set! idx 1)
) (void))
))
(define int_part "")
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define c (slice s idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (and (string>=? c "0") (string<=? c "9")) (let ()
(set! int_part (string-append int_part c))
(set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(_break)
))
    )
    (loop)) (void))))
(define frac_part "")
(if (and (let ([__l idx] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (string=? (slice s idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ".")) (let ()
(set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define c (slice s idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (and (string>=? c "0") (string<=? c "9")) (let ()
(set! frac_part (string-append frac_part c))
(set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(_break)
))
    )
    (loop)) (void))))
) (void))
(define exp_ 0)
(if (and (let ([__l idx] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (or (string=? (slice s idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "e") (string=? (slice s idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "E"))) (let ()
(set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define exp_sign 1)
(if (and (let ([__l idx] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (string=? (slice s idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "-")) (let ()
(set! exp_sign (- 1))
(set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(if (and (let ([__l idx] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (string=? (slice s idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) "+")) (let ()
(set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
))
(define exp_str "")
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define c (slice s idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (and (string>=? c "0") (string<=? c "9")) (let ()
(set! exp_str (string-append exp_str c))
(set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(panic "invalid number")
))
    )
    (loop)) (void))))
(if (equal? (cond [(not exp_str) 0] [(string? exp_str) (string-length exp_str)] [(hash? exp_str) (hash-count exp_str)] [else (length exp_str)]) 0) (let ()
(panic "invalid number")
) (void))
(set! exp_ (* exp_sign (int exp_str)))
) (void))
(if (not (equal? idx (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))) (let ()
(panic "invalid number")
) (void))
(if (equal? (cond [(not int_part) 0] [(string? int_part) (string-length int_part)] [(hash? int_part) (hash-count int_part)] [else (length int_part)]) 0) (let ()
(set! int_part "0")
) (void))
(define num_str (string-append int_part frac_part))
(define numerator (int num_str))
(if (equal? sign (- 0 1)) (let ()
(set! numerator (- 0 numerator))
) (void))
(define denominator (pow10 (cond [(not frac_part) 0] [(string? frac_part) (string-length frac_part)] [(hash? frac_part) (hash-count frac_part)] [else (length frac_part)])))
(if (let ([__l exp_] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! numerator (* numerator (pow10 exp_)))
) (let ()
(if (let ([__l exp_] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! denominator (* denominator (pow10 (- exp_))))
) (void))
))
(_return (let ([h (make-hash)]) (hash-set! h "numerator" numerator) (hash-set! h "denominator" denominator) h))
))
)
(define (reduce fr)
  (let/ec _return (begin
(define g (gcd (if fr (hash-ref fr "numerator" #f) #f) (if fr (hash-ref fr "denominator" #f) #f)))
(_return (let ([h (make-hash)]) (hash-set! h "numerator" (floor (/ (if fr (hash-ref fr "numerator" #f) #f) g))) (hash-set! h "denominator" (floor (/ (if fr (hash-ref fr "denominator" #f) #f) g))) h))
))
)
(define (decimal_to_fraction_str s)
  (let/ec _return (begin
(_return (reduce (parse_decimal s)))
))
)
(define (decimal_to_fraction x)
  (let/ec _return (begin
(_return (decimal_to_fraction_str (to-string x)))
))
)
(define (assert_fraction name fr num den)
  (let/ec _return (begin
(if (or (not (equal? (if fr (hash-ref fr "numerator" #f) #f) num)) (not (equal? (if fr (hash-ref fr "denominator" #f) #f) den))) (let ()
(panic name)
) (void))
))
)
(define (test_decimal_to_fraction)
  (let/ec _return (begin
(assert_fraction "case1" (decimal_to_fraction 2.0) 2 1)
(assert_fraction "case2" (decimal_to_fraction 89.0) 89 1)
(assert_fraction "case3" (decimal_to_fraction_str "67") 67 1)
(assert_fraction "case4" (decimal_to_fraction_str "45.0") 45 1)
(assert_fraction "case5" (decimal_to_fraction 1.5) 3 2)
(assert_fraction "case6" (decimal_to_fraction_str "6.25") 25 4)
(assert_fraction "case7" (decimal_to_fraction 0.0) 0 1)
(assert_fraction "case8" (decimal_to_fraction (- 2.5)) (- 5) 2)
(assert_fraction "case9" (decimal_to_fraction 0.125) 1 8)
(assert_fraction "case10" (decimal_to_fraction 1.00000025e+06) 4000001 4)
(assert_fraction "case11" (decimal_to_fraction 1.3333) 13333 10000)
(assert_fraction "case12" (decimal_to_fraction_str "1.23e2") 123 1)
(assert_fraction "case13" (decimal_to_fraction_str "0.500") 1 2)
))
)
(define (main)
  (let/ec _return (begin
(test_decimal_to_fraction)
(define fr (decimal_to_fraction 1.5))
(displayln (string-append (string-append (to-string (if fr (hash-ref fr "numerator" #f) #f)) "/") (to-string (if fr (hash-ref fr "denominator" #f) #f))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
