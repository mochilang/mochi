;; Generated by Mochi 0.10.61 on 2025-08-08 17:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (bubble_sort xs)
  (let/ec _return (begin
(define arr xs)
(define n (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j (- (- n i) 1)) (begin
    (let/ec _cont
      (if (> (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (let ()
(define tmp (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f))
(set! arr (list-set arr (int j) (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return arr)
))
)
(define (factors num)
  (let/ec _return (begin
(define values (list 1))
(define i 2)
(let/ec _break (let loop ()
  (if (<= (* i i) num) (begin
    (let/ec _cont
      (if (equal? (modulo num i) 0) (let ()
(set! values (append values (list i)))
(define d (floor (/ num i)))
(if (not (equal? d i)) (let ()
(set! values (append values (list d)))
) (void))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (bubble_sort values))
))
)
(define (sum_list xs)
  (let/ec _return (begin
(define total 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (begin
    (let/ec _cont
      (set! total (let ([__l total] [__r (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return total)
))
)
(define (abundant n)
  (let/ec _return (begin
(_return (> (sum_list (factors n)) n))
))
)
(define (semi_perfect number)
  (let/ec _return (begin
(if (<= number 0) (let ()
(_return #t)
) (void))
(define values (factors number))
(define possible (list))
(define j 0)
(let/ec _break (let loop ()
  (if (<= j number) (begin
    (let/ec _cont
      (set! possible (append possible (list (equal? j 0))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(not values) 0] [(string? values) (string-length values)] [(hash? values) (hash-count values)] [else (length values)])) (begin
    (let/ec _cont
      (define v (if values (if (hash? values) (hash-ref values idx #f) (list-ref values (int idx))) #f))
      (define s number)
      (let/ec _break (let loop ()
  (if (>= s v) (begin
    (let/ec _cont
      (if (if possible (if (hash? possible) (hash-ref possible (- s v) #f) (list-ref possible (int (- s v)))) #f) (let ()
(set! possible (list-set possible (int s) #t))
) (void))
      (set! s (- s 1))
    )
    (loop)) (void))))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (if possible (if (hash? possible) (hash-ref possible number #f) (list-ref possible (int number))) #f))
))
)
(define (weird number)
  (let/ec _return (begin
(_return (and (abundant number) (not (semi_perfect number))))
))
)
(define (run_tests)
  (let/ec _return (begin
(if (not (equal? (factors 12) (list 1 2 3 4 6))) (let ()
(panic "factors 12 failed")
) (void))
(if (not (equal? (factors 1) (list 1))) (let ()
(panic "factors 1 failed")
) (void))
(if (not (equal? (factors 100) (list 1 2 4 5 10 20 25 50))) (let ()
(panic "factors 100 failed")
) (void))
(if (not (abundant 0)) (let ()
(panic "abundant 0 failed")
) (void))
(if (abundant 1) (let ()
(panic "abundant 1 failed")
) (void))
(if (not (abundant 12)) (let ()
(panic "abundant 12 failed")
) (void))
(if (abundant 13) (let ()
(panic "abundant 13 failed")
) (void))
(if (not (abundant 20)) (let ()
(panic "abundant 20 failed")
) (void))
(if (not (semi_perfect 0)) (let ()
(panic "semi_perfect 0 failed")
) (void))
(if (not (semi_perfect 1)) (let ()
(panic "semi_perfect 1 failed")
) (void))
(if (not (semi_perfect 12)) (let ()
(panic "semi_perfect 12 failed")
) (void))
(if (semi_perfect 13) (let ()
(panic "semi_perfect 13 failed")
) (void))
(if (weird 0) (let ()
(panic "weird 0 failed")
) (void))
(if (not (weird 70)) (let ()
(panic "weird 70 failed")
) (void))
(if (weird 77) (let ()
(panic "weird 77 failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(run_tests)
(define nums (list 69 70 71))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (begin
    (let/ec _cont
      (define n (if nums (if (hash? nums) (hash-ref nums i #f) (list-ref nums (int i))) #f))
      (if (weird n) (let ()
(displayln (string-append (to-string n) " is weird."))
) (let ()
(displayln (string-append (to-string n) " is not weird."))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
