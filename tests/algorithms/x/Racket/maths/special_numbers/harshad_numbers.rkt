;; Generated by Mochi 0.10.61 on 2025-08-08 18:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (panic_ msg)
  (let/ec _return (begin
    (void)
))
)
(define (char_to_value c)
  (let/ec _return (begin
(define digits "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not digits) 0] [(string? digits) (string-length digits)] [(hash? digits) (hash-count digits)] [else (length digits)])) (begin
    (let/ec _cont
      (if (string=? (substring digits i (+ i 1)) c) (let ()
(_return i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(panic_ "invalid digit")
))
)
(define (int_to_base number base)
  (let/ec _return (begin
(if (or (< base 2) (> base 36)) (let ()
(panic_ "'base' must be between 2 and 36 inclusive")
) (void))
(if (< number 0) (let ()
(panic_ "number must be a positive integer")
) (void))
(define digits "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define n number)
(define result "")
(let/ec _break (let loop ()
  (if (> n 0) (begin
    (let/ec _cont
      (define remainder (modulo n base))
      (set! result (string-append (substring digits remainder (+ remainder 1)) result))
      (set! n (floor (/ n base)))
    )
    (loop)) (void))))
(if (string=? result "") (let ()
(set! result "0")
) (void))
(_return result)
))
)
(define (base_to_int num_str base)
  (let/ec _return (begin
(define value 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not num_str) 0] [(string? num_str) (string-length num_str)] [(hash? num_str) (hash-count num_str)] [else (length num_str)])) (begin
    (let/ec _cont
      (define c (substring num_str i (+ i 1)))
      (set! value (let ([__l (* value base)] [__r (char_to_value c)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return value)
))
)
(define (sum_of_digits num base)
  (let/ec _return (begin
(if (or (< base 2) (> base 36)) (let ()
(panic_ "'base' must be between 2 and 36 inclusive")
) (void))
(define num_str (int_to_base num base))
(define total 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not num_str) 0] [(string? num_str) (string-length num_str)] [(hash? num_str) (hash-count num_str)] [else (length num_str)])) (begin
    (let/ec _cont
      (define c (substring num_str i (+ i 1)))
      (set! total (let ([__l total] [__r (char_to_value c)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (int_to_base total base))
))
)
(define (harshad_numbers_in_base limit base)
  (let/ec _return (begin
(if (or (< base 2) (> base 36)) (let ()
(panic_ "'base' must be between 2 and 36 inclusive")
) (void))
(if (< limit 0) (let ()
(_return (list))
) (void))
(define numbers (list))
(define i 1)
(let/ec _break (let loop ()
  (if (< i limit) (begin
    (let/ec _cont
      (define s (sum_of_digits i base))
      (define divisor (base_to_int s base))
      (if (equal? (modulo i divisor) 0) (let ()
(set! numbers (append numbers (list (int_to_base i base))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return numbers)
))
)
(define (is_harshad_number_in_base num base)
  (let/ec _return (begin
(if (or (< base 2) (> base 36)) (let ()
(panic_ "'base' must be between 2 and 36 inclusive")
) (void))
(if (< num 0) (let ()
(_return #f)
) (void))
(define n (int_to_base num base))
(define d (sum_of_digits num base))
(define n_val (base_to_int n base))
(define d_val (base_to_int d base))
(_return (equal? (modulo n_val d_val) 0))
))
)
(define (main)
  (let/ec _return (begin
(displayln (int_to_base 0 21))
(displayln (int_to_base 23 2))
(displayln (int_to_base 58 5))
(displayln (int_to_base 167 16))
(displayln (sum_of_digits 103 12))
(displayln (sum_of_digits 1275 4))
(displayln (sum_of_digits 6645 2))
(displayln (harshad_numbers_in_base 15 2))
(displayln (harshad_numbers_in_base 12 34))
(displayln (harshad_numbers_in_base 12 4))
(displayln (is_harshad_number_in_base 18 10))
(displayln (is_harshad_number_in_base 21 10))
(displayln (is_harshad_number_in_base (- 21) 5))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
