;; Generated by Mochi 0.10.61 on 2025-08-08 17:18 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (min_int a b)
  (let/ec _return (begin
(if (< a b) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (int_sqrt n)
  (let/ec _return (begin
(define r 0)
(let/ec _break (let loop ()
  (if (<= (* (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) n) (begin
    (let/ec _cont
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return r)
))
)
(define (sieve n)
  (let/ec _return (begin
(if (<= n 0) (let ()
(panic "Number must instead be a positive integer")
) (void))
(define in_prime (list))
(define start 2)
(define end (int_sqrt n))
(define temp (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (let ([__l end] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin
    (let/ec _cont
      (set! temp (append temp (list 1)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define prime (list))
(let/ec _break (let loop ()
  (if (<= start end) (begin
    (let/ec _cont
      (if (equal? (if temp (if (hash? temp) (hash-ref temp start #f) (list-ref temp (int start))) #f) 1) (let ()
(set! in_prime (append in_prime (list start)))
(define j (* start start))
(let/ec _break (let loop ()
  (if (<= j end) (begin
    (let/ec _cont
      (set! temp (list-set temp (int j) 0))
      (set! j (let ([__l j] [__r start]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (void))
      (set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not in_prime) 0] [(string? in_prime) (string-length in_prime)] [(hash? in_prime) (hash-count in_prime)] [else (length in_prime)])) (begin
    (let/ec _cont
      (set! prime (append prime (list (if in_prime (if (hash? in_prime) (hash-ref in_prime i #f) (list-ref in_prime (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define low (let ([__l end] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define high (min_int (* 2 end) n))
(let/ec _break (let loop ()
  (if (<= low n) (begin
    (let/ec _cont
      (define tempSeg (list))
      (define size (let ([__l (- high low)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define k 0)
      (let/ec _break (let loop ()
  (if (< k size) (begin
    (let/ec _cont
      (set! tempSeg (append tempSeg (list 1)))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define idx 0)
      (let/ec _break (let loop ()
  (if (< idx (cond [(not in_prime) 0] [(string? in_prime) (string-length in_prime)] [(hash? in_prime) (hash-count in_prime)] [else (length in_prime)])) (begin
    (let/ec _cont
      (define each (if in_prime (if (hash? in_prime) (hash-ref in_prime idx #f) (list-ref in_prime (int idx))) #f))
      (define t (* (floor (/ low each)) each))
      (if (< t low) (let ()
(set! t (let ([__l t] [__r each]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (define j2 t)
      (let/ec _break (let loop ()
  (if (<= j2 high) (begin
    (let/ec _cont
      (set! tempSeg (list-set tempSeg (int (- j2 low)) 0))
      (set! j2 (let ([__l j2] [__r each]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define j3 0)
      (let/ec _break (let loop ()
  (if (< j3 (cond [(not tempSeg) 0] [(string? tempSeg) (string-length tempSeg)] [(hash? tempSeg) (hash-count tempSeg)] [else (length tempSeg)])) (begin
    (let/ec _cont
      (if (equal? (if tempSeg (if (hash? tempSeg) (hash-ref tempSeg j3 #f) (list-ref tempSeg (int j3))) #f) 1) (let ()
(set! prime (append prime (list (let ([__l j3] [__r low]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
      (set! j3 (let ([__l j3] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! low (let ([__l high] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! high (min_int (let ([__l high] [__r end]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) n))
    )
    (loop)) (void))))
(_return prime)
))
)
(define (lists_equal a b)
  (let/ec _return (begin
(if (not (equal? (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (let ()
(_return #f)
) (void))
(define m 0)
(let/ec _break (let loop ()
  (if (< m (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (begin
    (let/ec _cont
      (if (not (equal? (if a (if (hash? a) (hash-ref a m #f) (list-ref a (int m))) #f) (if b (if (hash? b) (hash-ref b m #f) (list-ref b (int m))) #f))) (let ()
(_return #f)
) (void))
      (set! m (let ([__l m] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (test_sieve)
  (let/ec _return (begin
(define e1 (sieve 8))
(if (not (lists_equal e1 (list 2 3 5 7))) (let ()
(panic "sieve(8) failed")
) (void))
(define e2 (sieve 27))
(if (not (lists_equal e2 (list 2 3 5 7 11 13 17 19 23))) (let ()
(panic "sieve(27) failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_sieve)
(displayln (to-string (sieve 30)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
