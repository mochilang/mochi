;; Generated by Mochi 0.10.61 on 2025-08-08 16:10 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define PI 3.141592653589793)
(define rand_seed 123456789)
(define (rand_float)
  (let/ec _return (begin
(set! rand_seed (modulo (let ([__l (* 1103515245 rand_seed)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return (/ (exact->inexact rand_seed) 2147483648.0))
))
)
(define (rand_range min_val max_val)
  (let/ec _return (begin
(_return (let ([__l (* (rand_float) (- max_val min_val))] [__r min_val]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (abs_float x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (equal? x 0.0) (let ()
(_return 0.0)
) (void))
(define guess (/ x 2.0))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (pi_estimator iterations)
  (let/ec _return (begin
(define inside 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i iterations) (let/ec _cont
    (define x (rand_range (- 1.0) 1.0))
    (define y (rand_range (- 1.0) 1.0))
    (if (<= (let ([__l (* x x)] [__r (* y y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1.0) (let ()
(set! inside (let ([__l inside] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define proportion (/ inside (exact->inexact iterations)))
(define pi_estimate (* proportion 4.0))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "The estimated value of pi is" pi_estimate)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "The numpy value of pi is" PI)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "The total error is" (abs_float (- PI pi_estimate)))) " "))
))
)
(define (area_under_curve_estimator iterations f min_value max_value)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i iterations) (let/ec _cont
    (define x (rand_range min_value max_value))
    (set! sum (let ([__l sum] [__r (f x)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define expected (/ sum (exact->inexact iterations)))
(_return (* expected (- max_value min_value)))
))
)
(define (area_under_line_estimator_check iterations min_value max_value)
  (let/ec _return (begin
(define (identity_function x)
  (let/ec _return (begin
(_return x)
))
)
(define estimated_value (area_under_curve_estimator iterations identity_function min_value max_value))
(define expected_value (/ (- (* max_value max_value) (* min_value min_value)) 2.0))
(displayln "******************")
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Estimating area under y=x where x varies from" min_value)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Estimated value is" estimated_value)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Expected value is" expected_value)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Total error is" (abs_float (- estimated_value expected_value)))) " "))
(displayln "******************")
))
)
(define (pi_estimator_using_area_under_curve iterations)
  (let/ec _return (begin
(define (semi_circle x)
  (let/ec _return (begin
(define y (- 4.0 (* x x)))
(define s (sqrtApprox y))
(_return s)
))
)
(define estimated_value (area_under_curve_estimator iterations semi_circle 0.0 2.0))
(displayln "******************")
(displayln "Estimating pi using area_under_curve_estimator")
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Estimated value is" estimated_value)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Expected value is" PI)) " "))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "Total error is" (abs_float (- estimated_value PI)))) " "))
(displayln "******************")
))
)
(define (main)
  (let/ec _return (begin
(pi_estimator 1000)
(area_under_line_estimator_check 1000 0.0 1.0)
(pi_estimator_using_area_under_curve 1000)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
