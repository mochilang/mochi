;; Generated by Mochi 0.10.66 on 2025-08-15 15:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (sort_by_ratio index ratio)
  (let/ec _return (begin
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not index) 0] [(string? index) (string-length index)] [(hash? index) (hash-count index)] [else (length index)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define key (if index (if (hash? index) (hash-ref index i #f) (safe-index index (int i))) #f))
      (define key_ratio (if ratio (if (hash? ratio) (hash-ref ratio key #f) (safe-index ratio (int key))) #f))
      (define j (- i 1))
      (let/ec _break (let loop ()
  (if (and (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l (if ratio (if (hash? ratio) (hash-ref ratio (if index (if (hash? index) (hash-ref index j #f) (safe-index index (int j))) #f) #f) (safe-index ratio (int (if index (if (hash? index) (hash-ref index j #f) (safe-index index (int j))) #f)))) #f)] [__r key_ratio]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (begin
    (let/ec _cont
      (set! index (list-set index (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (if index (if (hash? index) (hash-ref index j #f) (safe-index index (int j))) #f)))
      (set! j (- j 1))
    )
    (loop)) (void))))
      (set! index (list-set index (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) key))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return index)
))
)
(define (fractional_knapsack value weight capacity)
  (let/ec _return (begin
(define n (cond [(not value) 0] [(string? value) (string-length value)] [(hash? value) (hash-count value)] [else (length value)]))
(define index (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! index (append (or index (list)) (list i)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define ratio (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! ratio (append (or ratio (list)) (list (/ (if value (if (hash? value) (hash-ref value i #f) (safe-index value (int i))) #f) (if weight (if (hash? weight) (hash-ref weight i #f) (safe-index weight (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! index (sort_by_ratio index ratio))
(define fractions (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! fractions (append (or fractions (list)) (list 0.0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define max_value 0.0)
(define idx 0)
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not index) 0] [(string? index) (string-length index)] [(hash? index) (hash-count index)] [else (length index)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define item (if index (if (hash? index) (hash-ref index idx #f) (safe-index index (int idx))) #f))
      (if (let ([__l (if weight (if (hash? weight) (hash-ref weight item #f) (safe-index weight (int item))) #f)] [__r capacity]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(set! fractions (list-set fractions (int item) 1.0))
(set! max_value (let ([__l max_value] [__r (if value (if (hash? value) (hash-ref value item #f) (safe-index value (int item))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! capacity (- capacity (if weight (if (hash? weight) (hash-ref weight item #f) (safe-index weight (int item))) #f)))
) (let ()
(set! fractions (list-set fractions (int item) (/ capacity (if weight (if (hash? weight) (hash-ref weight item #f) (safe-index weight (int item))) #f))))
(set! max_value (let ([__l max_value] [__r (/ (* (if value (if (hash? value) (hash-ref value item #f) (safe-index value (int item))) #f) capacity) (if weight (if (hash? weight) (hash-ref weight item #f) (safe-index weight (int item))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_break)
))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "max_value" max_value) (hash-set! h "fractions" fractions) h))
))
)
(define v (list 1.0 3.0 5.0 7.0 9.0))
(define w (list 0.9 0.7 0.5 0.3 0.1))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (fractional_knapsack v w 5.0))
(displayln (fractional_knapsack (list 1.0 3.0 5.0 7.0) (list 0.9 0.7 0.5 0.3) 30.0))
(displayln (fractional_knapsack (list) (list) 30.0))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
