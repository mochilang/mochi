;; Generated by Mochi 0.10.65 on 2025-08-14 16:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (sort_by_ratio_desc arr)
  (let/ec _return (begin
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define key (if arr (if (hash? arr) (hash-ref arr i #f) (safe-index arr (int i))) #f))
      (define j (- i 1))
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define current (if arr (if (hash? arr) (hash-ref arr j #f) (safe-index arr (int j))) #f))
      (if (let ([__l (/ (if current (hash-ref current "value" #f) #f) (if current (hash-ref current "weight" #f) #f))] [__r (/ (if key (hash-ref key "value" #f) #f) (if key (hash-ref key "weight" #f) #f))]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) current))
(set! j (- j 1))
) (let ()
(_break)
))
    )
    (loop)) (void))))
      (set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) key))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return arr)
))
)
(define (sum_first arr k)
  (let/ec _return (begin
(define s 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (and (let ([__l i] [__r k]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l i] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (begin
    (let/ec _cont
      (set! s (let ([__l s] [__r (if arr (if (hash? arr) (hash-ref arr i #f) (safe-index arr (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return s)
))
)
(define (frac_knapsack vl wt w n)
  (let/ec _return (begin
(define items (list))
(define i 0)
(let/ec _break (let loop ()
  (if (and (let ([__l i] [__r (cond [(not vl) 0] [(string? vl) (string-length vl)] [(hash? vl) (hash-count vl)] [else (length vl)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l i] [__r (cond [(not wt) 0] [(string? wt) (string-length wt)] [(hash? wt) (hash-count wt)] [else (length wt)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (begin
    (let/ec _cont
      (set! items (append (or items (list)) (list (let ([h (make-hash)]) (hash-set! h "value" (if vl (if (hash? vl) (hash-ref vl i #f) (safe-index vl (int i))) #f)) (hash-set! h "weight" (if wt (if (hash? wt) (hash-ref wt i #f) (safe-index wt (int i))) #f)) h))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! items (sort_by_ratio_desc items))
(define values (list))
(define weights (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not items) 0] [(string? items) (string-length items)] [(hash? items) (hash-count items)] [else (length items)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define itm (if items (if (hash? items) (hash-ref items i #f) (safe-index items (int i))) #f))
      (set! values (append (or values (list)) (list (if itm (hash-ref itm "value" #f) #f))))
      (set! weights (append (or weights (list)) (list (if itm (hash-ref itm "weight" #f) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define acc (list))
(define total 0.0)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not weights) 0] [(string? weights) (string-length weights)] [(hash? weights) (hash-count weights)] [else (length weights)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! total (let ([__l total] [__r (if weights (if (hash? weights) (hash-ref weights i #f) (safe-index weights (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! acc (append (or acc (list)) (list total)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define k 0)
(let/ec _break (let loop ()
  (if (and (let ([__l k] [__r (cond [(not acc) 0] [(string? acc) (string-length acc)] [(hash? acc) (hash-count acc)] [else (length acc)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l w] [__r (if acc (if (hash? acc) (hash-ref acc k #f) (safe-index acc (int k))) #f)]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (begin
    (let/ec _cont
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (equal? k 0) (let ()
(_return 0.0)
) (void))
(if (let ([__l k] [__r (cond [(not values) 0] [(string? values) (string-length values)] [(hash? values) (hash-count values)] [else (length values)])]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(_return (sum_first values (cond [(not values) 0] [(string? values) (string-length values)] [(hash? values) (hash-count values)] [else (length values)])))
) (void))
(if (not (equal? k n)) (let ()
(_return (let ([__l (sum_first values k)] [__r (/ (* (- w (if acc (if (hash? acc) (hash-ref acc (- k 1) #f) (safe-index acc (int (- k 1)))) #f)) (if values (if (hash? values) (hash-ref values k #f) (safe-index values (int k))) #f)) (if weights (if (hash? weights) (hash-ref weights k #f) (safe-index weights (int k))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return (sum_first values k))
))
)
(define vl (list 60.0 100.0 120.0))
(define wt (list 10.0 20.0 30.0))
(define result (frac_knapsack vl wt 50.0 3))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string result))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
