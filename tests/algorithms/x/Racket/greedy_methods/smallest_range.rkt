;; Generated by Mochi 0.10.60 on 2025-08-08 10:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define INF 1000000000)
(define (smallest_range nums)
  (let/ec _return (begin
(define heap (list))
(define current_max (- INF))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not nums) 0] [(string? nums) (string-length nums)] [(hash? nums) (hash-count nums)] [else (length nums)])) (let/ec _cont
    (define first_val (if (if nums (if (hash? nums) (hash-ref nums i #f) (list-ref nums (int i))) #f) (if (hash? (if nums (if (hash? nums) (hash-ref nums i #f) (list-ref nums (int i))) #f)) (hash-ref (if nums (if (hash? nums) (hash-ref nums i #f) (list-ref nums (int i))) #f) 0 #f) (list-ref (if nums (if (hash? nums) (hash-ref nums i #f) (list-ref nums (int i))) #f) (int 0))) #f))
    (set! heap (append heap (list (let ([h (make-hash)]) (hash-set! h "value" first_val) (hash-set! h "list_idx" i) (hash-set! h "elem_idx" 0) h))))
    (if (> first_val current_max) (let ()
(set! current_max first_val)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define best (list (- INF) INF))
(let/ec _break (let loop ()
  (if (> (cond [(not heap) 0] [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)]) 0) (let/ec _cont
    (define min_idx 0)
    (define j 1)
    (let/ec _break (let loop ()
  (if (< j (cond [(not heap) 0] [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])) (let/ec _cont
    (define hj (if heap (if (hash? heap) (hash-ref heap j #f) (list-ref heap (int j))) #f))
    (define hmin (if heap (if (hash? heap) (hash-ref heap min_idx #f) (list-ref heap (int min_idx))) #f))
    (if (< (if hj (hash-ref hj "value" #f) #f) (if hmin (hash-ref hmin "value" #f) #f)) (let ()
(set! min_idx j)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define item (if heap (if (hash? heap) (hash-ref heap min_idx #f) (list-ref heap (int min_idx))) #f))
    (define new_heap (list))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k (cond [(not heap) 0] [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])) (let/ec _cont
    (if (not (equal? k min_idx)) (let ()
(set! new_heap (append new_heap (list (if heap (if (hash? heap) (hash-ref heap k #f) (list-ref heap (int k))) #f))))
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! heap new_heap)
    (define current_min (if item (hash-ref item "value" #f) #f))
    (if (< (- current_max current_min) (- (if best (if (hash? best) (hash-ref best 1 #f) (list-ref best (int 1))) #f) (if best (if (hash? best) (hash-ref best 0 #f) (list-ref best (int 0))) #f))) (let ()
(set! best (list current_min current_max))
) (void))
    (if (equal? (if item (hash-ref item "elem_idx" #f) #f) (- (cond [(not (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f)) 0] [(string? (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f)) (string-length (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f))] [(hash? (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f)) (hash-count (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f))] [else (length (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f))]) 1)) (let ()
(_break)
) (void))
    (define next_val (if (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f) (if (hash? (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f)) (hash-ref (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f) (let ([__l (if item (hash-ref item "elem_idx" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if nums (if (hash? nums) (hash-ref nums (if item (hash-ref item "list_idx" #f) #f) #f) (list-ref nums (int (if item (hash-ref item "list_idx" #f) #f)))) #f) (int (let ([__l (if item (hash-ref item "elem_idx" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
    (set! heap (append heap (list (let ([h (make-hash)]) (hash-set! h "value" next_val) (hash-set! h "list_idx" (if item (hash-ref item "list_idx" #f) #f)) (hash-set! h "elem_idx" (let ([__l (if item (hash-ref item "elem_idx" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))))
    (if (> next_val current_max) (let ()
(set! current_max next_val)
) (void))
    (loop)) (void))))
(_return best)
))
)
(define (list_to_string arr)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (set! s (string-append s (format "~a" (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))))
    (if (< i (- (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1)) (let ()
(set! s (string-append s ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append s "]"))
))
)
(define (main)
  (let/ec _return (begin
(define result1 (smallest_range (list (list 4 10 15 24 26) (list 0 9 12 20) (list 5 18 22 30))))
(displayln (list_to_string result1))
(define result2 (smallest_range (list (list 1 2 3) (list 1 2 3) (list 1 2 3))))
(displayln (list_to_string result2))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
