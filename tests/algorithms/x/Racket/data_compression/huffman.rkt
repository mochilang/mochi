;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (get_freq n)
  (let/ec _return (begin
(_return (if (equal? (if n (hash-ref n "tag" #f) #f) "Leaf") (let ([f (if n (hash-ref n "freq" #f) #f)]) f) (if (equal? (if n (hash-ref n "tag" #f) #f) "Node") (let ([f (if n (hash-ref n "freq" #f) #f)]) f) #f)))
))
)
(define (sort_nodes nodes)
  (let/ec _return (begin
(define arr nodes)
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (define key (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))
    (define j (- i 1))
    (let/ec _break (let loop ()
  (if (and (>= j 0) (> (get_freq (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f)) (get_freq key))) (let/ec _cont
    (set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f)))
    (set! j (- j 1))
    (loop)) (void))))
    (set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) key))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (rest nodes)
  (let/ec _return (begin
(define res (list))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])) (let/ec _cont
    (set! res (append res (list (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (count_freq text)
  (let/ec _return (begin
(define chars (list))
(define freqs (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? text) (string-length text)] [(hash? text) (hash-count text)] [else (length text)])) (let/ec _cont
    (define c (slice text i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define j 0)
    (define found #f)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)])) (let/ec _cont
    (if (string=? (if chars (if (hash? chars) (hash-ref chars j #f) (list-ref chars (int j))) #f) c) (let ()
(set! freqs (list-set freqs (int j) (let ([__l (if freqs (if (hash? freqs) (hash-ref freqs j #f) (list-ref freqs (int j))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! found #t)
(_break)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (not found) (let ()
(set! chars (append chars (list c)))
(set! freqs (append freqs (list 1)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define leaves (list))
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? chars) (string-length chars)] [(hash? chars) (hash-count chars)] [else (length chars)])) (let/ec _cont
    (set! leaves (append leaves (list (hash "tag" "Leaf" "symbol" (if chars (if (hash? chars) (hash-ref chars k #f) (list-ref chars (int k))) #f) "freq" (if freqs (if (hash? freqs) (hash-ref freqs k #f) (list-ref freqs (int k))) #f)))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (sort_nodes leaves))
))
)
(define (build_tree nodes)
  (let/ec _return (begin
(define arr nodes)
(let/ec _break (let loop ()
  (if (> (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1) (let/ec _cont
    (define left (if arr (if (hash? arr) (hash-ref arr 0 #f) (list-ref arr (int 0))) #f))
    (set! arr (rest arr))
    (define right (if arr (if (hash? arr) (hash-ref arr 0 #f) (list-ref arr (int 0))) #f))
    (set! arr (rest arr))
    (define node (hash "tag" "Node" "freq" (let ([__l (get_freq left)] [__r (get_freq right)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "left" left "right" right))
    (set! arr (append arr (list node)))
    (set! arr (sort_nodes arr))
    (loop)) (void))))
(_return (if arr (if (hash? arr) (hash-ref arr 0 #f) (list-ref arr (int 0))) #f))
))
)
(define (concat_pairs a b)
  (let/ec _return (begin
(define res a)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let/ec _cont
    (set! res (append res (list (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (collect_codes tree prefix)
  (let/ec _return (begin
(_return (if (equal? (if tree (hash-ref tree "tag" #f) #f) "Leaf") (let ([s (if tree (hash-ref tree "symbol" #f) #f)]) (list (list s prefix))) (if (equal? (if tree (hash-ref tree "tag" #f) #f) "Node") (let ([l (if tree (hash-ref tree "left" #f) #f)] [r (if tree (hash-ref tree "right" #f) #f)]) (concat_pairs (collect_codes l (string-append prefix "0")) (collect_codes r (string-append prefix "1")))) #f)))
))
)
(define (find_code pairs ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pairs) (string-length pairs)] [(hash? pairs) (hash-count pairs)] [else (length pairs)])) (let/ec _cont
    (if (string=? (if (if pairs (if (hash? pairs) (hash-ref pairs i #f) (list-ref pairs (int i))) #f) (if (hash? (if pairs (if (hash? pairs) (hash-ref pairs i #f) (list-ref pairs (int i))) #f)) (hash-ref (if pairs (if (hash? pairs) (hash-ref pairs i #f) (list-ref pairs (int i))) #f) 0 #f) (list-ref (if pairs (if (hash? pairs) (hash-ref pairs i #f) (list-ref pairs (int i))) #f) (int 0))) #f) ch) (let ()
(_return (if (if pairs (if (hash? pairs) (hash-ref pairs i #f) (list-ref pairs (int i))) #f) (if (hash? (if pairs (if (hash? pairs) (hash-ref pairs i #f) (list-ref pairs (int i))) #f)) (hash-ref (if pairs (if (hash? pairs) (hash-ref pairs i #f) (list-ref pairs (int i))) #f) 1 #f) (list-ref (if pairs (if (hash? pairs) (hash-ref pairs i #f) (list-ref pairs (int i))) #f) (int 1))) #f))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return "")
))
)
(define (huffman_encode text)
  (let/ec _return (begin
(if (string=? text "") (let ()
(_return "")
) (void))
(define leaves (count_freq text))
(define tree (build_tree leaves))
(define codes (collect_codes tree ""))
(define encoded "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? text) (string-length text)] [(hash? text) (hash-count text)] [else (length text)])) (let/ec _cont
    (define c (slice text i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! encoded (string-append (string-append encoded (find_code codes c)) " "))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return encoded)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (huffman_encode "beep boop beer!"))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
