;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (token_to_string t)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append (string-append (string-append "(" (format "~a" (if t (hash-ref t "offset" #f) #f))) ", ") (format "~a" (if t (hash-ref t "length" #f) #f))) ", ") (if t (hash-ref t "indicator" #f) #f)) ")"))
))
)
(define (tokens_to_string ts)
  (let/ec _return (begin
(define res "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? ts) (string-length ts)] [(hash? ts) (hash-count ts)] [else (length ts)])) (let/ec _cont
    (set! res (string-append res (token_to_string (if ts (if (hash? ts) (hash-ref ts i #f) (list-ref ts (int i))) #f))))
    (if (< i (- (cond [(string? ts) (string-length ts)] [(hash? ts) (hash-count ts)] [else (length ts)]) 1)) (let ()
(set! res (string-append res ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append res "]"))
))
)
(define (match_length_from_index text window text_index window_index)
  (let/ec _return (begin
(if (or (>= text_index (cond [(string? text) (string-length text)] [(hash? text) (hash-count text)] [else (length text)])) (>= window_index (cond [(string? window) (string-length window)] [(hash? window) (hash-count window)] [else (length window)]))) (let ()
(_return 0)
) (void))
(define tc (slice text text_index (let ([__l text_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define wc (slice window window_index (let ([__l window_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(if (not (string=? tc wc)) (let ()
(_return 0)
) (void))
(_return (let ([__l 1] [__r (match_length_from_index text (string-append window tc) (let ([__l text_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l window_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (find_encoding_token text search_buffer)
  (let/ec _return (begin
(if (equal? (cond [(string? text) (string-length text)] [(hash? text) (hash-count text)] [else (length text)]) 0) (let ()
(panic "We need some text to work with.")
) (void))
(define length_ 0)
(define offset 0)
(if (equal? (cond [(string? search_buffer) (string-length search_buffer)] [(hash? search_buffer) (hash-count search_buffer)] [else (length search_buffer)]) 0) (let ()
(_return (hash "offset" offset "length" length_ "indicator" (slice text 0 1)))
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? search_buffer) (string-length search_buffer)] [(hash? search_buffer) (hash-count search_buffer)] [else (length search_buffer)])) (let/ec _cont
    (define ch (slice search_buffer i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define found_offset (- (cond [(string? search_buffer) (string-length search_buffer)] [(hash? search_buffer) (hash-count search_buffer)] [else (length search_buffer)]) i))
    (if (string=? ch (slice text 0 1)) (let ()
(define found_length (match_length_from_index text search_buffer 0 i))
(if (>= found_length length_) (let ()
(set! offset found_offset)
(set! length_ found_length)
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "offset" offset "length" length_ "indicator" (slice text length_ (let ([__l length_] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
)
(define (lz77_compress text window_size lookahead)
  (let/ec _return (begin
(define search_buffer_size (- window_size lookahead))
(define output (list))
(define search_buffer "")
(define remaining text)
(let/ec _break (let loop ()
  (if (> (cond [(string? remaining) (string-length remaining)] [(hash? remaining) (hash-count remaining)] [else (length remaining)]) 0) (let/ec _cont
    (define token (find_encoding_token remaining search_buffer))
    (define add_len (let ([__l (if token (hash-ref token "length" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! search_buffer (string-append search_buffer (slice remaining 0 add_len)))
    (if (> (cond [(string? search_buffer) (string-length search_buffer)] [(hash? search_buffer) (hash-count search_buffer)] [else (length search_buffer)]) search_buffer_size) (let ()
(set! search_buffer (slice search_buffer (- (cond [(string? search_buffer) (string-length search_buffer)] [(hash? search_buffer) (hash-count search_buffer)] [else (length search_buffer)]) search_buffer_size) (cond [(string? search_buffer) (string-length search_buffer)] [(hash? search_buffer) (hash-count search_buffer)] [else (length search_buffer)])))
) (void))
    (set! remaining (slice remaining add_len (cond [(string? remaining) (string-length remaining)] [(hash? remaining) (hash-count remaining)] [else (length remaining)])))
    (set! output (append output (list token)))
    (loop)) (void))))
(_return output)
))
)
(define (lz77_decompress tokens)
  (let/ec _return (begin
(define output "")
(let/ec _break (for ([t tokens])
  (let/ec _cont
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if t (hash-ref t "length" #f) #f)) (let/ec _cont
    (set! output (string-append output (slice output (- (cond [(string? output) (string-length output)] [(hash? output) (hash-count output)] [else (length output)]) (if t (hash-ref t "offset" #f) #f)) (let ([__l (- (cond [(string? output) (string-length output)] [(hash? output) (hash-count output)] [else (length output)]) (if t (hash-ref t "offset" #f) #f))] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! output (string-append output (if t (hash-ref t "indicator" #f) #f)))
  )))
(_return output)
))
)
(define c1 (lz77_compress "ababcbababaa" 13 6))
(define c2 (lz77_compress "aacaacabcabaaac" 13 6))
(define tokens_example (list (hash "offset" 0 "length" 0 "indicator" "c") (hash "offset" 0 "length" 0 "indicator" "a") (hash "offset" 0 "length" 0 "indicator" "b") (hash "offset" 0 "length" 0 "indicator" "r") (hash "offset" 3 "length" 1 "indicator" "c") (hash "offset" 2 "length" 1 "indicator" "d") (hash "offset" 7 "length" 4 "indicator" "r") (hash "offset" 3 "length" 5 "indicator" "d")))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (tokens_to_string c1))
(displayln (tokens_to_string c2))
(displayln (lz77_decompress tokens_example))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
