;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (all_rotations s)
  (let/ec _return (begin
(define n (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(define rotations (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define rotation (let ([__l (slice s i n)] [__r (slice s 0 i)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! rotations (append rotations (list rotation)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return rotations)
))
)
(define (sort_strings arr)
  (let/ec _return (begin
(define n (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define i 1)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define key (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))
    (define j (- i 1))
    (let/ec _break (let loop ()
  (if (and (>= j 0) (string>? (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) key)) (let/ec _cont
    (set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f)))
    (set! j (- j 1))
    (loop)) (void))))
    (set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) key))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (join_strings arr)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (set! res (string-append res (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (bwt_transform s)
  (let/ec _return (begin
(if (string=? s "") (let ()
(panic "input string must not be empty")
) (void))
(define rotations (all_rotations s))
(set! rotations (sort_strings rotations))
(define last_col (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? rotations) (string-length rotations)] [(hash? rotations) (hash-count rotations)] [else (length rotations)])) (let/ec _cont
    (define word (if rotations (if (hash? rotations) (hash-ref rotations i #f) (list-ref rotations (int i))) #f))
    (set! last_col (append last_col (list (slice word (- (cond [(string? word) (string-length word)] [(hash? word) (hash-count word)] [else (length word)]) 1) (cond [(string? word) (string-length word)] [(hash? word) (hash-count word)] [else (length word)])))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define bwt_string (join_strings last_col))
(define idx (index_of rotations s))
(_return (hash "bwt_string" bwt_string "idx_original_string" idx))
))
)
(define (index_of arr target)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (if (string=? (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) target) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (reverse_bwt bwt_string idx_original_string)
  (let/ec _return (begin
(if (string=? bwt_string "") (let ()
(panic "bwt string must not be empty")
) (void))
(define n (cond [(string? bwt_string) (string-length bwt_string)] [(hash? bwt_string) (hash-count bwt_string)] [else (length bwt_string)]))
(if (or (< idx_original_string 0) (>= idx_original_string n)) (let ()
(panic "index out of range")
) (void))
(define ordered_rotations (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! ordered_rotations (append ordered_rotations (list "")))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define iter 0)
(let/ec _break (let loop ()
  (if (< iter n) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (define ch (slice bwt_string j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! ordered_rotations (list-set ordered_rotations (int j) (string-append ch (if ordered_rotations (if (hash? ordered_rotations) (hash-ref ordered_rotations j #f) (list-ref ordered_rotations (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ordered_rotations (sort_strings ordered_rotations))
    (set! iter (let ([__l iter] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (if ordered_rotations (if (hash? ordered_rotations) (hash-ref ordered_rotations idx_original_string #f) (list-ref ordered_rotations (int idx_original_string))) #f))
))
)
(define s "^BANANA")
(define result (bwt_transform s))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (if result (hash-ref result "bwt_string" #f) #f))
(displayln (if result (hash-ref result "idx_original_string" #f) #f))
(displayln (reverse_bwt (if result (hash-ref result "bwt_string" #f) #f) (if result (hash-ref result "idx_original_string" #f) #f)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
