;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (clamp_byte x)
  (let/ec _return (begin
(if (< x 0) (let ()
(_return 0)
) (void))
(if (> x 255) (let ()
(_return 255)
) (void))
(_return x)
))
)
(define (convert_to_negative img)
  (let/ec _return (begin
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define out (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (set! row (append row (list (- 255 (if (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (if (hash? (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) x #f) (list-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (int x))) #f)))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (change_contrast img factor)
  (let/ec _return (begin
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define out (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (define p (if (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (if (hash? (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) x #f) (list-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (int x))) #f))
    (define v (let ([__l (floor (/ (* (- p 128) factor) 100))] [__r 128]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! v (clamp_byte v))
    (set! row (append row (list v)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (gen_gaussian_kernel n sigma)
  (let/ec _return (begin
(if (equal? n 3) (let ()
(_return (list (list (/ 1.0 16.0) (/ 2.0 16.0) (/ 1.0 16.0)) (list (/ 2.0 16.0) (/ 4.0 16.0) (/ 2.0 16.0)) (list (/ 1.0 16.0) (/ 2.0 16.0) (/ 1.0 16.0))))
) (void))
(define k (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! row (append row (list 0.0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! k (append k (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return k)
))
)
(define (img_convolve img kernel)
  (let/ec _return (begin
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define out (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (define acc 0.0)
    (define ky 0)
    (let/ec _break (let loop ()
  (if (< ky (cond [(string? kernel) (string-length kernel)] [(hash? kernel) (hash-count kernel)] [else (length kernel)])) (let/ec _cont
    (define kx 0)
    (let/ec _break (let loop ()
  (if (< kx (cond [(string? (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f)) (string-length (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f))] [(hash? (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f)) (hash-count (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f))] [else (length (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f))])) (let/ec _cont
    (define iy (- (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
    (define ix (- (let ([__l x] [__r kx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
    (define pixel 0)
    (if (and (and (and (>= iy 0) (< iy h)) (>= ix 0)) (< ix w)) (let ()
(set! pixel (if (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) (if (hash? (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) ix #f) (list-ref (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) (int ix))) #f))
) (void))
    (set! acc (let ([__l acc] [__r (* (if (if kernel (if (hash? kernel) (hash-ref kernel ky #f) (list-ref kernel (int ky))) #f) (if (hash? (if kernel (if (hash? kernel) (hash-ref kernel ky #f) (list-ref kernel (int ky))) #f)) (hash-ref (if kernel (if (hash? kernel) (hash-ref kernel ky #f) (list-ref kernel (int ky))) #f) kx #f) (list-ref (if kernel (if (hash? kernel) (hash-ref kernel ky #f) (list-ref kernel (int ky))) #f) (int kx))) #f) (* 1.0 pixel))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! kx (let ([__l kx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ky (let ([__l ky] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row (append row (list (int acc))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (sort_ints xs)
  (let/ec _return (begin
(define arr xs)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1) i)) (let/ec _cont
    (if (> (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (let ()
(define tmp (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f))
(set! arr (list-set arr (int j) (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (median_filter img k)
  (let/ec _return (begin
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define offset (floor (/ k 2)))
(define out (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (define vals (list))
    (define ky 0)
    (let/ec _break (let loop ()
  (if (< ky k) (let/ec _cont
    (define kx 0)
    (let/ec _break (let loop ()
  (if (< kx k) (let/ec _cont
    (define iy (- (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) offset))
    (define ix (- (let ([__l x] [__r kx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) offset))
    (define pixel 0)
    (if (and (and (and (>= iy 0) (< iy h)) (>= ix 0)) (< ix w)) (let ()
(set! pixel (if (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) (if (hash? (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) ix #f) (list-ref (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) (int ix))) #f))
) (void))
    (set! vals (append vals (list pixel)))
    (set! kx (let ([__l kx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ky (let ([__l ky] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define sorted (sort_ints vals))
    (set! row (append row (list (if sorted (if (hash? sorted) (hash-ref sorted (floor (/ (cond [(string? sorted) (string-length sorted)] [(hash? sorted) (hash-count sorted)] [else (length sorted)]) 2)) #f) (list-ref sorted (int (floor (/ (cond [(string? sorted) (string-length sorted)] [(hash? sorted) (hash-count sorted)] [else (length sorted)]) 2))))) #f))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (iabs x)
  (let/ec _return (begin
(if (< x 0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (sobel_filter img)
  (let/ec _return (begin
(define gx (list (list 1 0 (- 1)) (list 2 0 (- 2)) (list 1 0 (- 1))))
(define gy (list (list 1 2 1) (list 0 0 0) (list (- 1) (- 2) (- 1))))
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define out (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (define sx 0)
    (define sy 0)
    (define ky 0)
    (let/ec _break (let loop ()
  (if (< ky 3) (let/ec _cont
    (define kx 0)
    (let/ec _break (let loop ()
  (if (< kx 3) (let/ec _cont
    (define iy (- (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
    (define ix (- (let ([__l x] [__r kx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1))
    (define pixel 0)
    (if (and (and (and (>= iy 0) (< iy h)) (>= ix 0)) (< ix w)) (let ()
(set! pixel (if (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) (if (hash? (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) ix #f) (list-ref (if img (if (hash? img) (hash-ref img iy #f) (list-ref img (int iy))) #f) (int ix))) #f))
) (void))
    (set! sx (let ([__l sx] [__r (* (if (if gx (if (hash? gx) (hash-ref gx ky #f) (list-ref gx (int ky))) #f) (if (hash? (if gx (if (hash? gx) (hash-ref gx ky #f) (list-ref gx (int ky))) #f)) (hash-ref (if gx (if (hash? gx) (hash-ref gx ky #f) (list-ref gx (int ky))) #f) kx #f) (list-ref (if gx (if (hash? gx) (hash-ref gx ky #f) (list-ref gx (int ky))) #f) (int kx))) #f) pixel)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! sy (let ([__l sy] [__r (* (if (if gy (if (hash? gy) (hash-ref gy ky #f) (list-ref gy (int ky))) #f) (if (hash? (if gy (if (hash? gy) (hash-ref gy ky #f) (list-ref gy (int ky))) #f)) (hash-ref (if gy (if (hash? gy) (hash-ref gy ky #f) (list-ref gy (int ky))) #f) kx #f) (list-ref (if gy (if (hash? gy) (hash-ref gy ky #f) (list-ref gy (int ky))) #f) (int kx))) #f) pixel)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! kx (let ([__l kx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ky (let ([__l ky] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row (append row (list (let ([__l (iabs sx)] [__r (iabs sy)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (get_neighbors_pixel img x y)
  (let/ec _return (begin
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define neighbors (list))
(define dy (- 1))
(let/ec _break (let loop ()
  (if (<= dy 1) (let/ec _cont
    (define dx (- 1))
    (let/ec _break (let loop ()
  (if (<= dx 1) (let/ec _cont
    (if (not (and (equal? dx 0) (equal? dy 0))) (let ()
(define ny (let ([__l y] [__r dy]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define nx (let ([__l x] [__r dx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define val 0)
(if (and (and (and (>= ny 0) (< ny h)) (>= nx 0)) (< nx w)) (let ()
(set! val (if (if img (if (hash? img) (hash-ref img ny #f) (list-ref img (int ny))) #f) (if (hash? (if img (if (hash? img) (hash-ref img ny #f) (list-ref img (int ny))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img ny #f) (list-ref img (int ny))) #f) nx #f) (list-ref (if img (if (hash? img) (hash-ref img ny #f) (list-ref img (int ny))) #f) (int nx))) #f))
) (void))
(set! neighbors (append neighbors (list val)))
) (void))
    (set! dx (let ([__l dx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! dy (let ([__l dy] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return neighbors)
))
)
(define (pow2 e)
  (let/ec _return (begin
(define r 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i e) (let/ec _cont
    (set! r (* r 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return r)
))
)
(define (local_binary_value img x y)
  (let/ec _return (begin
(define center (if (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (if (hash? (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) x #f) (list-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (int x))) #f))
(define neighbors (get_neighbors_pixel img x y))
(define v 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? neighbors) (string-length neighbors)] [(hash? neighbors) (hash-count neighbors)] [else (length neighbors)])) (let/ec _cont
    (if (>= (if neighbors (if (hash? neighbors) (hash-ref neighbors i #f) (list-ref neighbors (int i))) #f) center) (let ()
(set! v (let ([__l v] [__r (pow2 i)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return v)
))
)
(define (local_binary_pattern img)
  (let/ec _return (begin
(define h (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define w (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define out (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (set! row (append row (list (local_binary_value img x y))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define img (list (list 52 55 61) (list 62 59 55) (list 63 65 66)))
(define negative (convert_to_negative img))
(define contrast (change_contrast img 110))
(define kernel (gen_gaussian_kernel 3 1.0))
(define laplace (list (list 0.25 0.5 0.25) (list 0.5 (- 3.0) 0.5) (list 0.25 0.5 0.25)))
(define convolved (img_convolve img laplace))
(define medianed (median_filter img 3))
(define sobel (sobel_filter img))
(define lbp_img (local_binary_pattern img))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln negative)
(displayln contrast)
(displayln kernel)
(displayln convolved)
(displayln medianed)
(displayln sobel)
(displayln lbp_img)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
