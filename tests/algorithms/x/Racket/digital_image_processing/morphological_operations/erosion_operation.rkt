;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (rgb_to_gray rgb)
  (let/ec _return (begin
(define gray (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? rgb) (string-length rgb)] [(hash? rgb) (hash-count rgb)] [else (length rgb)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (string-length (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f))] [(hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-count (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f))] [else (length (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f))])) (let/ec _cont
    (define r (exact->inexact (if (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f) (if (hash? (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f)) (hash-ref (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f) 0 #f) (list-ref (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f) (int 0))) #f)))
    (define g (exact->inexact (if (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f) (if (hash? (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f)) (hash-ref (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f) 1 #f) (list-ref (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f) (int 1))) #f)))
    (define b (exact->inexact (if (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f) (if (hash? (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f)) (hash-ref (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f) 2 #f) (list-ref (if (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (if (hash? (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f)) (hash-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) j #f) (list-ref (if rgb (if (hash? rgb) (hash-ref rgb i #f) (list-ref rgb (int i))) #f) (int j))) #f) (int 2))) #f)))
    (define value (let ([__l (let ([__l (* 0.2989 r)] [__r (* 0.587 g)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* 0.114 b)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! row (append row (list value)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! gray (append gray (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return gray)
))
)
(define (gray_to_binary gray)
  (let/ec _return (begin
(define binary (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? gray) (string-length gray)] [(hash? gray) (hash-count gray)] [else (length gray)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f)) (string-length (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f))] [(hash? (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f)) (hash-count (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f))] [else (length (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f))])) (let/ec _cont
    (set! row (append row (list (and (> (if (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f) (if (hash? (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f)) (hash-ref (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f) j #f) (list-ref (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f) (int j))) #f) 127.0) (<= (if (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f) (if (hash? (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f)) (hash-ref (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f) j #f) (list-ref (if gray (if (hash? gray) (hash-ref gray i #f) (list-ref gray (int i))) #f) (int j))) #f) 255.0)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! binary (append binary (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return binary)
))
)
(define (erosion image kernel)
  (let/ec _return (begin
(define h (cond [(string? image) (string-length image)] [(hash? image) (hash-count image)] [else (length image)]))
(define w (cond [(string? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (string-length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [(hash? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (hash-count (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [else (length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))]))
(define k_h (cond [(string? kernel) (string-length kernel)] [(hash? kernel) (hash-count kernel)] [else (length kernel)]))
(define k_w (cond [(string? (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f)) (string-length (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f))] [(hash? (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f)) (hash-count (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f))] [else (length (if kernel (if (hash? kernel) (hash-ref kernel 0 #f) (list-ref kernel (int 0))) #f))]))
(define pad_y (floor (/ k_h 2)))
(define pad_x (floor (/ k_w 2)))
(define padded (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y (let ([__l h] [__r (* 2 pad_y)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (let ([__l w] [__r (* 2 pad_x)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (set! row (append row (list #f)))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! padded (append padded (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (set! padded (list-set padded (let ([__l pad_y] [__r y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref padded (let ([__l pad_y] [__r y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ([__l pad_x] [__r x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (if (if image (if (hash? image) (hash-ref image y #f) (list-ref image (int y))) #f) (if (hash? (if image (if (hash? image) (hash-ref image y #f) (list-ref image (int y))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image y #f) (list-ref image (int y))) #f) x #f) (list-ref (if image (if (hash? image) (hash-ref image y #f) (list-ref image (int y))) #f) (int x))) #f))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define output (list))
(set! y 0)
(let/ec _break (let loop ()
  (if (< y h) (let/ec _cont
    (define row_out (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x w) (let/ec _cont
    (define sum 0)
    (define ky 0)
    (let/ec _break (let loop ()
  (if (< ky k_h) (let/ec _cont
    (define kx 0)
    (let/ec _break (let loop ()
  (if (< kx k_w) (let/ec _cont
    (if (and (equal? (if (if kernel (if (hash? kernel) (hash-ref kernel ky #f) (list-ref kernel (int ky))) #f) (if (hash? (if kernel (if (hash? kernel) (hash-ref kernel ky #f) (list-ref kernel (int ky))) #f)) (hash-ref (if kernel (if (hash? kernel) (hash-ref kernel ky #f) (list-ref kernel (int ky))) #f) kx #f) (list-ref (if kernel (if (hash? kernel) (hash-ref kernel ky #f) (list-ref kernel (int ky))) #f) (int kx))) #f) 1) (if (if padded (if (hash? padded) (hash-ref padded (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref padded (int (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if padded (if (hash? padded) (hash-ref padded (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref padded (int (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if padded (if (hash? padded) (hash-ref padded (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref padded (int (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l x] [__r kx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if padded (if (hash? padded) (hash-ref padded (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref padded (int (let ([__l y] [__r ky]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l x] [__r kx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (let ()
(set! sum (let ([__l sum] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! kx (let ([__l kx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ky (let ([__l ky] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! row_out (append row_out (list (equal? sum 5))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! output (append output (list row_out)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return output)
))
)
(define rgb_img (list (list (list 127 255 0))))
(define gray_img (list (list 127.0 255.0 0.0)))
(define img1 (list (list #t #t #f)))
(define kernel1 (list (list 0 1 0)))
(define img2 (list (list #t #f #f)))
(define kernel2 (list (list 1 1 0)))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" (rgb_to_gray rgb_img)))
(displayln (format "~a" (gray_to_binary gray_img)))
(displayln (format "~a" (erosion img1 kernel1)))
(displayln (format "~a" (erosion img2 kernel2)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
