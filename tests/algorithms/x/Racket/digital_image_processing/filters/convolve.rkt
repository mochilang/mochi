;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (pad_edge image pad_size)
  (let/ec _return (begin
(define height (cond [(string? image) (string-length image)] [(hash? image) (hash-count image)] [else (length image)]))
(define width (cond [(string? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (string-length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [(hash? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (hash-count (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [else (length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))]))
(define new_height (let ([__l height] [__r (* pad_size 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define new_width (let ([__l width] [__r (* pad_size 2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define padded (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i new_height) (let/ec _cont
    (define row (list))
    (define src_i i)
    (if (< src_i pad_size) (let ()
(set! src_i 0)
) (void))
    (if (>= src_i (let ([__l height] [__r pad_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(set! src_i (- height 1))
) (let ()
(set! src_i (- src_i pad_size))
))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j new_width) (let/ec _cont
    (define src_j j)
    (if (< src_j pad_size) (let ()
(set! src_j 0)
) (void))
    (if (>= src_j (let ([__l width] [__r pad_size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(set! src_j (- width 1))
) (let ()
(set! src_j (- src_j pad_size))
))
    (set! row (append row (list (if (if image (if (hash? image) (hash-ref image src_i #f) (list-ref image (int src_i))) #f) (if (hash? (if image (if (hash? image) (hash-ref image src_i #f) (list-ref image (int src_i))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image src_i #f) (list-ref image (int src_i))) #f) src_j #f) (list-ref (if image (if (hash? image) (hash-ref image src_i #f) (list-ref image (int src_i))) #f) (int src_j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! padded (append padded (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return padded)
))
)
(define (im2col image block_h block_w)
  (let/ec _return (begin
(define rows (cond [(string? image) (string-length image)] [(hash? image) (hash-count image)] [else (length image)]))
(define cols (cond [(string? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (string-length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [(hash? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (hash-count (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [else (length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))]))
(define dst_height (let ([__l (- rows block_h)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define dst_width (let ([__l (- cols block_w)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define image_array (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i dst_height) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j dst_width) (let/ec _cont
    (define window (list))
    (define bi 0)
    (let/ec _break (let loop ()
  (if (< bi block_h) (let/ec _cont
    (define bj 0)
    (let/ec _break (let loop ()
  (if (< bj block_w) (let/ec _cont
    (set! window (append window (list (if (if image (if (hash? image) (hash-ref image (let ([__l i] [__r bi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref image (int (let ([__l i] [__r bi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if image (if (hash? image) (hash-ref image (let ([__l i] [__r bi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref image (int (let ([__l i] [__r bi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image (let ([__l i] [__r bi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref image (int (let ([__l i] [__r bi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l j] [__r bj]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if image (if (hash? image) (hash-ref image (let ([__l i] [__r bi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref image (int (let ([__l i] [__r bi]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l j] [__r bj]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
    (set! bj (let ([__l bj] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! bi (let ([__l bi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! image_array (append image_array (list window)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return image_array)
))
)
(define (flatten matrix)
  (let/ec _return (begin
(define out (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? matrix) (string-length matrix)] [(hash? matrix) (hash-count matrix)] [else (length matrix)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f)) (string-length (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f))] [(hash? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f)) (hash-count (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f))] [else (length (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f))])) (let/ec _cont
    (set! out (append out (list (if (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (if (hash? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f)) (hash-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) j #f) (list-ref (if matrix (if (hash? matrix) (hash-ref matrix i #f) (list-ref matrix (int i))) #f) (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (dot a b)
  (let/ec _return (begin
(define sum 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (img_convolve image kernel)
  (let/ec _return (begin
(define height (cond [(string? image) (string-length image)] [(hash? image) (hash-count image)] [else (length image)]))
(define width (cond [(string? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (string-length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [(hash? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (hash-count (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [else (length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))]))
(define k_size (cond [(string? kernel) (string-length kernel)] [(hash? kernel) (hash-count kernel)] [else (length kernel)]))
(define pad_size (floor (/ k_size 2)))
(define padded (pad_edge image pad_size))
(define image_array (im2col padded k_size k_size))
(define kernel_flat (flatten kernel))
(define dst (list))
(define idx 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i height) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j width) (let/ec _cont
    (define val (dot (if image_array (if (hash? image_array) (hash-ref image_array idx #f) (list-ref image_array (int idx))) #f) kernel_flat))
    (set! row (append row (list val)))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! dst (append dst (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return dst)
))
)
(define (print_matrix m)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])) (let/ec _cont
    (define line "")
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (string-length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [(hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-count (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))] [else (length (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f))])) (let/ec _cont
    (if (> j 0) (let ()
(set! line (string-append line " "))
) (void))
    (set! line (string-append line (format "~a" (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) j #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define image (list (list 1 2 3 0 0) (list 4 5 6 0 0) (list 7 8 9 0 0) (list 0 0 0 0 0) (list 0 0 0 0 0)))
(define laplace_kernel (list (list 0 1 0) (list 1 (- 4) 1) (list 0 1 0)))
(define result (img_convolve image laplace_kernel))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(print_matrix result)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
