;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (get_neighbors_pixel image x y center)
  (let/ec _return (begin
(if (or (< x 0) (< y 0)) (let ()
(_return 0)
) (void))
(if (or (>= x (cond [(string? image) (string-length image)] [(hash? image) (hash-count image)] [else (length image)])) (>= y (cond [(string? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (string-length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [(hash? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (hash-count (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [else (length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))]))) (let ()
(_return 0)
) (void))
(if (>= (if (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f) (if (hash? (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f) y #f) (list-ref (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f) (int y))) #f) center) (let ()
(_return 1)
) (void))
(_return 0)
))
)
(define (local_binary_value image x y)
  (let/ec _return (begin
(define center (if (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f) (if (hash? (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f)) (hash-ref (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f) y #f) (list-ref (if image (if (hash? image) (hash-ref image x #f) (list-ref image (int x))) #f) (int y))) #f))
(define powers (list 1 2 4 8 16 32 64 128))
(define neighbors (list (get_neighbors_pixel image (- x 1) (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) center) (get_neighbors_pixel image x (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) center) (get_neighbors_pixel image (- x 1) y center) (get_neighbors_pixel image (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) center) (get_neighbors_pixel image (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) y center) (get_neighbors_pixel image (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- y 1) center) (get_neighbors_pixel image x (- y 1) center) (get_neighbors_pixel image (- x 1) (- y 1) center)))
(define sum 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? neighbors) (string-length neighbors)] [(hash? neighbors) (hash-count neighbors)] [else (length neighbors)])) (let/ec _cont
    (set! sum (let ([__l sum] [__r (* (if neighbors (if (hash? neighbors) (hash-ref neighbors i #f) (list-ref neighbors (int i))) #f) (if powers (if (hash? powers) (hash-ref powers i #f) (list-ref powers (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define image (list (list 10 10 10 10 10) (list 10 20 30 20 10) (list 10 30 40 30 10) (list 10 20 30 20 10) (list 10 10 10 10 10)))
(define i 0)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (< i (cond [(string? image) (string-length image)] [(hash? image) (hash-count image)] [else (length image)])) (let/ec _cont
    (define j 0)
    (define line "")
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (string-length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [(hash? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (hash-count (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [else (length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))])) (let/ec _cont
    (define value (local_binary_value image i j))
    (set! line (string-append line (format "~a" value)))
    (if (< j (- (cond [(string? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (string-length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [(hash? (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f)) (hash-count (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))] [else (length (if image (if (hash? image) (hash-ref image 0 #f) (list-ref image (int 0))) #f))]) 1)) (let ()
(set! line (string-append line " "))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
