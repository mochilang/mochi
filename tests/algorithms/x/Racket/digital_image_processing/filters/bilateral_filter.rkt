;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define PI 3.141592653589793)
(define (abs x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (expApprox x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define n 1)
(let/ec _break (let loop ()
  (if (< n 10) (let/ec _cont
    (set! term (/ (* term x) (exact->inexact n)))
    (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! n (let ([__l n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return sum)
))
)
(define (vec_gaussian mat variance)
  (let/ec _return (begin
(define i 0)
(define out (list))
(let/ec _break (let loop ()
  (if (< i (cond [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))])) (let/ec _cont
    (define v (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j))) #f))
    (define e (/ (- (* v v)) (* 2.0 variance)))
    (set! row (append row (list (expApprox e))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! out (append out (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define (get_slice img x y kernel_size)
  (let/ec _return (begin
(define half (floor (/ kernel_size 2)))
(define i (- x half))
(define slice_ (list))
(let/ec _break (let loop ()
  (if (<= i (let ([__l x] [__r half]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (define row (list))
    (define j (- y half))
    (let/ec _break (let loop ()
  (if (<= j (let ([__l y] [__r half]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let/ec _cont
    (set! row (append row (list (if (if img (if (hash? img) (hash-ref img i #f) (list-ref img (int i))) #f) (if (hash? (if img (if (hash? img) (hash-ref img i #f) (list-ref img (int i))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img i #f) (list-ref img (int i))) #f) j #f) (list-ref (if img (if (hash? img) (hash-ref img i #f) (list-ref img (int i))) #f) (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! slice_ (append slice_ (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return slice_)
))
)
(define (get_gauss_kernel kernel_size spatial_variance)
  (let/ec _return (begin
(define arr (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i kernel_size) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j kernel_size) (let/ec _cont
    (define di (exact->inexact (- i (floor (/ kernel_size 2)))))
    (define dj (exact->inexact (- j (floor (/ kernel_size 2)))))
    (define dist (sqrtApprox (let ([__l (* di di)] [__r (* dj dj)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! row (append row (list dist)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! arr (append arr (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (vec_gaussian arr spatial_variance))
))
)
(define (elementwise_sub mat value)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))])) (let/ec _cont
    (set! row (append row (list (- (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j))) #f) value))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (elementwise_mul a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (string-length (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f))] [(hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-count (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f))] [else (length (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f))])) (let/ec _cont
    (set! row (append row (list (* (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) j #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int j))) #f) (if (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) (if (hash? (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) j #f) (list-ref (if b (if (hash? b) (hash-ref b i #f) (list-ref b (int i))) #f) (int j))) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (matrix_sum mat)
  (let/ec _return (begin
(define total 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f))])) (let/ec _cont
    (set! total (let ([__l total] [__r (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return total)
))
)
(define (bilateral_filter img spatial_variance intensity_variance kernel_size)
  (let/ec _return (begin
(define gauss_ker (get_gauss_kernel kernel_size spatial_variance))
(define img_s img)
(define center (if (if img_s (if (hash? img_s) (hash-ref img_s (floor (/ kernel_size 2)) #f) (list-ref img_s (int (floor (/ kernel_size 2))))) #f) (if (hash? (if img_s (if (hash? img_s) (hash-ref img_s (floor (/ kernel_size 2)) #f) (list-ref img_s (int (floor (/ kernel_size 2))))) #f)) (hash-ref (if img_s (if (hash? img_s) (hash-ref img_s (floor (/ kernel_size 2)) #f) (list-ref img_s (int (floor (/ kernel_size 2))))) #f) (floor (/ kernel_size 2)) #f) (list-ref (if img_s (if (hash? img_s) (hash-ref img_s (floor (/ kernel_size 2)) #f) (list-ref img_s (int (floor (/ kernel_size 2))))) #f) (int (floor (/ kernel_size 2))))) #f))
(define img_i (elementwise_sub img_s center))
(define img_ig (vec_gaussian img_i intensity_variance))
(define weights (elementwise_mul gauss_ker img_ig))
(define vals (elementwise_mul img_s weights))
(define sum_weights (matrix_sum weights))
(define val 0.0)
(if (not (equal? sum_weights 0.0)) (let ()
(set! val (/ (matrix_sum vals) sum_weights))
) (void))
(_return val)
))
)
(define img (list (list 0.2 0.3 0.4) (list 0.3 0.4 0.5) (list 0.4 0.5 0.6)))
(define result (bilateral_filter img 1.0 1.0 3))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln result)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
