;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (mat_inverse3 m)
  (let/ec _return (begin
(define a (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 0))) #f))
(define b (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 1 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 1))) #f))
(define c (if (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) 2 #f) (list-ref (if m (if (hash? m) (hash-ref m 0 #f) (list-ref m (int 0))) #f) (int 2))) #f))
(define d (if (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (int 0))) #f))
(define e (if (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) 1 #f) (list-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (int 1))) #f))
(define f (if (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) 2 #f) (list-ref (if m (if (hash? m) (hash-ref m 1 #f) (list-ref m (int 1))) #f) (int 2))) #f))
(define g (if (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f) (int 0))) #f))
(define h (if (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f) 1 #f) (list-ref (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f) (int 1))) #f))
(define i (if (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f) (if (hash? (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f) 2 #f) (list-ref (if m (if (hash? m) (hash-ref m 2 #f) (list-ref m (int 2))) #f) (int 2))) #f))
(define det (let ([__l (- (* a (- (* e i) (* f h))) (* b (- (* d i) (* f g))))] [__r (* c (- (* d h) (* e g)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? det 0.0) (let ()
(panic "singular matrix")
) (void))
(define adj00 (- (* e i) (* f h)))
(define adj01 (- (* c h) (* b i)))
(define adj02 (- (* b f) (* c e)))
(define adj10 (- (* f g) (* d i)))
(define adj11 (- (* a i) (* c g)))
(define adj12 (- (* c d) (* a f)))
(define adj20 (- (* d h) (* e g)))
(define adj21 (- (* b g) (* a h)))
(define adj22 (- (* a e) (* b d)))
(define inv (list))
(set! inv (append inv (list (list (/ adj00 det) (/ adj01 det) (/ adj02 det)))))
(set! inv (append inv (list (list (/ adj10 det) (/ adj11 det) (/ adj12 det)))))
(set! inv (append inv (list (list (/ adj20 det) (/ adj21 det) (/ adj22 det)))))
(_return inv)
))
)
(define (mat_vec_mul m v)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 3) (let/ec _cont
    (define val (let ([__l (let ([__l (* (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) 0 #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int 0))) #f) (if v (if (hash? v) (hash-ref v 0 #f) (list-ref v (int 0))) #f))] [__r (* (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) 1 #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int 1))) #f) (if v (if (hash? v) (hash-ref v 1 #f) (list-ref v (int 1))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* (if (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) 2 #f) (list-ref (if m (if (hash? m) (hash-ref m i #f) (list-ref m (int i))) #f) (int 2))) #f) (if v (if (hash? v) (hash-ref v 2 #f) (list-ref v (int 2))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! res (append res (list val)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (create_matrix rows cols value)
  (let/ec _return (begin
(define result (list))
(define r 0)
(let/ec _break (let loop ()
  (if (< r rows) (let/ec _cont
    (define row (list))
    (define c 0)
    (let/ec _break (let loop ()
  (if (< c cols) (let/ec _cont
    (set! row (append row (list value)))
    (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! result (append result (list row)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (round_to_int x)
  (let/ec _return (begin
(if (>= x 0.0) (let ()
(_return (int (let ([__l x] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(_return (int (- x 0.5)))
))
)
(define (get_rotation img pt1 pt2 rows cols)
  (let/ec _return (begin
(define src (list (list (if (if pt1 (if (hash? pt1) (hash-ref pt1 0 #f) (list-ref pt1 (int 0))) #f) (if (hash? (if pt1 (if (hash? pt1) (hash-ref pt1 0 #f) (list-ref pt1 (int 0))) #f)) (hash-ref (if pt1 (if (hash? pt1) (hash-ref pt1 0 #f) (list-ref pt1 (int 0))) #f) 0 #f) (list-ref (if pt1 (if (hash? pt1) (hash-ref pt1 0 #f) (list-ref pt1 (int 0))) #f) (int 0))) #f) (if (if pt1 (if (hash? pt1) (hash-ref pt1 0 #f) (list-ref pt1 (int 0))) #f) (if (hash? (if pt1 (if (hash? pt1) (hash-ref pt1 0 #f) (list-ref pt1 (int 0))) #f)) (hash-ref (if pt1 (if (hash? pt1) (hash-ref pt1 0 #f) (list-ref pt1 (int 0))) #f) 1 #f) (list-ref (if pt1 (if (hash? pt1) (hash-ref pt1 0 #f) (list-ref pt1 (int 0))) #f) (int 1))) #f) 1.0) (list (if (if pt1 (if (hash? pt1) (hash-ref pt1 1 #f) (list-ref pt1 (int 1))) #f) (if (hash? (if pt1 (if (hash? pt1) (hash-ref pt1 1 #f) (list-ref pt1 (int 1))) #f)) (hash-ref (if pt1 (if (hash? pt1) (hash-ref pt1 1 #f) (list-ref pt1 (int 1))) #f) 0 #f) (list-ref (if pt1 (if (hash? pt1) (hash-ref pt1 1 #f) (list-ref pt1 (int 1))) #f) (int 0))) #f) (if (if pt1 (if (hash? pt1) (hash-ref pt1 1 #f) (list-ref pt1 (int 1))) #f) (if (hash? (if pt1 (if (hash? pt1) (hash-ref pt1 1 #f) (list-ref pt1 (int 1))) #f)) (hash-ref (if pt1 (if (hash? pt1) (hash-ref pt1 1 #f) (list-ref pt1 (int 1))) #f) 1 #f) (list-ref (if pt1 (if (hash? pt1) (hash-ref pt1 1 #f) (list-ref pt1 (int 1))) #f) (int 1))) #f) 1.0) (list (if (if pt1 (if (hash? pt1) (hash-ref pt1 2 #f) (list-ref pt1 (int 2))) #f) (if (hash? (if pt1 (if (hash? pt1) (hash-ref pt1 2 #f) (list-ref pt1 (int 2))) #f)) (hash-ref (if pt1 (if (hash? pt1) (hash-ref pt1 2 #f) (list-ref pt1 (int 2))) #f) 0 #f) (list-ref (if pt1 (if (hash? pt1) (hash-ref pt1 2 #f) (list-ref pt1 (int 2))) #f) (int 0))) #f) (if (if pt1 (if (hash? pt1) (hash-ref pt1 2 #f) (list-ref pt1 (int 2))) #f) (if (hash? (if pt1 (if (hash? pt1) (hash-ref pt1 2 #f) (list-ref pt1 (int 2))) #f)) (hash-ref (if pt1 (if (hash? pt1) (hash-ref pt1 2 #f) (list-ref pt1 (int 2))) #f) 1 #f) (list-ref (if pt1 (if (hash? pt1) (hash-ref pt1 2 #f) (list-ref pt1 (int 2))) #f) (int 1))) #f) 1.0)))
(define inv (mat_inverse3 src))
(define vecx (list (if (if pt2 (if (hash? pt2) (hash-ref pt2 0 #f) (list-ref pt2 (int 0))) #f) (if (hash? (if pt2 (if (hash? pt2) (hash-ref pt2 0 #f) (list-ref pt2 (int 0))) #f)) (hash-ref (if pt2 (if (hash? pt2) (hash-ref pt2 0 #f) (list-ref pt2 (int 0))) #f) 0 #f) (list-ref (if pt2 (if (hash? pt2) (hash-ref pt2 0 #f) (list-ref pt2 (int 0))) #f) (int 0))) #f) (if (if pt2 (if (hash? pt2) (hash-ref pt2 1 #f) (list-ref pt2 (int 1))) #f) (if (hash? (if pt2 (if (hash? pt2) (hash-ref pt2 1 #f) (list-ref pt2 (int 1))) #f)) (hash-ref (if pt2 (if (hash? pt2) (hash-ref pt2 1 #f) (list-ref pt2 (int 1))) #f) 0 #f) (list-ref (if pt2 (if (hash? pt2) (hash-ref pt2 1 #f) (list-ref pt2 (int 1))) #f) (int 0))) #f) (if (if pt2 (if (hash? pt2) (hash-ref pt2 2 #f) (list-ref pt2 (int 2))) #f) (if (hash? (if pt2 (if (hash? pt2) (hash-ref pt2 2 #f) (list-ref pt2 (int 2))) #f)) (hash-ref (if pt2 (if (hash? pt2) (hash-ref pt2 2 #f) (list-ref pt2 (int 2))) #f) 0 #f) (list-ref (if pt2 (if (hash? pt2) (hash-ref pt2 2 #f) (list-ref pt2 (int 2))) #f) (int 0))) #f)))
(define vecy (list (if (if pt2 (if (hash? pt2) (hash-ref pt2 0 #f) (list-ref pt2 (int 0))) #f) (if (hash? (if pt2 (if (hash? pt2) (hash-ref pt2 0 #f) (list-ref pt2 (int 0))) #f)) (hash-ref (if pt2 (if (hash? pt2) (hash-ref pt2 0 #f) (list-ref pt2 (int 0))) #f) 1 #f) (list-ref (if pt2 (if (hash? pt2) (hash-ref pt2 0 #f) (list-ref pt2 (int 0))) #f) (int 1))) #f) (if (if pt2 (if (hash? pt2) (hash-ref pt2 1 #f) (list-ref pt2 (int 1))) #f) (if (hash? (if pt2 (if (hash? pt2) (hash-ref pt2 1 #f) (list-ref pt2 (int 1))) #f)) (hash-ref (if pt2 (if (hash? pt2) (hash-ref pt2 1 #f) (list-ref pt2 (int 1))) #f) 1 #f) (list-ref (if pt2 (if (hash? pt2) (hash-ref pt2 1 #f) (list-ref pt2 (int 1))) #f) (int 1))) #f) (if (if pt2 (if (hash? pt2) (hash-ref pt2 2 #f) (list-ref pt2 (int 2))) #f) (if (hash? (if pt2 (if (hash? pt2) (hash-ref pt2 2 #f) (list-ref pt2 (int 2))) #f)) (hash-ref (if pt2 (if (hash? pt2) (hash-ref pt2 2 #f) (list-ref pt2 (int 2))) #f) 1 #f) (list-ref (if pt2 (if (hash? pt2) (hash-ref pt2 2 #f) (list-ref pt2 (int 2))) #f) (int 1))) #f)))
(define avec (mat_vec_mul inv vecx))
(define bvec (mat_vec_mul inv vecy))
(define a0 (if avec (if (hash? avec) (hash-ref avec 0 #f) (list-ref avec (int 0))) #f))
(define a1 (if avec (if (hash? avec) (hash-ref avec 1 #f) (list-ref avec (int 1))) #f))
(define a2 (if avec (if (hash? avec) (hash-ref avec 2 #f) (list-ref avec (int 2))) #f))
(define b0 (if bvec (if (hash? bvec) (hash-ref bvec 0 #f) (list-ref bvec (int 0))) #f))
(define b1 (if bvec (if (hash? bvec) (hash-ref bvec 1 #f) (list-ref bvec (int 1))) #f))
(define b2 (if bvec (if (hash? bvec) (hash-ref bvec 2 #f) (list-ref bvec (int 2))) #f))
(define out (create_matrix rows cols 0))
(define y 0)
(let/ec _break (let loop ()
  (if (< y rows) (let/ec _cont
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x cols) (let/ec _cont
    (define xf (let ([__l (let ([__l (* a0 (* 1.0 x))] [__r (* a1 (* 1.0 y))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r a2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define yf (let ([__l (let ([__l (* b0 (* 1.0 x))] [__r (* b1 (* 1.0 y))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r b2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define sx (round_to_int xf))
    (define sy (round_to_int yf))
    (if (and (and (and (>= sx 0) (< sx cols)) (>= sy 0)) (< sy rows)) (let ()
(set! out (list-set out sy (list-set (list-ref out sy) sx (if (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (if (hash? (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) x #f) (list-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (int x))) #f))))
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return out)
))
)
(define img (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))
(define pts1 (list (list 0.0 0.0) (list 2.0 0.0) (list 0.0 2.0)))
(define pts2 (list (list 0.0 2.0) (list 0.0 0.0) (list 2.0 2.0)))
(define rotated (get_rotation img pts1 pts2 3 3))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" rotated))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
