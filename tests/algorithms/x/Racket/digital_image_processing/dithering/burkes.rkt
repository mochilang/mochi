;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (get_greyscale blue green red)
  (let/ec _return (begin
(define b (exact->inexact blue))
(define g (exact->inexact green))
(define r (exact->inexact red))
(_return (int (let ([__l (let ([__l (* 0.114 b)] [__r (* 0.587 g)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* 0.299 r)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (zeros h w)
  (let/ec _return (begin
(define table (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i h) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j w) (let/ec _cont
    (set! row (append row (list 0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! table (append table (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return table)
))
)
(define (burkes_dither img threshold)
  (let/ec _return (begin
(define height (cond [(string? img) (string-length img)] [(hash? img) (hash-count img)] [else (length img)]))
(define width (cond [(string? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (string-length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [(hash? (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f)) (hash-count (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))] [else (length (if img (if (hash? img) (hash-ref img 0 #f) (list-ref img (int 0))) #f))]))
(define error_table (zeros (let ([__l height] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l width] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(define output (list))
(define y 0)
(let/ec _break (let loop ()
  (if (< y height) (let/ec _cont
    (define row (list))
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x width) (let/ec _cont
    (define px (if (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (if (hash? (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f)) (hash-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) x #f) (list-ref (if img (if (hash? img) (hash-ref img y #f) (list-ref img (int y))) #f) (int x))) #f))
    (define grey (get_greyscale (if px (if (hash? px) (hash-ref px 0 #f) (list-ref px (int 0))) #f) (if px (if (hash? px) (hash-ref px 1 #f) (list-ref px (int 1))) #f) (if px (if (hash? px) (hash-ref px 2 #f) (list-ref px (int 2))) #f)))
    (define total (let ([__l grey] [__r (if (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f) (if (hash? (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f)) (hash-ref (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f) (let ([__l x] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f) (int (let ([__l x] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define new_val 0)
    (define current_error 0)
    (if (> threshold total) (let ()
(set! new_val 0)
(set! current_error total)
) (let ()
(set! new_val 255)
(set! current_error (- total 255))
))
    (set! row (append row (list new_val)))
    (set! error_table (list-set error_table y (list-set (list-ref error_table y) (let ([__l x] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f) (if (hash? (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f)) (hash-ref (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f) (let ([__l x] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f) (int (let ([__l x] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (floor (/ (* 8 current_error) 32))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! error_table (list-set error_table y (list-set (list-ref error_table y) (let ([__l x] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f) (if (hash? (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f)) (hash-ref (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f) (let ([__l x] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if error_table (if (hash? error_table) (hash-ref error_table y #f) (list-ref error_table (int y))) #f) (int (let ([__l x] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (floor (/ (* 4 current_error) 32))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! error_table (list-set error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ([__l x] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l x] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l x] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (floor (/ (* 8 current_error) 32))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! error_table (list-set error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ([__l x] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l x] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l x] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (floor (/ (* 4 current_error) 32))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! error_table (list-set error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ([__l x] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l x] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l x] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (floor (/ (* 2 current_error) 32))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! error_table (list-set error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)] [__r (floor (/ (* 4 current_error) 32))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! error_table (list-set error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) x (let ([__l (if (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) x #f) (list-ref (if error_table (if (hash? error_table) (hash-ref error_table (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref error_table (int (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int x))) #f)] [__r (floor (/ (* 2 current_error) 32))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! output (append output (list row)))
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return output)
))
)
(define (main)
  (let/ec _return (begin
(define img (list (list (list 0 0 0) (list 64 64 64) (list 128 128 128) (list 192 192 192)) (list (list 255 255 255) (list 200 200 200) (list 150 150 150) (list 100 100 100)) (list (list 30 144 255) (list 255 0 0) (list 0 255 0) (list 0 0 255)) (list (list 50 100 150) (list 80 160 240) (list 70 140 210) (list 60 120 180))))
(define result (burkes_dither img 128))
(define y 0)
(let/ec _break (let loop ()
  (if (< y (cond [(string? result) (string-length result)] [(hash? result) (hash-count result)] [else (length result)])) (let/ec _cont
    (define line "")
    (define x 0)
    (let/ec _break (let loop ()
  (if (< x (cond [(string? (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f)) (string-length (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f))] [(hash? (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f)) (hash-count (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f))] [else (length (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f))])) (let/ec _cont
    (set! line (string-append line (format "~a" (if (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f) (if (hash? (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f)) (hash-ref (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f) x #f) (list-ref (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f) (int x))) #f))))
    (if (< x (- (cond [(string? (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f)) (string-length (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f))] [(hash? (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f)) (hash-count (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f))] [else (length (if result (if (hash? result) (hash-ref result y #f) (list-ref result (int y))) #f))]) 1)) (let ()
(set! line (string-append line " "))
) (void))
    (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln line)
    (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
