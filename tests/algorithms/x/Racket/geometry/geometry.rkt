;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define PI 3.141592653589793)
(define (make_angle deg)
  (let/ec _return (begin
(if (or (< deg 0.0) (> deg 360.0)) (let ()
(panic "degrees must be between 0 and 360")
) (void))
(_return (hash "degrees" deg))
))
)
(define (make_side length_ angle)
  (let/ec _return (begin
(if (<= length_ 0.0) (let ()
(panic "length must be positive")
) (void))
(_return (hash "length" length_ "angle" angle "next" (- 1)))
))
)
(define (ellipse_area e)
  (let/ec _return (begin
(_return (* (* PI (if e (hash-ref e "major" #f) #f)) (if e (hash-ref e "minor" #f) #f)))
))
)
(define (ellipse_perimeter e)
  (let/ec _return (begin
(_return (* PI (let ([__l (if e (hash-ref e "major" #f) #f)] [__r (if e (hash-ref e "minor" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (circle_area c)
  (let/ec _return (begin
(define e (hash "major" (if c (hash-ref c "radius" #f) #f) "minor" (if c (hash-ref c "radius" #f) #f)))
(define area (ellipse_area e))
(_return area)
))
)
(define (circle_perimeter c)
  (let/ec _return (begin
(define e (hash "major" (if c (hash-ref c "radius" #f) #f) "minor" (if c (hash-ref c "radius" #f) #f)))
(define per (ellipse_perimeter e))
(_return per)
))
)
(define (circle_diameter c)
  (let/ec _return (begin
(_return (* (if c (hash-ref c "radius" #f) #f) 2.0))
))
)
(define (circle_max_parts num_cuts)
  (let/ec _return (begin
(if (< num_cuts 0.0) (let ()
(panic "num_cuts must be positive")
) (void))
(_return (* (let ([__l (let ([__l num_cuts] [__r 2.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (* num_cuts num_cuts)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 0.5))
))
)
(define (make_polygon)
  (let/ec _return (begin
(define s (list))
(_return (hash "sides" s))
))
)
(define (polygon_add_side p s)
  (let/ec _return (begin
(set! p (hash-set (or p (hash)) "sides" (append (if p (hash-ref p "sides" #f) #f) (list s))))
))
)
(define (polygon_get_side p index)
  (let/ec _return (begin
(_return (if (if p (hash-ref p "sides" #f) #f) (if (hash? (if p (hash-ref p "sides" #f) #f)) (hash-ref (if p (hash-ref p "sides" #f) #f) index #f) (list-ref (if p (hash-ref p "sides" #f) #f) (int index))) #f))
))
)
(define (polygon_set_side p index s)
  (let/ec _return (begin
(define tmp (if p (hash-ref p "sides" #f) #f))
(set! tmp (list-set tmp (int index) s))
(set! p (hash-set (or p (hash)) "sides" tmp))
))
)
(define (make_rectangle short_len long_len)
  (let/ec _return (begin
(if (or (<= short_len 0.0) (<= long_len 0.0)) (let ()
(panic "length must be positive")
) (void))
(define short (make_side short_len (make_angle 90.0)))
(define long (make_side long_len (make_angle 90.0)))
(define p (make_polygon))
(polygon_add_side p short)
(polygon_add_side p long)
(_return (hash "short_side" short "long_side" long "poly" p))
))
)
(define (rectangle_perimeter r)
  (let/ec _return (begin
(_return (* (let ([__l (if (if r (hash-ref r "short_side" #f) #f) (hash-ref (if r (hash-ref r "short_side" #f) #f) "length" #f) #f)] [__r (if (if r (hash-ref r "long_side" #f) #f) (hash-ref (if r (hash-ref r "long_side" #f) #f) "length" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
))
)
(define (rectangle_area r)
  (let/ec _return (begin
(_return (* (if (if r (hash-ref r "short_side" #f) #f) (hash-ref (if r (hash-ref r "short_side" #f) #f) "length" #f) #f) (if (if r (hash-ref r "long_side" #f) #f) (hash-ref (if r (hash-ref r "long_side" #f) #f) "length" #f) #f)))
))
)
(define (make_square side_len)
  (let/ec _return (begin
(define rect (make_rectangle side_len side_len))
(_return (hash "side" (if rect (hash-ref rect "short_side" #f) #f) "rect" rect))
))
)
(define (square_perimeter s)
  (let/ec _return (begin
(define p (rectangle_perimeter (if s (hash-ref s "rect" #f) #f)))
(_return p)
))
)
(define (square_area s)
  (let/ec _return (begin
(define a (rectangle_area (if s (hash-ref s "rect" #f) #f)))
(_return a)
))
)
(define (main)
  (let/ec _return (begin
(define a (make_angle 90.0))
(displayln (if a (hash-ref a "degrees" #f) #f))
(define s (make_side 5.0 a))
(displayln (if s (hash-ref s "length" #f) #f))
(define e (hash "major" 5.0 "minor" 10.0))
(displayln (ellipse_area e))
(displayln (ellipse_perimeter e))
(define c (hash "radius" 5.0))
(displayln (circle_area c))
(displayln (circle_perimeter c))
(displayln (circle_diameter c))
(displayln (circle_max_parts 7.0))
(define r (make_rectangle 5.0 10.0))
(displayln (rectangle_perimeter r))
(displayln (rectangle_area r))
(define q (make_square 5.0))
(displayln (square_perimeter q))
(displayln (square_area q))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
