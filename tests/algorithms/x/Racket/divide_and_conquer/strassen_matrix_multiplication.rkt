;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (default_matrix_multiplication a b)
  (let/ec _return (begin
(_return (list (list (let ([__l (* (if (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) 0 #f) (list-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (int 0))) #f) (if (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) 0 #f) (list-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (int 0))) #f))] [__r (* (if (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) 1 #f) (list-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (int 1))) #f) (if (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) 0 #f) (list-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (int 0))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (* (if (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) 0 #f) (list-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (int 0))) #f) (if (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) 1 #f) (list-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (int 1))) #f))] [__r (* (if (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) 1 #f) (list-ref (if a (if (hash? a) (hash-ref a 0 #f) (list-ref a (int 0))) #f) (int 1))) #f) (if (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) 1 #f) (list-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (int 1))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (list (let ([__l (* (if (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) 0 #f) (list-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (int 0))) #f) (if (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) 0 #f) (list-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (int 0))) #f))] [__r (* (if (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) 1 #f) (list-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (int 1))) #f) (if (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) 0 #f) (list-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (int 0))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (* (if (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) 0 #f) (list-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (int 0))) #f) (if (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) 1 #f) (list-ref (if b (if (hash? b) (hash-ref b 0 #f) (list-ref b (int 0))) #f) (int 1))) #f))] [__r (* (if (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (if (hash? (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) 1 #f) (list-ref (if a (if (hash? a) (hash-ref a 1 #f) (list-ref a (int 1))) #f) (int 1))) #f) (if (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (if (hash? (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) 1 #f) (list-ref (if b (if (hash? b) (hash-ref b 1 #f) (list-ref b (int 1))) #f) (int 1))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
)
(define (matrix_addition matrix_a matrix_b)
  (let/ec _return (begin
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? matrix_a) (string-length matrix_a)] [(hash? matrix_a) (hash-count matrix_a)] [else (length matrix_a)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f)) (string-length (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f))] [(hash? (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f)) (hash-count (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f))] [else (length (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f))])) (let/ec _cont
    (set! row (append row (list (let ([__l (if (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f) (if (hash? (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f)) (hash-ref (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f) j #f) (list-ref (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f) (int j))) #f)] [__r (if (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b i #f) (list-ref matrix_b (int i))) #f) (if (hash? (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b i #f) (list-ref matrix_b (int i))) #f)) (hash-ref (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b i #f) (list-ref matrix_b (int i))) #f) j #f) (list-ref (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b i #f) (list-ref matrix_b (int i))) #f) (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! result (append result (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (matrix_subtraction matrix_a matrix_b)
  (let/ec _return (begin
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? matrix_a) (string-length matrix_a)] [(hash? matrix_a) (hash-count matrix_a)] [else (length matrix_a)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f)) (string-length (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f))] [(hash? (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f)) (hash-count (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f))] [else (length (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f))])) (let/ec _cont
    (set! row (append row (list (- (if (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f) (if (hash? (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f)) (hash-ref (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f) j #f) (list-ref (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (list-ref matrix_a (int i))) #f) (int j))) #f) (if (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b i #f) (list-ref matrix_b (int i))) #f) (if (hash? (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b i #f) (list-ref matrix_b (int i))) #f)) (hash-ref (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b i #f) (list-ref matrix_b (int i))) #f) j #f) (list-ref (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b i #f) (list-ref matrix_b (int i))) #f) (int j))) #f)))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! result (append result (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (split_matrix a)
  (let/ec _return (begin
(define n (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define mid (floor (/ n 2)))
(define top_left (list))
(define top_right (list))
(define bot_left (list))
(define bot_right (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i mid) (let/ec _cont
    (define left_row (list))
    (define right_row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j mid) (let/ec _cont
    (set! left_row (append left_row (list (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) j #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int j))) #f))))
    (set! right_row (append right_row (list (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (let ([__l j] [__r mid]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int (let ([__l j] [__r mid]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! top_left (append top_left (list left_row)))
    (set! top_right (append top_right (list right_row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i mid)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define left_row (list))
    (define right_row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j mid) (let/ec _cont
    (set! left_row (append left_row (list (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) j #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int j))) #f))))
    (set! right_row (append right_row (list (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (let ([__l j] [__r mid]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int (let ([__l j] [__r mid]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! bot_left (append bot_left (list left_row)))
    (set! bot_right (append bot_right (list right_row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (list top_left top_right bot_left bot_right))
))
)
(define (matrix_dimensions matrix)
  (let/ec _return (begin
(_return (list (cond [(string? matrix) (string-length matrix)] [(hash? matrix) (hash-count matrix)] [else (length matrix)]) (cond [(string? (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f)) (string-length (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f))] [(hash? (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f)) (hash-count (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f))] [else (length (if matrix (if (hash? matrix) (hash-ref matrix 0 #f) (list-ref matrix (int 0))) #f))])))
))
)
(define (next_power_of_two n)
  (let/ec _return (begin
(define p 1)
(let/ec _break (let loop ()
  (if (< p n) (let/ec _cont
    (set! p (* p 2))
    (loop)) (void))))
(_return p)
))
)
(define (pad_matrix mat rows cols)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i rows) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j cols) (let/ec _cont
    (define v 0)
    (if (and (< i (cond [(string? mat) (string-length mat)] [(hash? mat) (hash-count mat)] [else (length mat)])) (< j (cond [(string? (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) (string-length (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))] [(hash? (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f)) (hash-count (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))] [else (length (if mat (if (hash? mat) (hash-ref mat 0 #f) (list-ref mat (int 0))) #f))]))) (let ()
(set! v (if (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (if (hash? (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f)) (hash-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) j #f) (list-ref (if mat (if (hash? mat) (hash-ref mat i #f) (list-ref mat (int i))) #f) (int j))) #f))
) (void))
    (set! row (append row (list v)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! res (append res (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (actual_strassen matrix_a matrix_b)
  (let/ec _return (begin
(if (equal? (if (matrix_dimensions matrix_a) (if (hash? (matrix_dimensions matrix_a)) (hash-ref (matrix_dimensions matrix_a) 0 #f) (list-ref (matrix_dimensions matrix_a) (int 0))) #f) 2) (let ()
(_return (default_matrix_multiplication matrix_a matrix_b))
) (void))
(define parts_a (split_matrix matrix_a))
(define a (if parts_a (if (hash? parts_a) (hash-ref parts_a 0 #f) (list-ref parts_a (int 0))) #f))
(define b (if parts_a (if (hash? parts_a) (hash-ref parts_a 1 #f) (list-ref parts_a (int 1))) #f))
(define c (if parts_a (if (hash? parts_a) (hash-ref parts_a 2 #f) (list-ref parts_a (int 2))) #f))
(define d (if parts_a (if (hash? parts_a) (hash-ref parts_a 3 #f) (list-ref parts_a (int 3))) #f))
(define parts_b (split_matrix matrix_b))
(define e (if parts_b (if (hash? parts_b) (hash-ref parts_b 0 #f) (list-ref parts_b (int 0))) #f))
(define f (if parts_b (if (hash? parts_b) (hash-ref parts_b 1 #f) (list-ref parts_b (int 1))) #f))
(define g (if parts_b (if (hash? parts_b) (hash-ref parts_b 2 #f) (list-ref parts_b (int 2))) #f))
(define h (if parts_b (if (hash? parts_b) (hash-ref parts_b 3 #f) (list-ref parts_b (int 3))) #f))
(define t1 (actual_strassen a (matrix_subtraction f h)))
(define t2 (actual_strassen (matrix_addition a b) h))
(define t3 (actual_strassen (matrix_addition c d) e))
(define t4 (actual_strassen d (matrix_subtraction g e)))
(define t5 (actual_strassen (matrix_addition a d) (matrix_addition e h)))
(define t6 (actual_strassen (matrix_subtraction b d) (matrix_addition g h)))
(define t7 (actual_strassen (matrix_subtraction a c) (matrix_addition e f)))
(define top_left (matrix_addition (matrix_subtraction (matrix_addition t5 t4) t2) t6))
(define top_right (matrix_addition t1 t2))
(define bot_left (matrix_addition t3 t4))
(define bot_right (matrix_subtraction (matrix_subtraction (matrix_addition t1 t5) t3) t7))
(define new_matrix (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? top_right) (string-length top_right)] [(hash? top_right) (hash-count top_right)] [else (length top_right)])) (let/ec _cont
    (set! new_matrix (append new_matrix (list (append (if top_left (if (hash? top_left) (hash-ref top_left i #f) (list-ref top_left (int i))) #f) (if top_right (if (hash? top_right) (hash-ref top_right i #f) (list-ref top_right (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? bot_right) (string-length bot_right)] [(hash? bot_right) (hash-count bot_right)] [else (length bot_right)])) (let/ec _cont
    (set! new_matrix (append new_matrix (list (append (if bot_left (if (hash? bot_left) (hash-ref bot_left i #f) (list-ref bot_left (int i))) #f) (if bot_right (if (hash? bot_right) (hash-ref bot_right i #f) (list-ref bot_right (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return new_matrix)
))
)
(define (strassen matrix1 matrix2)
  (let/ec _return (begin
(define dims1 (matrix_dimensions matrix1))
(define dims2 (matrix_dimensions matrix2))
(if (not (equal? (if dims1 (if (hash? dims1) (hash-ref dims1 1 #f) (list-ref dims1 (int 1))) #f) (if dims2 (if (hash? dims2) (hash-ref dims2 0 #f) (list-ref dims2 (int 0))) #f))) (let ()
(_return (list))
) (void))
(define maximum (int (if (null? (list (if dims1 (if (hash? dims1) (hash-ref dims1 0 #f) (list-ref dims1 (int 0))) #f) (if dims1 (if (hash? dims1) (hash-ref dims1 1 #f) (list-ref dims1 (int 1))) #f) (if dims2 (if (hash? dims2) (hash-ref dims2 0 #f) (list-ref dims2 (int 0))) #f) (if dims2 (if (hash? dims2) (hash-ref dims2 1 #f) (list-ref dims2 (int 1))) #f))) 0 (apply max (list (if dims1 (if (hash? dims1) (hash-ref dims1 0 #f) (list-ref dims1 (int 0))) #f) (if dims1 (if (hash? dims1) (hash-ref dims1 1 #f) (list-ref dims1 (int 1))) #f) (if dims2 (if (hash? dims2) (hash-ref dims2 0 #f) (list-ref dims2 (int 0))) #f) (if dims2 (if (hash? dims2) (hash-ref dims2 1 #f) (list-ref dims2 (int 1))) #f))))))
(define size (next_power_of_two maximum))
(define new_matrix1 (pad_matrix matrix1 size size))
(define new_matrix2 (pad_matrix matrix2 size size))
(define result_padded (actual_strassen new_matrix1 new_matrix2))
(define final_matrix (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if dims1 (if (hash? dims1) (hash-ref dims1 0 #f) (list-ref dims1 (int 0))) #f)) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (if dims2 (if (hash? dims2) (hash-ref dims2 1 #f) (list-ref dims2 (int 1))) #f)) (let/ec _cont
    (set! row (append row (list (if (if result_padded (if (hash? result_padded) (hash-ref result_padded i #f) (list-ref result_padded (int i))) #f) (if (hash? (if result_padded (if (hash? result_padded) (hash-ref result_padded i #f) (list-ref result_padded (int i))) #f)) (hash-ref (if result_padded (if (hash? result_padded) (hash-ref result_padded i #f) (list-ref result_padded (int i))) #f) j #f) (list-ref (if result_padded (if (hash? result_padded) (hash-ref result_padded i #f) (list-ref result_padded (int i))) #f) (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! final_matrix (append final_matrix (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return final_matrix)
))
)
(define (main)
  (let/ec _return (begin
(define matrix1 (list (list 2 3 4 5) (list 6 4 3 1) (list 2 3 6 7) (list 3 1 2 4) (list 2 3 4 5) (list 6 4 3 1) (list 2 3 6 7) (list 3 1 2 4) (list 2 3 4 5) (list 6 2 3 1)))
(define matrix2 (list (list 0 2 1 1) (list 16 2 3 3) (list 2 2 7 7) (list 13 11 22 4)))
(define res (strassen matrix1 matrix2))
(displayln res)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
