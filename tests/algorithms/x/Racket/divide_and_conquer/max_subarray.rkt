;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (max_cross_sum arr low mid high)
  (let/ec _return (begin
(define left_sum (- 1000000000000000000.0))
(define max_left (- 1))
(define sum 0.0)
(define i mid)
(let/ec _break (let loop ()
  (if (>= i low) (let/ec _cont
    (set! sum (let ([__l sum] [__r (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> sum left_sum) (let ()
(set! left_sum sum)
(set! max_left i)
) (void))
    (set! i (- i 1))
    (loop)) (void))))
(define right_sum (- 1000000000000000000.0))
(define max_right (- 1))
(set! sum 0.0)
(set! i (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(let/ec _break (let loop ()
  (if (<= i high) (let/ec _cont
    (set! sum (let ([__l sum] [__r (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (> sum right_sum) (let ()
(set! right_sum sum)
(set! max_right i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "start" max_left "end" max_right "sum" (let ([__l left_sum] [__r right_sum]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (max_subarray arr low high)
  (let/ec _return (begin
(if (equal? (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 0) (let ()
(_return (hash "start" (- 1) "end" (- 1) "sum" 0.0))
) (void))
(if (equal? low high) (let ()
(_return (hash "start" low "end" high "sum" (if arr (if (hash? arr) (hash-ref arr low #f) (list-ref arr (int low))) #f)))
) (void))
(define mid (floor (/ (let ([__l low] [__r high]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2)))
(define left (max_subarray arr low mid))
(define right (max_subarray arr (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) high))
(define cross (max_cross_sum arr low mid high))
(if (and (>= (if left (hash-ref left "sum" #f) #f) (if right (hash-ref right "sum" #f) #f)) (>= (if left (hash-ref left "sum" #f) #f) (if cross (hash-ref cross "sum" #f) #f))) (let ()
(_return left)
) (void))
(if (and (>= (if right (hash-ref right "sum" #f) #f) (if left (hash-ref left "sum" #f) #f)) (>= (if right (hash-ref right "sum" #f) #f) (if cross (hash-ref cross "sum" #f) #f))) (let ()
(_return right)
) (void))
(_return cross)
))
)
(define (show res)
  (let/ec _return (begin
(displayln (string-append (string-append (string-append (string-append (string-append (string-append "[" (format "~a" (if res (hash-ref res "start" #f) #f))) ", ") (format "~a" (if res (hash-ref res "end" #f) #f))) ", ") (format "~a" (if res (hash-ref res "sum" #f) #f))) "]"))
))
)
(define (main)
  (let/ec _return (begin
(define nums1 (list (- 2.0) 1.0 (- 3.0) 4.0 (- 1.0) 2.0 1.0 (- 5.0) 4.0))
(define res1 (max_subarray nums1 0 (- (cond [(string? nums1) (string-length nums1)] [(hash? nums1) (hash-count nums1)] [else (length nums1)]) 1)))
(show res1)
(define nums2 (list 2.0 8.0 9.0))
(define res2 (max_subarray nums2 0 (- (cond [(string? nums2) (string-length nums2)] [(hash? nums2) (hash-count nums2)] [else (length nums2)]) 1)))
(show res2)
(define nums3 (list 0.0 0.0))
(define res3 (max_subarray nums3 0 (- (cond [(string? nums3) (string-length nums3)] [(hash? nums3) (hash-count nums3)] [else (length nums3)]) 1)))
(show res3)
(define nums4 (list (- 1.0) 0.0 1.0))
(define res4 (max_subarray nums4 0 (- (cond [(string? nums4) (string-length nums4)] [(hash? nums4) (hash-count nums4)] [else (length nums4)]) 1)))
(show res4)
(define nums5 (list (- 2.0) (- 3.0) (- 1.0) (- 4.0) (- 6.0)))
(define res5 (max_subarray nums5 0 (- (cond [(string? nums5) (string-length nums5)] [(hash? nums5) (hash-count nums5)] [else (length nums5)]) 1)))
(show res5)
(define nums6 (list))
(define res6 (max_subarray nums6 0 0))
(show res6)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
