;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (slice_list arr start end)
  (let/ec _return (begin
(define res (list))
(define k start)
(let/ec _break (let loop ()
  (if (< k end) (let/ec _cont
    (set! res (append res (list (if arr (if (hash? arr) (hash-ref arr k #f) (list-ref arr (int k))) #f))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (count_inversions_bf arr)
  (let/ec _return (begin
(define n (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
(define inv 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- n 1)) (let/ec _cont
    (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (if (> (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f)) (let ()
(set! inv (let ([__l inv] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return inv)
))
)
(define (count_cross_inversions p q)
  (let/ec _return (begin
(define r (list))
(define i 0)
(define j 0)
(define inv 0)
(let/ec _break (let loop ()
  (if (and (< i (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)])) (< j (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)]))) (let/ec _cont
    (if (> (if p (if (hash? p) (hash-ref p i #f) (list-ref p (int i))) #f) (if q (if (hash? q) (hash-ref q j #f) (list-ref q (int j))) #f)) (let ()
(set! inv (let ([__l inv] [__r (- (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]) i)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! r (append r (list (if q (if (hash? q) (hash-ref q j #f) (list-ref q (int j))) #f))))
(set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! r (append r (list (if p (if (hash? p) (hash-ref p i #f) (list-ref p (int i))) #f))))
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    (loop)) (void))))
(if (< i (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)])) (let ()
(set! r (append r (slice_list p i (cond [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)]))))
) (let ()
(set! r (append r (slice_list q j (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)]))))
))
(_return (hash "arr" r "inv" inv))
))
)
(define (count_inversions_recursive arr)
  (let/ec _return (begin
(if (<= (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1) (let ()
(_return (hash "arr" arr "inv" 0))
) (void))
(define mid (floor (/ (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 2)))
(define p (slice_list arr 0 mid))
(define q (slice_list arr mid (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])))
(define res_p (count_inversions_recursive p))
(define res_q (count_inversions_recursive q))
(define res_cross (count_cross_inversions (if res_p (hash-ref res_p "arr" #f) #f) (if res_q (hash-ref res_q "arr" #f) #f)))
(define total (let ([__l (let ([__l (if res_p (hash-ref res_p "inv" #f) #f)] [__r (if res_q (hash-ref res_q "inv" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if res_cross (hash-ref res_cross "inv" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (hash "arr" (if res_cross (hash-ref res_cross "arr" #f) #f) "inv" total))
))
)
(define arr_1 (list 10 2 1 5 5 2 11))
(define nbf (count_inversions_bf arr_1))
(define nrec (if (count_inversions_recursive arr_1) (hash-ref (count_inversions_recursive arr_1) "inv" #f) #f))
(define nbf2 (count_inversions_bf arr_1))
(define nrec2 (if (count_inversions_recursive arr_1) (hash-ref (count_inversions_recursive arr_1) "inv" #f) #f))
(define nbf3 (count_inversions_bf arr_1))
(define nrec3 (if (count_inversions_recursive arr_1) (hash-ref (count_inversions_recursive arr_1) "inv" #f) #f))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "number of inversions = " nbf)) " "))
(set! arr_1 (list 1 2 2 5 5 10 11))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "number of inversions = " nbf2)) " "))
(set! arr_1 (list))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list "number of inversions = " nbf3)) " "))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
