;; Generated by Mochi 0.10.60 on 2025-08-07 14:57 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (abs x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- 0.0 x))
) (void))
(_return x)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (euclidean_distance_sqr p1 p2)
  (let/ec _return (begin
(define dx (- (if p1 (if (hash? p1) (hash-ref p1 0 #f) (list-ref p1 (int 0))) #f) (if p2 (if (hash? p2) (hash-ref p2 0 #f) (list-ref p2 (int 0))) #f)))
(define dy (- (if p1 (if (hash? p1) (hash-ref p1 1 #f) (list-ref p1 (int 1))) #f) (if p2 (if (hash? p2) (hash-ref p2 1 #f) (list-ref p2 (int 1))) #f)))
(_return (let ([__l (* dx dx)] [__r (* dy dy)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (column_based_sort arr column)
  (let/ec _return (begin
(define points arr)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)]) 1)) (let/ec _cont
    (if (> (if (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f) (if (hash? (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f)) (hash-ref (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f) column #f) (list-ref (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f) (int column))) #f) (if (if points (if (hash? points) (hash-ref points (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if points (if (hash? points) (hash-ref points (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if points (if (hash? points) (hash-ref points (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) column #f) (list-ref (if points (if (hash? points) (hash-ref points (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int column))) #f)) (let ()
(define tmp (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f))
(set! points (list-set points (int j) (if points (if (hash? points) (hash-ref points (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! points (list-set points (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return points)
))
)
(define (dis_between_closest_pair points count min_dis)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- count 1)) (let/ec _cont
    (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j count) (let/ec _cont
    (define current (euclidean_distance_sqr (if points (if (hash? points) (hash-ref points i #f) (list-ref points (int i))) #f) (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f)))
    (if (< current min_dis) (let ()
(set! min_dis current)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return min_dis)
))
)
(define (dis_between_closest_in_strip points count min_dis)
  (let/ec _return (begin
(define i_start 0)
(if (< 6 (- count 1)) (let ()
(set! i_start 6)
) (let ()
(set! i_start (- count 1))
))
(define i i_start)
(let/ec _break (let loop ()
  (if (< i count) (let/ec _cont
    (define j_start 0)
    (if (> (- i 6) 0) (let ()
(set! j_start (- i 6))
) (void))
    (define j j_start)
    (let/ec _break (let loop ()
  (if (< j i) (let/ec _cont
    (define current (euclidean_distance_sqr (if points (if (hash? points) (hash-ref points i #f) (list-ref points (int i))) #f) (if points (if (hash? points) (hash-ref points j #f) (list-ref points (int j))) #f)))
    (if (< current min_dis) (let ()
(set! min_dis current)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return min_dis)
))
)
(define (closest_pair_of_points_sqr px py count)
  (let/ec _return (begin
(if (<= count 3) (let ()
(_return (dis_between_closest_pair px count 1000000000000000000.0))
) (void))
(define mid (floor (/ count 2)))
(define left (closest_pair_of_points_sqr px (slice py 0 mid) mid))
(define right (closest_pair_of_points_sqr py (slice py mid count) (- count mid)))
(define best left)
(if (< right best) (let ()
(set! best right)
) (void))
(define strip (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? px) (string-length px)] [(hash? px) (hash-count px)] [else (length px)])) (let/ec _cont
    (if (< (abs (- (if (if px (if (hash? px) (hash-ref px i #f) (list-ref px (int i))) #f) (if (hash? (if px (if (hash? px) (hash-ref px i #f) (list-ref px (int i))) #f)) (hash-ref (if px (if (hash? px) (hash-ref px i #f) (list-ref px (int i))) #f) 0 #f) (list-ref (if px (if (hash? px) (hash-ref px i #f) (list-ref px (int i))) #f) (int 0))) #f) (if (if px (if (hash? px) (hash-ref px mid #f) (list-ref px (int mid))) #f) (if (hash? (if px (if (hash? px) (hash-ref px mid #f) (list-ref px (int mid))) #f)) (hash-ref (if px (if (hash? px) (hash-ref px mid #f) (list-ref px (int mid))) #f) 0 #f) (list-ref (if px (if (hash? px) (hash-ref px mid #f) (list-ref px (int mid))) #f) (int 0))) #f))) best) (let ()
(set! strip (append strip (list (if px (if (hash? px) (hash-ref px i #f) (list-ref px (int i))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define strip_best (dis_between_closest_in_strip strip (cond [(string? strip) (string-length strip)] [(hash? strip) (hash-count strip)] [else (length strip)]) best))
(if (< strip_best best) (let ()
(set! best strip_best)
) (void))
(_return best)
))
)
(define (closest_pair_of_points points count)
  (let/ec _return (begin
(define points_sorted_on_x (column_based_sort points 0))
(define points_sorted_on_y (column_based_sort points 1))
(define dist_sqr (closest_pair_of_points_sqr points_sorted_on_x points_sorted_on_y count))
(_return (sqrtApprox dist_sqr))
))
)
(define points (list (list 2.0 3.0) (list 12.0 30.0) (list 40.0 50.0) (list 5.0 1.0) (list 12.0 10.0) (list 3.0 4.0)))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (string-append "Distance: " (format "~a" (closest_pair_of_points points (cond [(string? points) (string-length points)] [(hash? points) (hash-count points)] [else (length points)])))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
