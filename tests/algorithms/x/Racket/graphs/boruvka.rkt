;; Generated by Mochi 0.10.65 on 2025-08-14 17:09 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (new_graph num_nodes)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "num_nodes" num_nodes) (hash-set! h "edges" (list)) (hash-set! h "component" (let ([h (make-hash)]) h)) h))
))
)
(define (add_edge g u v w)
  (let/ec _return (begin
(define es (if g (hash-ref g "edges" #f) #f))
(set! es (append (or es (list)) (list (let ([h (make-hash)]) (hash-set! h "u" u) (hash-set! h "v" v) (hash-set! h "w" w) h))))
(_return (let ([h (make-hash)]) (hash-set! h "num_nodes" (if g (hash-ref g "num_nodes" #f) #f)) (hash-set! h "edges" es) (hash-set! h "component" (if g (hash-ref g "component" #f) #f)) h))
))
)
(define (find_component g node)
  (let/ec _return (begin
(if (equal? (if (if g (hash-ref g "component" #f) #f) (if (hash? (if g (hash-ref g "component" #f) #f)) (hash-ref (if g (hash-ref g "component" #f) #f) node #f) (safe-index (if g (hash-ref g "component" #f) #f) (int node))) #f) node) (let ()
(_return node)
) (void))
(_return (find_component g (if (if g (hash-ref g "component" #f) #f) (if (hash? (if g (hash-ref g "component" #f) #f)) (hash-ref (if g (hash-ref g "component" #f) #f) node #f) (safe-index (if g (hash-ref g "component" #f) #f) (int node))) #f)))
))
)
(define (set_component g node)
  (let/ec _return (begin
(if (not (equal? (if (if g (hash-ref g "component" #f) #f) (if (hash? (if g (hash-ref g "component" #f) #f)) (hash-ref (if g (hash-ref g "component" #f) #f) node #f) (safe-index (if g (hash-ref g "component" #f) #f) (int node))) #f) node)) (let ()
(define comp (if g (hash-ref g "component" #f) #f))
(define k 0)
(let/ec _break (let loop ()
  (if (let ([__l k] [__r (if g (hash-ref g "num_nodes" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (hash? comp) (hash-set! comp k (find_component g k)) (begin (set! comp (make-hash)) (hash-set! comp k (find_component g k))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! g (let ([h (make-hash)]) (hash-set! h "num_nodes" (if g (hash-ref g "num_nodes" #f) #f)) (hash-set! h "edges" (if g (hash-ref g "edges" #f) #f)) (hash-set! h "component" comp) h))
) (void))
(_return g)
))
)
(define (union g component_size u v)
  (let/ec _return (begin
(define comp_size component_size)
(define comp (if g (hash-ref g "component" #f) #f))
(if (let ([__l (if comp_size (if (hash? comp_size) (hash-ref comp_size u #f) (safe-index comp_size (int u))) #f)] [__r (if comp_size (if (hash? comp_size) (hash-ref comp_size v #f) (safe-index comp_size (int v))) #f)]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(if (hash? comp) (hash-set! comp u v) (begin (set! comp (make-hash)) (hash-set! comp u v)))
(set! comp_size (list-set comp_size (int v) (let ([__l (if comp_size (if (hash? comp_size) (hash-ref comp_size v #f) (safe-index comp_size (int v))) #f)] [__r (if comp_size (if (hash? comp_size) (hash-ref comp_size u #f) (safe-index comp_size (int u))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! g (let ([h (make-hash)]) (hash-set! h "num_nodes" (if g (hash-ref g "num_nodes" #f) #f)) (hash-set! h "edges" (if g (hash-ref g "edges" #f) #f)) (hash-set! h "component" comp) h))
(set! g (set_component g u))
) (let ()
(if (hash? comp) (hash-set! comp v u) (begin (set! comp (make-hash)) (hash-set! comp v u)))
(set! comp_size (list-set comp_size (int u) (let ([__l (if comp_size (if (hash? comp_size) (hash-ref comp_size u #f) (safe-index comp_size (int u))) #f)] [__r (if comp_size (if (hash? comp_size) (hash-ref comp_size v #f) (safe-index comp_size (int v))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! g (let ([h (make-hash)]) (hash-set! h "num_nodes" (if g (hash-ref g "num_nodes" #f) #f)) (hash-set! h "edges" (if g (hash-ref g "edges" #f) #f)) (hash-set! h "component" comp) h))
(set! g (set_component g v))
))
(_return (let ([h (make-hash)]) (hash-set! h "graph" g) (hash-set! h "component_size" comp_size) h))
))
)
(define (create_empty_edges n)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (let ([h (make-hash)]) (hash-set! h "u" (- 0 1)) (hash-set! h "v" (- 0 1)) (hash-set! h "w" (- 0 1)) h))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (boruvka g)
  (let/ec _return (begin
(define component_size (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if g (hash-ref g "num_nodes" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! component_size (append (or component_size (list)) (list 1)))
      (define comp (if g (hash-ref g "component" #f) #f))
      (if (hash? comp) (hash-set! comp i i) (begin (set! comp (make-hash)) (hash-set! comp i i)))
      (set! g (let ([h (make-hash)]) (hash-set! h "num_nodes" (if g (hash-ref g "num_nodes" #f) #f)) (hash-set! h "edges" (if g (hash-ref g "edges" #f) #f)) (hash-set! h "component" comp) h))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define mst_weight 0)
(define num_components (if g (hash-ref g "num_nodes" #f) #f))
(define minimum_weight_edge (create_empty_edges (if g (hash-ref g "num_nodes" #f) #f)))
(let/ec _break (let loop ()
  (if (let ([__l num_components] [__r 1]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (let/ec _break (for ([e (if g (hash-ref g "edges" #f) #f)])
  (let/ec _cont
(define u (if e (hash-ref e "u" #f) #f))
(define v (if e (hash-ref e "v" #f) #f))
(define w (if e (hash-ref e "w" #f) #f))
(define u_comp (if (if g (hash-ref g "component" #f) #f) (if (hash? (if g (hash-ref g "component" #f) #f)) (hash-ref (if g (hash-ref g "component" #f) #f) u #f) (safe-index (if g (hash-ref g "component" #f) #f) (int u))) #f))
(define v_comp (if (if g (hash-ref g "component" #f) #f) (if (hash? (if g (hash-ref g "component" #f) #f)) (hash-ref (if g (hash-ref g "component" #f) #f) v #f) (safe-index (if g (hash-ref g "component" #f) #f) (int v))) #f))
(if (not (equal? u_comp v_comp)) (let ()
(define current_u (if minimum_weight_edge (if (hash? minimum_weight_edge) (hash-ref minimum_weight_edge u_comp #f) (safe-index minimum_weight_edge (int u_comp))) #f))
(if (or (equal? (if current_u (hash-ref current_u "u" #f) #f) (- 0 1)) (let ([__l (if current_u (hash-ref current_u "w" #f) #f)] [__r w]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(set! minimum_weight_edge (list-set minimum_weight_edge (int u_comp) (let ([h (make-hash)]) (hash-set! h "u" u) (hash-set! h "v" v) (hash-set! h "w" w) h)))
) (void))
(define current_v (if minimum_weight_edge (if (hash? minimum_weight_edge) (hash-ref minimum_weight_edge v_comp #f) (safe-index minimum_weight_edge (int v_comp))) #f))
(if (or (equal? (if current_v (hash-ref current_v "u" #f) #f) (- 0 1)) (let ([__l (if current_v (hash-ref current_v "w" #f) #f)] [__r w]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(set! minimum_weight_edge (list-set minimum_weight_edge (int v_comp) (let ([h (make-hash)]) (hash-set! h "u" u) (hash-set! h "v" v) (hash-set! h "w" w) h)))
) (void))
) (void))
  )))
      (let/ec _break (for ([e minimum_weight_edge])
  (let/ec _cont
(if (not (equal? (if e (hash-ref e "u" #f) #f) (- 0 1))) (let ()
(define u (if e (hash-ref e "u" #f) #f))
(define v (if e (hash-ref e "v" #f) #f))
(define w (if e (hash-ref e "w" #f) #f))
(define u_comp (if (if g (hash-ref g "component" #f) #f) (if (hash? (if g (hash-ref g "component" #f) #f)) (hash-ref (if g (hash-ref g "component" #f) #f) u #f) (safe-index (if g (hash-ref g "component" #f) #f) (int u))) #f))
(define v_comp (if (if g (hash-ref g "component" #f) #f) (if (hash? (if g (hash-ref g "component" #f) #f)) (hash-ref (if g (hash-ref g "component" #f) #f) v #f) (safe-index (if g (hash-ref g "component" #f) #f) (int v))) #f))
(if (not (equal? u_comp v_comp)) (let ()
(set! mst_weight (let ([__l mst_weight] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define res (union g component_size u_comp v_comp))
(set! g (if res (hash-ref res "graph" #f) #f))
(set! component_size (if res (hash-ref res "component_size" #f) #f))
(displayln (string-append (string-append (string-append (string-append "Added edge [" (to-string u)) " - ") (to-string v)) "]"))
(displayln (string-append "Added weight: " (to-string w)))
(displayln "")
(set! num_components (- num_components 1))
) (void))
) (void))
  )))
      (set! minimum_weight_edge (create_empty_edges (if g (hash-ref g "num_nodes" #f) #f)))
    )
    (loop)) (void))))
(displayln (string-append "The total weight of the minimal spanning tree is: " (to-string mst_weight)))
(_return mst_weight)
))
)
(define (main)
  (let/ec _return (begin
(define g (new_graph 8))
(define edges (list (list 0 1 10) (list 0 2 6) (list 0 3 5) (list 1 3 15) (list 2 3 4) (list 3 4 8) (list 4 5 10) (list 4 6 6) (list 4 7 5) (list 5 7 15) (list 6 7 4)))
(let/ec _break (for ([e edges])
  (let/ec _cont
(set! g (add_edge g (if e (if (hash? e) (hash-ref e 0 #f) (safe-index e (int 0))) #f) (if e (if (hash? e) (hash-ref e 1 #f) (safe-index e (int 1))) #f) (if e (if (hash? e) (hash-ref e 2 #f) (safe-index e (int 2))) #f)))
  )))
(boruvka g)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
