;; Generated by Mochi 0.10.65 on 2025-08-14 17:09 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (sort_edges edges)
  (let/ec _return (begin
(define es edges)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not es) 0] [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (- (- (cond [(not es) 0] [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)]) i) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f) (if (hash? (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f)) (hash-ref (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f) 2 #f) (safe-index (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f) (int 2))) #f)] [__r (if (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) 2 #f) (safe-index (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int 2))) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(define temp (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f))
(set! es (list-set es (int j) (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! es (list-set es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) temp))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return es)
))
)
(define (find_parent parent i)
  (let/ec _return (begin
(if (not (equal? (if parent (if (hash? parent) (hash-ref parent i #f) (safe-index parent (int i))) #f) i)) (let ()
(set! parent (list-set parent (int i) (find_parent parent (if parent (if (hash? parent) (hash-ref parent i #f) (safe-index parent (int i))) #f))))
) (void))
(_return (if parent (if (hash? parent) (hash-ref parent i #f) (safe-index parent (int i))) #f))
))
)
(define (kruskal num_nodes edges)
  (let/ec _return (begin
(define es (sort_edges edges))
(define parent (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r num_nodes]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! parent (append (or parent (list)) (list i)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define mst (list))
(define idx 0)
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not es) 0] [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define e (if es (if (hash? es) (hash-ref es idx #f) (safe-index es (int idx))) #f))
      (define pa (find_parent parent (if e (if (hash? e) (hash-ref e 0 #f) (safe-index e (int 0))) #f)))
      (define pb (find_parent parent (if e (if (hash? e) (hash-ref e 1 #f) (safe-index e (int 1))) #f)))
      (if (not (equal? pa pb)) (let ()
(set! mst (append (or mst (list)) (list e)))
(set! parent (list-set parent (int pa) pb))
) (void))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return mst)
))
)
(define (edges_to_string es)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not es) 0] [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define e (if es (if (hash? es) (hash-ref es i #f) (safe-index es (int i))) #f))
      (set! s (string-append (string-append (string-append (string-append (string-append (string-append (string-append s "(") (to-string (if e (if (hash? e) (hash-ref e 0 #f) (safe-index e (int 0))) #f))) ", ") (to-string (if e (if (hash? e) (hash-ref e 1 #f) (safe-index e (int 1))) #f))) ", ") (to-string (if e (if (hash? e) (hash-ref e 2 #f) (safe-index e (int 2))) #f))) ")"))
      (if (let ([__l i] [__r (- (cond [(not es) 0] [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)]) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! s (string-append s ", "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define edges1 (list (list 0 1 3) (list 1 2 5) (list 2 3 1)))
(define edges2 (list (list 0 1 3) (list 1 2 5) (list 2 3 1) (list 0 2 1) (list 0 3 2)))
(define edges3 (list (list 0 1 3) (list 1 2 5) (list 2 3 1) (list 0 2 1) (list 0 3 2) (list 2 1 1)))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (edges_to_string (kruskal 4 edges1)))
(displayln (edges_to_string (kruskal 4 edges2)))
(displayln (edges_to_string (kruskal 4 edges3)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
