;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define grid (list (list 0 0 0 0 0 0 0) (list 0 1 0 0 0 0 0) (list 0 0 0 0 0 0 0) (list 0 0 1 0 0 0 0) (list 1 0 1 0 0 0 0) (list 0 0 0 0 0 0 0) (list 0 0 0 0 1 0 0)))
(define delta (list (list (- 1) 0) (list 0 (- 1)) (list 1 0) (list 0 1)))
(define (key y x)
  (let/ec _return (begin
(_return (string-append (string-append (format "~a" y) ",") (format "~a" x)))
))
)
(define (parse_int s)
  (let/ec _return (begin
(define value 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define c (substring s i (+ i 1)))
    (set! value (let ([__l (* value 10)] [__r (int c)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return value)
))
)
(define (parse_key k)
  (let/ec _return (begin
(define idx 0)
(let/ec _break (let loop ()
  (if (and (< idx (cond [(string? k) (string-length k)] [(hash? k) (hash-count k)] [else (length k)])) (not (string=? (slice k idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ","))) (let/ec _cont
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define y (parse_int (slice k 0 idx)))
(define x (parse_int (slice k (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? k) (string-length k)] [(hash? k) (hash-count k)] [else (length k)]))))
(_return (list y x))
))
)
(define (neighbors pos)
  (let/ec _return (begin
(define coords (parse_key pos))
(define y (if coords (if (hash? coords) (hash-ref coords 0 #f) (list-ref coords (int 0))) #f))
(define x (if coords (if (hash? coords) (hash-ref coords 1 #f) (list-ref coords (int 1))) #f))
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? delta) (string-length delta)] [(hash? delta) (hash-count delta)] [else (length delta)])) (let/ec _cont
    (define ny (let ([__l y] [__r (if (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) (if (hash? (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f)) (hash-ref (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) 0 #f) (list-ref (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) (int 0))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define nx (let ([__l x] [__r (if (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) (if (hash? (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f)) (hash-ref (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) 1 #f) (list-ref (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) (int 1))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (and (and (and (>= ny 0) (< ny (cond [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]))) (>= nx 0)) (< nx (cond [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))]))) (let ()
(if (equal? (if (if grid (if (hash? grid) (hash-ref grid ny #f) (list-ref grid (int ny))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid ny #f) (list-ref grid (int ny))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid ny #f) (list-ref grid (int ny))) #f) nx #f) (list-ref (if grid (if (hash? grid) (hash-ref grid ny #f) (list-ref grid (int ny))) #f) (int nx))) #f) 0) (let ()
(set! res (append res (list (key ny nx))))
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (reverse_list lst)
  (let/ec _return (begin
(define res (list))
(define i (- (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (set! res (append res (list (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f))))
    (set! i (- i 1))
    (loop)) (void))))
(_return res)
))
)
(define (bfs start goal)
  (let/ec _return (begin
(define queue (list))
(set! queue (append queue (list (hash "pos" start "path" (list start)))))
(define head 0)
(define visited (hash "start" #t))
(let/ec _break (let loop ()
  (if (< head (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])) (let/ec _cont
    (define node (if queue (if (hash? queue) (hash-ref queue head #f) (list-ref queue (int head))) #f))
    (set! head (let ([__l head] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (string=? (if node (hash-ref node "pos" #f) #f) goal) (let ()
(_return (if node (hash-ref node "path" #f) #f))
) (void))
    (define neigh (neighbors (if node (hash-ref node "pos" #f) #f)))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? neigh) (string-length neigh)] [(hash? neigh) (hash-count neigh)] [else (length neigh)])) (let/ec _cont
    (define npos (if neigh (if (hash? neigh) (hash-ref neigh i #f) (list-ref neigh (int i))) #f))
    (if (not (hash-has-key? visited npos)) (let ()
(set! visited (hash-set (or visited (hash)) npos #t))
(define new_path (append (if node (hash-ref node "path" #f) #f) (list npos)))
(set! queue (append queue (list (hash "pos" npos "path" new_path))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (loop)) (void))))
(_return (list))
))
)
(define (bidirectional_bfs start goal)
  (let/ec _return (begin
(define queue_f (list))
(define queue_b (list))
(set! queue_f (append queue_f (list (hash "pos" start "path" (list start)))))
(set! queue_b (append queue_b (list (hash "pos" goal "path" (list goal)))))
(define head_f 0)
(define head_b 0)
(define visited_f (hash "start" (list start)))
(define visited_b (hash "goal" (list goal)))
(let/ec _break (let loop ()
  (if (and (< head_f (cond [(string? queue_f) (string-length queue_f)] [(hash? queue_f) (hash-count queue_f)] [else (length queue_f)])) (< head_b (cond [(string? queue_b) (string-length queue_b)] [(hash? queue_b) (hash-count queue_b)] [else (length queue_b)]))) (let/ec _cont
    (define node_f (if queue_f (if (hash? queue_f) (hash-ref queue_f head_f #f) (list-ref queue_f (int head_f))) #f))
    (set! head_f (let ([__l head_f] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define neigh_f (neighbors (if node_f (hash-ref node_f "pos" #f) #f)))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? neigh_f) (string-length neigh_f)] [(hash? neigh_f) (hash-count neigh_f)] [else (length neigh_f)])) (let/ec _cont
    (define npos (if neigh_f (if (hash? neigh_f) (hash-ref neigh_f i #f) (list-ref neigh_f (int i))) #f))
    (if (not (hash-has-key? visited_f npos)) (let ()
(define new_path (append (if node_f (hash-ref node_f "path" #f) #f) (list npos)))
(set! visited_f (hash-set (or visited_f (hash)) npos new_path))
(if (hash-has-key? visited_b npos) (let ()
(define rev (reverse_list (if visited_b (hash-ref visited_b npos (list)) #f)))
(define j 1)
(let/ec _break (let loop ()
  (if (< j (cond [(string? rev) (string-length rev)] [(hash? rev) (hash-count rev)] [else (length rev)])) (let/ec _cont
    (set! new_path (append new_path (list (if rev (if (hash? rev) (hash-ref rev j #f) (list-ref rev (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return new_path)
) (void))
(set! queue_f (append queue_f (list (hash "pos" npos "path" new_path))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define node_b (if queue_b (if (hash? queue_b) (hash-ref queue_b head_b #f) (list-ref queue_b (int head_b))) #f))
    (set! head_b (let ([__l head_b] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define neigh_b (neighbors (if node_b (hash-ref node_b "pos" #f) #f)))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? neigh_b) (string-length neigh_b)] [(hash? neigh_b) (hash-count neigh_b)] [else (length neigh_b)])) (let/ec _cont
    (define nposb (if neigh_b (if (hash? neigh_b) (hash-ref neigh_b j #f) (list-ref neigh_b (int j))) #f))
    (if (not (hash-has-key? visited_b nposb)) (let ()
(define new_path_b (append (if node_b (hash-ref node_b "path" #f) #f) (list nposb)))
(set! visited_b (hash-set (or visited_b (hash)) nposb new_path_b))
(if (hash-has-key? visited_f nposb) (let ()
(define path_f (if visited_f (hash-ref visited_f nposb (list)) #f))
(set! new_path_b (reverse_list new_path_b))
(define t 1)
(let/ec _break (let loop ()
  (if (< t (cond [(string? new_path_b) (string-length new_path_b)] [(hash? new_path_b) (hash-count new_path_b)] [else (length new_path_b)])) (let/ec _cont
    (set! path_f (append path_f (list (if new_path_b (if (hash? new_path_b) (hash-ref new_path_b t #f) (list-ref new_path_b (int t))) #f))))
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return path_f)
) (void))
(set! queue_b (append queue_b (list (hash "pos" nposb "path" new_path_b))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (loop)) (void))))
(_return (list start))
))
)
(define (path_to_string path)
  (let/ec _return (begin
(if (equal? (cond [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)]) 0) (let ()
(_return "[]")
) (void))
(define first (parse_key (if path (if (hash? path) (hash-ref path 0 #f) (list-ref path (int 0))) #f)))
(define s (string-append (string-append (string-append (string-append "[(" (format "~a" (if first (if (hash? first) (hash-ref first 0 #f) (list-ref first (int 0))) #f))) ", ") (format "~a" (if first (if (hash? first) (hash-ref first 1 #f) (list-ref first (int 1))) #f))) ")"))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)])) (let/ec _cont
    (define c (parse_key (if path (if (hash? path) (hash-ref path i #f) (list-ref path (int i))) #f)))
    (set! s (string-append (string-append (string-append (string-append (string-append s ", (") (format "~a" (if c (if (hash? c) (hash-ref c 0 #f) (list-ref c (int 0))) #f))) ", ") (format "~a" (if c (if (hash? c) (hash-ref c 1 #f) (list-ref c (int 1))) #f))) ")"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define start (key 0 0))
(define goal (key (- (cond [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]) 1) (- (cond [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))]) 1)))
(define path1 (bfs start goal))
(define path2 (bidirectional_bfs start goal))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (path_to_string path1))
(displayln (path_to_string path2))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
