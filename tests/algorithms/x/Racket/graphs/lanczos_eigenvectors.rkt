;; Generated by Mochi 0.10.65 on 2025-08-14 17:09 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define seed 123456789)
(define (rand)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return seed)
))
)
(define (random)
  (let/ec _return (begin
(_return (/ (* 1.0 (rand)) 2147483648.0))
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 20]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return guess)
))
)
(define (absf x)
  (let/ec _return (begin
(_return (if (let ([__l x] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (- x) x))
))
)
(define (dot a b)
  (let/ec _return (begin
(define s 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! s (let ([__l s] [__r (* (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return s)
))
)
(define (vector_scale v s)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not v) 0] [(string? v) (string-length v)] [(hash? v) (hash-count v)] [else (length v)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (* (if v (if (hash? v) (hash-ref v i #f) (safe-index v (int i))) #f) s))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (vector_sub a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (- (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (vector_add a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (let ([__l (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)] [__r (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (zeros_matrix r c)
  (let/ec _return (begin
(define m (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r r]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r c]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list 0.0)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! m (append (or m (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return m)
))
)
(define (column m idx)
  (let/ec _return (begin
(define col (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! col (append (or col (list)) (list (if (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) (if (hash? (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f)) (hash-ref (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) idx #f) (safe-index (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f) (int idx))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return col)
))
)
(define (validate_adjacency_list graph)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not graph) 0] [(string? graph) (string-length graph)] [(hash? graph) (hash-count graph)] [else (length graph)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f)) 0] [(string? (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f)) (string-length (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f))] [(hash? (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f)) (hash-count (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f))] [else (length (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define v (if (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f) (if (hash? (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f)) (hash-ref (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f) j #f) (safe-index (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f) (int j))) #f))
      (if (or (let ([__l v] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l v] [__r (cond [(not graph) 0] [(string? graph) (string-length graph)] [(hash? graph) (hash-count graph)] [else (length graph)])]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ()
(panic "Invalid neighbor")
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (multiply_matrix_vector graph vector)
  (let/ec _return (begin
(define n (cond [(not graph) 0] [(string? graph) (string-length graph)] [(hash? graph) (hash-count graph)] [else (length graph)]))
(if (not (equal? (cond [(not vector) 0] [(string? vector) (string-length vector)] [(hash? vector) (hash-count vector)] [else (length vector)]) n)) (let ()
(panic "Vector length must match number of nodes")
) (void))
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define sum 0.0)
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f)) 0] [(string? (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f)) (string-length (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f))] [(hash? (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f)) (hash-count (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f))] [else (length (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define nb (if (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f) (if (hash? (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f)) (hash-ref (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f) j #f) (safe-index (if graph (if (hash? graph) (hash-ref graph i #f) (safe-index graph (int i))) #f) (int j))) #f))
      (set! sum (let ([__l sum] [__r (if vector (if (hash? vector) (hash-ref vector nb #f) (safe-index vector (int nb))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! result (append (or result (list)) (list sum)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (lanczos_iteration graph k)
  (let/ec _return (begin
(define n (cond [(not graph) 0] [(string? graph) (string-length graph)] [(hash? graph) (hash-count graph)] [else (length graph)]))
(if (or (let ([__l k] [__r 1]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l k] [__r n]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(panic "invalid number of eigenvectors")
) (void))
(define q (zeros_matrix n k))
(define t (zeros_matrix k k))
(define v (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! v (append (or v (list)) (list (random))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define ss 0.0)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! ss (let ([__l ss] [__r (* (if v (if (hash? v) (hash-ref v i #f) (safe-index v (int i))) #f) (if v (if (hash? v) (hash-ref v i #f) (safe-index v (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define vnorm (sqrtApprox ss))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! q (list-set q i (list-set (list-ref q i) 0 (/ (if v (if (hash? v) (hash-ref v i #f) (safe-index v (int i))) #f) vnorm))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define beta 0.0)
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r k]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define w (multiply_matrix_vector graph (column q j)))
      (if (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! w (vector_sub w (vector_scale (column q (- j 1)) beta)))
) (void))
      (define alpha (dot (column q j) w))
      (set! w (vector_sub w (vector_scale (column q j) alpha)))
      (define ss2 0.0)
      (define p 0)
      (let/ec _break (let loop ()
  (if (let ([__l p] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! ss2 (let ([__l ss2] [__r (* (if w (if (hash? w) (hash-ref w p #f) (safe-index w (int p))) #f) (if w (if (hash? w) (hash-ref w p #f) (safe-index w (int p))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! beta (sqrtApprox ss2))
      (set! t (list-set t j (list-set (list-ref t j) j alpha)))
      (if (let ([__l j] [__r (- k 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! t (list-set t j (list-set (list-ref t j) (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) beta)))
(set! t (list-set t (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref t (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) j beta)))
(if (let ([__l beta] [__r 1e-10]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(define wnorm (vector_scale w (/ 1.0 beta)))
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! q (list-set q r (list-set (list-ref q r) (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (if wnorm (if (hash? wnorm) (hash-ref wnorm r #f) (safe-index wnorm (int r))) #f))))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (void))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "t" t) (hash-set! h "q" q) h))
))
)
(define (jacobi_eigen a_in max_iter)
  (let/ec _return (begin
(define n (cond [(not a_in) 0] [(string? a_in) (string-length a_in)] [(hash? a_in) (hash-count a_in)] [else (length a_in)]))
(define a a_in)
(define v (zeros_matrix n n))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! v (list-set v i (list-set (list-ref v i) i 1.0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define iter 0)
(let/ec _break (let loop ()
  (if (let ([__l iter] [__r max_iter]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p 0)
      (define q 1)
      (define max (absf (if (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f) (if (hash? (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f) q #f) (safe-index (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f) (int q))) #f)))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define val (absf (if (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) j #f) (safe-index (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (int j))) #f)))
      (if (let ([__l val] [__r max]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! max val)
(set! p i)
(set! q j)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (let ([__l max] [__r 1e-08]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_break)
) (void))
      (define app (if (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f) (if (hash? (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f) p #f) (safe-index (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f) (int p))) #f))
      (define aqq (if (if a (if (hash? a) (hash-ref a q #f) (safe-index a (int q))) #f) (if (hash? (if a (if (hash? a) (hash-ref a q #f) (safe-index a (int q))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a q #f) (safe-index a (int q))) #f) q #f) (safe-index (if a (if (hash? a) (hash-ref a q #f) (safe-index a (int q))) #f) (int q))) #f))
      (define apq (if (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f) (if (hash? (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f) q #f) (safe-index (if a (if (hash? a) (hash-ref a p #f) (safe-index a (int p))) #f) (int q))) #f))
      (define theta (/ (- aqq app) (* 2.0 apq)))
      (define t (/ 1.0 (let ([__l (absf theta)] [__r (sqrtApprox (let ([__l (* theta theta)] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (let ([__l theta] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! t (- t))
) (void))
      (define c (/ 1.0 (sqrtApprox (let ([__l 1.0] [__r (* t t)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (define s (* t c))
      (define tau (/ s (let ([__l 1.0] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! a (list-set a p (list-set (list-ref a p) p (- app (* t apq)))))
      (set! a (list-set a q (list-set (list-ref a q) q (let ([__l aqq] [__r (* t apq)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! a (list-set a p (list-set (list-ref a p) q 0.0)))
      (set! a (list-set a q (list-set (list-ref a q) p 0.0)))
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (and (not (equal? k p)) (not (equal? k q))) (let ()
(define akp (if (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (if (hash? (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) p #f) (safe-index (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (int p))) #f))
(define akq (if (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (if (hash? (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) q #f) (safe-index (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (int q))) #f))
(set! a (list-set a k (list-set (list-ref a k) p (- akp (* s (let ([__l akq] [__r (* tau akp)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))))
(set! a (list-set a p (list-set (list-ref a p) k (if (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (if (hash? (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) p #f) (safe-index (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (int p))) #f))))
(set! a (list-set a k (list-set (list-ref a k) q (let ([__l akq] [__r (* s (- akp (* tau akq)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! a (list-set a q (list-set (list-ref a q) k (if (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (if (hash? (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) q #f) (safe-index (if a (if (hash? a) (hash-ref a k #f) (safe-index a (int k))) #f) (int q))) #f))))
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define vkp (if (if v (if (hash? v) (hash-ref v k #f) (safe-index v (int k))) #f) (if (hash? (if v (if (hash? v) (hash-ref v k #f) (safe-index v (int k))) #f)) (hash-ref (if v (if (hash? v) (hash-ref v k #f) (safe-index v (int k))) #f) p #f) (safe-index (if v (if (hash? v) (hash-ref v k #f) (safe-index v (int k))) #f) (int p))) #f))
      (define vkq (if (if v (if (hash? v) (hash-ref v k #f) (safe-index v (int k))) #f) (if (hash? (if v (if (hash? v) (hash-ref v k #f) (safe-index v (int k))) #f)) (hash-ref (if v (if (hash? v) (hash-ref v k #f) (safe-index v (int k))) #f) q #f) (safe-index (if v (if (hash? v) (hash-ref v k #f) (safe-index v (int k))) #f) (int q))) #f))
      (set! v (list-set v k (list-set (list-ref v k) p (- vkp (* s (let ([__l vkq] [__r (* tau vkp)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))))
      (set! v (list-set v k (list-set (list-ref v k) q (let ([__l vkq] [__r (* s (- vkp (* tau vkq)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! iter (let ([__l iter] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define eigenvalues (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! eigenvalues (append (or eigenvalues (list)) (list (if (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) i #f) (safe-index (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "values" eigenvalues) (hash-set! h "vectors" v) h))
))
)
(define (matmul a b)
  (let/ec _return (begin
(define rows (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define cols (cond [(not (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) 0] [(string? (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) (string-length (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))] [(hash? (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) (hash-count (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))] [else (length (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))]))
(define inner (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))
(define m (zeros_matrix rows cols))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r rows]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r cols]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define s 0.0)
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r inner]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! s (let ([__l s] [__r (* (if (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) k #f) (safe-index (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (int k))) #f) (if (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) (if (hash? (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) j #f) (safe-index (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! m (list-set m i (list-set (list-ref m i) j s)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return m)
))
)
(define (sort_eigenpairs vals vecs)
  (let/ec _return (begin
(define n (cond [(not vals) 0] [(string? vals) (string-length vals)] [(hash? vals) (hash-count vals)] [else (length vals)]))
(define values vals)
(define vectors vecs)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (- n 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if values (if (hash? values) (hash-ref values j #f) (safe-index values (int j))) #f)] [__r (if values (if (hash? values) (hash-ref values (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index values (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(define tmp (if values (if (hash? values) (hash-ref values j #f) (safe-index values (int j))) #f))
(set! values (list-set values (int j) (if values (if (hash? values) (hash-ref values (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index values (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! values (list-set values (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not vectors) 0] [(string? vectors) (string-length vectors)] [(hash? vectors) (hash-count vectors)] [else (length vectors)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define tv (if (if vectors (if (hash? vectors) (hash-ref vectors r #f) (safe-index vectors (int r))) #f) (if (hash? (if vectors (if (hash? vectors) (hash-ref vectors r #f) (safe-index vectors (int r))) #f)) (hash-ref (if vectors (if (hash? vectors) (hash-ref vectors r #f) (safe-index vectors (int r))) #f) j #f) (safe-index (if vectors (if (hash? vectors) (hash-ref vectors r #f) (safe-index vectors (int r))) #f) (int j))) #f))
      (set! vectors (list-set vectors r (list-set (list-ref vectors r) j (if (if vectors (if (hash? vectors) (hash-ref vectors r #f) (safe-index vectors (int r))) #f) (if (hash? (if vectors (if (hash? vectors) (hash-ref vectors r #f) (safe-index vectors (int r))) #f)) (hash-ref (if vectors (if (hash? vectors) (hash-ref vectors r #f) (safe-index vectors (int r))) #f) (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index (if vectors (if (hash? vectors) (hash-ref vectors r #f) (safe-index vectors (int r))) #f) (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
      (set! vectors (list-set vectors r (list-set (list-ref vectors r) (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) tv)))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "values" values) (hash-set! h "vectors" vectors) h))
))
)
(define (find_lanczos_eigenvectors graph k)
  (let/ec _return (begin
(validate_adjacency_list graph)
(define res (lanczos_iteration graph k))
(define eig (jacobi_eigen (if res (hash-ref res "t" #f) #f) 50))
(define sorted (sort_eigenpairs (if eig (hash-ref eig "values" #f) #f) (if eig (hash-ref eig "vectors" #f) #f)))
(define final_vectors (matmul (if res (hash-ref res "q" #f) #f) (if sorted (hash-ref sorted "vectors" #f) #f)))
(_return (let ([h (make-hash)]) (hash-set! h "values" (if sorted (hash-ref sorted "values" #f) #f)) (hash-set! h "vectors" final_vectors) h))
))
)
(define (list_to_string arr)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! s (string-append s (to-string (if arr (if (hash? arr) (hash-ref arr i #f) (safe-index arr (int i))) #f))))
      (if (let ([__l i] [__r (- (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! s (string-append s ", "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (string-append s "]"))
))
)
(define (matrix_to_string m)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! s (string-append s (list_to_string (if m (if (hash? m) (hash-ref m i #f) (safe-index m (int i))) #f))))
      (if (let ([__l i] [__r (- (cond [(not m) 0] [(string? m) (string-length m)] [(hash? m) (hash-count m)] [else (length m)]) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! s (string-append s "; "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (string-append s "]"))
))
)
(define graph (list (list 1 2) (list 0 2) (list 0 1)))
(define result (find_lanczos_eigenvectors graph 2))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (list_to_string (if result (hash-ref result "values" #f) #f)))
(displayln (matrix_to_string (if result (hash-ref result "vectors" #f) #f)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
