;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define HEURISTIC 0)
(define grid (list (list 0 0 0 0 0 0 0) (list 0 1 0 0 0 0 0) (list 0 0 0 0 0 0 0) (list 0 0 1 0 0 0 0) (list 1 0 1 0 0 0 0) (list 0 0 0 0 0 0 0) (list 0 0 0 0 1 0 0)))
(define delta (list (list (- 1) 0) (list 0 (- 1)) (list 1 0) (list 0 1)))
(define (abs x)
  (let/ec _return (begin
(if (< x 0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (<= x 0.0) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 10) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (heuristic a b)
  (let/ec _return (begin
(define dy (- (if a (hash-ref a "y" #f) #f) (if b (hash-ref b "y" #f) #f)))
(define dx (- (if a (hash-ref a "x" #f) #f) (if b (hash-ref b "x" #f) #f)))
(if (equal? HEURISTIC 1) (let ()
(_return (exact->inexact (let ([__l (abs dy)] [__r (abs dx)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(define dyf (exact->inexact dy))
(define dxf (exact->inexact dx))
(_return (sqrtApprox (let ([__l (* dyf dyf)] [__r (* dxf dxf)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (pos_equal a b)
  (let/ec _return (begin
(_return (and (equal? (if a (hash-ref a "y" #f) #f) (if b (hash-ref b "y" #f) #f)) (equal? (if a (hash-ref a "x" #f) #f) (if b (hash-ref b "x" #f) #f))))
))
)
(define (contains_pos lst p)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (if (pos_equal (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f) p) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (open_index_of_pos open p)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? open) (string-length open)] [(hash? open) (hash-count open)] [else (length open)])) (let/ec _cont
    (if (pos_equal (if (if open (if (hash? open) (hash-ref open i #f) (list-ref open (int i))) #f) (hash-ref (if open (if (hash? open) (hash-ref open i #f) (list-ref open (int i))) #f) "pos" #f) #f) p) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 0 1))
))
)
(define (remove_node_at nodes idx)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])) (let/ec _cont
    (if (not (equal? i idx)) (let ()
(set! res (append res (list (if nodes (if (hash? nodes) (hash-ref nodes i #f) (list-ref nodes (int i))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (append_pos_list path p)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)])) (let/ec _cont
    (set! res (append res (list (if path (if (hash? path) (hash-ref path i #f) (list-ref path (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! res (append res (list p)))
(_return res)
))
)
(define (reverse_pos_list lst)
  (let/ec _return (begin
(define res (list))
(define i (- (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)]) 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (set! res (append res (list (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f))))
    (set! i (- i 1))
    (loop)) (void))))
(_return res)
))
)
(define (concat_pos_lists a b)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (set! res (append res (list (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])) (let/ec _cont
    (set! res (append res (list (if b (if (hash? b) (hash-ref b j #f) (list-ref b (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (get_successors p)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? delta) (string-length delta)] [(hash? delta) (hash-count delta)] [else (length delta)])) (let/ec _cont
    (define nx (let ([__l (if p (hash-ref p "x" #f) #f)] [__r (if (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) (if (hash? (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f)) (hash-ref (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) 1 #f) (list-ref (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) (int 1))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define ny (let ([__l (if p (hash-ref p "y" #f) #f)] [__r (if (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) (if (hash? (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f)) (hash-ref (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) 0 #f) (list-ref (if delta (if (hash? delta) (hash-ref delta i #f) (list-ref delta (int i))) #f) (int 0))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (and (and (and (>= nx 0) (>= ny 0)) (< nx (cond [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))]))) (< ny (cond [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]))) (let ()
(if (equal? (if (if grid (if (hash? grid) (hash-ref grid ny #f) (list-ref grid (int ny))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid ny #f) (list-ref grid (int ny))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid ny #f) (list-ref grid (int ny))) #f) nx #f) (list-ref (if grid (if (hash? grid) (hash-ref grid ny #f) (list-ref grid (int ny))) #f) (int nx))) #f) 0) (let ()
(set! res (append res (list (hash "y" ny "x" nx))))
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (find_lowest_f open)
  (let/ec _return (begin
(define best 0)
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? open) (string-length open)] [(hash? open) (hash-count open)] [else (length open)])) (let/ec _cont
    (if (< (if (if open (if (hash? open) (hash-ref open i #f) (list-ref open (int i))) #f) (hash-ref (if open (if (hash? open) (hash-ref open i #f) (list-ref open (int i))) #f) "f_cost" #f) #f) (if (if open (if (hash? open) (hash-ref open best #f) (list-ref open (int best))) #f) (hash-ref (if open (if (hash? open) (hash-ref open best #f) (list-ref open (int best))) #f) "f_cost" #f) #f)) (let ()
(set! best i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return best)
))
)
(define (astar start goal)
  (let/ec _return (begin
(define h0 (heuristic start goal))
(define open (list (hash "pos" start "g_cost" 0 "h_cost" h0 "f_cost" h0 "path" (list start))))
(define closed (list))
(let/ec _break (let loop ()
  (if (> (cond [(string? open) (string-length open)] [(hash? open) (hash-count open)] [else (length open)]) 0) (let/ec _cont
    (define idx (find_lowest_f open))
    (define current (if open (if (hash? open) (hash-ref open idx #f) (list-ref open (int idx))) #f))
    (set! open (remove_node_at open idx))
    (if (pos_equal (if current (hash-ref current "pos" #f) #f) goal) (let ()
(_return (if current (hash-ref current "path" #f) #f))
) (void))
    (set! closed (append closed (list (if current (hash-ref current "pos" #f) #f))))
    (define succ (get_successors (if current (hash-ref current "pos" #f) #f)))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? succ) (string-length succ)] [(hash? succ) (hash-count succ)] [else (length succ)])) (let/ec _cont
    (define pos (if succ (if (hash? succ) (hash-ref succ i #f) (list-ref succ (int i))) #f))
    (if (contains_pos closed pos) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (define tentative_g (let ([__l (if current (hash-ref current "g_cost" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define idx_open (open_index_of_pos open pos))
    (if (or (equal? idx_open (- 0 1)) (< tentative_g (if (if open (if (hash? open) (hash-ref open idx_open #f) (list-ref open (int idx_open))) #f) (hash-ref (if open (if (hash? open) (hash-ref open idx_open #f) (list-ref open (int idx_open))) #f) "g_cost" #f) #f))) (let ()
(define new_path (append_pos_list (if current (hash-ref current "path" #f) #f) pos))
(define h (heuristic pos goal))
(define f (let ([__l (exact->inexact tentative_g)] [__r h]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (not (equal? idx_open (- 0 1))) (let ()
(set! open (remove_node_at open idx_open))
) (void))
(set! open (append open (list (hash "pos" pos "g_cost" tentative_g "h_cost" h "f_cost" f "path" new_path))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (loop)) (void))))
(_return (list start))
))
)
(define (combine_paths fwd bwd)
  (let/ec _return (begin
(define bwd_copy (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- (cond [(string? (if bwd (hash-ref bwd "path" #f) #f)) (string-length (if bwd (hash-ref bwd "path" #f) #f))] [(hash? (if bwd (hash-ref bwd "path" #f) #f)) (hash-count (if bwd (hash-ref bwd "path" #f) #f))] [else (length (if bwd (hash-ref bwd "path" #f) #f))]) 1)) (let/ec _cont
    (set! bwd_copy (append bwd_copy (list (if (if bwd (hash-ref bwd "path" #f) #f) (if (hash? (if bwd (hash-ref bwd "path" #f) #f)) (hash-ref (if bwd (hash-ref bwd "path" #f) #f) i #f) (list-ref (if bwd (hash-ref bwd "path" #f) #f) (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! bwd_copy (reverse_pos_list bwd_copy))
(_return (concat_pos_lists (if fwd (hash-ref fwd "path" #f) #f) bwd_copy))
))
)
(define (bidirectional_astar start goal)
  (let/ec _return (begin
(define hf (heuristic start goal))
(define hb (heuristic goal start))
(define open_f (list (hash "pos" start "g_cost" 0 "h_cost" hf "f_cost" hf "path" (list start))))
(define open_b (list (hash "pos" goal "g_cost" 0 "h_cost" hb "f_cost" hb "path" (list goal))))
(define closed_f (list))
(define closed_b (list))
(let/ec _break (let loop ()
  (if (and (> (cond [(string? open_f) (string-length open_f)] [(hash? open_f) (hash-count open_f)] [else (length open_f)]) 0) (> (cond [(string? open_b) (string-length open_b)] [(hash? open_b) (hash-count open_b)] [else (length open_b)]) 0)) (let/ec _cont
    (define idx_f (find_lowest_f open_f))
    (define current_f (if open_f (if (hash? open_f) (hash-ref open_f idx_f #f) (list-ref open_f (int idx_f))) #f))
    (set! open_f (remove_node_at open_f idx_f))
    (define idx_b (find_lowest_f open_b))
    (define current_b (if open_b (if (hash? open_b) (hash-ref open_b idx_b #f) (list-ref open_b (int idx_b))) #f))
    (set! open_b (remove_node_at open_b idx_b))
    (if (pos_equal (if current_f (hash-ref current_f "pos" #f) #f) (if current_b (hash-ref current_b "pos" #f) #f)) (let ()
(_return (combine_paths current_f current_b))
) (void))
    (set! closed_f (append closed_f (list (if current_f (hash-ref current_f "pos" #f) #f))))
    (set! closed_b (append closed_b (list (if current_b (hash-ref current_b "pos" #f) #f))))
    (define succ_f (get_successors (if current_f (hash-ref current_f "pos" #f) #f)))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? succ_f) (string-length succ_f)] [(hash? succ_f) (hash-count succ_f)] [else (length succ_f)])) (let/ec _cont
    (define pos (if succ_f (if (hash? succ_f) (hash-ref succ_f i #f) (list-ref succ_f (int i))) #f))
    (if (contains_pos closed_f pos) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (define tentative_g (let ([__l (if current_f (hash-ref current_f "g_cost" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define h (heuristic pos (if current_b (hash-ref current_b "pos" #f) #f)))
    (define f (let ([__l (exact->inexact tentative_g)] [__r h]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define idx_open (open_index_of_pos open_f pos))
    (if (or (equal? idx_open (- 0 1)) (< tentative_g (if (if open_f (if (hash? open_f) (hash-ref open_f idx_open #f) (list-ref open_f (int idx_open))) #f) (hash-ref (if open_f (if (hash? open_f) (hash-ref open_f idx_open #f) (list-ref open_f (int idx_open))) #f) "g_cost" #f) #f))) (let ()
(define new_path (append_pos_list (if current_f (hash-ref current_f "path" #f) #f) pos))
(if (not (equal? idx_open (- 0 1))) (let ()
(set! open_f (remove_node_at open_f idx_open))
) (void))
(set! open_f (append open_f (list (hash "pos" pos "g_cost" tentative_g "h_cost" h "f_cost" f "path" new_path))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define succ_b (get_successors (if current_b (hash-ref current_b "pos" #f) #f)))
    (set! i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? succ_b) (string-length succ_b)] [(hash? succ_b) (hash-count succ_b)] [else (length succ_b)])) (let/ec _cont
    (define pos (if succ_b (if (hash? succ_b) (hash-ref succ_b i #f) (list-ref succ_b (int i))) #f))
    (if (contains_pos closed_b pos) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (define tentative_g (let ([__l (if current_b (hash-ref current_b "g_cost" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define h (heuristic pos (if current_f (hash-ref current_f "pos" #f) #f)))
    (define f (let ([__l (exact->inexact tentative_g)] [__r h]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define idx_open (open_index_of_pos open_b pos))
    (if (or (equal? idx_open (- 0 1)) (< tentative_g (if (if open_b (if (hash? open_b) (hash-ref open_b idx_open #f) (list-ref open_b (int idx_open))) #f) (hash-ref (if open_b (if (hash? open_b) (hash-ref open_b idx_open #f) (list-ref open_b (int idx_open))) #f) "g_cost" #f) #f))) (let ()
(define new_path (append_pos_list (if current_b (hash-ref current_b "path" #f) #f) pos))
(if (not (equal? idx_open (- 0 1))) (let ()
(set! open_b (remove_node_at open_b idx_open))
) (void))
(set! open_b (append open_b (list (hash "pos" pos "g_cost" tentative_g "h_cost" h "f_cost" f "path" new_path))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (loop)) (void))))
(_return (list start))
))
)
(define (path_to_string path)
  (let/ec _return (begin
(if (equal? (cond [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)]) 0) (let ()
(_return "[]")
) (void))
(define s (string-append (string-append (string-append (string-append "[(" (format "~a" (if (if path (if (hash? path) (hash-ref path 0 #f) (list-ref path (int 0))) #f) (hash-ref (if path (if (hash? path) (hash-ref path 0 #f) (list-ref path (int 0))) #f) "y" #f) #f))) ", ") (format "~a" (if (if path (if (hash? path) (hash-ref path 0 #f) (list-ref path (int 0))) #f) (hash-ref (if path (if (hash? path) (hash-ref path 0 #f) (list-ref path (int 0))) #f) "x" #f) #f))) ")"))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)])) (let/ec _cont
    (set! s (string-append (string-append (string-append (string-append (string-append s ", (") (format "~a" (if (if path (if (hash? path) (hash-ref path i #f) (list-ref path (int i))) #f) (hash-ref (if path (if (hash? path) (hash-ref path i #f) (list-ref path (int i))) #f) "y" #f) #f))) ", ") (format "~a" (if (if path (if (hash? path) (hash-ref path i #f) (list-ref path (int i))) #f) (hash-ref (if path (if (hash? path) (hash-ref path i #f) (list-ref path (int i))) #f) "x" #f) #f))) ")"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define start (hash "y" 0 "x" 0))
(define goal (hash "y" (- (cond [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]) 1) "x" (- (cond [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))]) 1)))
(define path1 (astar start goal))
(define path2 (bidirectional_astar start goal))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (path_to_string path1))
(displayln (path_to_string path2))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
