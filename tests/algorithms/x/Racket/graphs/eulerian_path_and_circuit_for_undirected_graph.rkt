;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (make_matrix n)
  (let/ec _return (begin
(define matrix (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (<= j n) (let/ec _cont
    (set! row (append row (list #f)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! matrix (append matrix (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return matrix)
))
)
(define (dfs u graph visited_edge path)
  (let/ec _return (begin
(set! path (append path (list u)))
(if (hash-has-key? graph u) (let ()
(define neighbors (if graph (hash-ref graph u (list)) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not neighbors) 0] [(string? neighbors) (string-length neighbors)] [(hash? neighbors) (hash-count neighbors)] [else (length neighbors)])) (let/ec _cont
    (define v (if neighbors (if (hash? neighbors) (hash-ref neighbors i #f) (list-ref neighbors (int i))) #f))
    (if (not (if (if visited_edge (if (hash? visited_edge) (hash-ref visited_edge u #f) (list-ref visited_edge (int u))) #f) (if (hash? (if visited_edge (if (hash? visited_edge) (hash-ref visited_edge u #f) (list-ref visited_edge (int u))) #f)) (hash-ref (if visited_edge (if (hash? visited_edge) (hash-ref visited_edge u #f) (list-ref visited_edge (int u))) #f) v #f) (list-ref (if visited_edge (if (hash? visited_edge) (hash-ref visited_edge u #f) (list-ref visited_edge (int u))) #f) (int v))) #f)) (let ()
(set! visited_edge (list-set visited_edge u (list-set (list-ref visited_edge u) v #t)))
(set! visited_edge (list-set visited_edge v (list-set (list-ref visited_edge v) u #t)))
(set! path (dfs v graph visited_edge path))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
(_return path)
))
)
(define (check_circuit_or_path graph max_node)
  (let/ec _return (begin
(define odd_degree_nodes 0)
(define odd_node (- 1))
(define i 0)
(let/ec _break (let loop ()
  (if (< i max_node) (let/ec _cont
    (if (hash-has-key? graph i) (let ()
(if (equal? (modulo (cond [(not (if graph (hash-ref graph i (list)) #f)) 0] [(string? (if graph (hash-ref graph i (list)) #f)) (string-length (if graph (hash-ref graph i (list)) #f))] [(hash? (if graph (hash-ref graph i (list)) #f)) (hash-count (if graph (hash-ref graph i (list)) #f))] [else (length (if graph (hash-ref graph i (list)) #f))]) 2) 1) (let ()
(set! odd_degree_nodes (let ([__l odd_degree_nodes] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! odd_node i)
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (equal? odd_degree_nodes 0) (let ()
(_return (hash "status" 1 "odd_node" odd_node))
) (void))
(if (equal? odd_degree_nodes 2) (let ()
(_return (hash "status" 2 "odd_node" odd_node))
) (void))
(_return (hash "status" 3 "odd_node" odd_node))
))
)
(define (check_euler graph max_node)
  (let/ec _return (begin
(define visited_edge (make_matrix max_node))
(define res (check_circuit_or_path graph max_node))
(if (equal? (if res (hash-ref res "status" #f) #f) 3) (let ()
(displayln "graph is not Eulerian")
(displayln "no path")
(_return void)
) (void))
(define start_node 1)
(if (equal? (if res (hash-ref res "status" #f) #f) 2) (let ()
(set! start_node (if res (hash-ref res "odd_node" #f) #f))
(displayln "graph has a Euler path")
) (void))
(if (equal? (if res (hash-ref res "status" #f) #f) 1) (let ()
(displayln "graph has a Euler cycle")
) (void))
(define path (dfs start_node graph visited_edge (list)))
(displayln (format "~a" path))
))
)
(define g1 (hash 1 (list 2 3 4) 2 (list 1 3) 3 (list 1 2) 4 (list 1 5) 5 (list 4)))
(define g2 (hash 1 (list 2 3 4 5) 2 (list 1 3) 3 (list 1 2) 4 (list 1 5) 5 (list 1 4)))
(define g3 (hash 1 (list 2 3 4) 2 (list 1 3 4) 3 (list 1 2) 4 (list 1 2 5) 5 (list 4)))
(define g4 (hash 1 (list 2 3) 2 (list 1 3) 3 (list 1 2)))
(define g5 (hash 1 (list) 2 (list)))
(define max_node 10)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(check_euler g1 max_node)
(check_euler g2 max_node)
(check_euler g3 max_node)
(check_euler g4 max_node)
(check_euler g5 max_node)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
