;; Generated by Mochi 0.10.60 on 2025-08-08 10:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define INF 1000000000)
(define (pairs_to_string edges)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])) (let/ec _cont
    (define e (if edges (if (hash? edges) (hash-ref edges i #f) (list-ref edges (int i))) #f))
    (set! s (string-append (string-append (string-append (string-append (string-append s "(") (format "~a" (if e (hash-ref e "u" #f) #f))) ", ") (format "~a" (if e (hash-ref e "v" #f) #f))) ")"))
    (if (< i (- (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)]) 1)) (let ()
(set! s (string-append s ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (string-append s "]"))
))
)
(define (prim_mst graph)
  (let/ec _return (begin
(define n (cond [(not graph) 0] [(string? graph) (string-length graph)] [(hash? graph) (hash-count graph)] [else (length graph)]))
(define visited (list))
(define dist (list))
(define parent (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! visited (append visited (list #f)))
    (set! dist (append dist (list INF)))
    (set! parent (append parent (list (- 1))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! dist (list-set dist (int 0) 0))
(define result (list))
(define count 0)
(let/ec _break (let loop ()
  (if (< count n) (let/ec _cont
    (define min_val INF)
    (define u 0)
    (define v 0)
    (let/ec _break (let loop ()
  (if (< v n) (let/ec _cont
    (if (and (not (if visited (if (hash? visited) (hash-ref visited v #f) (list-ref visited (int v))) #f)) (< (if dist (if (hash? dist) (hash-ref dist v #f) (list-ref dist (int v))) #f) min_val)) (let ()
(set! min_val (if dist (if (hash? dist) (hash-ref dist v #f) (list-ref dist (int v))) #f))
(set! u v)
) (void))
    (set! v (let ([__l v] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (equal? min_val INF) (let ()
(_break)
) (void))
    (set! visited (list-set visited (int u) #t))
    (if (not (equal? u 0)) (let ()
(set! result (append result (list (let ([h (make-hash)]) (hash-set! h "u" (if parent (if (hash? parent) (hash-ref parent u #f) (list-ref parent (int u))) #f)) (hash-set! h "v" u) h))))
) (void))
    (let/ec _break (for ([e (if graph (if (hash? graph) (hash-ref graph u #f) (list-ref graph (int u))) #f)])
  (let/ec _cont
(if (and (not (if visited (if (hash? visited) (hash-ref visited (if e (hash-ref e "to" #f) #f) #f) (list-ref visited (int (if e (hash-ref e "to" #f) #f)))) #f)) (< (if e (hash-ref e "weight" #f) #f) (if dist (if (hash? dist) (hash-ref dist (if e (hash-ref e "to" #f) #f) #f) (list-ref dist (int (if e (hash-ref e "to" #f) #f)))) #f))) (let ()
(set! dist (list-set dist (int (if e (hash-ref e "to" #f) #f)) (if e (hash-ref e "weight" #f) #f)))
(set! parent (list-set parent (int (if e (hash-ref e "to" #f) #f)) u))
) (void))
  )))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define adjacency_list (list (list (let ([h (make-hash)]) (hash-set! h "to" 1) (hash-set! h "weight" 1) h) (let ([h (make-hash)]) (hash-set! h "to" 3) (hash-set! h "weight" 3) h)) (list (let ([h (make-hash)]) (hash-set! h "to" 0) (hash-set! h "weight" 1) h) (let ([h (make-hash)]) (hash-set! h "to" 2) (hash-set! h "weight" 6) h) (let ([h (make-hash)]) (hash-set! h "to" 3) (hash-set! h "weight" 5) h) (let ([h (make-hash)]) (hash-set! h "to" 4) (hash-set! h "weight" 1) h)) (list (let ([h (make-hash)]) (hash-set! h "to" 1) (hash-set! h "weight" 6) h) (let ([h (make-hash)]) (hash-set! h "to" 4) (hash-set! h "weight" 5) h) (let ([h (make-hash)]) (hash-set! h "to" 5) (hash-set! h "weight" 2) h)) (list (let ([h (make-hash)]) (hash-set! h "to" 0) (hash-set! h "weight" 3) h) (let ([h (make-hash)]) (hash-set! h "to" 1) (hash-set! h "weight" 5) h) (let ([h (make-hash)]) (hash-set! h "to" 4) (hash-set! h "weight" 1) h)) (list (let ([h (make-hash)]) (hash-set! h "to" 1) (hash-set! h "weight" 1) h) (let ([h (make-hash)]) (hash-set! h "to" 2) (hash-set! h "weight" 5) h) (let ([h (make-hash)]) (hash-set! h "to" 3) (hash-set! h "weight" 1) h) (let ([h (make-hash)]) (hash-set! h "to" 5) (hash-set! h "weight" 4) h)) (list (let ([h (make-hash)]) (hash-set! h "to" 2) (hash-set! h "weight" 2) h) (let ([h (make-hash)]) (hash-set! h "to" 4) (hash-set! h "weight" 4) h))))
(define mst_edges (prim_mst adjacency_list))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (pairs_to_string mst_edges))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
