;; Generated by Mochi 0.10.66 on 2025-08-15 15:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (sort_edges edges)
  (let/ec _return (begin
(define es edges)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not es) 0] [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (- (- (cond [(not es) 0] [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)]) i) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f) (if (hash? (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f)) (hash-ref (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f) 2 #f) (safe-index (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f) (int 2))) #f)] [__r (if (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) 2 #f) (safe-index (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int 2))) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(define tmp (if es (if (hash? es) (hash-ref es j #f) (safe-index es (int j))) #f))
(set! es (list-set es (int j) (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! es (list-set es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return es)
))
)
(define (find parent x)
  (let/ec _return (begin
(define r x)
(let/ec _break (let loop ()
  (if (not (equal? (if parent (if (hash? parent) (hash-ref parent r #f) (safe-index parent (int r))) #f) r)) (begin
    (let/ec _cont
      (set! r (if parent (if (hash? parent) (hash-ref parent r #f) (safe-index parent (int r))) #f))
    )
    (loop)) (void))))
(_return r)
))
)
(define (kruskal n edges)
  (let/ec _return (begin
(define parent (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! parent (append (or parent (list)) (list i)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define sorted (sort_edges edges))
(define mst (list))
(define e 0)
(let/ec _break (let loop ()
  (if (let ([__l e] [__r (cond [(not sorted) 0] [(string? sorted) (string-length sorted)] [(hash? sorted) (hash-count sorted)] [else (length sorted)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? (cond [(not mst) 0] [(string? mst) (string-length mst)] [(hash? mst) (hash-count mst)] [else (length mst)]) (- n 1)) (let ()
(_break)
) (void))
      (define edge (if sorted (if (hash? sorted) (hash-ref sorted e #f) (safe-index sorted (int e))) #f))
      (set! e (let ([__l e] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define u (if edge (if (hash? edge) (hash-ref edge 0 #f) (safe-index edge (int 0))) #f))
      (define v (if edge (if (hash? edge) (hash-ref edge 1 #f) (safe-index edge (int 1))) #f))
      (define w (if edge (if (hash? edge) (hash-ref edge 2 #f) (safe-index edge (int 2))) #f))
      (define ru (find parent u))
      (define rv (find parent v))
      (if (not (equal? ru rv)) (let ()
(set! parent (list-set parent (int ru) rv))
(set! mst (append (or mst (list)) (list (list u v w))))
) (void))
    )
    (loop)) (void))))
(_return mst)
))
)
(define (edges_equal a b)
  (let/ec _return (begin
(if (not (equal? (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define e1 (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f))
      (define e2 (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f))
      (if (or (or (not (equal? (if e1 (if (hash? e1) (hash-ref e1 0 #f) (safe-index e1 (int 0))) #f) (if e2 (if (hash? e2) (hash-ref e2 0 #f) (safe-index e2 (int 0))) #f))) (not (equal? (if e1 (if (hash? e1) (hash-ref e1 1 #f) (safe-index e1 (int 1))) #f) (if e2 (if (hash? e2) (hash-ref e2 1 #f) (safe-index e2 (int 1))) #f)))) (not (equal? (if e1 (if (hash? e1) (hash-ref e1 2 #f) (safe-index e1 (int 2))) #f) (if e2 (if (hash? e2) (hash-ref e2 2 #f) (safe-index e2 (int 2))) #f)))) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (main)
  (let/ec _return (begin
(define num_nodes 9)
(define edges (list (list 0 1 4) (list 0 7 8) (list 1 2 8) (list 7 8 7) (list 7 6 1) (list 2 8 2) (list 8 6 6) (list 2 3 7) (list 2 5 4) (list 6 5 2) (list 3 5 14) (list 3 4 9) (list 5 4 10) (list 1 7 11)))
(define expected (list (list 7 6 1) (list 2 8 2) (list 6 5 2) (list 0 1 4) (list 2 5 4) (list 2 3 7) (list 0 7 8) (list 3 4 9)))
(define result (kruskal num_nodes edges))
(define sorted_result (sort_edges result))
(define sorted_expected (sort_edges expected))
(displayln (to-string sorted_result))
(if (edges_equal sorted_expected sorted_result) (let ()
(displayln #t)
) (let ()
(displayln #f)
))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
