;; Generated by Mochi 0.10.60 on 2025-08-08 10:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (prims_algorithm adjacency)
  (let/ec _return (begin
(define visited (let ([h (make-hash)]) h))
(if (hash? visited) (hash-set! visited 0 #t) (begin (set! visited (make-hash)) (hash-set! visited 0 #t)))
(define mst (list))
(define count 1)
(define total 0)
(let/ec _break (for ([k (in-hash-keys adjacency)])
  (let/ec _cont
(set! total (let ([__l total] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
  )))
(let/ec _break (let loop ()
  (if (< count total) (let/ec _cont
    (define best_u 0)
    (define best_v 0)
    (define best_cost 2147483647)
    (let/ec _break (for ([u_str (in-hash-keys adjacency)])
  (let/ec _cont
(define u (int u_str))
(if (if visited (hash-ref visited u #f) #f) (let ()
(let/ec _break (for ([n (if adjacency (hash-ref adjacency u (list)) #f)])
  (let/ec _cont
(if (and (not (if visited (hash-ref visited (if n (hash-ref n "node" #f) #f) #f) #f)) (< (if n (hash-ref n "cost" #f) #f) best_cost)) (let ()
(set! best_cost (if n (hash-ref n "cost" #f) #f))
(set! best_u u)
(set! best_v (if n (hash-ref n "node" #f) #f))
) (void))
  )))
) (void))
  )))
    (if (hash? visited) (hash-set! visited best_v #t) (begin (set! visited (make-hash)) (hash-set! visited best_v #t)))
    (set! mst (append mst (list (let ([h (make-hash)]) (hash-set! h "u" best_u) (hash-set! h "v" best_v) h))))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return mst)
))
)
(define (test_prim_successful_result)
  (let/ec _return (begin
(define edges (list (list 0 1 4) (list 0 7 8) (list 1 2 8) (list 7 8 7) (list 7 6 1) (list 2 8 2) (list 8 6 6) (list 2 3 7) (list 2 5 4) (list 6 5 2) (list 3 5 14) (list 3 4 9) (list 5 4 10) (list 1 7 11)))
(define adjacency (let ([h (make-hash)]) h))
(let/ec _break (for ([e edges])
  (let/ec _cont
(define u (if e (if (hash? e) (hash-ref e 0 #f) (list-ref e (int 0))) #f))
(define v (if e (if (hash? e) (hash-ref e 1 #f) (list-ref e (int 1))) #f))
(define w (if e (if (hash? e) (hash-ref e 2 #f) (list-ref e (int 2))) #f))
(if (not (hash-has-key? adjacency u)) (let ()
(if (hash? adjacency) (hash-set! adjacency u (list)) (begin (set! adjacency (make-hash)) (hash-set! adjacency u (list))))
) (void))
(if (not (hash-has-key? adjacency v)) (let ()
(if (hash? adjacency) (hash-set! adjacency v (list)) (begin (set! adjacency (make-hash)) (hash-set! adjacency v (list))))
) (void))
(if (hash? adjacency) (hash-set! adjacency u (append (if adjacency (hash-ref adjacency u (list)) #f) (list (let ([h (make-hash)]) (hash-set! h "node" v) (hash-set! h "cost" w) h)))) (begin (set! adjacency (make-hash)) (hash-set! adjacency u (append (if adjacency (hash-ref adjacency u (list)) #f) (list (let ([h (make-hash)]) (hash-set! h "node" v) (hash-set! h "cost" w) h))))))
(if (hash? adjacency) (hash-set! adjacency v (append (if adjacency (hash-ref adjacency v (list)) #f) (list (let ([h (make-hash)]) (hash-set! h "node" u) (hash-set! h "cost" w) h)))) (begin (set! adjacency (make-hash)) (hash-set! adjacency v (append (if adjacency (hash-ref adjacency v (list)) #f) (list (let ([h (make-hash)]) (hash-set! h "node" u) (hash-set! h "cost" w) h))))))
  )))
(define result (prims_algorithm adjacency))
(define seen (let ([h (make-hash)]) h))
(let/ec _break (for ([e result])
  (let/ec _cont
(define key1 (string-append (string-append (format "~a" (if e (hash-ref e "u" #f) #f)) ",") (format "~a" (if e (hash-ref e "v" #f) #f))))
(define key2 (string-append (string-append (format "~a" (if e (hash-ref e "v" #f) #f)) ",") (format "~a" (if e (hash-ref e "u" #f) #f))))
(if (hash? seen) (hash-set! seen key1 #t) (begin (set! seen (make-hash)) (hash-set! seen key1 #t)))
(if (hash? seen) (hash-set! seen key2 #t) (begin (set! seen (make-hash)) (hash-set! seen key2 #t)))
  )))
(define expected (list (list 7 6 1) (list 2 8 2) (list 6 5 2) (list 0 1 4) (list 2 5 4) (list 2 3 7) (list 0 7 8) (list 3 4 9)))
(let/ec _break (for ([ans expected])
  (let/ec _cont
(define key (string-append (string-append (format "~a" (if ans (if (hash? ans) (hash-ref ans 0 #f) (list-ref ans (int 0))) #f)) ",") (format "~a" (if ans (if (hash? ans) (hash-ref ans 1 #f) (list-ref ans (int 1))) #f))))
(if (not (if seen (hash-ref seen key #f) #f)) (let ()
(_return #f)
) (void))
  )))
(_return #t)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (test_prim_successful_result))
(displayln #t)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
