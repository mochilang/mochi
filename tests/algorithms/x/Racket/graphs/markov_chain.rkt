;; Generated by Mochi 0.10.60 on 2025-08-08 10:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define seed 1)
(define (rand)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return seed)
))
)
(define (random)
  (let/ec _return (begin
(_return (/ (* 1.0 (rand)) 2147483648.0))
))
)
(define (get_nodes trans)
  (let/ec _return (begin
(define seen (let ([h (make-hash)]) h))
(let/ec _break (for ([t trans])
  (let/ec _cont
(if (hash? seen) (hash-set! seen (if t (hash-ref t "src" #f) #f) #t) (begin (set! seen (make-hash)) (hash-set! seen (if t (hash-ref t "src" #f) #f) #t)))
(if (hash? seen) (hash-set! seen (if t (hash-ref t "dst" #f) #f) #t) (begin (set! seen (make-hash)) (hash-set! seen (if t (hash-ref t "dst" #f) #f) #t)))
  )))
(define nodes (list))
(let/ec _break (for ([k (hash-keys seen)])
  (let/ec _cont
(set! nodes (append nodes (list k)))
  )))
(_return nodes)
))
)
(define (transition current trans)
  (let/ec _return (begin
(define current_probability 0.0)
(define random_value (random))
(let/ec _break (for ([t trans])
  (let/ec _cont
(if (string=? (if t (hash-ref t "src" #f) #f) current) (let ()
(set! current_probability (let ([__l current_probability] [__r (if t (hash-ref t "prob" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (> current_probability random_value) (let ()
(_return (if t (hash-ref t "dst" #f) #f))
) (void))
) (void))
  )))
(_return "")
))
)
(define (get_transitions start trans steps)
  (let/ec _return (begin
(define visited (let ([h (make-hash)]) h))
(let/ec _break (for ([node (get_nodes trans)])
  (let/ec _cont
(define one 1)
(if (hash? visited) (hash-set! visited node one) (begin (set! visited (make-hash)) (hash-set! visited node one)))
  )))
(define node start)
(define i 0)
(let/ec _break (let loop ()
  (if (< i steps) (let/ec _cont
    (set! node (transition node trans))
    (define count (if visited (hash-ref visited node 0) #f))
    (set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (hash? visited) (hash-set! visited node count) (begin (set! visited (make-hash)) (hash-set! visited node count)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return visited)
))
)
(define (main)
  (let/ec _return (begin
(define transitions (list (let ([h (make-hash)]) (hash-set! h "src" "a") (hash-set! h "dst" "a") (hash-set! h "prob" 0.9) h) (let ([h (make-hash)]) (hash-set! h "src" "a") (hash-set! h "dst" "b") (hash-set! h "prob" 0.075) h) (let ([h (make-hash)]) (hash-set! h "src" "a") (hash-set! h "dst" "c") (hash-set! h "prob" 0.025) h) (let ([h (make-hash)]) (hash-set! h "src" "b") (hash-set! h "dst" "a") (hash-set! h "prob" 0.15) h) (let ([h (make-hash)]) (hash-set! h "src" "b") (hash-set! h "dst" "b") (hash-set! h "prob" 0.8) h) (let ([h (make-hash)]) (hash-set! h "src" "b") (hash-set! h "dst" "c") (hash-set! h "prob" 0.05) h) (let ([h (make-hash)]) (hash-set! h "src" "c") (hash-set! h "dst" "a") (hash-set! h "prob" 0.25) h) (let ([h (make-hash)]) (hash-set! h "src" "c") (hash-set! h "dst" "b") (hash-set! h "prob" 0.25) h) (let ([h (make-hash)]) (hash-set! h "src" "c") (hash-set! h "dst" "c") (hash-set! h "prob" 0.5) h)))
(define result (get_transitions "a" transitions 5000))
(displayln (string-append (string-append (string-append (string-append (format "~a" (if result (hash-ref result "a" 0) #f)) " ") (format "~a" (if result (hash-ref result "b" 0) #f))) " ") (format "~a" (if result (hash-ref result "c" 0) #f))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
