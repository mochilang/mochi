;; Generated by Mochi 0.10.65 on 2025-08-14 16:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define seed 1)
(define (rand_int n)
  (let/ec _return (begin
(set! seed (modulo (let ([__l (* seed 1103515245)] [__r 12345]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2147483648))
(_return (modulo seed n))
))
)
(define (contains list_ value)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not list_) 0] [(string? list_) (string-length list_)] [(hash? list_) (hash-count list_)] [else (length list_)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (if list_ (if (hash? list_) (hash-ref list_ i #f) (safe-index list_ (int i))) #f) value) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (remove_all list_ value)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not list_) 0] [(string? list_) (string-length list_)] [(hash? list_) (hash-count list_)] [else (length list_)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (string=? (if list_ (if (hash? list_) (hash-ref list_ i #f) (safe-index list_ (int i))) #f) value)) (let ()
(set! res (append (or res (list)) (list (if list_ (if (hash? list_) (hash-ref list_ i #f) (safe-index list_ (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (partition_graph graph)
  (let/ec _return (begin
(define contracted (let ([h (make-hash)]) h))
(let/ec _break (for ([node (hash-keys graph)])
  (let/ec _cont
(if (hash? contracted) (hash-set! contracted node (list node)) (begin (set! contracted (make-hash)) (hash-set! contracted node (list node))))
  )))
(define graph_copy (let ([h (make-hash)]) h))
(let/ec _break (for ([node (hash-keys graph)])
  (let/ec _cont
(define lst (list))
(define neigh (if graph (hash-ref graph node (list)) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not neigh) 0] [(string? neigh) (string-length neigh)] [(hash? neigh) (hash-count neigh)] [else (length neigh)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! lst (append (or lst (list)) (list (if neigh (if (hash? neigh) (hash-ref neigh i #f) (safe-index neigh (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (hash? graph_copy) (hash-set! graph_copy node lst) (begin (set! graph_copy (make-hash)) (hash-set! graph_copy node lst)))
  )))
(define nodes (hash-keys graph_copy))
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not nodes) 0] [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])] [__r 2]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define u (if nodes (if (hash? nodes) (hash-ref nodes (rand_int (cond [(not nodes) 0] [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])) #f) (safe-index nodes (int (rand_int (cond [(not nodes) 0] [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)]))))) #f))
      (define u_neighbors (if graph_copy (hash-ref graph_copy u (list)) #f))
      (define v (if u_neighbors (if (hash? u_neighbors) (hash-ref u_neighbors (rand_int (cond [(not u_neighbors) 0] [(string? u_neighbors) (string-length u_neighbors)] [(hash? u_neighbors) (hash-count u_neighbors)] [else (length u_neighbors)])) #f) (safe-index u_neighbors (int (rand_int (cond [(not u_neighbors) 0] [(string? u_neighbors) (string-length u_neighbors)] [(hash? u_neighbors) (hash-count u_neighbors)] [else (length u_neighbors)]))))) #f))
      (define uv (string-append u v))
      (define uv_neighbors (list))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if graph_copy (hash-ref graph_copy u (list)) #f)) 0] [(string? (if graph_copy (hash-ref graph_copy u (list)) #f)) (string-length (if graph_copy (hash-ref graph_copy u (list)) #f))] [(hash? (if graph_copy (hash-ref graph_copy u (list)) #f)) (hash-count (if graph_copy (hash-ref graph_copy u (list)) #f))] [else (length (if graph_copy (hash-ref graph_copy u (list)) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define n (if (if graph_copy (hash-ref graph_copy u (list)) #f) (if (hash? (if graph_copy (hash-ref graph_copy u (list)) #f)) (hash-ref (if graph_copy (hash-ref graph_copy u (list)) #f) i #f) (safe-index (if graph_copy (hash-ref graph_copy u (list)) #f) (int i))) #f))
      (if (and (and (not (string=? n u)) (not (string=? n v))) (not (contains uv_neighbors n))) (let ()
(set! uv_neighbors (append (or uv_neighbors (list)) (list n)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if graph_copy (hash-ref graph_copy v (list)) #f)) 0] [(string? (if graph_copy (hash-ref graph_copy v (list)) #f)) (string-length (if graph_copy (hash-ref graph_copy v (list)) #f))] [(hash? (if graph_copy (hash-ref graph_copy v (list)) #f)) (hash-count (if graph_copy (hash-ref graph_copy v (list)) #f))] [else (length (if graph_copy (hash-ref graph_copy v (list)) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define n (if (if graph_copy (hash-ref graph_copy v (list)) #f) (if (hash? (if graph_copy (hash-ref graph_copy v (list)) #f)) (hash-ref (if graph_copy (hash-ref graph_copy v (list)) #f) i #f) (safe-index (if graph_copy (hash-ref graph_copy v (list)) #f) (int i))) #f))
      (if (and (and (not (string=? n u)) (not (string=? n v))) (not (contains uv_neighbors n))) (let ()
(set! uv_neighbors (append (or uv_neighbors (list)) (list n)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (hash? graph_copy) (hash-set! graph_copy uv uv_neighbors) (begin (set! graph_copy (make-hash)) (hash-set! graph_copy uv uv_neighbors)))
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not uv_neighbors) 0] [(string? uv_neighbors) (string-length uv_neighbors)] [(hash? uv_neighbors) (hash-count uv_neighbors)] [else (length uv_neighbors)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define nb (if uv_neighbors (if (hash? uv_neighbors) (hash-ref uv_neighbors k #f) (safe-index uv_neighbors (int k))) #f))
      (if (hash? graph_copy) (hash-set! graph_copy nb (append (or (if graph_copy (hash-ref graph_copy nb (list)) #f) (list)) (list uv))) (begin (set! graph_copy (make-hash)) (hash-set! graph_copy nb (append (or (if graph_copy (hash-ref graph_copy nb (list)) #f) (list)) (list uv)))))
      (if (hash? graph_copy) (hash-set! graph_copy nb (remove_all (if graph_copy (hash-ref graph_copy nb (list)) #f) u)) (begin (set! graph_copy (make-hash)) (hash-set! graph_copy nb (remove_all (if graph_copy (hash-ref graph_copy nb (list)) #f) u))))
      (if (hash? graph_copy) (hash-set! graph_copy nb (remove_all (if graph_copy (hash-ref graph_copy nb (list)) #f) v)) (begin (set! graph_copy (make-hash)) (hash-set! graph_copy nb (remove_all (if graph_copy (hash-ref graph_copy nb (list)) #f) v))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define group (list))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if contracted (hash-ref contracted u (list)) #f)) 0] [(string? (if contracted (hash-ref contracted u (list)) #f)) (string-length (if contracted (hash-ref contracted u (list)) #f))] [(hash? (if contracted (hash-ref contracted u (list)) #f)) (hash-count (if contracted (hash-ref contracted u (list)) #f))] [else (length (if contracted (hash-ref contracted u (list)) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! group (append (or group (list)) (list (if (if contracted (hash-ref contracted u (list)) #f) (if (hash? (if contracted (hash-ref contracted u (list)) #f)) (hash-ref (if contracted (hash-ref contracted u (list)) #f) i #f) (safe-index (if contracted (hash-ref contracted u (list)) #f) (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not (if contracted (hash-ref contracted v (list)) #f)) 0] [(string? (if contracted (hash-ref contracted v (list)) #f)) (string-length (if contracted (hash-ref contracted v (list)) #f))] [(hash? (if contracted (hash-ref contracted v (list)) #f)) (hash-count (if contracted (hash-ref contracted v (list)) #f))] [else (length (if contracted (hash-ref contracted v (list)) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define val (if (if contracted (hash-ref contracted v (list)) #f) (if (hash? (if contracted (hash-ref contracted v (list)) #f)) (hash-ref (if contracted (hash-ref contracted v (list)) #f) i #f) (safe-index (if contracted (hash-ref contracted v (list)) #f) (int i))) #f))
      (if (not (contains group val)) (let ()
(set! group (append (or group (list)) (list val)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (hash? contracted) (hash-set! contracted uv group) (begin (set! contracted (make-hash)) (hash-set! contracted uv group)))
      (set! nodes (remove_all nodes u))
      (set! nodes (remove_all nodes v))
      (set! nodes (append (or nodes (list)) (list uv)))
    )
    (loop)) (void))))
(define groups (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not nodes) 0] [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define n (if nodes (if (hash? nodes) (hash-ref nodes j #f) (safe-index nodes (int j))) #f))
      (set! groups (append (or groups (list)) (list (if contracted (hash-ref contracted n (list)) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define groupA (if groups (if (hash? groups) (hash-ref groups 0 #f) (safe-index groups (int 0))) #f))
(define groupB (if groups (if (hash? groups) (hash-ref groups 1 #f) (safe-index groups (int 1))) #f))
(define cut (list))
(set! j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not groupA) 0] [(string? groupA) (string-length groupA)] [(hash? groupA) (hash-count groupA)] [else (length groupA)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define node (if groupA (if (hash? groupA) (hash-ref groupA j #f) (safe-index groupA (int j))) #f))
      (define neigh (if graph (hash-ref graph node (list)) #f))
      (define l 0)
      (let/ec _break (let loop ()
  (if (let ([__l l] [__r (cond [(not neigh) 0] [(string? neigh) (string-length neigh)] [(hash? neigh) (hash-count neigh)] [else (length neigh)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define nb (if neigh (if (hash? neigh) (hash-ref neigh l #f) (safe-index neigh (int l))) #f))
      (if (contains groupB nb) (let ()
(set! cut (append (or cut (list)) (list (let ([h (make-hash)]) (hash-set! h "a" node) (hash-set! h "b" nb) h))))
) (void))
      (set! l (let ([__l l] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return cut)
))
)
(define (cut_to_string cut)
  (let/ec _return (begin
(define s "{")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not cut) 0] [(string? cut) (string-length cut)] [(hash? cut) (hash-count cut)] [else (length cut)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p (if cut (if (hash? cut) (hash-ref cut i #f) (safe-index cut (int i))) #f))
      (set! s (string-append (string-append (string-append (string-append (string-append s "(") (if p (hash-ref p "a" #f) #f)) ", ") (if p (hash-ref p "b" #f) #f)) ")"))
      (if (let ([__l i] [__r (- (cond [(not cut) 0] [(string? cut) (string-length cut)] [(hash? cut) (hash-count cut)] [else (length cut)]) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! s (string-append s ", "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! s (string-append s "}"))
(_return s)
))
)
(define TEST_GRAPH (let ([h (make-hash)]) (hash-set! h "1" (list "2" "3" "4" "5")) (hash-set! h "2" (list "1" "3" "4" "5")) (hash-set! h "3" (list "1" "2" "4" "5" "10")) (hash-set! h "4" (list "1" "2" "3" "5" "6")) (hash-set! h "5" (list "1" "2" "3" "4" "7")) (hash-set! h "6" (list "7" "8" "9" "10" "4")) (hash-set! h "7" (list "6" "8" "9" "10" "5")) (hash-set! h "8" (list "6" "7" "9" "10")) (hash-set! h "9" (list "6" "7" "8" "10")) (hash-set! h "10" (list "6" "7" "8" "9" "3")) h))
(define result (partition_graph TEST_GRAPH))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (cut_to_string result))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
