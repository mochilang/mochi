;; Generated by Mochi 0.10.65 on 2025-08-14 17:09 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (expand_search graph queue head parents visited opposite_visited)
  (let/ec _return (begin
(if (let ([__l head] [__r (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "queue" queue) (hash-set! h "head" head) (hash-set! h "parents" parents) (hash-set! h "visited" visited) (hash-set! h "intersection" (- 0 1)) (hash-set! h "found" #f) h))
) (void))
(define current (if queue (if (hash? queue) (hash-ref queue head #f) (safe-index queue (int head))) #f))
(set! head (let ([__l head] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define neighbors (if graph (hash-ref graph current (list)) #f))
(define q queue)
(define p parents)
(define v visited)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not neighbors) 0] [(string? neighbors) (string-length neighbors)] [(hash? neighbors) (hash-count neighbors)] [else (length neighbors)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neighbor (if neighbors (if (hash? neighbors) (hash-ref neighbors i #f) (safe-index neighbors (int i))) #f))
      (if (if v (hash-ref v neighbor #f) #f) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
      (if (hash? v) (hash-set! v neighbor #t) (begin (set! v (make-hash)) (hash-set! v neighbor #t)))
      (if (hash? p) (hash-set! p neighbor current) (begin (set! p (make-hash)) (hash-set! p neighbor current)))
      (set! q (append (or q (list)) (list neighbor)))
      (if (if opposite_visited (hash-ref opposite_visited neighbor #f) #f) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "queue" q) (hash-set! h "head" head) (hash-set! h "parents" p) (hash-set! h "visited" v) (hash-set! h "intersection" neighbor) (hash-set! h "found" #t) h))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "queue" q) (hash-set! h "head" head) (hash-set! h "parents" p) (hash-set! h "visited" v) (hash-set! h "intersection" (- 0 1)) (hash-set! h "found" #f) h))
))
)
(define (construct_path current parents)
  (let/ec _return (begin
(define path (list))
(define node current)
(let/ec _break (let loop ()
  (if (not (equal? node (- 0 1))) (begin
    (let/ec _cont
      (set! path (append (or path (list)) (list node)))
      (set! node (if parents (hash-ref parents node 0) #f))
    )
    (loop)) (void))))
(_return path)
))
)
(define (reverse_list xs)
  (let/ec _return (begin
(define res (list))
(define i (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! i (- i 1))
      (set! res (append (or res (list)) (list (if xs (if (hash? xs) (hash-ref xs i #f) (safe-index xs (int i))) #f))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (bidirectional_search g start goal)
  (let/ec _return (begin
(if (equal? start goal) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "path" (list start)) (hash-set! h "ok" #t) h))
) (void))
(define forward_parents (let ([h (make-hash)]) h))
(if (hash? forward_parents) (hash-set! forward_parents start (- 0 1)) (begin (set! forward_parents (make-hash)) (hash-set! forward_parents start (- 0 1))))
(define backward_parents (let ([h (make-hash)]) h))
(if (hash? backward_parents) (hash-set! backward_parents goal (- 0 1)) (begin (set! backward_parents (make-hash)) (hash-set! backward_parents goal (- 0 1))))
(define forward_visited (let ([h (make-hash)]) h))
(if (hash? forward_visited) (hash-set! forward_visited start #t) (begin (set! forward_visited (make-hash)) (hash-set! forward_visited start #t)))
(define backward_visited (let ([h (make-hash)]) h))
(if (hash? backward_visited) (hash-set! backward_visited goal #t) (begin (set! backward_visited (make-hash)) (hash-set! backward_visited goal #t)))
(define forward_queue (list start))
(define backward_queue (list goal))
(define forward_head 0)
(define backward_head 0)
(define intersection (- 0 1))
(let/ec _break (let loop ()
  (if (and (and (let ([__l forward_head] [__r (cond [(not forward_queue) 0] [(string? forward_queue) (string-length forward_queue)] [(hash? forward_queue) (hash-count forward_queue)] [else (length forward_queue)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l backward_head] [__r (cond [(not backward_queue) 0] [(string? backward_queue) (string-length backward_queue)] [(hash? backward_queue) (hash-count backward_queue)] [else (length backward_queue)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (equal? intersection (- 0 1))) (begin
    (let/ec _cont
      (define res (expand_search g forward_queue forward_head forward_parents forward_visited backward_visited))
      (set! forward_queue (if res (hash-ref res "queue" #f) #f))
      (set! forward_head (if res (hash-ref res "head" #f) #f))
      (set! forward_parents (if res (hash-ref res "parents" #f) #f))
      (set! forward_visited (if res (hash-ref res "visited" #f) #f))
      (if (if res (hash-ref res "found" #f) #f) (let ()
(set! intersection (if res (hash-ref res "intersection" #f) #f))
(_break)
) (void))
      (set! res (expand_search g backward_queue backward_head backward_parents backward_visited forward_visited))
      (set! backward_queue (if res (hash-ref res "queue" #f) #f))
      (set! backward_head (if res (hash-ref res "head" #f) #f))
      (set! backward_parents (if res (hash-ref res "parents" #f) #f))
      (set! backward_visited (if res (hash-ref res "visited" #f) #f))
      (if (if res (hash-ref res "found" #f) #f) (let ()
(set! intersection (if res (hash-ref res "intersection" #f) #f))
(_break)
) (void))
    )
    (loop)) (void))))
(if (equal? intersection (- 0 1)) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "path" (list)) (hash-set! h "ok" #f) h))
) (void))
(define forward_path (construct_path intersection forward_parents))
(set! forward_path (reverse_list forward_path))
(define back_start (if backward_parents (hash-ref backward_parents intersection 0) #f))
(define backward_path (construct_path back_start backward_parents))
(define result forward_path)
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not backward_path) 0] [(string? backward_path) (string-length backward_path)] [(hash? backward_path) (hash-count backward_path)] [else (length backward_path)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (append (or result (list)) (list (if backward_path (if (hash? backward_path) (hash-ref backward_path j #f) (safe-index backward_path (int j))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "path" result) (hash-set! h "ok" #t) h))
))
)
(define (is_edge g u v)
  (let/ec _return (begin
(define neighbors (if g (hash-ref g u (list)) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not neighbors) 0] [(string? neighbors) (string-length neighbors)] [(hash? neighbors) (hash-count neighbors)] [else (length neighbors)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? (if neighbors (if (hash? neighbors) (hash-ref neighbors i #f) (safe-index neighbors (int i))) #f) v) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (path_exists g path)
  (let/ec _return (begin
(if (equal? (cond [(not path) 0] [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)]) 0) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (cond [(not path) 0] [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (is_edge g (if path (if (hash? path) (hash-ref path i #f) (safe-index path (int i))) #f) (if path (if (hash? path) (hash-ref path (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index path (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (print_path g s t)
  (let/ec _return (begin
(define res (bidirectional_search g s t))
(if (and (if res (hash-ref res "ok" #f) #f) (path_exists g (if res (hash-ref res "path" #f) #f))) (let ()
(displayln (string-append (string-append (string-append (string-append (string-append "Path from " (to-string s)) " to ") (to-string t)) ": ") (to-string (if res (hash-ref res "path" #f) #f))))
) (let ()
(displayln (string-append (string-append (string-append (string-append "Path from " (to-string s)) " to ") (to-string t)) ": None"))
))
))
)
(define (main)
  (let/ec _return (begin
(define graph (let ([h (make-hash)]) (hash-set! h 0 (list 1 2)) (hash-set! h 1 (list 0 3 4)) (hash-set! h 2 (list 0 5 6)) (hash-set! h 3 (list 1 7)) (hash-set! h 4 (list 1 8)) (hash-set! h 5 (list 2 9)) (hash-set! h 6 (list 2 10)) (hash-set! h 7 (list 3 11)) (hash-set! h 8 (list 4 11)) (hash-set! h 9 (list 5 11)) (hash-set! h 10 (list 6 11)) (hash-set! h 11 (list 7 8 9 10)) h))
(print_path graph 0 11)
(print_path graph 5 5)
(define disconnected (let ([h (make-hash)]) (hash-set! h 0 (list 1 2)) (hash-set! h 1 (list 0)) (hash-set! h 2 (list 0)) (hash-set! h 3 (list 4)) (hash-set! h 4 (list 3)) h))
(print_path disconnected 0 3)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
