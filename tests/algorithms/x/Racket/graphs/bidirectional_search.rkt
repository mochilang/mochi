;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (expand_search graph queue head parents visited opposite_visited)
  (let/ec _return (begin
(if (>= head (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])) (let ()
(_return (hash "queue" queue "head" head "parents" parents "visited" visited "intersection" (- 0 1) "found" #f))
) (void))
(define current (if queue (if (hash? queue) (hash-ref queue head #f) (list-ref queue (int head))) #f))
(set! head (let ([__l head] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define neighbors (if graph (hash-ref graph current (list)) #f))
(define q queue)
(define p parents)
(define v visited)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? neighbors) (string-length neighbors)] [(hash? neighbors) (hash-count neighbors)] [else (length neighbors)])) (let/ec _cont
    (define neighbor (if neighbors (if (hash? neighbors) (hash-ref neighbors i #f) (list-ref neighbors (int i))) #f))
    (if (if v (hash-ref v neighbor #f) #f) (let ()
(set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (set! v (hash-set (or v (hash)) neighbor #t))
    (set! p (hash-set (or p (hash)) neighbor current))
    (set! q (append q (list neighbor)))
    (if (if opposite_visited (hash-ref opposite_visited neighbor #f) #f) (let ()
(_return (hash "queue" q "head" head "parents" p "visited" v "intersection" neighbor "found" #t))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "queue" q "head" head "parents" p "visited" v "intersection" (- 0 1) "found" #f))
))
)
(define (construct_path current parents)
  (let/ec _return (begin
(define path (list))
(define node current)
(let/ec _break (let loop ()
  (if (not (equal? node (- 0 1))) (let/ec _cont
    (set! path (append path (list node)))
    (set! node (if parents (hash-ref parents node 0) #f))
    (loop)) (void))))
(_return path)
))
)
(define (reverse_list xs)
  (let/ec _return (begin
(define res (list))
(define i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)]))
(let/ec _break (let loop ()
  (if (> i 0) (let/ec _cont
    (set! i (- i 1))
    (set! res (append res (list (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f))))
    (loop)) (void))))
(_return res)
))
)
(define (bidirectional_search g start goal)
  (let/ec _return (begin
(if (equal? start goal) (let ()
(_return (hash "path" (list start) "ok" #t))
) (void))
(define forward_parents (hash))
(set! forward_parents (hash-set (or forward_parents (hash)) start (- 0 1)))
(define backward_parents (hash))
(set! backward_parents (hash-set (or backward_parents (hash)) goal (- 0 1)))
(define forward_visited (hash))
(set! forward_visited (hash-set (or forward_visited (hash)) start #t))
(define backward_visited (hash))
(set! backward_visited (hash-set (or backward_visited (hash)) goal #t))
(define forward_queue (list start))
(define backward_queue (list goal))
(define forward_head 0)
(define backward_head 0)
(define intersection (- 0 1))
(let/ec _break (let loop ()
  (if (and (and (< forward_head (cond [(string? forward_queue) (string-length forward_queue)] [(hash? forward_queue) (hash-count forward_queue)] [else (length forward_queue)])) (< backward_head (cond [(string? backward_queue) (string-length backward_queue)] [(hash? backward_queue) (hash-count backward_queue)] [else (length backward_queue)]))) (equal? intersection (- 0 1))) (let/ec _cont
    (define res (expand_search g forward_queue forward_head forward_parents forward_visited backward_visited))
    (set! forward_queue (if res (hash-ref res "queue" #f) #f))
    (set! forward_head (if res (hash-ref res "head" #f) #f))
    (set! forward_parents (if res (hash-ref res "parents" #f) #f))
    (set! forward_visited (if res (hash-ref res "visited" #f) #f))
    (if (if res (hash-ref res "found" #f) #f) (let ()
(set! intersection (if res (hash-ref res "intersection" #f) #f))
(_break)
) (void))
    (set! res (expand_search g backward_queue backward_head backward_parents backward_visited forward_visited))
    (set! backward_queue (if res (hash-ref res "queue" #f) #f))
    (set! backward_head (if res (hash-ref res "head" #f) #f))
    (set! backward_parents (if res (hash-ref res "parents" #f) #f))
    (set! backward_visited (if res (hash-ref res "visited" #f) #f))
    (if (if res (hash-ref res "found" #f) #f) (let ()
(set! intersection (if res (hash-ref res "intersection" #f) #f))
(_break)
) (void))
    (loop)) (void))))
(if (equal? intersection (- 0 1)) (let ()
(_return (hash "path" (list) "ok" #f))
) (void))
(define forward_path (construct_path intersection forward_parents))
(set! forward_path (reverse_list forward_path))
(define back_start (if backward_parents (hash-ref backward_parents intersection 0) #f))
(define backward_path (construct_path back_start backward_parents))
(define result forward_path)
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? backward_path) (string-length backward_path)] [(hash? backward_path) (hash-count backward_path)] [else (length backward_path)])) (let/ec _cont
    (set! result (append result (list (if backward_path (if (hash? backward_path) (hash-ref backward_path j #f) (list-ref backward_path (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "path" result "ok" #t))
))
)
(define (is_edge g u v)
  (let/ec _return (begin
(define neighbors (if g (hash-ref g u (list)) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? neighbors) (string-length neighbors)] [(hash? neighbors) (hash-count neighbors)] [else (length neighbors)])) (let/ec _cont
    (if (equal? (if neighbors (if (hash? neighbors) (hash-ref neighbors i #f) (list-ref neighbors (int i))) #f) v) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (path_exists g path)
  (let/ec _return (begin
(if (equal? (cond [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)]) 0) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)])) (let/ec _cont
    (if (not (is_edge g (if path (if (hash? path) (hash-ref path i #f) (list-ref path (int i))) #f) (if path (if (hash? path) (hash-ref path (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref path (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))) (let ()
(_return #f)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #t)
))
)
(define (print_path g s t)
  (let/ec _return (begin
(define res (bidirectional_search g s t))
(if (and (if res (hash-ref res "ok" #f) #f) (path_exists g (if res (hash-ref res "path" #f) #f))) (let ()
(displayln (string-append (string-append (string-append (string-append (string-append "Path from " (format "~a" s)) " to ") (format "~a" t)) ": ") (format "~a" (if res (hash-ref res "path" #f) #f))))
) (let ()
(displayln (string-append (string-append (string-append (string-append "Path from " (format "~a" s)) " to ") (format "~a" t)) ": None"))
))
))
)
(define (main)
  (let/ec _return (begin
(define graph (hash 0 (list 1 2) 1 (list 0 3 4) 2 (list 0 5 6) 3 (list 1 7) 4 (list 1 8) 5 (list 2 9) 6 (list 2 10) 7 (list 3 11) 8 (list 4 11) 9 (list 5 11) 10 (list 6 11) 11 (list 7 8 9 10)))
(print_path graph 0 11)
(print_path graph 5 5)
(define disconnected (hash 0 (list 1 2) 1 (list 0) 2 (list 0) 3 (list 4) 4 (list 3)))
(print_path disconnected 0 3)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
