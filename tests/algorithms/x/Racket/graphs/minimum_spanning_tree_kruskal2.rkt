;; Generated by Mochi 0.10.60 on 2025-08-08 10:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (new_graph)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "edges" (list)) (hash-set! h "num_nodes" 0) h))
))
)
(define (add_edge g u v w)
  (let/ec _return (begin
(define es (if g (hash-ref g "edges" #f) #f))
(set! es (append es (list (let ([h (make-hash)]) (hash-set! h "u" u) (hash-set! h "v" v) (hash-set! h "w" w) h))))
(define n (if g (hash-ref g "num_nodes" #f) #f))
(if (> u n) (let ()
(set! n u)
) (void))
(if (> v n) (let ()
(set! n v)
) (void))
(_return (let ([h (make-hash)]) (hash-set! h "edges" es) (hash-set! h "num_nodes" n) h))
))
)
(define (make_ds n)
  (let/ec _return (begin
(define parent (list))
(define rank (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (set! parent (append parent (list i)))
    (set! rank (append rank (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "parent" parent) (hash-set! h "rank" rank) h))
))
)
(define (find_set ds x)
  (let/ec _return (begin
(if (equal? (if (if ds (hash-ref ds "parent" #f) #f) (if (hash? (if ds (hash-ref ds "parent" #f) #f)) (hash-ref (if ds (hash-ref ds "parent" #f) #f) x #f) (list-ref (if ds (hash-ref ds "parent" #f) #f) (int x))) #f) x) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "ds" ds) (hash-set! h "root" x) h))
) (void))
(define res (find_set ds (if (if ds (hash-ref ds "parent" #f) #f) (if (hash? (if ds (hash-ref ds "parent" #f) #f)) (hash-ref (if ds (hash-ref ds "parent" #f) #f) x #f) (list-ref (if ds (hash-ref ds "parent" #f) #f) (int x))) #f)))
(define p (if (if res (hash-ref res "ds" #f) #f) (hash-ref (if res (hash-ref res "ds" #f) #f) "parent" #f) #f))
(set! p (list-set p (int x) (if res (hash-ref res "root" #f) #f)))
(_return (let ([h (make-hash)]) (hash-set! h "ds" (let ([h (make-hash)]) (hash-set! h "parent" p) (hash-set! h "rank" (if (if res (hash-ref res "ds" #f) #f) (hash-ref (if res (hash-ref res "ds" #f) #f) "rank" #f) #f)) h)) (hash-set! h "root" (if res (hash-ref res "root" #f) #f)) h))
))
)
(define (union_set ds x y)
  (let/ec _return (begin
(define fx (find_set ds x))
(define ds1 (if fx (hash-ref fx "ds" #f) #f))
(define x_root (if fx (hash-ref fx "root" #f) #f))
(define fy (find_set ds1 y))
(define ds2 (if fy (hash-ref fy "ds" #f) #f))
(define y_root (if fy (hash-ref fy "root" #f) #f))
(if (equal? x_root y_root) (let ()
(_return ds2)
) (void))
(define p (if ds2 (hash-ref ds2 "parent" #f) #f))
(define r (if ds2 (hash-ref ds2 "rank" #f) #f))
(if (> (if r (if (hash? r) (hash-ref r x_root #f) (list-ref r (int x_root))) #f) (if r (if (hash? r) (hash-ref r y_root #f) (list-ref r (int y_root))) #f)) (let ()
(set! p (list-set p (int y_root) x_root))
) (let ()
(set! p (list-set p (int x_root) y_root))
(if (equal? (if r (if (hash? r) (hash-ref r x_root #f) (list-ref r (int x_root))) #f) (if r (if (hash? r) (hash-ref r y_root #f) (list-ref r (int y_root))) #f)) (let ()
(set! r (list-set r (int y_root) (let ([__l (if r (if (hash? r) (hash-ref r y_root #f) (list-ref r (int y_root))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
))
(_return (let ([h (make-hash)]) (hash-set! h "parent" p) (hash-set! h "rank" r) h))
))
)
(define (sort_edges edges)
  (let/ec _return (begin
(define arr edges)
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (define key (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))
    (define j (- i 1))
    (let/ec _break (let loop ()
  (if (>= j 0) (let/ec _cont
    (define temp (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f))
    (if (or (> (if temp (hash-ref temp "w" #f) #f) (if key (hash-ref key "w" #f) #f)) (and (equal? (if temp (hash-ref temp "w" #f) #f) (if key (hash-ref key "w" #f) #f)) (or (> (if temp (hash-ref temp "u" #f) #f) (if key (hash-ref key "u" #f) #f)) (and (equal? (if temp (hash-ref temp "u" #f) #f) (if key (hash-ref key "u" #f) #f)) (> (if temp (hash-ref temp "v" #f) #f) (if key (hash-ref key "v" #f) #f)))))) (let ()
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) temp))
(set! j (- j 1))
) (let ()
(_break)
))
    (loop)) (void))))
    (set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) key))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (kruskal g)
  (let/ec _return (begin
(define edges (sort_edges (if g (hash-ref g "edges" #f) #f)))
(define ds (make_ds (if g (hash-ref g "num_nodes" #f) #f)))
(define mst_edges (list))
(define i 0)
(define added 0)
(let/ec _break (let loop ()
  (if (and (< added (- (if g (hash-ref g "num_nodes" #f) #f) 1)) (< i (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)]))) (let/ec _cont
    (define e (if edges (if (hash? edges) (hash-ref edges i #f) (list-ref edges (int i))) #f))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define fu (find_set ds (if e (hash-ref e "u" #f) #f)))
    (set! ds (if fu (hash-ref fu "ds" #f) #f))
    (define ru (if fu (hash-ref fu "root" #f) #f))
    (define fv (find_set ds (if e (hash-ref e "v" #f) #f)))
    (set! ds (if fv (hash-ref fv "ds" #f) #f))
    (define rv (if fv (hash-ref fv "root" #f) #f))
    (if (not (equal? ru rv)) (let ()
(set! mst_edges (append mst_edges (list e)))
(set! added (let ([__l added] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! ds (union_set ds ru rv))
) (void))
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "edges" mst_edges) (hash-set! h "num_nodes" (if g (hash-ref g "num_nodes" #f) #f)) h))
))
)
(define (print_mst g)
  (let/ec _return (begin
(define es (sort_edges (if g (hash-ref g "edges" #f) #f)))
(let/ec _break (for ([e es])
  (let/ec _cont
(displayln (string-append (string-append (string-append (string-append (format "~a" (if e (hash-ref e "u" #f) #f)) "-") (format "~a" (if e (hash-ref e "v" #f) #f))) ":") (format "~a" (if e (hash-ref e "w" #f) #f))))
  )))
))
)
(define (main)
  (let/ec _return (begin
(define g (new_graph))
(set! g (add_edge g 1 2 1))
(set! g (add_edge g 2 3 2))
(set! g (add_edge g 3 4 1))
(set! g (add_edge g 3 5 100))
(set! g (add_edge g 4 5 5))
(define mst (kruskal g))
(print_mst mst)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
