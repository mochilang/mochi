;; Generated by Mochi 0.10.65 on 2025-08-14 10:00 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define DIRECTIONS (list (list (- 1) 0) (list 0 (- 1)) (list 1 0) (list 0 1)))
(define (iabs x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (search grid init goal cost heuristic)
  (let/ec _return (begin
(define closed (list))
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define c 0)
      (let/ec _break (let loop ()
  (if (let ([__l c] [__r (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list 0)))
      (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! closed (append (or closed (list)) (list row)))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! closed (list-set closed (if init (if (hash? init) (hash-ref init 0 #f) (safe-index init (int 0))) #f) (list-set (list-ref closed (if init (if (hash? init) (hash-ref init 0 #f) (safe-index init (int 0))) #f)) (if init (if (hash? init) (hash-ref init 1 #f) (safe-index init (int 1))) #f) 1)))
(define action (list))
(set! r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define c 0)
      (let/ec _break (let loop ()
  (if (let ([__l c] [__r (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list 0)))
      (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! action (append (or action (list)) (list row)))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define x (if init (if (hash? init) (hash-ref init 0 #f) (safe-index init (int 0))) #f))
(define y (if init (if (hash? init) (hash-ref init 1 #f) (safe-index init (int 1))) #f))
(define g 0)
(define f (let ([__l g] [__r (if (if heuristic (if (hash? heuristic) (hash-ref heuristic x #f) (safe-index heuristic (int x))) #f) (if (hash? (if heuristic (if (hash? heuristic) (hash-ref heuristic x #f) (safe-index heuristic (int x))) #f)) (hash-ref (if heuristic (if (hash? heuristic) (hash-ref heuristic x #f) (safe-index heuristic (int x))) #f) y #f) (safe-index (if heuristic (if (hash? heuristic) (hash-ref heuristic x #f) (safe-index heuristic (int x))) #f) (int y))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define cell (list (list f g x y)))
(define found #f)
(define resign #f)
(let/ec _break (let loop ()
  (if (and (not found) (not resign)) (begin
    (let/ec _cont
      (if (equal? (cond [(not cell) 0] [(string? cell) (string-length cell)] [(hash? cell) (hash-count cell)] [else (length cell)]) 0) (let ()
(panic "Algorithm is unable to find solution")
) (let ()
(define best_i 0)
(define best_f (if (if cell (if (hash? cell) (hash-ref cell 0 #f) (safe-index cell (int 0))) #f) (if (hash? (if cell (if (hash? cell) (hash-ref cell 0 #f) (safe-index cell (int 0))) #f)) (hash-ref (if cell (if (hash? cell) (hash-ref cell 0 #f) (safe-index cell (int 0))) #f) 0 #f) (safe-index (if cell (if (hash? cell) (hash-ref cell 0 #f) (safe-index cell (int 0))) #f) (int 0))) #f))
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not cell) 0] [(string? cell) (string-length cell)] [(hash? cell) (hash-count cell)] [else (length cell)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if cell (if (hash? cell) (hash-ref cell i #f) (safe-index cell (int i))) #f) (if (hash? (if cell (if (hash? cell) (hash-ref cell i #f) (safe-index cell (int i))) #f)) (hash-ref (if cell (if (hash? cell) (hash-ref cell i #f) (safe-index cell (int i))) #f) 0 #f) (safe-index (if cell (if (hash? cell) (hash-ref cell i #f) (safe-index cell (int i))) #f) (int 0))) #f)] [__r best_f]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! best_f (if (if cell (if (hash? cell) (hash-ref cell i #f) (safe-index cell (int i))) #f) (if (hash? (if cell (if (hash? cell) (hash-ref cell i #f) (safe-index cell (int i))) #f)) (hash-ref (if cell (if (hash? cell) (hash-ref cell i #f) (safe-index cell (int i))) #f) 0 #f) (safe-index (if cell (if (hash? cell) (hash-ref cell i #f) (safe-index cell (int i))) #f) (int 0))) #f))
(set! best_i i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define next_cell (if cell (if (hash? cell) (hash-ref cell best_i #f) (safe-index cell (int best_i))) #f))
(define new_cell (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not cell) 0] [(string? cell) (string-length cell)] [(hash? cell) (hash-count cell)] [else (length cell)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? i best_i)) (let ()
(set! new_cell (append (or new_cell (list)) (list (if cell (if (hash? cell) (hash-ref cell i #f) (safe-index cell (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! cell new_cell)
(set! x (if next_cell (if (hash? next_cell) (hash-ref next_cell 2 #f) (safe-index next_cell (int 2))) #f))
(set! y (if next_cell (if (hash? next_cell) (hash-ref next_cell 3 #f) (safe-index next_cell (int 3))) #f))
(set! g (if next_cell (if (hash? next_cell) (hash-ref next_cell 1 #f) (safe-index next_cell (int 1))) #f))
(if (and (equal? x (if goal (if (hash? goal) (hash-ref goal 0 #f) (safe-index goal (int 0))) #f)) (equal? y (if goal (if (hash? goal) (hash-ref goal 1 #f) (safe-index goal (int 1))) #f))) (let ()
(set! found #t)
) (let ()
(define d 0)
(let/ec _break (let loop ()
  (if (let ([__l d] [__r (cond [(not DIRECTIONS) 0] [(string? DIRECTIONS) (string-length DIRECTIONS)] [(hash? DIRECTIONS) (hash-count DIRECTIONS)] [else (length DIRECTIONS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define x2 (let ([__l x] [__r (if (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS d #f) (safe-index DIRECTIONS (int d))) #f) (if (hash? (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS d #f) (safe-index DIRECTIONS (int d))) #f)) (hash-ref (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS d #f) (safe-index DIRECTIONS (int d))) #f) 0 #f) (safe-index (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS d #f) (safe-index DIRECTIONS (int d))) #f) (int 0))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define y2 (let ([__l y] [__r (if (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS d #f) (safe-index DIRECTIONS (int d))) #f) (if (hash? (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS d #f) (safe-index DIRECTIONS (int d))) #f)) (hash-ref (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS d #f) (safe-index DIRECTIONS (int d))) #f) 1 #f) (safe-index (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS d #f) (safe-index DIRECTIONS (int d))) #f) (int 1))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (if (and (and (and (and (and (let ([__l x2] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l x2] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l y2] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ([__l y2] [__r (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (equal? (if (if closed (if (hash? closed) (hash-ref closed x2 #f) (safe-index closed (int x2))) #f) (if (hash? (if closed (if (hash? closed) (hash-ref closed x2 #f) (safe-index closed (int x2))) #f)) (hash-ref (if closed (if (hash? closed) (hash-ref closed x2 #f) (safe-index closed (int x2))) #f) y2 #f) (safe-index (if closed (if (hash? closed) (hash-ref closed x2 #f) (safe-index closed (int x2))) #f) (int y2))) #f) 0)) (equal? (if (if grid (if (hash? grid) (hash-ref grid x2 #f) (safe-index grid (int x2))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid x2 #f) (safe-index grid (int x2))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid x2 #f) (safe-index grid (int x2))) #f) y2 #f) (safe-index (if grid (if (hash? grid) (hash-ref grid x2 #f) (safe-index grid (int x2))) #f) (int y2))) #f) 0)) (let ()
(define g2 (let ([__l g] [__r cost]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define f2 (let ([__l g2] [__r (if (if heuristic (if (hash? heuristic) (hash-ref heuristic x2 #f) (safe-index heuristic (int x2))) #f) (if (hash? (if heuristic (if (hash? heuristic) (hash-ref heuristic x2 #f) (safe-index heuristic (int x2))) #f)) (hash-ref (if heuristic (if (hash? heuristic) (hash-ref heuristic x2 #f) (safe-index heuristic (int x2))) #f) y2 #f) (safe-index (if heuristic (if (hash? heuristic) (hash-ref heuristic x2 #f) (safe-index heuristic (int x2))) #f) (int y2))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! cell (append (or cell (list)) (list (list f2 g2 x2 y2))))
(set! closed (list-set closed x2 (list-set (list-ref closed x2) y2 1)))
(set! action (list-set action x2 (list-set (list-ref action x2) y2 d)))
) (void))
      (set! d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
))
    )
    (loop)) (void))))
(define invpath (list))
(set! x (if goal (if (hash? goal) (hash-ref goal 0 #f) (safe-index goal (int 0))) #f))
(set! y (if goal (if (hash? goal) (hash-ref goal 1 #f) (safe-index goal (int 1))) #f))
(set! invpath (append (or invpath (list)) (list (list x y))))
(let/ec _break (let loop ()
  (if (or (not (equal? x (if init (if (hash? init) (hash-ref init 0 #f) (safe-index init (int 0))) #f))) (not (equal? y (if init (if (hash? init) (hash-ref init 1 #f) (safe-index init (int 1))) #f)))) (begin
    (let/ec _cont
      (define dir (if (if action (if (hash? action) (hash-ref action x #f) (safe-index action (int x))) #f) (if (hash? (if action (if (hash? action) (hash-ref action x #f) (safe-index action (int x))) #f)) (hash-ref (if action (if (hash? action) (hash-ref action x #f) (safe-index action (int x))) #f) y #f) (safe-index (if action (if (hash? action) (hash-ref action x #f) (safe-index action (int x))) #f) (int y))) #f))
      (define x2 (- x (if (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS dir #f) (safe-index DIRECTIONS (int dir))) #f) (if (hash? (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS dir #f) (safe-index DIRECTIONS (int dir))) #f)) (hash-ref (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS dir #f) (safe-index DIRECTIONS (int dir))) #f) 0 #f) (safe-index (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS dir #f) (safe-index DIRECTIONS (int dir))) #f) (int 0))) #f)))
      (define y2 (- y (if (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS dir #f) (safe-index DIRECTIONS (int dir))) #f) (if (hash? (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS dir #f) (safe-index DIRECTIONS (int dir))) #f)) (hash-ref (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS dir #f) (safe-index DIRECTIONS (int dir))) #f) 1 #f) (safe-index (if DIRECTIONS (if (hash? DIRECTIONS) (hash-ref DIRECTIONS dir #f) (safe-index DIRECTIONS (int dir))) #f) (int 1))) #f)))
      (set! x x2)
      (set! y y2)
      (set! invpath (append (or invpath (list)) (list (list x y))))
    )
    (loop)) (void))))
(define path (list))
(define idx (- (cond [(not invpath) 0] [(string? invpath) (string-length invpath)] [(hash? invpath) (hash-count invpath)] [else (length invpath)]) 1))
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! path (append (or path (list)) (list (if invpath (if (hash? invpath) (hash-ref invpath idx #f) (safe-index invpath (int idx))) #f))))
      (set! idx (- idx 1))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "path" path) (hash-set! h "action" action) h))
))
)
(define (main)
  (let/ec _return (begin
(define grid (list (list 0 1 0 0 0 0) (list 0 1 0 0 0 0) (list 0 1 0 0 0 0) (list 0 1 0 0 1 0) (list 0 0 0 0 1 0)))
(define init (list 0 0))
(define goal (list (- (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]) 1) (- (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))]) 1)))
(define cost 1)
(define heuristic (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define h (let ([__l (iabs (- i (if goal (if (hash? goal) (hash-ref goal 0 #f) (safe-index goal (int 0))) #f)))] [__r (iabs (- j (if goal (if (hash? goal) (hash-ref goal 1 #f) (safe-index goal (int 1))) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (if (equal? (if (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) j #f) (safe-index (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (int j))) #f) 1) (let ()
(set! row (append (or row (list)) (list 99)))
) (let ()
(set! row (append (or row (list)) (list h)))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! heuristic (append (or heuristic (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define result (search grid init goal cost heuristic))
(displayln "ACTION MAP")
(define rr 0)
(let/ec _break (let loop ()
  (if (let ([__l rr] [__r (cond [(not (if result (hash-ref result "action" #f) #f)) 0] [(string? (if result (hash-ref result "action" #f) #f)) (string-length (if result (hash-ref result "action" #f) #f))] [(hash? (if result (hash-ref result "action" #f) #f)) (hash-count (if result (hash-ref result "action" #f) #f))] [else (length (if result (hash-ref result "action" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (displayln (if (if result (hash-ref result "action" #f) #f) (if (hash? (if result (hash-ref result "action" #f) #f)) (hash-ref (if result (hash-ref result "action" #f) #f) rr #f) (safe-index (if result (hash-ref result "action" #f) #f) (int rr))) #f))
      (set! rr (let ([__l rr] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define p 0)
(let/ec _break (let loop ()
  (if (let ([__l p] [__r (cond [(not (if result (hash-ref result "path" #f) #f)) 0] [(string? (if result (hash-ref result "path" #f) #f)) (string-length (if result (hash-ref result "path" #f) #f))] [(hash? (if result (hash-ref result "path" #f) #f)) (hash-count (if result (hash-ref result "path" #f) #f))] [else (length (if result (hash-ref result "path" #f) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (displayln (if (if result (hash-ref result "path" #f) #f) (if (hash? (if result (hash-ref result "path" #f) #f)) (hash-ref (if result (hash-ref result "path" #f) #f) p #f) (safe-index (if result (hash-ref result "path" #f) #f) (int p))) #f))
      (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
