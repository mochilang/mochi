;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (add_edge g from_vertex to_vertex)
  (let/ec _return (begin
(define v (if g (hash-ref g "vertex" #f) #f))
(if (hash-has-key? v from_vertex) (let ()
(define lst (if v (hash-ref v from_vertex (list)) #f))
(set! lst (append lst (list to_vertex)))
(set! v (hash-set (or v (hash)) from_vertex lst))
) (let ()
(set! v (hash-set (or v (hash)) from_vertex (list to_vertex)))
))
(set! g (hash-set (or g (hash)) "vertex" v))
(if (> (let ([__l from_vertex] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (if g (hash-ref g "size" #f) #f)) (let ()
(set! g (hash-set (or g (hash)) "size" (let ([__l from_vertex] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(if (> (let ([__l to_vertex] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (if g (hash-ref g "size" #f) #f)) (let ()
(set! g (hash-set (or g (hash)) "size" (let ([__l to_vertex] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(_return g)
))
)
(define (list_to_string lst)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (set! res (string-append res (format "~a" (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f))))
    (if (< i (- (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)]) 1)) (let ()
(set! res (string-append res " "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (list_to_arrow lst)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (set! res (string-append res (format "~a" (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f))))
    (if (< i (- (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)]) 1)) (let ()
(set! res (string-append res " -> "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (print_graph g)
  (let/ec _return (begin
(displayln (format "~a" (if g (hash-ref g "vertex" #f) #f)))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if g (hash-ref g "size" #f) #f)) (let/ec _cont
    (define edges (list))
    (if (hash-has-key? (if g (hash-ref g "vertex" #f) #f) i) (let ()
(set! edges (if (if g (hash-ref g "vertex" #f) #f) (if (hash? (if g (hash-ref g "vertex" #f) #f)) (hash-ref (if g (hash-ref g "vertex" #f) #f) i #f) (list-ref (if g (hash-ref g "vertex" #f) #f) (int i))) #f))
) (void))
    (define line (string-append (string-append (format "~a" i) "  ->  ") (list_to_arrow edges)))
    (displayln line)
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (dfs_recursive g start_vertex visited order)
  (let/ec _return (begin
(set! visited (list-set visited (int start_vertex) #t))
(set! order (append order (list start_vertex)))
(if (hash-has-key? (if g (hash-ref g "vertex" #f) #f) start_vertex) (let ()
(define neighbors (if (if g (hash-ref g "vertex" #f) #f) (if (hash? (if g (hash-ref g "vertex" #f) #f)) (hash-ref (if g (hash-ref g "vertex" #f) #f) start_vertex #f) (list-ref (if g (hash-ref g "vertex" #f) #f) (int start_vertex))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? neighbors) (string-length neighbors)] [(hash? neighbors) (hash-count neighbors)] [else (length neighbors)])) (let/ec _cont
    (define nb (if neighbors (if (hash? neighbors) (hash-ref neighbors i #f) (list-ref neighbors (int i))) #f))
    (if (not (if visited (if (hash? visited) (hash-ref visited nb #f) (list-ref visited (int nb))) #f)) (let ()
(set! order (dfs_recursive g nb visited order))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
(_return order)
))
)
(define (dfs g)
  (let/ec _return (begin
(define n (if g (hash-ref g "size" #f) #f))
(define visited (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! visited (append visited (list #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define order (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (if (not (if visited (if (hash? visited) (hash-ref visited i #f) (list-ref visited (int i))) #f)) (let ()
(set! order (dfs_recursive g i visited order))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return order)
))
)
(define g (hash "vertex" (hash) "size" 0))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(set! g (add_edge g 0 1))
(set! g (add_edge g 0 2))
(set! g (add_edge g 1 2))
(set! g (add_edge g 2 0))
(set! g (add_edge g 2 3))
(set! g (add_edge g 3 3))
(print_graph g)
(displayln "DFS:")
(displayln (list_to_string (dfs g)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
