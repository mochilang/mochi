;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (dfs g s)
  (let/ec _return (begin
(define visited (hash))
(define stack (list))
(set! visited (hash-set (or visited (hash)) s #t))
(set! stack (append stack (list s)))
(displayln s)
(let/ec _break (let loop ()
  (if (> (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 0) (let/ec _cont
    (define u (if stack (if (hash? stack) (hash-ref stack (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1) #f) (list-ref stack (int (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))) #f))
    (define found #f)
    (let/ec _break (for ([v (if g (hash-ref g u (list)) #f)])
  (let/ec _cont
(if (not (hash-has-key? visited v)) (let ()
(set! visited (hash-set (or visited (hash)) v #t))
(set! stack (append stack (list v)))
(displayln v)
(set! found #t)
(_break)
) (void))
  )))
    (if (not found) (let ()
(set! stack (slice stack 0 (- (cond [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
) (void))
    (loop)) (void))))
))
)
(define (bfs g s)
  (let/ec _return (begin
(define visited (hash))
(define q (list))
(set! visited (hash-set (or visited (hash)) s #t))
(set! q (append q (list s)))
(displayln s)
(let/ec _break (let loop ()
  (if (> (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)]) 0) (let/ec _cont
    (define u (if q (if (hash? q) (hash-ref q 0 #f) (list-ref q (int 0))) #f))
    (set! q (slice q 1 (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])))
    (let/ec _break (for ([v (if g (hash-ref g u (list)) #f)])
  (let/ec _cont
(if (not (hash-has-key? visited v)) (let ()
(set! visited (hash-set (or visited (hash)) v #t))
(set! q (append q (list v)))
(displayln v)
) (void))
  )))
    (loop)) (void))))
))
)
(define (sort_ints a)
  (let/ec _return (begin
(define arr a)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- (- (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) i) 1)) (let/ec _cont
    (if (> (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f) (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (let ()
(define tmp (if arr (if (hash? arr) (hash-ref arr j #f) (list-ref arr (int j))) #f))
(set! arr (list-set arr (int j) (if arr (if (hash? arr) (hash-ref arr (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return arr)
))
)
(define (dijkstra g s)
  (let/ec _return (begin
(define dist (hash))
(set! dist (hash-set (or dist (hash)) s 0))
(define path (hash))
(set! path (hash-set (or path (hash)) s 0))
(define known (list))
(define keys (list s))
(let/ec _break (let loop ()
  (if (< (cond [(string? known) (string-length known)] [(hash? known) (hash-count known)] [else (length known)]) (cond [(string? keys) (string-length keys)] [(hash? keys) (hash-count keys)] [else (length keys)])) (let/ec _cont
    (define mini 100000)
    (define u (- 1))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? keys) (string-length keys)] [(hash? keys) (hash-count keys)] [else (length keys)])) (let/ec _cont
    (define k (if keys (if (hash? keys) (hash-ref keys i #f) (list-ref keys (int i))) #f))
    (define d (if dist (hash-ref dist k 0) #f))
    (if (and (not (not (not (member k known)))) (< d mini)) (let ()
(set! mini d)
(set! u k)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! known (append known (list u)))
    (let/ec _break (for ([e (if g (hash-ref g u (list)) #f)])
  (let/ec _cont
(define v (if e (if (hash? e) (hash-ref e 0 #f) (list-ref e (int 0))) #f))
(define w (if e (if (hash? e) (hash-ref e 1 #f) (list-ref e (int 1))) #f))
(if (not (not (not (member v keys)))) (let ()
(set! keys (append keys (list v)))
) (void))
(define alt (let ([__l (if dist (hash-ref dist u 0) #f)] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define cur (if (hash-has-key? dist v) (if dist (hash-ref dist v 0) #f) 100000))
(if (and (not (not (not (member v known)))) (< alt cur)) (let ()
(set! dist (hash-set (or dist (hash)) v alt))
(set! path (hash-set (or path (hash)) v u))
) (void))
  )))
    (loop)) (void))))
(define ordered (sort_ints keys))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? ordered) (string-length ordered)] [(hash? ordered) (hash-count ordered)] [else (length ordered)])) (let/ec _cont
    (define k (if ordered (if (hash? ordered) (hash-ref ordered idx #f) (list-ref ordered (int idx))) #f))
    (if (not (equal? k s)) (let ()
(displayln (if dist (hash-ref dist k 0) #f))
) (void))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (topo g n)
  (let/ec _return (begin
(define ind (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (set! ind (append ind (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define node 1)
(let/ec _break (let loop ()
  (if (<= node n) (let/ec _cont
    (let/ec _break (for ([v (if g (hash-ref g node (list)) #f)])
  (let/ec _cont
(set! ind (list-set ind (int v) (let ([__l (if ind (if (hash? ind) (hash-ref ind v #f) (list-ref ind (int v))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
  )))
    (set! node (let ([__l node] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define q (list))
(define j 1)
(let/ec _break (let loop ()
  (if (<= j n) (let/ec _cont
    (if (equal? (if ind (if (hash? ind) (hash-ref ind j #f) (list-ref ind (int j))) #f) 0) (let ()
(set! q (append q (list j)))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (> (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)]) 0) (let/ec _cont
    (define v (if q (if (hash? q) (hash-ref q 0 #f) (list-ref q (int 0))) #f))
    (set! q (slice q 1 (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])))
    (displayln v)
    (let/ec _break (for ([w (if g (hash-ref g v (list)) #f)])
  (let/ec _cont
(set! ind (list-set ind (int w) (- (if ind (if (hash? ind) (hash-ref ind w #f) (list-ref ind (int w))) #f) 1)))
(if (equal? (if ind (if (hash? ind) (hash-ref ind w #f) (list-ref ind (int w))) #f) 0) (let ()
(set! q (append q (list w)))
) (void))
  )))
    (loop)) (void))))
))
)
(define (floyd a)
  (let/ec _return (begin
(define n (cond [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define dist (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! row (append row (list (if (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) j #f) (list-ref (if a (if (hash? a) (hash-ref a i #f) (list-ref a (int i))) #f) (int j))) #f))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! dist (append dist (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define k 0)
(let/ec _break (let loop ()
  (if (< k n) (let/ec _cont
    (define ii 0)
    (let/ec _break (let loop ()
  (if (< ii n) (let/ec _cont
    (define jj 0)
    (let/ec _break (let loop ()
  (if (< jj n) (let/ec _cont
    (if (> (if (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f) (if (hash? (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f)) (hash-ref (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f) jj #f) (list-ref (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f) (int jj))) #f) (let ([__l (if (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f) (if (hash? (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f)) (hash-ref (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f) k #f) (list-ref (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f) (int k))) #f)] [__r (if (if dist (if (hash? dist) (hash-ref dist k #f) (list-ref dist (int k))) #f) (if (hash? (if dist (if (hash? dist) (hash-ref dist k #f) (list-ref dist (int k))) #f)) (hash-ref (if dist (if (hash? dist) (hash-ref dist k #f) (list-ref dist (int k))) #f) jj #f) (list-ref (if dist (if (hash? dist) (hash-ref dist k #f) (list-ref dist (int k))) #f) (int jj))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(set! dist (list-set dist ii (list-set (list-ref dist ii) jj (let ([__l (if (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f) (if (hash? (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f)) (hash-ref (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f) k #f) (list-ref (if dist (if (hash? dist) (hash-ref dist ii #f) (list-ref dist (int ii))) #f) (int k))) #f)] [__r (if (if dist (if (hash? dist) (hash-ref dist k #f) (list-ref dist (int k))) #f) (if (hash? (if dist (if (hash? dist) (hash-ref dist k #f) (list-ref dist (int k))) #f)) (hash-ref (if dist (if (hash? dist) (hash-ref dist k #f) (list-ref dist (int k))) #f) jj #f) (list-ref (if dist (if (hash? dist) (hash-ref dist k #f) (list-ref dist (int k))) #f) (int jj))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (void))
    (set! jj (let ([__l jj] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! ii (let ([__l ii] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln dist)
))
)
(define (prim g s n)
  (let/ec _return (begin
(define dist (hash))
(set! dist (hash-set (or dist (hash)) s 0))
(define known (list))
(define keys (list s))
(define total 0)
(let/ec _break (let loop ()
  (if (< (cond [(string? known) (string-length known)] [(hash? known) (hash-count known)] [else (length known)]) n) (let/ec _cont
    (define mini 100000)
    (define u (- 1))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? keys) (string-length keys)] [(hash? keys) (hash-count keys)] [else (length keys)])) (let/ec _cont
    (define k (if keys (if (hash? keys) (hash-ref keys i #f) (list-ref keys (int i))) #f))
    (define d (if dist (hash-ref dist k 0) #f))
    (if (and (not (not (not (member k known)))) (< d mini)) (let ()
(set! mini d)
(set! u k)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! known (append known (list u)))
    (set! total (let ([__l total] [__r mini]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (for ([e (if g (hash-ref g u (list)) #f)])
  (let/ec _cont
(define v (if e (if (hash? e) (hash-ref e 0 #f) (list-ref e (int 0))) #f))
(define w (if e (if (hash? e) (hash-ref e 1 #f) (list-ref e (int 1))) #f))
(if (not (not (not (member v keys)))) (let ()
(set! keys (append keys (list v)))
) (void))
(define cur (if (hash-has-key? dist v) (if dist (hash-ref dist v 0) #f) 100000))
(if (and (not (not (not (member v known)))) (< w cur)) (let ()
(set! dist (hash-set (or dist (hash)) v w))
) (void))
  )))
    (loop)) (void))))
(_return total)
))
)
(define (sort_edges edges)
  (let/ec _return (begin
(define es edges)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- (- (cond [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)]) i) 1)) (let/ec _cont
    (if (> (if (if es (if (hash? es) (hash-ref es j #f) (list-ref es (int j))) #f) (if (hash? (if es (if (hash? es) (hash-ref es j #f) (list-ref es (int j))) #f)) (hash-ref (if es (if (hash? es) (hash-ref es j #f) (list-ref es (int j))) #f) 2 #f) (list-ref (if es (if (hash? es) (hash-ref es j #f) (list-ref es (int j))) #f) (int 2))) #f) (if (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) 2 #f) (list-ref (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int 2))) #f)) (let ()
(define tmp (if es (if (hash? es) (hash-ref es j #f) (list-ref es (int j))) #f))
(set! es (list-set es (int j) (if es (if (hash? es) (hash-ref es (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! es (list-set es (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) tmp))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return es)
))
)
(define (find_parent parent x)
  (let/ec _return (begin
(define r x)
(let/ec _break (let loop ()
  (if (not (equal? (if parent (if (hash? parent) (hash-ref parent r #f) (list-ref parent (int r))) #f) r)) (let/ec _cont
    (set! r (if parent (if (hash? parent) (hash-ref parent r #f) (list-ref parent (int r))) #f))
    (loop)) (void))))
(_return r)
))
)
(define (union_parent parent a b)
  (let/ec _return (begin
(set! parent (list-set parent (int a) b))
))
)
(define (kruskal edges n)
  (let/ec _return (begin
(define es (sort_edges edges))
(define parent (list))
(define i 0)
(let/ec _break (let loop ()
  (if (<= i n) (let/ec _cont
    (set! parent (append parent (list i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define total 0)
(define count 0)
(define idx 0)
(let/ec _break (let loop ()
  (if (and (< count (- n 1)) (< idx (cond [(string? es) (string-length es)] [(hash? es) (hash-count es)] [else (length es)]))) (let/ec _cont
    (define e (if es (if (hash? es) (hash-ref es idx #f) (list-ref es (int idx))) #f))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define u (if e (if (hash? e) (hash-ref e 0 #f) (list-ref e (int 0))) #f))
    (define v (if e (if (hash? e) (hash-ref e 1 #f) (list-ref e (int 1))) #f))
    (define w (if e (if (hash? e) (hash-ref e 2 #f) (list-ref e (int 2))) #f))
    (define ru (find_parent parent u))
    (define rv (find_parent parent v))
    (if (not (equal? ru rv)) (let ()
(union_parent parent ru rv)
(set! total (let ([__l total] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (loop)) (void))))
(_return total)
))
)
(define (find_isolated_nodes g nodes)
  (let/ec _return (begin
(define isolated (list))
(let/ec _break (for ([node nodes])
  (let/ec _cont
(if (equal? (cond [(string? (if g (hash-ref g node (list)) #f)) (string-length (if g (hash-ref g node (list)) #f))] [(hash? (if g (hash-ref g node (list)) #f)) (hash-count (if g (hash-ref g node (list)) #f))] [else (length (if g (hash-ref g node (list)) #f))]) 0) (let ()
(set! isolated (append isolated (list node)))
) (void))
  )))
(_return isolated)
))
)
(define g_dfs (hash 1 (list 2 3) 2 (list 4 5) 3 (list) 4 (list) 5 (list)))
(define g_bfs (hash 1 (list 2 3) 2 (list 4 5) 3 (list 6 7) 4 (list) 5 (list 8) 6 (list) 7 (list) 8 (list)))
(define g_weighted (hash 1 (list (list 2 7) (list 3 9) (list 6 14)) 2 (list (list 1 7) (list 3 10) (list 4 15)) 3 (list (list 1 9) (list 2 10) (list 4 11) (list 6 2)) 4 (list (list 2 15) (list 3 11) (list 5 6)) 5 (list (list 4 6) (list 6 9)) 6 (list (list 1 14) (list 3 2) (list 5 9))))
(define g_topo (hash 1 (list 2 3) 2 (list 4) 3 (list 4) 4 (list)))
(define matrix (list (list 0 5 9 100000) (list 100000 0 2 8) (list 100000 100000 0 7) (list 4 100000 100000 0)))
(define g_prim (hash 1 (list (list 2 1) (list 3 3)) 2 (list (list 1 1) (list 3 1) (list 4 6)) 3 (list (list 1 3) (list 2 1) (list 4 2)) 4 (list (list 2 6) (list 3 2))))
(define edges_kruskal (list (list 1 2 1) (list 2 3 2) (list 1 3 2) (list 3 4 1)))
(define g_iso (hash 1 (list 2 3) 2 (list 1 3) 3 (list 1 2) 4 (list)))
(define iso (find_isolated_nodes g_iso (list 1 2 3 4)))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(dfs g_dfs 1)
(bfs g_bfs 1)
(dijkstra g_weighted 1)
(topo g_topo 4)
(floyd matrix)
(displayln (prim g_prim 1 4))
(displayln (kruskal edges_kruskal 4))
(displayln iso)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
