;; Generated by Mochi 0.10.65 on 2025-08-14 15:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define INF 1000000000)
(define (pow2 k)
  (let/ec _return (begin
(define res 1)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r k]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (* res 2))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (min2 a b)
  (let/ec _return (begin
(if (let ([__l a] [__r b]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return a)
) (void))
(_return b)
))
)
(define (new_dinic n)
  (let/ec _return (begin
(define lvl (list))
(define ptr (list))
(define q (list))
(define adj (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! lvl (append (or lvl (list)) (list 0)))
      (set! ptr (append (or ptr (list)) (list 0)))
      (set! q (append (or q (list)) (list 0)))
      (define edges (list))
      (set! adj (append (or adj (list)) (list edges)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "n" n) (hash-set! h "lvl" lvl) (hash-set! h "ptr" ptr) (hash-set! h "q" q) (hash-set! h "adj" adj) h))
))
)
(define (add_edge g a b c rcap)
  (let/ec _return (begin
(define adj (if g (hash-ref g "adj" #f) #f))
(define list_a (if adj (if (hash? adj) (hash-ref adj a #f) (safe-index adj (int a))) #f))
(define list_b (if adj (if (hash? adj) (hash-ref adj b #f) (safe-index adj (int b))) #f))
(define e1 (list b (cond [(not list_b) 0] [(string? list_b) (string-length list_b)] [(hash? list_b) (hash-count list_b)] [else (length list_b)]) c 0))
(define e2 (list a (cond [(not list_a) 0] [(string? list_a) (string-length list_a)] [(hash? list_a) (hash-count list_a)] [else (length list_a)]) rcap 0))
(set! list_a (append (or list_a (list)) (list e1)))
(set! list_b (append (or list_b (list)) (list e2)))
(set! adj (list-set adj (int a) list_a))
(set! adj (list-set adj (int b) list_b))
(if (hash? g) (hash-set! g "adj" adj) (begin (set! g (make-hash)) (hash-set! g "adj" adj)))
))
)
(define (dfs g v sink flow)
  (let/ec _return (begin
(if (or (equal? v sink) (equal? flow 0)) (let ()
(_return flow)
) (void))
(define ptr (if g (hash-ref g "ptr" #f) #f))
(define i (if ptr (if (hash? ptr) (hash-ref ptr v #f) (safe-index ptr (int v))) #f))
(define adj_all (if g (hash-ref g "adj" #f) #f))
(define adj_v (if adj_all (if (hash? adj_all) (hash-ref adj_all v #f) (safe-index adj_all (int v))) #f))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not adj_v) 0] [(string? adj_v) (string-length adj_v)] [(hash? adj_v) (hash-count adj_v)] [else (length adj_v)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define e (if adj_v (if (hash? adj_v) (hash-ref adj_v i #f) (safe-index adj_v (int i))) #f))
      (define to (if e (if (hash? e) (hash-ref e 0 #f) (safe-index e (int 0))) #f))
      (if (equal? (if (if g (hash-ref g "lvl" #f) #f) (if (hash? (if g (hash-ref g "lvl" #f) #f)) (hash-ref (if g (hash-ref g "lvl" #f) #f) to #f) (safe-index (if g (hash-ref g "lvl" #f) #f) (int to))) #f) (let ([__l (if (if g (hash-ref g "lvl" #f) #f) (if (hash? (if g (hash-ref g "lvl" #f) #f)) (hash-ref (if g (hash-ref g "lvl" #f) #f) v #f) (safe-index (if g (hash-ref g "lvl" #f) #f) (int v))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(define avail (- (if e (if (hash? e) (hash-ref e 2 #f) (safe-index e (int 2))) #f) (if e (if (hash? e) (hash-ref e 3 #f) (safe-index e (int 3))) #f)))
(define pushed (dfs g to sink (min2 flow avail)))
(if (let ([__l pushed] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! e (list-set e (int 3) (let ([__l (if e (if (hash? e) (hash-ref e 3 #f) (safe-index e (int 3))) #f)] [__r pushed]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! adj_v (list-set adj_v (int i) e))
(define adj_to (if adj_all (if (hash? adj_all) (hash-ref adj_all to #f) (safe-index adj_all (int to))) #f))
(define back (if adj_to (if (hash? adj_to) (hash-ref adj_to (if e (if (hash? e) (hash-ref e 1 #f) (safe-index e (int 1))) #f) #f) (safe-index adj_to (int (if e (if (hash? e) (hash-ref e 1 #f) (safe-index e (int 1))) #f)))) #f))
(set! back (list-set back (int 3) (- (if back (if (hash? back) (hash-ref back 3 #f) (safe-index back (int 3))) #f) pushed)))
(set! adj_to (list-set adj_to (int (if e (if (hash? e) (hash-ref e 1 #f) (safe-index e (int 1))) #f)) back))
(set! adj_all (list-set adj_all (int to) adj_to))
(set! adj_all (list-set adj_all (int v) adj_v))
(if (hash? g) (hash-set! g "adj" adj_all) (begin (set! g (make-hash)) (hash-set! g "adj" adj_all)))
(_return pushed)
) (void))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! ptr (list-set ptr (int v) i))
    )
    (loop)) (void))))
(if (hash? g) (hash-set! g "ptr" ptr) (begin (set! g (make-hash)) (hash-set! g "ptr" ptr)))
(set! adj_all (list-set adj_all (int v) adj_v))
(if (hash? g) (hash-set! g "adj" adj_all) (begin (set! g (make-hash)) (hash-set! g "adj" adj_all)))
(_return 0)
))
)
(define (max_flow g source sink)
  (let/ec _return (begin
(define flow 0)
(define l 0)
(let/ec _break (let loop ()
  (if (let ([__l l] [__r 31]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define threshold (pow2 (- 30 l)))
      (let/ec _break (let loop ()
  (if #t (begin
    (let/ec _cont
      (define lvl (list))
      (define ptr (list))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (if g (hash-ref g "n" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! lvl (append (or lvl (list)) (list 0)))
      (set! ptr (append (or ptr (list)) (list 0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (hash? g) (hash-set! g "lvl" lvl) (begin (set! g (make-hash)) (hash-set! g "lvl" lvl)))
      (if (hash? g) (hash-set! g "ptr" ptr) (begin (set! g (make-hash)) (hash-set! g "ptr" ptr)))
      (define qi 0)
      (define qe 1)
      (set! lvl (list-set lvl (int source) 1))
      (if (hash? g) (hash-set! g "lvl" lvl) (begin (set! g (make-hash)) (hash-set! g "lvl" lvl)))
      (define q (if g (hash-ref g "q" #f) #f))
      (set! q (list-set q (int 0) source))
      (let/ec _break (let loop ()
  (if (and (let ([__l qi] [__r qe]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (equal? (if (if g (hash-ref g "lvl" #f) #f) (if (hash? (if g (hash-ref g "lvl" #f) #f)) (hash-ref (if g (hash-ref g "lvl" #f) #f) sink #f) (safe-index (if g (hash-ref g "lvl" #f) #f) (int sink))) #f) 0)) (begin
    (let/ec _cont
      (define v (if q (if (hash? q) (hash-ref q qi #f) (safe-index q (int qi))) #f))
      (set! qi (let ([__l qi] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define edges (if (if g (hash-ref g "adj" #f) #f) (if (hash? (if g (hash-ref g "adj" #f) #f)) (hash-ref (if g (hash-ref g "adj" #f) #f) v #f) (safe-index (if g (hash-ref g "adj" #f) #f) (int v))) #f))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define e (if edges (if (hash? edges) (hash-ref edges j #f) (safe-index edges (int j))) #f))
      (define to (if e (if (hash? e) (hash-ref e 0 #f) (safe-index e (int 0))) #f))
      (define residual (- (if e (if (hash? e) (hash-ref e 2 #f) (safe-index e (int 2))) #f) (if e (if (hash? e) (hash-ref e 3 #f) (safe-index e (int 3))) #f)))
      (define lvl_inner (if g (hash-ref g "lvl" #f) #f))
      (if (and (equal? (if lvl_inner (if (hash? lvl_inner) (hash-ref lvl_inner to #f) (safe-index lvl_inner (int to))) #f) 0) (let ([__l residual] [__r threshold]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ()
(set! q (list-set q (int qe) to))
(set! qe (let ([__l qe] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! lvl_inner (list-set lvl_inner (int to) (let ([__l (if lvl_inner (if (hash? lvl_inner) (hash-ref lvl_inner v #f) (safe-index lvl_inner (int v))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(if (hash? g) (hash-set! g "lvl" lvl_inner) (begin (set! g (make-hash)) (hash-set! g "lvl" lvl_inner)))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    )
    (loop)) (void))))
      (define p (dfs g source sink INF))
      (let/ec _break (let loop ()
  (if (let ([__l p] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! flow (let ([__l flow] [__r p]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! p (dfs g source sink INF))
    )
    (loop)) (void))))
      (if (equal? (if (if g (hash-ref g "lvl" #f) #f) (if (hash? (if g (hash-ref g "lvl" #f) #f)) (hash-ref (if g (hash-ref g "lvl" #f) #f) sink #f) (safe-index (if g (hash-ref g "lvl" #f) #f) (int sink))) #f) 0) (let ()
(_break)
) (void))
    )
    (loop)) (void))))
      (set! l (let ([__l l] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return flow)
))
)
(define graph (new_dinic 10))
(define source 0)
(define sink 9)
(define v 1)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (let ([__l v] [__r 5]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (add_edge graph source v 1 0)
      (set! v (let ([__l v] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! v 5)
(let/ec _break (let loop ()
  (if (let ([__l v] [__r 9]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (add_edge graph v sink 1 0)
      (set! v (let ([__l v] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! v 1)
(let/ec _break (let loop ()
  (if (let ([__l v] [__r 5]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (add_edge graph v (let ([__l v] [__r 4]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 1 0)
      (set! v (let ([__l v] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln (to-string (max_flow graph source sink)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
