;; Generated by Mochi 0.10.65 on 2025-08-14 16:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define G (let ([h (make-hash)]) (hash-set! h "A" (let ([h (make-hash)]) (hash-set! h "B" 2) (hash-set! h "C" 5) h)) (hash-set! h "B" (let ([h (make-hash)]) (hash-set! h "A" 2) (hash-set! h "D" 3) (hash-set! h "E" 1) (hash-set! h "F" 1) h)) (hash-set! h "C" (let ([h (make-hash)]) (hash-set! h "A" 5) (hash-set! h "F" 3) h)) (hash-set! h "D" (let ([h (make-hash)]) (hash-set! h "B" 3) h)) (hash-set! h "E" (let ([h (make-hash)]) (hash-set! h "B" 4) (hash-set! h "F" 3) h)) (hash-set! h "F" (let ([h (make-hash)]) (hash-set! h "C" 3) (hash-set! h "E" 3) h)) h))
(define heap (list (let ([h (make-hash)]) (hash-set! h "node" "E") (hash-set! h "cost" 0) h)))
(define visited (let ([h (make-hash)]) h))
(define result (- 1))
(define G2 (let ([h (make-hash)]) (hash-set! h "B" (let ([h (make-hash)]) (hash-set! h "C" 1) h)) (hash-set! h "C" (let ([h (make-hash)]) (hash-set! h "D" 1) h)) (hash-set! h "D" (let ([h (make-hash)]) (hash-set! h "F" 1) h)) (hash-set! h "E" (let ([h (make-hash)]) (hash-set! h "B" 1) (hash-set! h "F" 3) h)) (hash-set! h "F" (let ([h (make-hash)]) h)) h))
(define heap2 (list (let ([h (make-hash)]) (hash-set! h "node" "E") (hash-set! h "cost" 0) h)))
(define visited2 (let ([h (make-hash)]) h))
(define result2 (- 1))
(define G3 (let ([h (make-hash)]) (hash-set! h "B" (let ([h (make-hash)]) (hash-set! h "C" 1) h)) (hash-set! h "C" (let ([h (make-hash)]) (hash-set! h "D" 1) h)) (hash-set! h "D" (let ([h (make-hash)]) (hash-set! h "F" 1) h)) (hash-set! h "E" (let ([h (make-hash)]) (hash-set! h "B" 1) (hash-set! h "G" 2) h)) (hash-set! h "F" (let ([h (make-hash)]) h)) (hash-set! h "G" (let ([h (make-hash)]) (hash-set! h "F" 1) h)) h))
(define heap3 (list (let ([h (make-hash)]) (hash-set! h "node" "E") (hash-set! h "cost" 0) h)))
(define visited3 (let ([h (make-hash)]) h))
(define result3 (- 1))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not heap) 0] [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define best_idx 0)
      (define i 1)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not heap) 0] [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap i #f) (safe-index heap (int i))) #f) "cost" #f) #f)] [__r (if (if heap (if (hash? heap) (hash-ref heap best_idx #f) (safe-index heap (int best_idx))) #f) (hash-ref (if heap (if (hash? heap) (hash-ref heap best_idx #f) (safe-index heap (int best_idx))) #f) "cost" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! best_idx i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define best (if heap (if (hash? heap) (hash-ref heap best_idx #f) (safe-index heap (int best_idx))) #f))
      (define new_heap (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not heap) 0] [(string? heap) (string-length heap)] [(hash? heap) (hash-count heap)] [else (length heap)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? j best_idx)) (let ()
(set! new_heap (append (or new_heap (list)) (list (if heap (if (hash? heap) (hash-ref heap j #f) (safe-index heap (int j))) #f))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! heap new_heap)
      (define u (if best (hash-ref best "node" #f) #f))
      (define cost (if best (hash-ref best "cost" #f) #f))
      (if (hash-has-key? visited u) (let ()
(_cont)
) (void))
      (if (hash? visited) (hash-set! visited u #t) (begin (set! visited (make-hash)) (hash-set! visited u #t)))
      (if (string=? u "C") (let ()
(set! result cost)
(_break)
) (void))
      (let/ec _break (for ([v (in-hash-keys (if G (hash-ref G u (hash)) #f))] #:unless (hash-has-key? visited v))
  (let/ec _cont
(define next_cost (let ([__l cost] [__r (if (if G (hash-ref G u (hash)) #f) (hash-ref (if G (hash-ref G u (hash)) #f) v 0) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! heap (append (or heap (list)) (list (let ([h (make-hash)]) (hash-set! h "node" v) (hash-set! h "cost" next_cost) h))))
  )))
    )
    (loop)) (void))))
(displayln result)
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not heap2) 0] [(string? heap2) (string-length heap2)] [(hash? heap2) (hash-count heap2)] [else (length heap2)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define best2_idx 0)
      (define i2 1)
      (let/ec _break (let loop ()
  (if (let ([__l i2] [__r (cond [(not heap2) 0] [(string? heap2) (string-length heap2)] [(hash? heap2) (hash-count heap2)] [else (length heap2)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if heap2 (if (hash? heap2) (hash-ref heap2 i2 #f) (safe-index heap2 (int i2))) #f) (hash-ref (if heap2 (if (hash? heap2) (hash-ref heap2 i2 #f) (safe-index heap2 (int i2))) #f) "cost" #f) #f)] [__r (if (if heap2 (if (hash? heap2) (hash-ref heap2 best2_idx #f) (safe-index heap2 (int best2_idx))) #f) (hash-ref (if heap2 (if (hash? heap2) (hash-ref heap2 best2_idx #f) (safe-index heap2 (int best2_idx))) #f) "cost" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! best2_idx i2)
) (void))
      (set! i2 (let ([__l i2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define best2 (if heap2 (if (hash? heap2) (hash-ref heap2 best2_idx #f) (safe-index heap2 (int best2_idx))) #f))
      (define new_heap2 (list))
      (define j2 0)
      (let/ec _break (let loop ()
  (if (let ([__l j2] [__r (cond [(not heap2) 0] [(string? heap2) (string-length heap2)] [(hash? heap2) (hash-count heap2)] [else (length heap2)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? j2 best2_idx)) (let ()
(set! new_heap2 (append (or new_heap2 (list)) (list (if heap2 (if (hash? heap2) (hash-ref heap2 j2 #f) (safe-index heap2 (int j2))) #f))))
) (void))
      (set! j2 (let ([__l j2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! heap2 new_heap2)
      (define u2 (if best2 (hash-ref best2 "node" #f) #f))
      (define cost2 (if best2 (hash-ref best2 "cost" #f) #f))
      (if (hash-has-key? visited2 u2) (let ()
(_cont)
) (void))
      (if (hash? visited2) (hash-set! visited2 u2 #t) (begin (set! visited2 (make-hash)) (hash-set! visited2 u2 #t)))
      (if (string=? u2 "F") (let ()
(set! result2 cost2)
(_break)
) (void))
      (let/ec _break (for ([v2 (in-hash-keys (if G2 (hash-ref G2 u2 (hash)) #f))] #:unless (hash-has-key? visited2 v2))
  (let/ec _cont
(define next_cost2 (let ([__l cost2] [__r (if (if G2 (hash-ref G2 u2 (hash)) #f) (hash-ref (if G2 (hash-ref G2 u2 (hash)) #f) v2 0) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! heap2 (append (or heap2 (list)) (list (let ([h (make-hash)]) (hash-set! h "node" v2) (hash-set! h "cost" next_cost2) h))))
  )))
    )
    (loop)) (void))))
(displayln result2)
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not heap3) 0] [(string? heap3) (string-length heap3)] [(hash? heap3) (hash-count heap3)] [else (length heap3)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define best3_idx 0)
      (define i3 1)
      (let/ec _break (let loop ()
  (if (let ([__l i3] [__r (cond [(not heap3) 0] [(string? heap3) (string-length heap3)] [(hash? heap3) (hash-count heap3)] [else (length heap3)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if heap3 (if (hash? heap3) (hash-ref heap3 i3 #f) (safe-index heap3 (int i3))) #f) (hash-ref (if heap3 (if (hash? heap3) (hash-ref heap3 i3 #f) (safe-index heap3 (int i3))) #f) "cost" #f) #f)] [__r (if (if heap3 (if (hash? heap3) (hash-ref heap3 best3_idx #f) (safe-index heap3 (int best3_idx))) #f) (hash-ref (if heap3 (if (hash? heap3) (hash-ref heap3 best3_idx #f) (safe-index heap3 (int best3_idx))) #f) "cost" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! best3_idx i3)
) (void))
      (set! i3 (let ([__l i3] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define best3 (if heap3 (if (hash? heap3) (hash-ref heap3 best3_idx #f) (safe-index heap3 (int best3_idx))) #f))
      (define new_heap3 (list))
      (define j3 0)
      (let/ec _break (let loop ()
  (if (let ([__l j3] [__r (cond [(not heap3) 0] [(string? heap3) (string-length heap3)] [(hash? heap3) (hash-count heap3)] [else (length heap3)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? j3 best3_idx)) (let ()
(set! new_heap3 (append (or new_heap3 (list)) (list (if heap3 (if (hash? heap3) (hash-ref heap3 j3 #f) (safe-index heap3 (int j3))) #f))))
) (void))
      (set! j3 (let ([__l j3] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! heap3 new_heap3)
      (define u3 (if best3 (hash-ref best3 "node" #f) #f))
      (define cost3 (if best3 (hash-ref best3 "cost" #f) #f))
      (if (hash-has-key? visited3 u3) (let ()
(_cont)
) (void))
      (if (hash? visited3) (hash-set! visited3 u3 #t) (begin (set! visited3 (make-hash)) (hash-set! visited3 u3 #t)))
      (if (string=? u3 "F") (let ()
(set! result3 cost3)
(_break)
) (void))
      (let/ec _break (for ([v3 (in-hash-keys (if G3 (hash-ref G3 u3 (hash)) #f))] #:unless (hash-has-key? visited3 v3))
  (let/ec _cont
(define next_cost3 (let ([__l cost3] [__r (if (if G3 (hash-ref G3 u3 (hash)) #f) (hash-ref (if G3 (hash-ref G3 u3 (hash)) #f) v3 0) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! heap3 (append (or heap3 (list)) (list (let ([h (make-hash)]) (hash-set! h "node" v3) (hash-set! h "cost" next_cost3) h))))
  )))
    )
    (loop)) (void))))
(displayln result3)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
