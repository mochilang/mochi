;; Generated by Mochi 0.10.65 on 2025-08-14 16:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (abs x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return (- 0 x))
) (void))
(_return x)
))
)
(define (manhattan x1 y1 x2 y2)
  (let/ec _return (begin
(_return (let ([__l (abs (- x1 x2))] [__r (abs (- y1 y2))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (clone_path p)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not p) 0] [(string? p) (string-length p)] [(hash? p) (hash-count p)] [else (length p)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (if p (if (hash? p) (hash-ref p i #f) (safe-index p (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (make_node pos_x pos_y goal_x goal_y g_cost path)
  (let/ec _return (begin
(define f (manhattan pos_x pos_y goal_x goal_y))
(_return (let ([h (make-hash)]) (hash-set! h "pos_x" pos_x) (hash-set! h "pos_y" pos_y) (hash-set! h "goal_x" goal_x) (hash-set! h "goal_y" goal_y) (hash-set! h "g_cost" g_cost) (hash-set! h "f_cost" f) (hash-set! h "path" path) h))
))
)
(define delta (list (let ([h (make-hash)]) (hash-set! h "y" (- 1)) (hash-set! h "x" 0) h) (let ([h (make-hash)]) (hash-set! h "y" 0) (hash-set! h "x" (- 1)) h) (let ([h (make-hash)]) (hash-set! h "y" 1) (hash-set! h "x" 0) h) (let ([h (make-hash)]) (hash-set! h "y" 0) (hash-set! h "x" 1) h)))
(define (node_equal a b)
  (let/ec _return (begin
(_return (and (equal? (if a (hash-ref a "pos_x" #f) #f) (if b (hash-ref b "pos_x" #f) #f)) (equal? (if a (hash-ref a "pos_y" #f) #f) (if b (hash-ref b "pos_y" #f) #f))))
))
)
(define (contains nodes node)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not nodes) 0] [(string? nodes) (string-length nodes)] [(hash? nodes) (hash-count nodes)] [else (length nodes)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (node_equal (if nodes (if (hash? nodes) (hash-ref nodes i #f) (safe-index nodes (int i))) #f) node) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (sort_nodes nodes)
  (let/ec _return (begin
(define arr nodes)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define key_node (if arr (if (hash? arr) (hash-ref arr i #f) (safe-index arr (int i))) #f))
      (define j (- i 1))
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define temp (if arr (if (hash? arr) (hash-ref arr j #f) (safe-index arr (int j))) #f))
      (if (let ([__l (if temp (hash-ref temp "f_cost" #f) #f)] [__r (if key_node (hash-ref key_node "f_cost" #f) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) temp))
(set! j (- j 1))
) (let ()
(_break)
))
    )
    (loop)) (void))))
      (set! arr (list-set arr (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) key_node))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return arr)
))
)
(define (get_successors grid parent target)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not delta) 0] [(string? delta) (string-length delta)] [(hash? delta) (hash-count delta)] [else (length delta)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define d (if delta (if (hash? delta) (hash-ref delta i #f) (safe-index delta (int i))) #f))
      (define pos_x (let ([__l (if parent (hash-ref parent "pos_x" #f) #f)] [__r (if d (hash-ref d "x" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define pos_y (let ([__l (if parent (hash-ref parent "pos_y" #f) #f)] [__r (if d (hash-ref d "y" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (if (and (and (and (and (let ([__l pos_x] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l pos_x] [__r (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l pos_y] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ([__l pos_y] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (equal? (if (if grid (if (hash? grid) (hash-ref grid pos_y #f) (safe-index grid (int pos_y))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid pos_y #f) (safe-index grid (int pos_y))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid pos_y #f) (safe-index grid (int pos_y))) #f) pos_x #f) (safe-index (if grid (if (hash? grid) (hash-ref grid pos_y #f) (safe-index grid (int pos_y))) #f) (int pos_x))) #f) 0)) (let ()
(define new_path (clone_path (if parent (hash-ref parent "path" #f) #f)))
(set! new_path (append (or new_path (list)) (list (let ([h (make-hash)]) (hash-set! h "y" pos_y) (hash-set! h "x" pos_x) h))))
(set! res (append (or res (list)) (list (make_node pos_x pos_y (if target (hash-ref target "x" #f) #f) (if target (hash-ref target "y" #f) #f) (let ([__l (if parent (hash-ref parent "g_cost" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) new_path))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (greedy_best_first grid init goal)
  (let/ec _return (begin
(define start_path (list init))
(define start (make_node (if init (hash-ref init "x" #f) #f) (if init (hash-ref init "y" #f) #f) (if goal (hash-ref goal "x" #f) #f) (if goal (hash-ref goal "y" #f) #f) 0 start_path))
(define open_nodes (list start))
(define closed_nodes (list))
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not open_nodes) 0] [(string? open_nodes) (string-length open_nodes)] [(hash? open_nodes) (hash-count open_nodes)] [else (length open_nodes)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! open_nodes (sort_nodes open_nodes))
      (define current (if open_nodes (if (hash? open_nodes) (hash-ref open_nodes 0 #f) (safe-index open_nodes (int 0))) #f))
      (define new_open (list))
      (define idx 1)
      (let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not open_nodes) 0] [(string? open_nodes) (string-length open_nodes)] [(hash? open_nodes) (hash-count open_nodes)] [else (length open_nodes)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! new_open (append (or new_open (list)) (list (if open_nodes (if (hash? open_nodes) (hash-ref open_nodes idx #f) (safe-index open_nodes (int idx))) #f))))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! open_nodes new_open)
      (if (and (equal? (if current (hash-ref current "pos_x" #f) #f) (if goal (hash-ref goal "x" #f) #f)) (equal? (if current (hash-ref current "pos_y" #f) #f) (if goal (hash-ref goal "y" #f) #f))) (let ()
(_return (if current (hash-ref current "path" #f) #f))
) (void))
      (set! closed_nodes (append (or closed_nodes (list)) (list current)))
      (define successors (get_successors grid current goal))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not successors) 0] [(string? successors) (string-length successors)] [(hash? successors) (hash-count successors)] [else (length successors)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define child (if successors (if (hash? successors) (hash-ref successors i #f) (safe-index successors (int i))) #f))
      (if (and (not (contains closed_nodes child)) (not (contains open_nodes child))) (let ()
(set! open_nodes (append (or open_nodes (list)) (list child)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    )
    (loop)) (void))))
(define r (list init))
(_return r)
))
)
(define TEST_GRIDS (list (list (list 0 0 0 0 0 0 0) (list 0 1 0 0 0 0 0) (list 0 0 0 0 0 0 0) (list 0 0 1 0 0 0 0) (list 1 0 1 0 0 0 0) (list 0 0 0 0 0 0 0) (list 0 0 0 0 1 0 0)) (list (list 0 0 0 1 1 0 0) (list 0 0 0 0 1 0 1) (list 0 0 0 1 1 0 0) (list 0 1 0 0 1 0 0) (list 1 0 0 1 1 0 1) (list 0 0 0 0 0 0 0)) (list (list 0 0 1 0 0) (list 0 1 0 0 0) (list 0 0 1 0 1) (list 1 0 0 1 1) (list 0 0 0 0 0))))
(define (print_grid grid)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (displayln (to-string (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (main)
  (let/ec _return (begin
(define idx 0)
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not TEST_GRIDS) 0] [(string? TEST_GRIDS) (string-length TEST_GRIDS)] [(hash? TEST_GRIDS) (hash-count TEST_GRIDS)] [else (length TEST_GRIDS)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (displayln (string-append (string-append "==grid-" (to-string (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) "=="))
      (define grid (if TEST_GRIDS (if (hash? TEST_GRIDS) (hash-ref TEST_GRIDS idx #f) (safe-index TEST_GRIDS (int idx))) #f))
      (define init (let ([h (make-hash)]) (hash-set! h "y" 0) (hash-set! h "x" 0) h))
      (define goal (let ([h (make-hash)]) (hash-set! h "y" (- (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]) 1)) (hash-set! h "x" (- (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))]) 1)) h))
      (print_grid grid)
      (displayln "------")
      (define path (greedy_best_first grid init goal))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not path) 0] [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p (if path (if (hash? path) (hash-ref path j #f) (safe-index path (int j))) #f))
      (set! grid (list-set grid (if p (hash-ref p "y" #f) #f) (list-set (list-ref grid (if p (hash-ref p "y" #f) #f)) (if p (hash-ref p "x" #f) #f) 2)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (print_grid grid)
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
