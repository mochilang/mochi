;; Generated by Mochi 0.10.65 on 2025-08-14 16:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (uf_make n)
  (let/ec _return (begin
(define p (list))
(define r (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! p (append (or p (list)) (list i)))
      (set! r (append (or r (list)) (list 0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "parent" p) (hash-set! h "rank" r) h))
))
)
(define (uf_find uf x)
  (let/ec _return (begin
(define p (if uf (hash-ref uf "parent" #f) #f))
(if (not (equal? (if p (if (hash? p) (hash-ref p x #f) (safe-index p (int x))) #f) x)) (let ()
(define res (uf_find (let ([h (make-hash)]) (hash-set! h "parent" p) (hash-set! h "rank" (if uf (hash-ref uf "rank" #f) #f)) h) (if p (if (hash? p) (hash-ref p x #f) (safe-index p (int x))) #f)))
(set! p (if (if res (hash-ref res "uf" #f) #f) (hash-ref (if res (hash-ref res "uf" #f) #f) "parent" #f) #f))
(set! p (list-set p (int x) (if res (hash-ref res "root" #f) #f)))
(_return (let ([h (make-hash)]) (hash-set! h "root" (if res (hash-ref res "root" #f) #f)) (hash-set! h "uf" (let ([h (make-hash)]) (hash-set! h "parent" p) (hash-set! h "rank" (if (if res (hash-ref res "uf" #f) #f) (hash-ref (if res (hash-ref res "uf" #f) #f) "rank" #f) #f)) h)) h))
) (void))
(_return (let ([h (make-hash)]) (hash-set! h "root" x) (hash-set! h "uf" uf) h))
))
)
(define (uf_union uf x y)
  (let/ec _return (begin
(define fr1 (uf_find uf x))
(define uf1 (if fr1 (hash-ref fr1 "uf" #f) #f))
(define root1 (if fr1 (hash-ref fr1 "root" #f) #f))
(define fr2 (uf_find uf1 y))
(set! uf1 (if fr2 (hash-ref fr2 "uf" #f) #f))
(define root2 (if fr2 (hash-ref fr2 "root" #f) #f))
(if (equal? root1 root2) (let ()
(_return uf1)
) (void))
(define p (if uf1 (hash-ref uf1 "parent" #f) #f))
(define r (if uf1 (hash-ref uf1 "rank" #f) #f))
(if (let ([__l (if r (if (hash? r) (hash-ref r root1 #f) (safe-index r (int root1))) #f)] [__r (if r (if (hash? r) (hash-ref r root2 #f) (safe-index r (int root2))) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! p (list-set p (int root2) root1))
) (let ()
(if (let ([__l (if r (if (hash? r) (hash-ref r root1 #f) (safe-index r (int root1))) #f)] [__r (if r (if (hash? r) (hash-ref r root2 #f) (safe-index r (int root2))) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! p (list-set p (int root1) root2))
) (let ()
(set! p (list-set p (int root2) root1))
(set! r (list-set r (int root1) (let ([__l (if r (if (hash? r) (hash-ref r root1 #f) (safe-index r (int root1))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
))
(_return (let ([h (make-hash)]) (hash-set! h "parent" p) (hash-set! h "rank" r) h))
))
)
(define (boruvka n edges)
  (let/ec _return (begin
(define uf (uf_make n))
(define num_components n)
(define mst (list))
(let/ec _break (let loop ()
  (if (let ([__l num_components] [__r 1]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define cheap (list))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! cheap (append (or cheap (list)) (list (- 0 1))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define idx 0)
      (let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define e (if edges (if (hash? edges) (hash-ref edges idx #f) (safe-index edges (int idx))) #f))
      (define fr1 (uf_find uf (if e (hash-ref e "u" #f) #f)))
      (set! uf (if fr1 (hash-ref fr1 "uf" #f) #f))
      (define set1 (if fr1 (hash-ref fr1 "root" #f) #f))
      (define fr2 (uf_find uf (if e (hash-ref e "v" #f) #f)))
      (set! uf (if fr2 (hash-ref fr2 "uf" #f) #f))
      (define set2 (if fr2 (hash-ref fr2 "root" #f) #f))
      (if (not (equal? set1 set2)) (let ()
(if (or (equal? (if cheap (if (hash? cheap) (hash-ref cheap set1 #f) (safe-index cheap (int set1))) #f) (- 0 1)) (let ([__l (if (if edges (if (hash? edges) (hash-ref edges (if cheap (if (hash? cheap) (hash-ref cheap set1 #f) (safe-index cheap (int set1))) #f) #f) (safe-index edges (int (if cheap (if (hash? cheap) (hash-ref cheap set1 #f) (safe-index cheap (int set1))) #f)))) #f) (hash-ref (if edges (if (hash? edges) (hash-ref edges (if cheap (if (hash? cheap) (hash-ref cheap set1 #f) (safe-index cheap (int set1))) #f) #f) (safe-index edges (int (if cheap (if (hash? cheap) (hash-ref cheap set1 #f) (safe-index cheap (int set1))) #f)))) #f) "w" #f) #f)] [__r (if e (hash-ref e "w" #f) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(set! cheap (list-set cheap (int set1) idx))
) (void))
(if (or (equal? (if cheap (if (hash? cheap) (hash-ref cheap set2 #f) (safe-index cheap (int set2))) #f) (- 0 1)) (let ([__l (if (if edges (if (hash? edges) (hash-ref edges (if cheap (if (hash? cheap) (hash-ref cheap set2 #f) (safe-index cheap (int set2))) #f) #f) (safe-index edges (int (if cheap (if (hash? cheap) (hash-ref cheap set2 #f) (safe-index cheap (int set2))) #f)))) #f) (hash-ref (if edges (if (hash? edges) (hash-ref edges (if cheap (if (hash? cheap) (hash-ref cheap set2 #f) (safe-index cheap (int set2))) #f) #f) (safe-index edges (int (if cheap (if (hash? cheap) (hash-ref cheap set2 #f) (safe-index cheap (int set2))) #f)))) #f) "w" #f) #f)] [__r (if e (hash-ref e "w" #f) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(set! cheap (list-set cheap (int set2) idx))
) (void))
) (void))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define v 0)
      (let/ec _break (let loop ()
  (if (let ([__l v] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define idxe (if cheap (if (hash? cheap) (hash-ref cheap v #f) (safe-index cheap (int v))) #f))
      (if (not (equal? idxe (- 0 1))) (let ()
(define e (if edges (if (hash? edges) (hash-ref edges idxe #f) (safe-index edges (int idxe))) #f))
(define fr1 (uf_find uf (if e (hash-ref e "u" #f) #f)))
(set! uf (if fr1 (hash-ref fr1 "uf" #f) #f))
(define set1 (if fr1 (hash-ref fr1 "root" #f) #f))
(define fr2 (uf_find uf (if e (hash-ref e "v" #f) #f)))
(set! uf (if fr2 (hash-ref fr2 "uf" #f) #f))
(define set2 (if fr2 (hash-ref fr2 "root" #f) #f))
(if (not (equal? set1 set2)) (let ()
(set! mst (append (or mst (list)) (list e)))
(set! uf (uf_union uf set1 set2))
(set! num_components (- num_components 1))
) (void))
) (void))
      (set! v (let ([__l v] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    )
    (loop)) (void))))
(_return mst)
))
)
(define (main)
  (let/ec _return (begin
(define edges (list (let ([h (make-hash)]) (hash-set! h "u" 0) (hash-set! h "v" 1) (hash-set! h "w" 1) h) (let ([h (make-hash)]) (hash-set! h "u" 0) (hash-set! h "v" 2) (hash-set! h "w" 2) h) (let ([h (make-hash)]) (hash-set! h "u" 2) (hash-set! h "v" 3) (hash-set! h "w" 3) h)))
(define mst (boruvka 4 edges))
(let/ec _break (for ([e mst])
  (let/ec _cont
(displayln (string-append (string-append (string-append (string-append (to-string (if e (hash-ref e "u" #f) #f)) " - ") (to-string (if e (hash-ref e "v" #f) #f))) " : ") (to-string (if e (hash-ref e "w" #f) #f))))
  )))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
