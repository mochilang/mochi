;; Generated by Mochi 0.10.65 on 2025-08-14 16:22 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (list_contains_int xs x)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not xs) 0] [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? (if xs (if (hash? xs) (hash-ref xs i #f) (safe-index xs (int i))) #f) x) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (edge_exists edges w v)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (and (equal? (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 0 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 0))) #f) w) (equal? (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f) v)) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (first_key m)
  (let/ec _return (begin
(let/ec _break (for ([k (in-hash-keys m)])
  (let/ec _cont
(_return k)
  )))
(_return 0)
))
)
(define (rand_range low high)
  (let/ec _return (begin
(_return (let ([__l (modulo (now) (- high low))] [__r low]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (dg_make_graph)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "graph" (let ([h (make-hash)]) h)) h))
))
)
(define (dg_add_pair g u v w)
  (let/ec _return (begin
(if (hash-has-key? (if g (hash-ref g "graph" #f) #f) u) (let ()
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))
(if (not (edge_exists edges w v)) (let ()
(set! edges (append (or edges (list)) (list (list w v))))
(define m (if g (hash-ref g "graph" #f) #f))
(if (hash? m) (hash-set! m u edges) (begin (set! m (make-hash)) (hash-set! m u edges)))
(if (hash? g) (hash-set! g "graph" m) (begin (set! g (make-hash)) (hash-set! g "graph" m)))
) (void))
) (let ()
(define m0 (if g (hash-ref g "graph" #f) #f))
(if (hash? m0) (hash-set! m0 u (list (list w v))) (begin (set! m0 (make-hash)) (hash-set! m0 u (list (list w v)))))
(if (hash? g) (hash-set! g "graph" m0) (begin (set! g (make-hash)) (hash-set! g "graph" m0)))
))
(if (not (hash-has-key? (if g (hash-ref g "graph" #f) #f) v)) (let ()
(define m1 (if g (hash-ref g "graph" #f) #f))
(if (hash? m1) (hash-set! m1 v (list)) (begin (set! m1 (make-hash)) (hash-set! m1 v (list))))
(if (hash? g) (hash-set! g "graph" m1) (begin (set! g (make-hash)) (hash-set! g "graph" m1)))
) (void))
))
)
(define (dg_remove_pair g u v)
  (let/ec _return (begin
(if (hash-has-key? (if g (hash-ref g "graph" #f) #f) u) (let ()
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))
(define new_edges (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f) v)) (let ()
(set! new_edges (append (or new_edges (list)) (list (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define m (if g (hash-ref g "graph" #f) #f))
(if (hash? m) (hash-set! m u new_edges) (begin (set! m (make-hash)) (hash-set! m u new_edges)))
(if (hash? g) (hash-set! g "graph" m) (begin (set! g (make-hash)) (hash-set! g "graph" m)))
) (void))
))
)
(define (dg_all_nodes g)
  (let/ec _return (begin
(define res (list))
(let/ec _break (for ([k (in-hash-keys (if g (hash-ref g "graph" #f) #f))])
  (let/ec _cont
(set! res (append (or res (list)) (list k)))
  )))
(_return res)
))
)
(define (dg_dfs_util g node visited order d)
  (let/ec _return (begin
(if (hash? visited) (hash-set! visited node #t) (begin (set! visited (make-hash)) (hash-set! visited node #t)))
(set! order (append (or order (list)) (list node)))
(if (and (not (equal? d (- 1))) (equal? node d)) (let ()
(_return order)
) (void))
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) node #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int node))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neigh (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f))
      (if (not (hash-has-key? visited neigh)) (let ()
(set! order (dg_dfs_util g neigh visited order d))
(if (and (not (equal? d (- 1))) (equal? (if order (if (hash? order) (hash-ref order (- (cond [(not order) 0] [(string? order) (string-length order)] [(hash? order) (hash-count order)] [else (length order)]) 1) #f) (safe-index order (int (- (cond [(not order) 0] [(string? order) (string-length order)] [(hash? order) (hash-count order)] [else (length order)]) 1)))) #f) d)) (let ()
(_return order)
) (void))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return order)
))
)
(define (dg_dfs g s d)
  (let/ec _return (begin
(if (equal? s d) (let ()
(_return (list))
) (void))
(define start (if (equal? s (- 2)) (first_key (if g (hash-ref g "graph" #f) #f)) s))
(define visited (let ([h (make-hash)]) h))
(define order (list))
(set! order (dg_dfs_util g start visited order d))
(_return order)
))
)
(define (dg_bfs g s)
  (let/ec _return (begin
(define queue (list))
(define visited (let ([h (make-hash)]) h))
(define order (list))
(define start (if (equal? s (- 2)) (first_key (if g (hash-ref g "graph" #f) #f)) s))
(set! queue (append (or queue (list)) (list start)))
(if (hash? visited) (hash-set! visited start #t) (begin (set! visited (make-hash)) (hash-set! visited start #t)))
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define node (if queue (if (hash? queue) (hash-ref queue 0 #f) (safe-index queue (int 0))) #f))
      (set! queue (slice queue 1 (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])))
      (set! order (append (or order (list)) (list node)))
      (define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) node #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int node))) #f))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neigh (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f))
      (if (not (hash-has-key? visited neigh)) (let ()
(set! queue (append (or queue (list)) (list neigh)))
(if (hash? visited) (hash-set! visited neigh #t) (begin (set! visited (make-hash)) (hash-set! visited neigh #t)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    )
    (loop)) (void))))
(_return order)
))
)
(define (dg_in_degree g u)
  (let/ec _return (begin
(define count 0)
(let/ec _break (for ([k (in-hash-keys (if g (hash-ref g "graph" #f) #f))])
  (let/ec _cont
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) k #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int k))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f) u) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
  )))
(_return count)
))
)
(define (dg_out_degree g u)
  (let/ec _return (begin
(if (hash-has-key? (if g (hash-ref g "graph" #f) #f) u) (let ()
(_return (cond [(not (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f)) 0] [(string? (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f)) (string-length (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))] [(hash? (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f)) (hash-count (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))] [else (length (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))]))
) (void))
(_return 0)
))
)
(define (dg_topo_util g node visited stack)
  (let/ec _return (begin
(if (hash? visited) (hash-set! visited node #t) (begin (set! visited (make-hash)) (hash-set! visited node #t)))
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) node #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int node))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neigh (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f))
      (if (not (hash-has-key? visited neigh)) (let ()
(set! stack (dg_topo_util g neigh visited stack))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! stack (append (or stack (list)) (list node)))
(_return stack)
))
)
(define (dg_topological_sort g)
  (let/ec _return (begin
(define visited (let ([h (make-hash)]) h))
(define stack (list))
(let/ec _break (for ([k (in-hash-keys (if g (hash-ref g "graph" #f) #f))])
  (let/ec _cont
(if (not (hash-has-key? visited k)) (let ()
(set! stack (dg_topo_util g k visited stack))
) (void))
  )))
(define res (list))
(define i (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (append (or res (list)) (list (if stack (if (hash? stack) (hash-ref stack i #f) (safe-index stack (int i))) #f))))
      (set! i (- i 1))
    )
    (loop)) (void))))
(_return res)
))
)
(define (dg_cycle_util g node visited rec res)
  (let/ec _return (begin
(if (hash? visited) (hash-set! visited node #t) (begin (set! visited (make-hash)) (hash-set! visited node #t)))
(if (hash? rec) (hash-set! rec node #t) (begin (set! rec (make-hash)) (hash-set! rec node #t)))
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) node #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int node))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neigh (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f))
      (if (not (hash-has-key? visited neigh)) (let ()
(set! res (dg_cycle_util g neigh visited rec res))
) (let ()
(if (if rec (hash-ref rec neigh #f) #f) (let ()
(if (not (list_contains_int res neigh)) (let ()
(set! res (append (or res (list)) (list neigh)))
) (void))
(if (not (list_contains_int res node)) (let ()
(set! res (append (or res (list)) (list node)))
) (void))
) (void))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (hash? rec) (hash-set! rec node #f) (begin (set! rec (make-hash)) (hash-set! rec node #f)))
(_return res)
))
)
(define (dg_cycle_nodes g)
  (let/ec _return (begin
(define visited (let ([h (make-hash)]) h))
(define rec (let ([h (make-hash)]) h))
(define res (list))
(let/ec _break (for ([k (in-hash-keys (if g (hash-ref g "graph" #f) #f))])
  (let/ec _cont
(if (not (hash-has-key? visited k)) (let ()
(set! res (dg_cycle_util g k visited rec res))
) (void))
  )))
(_return res)
))
)
(define (dg_has_cycle_util g node visited rec)
  (let/ec _return (begin
(if (hash? visited) (hash-set! visited node #t) (begin (set! visited (make-hash)) (hash-set! visited node #t)))
(if (hash? rec) (hash-set! rec node #t) (begin (set! rec (make-hash)) (hash-set! rec node #t)))
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) node #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int node))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neigh (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f))
      (if (not (hash-has-key? visited neigh)) (let ()
(if (dg_has_cycle_util g neigh visited rec) (let ()
(_return #t)
) (void))
) (let ()
(if (if rec (hash-ref rec neigh #f) #f) (let ()
(_return #t)
) (void))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (hash? rec) (hash-set! rec node #f) (begin (set! rec (make-hash)) (hash-set! rec node #f)))
(_return #f)
))
)
(define (dg_has_cycle g)
  (let/ec _return (begin
(define visited (let ([h (make-hash)]) h))
(define rec (let ([h (make-hash)]) h))
(let/ec _break (for ([k (in-hash-keys (if g (hash-ref g "graph" #f) #f))])
  (let/ec _cont
(if (not (hash-has-key? visited k)) (let ()
(if (dg_has_cycle_util g k visited rec) (let ()
(_return #t)
) (void))
) (void))
  )))
(_return #f)
))
)
(define (dg_fill_graph_randomly g c)
  (let/ec _return (begin
(define count c)
(if (equal? count (- 1)) (let ()
(set! count (rand_range 10 10010))
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r count]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define edge_count (rand_range 1 103))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r edge_count]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define n (rand_range 0 count))
      (if (not (equal? n i)) (let ()
(dg_add_pair g i n 1)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (dg_dfs_time g s e)
  (let/ec _return (begin
(define begin (now))
(dg_dfs g s e)
(define end (now))
(_return (- end begin))
))
)
(define (dg_bfs_time g s)
  (let/ec _return (begin
(define begin (now))
(dg_bfs g s)
(define end (now))
(_return (- end begin))
))
)
(define (g_make_graph)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "graph" (let ([h (make-hash)]) h)) h))
))
)
(define (g_add_pair g u v w)
  (let/ec _return (begin
(if (hash-has-key? (if g (hash-ref g "graph" #f) #f) u) (let ()
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))
(if (not (edge_exists edges w v)) (let ()
(set! edges (append (or edges (list)) (list (list w v))))
(define m (if g (hash-ref g "graph" #f) #f))
(if (hash? m) (hash-set! m u edges) (begin (set! m (make-hash)) (hash-set! m u edges)))
(if (hash? g) (hash-set! g "graph" m) (begin (set! g (make-hash)) (hash-set! g "graph" m)))
) (void))
) (let ()
(define m0 (if g (hash-ref g "graph" #f) #f))
(if (hash? m0) (hash-set! m0 u (list (list w v))) (begin (set! m0 (make-hash)) (hash-set! m0 u (list (list w v)))))
(if (hash? g) (hash-set! g "graph" m0) (begin (set! g (make-hash)) (hash-set! g "graph" m0)))
))
(if (hash-has-key? (if g (hash-ref g "graph" #f) #f) v) (let ()
(define edges2 (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) v #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int v))) #f))
(if (not (edge_exists edges2 w u)) (let ()
(set! edges2 (append (or edges2 (list)) (list (list w u))))
(define m2 (if g (hash-ref g "graph" #f) #f))
(if (hash? m2) (hash-set! m2 v edges2) (begin (set! m2 (make-hash)) (hash-set! m2 v edges2)))
(if (hash? g) (hash-set! g "graph" m2) (begin (set! g (make-hash)) (hash-set! g "graph" m2)))
) (void))
) (let ()
(define m3 (if g (hash-ref g "graph" #f) #f))
(if (hash? m3) (hash-set! m3 v (list (list w u))) (begin (set! m3 (make-hash)) (hash-set! m3 v (list (list w u)))))
(if (hash? g) (hash-set! g "graph" m3) (begin (set! g (make-hash)) (hash-set! g "graph" m3)))
))
))
)
(define (g_remove_pair g u v)
  (let/ec _return (begin
(if (hash-has-key? (if g (hash-ref g "graph" #f) #f) u) (let ()
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))
(define new_edges (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f) v)) (let ()
(set! new_edges (append (or new_edges (list)) (list (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define m (if g (hash-ref g "graph" #f) #f))
(if (hash? m) (hash-set! m u new_edges) (begin (set! m (make-hash)) (hash-set! m u new_edges)))
(if (hash? g) (hash-set! g "graph" m) (begin (set! g (make-hash)) (hash-set! g "graph" m)))
) (void))
(if (hash-has-key? (if g (hash-ref g "graph" #f) #f) v) (let ()
(define edges2 (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) v #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int v))) #f))
(define new_edges2 (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not edges2) 0] [(string? edges2) (string-length edges2)] [(hash? edges2) (hash-count edges2)] [else (length edges2)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? (if (if edges2 (if (hash? edges2) (hash-ref edges2 j #f) (safe-index edges2 (int j))) #f) (if (hash? (if edges2 (if (hash? edges2) (hash-ref edges2 j #f) (safe-index edges2 (int j))) #f)) (hash-ref (if edges2 (if (hash? edges2) (hash-ref edges2 j #f) (safe-index edges2 (int j))) #f) 1 #f) (safe-index (if edges2 (if (hash? edges2) (hash-ref edges2 j #f) (safe-index edges2 (int j))) #f) (int 1))) #f) u)) (let ()
(set! new_edges2 (append (or new_edges2 (list)) (list (if edges2 (if (hash? edges2) (hash-ref edges2 j #f) (safe-index edges2 (int j))) #f))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define m2 (if g (hash-ref g "graph" #f) #f))
(if (hash? m2) (hash-set! m2 v new_edges2) (begin (set! m2 (make-hash)) (hash-set! m2 v new_edges2)))
(if (hash? g) (hash-set! g "graph" m2) (begin (set! g (make-hash)) (hash-set! g "graph" m2)))
) (void))
))
)
(define (g_all_nodes g)
  (let/ec _return (begin
(define res (list))
(let/ec _break (for ([k (in-hash-keys (if g (hash-ref g "graph" #f) #f))])
  (let/ec _cont
(set! res (append (or res (list)) (list k)))
  )))
(_return res)
))
)
(define (g_dfs_util g node visited order d)
  (let/ec _return (begin
(if (hash? visited) (hash-set! visited node #t) (begin (set! visited (make-hash)) (hash-set! visited node #t)))
(set! order (append (or order (list)) (list node)))
(if (and (not (equal? d (- 1))) (equal? node d)) (let ()
(_return order)
) (void))
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) node #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int node))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neigh (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f))
      (if (not (hash-has-key? visited neigh)) (let ()
(set! order (g_dfs_util g neigh visited order d))
(if (and (not (equal? d (- 1))) (equal? (if order (if (hash? order) (hash-ref order (- (cond [(not order) 0] [(string? order) (string-length order)] [(hash? order) (hash-count order)] [else (length order)]) 1) #f) (safe-index order (int (- (cond [(not order) 0] [(string? order) (string-length order)] [(hash? order) (hash-count order)] [else (length order)]) 1)))) #f) d)) (let ()
(_return order)
) (void))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return order)
))
)
(define (g_dfs g s d)
  (let/ec _return (begin
(if (equal? s d) (let ()
(_return (list))
) (void))
(define start (if (equal? s (- 2)) (first_key (if g (hash-ref g "graph" #f) #f)) s))
(define visited (let ([h (make-hash)]) h))
(define order (list))
(set! order (g_dfs_util g start visited order d))
(_return order)
))
)
(define (g_bfs g s)
  (let/ec _return (begin
(define queue (list))
(define visited (let ([h (make-hash)]) h))
(define order (list))
(define start (if (equal? s (- 2)) (first_key (if g (hash-ref g "graph" #f) #f)) s))
(set! queue (append (or queue (list)) (list start)))
(if (hash? visited) (hash-set! visited start #t) (begin (set! visited (make-hash)) (hash-set! visited start #t)))
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define node (if queue (if (hash? queue) (hash-ref queue 0 #f) (safe-index queue (int 0))) #f))
      (set! queue (slice queue 1 (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])))
      (set! order (append (or order (list)) (list node)))
      (define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) node #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int node))) #f))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neigh (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f))
      (if (not (hash-has-key? visited neigh)) (let ()
(set! queue (append (or queue (list)) (list neigh)))
(if (hash? visited) (hash-set! visited neigh #t) (begin (set! visited (make-hash)) (hash-set! visited neigh #t)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    )
    (loop)) (void))))
(_return order)
))
)
(define (g_degree g u)
  (let/ec _return (begin
(if (hash-has-key? (if g (hash-ref g "graph" #f) #f) u) (let ()
(_return (cond [(not (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f)) 0] [(string? (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f)) (string-length (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))] [(hash? (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f)) (hash-count (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))] [else (length (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) u #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int u))) #f))]))
) (void))
(_return 0)
))
)
(define (g_cycle_util g node visited parent res)
  (let/ec _return (begin
(if (hash? visited) (hash-set! visited node #t) (begin (set! visited (make-hash)) (hash-set! visited node #t)))
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) node #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int node))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neigh (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f))
      (if (not (hash-has-key? visited neigh)) (let ()
(set! res (g_cycle_util g neigh visited node res))
) (let ()
(if (not (equal? neigh parent)) (let ()
(if (not (list_contains_int res neigh)) (let ()
(set! res (append (or res (list)) (list neigh)))
) (void))
(if (not (list_contains_int res node)) (let ()
(set! res (append (or res (list)) (list node)))
) (void))
) (void))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (g_cycle_nodes g)
  (let/ec _return (begin
(define visited (let ([h (make-hash)]) h))
(define res (list))
(let/ec _break (for ([k (in-hash-keys (if g (hash-ref g "graph" #f) #f))])
  (let/ec _cont
(if (not (hash-has-key? visited k)) (let ()
(set! res (g_cycle_util g k visited (- 1) res))
) (void))
  )))
(_return res)
))
)
(define (g_has_cycle_util g node visited parent)
  (let/ec _return (begin
(if (hash? visited) (hash-set! visited node #t) (begin (set! visited (make-hash)) (hash-set! visited node #t)))
(define edges (if (if g (hash-ref g "graph" #f) #f) (if (hash? (if g (hash-ref g "graph" #f) #f)) (hash-ref (if g (hash-ref g "graph" #f) #f) node #f) (safe-index (if g (hash-ref g "graph" #f) #f) (int node))) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define neigh (if (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (if (hash? (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f)) (hash-ref (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) 1 #f) (safe-index (if edges (if (hash? edges) (hash-ref edges i #f) (safe-index edges (int i))) #f) (int 1))) #f))
      (if (not (hash-has-key? visited neigh)) (let ()
(if (g_has_cycle_util g neigh visited node) (let ()
(_return #t)
) (void))
) (let ()
(if (not (equal? neigh parent)) (let ()
(_return #t)
) (void))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (g_has_cycle g)
  (let/ec _return (begin
(define visited (let ([h (make-hash)]) h))
(let/ec _break (for ([k (in-hash-keys (if g (hash-ref g "graph" #f) #f))])
  (let/ec _cont
(if (not (hash-has-key? visited k)) (let ()
(if (g_has_cycle_util g k visited (- 1)) (let ()
(_return #t)
) (void))
) (void))
  )))
(_return #f)
))
)
(define (g_fill_graph_randomly g c)
  (let/ec _return (begin
(define count c)
(if (equal? count (- 1)) (let ()
(set! count (rand_range 10 10010))
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r count]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define edge_count (rand_range 1 103))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r edge_count]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define n (rand_range 0 count))
      (if (not (equal? n i)) (let ()
(g_add_pair g i n 1)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (g_dfs_time g s e)
  (let/ec _return (begin
(define begin (now))
(g_dfs g s e)
(define end (now))
(_return (- end begin))
))
)
(define (g_bfs_time g s)
  (let/ec _return (begin
(define begin (now))
(g_bfs g s)
(define end (now))
(_return (- end begin))
))
)
(define (main)
  (let/ec _return (begin
(define dg (dg_make_graph))
(dg_add_pair dg 0 1 5)
(dg_add_pair dg 0 2 3)
(dg_add_pair dg 1 3 2)
(dg_add_pair dg 2 3 4)
(displayln (to-string (dg_dfs dg (- 2) (- 1))))
(displayln (to-string (dg_bfs dg (- 2))))
(displayln (to-string (dg_in_degree dg 3)))
(displayln (to-string (dg_out_degree dg 0)))
(displayln (to-string (dg_topological_sort dg)))
(displayln (to-string (dg_has_cycle dg)))
(define ug (g_make_graph))
(g_add_pair ug 0 1 1)
(g_add_pair ug 1 2 1)
(g_add_pair ug 2 0 1)
(displayln (to-string (g_dfs ug (- 2) (- 1))))
(displayln (to-string (g_bfs ug (- 2))))
(displayln (to-string (g_degree ug 1)))
(displayln (to-string (g_has_cycle ug)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
