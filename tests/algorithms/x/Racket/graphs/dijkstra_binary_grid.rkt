;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (key p)
  (let/ec _return (begin
(_return (string-append (string-append (format "~a" (if p (hash-ref p "x" #f) #f)) ",") (format "~a" (if p (hash-ref p "y" #f) #f))))
))
)
(define (path_to_string path)
  (let/ec _return (begin
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)])) (let/ec _cont
    (define pt (if path (if (hash? path) (hash-ref path i #f) (list-ref path (int i))) #f))
    (set! s (string-append (string-append (string-append (string-append (string-append s "(") (format "~a" (if pt (hash-ref pt "x" #f) #f))) ", ") (format "~a" (if pt (hash-ref pt "y" #f) #f))) ")"))
    (if (< i (- (cond [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)]) 1)) (let ()
(set! s (string-append s ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (dijkstra grid source destination allow_diagonal)
  (let/ec _return (begin
(define rows (cond [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]))
(define cols (cond [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (list-ref grid (int 0))) #f))]))
(define dx (list (- 1) 1 0 0))
(define dy (list 0 0 (- 1) 1))
(if allow_diagonal (let ()
(set! dx (append dx (list (- 1) (- 1) 1 1)))
(set! dy (append dy (list (- 1) 1 (- 1) 1)))
) (void))
(define INF 1000000000000.0)
(define queue (list source))
(define front 0)
(define dist_map (hash (key source) 0.0))
(define prev (hash))
(let/ec _break (let loop ()
  (if (< front (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])) (let/ec _cont
    (define current (if queue (if (hash? queue) (hash-ref queue front #f) (list-ref queue (int front))) #f))
    (set! front (let ([__l front] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define cur_key (key current))
    (if (and (equal? (if current (hash-ref current "x" #f) #f) (if destination (hash-ref destination "x" #f) #f)) (equal? (if current (hash-ref current "y" #f) #f) (if destination (hash-ref destination "y" #f) #f))) (let ()
(_break)
) (void))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? dx) (string-length dx)] [(hash? dx) (hash-count dx)] [else (length dx)])) (let/ec _cont
    (define nx (let ([__l (if current (hash-ref current "x" #f) #f)] [__r (if dx (if (hash? dx) (hash-ref dx i #f) (list-ref dx (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define ny (let ([__l (if current (hash-ref current "y" #f) #f)] [__r (if dy (if (hash? dy) (hash-ref dy i #f) (list-ref dy (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (and (and (and (>= nx 0) (< nx rows)) (>= ny 0)) (< ny cols)) (let ()
(if (equal? (if (if grid (if (hash? grid) (hash-ref grid nx #f) (list-ref grid (int nx))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid nx #f) (list-ref grid (int nx))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid nx #f) (list-ref grid (int nx))) #f) ny #f) (list-ref (if grid (if (hash? grid) (hash-ref grid nx #f) (list-ref grid (int nx))) #f) (int ny))) #f) 1) (let ()
(define n_key (string-append (string-append (format "~a" nx) ",") (format "~a" ny)))
(if (not (hash-has-key? dist_map n_key)) (let ()
(set! dist_map (hash-set (or dist_map (hash)) n_key (let ([__l (if dist_map (hash-ref dist_map cur_key 0.0) #f)] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
(set! prev (hash-set (or prev (hash)) n_key current))
(set! queue (append queue (list (hash "x" nx "y" ny))))
) (void))
) (void))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (loop)) (void))))
(define dest_key (key destination))
(if (hash-has-key? dist_map dest_key) (let ()
(define path_rev (list destination))
(define step_key dest_key)
(define step_pt destination)
(let/ec _break (let loop ()
  (if (not (string=? step_key (key source))) (let/ec _cont
    (set! step_pt (if prev (hash-ref prev step_key (hash)) #f))
    (set! step_key (key step_pt))
    (set! path_rev (append path_rev (list step_pt)))
    (loop)) (void))))
(define path (list))
(define k (- (cond [(string? path_rev) (string-length path_rev)] [(hash? path_rev) (hash-count path_rev)] [else (length path_rev)]) 1))
(let/ec _break (let loop ()
  (if (>= k 0) (let/ec _cont
    (set! path (append path (list (if path_rev (if (hash? path_rev) (hash-ref path_rev k #f) (list-ref path_rev (int k))) #f))))
    (set! k (- k 1))
    (loop)) (void))))
(_return (hash "distance" (if dist_map (hash-ref dist_map dest_key 0.0) #f) "path" path))
) (void))
(_return (hash "distance" INF "path" (list)))
))
)
(define (print_result res)
  (let/ec _return (begin
(displayln (string-append (string-append (format "~a" (if res (hash-ref res "distance" #f) #f)) ", ") (path_to_string (if res (hash-ref res "path" #f) #f))))
))
)
(define grid1 (list (list 1 1 1) (list 0 1 0) (list 0 1 1)))
(define grid2 (list (list 1 1 1) (list 0 0 1) (list 0 1 1)))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(print_result (dijkstra grid1 (hash "x" 0 "y" 0) (hash "x" 2 "y" 2) #f))
(print_result (dijkstra grid1 (hash "x" 0 "y" 0) (hash "x" 2 "y" 2) #t))
(print_result (dijkstra grid2 (hash "x" 0 "y" 0) (hash "x" 2 "y" 2) #f))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
