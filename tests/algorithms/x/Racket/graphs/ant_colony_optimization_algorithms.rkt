;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (sqrtApprox x)
  (let/ec _return (begin
(define guess (/ x 2.0))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 20) (let/ec _cont
    (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return guess)
))
)
(define (rand_float)
  (let/ec _return (begin
(_return (/ (exact->inexact (modulo (now) 1000000)) 1000000.0))
))
)
(define (pow_float base exp)
  (let/ec _return (begin
(define result 1.0)
(define i 0)
(define e (int exp))
(let/ec _break (let loop ()
  (if (< i e) (let/ec _cont
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (distance city1 city2)
  (let/ec _return (begin
(define dx (exact->inexact (- (if city1 (if (hash? city1) (hash-ref city1 0 #f) (list-ref city1 (int 0))) #f) (if city2 (if (hash? city2) (hash-ref city2 0 #f) (list-ref city2 (int 0))) #f))))
(define dy (exact->inexact (- (if city1 (if (hash? city1) (hash-ref city1 1 #f) (list-ref city1 (int 1))) #f) (if city2 (if (hash? city2) (hash-ref city2 1 #f) (list-ref city2 (int 1))) #f))))
(_return (sqrtApprox (let ([__l (* dx dx)] [__r (* dy dy)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (choose_weighted options weights)
  (let/ec _return (begin
(define total 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? weights) (string-length weights)] [(hash? weights) (hash-count weights)] [else (length weights)])) (let/ec _cont
    (set! total (let ([__l total] [__r (if weights (if (hash? weights) (hash-ref weights i #f) (list-ref weights (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define r (* (rand_float) total))
(define accum 0.0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? weights) (string-length weights)] [(hash? weights) (hash-count weights)] [else (length weights)])) (let/ec _cont
    (set! accum (let ([__l accum] [__r (if weights (if (hash? weights) (hash-ref weights i #f) (list-ref weights (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (<= r accum) (let ()
(_return (if options (if (hash? options) (hash-ref options i #f) (list-ref options (int i))) #f))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (if options (if (hash? options) (hash-ref options (- (cond [(string? options) (string-length options)] [(hash? options) (hash-count options)] [else (length options)]) 1) #f) (list-ref options (int (- (cond [(string? options) (string-length options)] [(hash? options) (hash-count options)] [else (length options)]) 1)))) #f))
))
)
(define (city_select pheromone current unvisited alpha beta cities)
  (let/ec _return (begin
(define probs (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? unvisited) (string-length unvisited)] [(hash? unvisited) (hash-count unvisited)] [else (length unvisited)])) (let/ec _cont
    (define city (if unvisited (if (hash? unvisited) (hash-ref unvisited i #f) (list-ref unvisited (int i))) #f))
    (define dist (distance (if cities (hash-ref cities city (list)) #f) (if cities (hash-ref cities current (list)) #f)))
    (define trail (if (if pheromone (if (hash? pheromone) (hash-ref pheromone city #f) (list-ref pheromone (int city))) #f) (if (hash? (if pheromone (if (hash? pheromone) (hash-ref pheromone city #f) (list-ref pheromone (int city))) #f)) (hash-ref (if pheromone (if (hash? pheromone) (hash-ref pheromone city #f) (list-ref pheromone (int city))) #f) current #f) (list-ref (if pheromone (if (hash? pheromone) (hash-ref pheromone city #f) (list-ref pheromone (int city))) #f) (int current))) #f))
    (define prob (* (pow_float trail alpha) (pow_float (/ 1.0 dist) beta)))
    (set! probs (append probs (list prob)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (choose_weighted unvisited probs))
))
)
(define (pheromone_update pheromone cities evaporation ants_route q)
  (let/ec _return (begin
(define n (cond [(string? pheromone) (string-length pheromone)] [(hash? pheromone) (hash-count pheromone)] [else (length pheromone)]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! pheromone (list-set pheromone i (list-set (list-ref pheromone i) j (* (if (if pheromone (if (hash? pheromone) (hash-ref pheromone i #f) (list-ref pheromone (int i))) #f) (if (hash? (if pheromone (if (hash? pheromone) (hash-ref pheromone i #f) (list-ref pheromone (int i))) #f)) (hash-ref (if pheromone (if (hash? pheromone) (hash-ref pheromone i #f) (list-ref pheromone (int i))) #f) j #f) (list-ref (if pheromone (if (hash? pheromone) (hash-ref pheromone i #f) (list-ref pheromone (int i))) #f) (int j))) #f) evaporation))))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define a 0)
(let/ec _break (let loop ()
  (if (< a (cond [(string? ants_route) (string-length ants_route)] [(hash? ants_route) (hash-count ants_route)] [else (length ants_route)])) (let/ec _cont
    (define route (if ants_route (if (hash? ants_route) (hash-ref ants_route a #f) (list-ref ants_route (int a))) #f))
    (define total 0.0)
    (define r 0)
    (let/ec _break (let loop ()
  (if (< r (- (cond [(string? route) (string-length route)] [(hash? route) (hash-count route)] [else (length route)]) 1)) (let/ec _cont
    (set! total (let ([__l total] [__r (distance (if cities (hash-ref cities (if route (if (hash? route) (hash-ref route r #f) (list-ref route (int r))) #f) (list)) #f) (if cities (hash-ref cities (if route (if (hash? route) (hash-ref route (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref route (int (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (list)) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define delta (/ q total))
    (set! r 0)
    (let/ec _break (let loop ()
  (if (< r (- (cond [(string? route) (string-length route)] [(hash? route) (hash-count route)] [else (length route)]) 1)) (let/ec _cont
    (define u (if route (if (hash? route) (hash-ref route r #f) (list-ref route (int r))) #f))
    (define v (if route (if (hash? route) (hash-ref route (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref route (int (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
    (set! pheromone (list-set pheromone u (list-set (list-ref pheromone u) v (let ([__l (if (if pheromone (if (hash? pheromone) (hash-ref pheromone u #f) (list-ref pheromone (int u))) #f) (if (hash? (if pheromone (if (hash? pheromone) (hash-ref pheromone u #f) (list-ref pheromone (int u))) #f)) (hash-ref (if pheromone (if (hash? pheromone) (hash-ref pheromone u #f) (list-ref pheromone (int u))) #f) v #f) (list-ref (if pheromone (if (hash? pheromone) (hash-ref pheromone u #f) (list-ref pheromone (int u))) #f) (int v))) #f)] [__r delta]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
    (set! pheromone (list-set pheromone v (list-set (list-ref pheromone v) u (if (if pheromone (if (hash? pheromone) (hash-ref pheromone u #f) (list-ref pheromone (int u))) #f) (if (hash? (if pheromone (if (hash? pheromone) (hash-ref pheromone u #f) (list-ref pheromone (int u))) #f)) (hash-ref (if pheromone (if (hash? pheromone) (hash-ref pheromone u #f) (list-ref pheromone (int u))) #f) v #f) (list-ref (if pheromone (if (hash? pheromone) (hash-ref pheromone u #f) (list-ref pheromone (int u))) #f) (int v))) #f))))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return pheromone)
))
)
(define (remove_value lst val)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (if (not (equal? (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f) val)) (let ()
(set! res (append res (list (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (ant_colony cities ants_num iterations evaporation alpha beta q)
  (let/ec _return (begin
(define n (cond [(string? cities) (string-length cities)] [(hash? cities) (hash-count cities)] [else (length cities)]))
(define pheromone (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (set! row (append row (list 1.0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! pheromone (append pheromone (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define best_path (list))
(define best_distance 1000000000.0)
(define iter 0)
(let/ec _break (let loop ()
  (if (< iter iterations) (let/ec _cont
    (define ants_route (list))
    (define k 0)
    (let/ec _break (let loop ()
  (if (< k ants_num) (let/ec _cont
    (define route (list 0))
    (define unvisited (list))
    (let/ec _break (for ([key (in-hash-keys cities)])
  (let/ec _cont
(if (not (equal? key 0)) (let ()
(set! unvisited (append unvisited (list key)))
) (void))
  )))
    (define current 0)
    (let/ec _break (let loop ()
  (if (> (cond [(string? unvisited) (string-length unvisited)] [(hash? unvisited) (hash-count unvisited)] [else (length unvisited)]) 0) (let/ec _cont
    (define next_city (city_select pheromone current unvisited alpha beta cities))
    (set! route (append route (list next_city)))
    (set! unvisited (remove_value unvisited next_city))
    (set! current next_city)
    (loop)) (void))))
    (set! route (append route (list 0)))
    (set! ants_route (append ants_route (list route)))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! pheromone (pheromone_update pheromone cities evaporation ants_route q))
    (define a 0)
    (let/ec _break (let loop ()
  (if (< a (cond [(string? ants_route) (string-length ants_route)] [(hash? ants_route) (hash-count ants_route)] [else (length ants_route)])) (let/ec _cont
    (define route (if ants_route (if (hash? ants_route) (hash-ref ants_route a #f) (list-ref ants_route (int a))) #f))
    (define dist 0.0)
    (define r 0)
    (let/ec _break (let loop ()
  (if (< r (- (cond [(string? route) (string-length route)] [(hash? route) (hash-count route)] [else (length route)]) 1)) (let/ec _cont
    (set! dist (let ([__l dist] [__r (distance (if cities (hash-ref cities (if route (if (hash? route) (hash-ref route r #f) (list-ref route (int r))) #f) (list)) #f) (if cities (hash-ref cities (if route (if (hash? route) (hash-ref route (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref route (int (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (list)) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (< dist best_distance) (let ()
(set! best_distance dist)
(set! best_path route)
) (void))
    (set! a (let ([__l a] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! iter (let ([__l iter] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-append "best_path = " (format "~a" best_path)))
(displayln (string-append "best_distance = " (format "~a" best_distance)))
))
)
(define cities (hash 0 (list 0 0) 1 (list 0 5) 2 (list 3 8) 3 (list 8 10) 4 (list 12 8) 5 (list 12 4) 6 (list 8 0) 7 (list 6 2)))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(ant_colony cities 10 20 0.7 1.0 5.0 10.0)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
