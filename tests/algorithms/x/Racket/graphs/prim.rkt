;; Generated by Mochi 0.10.60 on 2025-08-08 10:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define INF 1000000000)
(define (connect graph a b w)
  (let/ec _return (begin
(define u (- a 1))
(define v (- b 1))
(define g graph)
(if (hash? g) (hash-set! g u (append (if g (hash-ref g u (list)) #f) (list (list v w)))) (begin (set! g (make-hash)) (hash-set! g u (append (if g (hash-ref g u (list)) #f) (list (list v w))))))
(if (hash? g) (hash-set! g v (append (if g (hash-ref g v (list)) #f) (list (list u w)))) (begin (set! g (make-hash)) (hash-set! g v (append (if g (hash-ref g v (list)) #f) (list (list u w))))))
(_return g)
))
)
(define (in_list arr x)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (if (equal? (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) x) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (prim graph s n)
  (let/ec _return (begin
(define dist (let ([h (make-hash)]) h))
(define parent (let ([h (make-hash)]) h))
(if (hash? dist) (hash-set! dist s 0) (begin (set! dist (make-hash)) (hash-set! dist s 0)))
(if (hash? parent) (hash-set! parent s (- 1)) (begin (set! parent (make-hash)) (hash-set! parent s (- 1))))
(define known (list))
(define keys (list s))
(let/ec _break (let loop ()
  (if (< (cond [(not known) 0] [(string? known) (string-length known)] [(hash? known) (hash-count known)] [else (length known)]) n) (let/ec _cont
    (define mini INF)
    (define u (- 1))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(not keys) 0] [(string? keys) (string-length keys)] [(hash? keys) (hash-count keys)] [else (length keys)])) (let/ec _cont
    (define k (if keys (if (hash? keys) (hash-ref keys i #f) (list-ref keys (int i))) #f))
    (define d (if dist (hash-ref dist k 0) #f))
    (if (and (not (in_list known k)) (< d mini)) (let ()
(set! mini d)
(set! u k)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! known (append known (list u)))
    (let/ec _break (for ([e (if graph (hash-ref graph u (list)) #f)])
  (let/ec _cont
(define v (if e (if (hash? e) (hash-ref e 0 #f) (list-ref e (int 0))) #f))
(define w (if e (if (hash? e) (hash-ref e 1 #f) (list-ref e (int 1))) #f))
(if (not (in_list keys v)) (let ()
(set! keys (append keys (list v)))
) (void))
(define cur (if (hash-has-key? dist v) (if dist (hash-ref dist v 0) #f) INF))
(if (and (not (in_list known v)) (< w cur)) (let ()
(if (hash? dist) (hash-set! dist v w) (begin (set! dist (make-hash)) (hash-set! dist v w)))
(if (hash? parent) (hash-set! parent v u) (begin (set! parent (make-hash)) (hash-set! parent v u)))
) (void))
  )))
    (loop)) (void))))
(define edges (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(not keys) 0] [(string? keys) (string-length keys)] [(hash? keys) (hash-count keys)] [else (length keys)])) (let/ec _cont
    (define v (if keys (if (hash? keys) (hash-ref keys j #f) (list-ref keys (int j))) #f))
    (if (not (equal? v s)) (let ()
(set! edges (append edges (list (list (let ([__l v] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if parent (hash-ref parent v 0) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return edges)
))
)
(define (sort_heap h dist)
  (let/ec _return (begin
(define a h)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (- (- (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) i) 1)) (let/ec _cont
    (define dj (if (hash-has-key? dist (if a (if (hash? a) (hash-ref a j #f) (list-ref a (int j))) #f)) (if dist (hash-ref dist (if a (if (hash? a) (hash-ref a j #f) (list-ref a (int j))) #f) 0) #f) INF))
    (define dj1 (if (hash-has-key? dist (if a (if (hash? a) (hash-ref a (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref a (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (if dist (hash-ref dist (if a (if (hash? a) (hash-ref a (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref a (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) 0) #f) INF))
    (if (> dj dj1) (let ()
(define t (if a (if (hash? a) (hash-ref a j #f) (list-ref a (int j))) #f))
(set! a (list-set a (int j) (if a (if (hash? a) (hash-ref a (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref a (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)))
(set! a (list-set a (int (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) t))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return a)
))
)
(define (prim_heap graph s n)
  (let/ec _return (begin
(define dist (let ([h (make-hash)]) h))
(define parent (let ([h (make-hash)]) h))
(if (hash? dist) (hash-set! dist s 0) (begin (set! dist (make-hash)) (hash-set! dist s 0)))
(if (hash? parent) (hash-set! parent s (- 1)) (begin (set! parent (make-hash)) (hash-set! parent s (- 1))))
(define h (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! h (append h (list i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! h (sort_heap h dist))
(define known (list))
(let/ec _break (let loop ()
  (if (> (cond [(not h) 0] [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)]) 0) (let/ec _cont
    (define u (if h (if (hash? h) (hash-ref h 0 #f) (list-ref h (int 0))) #f))
    (set! h (slice h 1 (cond [(not h) 0] [(string? h) (string-length h)] [(hash? h) (hash-count h)] [else (length h)])))
    (set! known (append known (list u)))
    (let/ec _break (for ([e (if graph (hash-ref graph u (list)) #f)])
  (let/ec _cont
(define v (if e (if (hash? e) (hash-ref e 0 #f) (list-ref e (int 0))) #f))
(define w (if e (if (hash? e) (hash-ref e 1 #f) (list-ref e (int 1))) #f))
(define cur (if (hash-has-key? dist v) (if dist (hash-ref dist v 0) #f) INF))
(if (and (not (in_list known v)) (< w cur)) (let ()
(if (hash? dist) (hash-set! dist v w) (begin (set! dist (make-hash)) (hash-set! dist v w)))
(if (hash? parent) (hash-set! parent v u) (begin (set! parent (make-hash)) (hash-set! parent v u)))
) (void))
  )))
    (set! h (sort_heap h dist))
    (loop)) (void))))
(define edges (list))
(define j 0)
(let/ec _break (let loop ()
  (if (< j n) (let/ec _cont
    (if (not (equal? j s)) (let ()
(set! edges (append edges (list (list (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l (if parent (hash-ref parent j 0) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return edges)
))
)
(define (print_edges edges)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not edges) 0] [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])) (let/ec _cont
    (define e (if edges (if (hash? edges) (hash-ref edges i #f) (list-ref edges (int i))) #f))
    (displayln (string-append (string-append (string-append (string-append "(" (format "~a" (if e (if (hash? e) (hash-ref e 0 #f) (list-ref e (int 0))) #f))) ", ") (format "~a" (if e (if (hash? e) (hash-ref e 1 #f) (list-ref e (int 1))) #f))) ")"))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
))
)
(define (test_vector)
  (let/ec _return (begin
(define x 5)
(define G (let ([h (make-hash)]) h))
(define i 0)
(let/ec _break (let loop ()
  (if (< i x) (let/ec _cont
    (if (hash? G) (hash-set! G i (list)) (begin (set! G (make-hash)) (hash-set! G i (list))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! G (connect G 1 2 15))
(set! G (connect G 1 3 12))
(set! G (connect G 2 4 13))
(set! G (connect G 2 5 5))
(set! G (connect G 3 2 6))
(set! G (connect G 3 4 6))
(define mst (prim G 0 x))
(print_edges mst)
(define mst_heap (prim_heap G 0 x))
(print_edges mst_heap)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(test_vector)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
