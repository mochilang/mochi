;; Generated by Mochi 0.10.65 on 2025-08-14 17:09 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (push_relabel_max_flow graph sources sinks)
  (let/ec _return (begin
(if (or (equal? (cond [(not sources) 0] [(string? sources) (string-length sources)] [(hash? sources) (hash-count sources)] [else (length sources)]) 0) (equal? (cond [(not sinks) 0] [(string? sinks) (string-length sinks)] [(hash? sinks) (hash-count sinks)] [else (length sinks)]) 0)) (let ()
(_return 0)
) (void))
(define g graph)
(define source_index (if sources (if (hash? sources) (hash-ref sources 0 #f) (safe-index sources (int 0))) #f))
(define sink_index (if sinks (if (hash? sinks) (hash-ref sinks 0 #f) (safe-index sinks (int 0))) #f))
(if (or (let ([__l (cond [(not sources) 0] [(string? sources) (string-length sources)] [(hash? sources) (hash-count sources)] [else (length sources)])] [__r 1]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ([__l (cond [(not sinks) 0] [(string? sinks) (string-length sinks)] [(hash? sinks) (hash-count sinks)] [else (length sinks)])] [__r 1]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(define max_input_flow 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not sources) 0] [(string? sources) (string-length sources)] [(hash? sources) (hash-count sources)] [else (length sources)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f)) 0] [(string? (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f)) (string-length (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f))] [(hash? (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f)) (hash-count (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f))] [else (length (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! max_input_flow (let ([__l max_input_flow] [__r (if (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f) (if (hash? (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f) j #f) (safe-index (if g (if (hash? g) (hash-ref g (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f) #f) (safe-index g (int (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)))) #f) (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define size (let ([__l (cond [(not g) 0] [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define new_graph (list))
(define zero_row (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! zero_row (append (or zero_row (list)) (list 0)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! new_graph (append (or new_graph (list)) (list zero_row)))
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not g) 0] [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list 0))
      (define c 0)
      (let/ec _break (let loop ()
  (if (let ([__l c] [__r (cond [(not (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f)) 0] [(string? (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f)) (string-length (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f))] [(hash? (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f)) (hash-count (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f))] [else (length (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (if (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f) (if (hash? (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f) c #f) (safe-index (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f) (int c))) #f))))
      (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! new_graph (append (or new_graph (list)) (list row)))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! g new_graph)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not sources) 0] [(string? sources) (string-length sources)] [(hash? sources) (hash-count sources)] [else (length sources)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! g (list-set g 0 (list-set (list-ref g 0) (let ([__l (if sources (if (hash? sources) (hash-ref sources i #f) (safe-index sources (int i))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) max_input_flow)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! source_index 0)
(set! size (let ([__l (cond [(not g) 0] [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! new_graph (list))
(set! r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not g) 0] [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row2 (if g (if (hash? g) (hash-ref g r #f) (safe-index g (int r))) #f))
      (set! row2 (append (or row2 (list)) (list 0)))
      (set! new_graph (append (or new_graph (list)) (list row2)))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define last_row (list))
(set! j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! last_row (append (or last_row (list)) (list 0)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! new_graph (append (or new_graph (list)) (list last_row)))
(set! g new_graph)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not sinks) 0] [(string? sinks) (string-length sinks)] [(hash? sinks) (hash-count sinks)] [else (length sinks)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! g (list-set g (let ([__l (if sinks (if (hash? sinks) (hash-ref sinks i #f) (safe-index sinks (int i))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref g (let ([__l (if sinks (if (hash? sinks) (hash-ref sinks i #f) (safe-index sinks (int i))) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (- size 1) max_input_flow)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! sink_index (- size 1))
) (void))
(define n (cond [(not g) 0] [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)]))
(define preflow (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list 0)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! preflow (append (or preflow (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define heights (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! heights (append (or heights (list)) (list 0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define excesses (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! excesses (append (or excesses (list)) (list 0)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! heights (list-set heights (int source_index) n))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define bandwidth (if (if g (if (hash? g) (hash-ref g source_index #f) (safe-index g (int source_index))) #f) (if (hash? (if g (if (hash? g) (hash-ref g source_index #f) (safe-index g (int source_index))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g source_index #f) (safe-index g (int source_index))) #f) i #f) (safe-index (if g (if (hash? g) (hash-ref g source_index #f) (safe-index g (int source_index))) #f) (int i))) #f))
      (set! preflow (list-set preflow source_index (list-set (list-ref preflow source_index) i (let ([__l (if (if preflow (if (hash? preflow) (hash-ref preflow source_index #f) (safe-index preflow (int source_index))) #f) (if (hash? (if preflow (if (hash? preflow) (hash-ref preflow source_index #f) (safe-index preflow (int source_index))) #f)) (hash-ref (if preflow (if (hash? preflow) (hash-ref preflow source_index #f) (safe-index preflow (int source_index))) #f) i #f) (safe-index (if preflow (if (hash? preflow) (hash-ref preflow source_index #f) (safe-index preflow (int source_index))) #f) (int i))) #f)] [__r bandwidth]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! preflow (list-set preflow i (list-set (list-ref preflow i) source_index (- (if (if preflow (if (hash? preflow) (hash-ref preflow i #f) (safe-index preflow (int i))) #f) (if (hash? (if preflow (if (hash? preflow) (hash-ref preflow i #f) (safe-index preflow (int i))) #f)) (hash-ref (if preflow (if (hash? preflow) (hash-ref preflow i #f) (safe-index preflow (int i))) #f) source_index #f) (safe-index (if preflow (if (hash? preflow) (hash-ref preflow i #f) (safe-index preflow (int i))) #f) (int source_index))) #f) bandwidth))))
      (set! excesses (list-set excesses (int i) (let ([__l (if excesses (if (hash? excesses) (hash-ref excesses i #f) (safe-index excesses (int i))) #f)] [__r bandwidth]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define vertices_list (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (and (not (equal? i source_index)) (not (equal? i sink_index))) (let ()
(set! vertices_list (append (or vertices_list (list)) (list i)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define idx 0)
(let/ec _break (let loop ()
  (if (let ([__l idx] [__r (cond [(not vertices_list) 0] [(string? vertices_list) (string-length vertices_list)] [(hash? vertices_list) (hash-count vertices_list)] [else (length vertices_list)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define v (if vertices_list (if (hash? vertices_list) (hash-ref vertices_list idx #f) (safe-index vertices_list (int idx))) #f))
      (define prev_height (if heights (if (hash? heights) (hash-ref heights v #f) (safe-index heights (int v))) #f))
      (let/ec _break (let loop ()
  (if (let ([__l (if excesses (if (hash? excesses) (hash-ref excesses v #f) (safe-index excesses (int v))) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define nb 0)
      (let/ec _break (let loop ()
  (if (let ([__l nb] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (and (let ([__l (- (if (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) (if (hash? (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) nb #f) (safe-index (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) (int nb))) #f) (if (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) (if (hash? (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f)) (hash-ref (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) nb #f) (safe-index (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) (int nb))) #f))] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ([__l (if heights (if (hash? heights) (hash-ref heights v #f) (safe-index heights (int v))) #f)] [__r (if heights (if (hash? heights) (hash-ref heights nb #f) (safe-index heights (int nb))) #f)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(define delta (if excesses (if (hash? excesses) (hash-ref excesses v #f) (safe-index excesses (int v))) #f))
(define capacity (- (if (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) (if (hash? (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) nb #f) (safe-index (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) (int nb))) #f) (if (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) (if (hash? (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f)) (hash-ref (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) nb #f) (safe-index (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) (int nb))) #f)))
(if (let ([__l delta] [__r capacity]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! delta capacity)
) (void))
(set! preflow (list-set preflow v (list-set (list-ref preflow v) nb (let ([__l (if (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) (if (hash? (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f)) (hash-ref (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) nb #f) (safe-index (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) (int nb))) #f)] [__r delta]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! preflow (list-set preflow nb (list-set (list-ref preflow nb) v (- (if (if preflow (if (hash? preflow) (hash-ref preflow nb #f) (safe-index preflow (int nb))) #f) (if (hash? (if preflow (if (hash? preflow) (hash-ref preflow nb #f) (safe-index preflow (int nb))) #f)) (hash-ref (if preflow (if (hash? preflow) (hash-ref preflow nb #f) (safe-index preflow (int nb))) #f) v #f) (safe-index (if preflow (if (hash? preflow) (hash-ref preflow nb #f) (safe-index preflow (int nb))) #f) (int v))) #f) delta))))
(set! excesses (list-set excesses (int v) (- (if excesses (if (hash? excesses) (hash-ref excesses v #f) (safe-index excesses (int v))) #f) delta)))
(set! excesses (list-set excesses (int nb) (let ([__l (if excesses (if (hash? excesses) (hash-ref excesses nb #f) (safe-index excesses (int nb))) #f)] [__r delta]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
      (set! nb (let ([__l nb] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define min_height (- 1))
      (set! nb 0)
      (let/ec _break (let loop ()
  (if (let ([__l nb] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (- (if (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) (if (hash? (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f)) (hash-ref (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) nb #f) (safe-index (if g (if (hash? g) (hash-ref g v #f) (safe-index g (int v))) #f) (int nb))) #f) (if (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) (if (hash? (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f)) (hash-ref (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) nb #f) (safe-index (if preflow (if (hash? preflow) (hash-ref preflow v #f) (safe-index preflow (int v))) #f) (int nb))) #f))] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(if (or (equal? min_height (- 1)) (let ([__l (if heights (if (hash? heights) (hash-ref heights nb #f) (safe-index heights (int nb))) #f)] [__r min_height]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(set! min_height (if heights (if (hash? heights) (hash-ref heights nb #f) (safe-index heights (int nb))) #f))
) (void))
) (void))
      (set! nb (let ([__l nb] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (not (equal? min_height (- 1))) (let ()
(set! heights (list-set heights (int v) (let ([__l min_height] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(_break)
))
    )
    (loop)) (void))))
      (if (let ([__l (if heights (if (hash? heights) (hash-ref heights v #f) (safe-index heights (int v))) #f)] [__r prev_height]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(define vertex (if vertices_list (if (hash? vertices_list) (hash-ref vertices_list idx #f) (safe-index vertices_list (int idx))) #f))
(define j idx)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! vertices_list (list-set vertices_list (int j) (if vertices_list (if (hash? vertices_list) (hash-ref vertices_list (- j 1) #f) (safe-index vertices_list (int (- j 1)))) #f)))
      (set! j (- j 1))
    )
    (loop)) (void))))
(set! vertices_list (list-set vertices_list (int 0) vertex))
(set! idx 0)
) (let ()
(set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    )
    (loop)) (void))))
(define flow 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! flow (let ([__l flow] [__r (if (if preflow (if (hash? preflow) (hash-ref preflow source_index #f) (safe-index preflow (int source_index))) #f) (if (hash? (if preflow (if (hash? preflow) (hash-ref preflow source_index #f) (safe-index preflow (int source_index))) #f)) (hash-ref (if preflow (if (hash? preflow) (hash-ref preflow source_index #f) (safe-index preflow (int source_index))) #f) i #f) (safe-index (if preflow (if (hash? preflow) (hash-ref preflow source_index #f) (safe-index preflow (int source_index))) #f) (int i))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (let ([__l flow] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! flow (- flow))
) (void))
(_return flow)
))
)
(define graph (list (list 0 7 0 0) (list 0 0 6 0) (list 0 0 0 8) (list 9 0 0 0)))
(define sources (list 0))
(define sinks (list 3))
(define result (push_relabel_max_flow graph sources sinks))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (string-append "maximum flow is " (to-string result)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
