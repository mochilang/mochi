;; Generated by Mochi 0.10.66 on 2025-08-15 15:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (prims_algo graph)
  (let/ec _return (begin
(define INF 2147483647)
(define dist (let ([h (make-hash)]) h))
(define parent (let ([h (make-hash)]) h))
(define queue (list))
(let ([__seq graph]) (let/ec _break (for ([node (in-hash-keys __seq)])
  (let/ec _cont
(if (hash? dist) (hash-set! dist node INF) (begin (set! dist (make-hash)) (hash-set! dist node INF)))
(if (hash? parent) (hash-set! parent node "") (begin (set! parent (make-hash)) (hash-set! parent node "")))
(set! queue (append (or queue (list)) (list (let ([h (make-hash)]) (hash-set! h "node" node) (hash-set! h "weight" INF) h))))
  ))))
(if (equal? (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)]) 0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "dist" dist) (hash-set! h "parent" parent) h))
) (void))
(define min_idx 0)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if queue (if (hash? queue) (hash-ref queue i #f) (safe-index queue (int i))) #f) (hash-ref (if queue (if (hash? queue) (hash-ref queue i #f) (safe-index queue (int i))) #f) "weight" #f) #f)] [__r (if (if queue (if (hash? queue) (hash-ref queue min_idx #f) (safe-index queue (int min_idx))) #f) (hash-ref (if queue (if (hash? queue) (hash-ref queue min_idx #f) (safe-index queue (int min_idx))) #f) "weight" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! min_idx i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define start_node (if queue (if (hash? queue) (hash-ref queue min_idx #f) (safe-index queue (int min_idx))) #f))
(define start (if start_node (hash-ref start_node "node" #f) #f))
(define new_q (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? j min_idx)) (let ()
(set! new_q (append (or new_q (list)) (list (if queue (if (hash? queue) (hash-ref queue j #f) (safe-index queue (int j))) #f))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! queue new_q)
(if (hash? dist) (hash-set! dist start 0) (begin (set! dist (make-hash)) (hash-set! dist start 0)))
(let ([__seq (if graph (hash-ref graph start (hash)) #f)]) (let/ec _break (for ([neighbour (in-hash-keys __seq)])
  (let/ec _cont
(define w (if (if graph (hash-ref graph start (hash)) #f) (hash-ref (if graph (hash-ref graph start (hash)) #f) neighbour 0) #f))
(if (let ([__l (if dist (hash-ref dist neighbour 0) #f)] [__r (let ([__l (if dist (hash-ref dist start 0) #f)] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(if (hash? dist) (hash-set! dist neighbour (let ([__l (if dist (hash-ref dist start 0) #f)] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! dist (make-hash)) (hash-set! dist neighbour (let ([__l (if dist (hash-ref dist start 0) #f)] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (hash? parent) (hash-set! parent neighbour start) (begin (set! parent (make-hash)) (hash-set! parent neighbour start)))
(define k 0)
(let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? (if (if queue (if (hash? queue) (hash-ref queue k #f) (safe-index queue (int k))) #f) (hash-ref (if queue (if (hash? queue) (hash-ref queue k #f) (safe-index queue (int k))) #f) "node" #f) #f) neighbour) (let ()
(hash-set! (list-ref queue k) "weight" (if dist (hash-ref dist neighbour 0) #f))
(_break)
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (void))
  ))))
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define best_idx 0)
      (define p 1)
      (let/ec _break (let loop ()
  (if (let ([__l p] [__r (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if queue (if (hash? queue) (hash-ref queue p #f) (safe-index queue (int p))) #f) (hash-ref (if queue (if (hash? queue) (hash-ref queue p #f) (safe-index queue (int p))) #f) "weight" #f) #f)] [__r (if (if queue (if (hash? queue) (hash-ref queue best_idx #f) (safe-index queue (int best_idx))) #f) (hash-ref (if queue (if (hash? queue) (hash-ref queue best_idx #f) (safe-index queue (int best_idx))) #f) "weight" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! best_idx p)
) (void))
      (set! p (let ([__l p] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define node_entry (if queue (if (hash? queue) (hash-ref queue best_idx #f) (safe-index queue (int best_idx))) #f))
      (define node (if node_entry (hash-ref node_entry "node" #f) #f))
      (define tmp (list))
      (define q 0)
      (let/ec _break (let loop ()
  (if (let ([__l q] [__r (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? q best_idx)) (let ()
(set! tmp (append (or tmp (list)) (list (if queue (if (hash? queue) (hash-ref queue q #f) (safe-index queue (int q))) #f))))
) (void))
      (set! q (let ([__l q] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! queue tmp)
      (let ([__seq (if graph (hash-ref graph node (hash)) #f)]) (let/ec _break (for ([neighbour (in-hash-keys __seq)])
  (let/ec _cont
(define w (if (if graph (hash-ref graph node (hash)) #f) (hash-ref (if graph (hash-ref graph node (hash)) #f) neighbour 0) #f))
(if (let ([__l (if dist (hash-ref dist neighbour 0) #f)] [__r (let ([__l (if dist (hash-ref dist node 0) #f)] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(if (hash? dist) (hash-set! dist neighbour (let ([__l (if dist (hash-ref dist node 0) #f)] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (begin (set! dist (make-hash)) (hash-set! dist neighbour (let ([__l (if dist (hash-ref dist node 0) #f)] [__r w]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (hash? parent) (hash-set! parent neighbour node) (begin (set! parent (make-hash)) (hash-set! parent neighbour node)))
(define r 0)
(let/ec _break (let loop ()
  (if (let ([__l r] [__r (cond [(not queue) 0] [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? (if (if queue (if (hash? queue) (hash-ref queue r #f) (safe-index queue (int r))) #f) (hash-ref (if queue (if (hash? queue) (hash-ref queue r #f) (safe-index queue (int r))) #f) "node" #f) #f) neighbour) (let ()
(hash-set! (list-ref queue r) "weight" (if dist (hash-ref dist neighbour 0) #f))
(_break)
) (void))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (void))
  ))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "dist" dist) (hash-set! h "parent" parent) h))
))
)
(define (iabs x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define graph (let ([h (make-hash)]) h))
(define res (prims_algo graph))
(define dist (if res (hash-ref res "dist" #f) #f))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(if (hash? graph) (hash-set! graph "a" (let ([h (make-hash)]) (hash-set! h "b" 3) (hash-set! h "c" 15) h)) (begin (set! graph (make-hash)) (hash-set! graph "a" (let ([h (make-hash)]) (hash-set! h "b" 3) (hash-set! h "c" 15) h))))
(if (hash? graph) (hash-set! graph "b" (let ([h (make-hash)]) (hash-set! h "a" 3) (hash-set! h "c" 10) (hash-set! h "d" 100) h)) (begin (set! graph (make-hash)) (hash-set! graph "b" (let ([h (make-hash)]) (hash-set! h "a" 3) (hash-set! h "c" 10) (hash-set! h "d" 100) h))))
(if (hash? graph) (hash-set! graph "c" (let ([h (make-hash)]) (hash-set! h "a" 15) (hash-set! h "b" 10) (hash-set! h "d" 5) h)) (begin (set! graph (make-hash)) (hash-set! graph "c" (let ([h (make-hash)]) (hash-set! h "a" 15) (hash-set! h "b" 10) (hash-set! h "d" 5) h))))
(if (hash? graph) (hash-set! graph "d" (let ([h (make-hash)]) (hash-set! h "b" 100) (hash-set! h "c" 5) h)) (begin (set! graph (make-hash)) (hash-set! graph "d" (let ([h (make-hash)]) (hash-set! h "b" 100) (hash-set! h "c" 5) h))))
(displayln (to-string (iabs (- (if dist (hash-ref dist "a" 0) #f) (if dist (hash-ref dist "b" 0) #f)))))
(displayln (to-string (iabs (- (if dist (hash-ref dist "d" 0) #f) (if dist (hash-ref dist "b" 0) #f)))))
(displayln (to-string (iabs (- (if dist (hash-ref dist "a" 0) #f) (if dist (hash-ref dist "c" 0) #f)))))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
