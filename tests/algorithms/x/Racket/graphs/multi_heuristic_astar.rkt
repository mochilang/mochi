;; Generated by Mochi 0.10.66 on 2025-08-15 15:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define W1 1.0)
(define W2 1.0)
(define n 20)
(define n_heuristic 3)
(define INF 1000000000.0)
(define t 1)
(define (pos_equal a b)
  (let/ec _return (begin
(_return (and (equal? (if a (hash-ref a "x" #f) #f) (if b (hash-ref b "x" #f) #f)) (equal? (if a (hash-ref a "y" #f) #f) (if b (hash-ref b "y" #f) #f))))
))
)
(define (pos_key p)
  (let/ec _return (begin
(_return (string-append (string-append (to-string (if p (hash-ref p "x" #f) #f)) ",") (to-string (if p (hash-ref p "y" #f) #f))))
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0.0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(_return 0.0)
) (void))
(define guess x)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 10]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return guess)
))
)
(define (consistent_heuristic p goal)
  (let/ec _return (begin
(define dx (exact->inexact (- (if p (hash-ref p "x" #f) #f) (if goal (hash-ref goal "x" #f) #f))))
(define dy (exact->inexact (- (if p (hash-ref p "y" #f) #f) (if goal (hash-ref goal "y" #f) #f))))
(_return (sqrtApprox (let ([__l (* dx dx)] [__r (* dy dy)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (iabs x)
  (let/ec _return (begin
(if (let ([__l x] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (heuristic_1 p goal)
  (let/ec _return (begin
(_return (exact->inexact (let ([__l (iabs (- (if p (hash-ref p "x" #f) #f) (if goal (hash-ref goal "x" #f) #f)))] [__r (iabs (- (if p (hash-ref p "y" #f) #f) (if goal (hash-ref goal "y" #f) #f)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (heuristic_2 p goal)
  (let/ec _return (begin
(define h (consistent_heuristic p goal))
(_return (/ h (exact->inexact t)))
))
)
(define (heuristic i p goal)
  (let/ec _return (begin
(if (equal? i 0) (let ()
(_return (consistent_heuristic p goal))
) (void))
(if (equal? i 1) (let ()
(_return (heuristic_1 p goal))
) (void))
(_return (heuristic_2 p goal))
))
)
(define (key_fn start i goal g_func)
  (let/ec _return (begin
(define g (if g_func (hash-ref g_func (pos_key start) 0.0) #f))
(_return (let ([__l g] [__r (* W1 (heuristic i start goal))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (valid p)
  (let/ec _return (begin
(if (or (let ([__l (if p (hash-ref p "x" #f) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l (if p (hash-ref p "x" #f) #f)] [__r (- n 1)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(_return #f)
) (void))
(if (or (let ([__l (if p (hash-ref p "y" #f) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l (if p (hash-ref p "y" #f) #f)] [__r (- n 1)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (let ()
(_return #f)
) (void))
(_return #t)
))
)
(define blocks (list (let ([h (make-hash)]) (hash-set! h "x" 0) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 1) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 2) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 3) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 4) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 5) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 6) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 7) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 8) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 9) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 10) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 11) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 12) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 13) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 14) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 15) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 16) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 17) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 18) (hash-set! h "y" 1) h) (let ([h (make-hash)]) (hash-set! h "x" 19) (hash-set! h "y" 1) h)))
(define (in_blocks p)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not blocks) 0] [(string? blocks) (string-length blocks)] [(hash? blocks) (hash-count blocks)] [else (length blocks)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (pos_equal (if blocks (if (hash? blocks) (hash-ref blocks i #f) (safe-index blocks (int i))) #f) p) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (pq_put pq node pri)
  (let/ec _return (begin
(define updated #f)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not pq) 0] [(string? pq) (string-length pq)] [(hash? pq) (hash-count pq)] [else (length pq)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (pos_equal (if (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f) (hash-ref (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f) "pos" #f) #f) node) (let ()
(if (let ([__l pri] [__r (if (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f) (hash-ref (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f) "pri" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! pq (list-set pq (int i) (let ([h (make-hash)]) (hash-set! h "pos" node) (hash-set! h "pri" pri) h)))
) (void))
(set! updated #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(if (not updated) (let ()
(set! pq (append (or pq (list)) (list (let ([h (make-hash)]) (hash-set! h "pos" node) (hash-set! h "pri" pri) h))))
) (void))
(_return pq)
))
)
(define (pq_minkey pq)
  (let/ec _return (begin
(if (equal? (cond [(not pq) 0] [(string? pq) (string-length pq)] [(hash? pq) (hash-count pq)] [else (length pq)]) 0) (let ()
(_return INF)
) (void))
(define first (if pq (if (hash? pq) (hash-ref pq 0 #f) (safe-index pq (int 0))) #f))
(define m (if first (hash-ref first "pri" #f) #f))
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not pq) 0] [(string? pq) (string-length pq)] [(hash? pq) (hash-count pq)] [else (length pq)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define item (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f))
      (if (let ([__l (if item (hash-ref item "pri" #f) #f)] [__r m]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! m (if item (hash-ref item "pri" #f) #f))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return m)
))
)
(define (pq_pop_min pq)
  (let/ec _return (begin
(define best (if pq (if (hash? pq) (hash-ref pq 0 #f) (safe-index pq (int 0))) #f))
(define idx 0)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not pq) 0] [(string? pq) (string-length pq)] [(hash? pq) (hash-count pq)] [else (length pq)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f) (hash-ref (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f) "pri" #f) #f)] [__r (if best (hash-ref best "pri" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! best (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f))
(set! idx i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define new_pq (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not pq) 0] [(string? pq) (string-length pq)] [(hash? pq) (hash-count pq)] [else (length pq)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? i idx)) (let ()
(set! new_pq (append (or new_pq (list)) (list (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "pq" new_pq) (hash-set! h "node" best) h))
))
)
(define (pq_remove pq node)
  (let/ec _return (begin
(define new_pq (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not pq) 0] [(string? pq) (string-length pq)] [(hash? pq) (hash-count pq)] [else (length pq)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (pos_equal (if (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f) (hash-ref (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f) "pos" #f) #f) node)) (let ()
(set! new_pq (append (or new_pq (list)) (list (if pq (if (hash? pq) (hash-ref pq i #f) (safe-index pq (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return new_pq)
))
)
(define (reconstruct back_pointer goal start)
  (let/ec _return (begin
(define path (list))
(define current goal)
(define key (pos_key current))
(set! path (append (or path (list)) (list current)))
(let/ec _break (let loop ()
  (if (not (pos_equal current start)) (begin
    (let/ec _cont
      (set! current (if back_pointer (hash-ref back_pointer key (hash)) #f))
      (set! key (pos_key current))
      (set! path (append (or path (list)) (list current)))
    )
    (loop)) (void))))
(define rev (list))
(define i (- (cond [(not path) 0] [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)]) 1))
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! rev (append (or rev (list)) (list (if path (if (hash? path) (hash-ref path i #f) (safe-index path (int i))) #f))))
      (set! i (- i 1))
    )
    (loop)) (void))))
(_return rev)
))
)
(define (neighbours p)
  (let/ec _return (begin
(define left (let ([h (make-hash)]) (hash-set! h "x" (- (if p (hash-ref p "x" #f) #f) 1)) (hash-set! h "y" (if p (hash-ref p "y" #f) #f)) h))
(define right (let ([h (make-hash)]) (hash-set! h "x" (let ([__l (if p (hash-ref p "x" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "y" (if p (hash-ref p "y" #f) #f)) h))
(define up (let ([h (make-hash)]) (hash-set! h "x" (if p (hash-ref p "x" #f) #f)) (hash-set! h "y" (let ([__l (if p (hash-ref p "y" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
(define down (let ([h (make-hash)]) (hash-set! h "x" (if p (hash-ref p "x" #f) #f)) (hash-set! h "y" (- (if p (hash-ref p "y" #f) #f) 1)) h))
(_return (list left right up down))
))
)
(define (multi_a_star start goal n_heuristic)
  (let/ec _return (begin
(define g_function (let ([h (make-hash)]) h))
(define back_pointer (let ([h (make-hash)]) h))
(define visited (let ([h (make-hash)]) h))
(define open_list (list))
(if (hash? g_function) (hash-set! g_function (pos_key start) 0.0) (begin (set! g_function (make-hash)) (hash-set! g_function (pos_key start) 0.0)))
(if (hash? g_function) (hash-set! g_function (pos_key goal) INF) (begin (set! g_function (make-hash)) (hash-set! g_function (pos_key goal) INF)))
(if (hash? back_pointer) (hash-set! back_pointer (pos_key start) (let ([h (make-hash)]) (hash-set! h "x" (- 1)) (hash-set! h "y" (- 1)) h)) (begin (set! back_pointer (make-hash)) (hash-set! back_pointer (pos_key start) (let ([h (make-hash)]) (hash-set! h "x" (- 1)) (hash-set! h "y" (- 1)) h))))
(if (hash? back_pointer) (hash-set! back_pointer (pos_key goal) (let ([h (make-hash)]) (hash-set! h "x" (- 1)) (hash-set! h "y" (- 1)) h)) (begin (set! back_pointer (make-hash)) (hash-set! back_pointer (pos_key goal) (let ([h (make-hash)]) (hash-set! h "x" (- 1)) (hash-set! h "y" (- 1)) h))))
(if (hash? visited) (hash-set! visited (pos_key start) #t) (begin (set! visited (make-hash)) (hash-set! visited (pos_key start) #t)))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n_heuristic]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! open_list (append (or open_list (list)) (list (list))))
      (define pri (key_fn start i goal g_function))
      (set! open_list (list-set open_list (int i) (pq_put (if open_list (if (hash? open_list) (hash-ref open_list i #f) (safe-index open_list (int i))) #f) start pri)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (let ([__l (pq_minkey (if open_list (if (hash? open_list) (hash-ref open_list 0 #f) (safe-index open_list (int 0))) #f))] [__r INF]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define chosen 0)
      (set! i 1)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r n_heuristic]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (pq_minkey (if open_list (if (hash? open_list) (hash-ref open_list i #f) (safe-index open_list (int i))) #f))] [__r (* W2 (pq_minkey (if open_list (if (hash? open_list) (hash-ref open_list 0 #f) (safe-index open_list (int 0))) #f)))]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(set! chosen i)
(_break)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (not (equal? chosen 0)) (let ()
(set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (define pair (pq_pop_min (if open_list (if (hash? open_list) (hash-ref open_list chosen #f) (safe-index open_list (int chosen))) #f)))
      (set! open_list (list-set open_list (int chosen) (if pair (hash-ref pair "pq" #f) #f)))
      (define current (if pair (hash-ref pair "node" #f) #f))
      (set! i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r n_heuristic]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? i chosen)) (let ()
(set! open_list (list-set open_list (int i) (pq_remove (if open_list (if (hash? open_list) (hash-ref open_list i #f) (safe-index open_list (int i))) #f) (if current (hash-ref current "pos" #f) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define ckey (pos_key (if current (hash-ref current "pos" #f) #f)))
      (if (hash-has-key? visited ckey) (let ()
(_cont)
) (void))
      (if (hash? visited) (hash-set! visited ckey #t) (begin (set! visited (make-hash)) (hash-set! visited ckey #t)))
      (if (pos_equal (if current (hash-ref current "pos" #f) #f) goal) (let ()
(define path (reconstruct back_pointer goal start))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not path) 0] [(string? path) (string-length path)] [(hash? path) (hash-count path)] [else (length path)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p (if path (if (hash? path) (hash-ref path j #f) (safe-index path (int j))) #f))
      (displayln (string-append (string-append (string-append (string-append "(" (to-string (if p (hash-ref p "x" #f) #f))) ",") (to-string (if p (hash-ref p "y" #f) #f))) ")"))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return void)
) (void))
      (define neighs (neighbours (if current (hash-ref current "pos" #f) #f)))
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r (cond [(not neighs) 0] [(string? neighs) (string-length neighs)] [(hash? neighs) (hash-count neighs)] [else (length neighs)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define nb (if neighs (if (hash? neighs) (hash-ref neighs k #f) (safe-index neighs (int k))) #f))
      (if (and (valid nb) (not (in_blocks nb))) (let ()
(define nkey (pos_key nb))
(define tentative (let ([__l (if g_function (hash-ref g_function ckey 0.0) #f)] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (or (not (hash-has-key? g_function nkey)) (let ([__l tentative] [__r (if g_function (hash-ref g_function nkey 0.0) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(if (hash? g_function) (hash-set! g_function nkey tentative) (begin (set! g_function (make-hash)) (hash-set! g_function nkey tentative)))
(if (hash? back_pointer) (hash-set! back_pointer nkey (if current (hash-ref current "pos" #f) #f)) (begin (set! back_pointer (make-hash)) (hash-set! back_pointer nkey (if current (hash-ref current "pos" #f) #f))))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n_heuristic]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define pri2 (let ([__l tentative] [__r (* W1 (heuristic i nb goal))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! open_list (list-set open_list (int i) (pq_put (if open_list (if (hash? open_list) (hash-ref open_list i #f) (safe-index open_list (int i))) #f) nb pri2)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
) (void))
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
    )
    (loop)) (void))))
(displayln "No path found to goal")
))
)
(define start (let ([h (make-hash)]) (hash-set! h "x" 0) (hash-set! h "y" 0) h))
(define goal (let ([h (make-hash)]) (hash-set! h "x" (- n 1)) (hash-set! h "y" (- n 1)) h))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(multi_a_star start goal n_heuristic)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
