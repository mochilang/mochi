;; Generated by Mochi 0.10.65 on 2025-08-14 17:09 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (create_graph vertices edges directed)
  (let/ec _return (begin
(define adj (let ([h (make-hash)]) h))
(let/ec _break (for ([v vertices])
  (let/ec _cont
(if (hash? adj) (hash-set! adj v (list)) (begin (set! adj (make-hash)) (hash-set! adj v (list))))
  )))
(let/ec _break (for ([e edges])
  (let/ec _cont
(define s (if e (if (hash? e) (hash-ref e 0 #f) (safe-index e (int 0))) #f))
(define d (if e (if (hash? e) (hash-ref e 1 #f) (safe-index e (int 1))) #f))
(if (not (hash-has-key? adj s)) (let ()
(if (hash? adj) (hash-set! adj s (list)) (begin (set! adj (make-hash)) (hash-set! adj s (list))))
) (void))
(if (not (hash-has-key? adj d)) (let ()
(if (hash? adj) (hash-set! adj d (list)) (begin (set! adj (make-hash)) (hash-set! adj d (list))))
) (void))
(if (hash? adj) (hash-set! adj s (append (or (if adj (hash-ref adj s (list)) #f) (list)) (list d))) (begin (set! adj (make-hash)) (hash-set! adj s (append (or (if adj (hash-ref adj s (list)) #f) (list)) (list d)))))
(if (not directed) (let ()
(if (hash? adj) (hash-set! adj d (append (or (if adj (hash-ref adj d (list)) #f) (list)) (list s))) (begin (set! adj (make-hash)) (hash-set! adj d (append (or (if adj (hash-ref adj d (list)) #f) (list)) (list s)))))
) (void))
  )))
(_return (let ([h (make-hash)]) (hash-set! h "adj" adj) (hash-set! h "directed" directed) h))
))
)
(define (add_vertex graph v)
  (let/ec _return (begin
(if (hash-has-key? (if graph (hash-ref graph "adj" #f) #f) v) (let ()
(panic "vertex exists")
) (void))
(define adj (let ([h (make-hash)]) h))
(let/ec _break (for ([k (in-hash-keys (if graph (hash-ref graph "adj" #f) #f))])
  (let/ec _cont
(if (hash? adj) (hash-set! adj k (if (if graph (hash-ref graph "adj" #f) #f) (if (hash? (if graph (hash-ref graph "adj" #f) #f)) (hash-ref (if graph (hash-ref graph "adj" #f) #f) k #f) (safe-index (if graph (hash-ref graph "adj" #f) #f) (int k))) #f)) (begin (set! adj (make-hash)) (hash-set! adj k (if (if graph (hash-ref graph "adj" #f) #f) (if (hash? (if graph (hash-ref graph "adj" #f) #f)) (hash-ref (if graph (hash-ref graph "adj" #f) #f) k #f) (safe-index (if graph (hash-ref graph "adj" #f) #f) (int k))) #f))))
  )))
(if (hash? adj) (hash-set! adj v (list)) (begin (set! adj (make-hash)) (hash-set! adj v (list))))
(_return (let ([h (make-hash)]) (hash-set! h "adj" adj) (hash-set! h "directed" (if graph (hash-ref graph "directed" #f) #f)) h))
))
)
(define (remove_from_list lst value)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not lst) 0] [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (string=? (if lst (if (hash? lst) (hash-ref lst i #f) (safe-index lst (int i))) #f) value)) (let ()
(set! res (append (or res (list)) (list (if lst (if (hash? lst) (hash-ref lst i #f) (safe-index lst (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (remove_key m key)
  (let/ec _return (begin
(define res (let ([h (make-hash)]) h))
(let/ec _break (for ([k (in-hash-keys m)])
  (let/ec _cont
(if (not (string=? k key)) (let ()
(if (hash? res) (hash-set! res k (if m (hash-ref m k (list)) #f)) (begin (set! res (make-hash)) (hash-set! res k (if m (hash-ref m k (list)) #f))))
) (void))
  )))
(_return res)
))
)
(define (add_edge graph s d)
  (let/ec _return (begin
(if (or (not (hash-has-key? (if graph (hash-ref graph "adj" #f) #f) s)) (not (hash-has-key? (if graph (hash-ref graph "adj" #f) #f) d))) (let ()
(panic "vertex missing")
) (void))
(if (contains_edge graph s d) (let ()
(panic "edge exists")
) (void))
(define adj (let ([h (make-hash)]) h))
(let/ec _break (for ([k (in-hash-keys (if graph (hash-ref graph "adj" #f) #f))])
  (let/ec _cont
(if (hash? adj) (hash-set! adj k (if (if graph (hash-ref graph "adj" #f) #f) (if (hash? (if graph (hash-ref graph "adj" #f) #f)) (hash-ref (if graph (hash-ref graph "adj" #f) #f) k #f) (safe-index (if graph (hash-ref graph "adj" #f) #f) (int k))) #f)) (begin (set! adj (make-hash)) (hash-set! adj k (if (if graph (hash-ref graph "adj" #f) #f) (if (hash? (if graph (hash-ref graph "adj" #f) #f)) (hash-ref (if graph (hash-ref graph "adj" #f) #f) k #f) (safe-index (if graph (hash-ref graph "adj" #f) #f) (int k))) #f))))
  )))
(define list_s (if adj (hash-ref adj s (list)) #f))
(set! list_s (append (or list_s (list)) (list d)))
(if (hash? adj) (hash-set! adj s list_s) (begin (set! adj (make-hash)) (hash-set! adj s list_s)))
(if (not (if graph (hash-ref graph "directed" #f) #f)) (let ()
(define list_d (if adj (hash-ref adj d (list)) #f))
(set! list_d (append (or list_d (list)) (list s)))
(if (hash? adj) (hash-set! adj d list_d) (begin (set! adj (make-hash)) (hash-set! adj d list_d)))
) (void))
(_return (let ([h (make-hash)]) (hash-set! h "adj" adj) (hash-set! h "directed" (if graph (hash-ref graph "directed" #f) #f)) h))
))
)
(define (remove_edge graph s d)
  (let/ec _return (begin
(if (or (not (hash-has-key? (if graph (hash-ref graph "adj" #f) #f) s)) (not (hash-has-key? (if graph (hash-ref graph "adj" #f) #f) d))) (let ()
(panic "vertex missing")
) (void))
(if (not (contains_edge graph s d)) (let ()
(panic "edge missing")
) (void))
(define adj (let ([h (make-hash)]) h))
(let/ec _break (for ([k (in-hash-keys (if graph (hash-ref graph "adj" #f) #f))])
  (let/ec _cont
(if (hash? adj) (hash-set! adj k (if (if graph (hash-ref graph "adj" #f) #f) (if (hash? (if graph (hash-ref graph "adj" #f) #f)) (hash-ref (if graph (hash-ref graph "adj" #f) #f) k #f) (safe-index (if graph (hash-ref graph "adj" #f) #f) (int k))) #f)) (begin (set! adj (make-hash)) (hash-set! adj k (if (if graph (hash-ref graph "adj" #f) #f) (if (hash? (if graph (hash-ref graph "adj" #f) #f)) (hash-ref (if graph (hash-ref graph "adj" #f) #f) k #f) (safe-index (if graph (hash-ref graph "adj" #f) #f) (int k))) #f))))
  )))
(if (hash? adj) (hash-set! adj s (remove_from_list (if adj (hash-ref adj s (list)) #f) d)) (begin (set! adj (make-hash)) (hash-set! adj s (remove_from_list (if adj (hash-ref adj s (list)) #f) d))))
(if (not (if graph (hash-ref graph "directed" #f) #f)) (let ()
(if (hash? adj) (hash-set! adj d (remove_from_list (if adj (hash-ref adj d (list)) #f) s)) (begin (set! adj (make-hash)) (hash-set! adj d (remove_from_list (if adj (hash-ref adj d (list)) #f) s))))
) (void))
(_return (let ([h (make-hash)]) (hash-set! h "adj" adj) (hash-set! h "directed" (if graph (hash-ref graph "directed" #f) #f)) h))
))
)
(define (remove_vertex graph v)
  (let/ec _return (begin
(if (not (hash-has-key? (if graph (hash-ref graph "adj" #f) #f) v)) (let ()
(panic "vertex missing")
) (void))
(define adj (let ([h (make-hash)]) h))
(let/ec _break (for ([k (in-hash-keys (if graph (hash-ref graph "adj" #f) #f))])
  (let/ec _cont
(if (not (string=? k v)) (let ()
(if (hash? adj) (hash-set! adj k (remove_from_list (if (if graph (hash-ref graph "adj" #f) #f) (if (hash? (if graph (hash-ref graph "adj" #f) #f)) (hash-ref (if graph (hash-ref graph "adj" #f) #f) k #f) (safe-index (if graph (hash-ref graph "adj" #f) #f) (int k))) #f) v)) (begin (set! adj (make-hash)) (hash-set! adj k (remove_from_list (if (if graph (hash-ref graph "adj" #f) #f) (if (hash? (if graph (hash-ref graph "adj" #f) #f)) (hash-ref (if graph (hash-ref graph "adj" #f) #f) k #f) (safe-index (if graph (hash-ref graph "adj" #f) #f) (int k))) #f) v))))
) (void))
  )))
(_return (let ([h (make-hash)]) (hash-set! h "adj" adj) (hash-set! h "directed" (if graph (hash-ref graph "directed" #f) #f)) h))
))
)
(define (contains_vertex graph v)
  (let/ec _return (begin
(_return (hash-has-key? (if graph (hash-ref graph "adj" #f) #f) v))
))
)
(define (contains_edge graph s d)
  (let/ec _return (begin
(if (or (not (hash-has-key? (if graph (hash-ref graph "adj" #f) #f) s)) (not (hash-has-key? (if graph (hash-ref graph "adj" #f) #f) d))) (let ()
(panic "vertex missing")
) (void))
(let/ec _break (for ([x (if (if graph (hash-ref graph "adj" #f) #f) (if (hash? (if graph (hash-ref graph "adj" #f) #f)) (hash-ref (if graph (hash-ref graph "adj" #f) #f) s #f) (safe-index (if graph (hash-ref graph "adj" #f) #f) (int s))) #f)])
  (let/ec _cont
(if (string=? x d) (let ()
(_return #t)
) (void))
  )))
(_return #f)
))
)
(define (clear_graph graph)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "adj" (let ([h (make-hash)]) h)) (hash-set! h "directed" (if graph (hash-ref graph "directed" #f) #f)) h))
))
)
(define (to_string graph)
  (let/ec _return (begin
(_return (to-string (if graph (hash-ref graph "adj" #f) #f)))
))
)
(define (main)
  (let/ec _return (begin
(define vertices (list "1" "2" "3" "4"))
(define edges (list (list "1" "2") (list "2" "3") (list "3" "4")))
(define g (create_graph vertices edges #f))
(displayln (to_string g))
(set! g (add_vertex g "5"))
(set! g (add_edge g "4" "5"))
(displayln (to-string (contains_edge g "4" "5")))
(set! g (remove_edge g "1" "2"))
(set! g (remove_vertex g "3"))
(displayln (to_string g))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
