;; Generated by Mochi 0.10.60 on 2025-08-08 10:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (tarjan g)
  (let/ec _return (begin
(define n (cond [(not g) 0] [(string? g) (string-length g)] [(hash? g) (hash-count g)] [else (length g)]))
(define stack (list))
(define on_stack (list))
(define index_of (list))
(define lowlink_of (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! on_stack (append on_stack (list #f)))
    (set! index_of (append index_of (list (- 0 1))))
    (set! lowlink_of (append lowlink_of (list (- 0 1))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define components (list))
(define (strong_connect v index)
  (let/ec _return (begin
(set! index_of (list-set index_of (int v) index))
(set! lowlink_of (list-set lowlink_of (int v) index))
(define current_index (let ([__l index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! stack (append stack (list v)))
(set! on_stack (list-set on_stack (int v) #t))
(let/ec _break (for ([w (if g (if (hash? g) (hash-ref g v #f) (list-ref g (int v))) #f)])
  (let/ec _cont
(if (equal? (if index_of (if (hash? index_of) (hash-ref index_of w #f) (list-ref index_of (int w))) #f) (- 0 1)) (let ()
(set! current_index (strong_connect w current_index))
(if (< (if lowlink_of (if (hash? lowlink_of) (hash-ref lowlink_of w #f) (list-ref lowlink_of (int w))) #f) (if lowlink_of (if (hash? lowlink_of) (hash-ref lowlink_of v #f) (list-ref lowlink_of (int v))) #f)) (let ()
(set! lowlink_of (list-set lowlink_of (int v) (if lowlink_of (if (hash? lowlink_of) (hash-ref lowlink_of w #f) (list-ref lowlink_of (int w))) #f)))
) (void))
) (let ()
(if (if on_stack (if (hash? on_stack) (hash-ref on_stack w #f) (list-ref on_stack (int w))) #f) (let ()
(if (< (if lowlink_of (if (hash? lowlink_of) (hash-ref lowlink_of w #f) (list-ref lowlink_of (int w))) #f) (if lowlink_of (if (hash? lowlink_of) (hash-ref lowlink_of v #f) (list-ref lowlink_of (int v))) #f)) (let ()
(set! lowlink_of (list-set lowlink_of (int v) (if lowlink_of (if (hash? lowlink_of) (hash-ref lowlink_of w #f) (list-ref lowlink_of (int w))) #f)))
) (void))
) (void))
))
  )))
(if (equal? (if lowlink_of (if (hash? lowlink_of) (hash-ref lowlink_of v #f) (list-ref lowlink_of (int v))) #f) (if index_of (if (hash? index_of) (hash-ref index_of v #f) (list-ref index_of (int v))) #f)) (let ()
(define component (list))
(define w (if stack (if (hash? stack) (hash-ref stack (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1) #f) (list-ref stack (int (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))) #f))
(set! stack (slice stack 0 (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
(set! on_stack (list-set on_stack (int w) #f))
(set! component (append component (list w)))
(let/ec _break (let loop ()
  (if (not (equal? w v)) (let/ec _cont
    (set! w (if stack (if (hash? stack) (hash-ref stack (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1) #f) (list-ref stack (int (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))) #f))
    (set! stack (slice stack 0 (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1)))
    (set! on_stack (list-set on_stack (int w) #f))
    (set! component (append component (list w)))
    (loop)) (void))))
(set! components (append components (list component)))
) (void))
(_return current_index)
))
)
(define v 0)
(let/ec _break (let loop ()
  (if (< v n) (let/ec _cont
    (if (equal? (if index_of (if (hash? index_of) (hash-ref index_of v #f) (list-ref index_of (int v))) #f) (- 0 1)) (let ()
(strong_connect v 0)
) (void))
    (set! v (let ([__l v] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return components)
))
)
(define (create_graph n edges)
  (let/ec _return (begin
(define g (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! g (append g (list (list))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (for ([e edges])
  (let/ec _cont
(define u (if e (if (hash? e) (hash-ref e 0 #f) (list-ref e (int 0))) #f))
(define v (if e (if (hash? e) (hash-ref e 1 #f) (list-ref e (int 1))) #f))
(set! g (list-set g (int u) (append (if g (if (hash? g) (hash-ref g u #f) (list-ref g (int u))) #f) (list v))))
  )))
(_return g)
))
)
(define (main)
  (let/ec _return (begin
(define n_vertices 7)
(define source (list 0 0 1 2 3 3 4 4 6))
(define target (list 1 3 2 0 1 4 5 6 5))
(define edges (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not source) 0] [(string? source) (string-length source)] [(hash? source) (hash-count source)] [else (length source)])) (let/ec _cont
    (set! edges (append edges (list (list (if source (if (hash? source) (hash-ref source i #f) (list-ref source (int i))) #f) (if target (if (hash? target) (hash-ref target i #f) (list-ref target (int i))) #f)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define g (create_graph n_vertices edges))
(displayln (format "~a" (tarjan g)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
