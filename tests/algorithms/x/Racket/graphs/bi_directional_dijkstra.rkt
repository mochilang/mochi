;; Generated by Mochi 0.10.65 on 2025-08-14 10:00 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (get_min_index q)
  (let/ec _return (begin
(define idx 0)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not q) 0] [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if (if q (if (hash? q) (hash-ref q i #f) (safe-index q (int i))) #f) (hash-ref (if q (if (hash? q) (hash-ref q i #f) (safe-index q (int i))) #f) "cost" #f) #f)] [__r (if (if q (if (hash? q) (hash-ref q idx #f) (safe-index q (int idx))) #f) (hash-ref (if q (if (hash? q) (hash-ref q idx #f) (safe-index q (int idx))) #f) "cost" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! idx i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return idx)
))
)
(define (remove_at q idx)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not q) 0] [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? i idx)) (let ()
(set! res (append (or res (list)) (list (if q (if (hash? q) (hash-ref q i #f) (safe-index q (int i))) #f))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (pass_and_relaxation graph v visited_forward visited_backward cst_fwd cst_bwd queue parent shortest_distance)
  (let/ec _return (begin
(define q queue)
(define sd shortest_distance)
(let/ec _break (for ([e (if graph (hash-ref graph v (list)) #f)])
  (let/ec _cont
(define nxt (if e (hash-ref e "to" #f) #f))
(define d (if e (hash-ref e "cost" #f) #f))
(if (hash-has-key? visited_forward nxt) (let ()
(_cont)
) (void))
(define old_cost (if (hash-has-key? cst_fwd nxt) (if cst_fwd (hash-ref cst_fwd nxt 0) #f) 2147483647))
(define new_cost (let ([__l (if cst_fwd (hash-ref cst_fwd v 0) #f)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l new_cost] [__r old_cost]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! q (append (or q (list)) (list (let ([h (make-hash)]) (hash-set! h "node" nxt) (hash-set! h "cost" new_cost) h))))
(if (hash? cst_fwd) (hash-set! cst_fwd nxt new_cost) (begin (set! cst_fwd (make-hash)) (hash-set! cst_fwd nxt new_cost)))
(if (hash? parent) (hash-set! parent nxt v) (begin (set! parent (make-hash)) (hash-set! parent nxt v)))
) (void))
(if (hash-has-key? visited_backward nxt) (let ()
(define alt (let ([__l (let ([__l (if cst_fwd (hash-ref cst_fwd v 0) #f)] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if cst_bwd (hash-ref cst_bwd nxt 0) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (let ([__l alt] [__r sd]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! sd alt)
) (void))
) (void))
  )))
(_return (let ([h (make-hash)]) (hash-set! h "queue" q) (hash-set! h "dist" sd) h))
))
)
(define (bidirectional_dij source destination graph_forward graph_backward)
  (let/ec _return (begin
(define shortest_path_distance (- 1))
(define visited_forward (let ([h (make-hash)]) h))
(define visited_backward (let ([h (make-hash)]) h))
(define cst_fwd (let ([h (make-hash)]) h))
(if (hash? cst_fwd) (hash-set! cst_fwd source 0) (begin (set! cst_fwd (make-hash)) (hash-set! cst_fwd source 0)))
(define cst_bwd (let ([h (make-hash)]) h))
(if (hash? cst_bwd) (hash-set! cst_bwd destination 0) (begin (set! cst_bwd (make-hash)) (hash-set! cst_bwd destination 0)))
(define parent_forward (let ([h (make-hash)]) h))
(if (hash? parent_forward) (hash-set! parent_forward source "") (begin (set! parent_forward (make-hash)) (hash-set! parent_forward source "")))
(define parent_backward (let ([h (make-hash)]) h))
(if (hash? parent_backward) (hash-set! parent_backward destination "") (begin (set! parent_backward (make-hash)) (hash-set! parent_backward destination "")))
(define queue_forward (list))
(set! queue_forward (append (or queue_forward (list)) (list (let ([h (make-hash)]) (hash-set! h "node" source) (hash-set! h "cost" 0) h))))
(define queue_backward (list))
(set! queue_backward (append (or queue_backward (list)) (list (let ([h (make-hash)]) (hash-set! h "node" destination) (hash-set! h "cost" 0) h))))
(define shortest_distance 2147483647)
(if (string=? source destination) (let ()
(_return 0)
) (void))
(let/ec _break (let loop ()
  (if (and (let ([__l (cond [(not queue_forward) 0] [(string? queue_forward) (string-length queue_forward)] [(hash? queue_forward) (hash-count queue_forward)] [else (length queue_forward)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ([__l (cond [(not queue_backward) 0] [(string? queue_backward) (string-length queue_backward)] [(hash? queue_backward) (hash-count queue_backward)] [else (length queue_backward)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (begin
    (let/ec _cont
      (define idx_f (get_min_index queue_forward))
      (define item_f (if queue_forward (if (hash? queue_forward) (hash-ref queue_forward idx_f #f) (safe-index queue_forward (int idx_f))) #f))
      (set! queue_forward (remove_at queue_forward idx_f))
      (define v_fwd (if item_f (hash-ref item_f "node" #f) #f))
      (if (hash? visited_forward) (hash-set! visited_forward v_fwd #t) (begin (set! visited_forward (make-hash)) (hash-set! visited_forward v_fwd #t)))
      (define idx_b (get_min_index queue_backward))
      (define item_b (if queue_backward (if (hash? queue_backward) (hash-ref queue_backward idx_b #f) (safe-index queue_backward (int idx_b))) #f))
      (set! queue_backward (remove_at queue_backward idx_b))
      (define v_bwd (if item_b (hash-ref item_b "node" #f) #f))
      (if (hash? visited_backward) (hash-set! visited_backward v_bwd #t) (begin (set! visited_backward (make-hash)) (hash-set! visited_backward v_bwd #t)))
      (define res_f (pass_and_relaxation graph_forward v_fwd visited_forward visited_backward cst_fwd cst_bwd queue_forward parent_forward shortest_distance))
      (set! queue_forward (if res_f (hash-ref res_f "queue" #f) #f))
      (set! shortest_distance (if res_f (hash-ref res_f "dist" #f) #f))
      (define res_b (pass_and_relaxation graph_backward v_bwd visited_backward visited_forward cst_bwd cst_fwd queue_backward parent_backward shortest_distance))
      (set! queue_backward (if res_b (hash-ref res_b "queue" #f) #f))
      (set! shortest_distance (if res_b (hash-ref res_b "dist" #f) #f))
      (if (let ([__l (let ([__l (if cst_fwd (hash-ref cst_fwd v_fwd 0) #f)] [__r (if cst_bwd (hash-ref cst_bwd v_bwd 0) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r shortest_distance]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(_break)
) (void))
    )
    (loop)) (void))))
(if (not (equal? shortest_distance 2147483647)) (let ()
(set! shortest_path_distance shortest_distance)
) (void))
(_return shortest_path_distance)
))
)
(define graph_fwd (let ([h (make-hash)]) (hash-set! h "B" (list (let ([h (make-hash)]) (hash-set! h "to" "C") (hash-set! h "cost" 1) h))) (hash-set! h "C" (list (let ([h (make-hash)]) (hash-set! h "to" "D") (hash-set! h "cost" 1) h))) (hash-set! h "D" (list (let ([h (make-hash)]) (hash-set! h "to" "F") (hash-set! h "cost" 1) h))) (hash-set! h "E" (list (let ([h (make-hash)]) (hash-set! h "to" "B") (hash-set! h "cost" 1) h) (let ([h (make-hash)]) (hash-set! h "to" "G") (hash-set! h "cost" 2) h))) (hash-set! h "F" (list)) (hash-set! h "G" (list (let ([h (make-hash)]) (hash-set! h "to" "F") (hash-set! h "cost" 1) h))) h))
(define graph_bwd (let ([h (make-hash)]) (hash-set! h "B" (list (let ([h (make-hash)]) (hash-set! h "to" "E") (hash-set! h "cost" 1) h))) (hash-set! h "C" (list (let ([h (make-hash)]) (hash-set! h "to" "B") (hash-set! h "cost" 1) h))) (hash-set! h "D" (list (let ([h (make-hash)]) (hash-set! h "to" "C") (hash-set! h "cost" 1) h))) (hash-set! h "F" (list (let ([h (make-hash)]) (hash-set! h "to" "D") (hash-set! h "cost" 1) h) (let ([h (make-hash)]) (hash-set! h "to" "G") (hash-set! h "cost" 1) h))) (hash-set! h "E" (list)) (hash-set! h "G" (list (let ([h (make-hash)]) (hash-set! h "to" "E") (hash-set! h "cost" 2) h))) h))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (to-string (bidirectional_dij "E" "F" graph_fwd graph_bwd)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
