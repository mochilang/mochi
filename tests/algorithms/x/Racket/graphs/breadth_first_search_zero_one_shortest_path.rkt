;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (new_adjacency_list size)
  (let/ec _return (begin
(define g (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i size) (let/ec _cont
    (set! g (append g (list (list))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (hash "graph" g "size" size))
))
)
(define (add_edge al from_vertex to_vertex weight)
  (let/ec _return (begin
(if (not (or (equal? weight 0) (equal? weight 1))) (let ()
(panic "Edge weight must be either 0 or 1.")
) (void))
(if (or (< to_vertex 0) (>= to_vertex (if al (hash-ref al "size" #f) #f))) (let ()
(panic "Vertex indexes must be in [0; size).")
) (void))
(define g (if al (hash-ref al "graph" #f) #f))
(define edges (if g (if (hash? g) (hash-ref g from_vertex #f) (list-ref g (int from_vertex))) #f))
(set! g (list-set g (int from_vertex) (append edges (list (hash "destination_vertex" to_vertex "weight" weight)))))
(set! al (hash-set (or al (hash)) "graph" g))
))
)
(define (push_front q v)
  (let/ec _return (begin
(define res (list v))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])) (let/ec _cont
    (set! res (append res (list (if q (if (hash? q) (hash-ref q i #f) (list-ref q (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (pop_front q)
  (let/ec _return (begin
(define res (list))
(define i 1)
(let/ec _break (let loop ()
  (if (< i (cond [(string? q) (string-length q)] [(hash? q) (hash-count q)] [else (length q)])) (let/ec _cont
    (set! res (append res (list (if q (if (hash? q) (hash-ref q i #f) (list-ref q (int i))) #f))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (front q)
  (let/ec _return (begin
(_return (if q (if (hash? q) (hash-ref q 0 #f) (list-ref q (int 0))) #f))
))
)
(define (get_shortest_path al start_vertex finish_vertex)
  (let/ec _return (begin
(define queue (list start_vertex))
(define distances (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (if al (hash-ref al "size" #f) #f)) (let/ec _cont
    (set! distances (append distances (list (- 1))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! distances (list-set distances (int start_vertex) 0))
(let/ec _break (let loop ()
  (if (> (cond [(string? queue) (string-length queue)] [(hash? queue) (hash-count queue)] [else (length queue)]) 0) (let/ec _cont
    (define current_vertex (front queue))
    (set! queue (pop_front queue))
    (define current_distance (if distances (if (hash? distances) (hash-ref distances current_vertex #f) (list-ref distances (int current_vertex))) #f))
    (define edges (if (if al (hash-ref al "graph" #f) #f) (if (hash? (if al (hash-ref al "graph" #f) #f)) (hash-ref (if al (hash-ref al "graph" #f) #f) current_vertex #f) (list-ref (if al (hash-ref al "graph" #f) #f) (int current_vertex))) #f))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? edges) (string-length edges)] [(hash? edges) (hash-count edges)] [else (length edges)])) (let/ec _cont
    (define edge (if edges (if (hash? edges) (hash-ref edges j #f) (list-ref edges (int j))) #f))
    (define new_distance (let ([__l current_distance] [__r (if edge (hash-ref edge "weight" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define dest (if edge (hash-ref edge "destination_vertex" #f) #f))
    (define dest_distance (if distances (if (hash? distances) (hash-ref distances dest #f) (list-ref distances (int dest))) #f))
    (if (and (>= dest_distance 0) (>= new_distance dest_distance)) (let ()
(set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (set! distances (list-set distances (int dest) new_distance))
    (if (equal? (if edge (hash-ref edge "weight" #f) #f) 0) (let ()
(set! queue (push_front queue dest))
) (let ()
(set! queue (append queue (list dest)))
))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (loop)) (void))))
(define result (if distances (if (hash? distances) (hash-ref distances finish_vertex #f) (list-ref distances (int finish_vertex))) #f))
(if (< result 0) (let ()
(panic "No path from start_vertex to finish_vertex.")
) (void))
(_return result)
))
)
(define g (new_adjacency_list 11))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(add_edge g 0 1 0)
(add_edge g 0 3 1)
(add_edge g 1 2 0)
(add_edge g 2 3 0)
(add_edge g 4 2 1)
(add_edge g 4 5 1)
(add_edge g 4 6 1)
(add_edge g 5 9 0)
(add_edge g 6 7 1)
(add_edge g 7 8 1)
(add_edge g 8 10 1)
(add_edge g 9 7 0)
(add_edge g 9 10 1)
(displayln (format "~a" (get_shortest_path g 0 3)))
(displayln (format "~a" (get_shortest_path g 4 10)))
(displayln (format "~a" (get_shortest_path g 4 8)))
(displayln (format "~a" (get_shortest_path g 0 1)))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
