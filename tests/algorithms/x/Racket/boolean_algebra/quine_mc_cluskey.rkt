;; Generated by Mochi 0.10.59 on 2025-08-06 21:26 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (compare_string string1 string2)
  (let/ec _return (begin
(define result "")
(define count 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? string1) (string-length string1)] [(hash? string1) (hash-count string1)] [else (length string1)])) (let/ec _cont
    (define c1 (slice string1 i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define c2 (slice string2 i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (not (string=? c1 c2)) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(set! result (string-append result "_"))
) (let ()
(set! result (string-append result c1))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (> count 1) (let ()
(_return "")
) (void))
(_return result)
))
)
(define (contains_string arr value)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (if (string=? (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f) value) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (unique_strings arr)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)])) (let/ec _cont
    (if (not (contains_string res (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))) (let ()
(set! res (append res (list (if arr (if (hash? arr) (hash-ref arr i #f) (list-ref arr (int i))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (check binary)
  (let/ec _return (begin
(define pi (list))
(define current binary)
(let/ec _break (let loop ()
  (if #t (let/ec _cont
    (define check1 (list))
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? current) (string-length current)] [(hash? current) (hash-count current)] [else (length current)])) (let/ec _cont
    (set! check1 (append check1 (list "$")))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define temp (list))
    (set! i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? current) (string-length current)] [(hash? current) (hash-count current)] [else (length current)])) (let/ec _cont
    (define j (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (let/ec _break (let loop ()
  (if (< j (cond [(string? current) (string-length current)] [(hash? current) (hash-count current)] [else (length current)])) (let/ec _cont
    (define k (compare_string (if current (if (hash? current) (hash-ref current i #f) (list-ref current (int i))) #f) (if current (if (hash? current) (hash-ref current j #f) (list-ref current (int j))) #f)))
    (if (string=? k "") (let ()
(set! check1 (list-set check1 (int i) "*"))
(set! check1 (list-set check1 (int j) "*"))
(set! temp (append temp (list "X")))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i 0)
    (let/ec _break (let loop ()
  (if (< i (cond [(string? current) (string-length current)] [(hash? current) (hash-count current)] [else (length current)])) (let/ec _cont
    (if (string=? (if check1 (if (hash? check1) (hash-ref check1 i #f) (list-ref check1 (int i))) #f) "$") (let ()
(set! pi (append pi (list (if current (if (hash? current) (hash-ref current i #f) (list-ref current (int i))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (equal? (cond [(string? temp) (string-length temp)] [(hash? temp) (hash-count temp)] [else (length temp)]) 0) (let ()
(_return pi)
) (void))
    (set! current (unique_strings temp))
    (loop)) (void))))
))
)
(define (decimal_to_binary no_of_variable minterms)
  (let/ec _return (begin
(define temp (list))
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(string? minterms) (string-length minterms)] [(hash? minterms) (hash-count minterms)] [else (length minterms)])) (let/ec _cont
    (define minterm (if minterms (if (hash? minterms) (hash-ref minterms idx #f) (list-ref minterms (int idx))) #f))
    (define string "")
    (define i 0)
    (let/ec _break (let loop ()
  (if (< i no_of_variable) (let/ec _cont
    (set! string (string-append (format "~a" (modulo minterm 2)) string))
    (set! minterm (quotient minterm 2))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! temp (append temp (list string)))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return temp)
))
)
(define (is_for_table string1 string2 count)
  (let/ec _return (begin
(define count_n 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? string1) (string-length string1)] [(hash? string1) (hash-count string1)] [else (length string1)])) (let/ec _cont
    (define c1 (slice string1 i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define c2 (slice string2 i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (if (not (string=? c1 c2)) (let ()
(set! count_n (let ([__l count_n] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (equal? count_n count))
))
)
(define (count_ones row)
  (let/ec _return (begin
(define c 0)
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])) (let/ec _cont
    (if (equal? (if row (if (hash? row) (hash-ref row j #f) (list-ref row (int j))) #f) 1) (let ()
(set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return c)
))
)
(define (selection chart prime_implicants)
  (let/ec _return (begin
(define temp (list))
(define select (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? chart) (string-length chart)] [(hash? chart) (hash-count chart)] [else (length chart)])) (let/ec _cont
    (set! select (append select (list 0)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define col 0)
(let/ec _break (let loop ()
  (if (< col (cond [(string? (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f)) (string-length (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f))] [(hash? (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f)) (hash-count (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f))] [else (length (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f))])) (let/ec _cont
    (define count 0)
    (define row 0)
    (let/ec _break (let loop ()
  (if (< row (cond [(string? chart) (string-length chart)] [(hash? chart) (hash-count chart)] [else (length chart)])) (let/ec _cont
    (if (equal? (if (if chart (if (hash? chart) (hash-ref chart row #f) (list-ref chart (int row))) #f) (if (hash? (if chart (if (hash? chart) (hash-ref chart row #f) (list-ref chart (int row))) #f)) (hash-ref (if chart (if (hash? chart) (hash-ref chart row #f) (list-ref chart (int row))) #f) col #f) (list-ref (if chart (if (hash? chart) (hash-ref chart row #f) (list-ref chart (int row))) #f) (int col))) #f) 1) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (equal? count 1) (let ()
(define rem 0)
(set! row 0)
(let/ec _break (let loop ()
  (if (< row (cond [(string? chart) (string-length chart)] [(hash? chart) (hash-count chart)] [else (length chart)])) (let/ec _cont
    (if (equal? (if (if chart (if (hash? chart) (hash-ref chart row #f) (list-ref chart (int row))) #f) (if (hash? (if chart (if (hash? chart) (hash-ref chart row #f) (list-ref chart (int row))) #f)) (hash-ref (if chart (if (hash? chart) (hash-ref chart row #f) (list-ref chart (int row))) #f) col #f) (list-ref (if chart (if (hash? chart) (hash-ref chart row #f) (list-ref chart (int row))) #f) (int col))) #f) 1) (let ()
(set! rem row)
) (void))
    (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! select (list-set select (int rem) 1))
) (void))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? select) (string-length select)] [(hash? select) (hash-count select)] [else (length select)])) (let/ec _cont
    (if (equal? (if select (if (hash? select) (hash-ref select i #f) (list-ref select (int i))) #f) 1) (let ()
(define j 0)
(let/ec _break (let loop ()
  (if (< j (cond [(string? (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f)) (string-length (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f))] [(hash? (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f)) (hash-count (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f))] [else (length (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f))])) (let/ec _cont
    (if (equal? (if (if chart (if (hash? chart) (hash-ref chart i #f) (list-ref chart (int i))) #f) (if (hash? (if chart (if (hash? chart) (hash-ref chart i #f) (list-ref chart (int i))) #f)) (hash-ref (if chart (if (hash? chart) (hash-ref chart i #f) (list-ref chart (int i))) #f) j #f) (list-ref (if chart (if (hash? chart) (hash-ref chart i #f) (list-ref chart (int i))) #f) (int j))) #f) 1) (let ()
(define r 0)
(let/ec _break (let loop ()
  (if (< r (cond [(string? chart) (string-length chart)] [(hash? chart) (hash-count chart)] [else (length chart)])) (let/ec _cont
    (set! chart (list-set chart r (list-set (list-ref chart r) j 0)))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! temp (append temp (list (if prime_implicants (if (hash? prime_implicants) (hash-ref prime_implicants i #f) (list-ref prime_implicants (int i))) #f))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if #t (let/ec _cont
    (define counts (list))
    (define r 0)
    (let/ec _break (let loop ()
  (if (< r (cond [(string? chart) (string-length chart)] [(hash? chart) (hash-count chart)] [else (length chart)])) (let/ec _cont
    (set! counts (append counts (list (count_ones (if chart (if (hash? chart) (hash-ref chart r #f) (list-ref chart (int r))) #f)))))
    (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (define max_n (if counts (if (hash? counts) (hash-ref counts 0 #f) (list-ref counts (int 0))) #f))
    (define rem 0)
    (define k 1)
    (let/ec _break (let loop ()
  (if (< k (cond [(string? counts) (string-length counts)] [(hash? counts) (hash-count counts)] [else (length counts)])) (let/ec _cont
    (if (> (if counts (if (hash? counts) (hash-ref counts k #f) (list-ref counts (int k))) #f) max_n) (let ()
(set! max_n (if counts (if (hash? counts) (hash-ref counts k #f) (list-ref counts (int k))) #f))
(set! rem k)
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (equal? max_n 0) (let ()
(_return temp)
) (void))
    (set! temp (append temp (list (if prime_implicants (if (hash? prime_implicants) (hash-ref prime_implicants rem #f) (list-ref prime_implicants (int rem))) #f))))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f)) (string-length (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f))] [(hash? (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f)) (hash-count (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f))] [else (length (if chart (if (hash? chart) (hash-ref chart 0 #f) (list-ref chart (int 0))) #f))])) (let/ec _cont
    (if (equal? (if (if chart (if (hash? chart) (hash-ref chart rem #f) (list-ref chart (int rem))) #f) (if (hash? (if chart (if (hash? chart) (hash-ref chart rem #f) (list-ref chart (int rem))) #f)) (hash-ref (if chart (if (hash? chart) (hash-ref chart rem #f) (list-ref chart (int rem))) #f) j #f) (list-ref (if chart (if (hash? chart) (hash-ref chart rem #f) (list-ref chart (int rem))) #f) (int j))) #f) 1) (let ()
(define r2 0)
(let/ec _break (let loop ()
  (if (< r2 (cond [(string? chart) (string-length chart)] [(hash? chart) (hash-count chart)] [else (length chart)])) (let/ec _cont
    (set! chart (list-set chart r2 (list-set (list-ref chart r2) j 0)))
    (set! r2 (let ([__l r2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (loop)) (void))))
))
)
(define (count_char s ch)
  (let/ec _return (begin
(define cnt 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (if (string=? (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(set! cnt (let ([__l cnt] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return cnt)
))
)
(define (prime_implicant_chart prime_implicants binary)
  (let/ec _return (begin
(define chart (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? prime_implicants) (string-length prime_implicants)] [(hash? prime_implicants) (hash-count prime_implicants)] [else (length prime_implicants)])) (let/ec _cont
    (define row (list))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? binary) (string-length binary)] [(hash? binary) (hash-count binary)] [else (length binary)])) (let/ec _cont
    (set! row (append row (list 0)))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! chart (append chart (list row)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? prime_implicants) (string-length prime_implicants)] [(hash? prime_implicants) (hash-count prime_implicants)] [else (length prime_implicants)])) (let/ec _cont
    (define count (count_char (if prime_implicants (if (hash? prime_implicants) (hash-ref prime_implicants i #f) (list-ref prime_implicants (int i))) #f) "_"))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? binary) (string-length binary)] [(hash? binary) (hash-count binary)] [else (length binary)])) (let/ec _cont
    (if (is_for_table (if prime_implicants (if (hash? prime_implicants) (hash-ref prime_implicants i #f) (list-ref prime_implicants (int i))) #f) (if binary (if (hash? binary) (hash-ref binary j #f) (list-ref binary (int j))) #f) count) (let ()
(set! chart (list-set chart i (list-set (list-ref chart i) j 1)))
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return chart)
))
)
(define (main)
  (let/ec _return (begin
(define no_of_variable 3)
(define minterms (list 1 5 7))
(define binary (decimal_to_binary no_of_variable minterms))
(define prime_implicants (check binary))
(displayln "Prime Implicants are:")
(displayln (format "~a" prime_implicants))
(define chart (prime_implicant_chart prime_implicants binary))
(define essential_prime_implicants (selection chart prime_implicants))
(displayln "Essential Prime Implicants are:")
(displayln (format "~a" essential_prime_implicants))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
