;; Generated by Mochi 0.10.59 on 2025-08-06 16:21 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (get_valid_pos position n)
  (let/ec _return (begin
(define y (if position (if (hash? position) (hash-ref position 0 #f) (list-ref position (int 0))) #f))
(define x (if position (if (hash? position) (hash-ref position 1 #f) (list-ref position (int 1))) #f))
(define positions (list (list (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l x] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (list (- y 1) (let ([__l x] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (list (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- x 2)) (list (- y 1) (- x 2)) (list (let ([__l y] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (list (let ([__l y] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (- x 1)) (list (- y 2) (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (list (- y 2) (- x 1))))
(define permissible (list))
(let/ec _break (let ([idx 0])
  (let loop ()
    (when (< idx (cond [(string? positions) (string-length positions)] [(hash? positions) (hash-count positions)] [else (length positions)]))
(define inner (if positions (if (hash? positions) (hash-ref positions idx #f) (list-ref positions (int idx))) #f))
(define y_test (if inner (if (hash? inner) (hash-ref inner 0 #f) (list-ref inner (int 0))) #f))
(define x_test (if inner (if (hash? inner) (hash-ref inner 1 #f) (list-ref inner (int 1))) #f))
(if (and (and (and (>= y_test 0) (< y_test n)) (>= x_test 0)) (< x_test n)) (let ()
(set! permissible (append permissible (list inner)))
) (void))
      (set! idx (+ idx 1))
      (loop)))
))
(_return permissible)
))
)
(define (is_complete board)
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(string? board) (string-length board)] [(hash? board) (hash-count board)] [else (length board)]))
(define row (if board (if (hash? board) (hash-ref board i #f) (list-ref board (int i))) #f))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j (cond [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)]))
(if (equal? (if row (if (hash? row) (hash-ref row j #f) (list-ref row (int j))) #f) 0) (let ()
(_return #f)
) (void))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(_return #t)
))
)
(define (open_knight_tour_helper board pos curr)
  (let/ec _return (begin
(if (is_complete board) (let ()
(_return #t)
) (void))
(define moves (get_valid_pos pos (cond [(string? board) (string-length board)] [(hash? board) (hash-count board)] [else (length board)])))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(string? moves) (string-length moves)] [(hash? moves) (hash-count moves)] [else (length moves)]))
(define position (if moves (if (hash? moves) (hash-ref moves i #f) (list-ref moves (int i))) #f))
(define y (if position (if (hash? position) (hash-ref position 0 #f) (list-ref position (int 0))) #f))
(define x (if position (if (hash? position) (hash-ref position 1 #f) (list-ref position (int 1))) #f))
(if (equal? (if (if board (if (hash? board) (hash-ref board y #f) (list-ref board (int y))) #f) (if (hash? (if board (if (hash? board) (hash-ref board y #f) (list-ref board (int y))) #f)) (hash-ref (if board (if (hash? board) (hash-ref board y #f) (list-ref board (int y))) #f) x #f) (list-ref (if board (if (hash? board) (hash-ref board y #f) (list-ref board (int y))) #f) (int x))) #f) 0) (let ()
(set! board (list-set board y (list-set (list-ref board y) x (let ([__l curr] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(if (open_knight_tour_helper board position (let ([__l curr] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(_return #t)
) (void))
(set! board (list-set board y (list-set (list-ref board y) x 0)))
) (void))
      (set! i (+ i 1))
      (loop)))
))
(_return #f)
))
)
(define (open_knight_tour n)
  (let/ec _return (begin
(define board (list))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i n)
(define row (list))
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j n)
(set! row (append row (list 0)))
      (set! j (+ j 1))
      (loop)))
))
(set! board (append board (list row)))
      (set! i (+ i 1))
      (loop)))
))
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i n)
(let/ec _break (let ([j 0])
  (let loop ()
    (when (< j n)
(set! board (list-set board i (list-set (list-ref board i) j 1)))
(if (open_knight_tour_helper board (list i j) 1) (let ()
(_return board)
) (void))
(set! board (list-set board i (list-set (list-ref board i) j 0)))
      (set! j (+ j 1))
      (loop)))
))
      (set! i (+ i 1))
      (loop)))
))
(displayln (string-append "Open Knight Tour cannot be performed on a board of size " (format "~a" n)))
(_return board)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(define board (open_knight_tour 1))
(displayln (if (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f) (if (hash? (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f)) (hash-ref (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f) 0 #f) (list-ref (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f) (int 0))) #f))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
