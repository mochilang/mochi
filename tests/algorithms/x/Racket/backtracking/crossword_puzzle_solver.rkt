;; Generated by Mochi 0.10.61 on 2025-08-08 15:45 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (is_valid puzzle word row col vertical)
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not word) 0] [(string? word) (string-length word)] [(hash? word) (hash-count word)] [else (length word)]))
(if vertical (let ()
(if (or (>= (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not puzzle) 0] [(string? puzzle) (string-length puzzle)] [(hash? puzzle) (hash-count puzzle)] [else (length puzzle)])) (not (string=? (if (if puzzle (if (hash? puzzle) (hash-ref puzzle (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref puzzle (int (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (if (hash? (if puzzle (if (hash? puzzle) (hash-ref puzzle (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref puzzle (int (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)) (hash-ref (if puzzle (if (hash? puzzle) (hash-ref puzzle (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref puzzle (int (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) col #f) (list-ref (if puzzle (if (hash? puzzle) (hash-ref puzzle (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref puzzle (int (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) (int col))) #f) ""))) (let ()
(_return #f)
) (void))
) (let ()
(if (or (>= (let ([__l col] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (cond [(not (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f)) 0] [(string? (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f)) (string-length (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f))] [(hash? (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f)) (hash-count (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f))] [else (length (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f))])) (not (string=? (if (if puzzle (if (hash? puzzle) (hash-ref puzzle row #f) (list-ref puzzle (int row))) #f) (if (hash? (if puzzle (if (hash? puzzle) (hash-ref puzzle row #f) (list-ref puzzle (int row))) #f)) (hash-ref (if puzzle (if (hash? puzzle) (hash-ref puzzle row #f) (list-ref puzzle (int row))) #f) (let ([__l col] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref (if puzzle (if (hash? puzzle) (hash-ref puzzle row #f) (list-ref puzzle (int row))) #f) (int (let ([__l col] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f) ""))) (let ()
(_return #f)
) (void))
))
      (set! i (+ i 1))
      (loop)))
))
(_return #t)
))
)
(define (place_word puzzle word row col vertical)
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not word) 0] [(string? word) (string-length word)] [(hash? word) (hash-count word)] [else (length word)]))
(define ch (substring word i (+ i 1)))
(if vertical (let ()
(set! puzzle (list-set puzzle (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref puzzle (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) col ch)))
) (let ()
(set! puzzle (list-set puzzle row (list-set (list-ref puzzle row) (let ([__l col] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) ch)))
))
      (set! i (+ i 1))
      (loop)))
))
))
)
(define (remove_word puzzle word row col vertical)
  (let/ec _return (begin
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not word) 0] [(string? word) (string-length word)] [(hash? word) (hash-count word)] [else (length word)]))
(if vertical (let ()
(set! puzzle (list-set puzzle (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (list-set (list-ref puzzle (let ([__l row] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) col "")))
) (let ()
(set! puzzle (list-set puzzle row (list-set (list-ref puzzle row) (let ([__l col] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "")))
))
      (set! i (+ i 1))
      (loop)))
))
))
)
(define (solve_crossword puzzle words used)
  (let/ec _return (begin
(let/ec _break (let ([row 0])
  (let loop ()
    (when (< row (cond [(not puzzle) 0] [(string? puzzle) (string-length puzzle)] [(hash? puzzle) (hash-count puzzle)] [else (length puzzle)]))
(let/ec _break (let ([col 0])
  (let loop ()
    (when (< col (cond [(not (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f)) 0] [(string? (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f)) (string-length (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f))] [(hash? (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f)) (hash-count (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f))] [else (length (if puzzle (if (hash? puzzle) (hash-ref puzzle 0 #f) (list-ref puzzle (int 0))) #f))]))
(if (string=? (if (if puzzle (if (hash? puzzle) (hash-ref puzzle row #f) (list-ref puzzle (int row))) #f) (if (hash? (if puzzle (if (hash? puzzle) (hash-ref puzzle row #f) (list-ref puzzle (int row))) #f)) (hash-ref (if puzzle (if (hash? puzzle) (hash-ref puzzle row #f) (list-ref puzzle (int row))) #f) col #f) (list-ref (if puzzle (if (hash? puzzle) (hash-ref puzzle row #f) (list-ref puzzle (int row))) #f) (int col))) #f) "") (let ()
(let/ec _break (let ([i 0])
  (let loop ()
    (when (< i (cond [(not words) 0] [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)]))
(if (not (if used (if (hash? used) (hash-ref used i #f) (list-ref used (int i))) #f)) (let ()
(define word (if words (if (hash? words) (hash-ref words i #f) (list-ref words (int i))) #f))
(let/ec _break (for ([vertical (list #t #f)])
  (let/ec _cont
(if (is_valid puzzle word row col vertical) (let ()
(place_word puzzle word row col vertical)
(set! used (list-set used (int i) #t))
(if (solve_crossword puzzle words used) (let ()
(_return #t)
) (void))
(set! used (list-set used (int i) #f))
(remove_word puzzle word row col vertical)
) (void))
  )))
) (void))
      (set! i (+ i 1))
      (loop)))
))
(_return #f)
) (void))
      (set! col (+ col 1))
      (loop)))
))
      (set! row (+ row 1))
      (loop)))
))
(_return #t)
))
)
(define puzzle (list (list "" "" "") (list "" "" "") (list "" "" "")))
(define words (list "cat" "dog" "car"))
(define used (list #f #f #f))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-milliseconds)])
  (let/ec _return (begin
(if (solve_crossword puzzle words used) (let ()
(displayln "Solution found:")
(let/ec _break (for ([row puzzle])
  (let/ec _cont
(displayln row)
  )))
) (let ()
(displayln "No solution found:")
))
    (void)
  ))
  (let* ([_end (current-inexact-milliseconds)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us (inexact->exact (round (* _dur 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
