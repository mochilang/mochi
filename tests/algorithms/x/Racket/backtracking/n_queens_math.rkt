;; Generated by Mochi 0.10.59 on 2025-08-06 20:36 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (contains xs x)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (if (equal? (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f) x) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (repeat s times)
  (let/ec _return (begin
(define result "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i times) (let/ec _cont
    (set! result (string-append result s))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (build_board pos n)
  (let/ec _return (begin
(define board (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? pos) (string-length pos)] [(hash? pos) (hash-count pos)] [else (length pos)])) (let/ec _cont
    (define col (if pos (if (hash? pos) (hash-ref pos i #f) (list-ref pos (int i))) #f))
    (define line (string-append (string-append (_repeat ". " col) "Q ") (_repeat ". " (- (- n 1) col))))
    (set! board (append board (list line)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return board)
))
)
(define (depth_first_search pos dr dl n)
  (let/ec _return (begin
(define row (cond [(string? pos) (string-length pos)] [(hash? pos) (hash-count pos)] [else (length pos)]))
(if (equal? row n) (let ()
(define single (list))
(set! single (append single (list (build_board pos n))))
(_return single)
) (void))
(define boards (list))
(define col 0)
(let/ec _break (let loop ()
  (if (< col n) (let/ec _cont
    (if (or (or (member col pos) (member (- row col) dr)) (member (let ([__l row] [__r col]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) dl)) (let ()
(set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (define result (depth_first_search (append pos (list col)) (append dr (list (- row col))) (append dl (list (let ([__l row] [__r col]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))) n))
    (set! boards (append boards result))
    (set! col (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return boards)
))
)
(define (n_queens_solution n)
  (let/ec _return (begin
(define boards (depth_first_search (list) (list) (list) n))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? boards) (string-length boards)] [(hash? boards) (hash-count boards)] [else (length boards)])) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? (if boards (if (hash? boards) (hash-ref boards i #f) (list-ref boards (int i))) #f)) (string-length (if boards (if (hash? boards) (hash-ref boards i #f) (list-ref boards (int i))) #f))] [(hash? (if boards (if (hash? boards) (hash-ref boards i #f) (list-ref boards (int i))) #f)) (hash-count (if boards (if (hash? boards) (hash-ref boards i #f) (list-ref boards (int i))) #f))] [else (length (if boards (if (hash? boards) (hash-ref boards i #f) (list-ref boards (int i))) #f))])) (let/ec _cont
    (displayln (if (if boards (if (hash? boards) (hash-ref boards i #f) (list-ref boards (int i))) #f) (if (hash? (if boards (if (hash? boards) (hash-ref boards i #f) (list-ref boards (int i))) #f)) (hash-ref (if boards (if (hash? boards) (hash-ref boards i #f) (list-ref boards (int i))) #f) j #f) (list-ref (if boards (if (hash? boards) (hash-ref boards i #f) (list-ref boards (int i))) #f) (int j))) #f))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (displayln "")
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(displayln (string-join (map (lambda (x) (format "~a" x)) (list (cond [(string? boards) (string-length boards)] [(hash? boards) (hash-count boards)] [else (length boards)]) "solutions were found.")) " "))
(_return (cond [(string? boards) (string-length boards)] [(hash? boards) (hash-count boards)] [else (length boards)]))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(n_queens_solution 4)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
