;; Generated by Mochi 0.10.59 on 2025-08-06 20:36 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (read-line))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (contains xs x)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? xs) (string-length xs)] [(hash? xs) (hash-count xs)] [else (length xs)])) (let/ec _cont
    (if (equal? (if xs (if (hash? xs) (hash-ref xs i #f) (list-ref xs (int i))) #f) x) (let ()
(_return #t)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (get_point_key len_board len_board_column row column)
  (let/ec _return (begin
(_return (let ([__l (* (* len_board len_board_column) row)] [__r column]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (search_from board word row column word_index visited)
  (let/ec _return (begin
(if (not (string=? (if (if board (if (hash? board) (hash-ref board row #f) (list-ref board (int row))) #f) (if (hash? (if board (if (hash? board) (hash-ref board row #f) (list-ref board (int row))) #f)) (hash-ref (if board (if (hash? board) (hash-ref board row #f) (list-ref board (int row))) #f) column #f) (list-ref (if board (if (hash? board) (hash-ref board row #f) (list-ref board (int row))) #f) (int column))) #f) (slice word word_index (let ([__l word_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) (let ()
(_return #f)
) (void))
(if (equal? word_index (- (cond [(string? word) (string-length word)] [(hash? word) (hash-count word)] [else (length word)]) 1)) (let ()
(_return #t)
) (void))
(define len_board (cond [(string? board) (string-length board)] [(hash? board) (hash-count board)] [else (length board)]))
(define len_board_column (cond [(string? (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f)) (string-length (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f))] [(hash? (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f)) (hash-count (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f))] [else (length (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f))]))
(define dir_i (list 0 0 (- 1) 1))
(define dir_j (list 1 (- 1) 0 0))
(define k 0)
(let/ec _break (let loop ()
  (if (< k 4) (let/ec _cont
    (define next_i (let ([__l row] [__r (if dir_i (if (hash? dir_i) (hash-ref dir_i k #f) (list-ref dir_i (int k))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (define next_j (let ([__l column] [__r (if dir_j (if (hash? dir_j) (hash-ref dir_j k #f) (list-ref dir_j (int k))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (if (not (and (and (and (<= 0 next_i) (< next_i len_board)) (<= 0 next_j)) (< next_j len_board_column))) (let ()
(set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (define key (get_point_key len_board len_board_column next_i next_j))
    (if (member key visited) (let ()
(set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_cont)
) (void))
    (define new_visited (append visited (list key)))
    (if (search_from board word next_i next_j (let ([__l word_index] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) new_visited) (let ()
(_return #t)
) (void))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (word_exists board word)
  (let/ec _return (begin
(define len_board (cond [(string? board) (string-length board)] [(hash? board) (hash-count board)] [else (length board)]))
(define len_board_column (cond [(string? (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f)) (string-length (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f))] [(hash? (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f)) (hash-count (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f))] [else (length (if board (if (hash? board) (hash-ref board 0 #f) (list-ref board (int 0))) #f))]))
(define i 0)
(let/ec _break (let loop ()
  (if (< i len_board) (let/ec _cont
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j len_board_column) (let/ec _cont
    (define key (get_point_key len_board len_board_column i j))
    (define visited (append (list) (list key)))
    (if (search_from board word i j 0 visited) (let ()
(_return #t)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return #f)
))
)
(define (main)
  (let/ec _return (begin
(define board (list (list "A" "B" "C" "E") (list "S" "F" "C" "S") (list "A" "D" "E" "E")))
(displayln (word_exists board "ABCCED"))
(displayln (word_exists board "SEE"))
(displayln (word_exists board "ABCB"))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
