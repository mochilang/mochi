;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define si_positive (list (hash "name" "yotta" "exp" 24) (hash "name" "zetta" "exp" 21) (hash "name" "exa" "exp" 18) (hash "name" "peta" "exp" 15) (hash "name" "tera" "exp" 12) (hash "name" "giga" "exp" 9) (hash "name" "mega" "exp" 6) (hash "name" "kilo" "exp" 3) (hash "name" "hecto" "exp" 2) (hash "name" "deca" "exp" 1)))
(define si_negative (list (hash "name" "deci" "exp" (- 1)) (hash "name" "centi" "exp" (- 2)) (hash "name" "milli" "exp" (- 3)) (hash "name" "micro" "exp" (- 6)) (hash "name" "nano" "exp" (- 9)) (hash "name" "pico" "exp" (- 12)) (hash "name" "femto" "exp" (- 15)) (hash "name" "atto" "exp" (- 18)) (hash "name" "zepto" "exp" (- 21)) (hash "name" "yocto" "exp" (- 24))))
(define binary_prefixes (list (hash "name" "yotta" "exp" 80) (hash "name" "zetta" "exp" 70) (hash "name" "exa" "exp" 60) (hash "name" "peta" "exp" 50) (hash "name" "tera" "exp" 40) (hash "name" "giga" "exp" 30) (hash "name" "mega" "exp" 20) (hash "name" "kilo" "exp" 10)))
(define (pow base exp)
  (let/ec _return (begin
(define result 1.0)
(define e exp)
(if (< e 0) (let ()
(set! e (- e))
(define i 0)
(let/ec _break (let loop ()
  (if (< i e) (let/ec _cont
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (/ 1.0 result))
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (< i e) (let/ec _cont
    (set! result (* result base))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (add_si_prefix value)
  (let/ec _return (begin
(define prefixes (list))
(if (> value 0.0) (let ()
(set! prefixes si_positive)
) (let ()
(set! prefixes si_negative)
))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? prefixes) (string-length prefixes)] [(hash? prefixes) (hash-count prefixes)] [else (length prefixes)])) (let/ec _cont
    (define p (if prefixes (if (hash? prefixes) (hash-ref prefixes i #f) (list-ref prefixes (int i))) #f))
    (define num (/ value (expt 10.0 (if p (hash-ref p "exp" #f) #f))))
    (if (> num 1.0) (let ()
(_return (string-append (string-append (format "~a" num) " ") (if p (hash-ref p "name" #f) #f)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (format "~a" value))
))
)
(define (add_binary_prefix value)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? binary_prefixes) (string-length binary_prefixes)] [(hash? binary_prefixes) (hash-count binary_prefixes)] [else (length binary_prefixes)])) (let/ec _cont
    (define p (if binary_prefixes (if (hash? binary_prefixes) (hash-ref binary_prefixes i #f) (list-ref binary_prefixes (int i))) #f))
    (define num (/ value (expt 2.0 (if p (hash-ref p "exp" #f) #f))))
    (if (> num 1.0) (let ()
(_return (string-append (string-append (format "~a" num) " ") (if p (hash-ref p "name" #f) #f)))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (format "~a" value))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (add_si_prefix 10000.0))
(displayln (add_si_prefix 0.005))
(displayln (add_binary_prefix 65536.0))
(displayln (add_binary_prefix 512.0))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
