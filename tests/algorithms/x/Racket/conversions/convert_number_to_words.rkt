;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define ones (list "zero" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine"))
(define teens (list "ten" "eleven" "twelve" "thirteen" "fourteen" "fifteen" "sixteen" "seventeen" "eighteen" "nineteen"))
(define tens (list "" "" "twenty" "thirty" "forty" "fifty" "sixty" "seventy" "eighty" "ninety"))
(define short_powers (list 15 12 9 6 3 2))
(define short_units (list "quadrillion" "trillion" "billion" "million" "thousand" "hundred"))
(define long_powers (list 15 9 6 3 2))
(define long_units (list "billiard" "milliard" "million" "thousand" "hundred"))
(define indian_powers (list 14 12 7 5 3 2))
(define indian_units (list "crore crore" "lakh crore" "crore" "lakh" "thousand" "hundred"))
(define (pow10 exp)
  (let/ec _return (begin
(define res 1)
(define i 0)
(let/ec _break (let loop ()
  (if (< i exp) (let/ec _cont
    (set! res (* res 10))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (max_value system)
  (let/ec _return (begin
(if (string=? system "short") (let ()
(_return (- (pow10 18) 1))
) (void))
(if (string=? system "long") (let ()
(_return (- (pow10 21) 1))
) (void))
(if (string=? system "indian") (let ()
(_return (- (pow10 19) 1))
) (void))
(_return 0)
))
)
(define (join_words words)
  (let/ec _return (begin
(define res "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? words) (string-length words)] [(hash? words) (hash-count words)] [else (length words)])) (let/ec _cont
    (if (> i 0) (let ()
(set! res (string-append res " "))
) (void))
    (set! res (string-append res (if words (if (hash? words) (hash-ref words i #f) (list-ref words (int i))) #f)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return res)
))
)
(define (convert_small_number num)
  (let/ec _return (begin
(if (< num 0) (let ()
(_return "")
) (void))
(if (>= num 100) (let ()
(_return "")
) (void))
(define tens_digit (quotient num 10))
(define ones_digit (modulo num 10))
(if (equal? tens_digit 0) (let ()
(_return (if ones (if (hash? ones) (hash-ref ones ones_digit #f) (list-ref ones (int ones_digit))) #f))
) (void))
(if (equal? tens_digit 1) (let ()
(_return (if teens (if (hash? teens) (hash-ref teens ones_digit #f) (list-ref teens (int ones_digit))) #f))
) (void))
(define hyphen (if (> ones_digit 0) "-" ""))
(define tail (if (> ones_digit 0) (if ones (if (hash? ones) (hash-ref ones ones_digit #f) (list-ref ones (int ones_digit))) #f) ""))
(_return (string-append (string-append (if tens (if (hash? tens) (hash-ref tens tens_digit #f) (list-ref tens (int tens_digit))) #f) hyphen) tail))
))
)
(define (convert_number num system)
  (let/ec _return (begin
(define word_groups (list))
(define n num)
(if (< n 0) (let ()
(set! word_groups (append word_groups (list "negative")))
(set! n (- n))
) (void))
(if (> n (max_value system)) (let ()
(_return "")
) (void))
(define powers (list))
(define units (list))
(if (string=? system "short") (let ()
(set! powers short_powers)
(set! units short_units)
) (let ()
(if (string=? system "long") (let ()
(set! powers long_powers)
(set! units long_units)
) (let ()
(if (string=? system "indian") (let ()
(set! powers indian_powers)
(set! units indian_units)
) (let ()
(_return "")
))
))
))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? powers) (string-length powers)] [(hash? powers) (hash-count powers)] [else (length powers)])) (let/ec _cont
    (define power (if powers (if (hash? powers) (hash-ref powers i #f) (list-ref powers (int i))) #f))
    (define unit (if units (if (hash? units) (hash-ref units i #f) (list-ref units (int i))) #f))
    (define divisor (pow10 power))
    (define digit_group (quotient n divisor))
    (set! n (modulo n divisor))
    (if (> digit_group 0) (let ()
(define word_group (if (>= digit_group 100) (convert_number digit_group system) (convert_small_number digit_group)))
(set! word_groups (append word_groups (list (string-append (string-append word_group " ") unit))))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if (or (> n 0) (equal? (cond [(string? word_groups) (string-length word_groups)] [(hash? word_groups) (hash-count word_groups)] [else (length word_groups)]) 0)) (let ()
(set! word_groups (append word_groups (list (convert_small_number n))))
) (void))
(define joined (join_words word_groups))
(_return joined)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (convert_number 123456789012345 "short"))
(displayln (convert_number 123456789012345 "long"))
(displayln (convert_number 123456789012345 "indian"))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
