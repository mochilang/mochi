;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (absf x)
  (let/ec _return (begin
(if (< x 0.0) (let ()
(_return (- x))
) (void))
(_return x)
))
)
(define (fmod a b)
  (let/ec _return (begin
(_return (- a (* b (int (/ a b)))))
))
)
(define (roundf x)
  (let/ec _return (begin
(if (>= x 0.0) (let ()
(_return (int (let ([__l x] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (void))
(_return (int (- x 0.5)))
))
)
(define (maxf a b c)
  (let/ec _return (begin
(define m a)
(if (> b m) (let ()
(set! m b)
) (void))
(if (> c m) (let ()
(set! m c)
) (void))
(_return m)
))
)
(define (minf a b c)
  (let/ec _return (begin
(define m a)
(if (< b m) (let ()
(set! m b)
) (void))
(if (< c m) (let ()
(set! m c)
) (void))
(_return m)
))
)
(define (hsv_to_rgb hue saturation value)
  (let/ec _return (begin
(if (or (< hue 0.0) (> hue 360.0)) (let ()
(displayln "hue should be between 0 and 360")
(_return (list))
) (void))
(if (or (< saturation 0.0) (> saturation 1.0)) (let ()
(displayln "saturation should be between 0 and 1")
(_return (list))
) (void))
(if (or (< value 0.0) (> value 1.0)) (let ()
(displayln "value should be between 0 and 1")
(_return (list))
) (void))
(define chroma (* value saturation))
(define hue_section (/ hue 60.0))
(define second_largest_component (* chroma (- 1.0 (absf (- (fmod hue_section 2.0) 1.0)))))
(define match_value (- value chroma))
(define red 0)
(define green 0)
(define blue 0)
(if (and (>= hue_section 0.0) (<= hue_section 1.0)) (let ()
(set! red (roundf (* 255.0 (let ([__l chroma] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! green (roundf (* 255.0 (let ([__l second_largest_component] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! blue (roundf (* 255.0 match_value)))
) (let ()
(if (and (> hue_section 1.0) (<= hue_section 2.0)) (let ()
(set! red (roundf (* 255.0 (let ([__l second_largest_component] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! green (roundf (* 255.0 (let ([__l chroma] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! blue (roundf (* 255.0 match_value)))
) (let ()
(if (and (> hue_section 2.0) (<= hue_section 3.0)) (let ()
(set! red (roundf (* 255.0 match_value)))
(set! green (roundf (* 255.0 (let ([__l chroma] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! blue (roundf (* 255.0 (let ([__l second_largest_component] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (let ()
(if (and (> hue_section 3.0) (<= hue_section 4.0)) (let ()
(set! red (roundf (* 255.0 match_value)))
(set! green (roundf (* 255.0 (let ([__l second_largest_component] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! blue (roundf (* 255.0 (let ([__l chroma] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (let ()
(if (and (> hue_section 4.0) (<= hue_section 5.0)) (let ()
(set! red (roundf (* 255.0 (let ([__l second_largest_component] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! green (roundf (* 255.0 match_value)))
(set! blue (roundf (* 255.0 (let ([__l chroma] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
) (let ()
(set! red (roundf (* 255.0 (let ([__l chroma] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(set! green (roundf (* 255.0 match_value)))
(set! blue (roundf (* 255.0 (let ([__l second_largest_component] [__r match_value]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
))
))
))
))
))
(_return (list red green blue))
))
)
(define (rgb_to_hsv red green blue)
  (let/ec _return (begin
(if (or (< red 0) (> red 255)) (let ()
(displayln "red should be between 0 and 255")
(_return (list))
) (void))
(if (or (< green 0) (> green 255)) (let ()
(displayln "green should be between 0 and 255")
(_return (list))
) (void))
(if (or (< blue 0) (> blue 255)) (let ()
(displayln "blue should be between 0 and 255")
(_return (list))
) (void))
(define float_red (/ red 255.0))
(define float_green (/ green 255.0))
(define float_blue (/ blue 255.0))
(define value (maxf float_red float_green float_blue))
(define min_val (minf float_red float_green float_blue))
(define chroma (- value min_val))
(define saturation (if (equal? value 0.0) 0.0 (/ chroma value)))
(define hue 0.0)
(if (equal? chroma 0.0) (let ()
(set! hue 0.0)
) (let ()
(if (equal? value float_red) (let ()
(set! hue (* 60.0 (let ([__l 0.0] [__r (/ (- float_green float_blue) chroma)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(if (equal? value float_green) (let ()
(set! hue (* 60.0 (let ([__l 2.0] [__r (/ (- float_blue float_red) chroma)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
) (let ()
(set! hue (* 60.0 (let ([__l 4.0] [__r (/ (- float_red float_green) chroma)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
))
))
(set! hue (fmod (let ([__l hue] [__r 360.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 360.0))
(_return (list hue saturation value))
))
)
(define (approximately_equal_hsv hsv1 hsv2)
  (let/ec _return (begin
(define check_hue (< (absf (- (if hsv1 (if (hash? hsv1) (hash-ref hsv1 0 #f) (list-ref hsv1 (int 0))) #f) (if hsv2 (if (hash? hsv2) (hash-ref hsv2 0 #f) (list-ref hsv2 (int 0))) #f))) 0.2))
(define check_saturation (< (absf (- (if hsv1 (if (hash? hsv1) (hash-ref hsv1 1 #f) (list-ref hsv1 (int 1))) #f) (if hsv2 (if (hash? hsv2) (hash-ref hsv2 1 #f) (list-ref hsv2 (int 1))) #f))) 0.002))
(define check_value (< (absf (- (if hsv1 (if (hash? hsv1) (hash-ref hsv1 2 #f) (list-ref hsv1 (int 2))) #f) (if hsv2 (if (hash? hsv2) (hash-ref hsv2 2 #f) (list-ref hsv2 (int 2))) #f))) 0.002))
(_return (and (and check_hue check_saturation) check_value))
))
)
(define rgb (hsv_to_rgb 180.0 0.5 0.5))
(define hsv (rgb_to_hsv 64 128 128))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" rgb))
(displayln (format "~a" hsv))
(displayln (format "~a" (approximately_equal_hsv hsv (list 180.0 0.5 0.5))))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
