;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (panic_ msg)
  (let/ec _return (begin
(displayln msg)
))
)
(define (trim_spaces s)
  (let/ec _return (begin
(define start 0)
(define end (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]))
(let/ec _break (let loop ()
  (if (and (< start end) (string=? (slice s start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ")) (let/ec _cont
    (set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (and (> end start) (string=? (slice s (- end 1) end) " ")) (let/ec _cont
    (set! end (- end 1))
    (loop)) (void))))
(_return (slice s start end))
))
)
(define (hex_digit_value ch)
  (let/ec _return (begin
(if (string=? ch "0") (let ()
(_return 0)
) (void))
(if (string=? ch "1") (let ()
(_return 1)
) (void))
(if (string=? ch "2") (let ()
(_return 2)
) (void))
(if (string=? ch "3") (let ()
(_return 3)
) (void))
(if (string=? ch "4") (let ()
(_return 4)
) (void))
(if (string=? ch "5") (let ()
(_return 5)
) (void))
(if (string=? ch "6") (let ()
(_return 6)
) (void))
(if (string=? ch "7") (let ()
(_return 7)
) (void))
(if (string=? ch "8") (let ()
(_return 8)
) (void))
(if (string=? ch "9") (let ()
(_return 9)
) (void))
(if (or (string=? ch "a") (string=? ch "A")) (let ()
(_return 10)
) (void))
(if (or (string=? ch "b") (string=? ch "B")) (let ()
(_return 11)
) (void))
(if (or (string=? ch "c") (string=? ch "C")) (let ()
(_return 12)
) (void))
(if (or (string=? ch "d") (string=? ch "D")) (let ()
(_return 13)
) (void))
(if (or (string=? ch "e") (string=? ch "E")) (let ()
(_return 14)
) (void))
(if (or (string=? ch "f") (string=? ch "F")) (let ()
(_return 15)
) (void))
(panic_ "Invalid value was passed to the function")
))
)
(define (hex_to_bin hex_num)
  (let/ec _return (begin
(define trimmed (trim_spaces hex_num))
(if (equal? (cond [(string? trimmed) (string-length trimmed)] [(hash? trimmed) (hash-count trimmed)] [else (length trimmed)]) 0) (let ()
(panic_ "No value was passed to the function")
) (void))
(define s trimmed)
(define is_negative #f)
(if (string=? (slice s 0 1) "-") (let ()
(set! is_negative #t)
(set! s (slice s 1 (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
) (void))
(define int_num 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define val (hex_digit_value ch))
    (set! int_num (let ([__l (* int_num 16)] [__r val]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define bin_str "")
(define n int_num)
(if (equal? n 0) (let ()
(set! bin_str "0")
) (void))
(let/ec _break (let loop ()
  (if (> n 0) (let/ec _cont
    (set! bin_str (string-append (format "~a" (modulo n 2)) bin_str))
    (set! n (quotient n 2))
    (loop)) (void))))
(define result (int bin_str))
(if is_negative (let ()
(set! result (- result))
) (void))
(_return result)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (format "~a" (hex_to_bin "AC")))
(displayln (format "~a" (hex_to_bin "9A4")))
(displayln (format "~a" (hex_to_bin "   12f   ")))
(displayln (format "~a" (hex_to_bin "FfFf")))
(displayln (format "~a" (hex_to_bin "-fFfF")))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
