;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define hex_digits "0123456789abcdef")
(define (split_by_dot s)
  (let/ec _return (begin
(define res (list))
(define current "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define c (substring s i (+ i 1)))
    (if (string=? c ".") (let ()
(set! res (append res (list current)))
(set! current "")
) (let ()
(set! current (string-append current c))
))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! res (append res (list current)))
(_return res)
))
)
(define (parse_decimal s)
  (let/ec _return (begin
(if (equal? (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (let ()
(panic "Invalid IPv4 address format")
) (void))
(define value 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define c (substring s i (+ i 1)))
    (if (or (string<? c "0") (string>? c "9")) (let ()
(panic "Invalid IPv4 address format")
) (void))
    (set! value (let ([__l (* value 10)] [__r (int c)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return value)
))
)
(define (to_hex2 n)
  (let/ec _return (begin
(define x n)
(define res "")
(let/ec _break (let loop ()
  (if (> x 0) (let/ec _cont
    (define d (modulo x 16))
    (set! res (string-append (substring hex_digits d (+ d 1)) res))
    (set! x (quotient x 16))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (< (cond [(string? res) (string-length res)] [(hash? res) (hash-count res)] [else (length res)]) 2) (let/ec _cont
    (set! res (string-append "0" res))
    (loop)) (void))))
(_return res)
))
)
(define (ipv4_to_decimal ipv4_address)
  (let/ec _return (begin
(define parts (split_by_dot ipv4_address))
(if (not (equal? (cond [(string? parts) (string-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)]) 4)) (let ()
(panic "Invalid IPv4 address format")
) (void))
(define result 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i 4) (let/ec _cont
    (define oct (parse_decimal (if parts (if (hash? parts) (hash-ref parts i #f) (list-ref parts (int i))) #f)))
    (if (or (< oct 0) (> oct 255)) (let ()
(panic (string-append "Invalid IPv4 octet " (format "~a" oct)))
) (void))
    (set! result (let ([__l (* result 256)] [__r oct]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (alt_ipv4_to_decimal ipv4_address)
  (let/ec _return (begin
(define parts (split_by_dot ipv4_address))
(if (not (equal? (cond [(string? parts) (string-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)]) 4)) (let ()
(panic "Invalid IPv4 address format")
) (void))
(define hex_str "")
(define i 0)
(let/ec _break (let loop ()
  (if (< i 4) (let/ec _cont
    (define oct (parse_decimal (if parts (if (hash? parts) (hash-ref parts i #f) (list-ref parts (int i))) #f)))
    (if (or (< oct 0) (> oct 255)) (let ()
(panic (string-append "Invalid IPv4 octet " (format "~a" oct)))
) (void))
    (set! hex_str (string-append hex_str (to_hex2 oct)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define value 0)
(define k 0)
(let/ec _break (let loop ()
  (if (< k (cond [(string? hex_str) (string-length hex_str)] [(hash? hex_str) (hash-count hex_str)] [else (length hex_str)])) (let/ec _cont
    (define c (substring hex_str k (+ k 1)))
    (define digit (- 0 1))
    (define j 0)
    (let/ec _break (let loop ()
  (if (< j (cond [(string? hex_digits) (string-length hex_digits)] [(hash? hex_digits) (hash-count hex_digits)] [else (length hex_digits)])) (let/ec _cont
    (if (string=? (substring hex_digits j (+ j 1)) c) (let ()
(set! digit j)
) (void))
    (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
    (if (< digit 0) (let ()
(panic "Invalid hex digit")
) (void))
    (set! value (let ([__l (* value 16)] [__r digit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return value)
))
)
(define (decimal_to_ipv4 decimal_ipv4)
  (let/ec _return (begin
(if (or (< decimal_ipv4 0) (> decimal_ipv4 4294967295)) (let ()
(panic "Invalid decimal IPv4 address")
) (void))
(define n decimal_ipv4)
(define parts (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i 4) (let/ec _cont
    (define octet (modulo n 256))
    (set! parts (append parts (list (format "~a" octet))))
    (set! n (quotient n 256))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define res "")
(define j (- (cond [(string? parts) (string-length parts)] [(hash? parts) (hash-count parts)] [else (length parts)]) 1))
(let/ec _break (let loop ()
  (if (>= j 0) (let/ec _cont
    (set! res (string-append res (if parts (if (hash? parts) (hash-ref parts j #f) (list-ref parts (int j))) #f)))
    (if (> j 0) (let ()
(set! res (string-append res "."))
) (void))
    (set! j (- j 1))
    (loop)) (void))))
(_return res)
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (ipv4_to_decimal "192.168.0.1"))
(displayln (ipv4_to_decimal "10.0.0.255"))
(displayln (alt_ipv4_to_decimal "192.168.0.1"))
(displayln (alt_ipv4_to_decimal "10.0.0.255"))
(displayln (decimal_to_ipv4 3232235521))
(displayln (decimal_to_ipv4 167772415))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
