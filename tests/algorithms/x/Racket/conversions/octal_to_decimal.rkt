;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (panic_ msg)
  (let/ec _return (begin
(displayln msg)
))
)
(define (trim_spaces s)
  (let/ec _return (begin
(define start 0)
(define end (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1))
(let/ec _break (let loop ()
  (if (and (<= start end) (string=? (slice s start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ")) (let/ec _cont
    (set! start (let ([__l start] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (and (>= end start) (string=? (slice s end (let ([__l end] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) " ")) (let/ec _cont
    (set! end (- end 1))
    (loop)) (void))))
(if (> start end) (let ()
(_return "")
) (void))
(_return (slice s start (let ([__l end] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (char_to_digit ch)
  (let/ec _return (begin
(if (string=? ch "0") (let ()
(_return 0)
) (void))
(if (string=? ch "1") (let ()
(_return 1)
) (void))
(if (string=? ch "2") (let ()
(_return 2)
) (void))
(if (string=? ch "3") (let ()
(_return 3)
) (void))
(if (string=? ch "4") (let ()
(_return 4)
) (void))
(if (string=? ch "5") (let ()
(_return 5)
) (void))
(if (string=? ch "6") (let ()
(_return 6)
) (void))
(if (string=? ch "7") (let ()
(_return 7)
) (void))
(panic_ "Non-octal value was passed to the function")
(_return 0)
))
)
(define (oct_to_decimal oct_string)
  (let/ec _return (begin
(define s (trim_spaces oct_string))
(if (equal? (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (let ()
(panic_ "Empty string was passed to the function")
(_return 0)
) (void))
(define is_negative #f)
(if (string=? (slice s 0 1) "-") (let ()
(set! is_negative #t)
(set! s (slice s 1 (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
) (void))
(if (equal? (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (let ()
(panic_ "Non-octal value was passed to the function")
(_return 0)
) (void))
(define decimal_number 0)
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])) (let/ec _cont
    (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define digit (char_to_digit ch))
    (set! decimal_number (let ([__l (* 8 decimal_number)] [__r digit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(if is_negative (let ()
(set! decimal_number (- decimal_number))
) (void))
(_return decimal_number)
))
)
(define (main)
  (let/ec _return (begin
(displayln (format "~a" (oct_to_decimal "1")))
(displayln (format "~a" (oct_to_decimal "-1")))
(displayln (format "~a" (oct_to_decimal "12")))
(displayln (format "~a" (oct_to_decimal " 12   ")))
(displayln (format "~a" (oct_to_decimal "-45")))
(displayln (format "~a" (oct_to_decimal "0")))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
