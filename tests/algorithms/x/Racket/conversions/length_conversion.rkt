;; Generated by Mochi 0.10.59 on 2025-08-06 22:47 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define stdout (hash "write" (lambda (s) (display s))))

(define (rstrip_s s)
  (let/ec _return (begin
(if (and (> (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 0) (string=? (substring s (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1) (+ (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1) 1)) "s")) (let ()
(_return (slice s 0 (- (cond [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 1)))
) (void))
(_return s)
))
)
(define (normalize_alias u)
  (let/ec _return (begin
(if (string=? u "millimeter") (let ()
(_return "mm")
) (void))
(if (string=? u "centimeter") (let ()
(_return "cm")
) (void))
(if (string=? u "meter") (let ()
(_return "m")
) (void))
(if (string=? u "kilometer") (let ()
(_return "km")
) (void))
(if (string=? u "inch") (let ()
(_return "in")
) (void))
(if (string=? u "inche") (let ()
(_return "in")
) (void))
(if (string=? u "feet") (let ()
(_return "ft")
) (void))
(if (string=? u "foot") (let ()
(_return "ft")
) (void))
(if (string=? u "yard") (let ()
(_return "yd")
) (void))
(if (string=? u "mile") (let ()
(_return "mi")
) (void))
(_return u)
))
)
(define (has_unit u)
  (let/ec _return (begin
(_return (or (or (or (or (or (or (or (string=? u "mm") (string=? u "cm")) (string=? u "m")) (string=? u "km")) (string=? u "in")) (string=? u "ft")) (string=? u "yd")) (string=? u "mi")))
))
)
(define (from_factor u)
  (let/ec _return (begin
(if (string=? u "mm") (let ()
(_return 0.001)
) (void))
(if (string=? u "cm") (let ()
(_return 0.01)
) (void))
(if (string=? u "m") (let ()
(_return 1.0)
) (void))
(if (string=? u "km") (let ()
(_return 1000.0)
) (void))
(if (string=? u "in") (let ()
(_return 0.0254)
) (void))
(if (string=? u "ft") (let ()
(_return 0.3048)
) (void))
(if (string=? u "yd") (let ()
(_return 0.9144)
) (void))
(if (string=? u "mi") (let ()
(_return 1609.34)
) (void))
(_return 0.0)
))
)
(define (to_factor u)
  (let/ec _return (begin
(if (string=? u "mm") (let ()
(_return 1000.0)
) (void))
(if (string=? u "cm") (let ()
(_return 100.0)
) (void))
(if (string=? u "m") (let ()
(_return 1.0)
) (void))
(if (string=? u "km") (let ()
(_return 0.001)
) (void))
(if (string=? u "in") (let ()
(_return 39.3701)
) (void))
(if (string=? u "ft") (let ()
(_return 3.28084)
) (void))
(if (string=? u "yd") (let ()
(_return 1.09361)
) (void))
(if (string=? u "mi") (let ()
(_return 0.000621371)
) (void))
(_return 0.0)
))
)
(define (length_conversion value from_type to_type)
  (let/ec _return (begin
(define new_from (normalize_alias (rstrip_s (lower from_type))))
(define new_to (normalize_alias (rstrip_s (lower to_type))))
(if (not (has_unit new_from)) (let ()
(panic (string-append (string-append "Invalid 'from_type' value: '" from_type) "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
) (void))
(if (not (has_unit new_to)) (let ()
(panic (string-append (string-append "Invalid 'to_type' value: '" to_type) "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"))
) (void))
(_return (* (* value (from_factor new_from)) (to_factor new_to)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (length_conversion 4.0 "METER" "FEET"))
(displayln (length_conversion 1.0 "kilometer" "inch"))
(displayln (length_conversion 2.0 "feet" "meter"))
(displayln (length_conversion 2.0 "centimeter" "millimeter"))
(displayln (length_conversion 4.0 "yard" "kilometer"))
(displayln (length_conversion 3.0 "foot" "inch"))
(displayln (length_conversion 3.0 "mm" "in"))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
