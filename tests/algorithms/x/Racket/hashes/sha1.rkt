;; Generated by Mochi 0.10.66 on 2025-08-15 15:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define MOD 4294967296)
(define ASCII " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
(define (ord ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not ASCII) 0] [(string? ASCII) (string-length ASCII)] [(hash? ASCII) (hash-count ASCII)] [else (length ASCII)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (slice ASCII i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) ch) (let ()
(_return (let ([__l 32] [__r i]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return 0)
))
)
(define (pow2 n)
  (let/ec _return (begin
(define res 1)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (* res 2))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (bit_and a b)
  (let/ec _return (begin
(define x a)
(define y b)
(define res 0)
(define bit 1)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 32]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (and (equal? (modulo x 2) 1) (equal? (modulo y 2) 1)) (let ()
(set! res (let ([__l res] [__r bit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! x (floor (/ x 2)))
      (set! y (floor (/ y 2)))
      (set! bit (* bit 2))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (bit_or a b)
  (let/ec _return (begin
(define x a)
(define y b)
(define res 0)
(define bit 1)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 32]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define abit (modulo x 2))
      (define bbit (modulo y 2))
      (if (or (equal? abit 1) (equal? bbit 1)) (let ()
(set! res (let ([__l res] [__r bit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! x (floor (/ x 2)))
      (set! y (floor (/ y 2)))
      (set! bit (* bit 2))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (bit_xor a b)
  (let/ec _return (begin
(define x a)
(define y b)
(define res 0)
(define bit 1)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 32]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define abit (modulo x 2))
      (define bbit (modulo y 2))
      (if (or (and (equal? abit 1) (equal? bbit 0)) (and (equal? abit 0) (equal? bbit 1))) (let ()
(set! res (let ([__l res] [__r bit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! x (floor (/ x 2)))
      (set! y (floor (/ y 2)))
      (set! bit (* bit 2))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (bit_not a)
  (let/ec _return (begin
(_return (- (- MOD 1) a))
))
)
(define (rotate_left n b)
  (let/ec _return (begin
(define left (modulo (* n (pow2 b)) MOD))
(define right (floor (/ n (pow2 (- 32 b)))))
(_return (modulo (let ([__l left] [__r right]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) MOD))
))
)
(define (to_hex32 n)
  (let/ec _return (begin
(define digits "0123456789abcdef")
(define num n)
(define s "")
(if (equal? num 0) (let ()
(set! s "0")
) (void))
(let/ec _break (let loop ()
  (if (let ([__l num] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define d (modulo num 16))
      (set! s (string-append (slice digits d (let ([__l d] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) s))
      (set! num (floor (/ num 16)))
    )
    (loop)) (void))))
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])] [__r 8]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! s (string-append "0" s))
    )
    (loop)) (void))))
(if (let ([__l (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])] [__r 8]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(set! s (slice s (- (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)]) 8) (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])))
) (void))
(_return s)
))
)
(define (sha1 message)
  (let/ec _return (begin
(define bytes (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not message) 0] [(string? message) (string-length message)] [(hash? message) (hash-count message)] [else (length message)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! bytes (append (or bytes (list)) (list (ord (slice message i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! bytes (append (or bytes (list)) (list 128)))
(let/ec _break (let loop ()
  (if (not (equal? (modulo (let ([__l (cond [(not bytes) 0] [(string? bytes) (string-length bytes)] [(hash? bytes) (hash-count bytes)] [else (length bytes)])] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 64) 0)) (begin
    (let/ec _cont
      (set! bytes (append (or bytes (list)) (list 0)))
    )
    (loop)) (void))))
(define bit_len (* (cond [(not message) 0] [(string? message) (string-length message)] [(hash? message) (hash-count message)] [else (length message)]) 8))
(define len_bytes (list 0 0 0 0 0 0 0 0))
(define bl bit_len)
(define k 7)
(let/ec _break (let loop ()
  (if (let ([__l k] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! len_bytes (list-set len_bytes (int k) (modulo bl 256)))
      (set! bl (floor (/ bl 256)))
      (set! k (- k 1))
    )
    (loop)) (void))))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r 8]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! bytes (append (or bytes (list)) (list (if len_bytes (if (hash? len_bytes) (hash-ref len_bytes j #f) (safe-index len_bytes (int j))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define blocks (list))
(define pos 0)
(let/ec _break (let loop ()
  (if (let ([__l pos] [__r (cond [(not bytes) 0] [(string? bytes) (string-length bytes)] [(hash? bytes) (hash-count bytes)] [else (length bytes)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define block (list))
      (define j2 0)
      (let/ec _break (let loop ()
  (if (let ([__l j2] [__r 64]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! block (append (or block (list)) (list (if bytes (if (hash? bytes) (hash-ref bytes (let ([__l pos] [__r j2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index bytes (int (let ([__l pos] [__r j2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))))
      (set! j2 (let ([__l j2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! blocks (append (or blocks (list)) (list block)))
      (set! pos (let ([__l pos] [__r 64]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define h0 1732584193)
(define h1 4023233417)
(define h2 2562383102)
(define h3 271733878)
(define h4 3285377520)
(define bindex 0)
(let/ec _break (let loop ()
  (if (let ([__l bindex] [__r (cond [(not blocks) 0] [(string? blocks) (string-length blocks)] [(hash? blocks) (hash-count blocks)] [else (length blocks)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define block (if blocks (if (hash? blocks) (hash-ref blocks bindex #f) (safe-index blocks (int bindex))) #f))
      (define w (list))
      (define t 0)
      (let/ec _break (let loop ()
  (if (let ([__l t] [__r 16]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define j3 (* t 4))
      (define word (let ([__l (* (let ([__l (* (let ([__l (* (if block (if (hash? block) (hash-ref block j3 #f) (safe-index block (int j3))) #f) 256)] [__r (if block (if (hash? block) (hash-ref block (let ([__l j3] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index block (int (let ([__l j3] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 256)] [__r (if block (if (hash? block) (hash-ref block (let ([__l j3] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index block (int (let ([__l j3] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 256)] [__r (if block (if (hash? block) (hash-ref block (let ([__l j3] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (safe-index block (int (let ([__l j3] [__r 3]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! w (append (or w (list)) (list word)))
      (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (let/ec _break (let loop ()
  (if (let ([__l t] [__r 80]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define tmp (bit_xor (bit_xor (bit_xor (if w (if (hash? w) (hash-ref w (- t 3) #f) (safe-index w (int (- t 3)))) #f) (if w (if (hash? w) (hash-ref w (- t 8) #f) (safe-index w (int (- t 8)))) #f)) (if w (if (hash? w) (hash-ref w (- t 14) #f) (safe-index w (int (- t 14)))) #f)) (if w (if (hash? w) (hash-ref w (- t 16) #f) (safe-index w (int (- t 16)))) #f)))
      (set! w (append (or w (list)) (list (rotate_left tmp 1))))
      (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define a h0)
      (define b h1)
      (define c h2)
      (define d h3)
      (define e h4)
      (define i2 0)
      (let/ec _break (let loop ()
  (if (let ([__l i2] [__r 80]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define f 0)
      (define kconst 0)
      (if (let ([__l i2] [__r 20]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! f (bit_or (bit_and b c) (bit_and (bit_not b) d)))
(set! kconst 1518500249)
) (let ()
(if (let ([__l i2] [__r 40]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! f (bit_xor (bit_xor b c) d))
(set! kconst 1859775393)
) (let ()
(if (let ([__l i2] [__r 60]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! f (bit_or (bit_or (bit_and b c) (bit_and b d)) (bit_and c d)))
(set! kconst 2400959708)
) (let ()
(set! f (bit_xor (bit_xor b c) d))
(set! kconst 3395469782)
))
))
))
      (define temp (modulo (let ([__l (let ([__l (let ([__l (let ([__l (rotate_left a 5)] [__r f]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r e]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r kconst]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (if w (if (hash? w) (hash-ref w i2 #f) (safe-index w (int i2))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) MOD))
      (set! e d)
      (set! d c)
      (set! c (rotate_left b 30))
      (set! b a)
      (set! a temp)
      (set! i2 (let ([__l i2] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! h0 (modulo (let ([__l h0] [__r a]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) MOD))
      (set! h1 (modulo (let ([__l h1] [__r b]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) MOD))
      (set! h2 (modulo (let ([__l h2] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) MOD))
      (set! h3 (modulo (let ([__l h3] [__r d]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) MOD))
      (set! h4 (modulo (let ([__l h4] [__r e]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) MOD))
      (set! bindex (let ([__l bindex] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([__l (let ([__l (let ([__l (let ([__l (to_hex32 h0)] [__r (to_hex32 h1)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (to_hex32 h2)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (to_hex32 h3)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (to_hex32 h4)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
)
(define (main)
  (let/ec _return (begin
(displayln (sha1 "Test String"))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
