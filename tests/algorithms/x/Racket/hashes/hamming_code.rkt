;; Generated by Mochi 0.10.66 on 2025-08-15 15:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (index_of s ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (if (hash? s) (hash-ref s i #f) (substring s (int i) (+ (int i) 1))) ch) (let ()
(_return i)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (- 1))
))
)
(define (ord ch)
  (let/ec _return (begin
(define upper_ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower_ "abcdefghijklmnopqrstuvwxyz")
(define idx (index_of upper_ ch))
(if (let ([__l idx] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(_return (let ([__l 65] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(set! idx (index_of lower_ ch))
(if (let ([__l idx] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(_return (let ([__l 97] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
(_return 0)
))
)
(define (chr n)
  (let/ec _return (begin
(define upper_ "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(define lower_ "abcdefghijklmnopqrstuvwxyz")
(if (and (let ([__l n] [__r 65]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l n] [__r 91]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(_return (slice upper_ (- n 65) (- n 64)))
) (void))
(if (and (let ([__l n] [__r 97]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ([__l n] [__r 123]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ()
(_return (slice lower_ (- n 97) (- n 96)))
) (void))
(_return "?")
))
)
(define (text_to_bits text)
  (let/ec _return (begin
(define bits "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not text) 0] [(string? text) (string-length text)] [(hash? text) (hash-count text)] [else (length text)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define code (ord (if (hash? text) (hash-ref text i #f) (substring text (int i) (+ (int i) 1)))))
      (define j 7)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p (pow2 j))
      (if (equal? (modulo (floor (/ code p)) 2) 1) (let ()
(set! bits (string-append bits "1"))
) (let ()
(set! bits (string-append bits "0"))
))
      (set! j (- j 1))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return bits)
))
)
(define (text_from_bits bits)
  (let/ec _return (begin
(define text "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not bits) 0] [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define code 0)
      (define j 0)
      (let/ec _break (let loop ()
  (if (and (let ([__l j] [__r 8]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r (cond [(not bits) 0] [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (begin
    (let/ec _cont
      (set! code (* code 2))
      (if (string=? (if (hash? bits) (hash-ref bits (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (substring bits (int (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (+ (int (let ([__l i] [__r j]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 1))) "1") (let ()
(set! code (let ([__l code] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! text (string-append text (chr code)))
      (set! i (let ([__l i] [__r 8]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return text)
))
)
(define (bool_to_string b)
  (let/ec _return (begin
(if b (let ()
(_return "True")
) (void))
(_return "False")
))
)
(define (string_to_bitlist s)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (string=? (if (hash? s) (hash-ref s i #f) (substring s (int i) (+ (int i) 1))) "1") (let ()
(set! res (append (or res (list)) (list 1)))
) (let ()
(set! res (append (or res (list)) (list 0)))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (bitlist_to_string bits)
  (let/ec _return (begin
(define s "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not bits) 0] [(string? bits) (string-length bits)] [(hash? bits) (hash-count bits)] [else (length bits)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? (if bits (if (hash? bits) (hash-ref bits i #f) (safe-index bits (int i))) #f) 1) (let ()
(set! s (string-append s "1"))
) (let ()
(set! s (string-append s "0"))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return s)
))
)
(define (is_power_of_two x)
  (let/ec _return (begin
(if (let ([__l x] [__r 1]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return #f)
) (void))
(define p 1)
(let/ec _break (let loop ()
  (if (let ([__l p] [__r x]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! p (* p 2))
    )
    (loop)) (void))))
(_return (equal? p x))
))
)
(define (list_eq a b)
  (let/ec _return (begin
(if (not (equal? (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if b (if (hash? b) (hash-ref b i #f) (safe-index b (int i))) #f))) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (pow2 e)
  (let/ec _return (begin
(define res 1)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r e]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (* res 2))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (has_bit n b)
  (let/ec _return (begin
(define p (pow2 b))
(if (equal? (modulo (floor (/ n p)) 2) 1) (let ()
(_return #t)
) (void))
(_return #f)
))
)
(define (hamming_encode r data_bits)
  (let/ec _return (begin
(define total (let ([__l r] [__r (cond [(not data_bits) 0] [(string? data_bits) (string-length data_bits)] [(hash? data_bits) (hash-count data_bits)] [else (length data_bits)])]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(define data_ord (list))
(define cont_data 0)
(define x 1)
(let/ec _break (let loop ()
  (if (let ([__l x] [__r total]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (is_power_of_two x) (let ()
(set! data_ord (append (or data_ord (list)) (list (- 1))))
) (let ()
(set! data_ord (append (or data_ord (list)) (list (if data_bits (if (hash? data_bits) (hash-ref data_bits cont_data #f) (safe-index data_bits (int cont_data))) #f))))
(set! cont_data (let ([__l cont_data] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
      (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define parity (list))
(define bp 0)
(let/ec _break (let loop ()
  (if (let ([__l bp] [__r r]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define cont_bo 0)
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not data_ord) 0] [(string? data_ord) (string-length data_ord)] [(hash? data_ord) (hash-count data_ord)] [else (length data_ord)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define bit (if data_ord (if (hash? data_ord) (hash-ref data_ord j #f) (safe-index data_ord (int j))) #f))
      (if (let ([__l bit] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(define pos (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (and (has_bit pos bp) (equal? bit 1)) (let ()
(set! cont_bo (let ([__l cont_bo] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! parity (append (or parity (list)) (list (modulo cont_bo 2))))
      (set! bp (let ([__l bp] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define result (list))
(define cont_bp 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not data_ord) 0] [(string? data_ord) (string-length data_ord)] [(hash? data_ord) (hash-count data_ord)] [else (length data_ord)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if data_ord (if (hash? data_ord) (hash-ref data_ord i #f) (safe-index data_ord (int i))) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! result (append (or result (list)) (list (if parity (if (hash? parity) (hash-ref parity cont_bp #f) (safe-index parity (int cont_bp))) #f))))
(set! cont_bp (let ([__l cont_bp] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (let ()
(set! result (append (or result (list)) (list (if data_ord (if (hash? data_ord) (hash-ref data_ord i #f) (safe-index data_ord (int i))) #f))))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (hamming_decode r code)
  (let/ec _return (begin
(define data_output (list))
(define parity_received (list))
(define i 1)
(define idx 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not code) 0] [(string? code) (string-length code)] [(hash? code) (hash-count code)] [else (length code)])]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (is_power_of_two i) (let ()
(set! parity_received (append (or parity_received (list)) (list (if code (if (hash? code) (hash-ref code idx #f) (safe-index code (int idx))) #f))))
) (let ()
(set! data_output (append (or data_output (list)) (list (if code (if (hash? code) (hash-ref code idx #f) (safe-index code (int idx))) #f))))
))
      (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define recomputed (hamming_encode r data_output))
(define parity_calc (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not recomputed) 0] [(string? recomputed) (string-length recomputed)] [(hash? recomputed) (hash-count recomputed)] [else (length recomputed)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (is_power_of_two (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (let ()
(set! parity_calc (append (or parity_calc (list)) (list (if recomputed (if (hash? recomputed) (hash-ref recomputed j #f) (safe-index recomputed (int j))) #f))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define ack (list_eq parity_received parity_calc))
(_return (let ([h (make-hash)]) (hash-set! h "data" data_output) (hash-set! h "ack" ack) h))
))
)
(define (main)
  (let/ec _return (begin
(define sizePari 4)
(define be 2)
(define text "Message01")
(define binary (text_to_bits text))
(displayln (string-append (string-append "Text input in binary is '" binary) "'"))
(define data_bits (string_to_bitlist binary))
(define encoded (hamming_encode sizePari data_bits))
(displayln (string-append "Data converted ----------> " (bitlist_to_string encoded)))
(define decoded (hamming_decode sizePari encoded))
(displayln (string-append (string-append (string-append "Data receive ------------> " (bitlist_to_string (if decoded (hash-ref decoded "data" #f) #f))) " -- Data integrity: ") (bool_to_string (if decoded (hash-ref decoded "ack" #f) #f))))
(define corrupted (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not encoded) 0] [(string? encoded) (string-length encoded)] [(hash? encoded) (hash-count encoded)] [else (length encoded)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! corrupted (append (or corrupted (list)) (list (if encoded (if (hash? encoded) (hash-ref encoded i #f) (safe-index encoded (int i))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define pos (- be 1))
(if (equal? (if corrupted (if (hash? corrupted) (hash-ref corrupted pos #f) (safe-index corrupted (int pos))) #f) 0) (let ()
(set! corrupted (list-set corrupted (int pos) 1))
) (let ()
(set! corrupted (list-set corrupted (int pos) 0))
))
(define decoded_err (hamming_decode sizePari corrupted))
(displayln (string-append (string-append (string-append "Data receive (error) ----> " (bitlist_to_string (if decoded_err (hash-ref decoded_err "data" #f) #f))) " -- Data integrity: ") (bool_to_string (if decoded_err (hash-ref decoded_err "ack" #f) #f))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
