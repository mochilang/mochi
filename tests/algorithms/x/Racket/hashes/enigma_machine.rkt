;; Generated by Mochi 0.10.60 on 2025-08-08 10:32 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define ASCII " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}")
(define (build_alphabet)
  (let/ec _return (begin
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not ASCII) 0] [(string? ASCII) (string-length ASCII)] [(hash? ASCII) (hash-count ASCII)] [else (length ASCII)])) (let/ec _cont
    (set! result (append result (list (substring ASCII i (+ i 1)))))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define (range_list n)
  (let/ec _return (begin
(define lst (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i n) (let/ec _cont
    (set! lst (append lst (list i)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return lst)
))
)
(define (reversed_range_list n)
  (let/ec _return (begin
(define lst (list))
(define i (- n 1))
(let/ec _break (let loop ()
  (if (>= i 0) (let/ec _cont
    (set! lst (append lst (list i)))
    (set! i (- i 1))
    (loop)) (void))))
(_return lst)
))
)
(define (index_of_char lst ch)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not lst) 0] [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (if (string=? (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f) ch) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (index_of_int lst value)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(not lst) 0] [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (if (equal? (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f) value) (let ()
(_return i)
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return (- 1))
))
)
(define (enigma_encrypt message token)
  (let/ec _return (begin
(define alphabets (build_alphabet))
(define n (cond [(not alphabets) 0] [(string? alphabets) (string-length alphabets)] [(hash? alphabets) (hash-count alphabets)] [else (length alphabets)]))
(define gear_one (range_list n))
(define gear_two (range_list n))
(define gear_three (range_list n))
(define reflector (reversed_range_list n))
(define gear_one_pos 0)
(define gear_two_pos 0)
(define gear_three_pos 0)
(define (rotator)
  (let/ec _return (begin
(define i (if gear_one (if (hash? gear_one) (hash-ref gear_one 0 #f) (list-ref gear_one (int 0))) #f))
(set! gear_one (slice gear_one 1 (cond [(not gear_one) 0] [(string? gear_one) (string-length gear_one)] [(hash? gear_one) (hash-count gear_one)] [else (length gear_one)])))
(set! gear_one (append gear_one (list i)))
(set! gear_one_pos (let ([__l gear_one_pos] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? (modulo gear_one_pos n) 0) (let ()
(set! i (if gear_two (if (hash? gear_two) (hash-ref gear_two 0 #f) (list-ref gear_two (int 0))) #f))
(set! gear_two (slice gear_two 1 (cond [(not gear_two) 0] [(string? gear_two) (string-length gear_two)] [(hash? gear_two) (hash-count gear_two)] [else (length gear_two)])))
(set! gear_two (append gear_two (list i)))
(set! gear_two_pos (let ([__l gear_two_pos] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (equal? (modulo gear_two_pos n) 0) (let ()
(set! i (if gear_three (if (hash? gear_three) (hash-ref gear_three 0 #f) (list-ref gear_three (int 0))) #f))
(set! gear_three (slice gear_three 1 (cond [(not gear_three) 0] [(string? gear_three) (string-length gear_three)] [(hash? gear_three) (hash-count gear_three)] [else (length gear_three)])))
(set! gear_three (append gear_three (list i)))
(set! gear_three_pos (let ([__l gear_three_pos] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
) (void))
))
)
(define (engine ch)
  (let/ec _return (begin
(define target (index_of_char alphabets ch))
(set! target (if gear_one (if (hash? gear_one) (hash-ref gear_one target #f) (list-ref gear_one (int target))) #f))
(set! target (if gear_two (if (hash? gear_two) (hash-ref gear_two target #f) (list-ref gear_two (int target))) #f))
(set! target (if gear_three (if (hash? gear_three) (hash-ref gear_three target #f) (list-ref gear_three (int target))) #f))
(set! target (if reflector (if (hash? reflector) (hash-ref reflector target #f) (list-ref reflector (int target))) #f))
(set! target (index_of_int gear_three target))
(set! target (index_of_int gear_two target))
(set! target (index_of_int gear_one target))
(rotator)
(_return (if alphabets (if (hash? alphabets) (hash-ref alphabets target #f) (list-ref alphabets (int target))) #f))
))
)
(define t 0)
(let/ec _break (let loop ()
  (if (< t token) (let/ec _cont
    (rotator)
    (set! t (let ([__l t] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(define result "")
(define idx 0)
(let/ec _break (let loop ()
  (if (< idx (cond [(not message) 0] [(string? message) (string-length message)] [(hash? message) (hash-count message)] [else (length message)])) (let/ec _cont
    (set! result (string-append result (engine (substring message idx (+ idx 1)))))
    (set! idx (let ([__l idx] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return result)
))
)
(define message "HELLO WORLD")
(define token 123)
(define encoded (enigma_encrypt message token))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln encoded)
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
