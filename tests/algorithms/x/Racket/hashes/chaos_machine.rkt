;; Generated by Mochi 0.10.66 on 2025-08-15 15:17 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define K (list 0.33 0.44 0.55 0.44 0.33))
(define t 3)
(define size 5)
(define (round_dec x n)
  (let/ec _return (begin
(define m10 1.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! m10 (* m10 10.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define y (let ([__l (* x m10)] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (/ (* 1.0 (int y)) m10))
))
)
(define (reset)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "buffer" K) (hash-set! h "params" (list 0.0 0.0 0.0 0.0 0.0)) (hash-set! h "time" 0) h))
))
)
(define (push m seed)
  (let/ec _return (begin
(define buf (if m (hash-ref m "buffer" #f) #f))
(define par (if m (hash-ref m "params" #f) #f))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not buf) 0] [(string? buf) (string-length buf)] [(hash? buf) (hash-count buf)] [else (length buf)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define value (if buf (if (hash? buf) (hash-ref buf i #f) (safe-index buf (int i))) #f))
      (define e (/ (* 1.0 seed) value))
      (define next_value (let ([__l (if buf (if (hash? buf) (hash-ref buf (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) size) #f) (safe-index buf (int (modulo (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) size)))) #f)] [__r e]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! next_value (- next_value (* 1.0 (int next_value))))
      (define r (let ([__l (if par (if (hash? par) (hash-ref par i #f) (safe-index par (int i))) #f)] [__r e]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! r (- r (* 1.0 (int r))))
      (set! r (let ([__l r] [__r 3.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! buf (list-set buf (int i) (round_dec (* (* r next_value) (- 1.0 next_value)) 10)))
      (set! par (list-set par (int i) r))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "buffer" buf) (hash-set! h "params" par) (hash-set! h "time" (let ([__l (if m (hash-ref m "time" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
))
)
(define (xor a b)
  (let/ec _return (begin
(define aa a)
(define bb b)
(define res 0)
(define bit 1)
(let/ec _break (let loop ()
  (if (or (let ([__l aa] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ([__l bb] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))]))) (begin
    (let/ec _cont
      (define abit (modulo aa 2))
      (define bbit (modulo bb 2))
      (if (not (equal? abit bbit)) (let ()
(set! res (let ([__l res] [__r bit]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! aa (floor (/ aa 2)))
      (set! bb (floor (/ bb 2)))
      (set! bit (* bit 2))
    )
    (loop)) (void))))
(_return res)
))
)
(define (xorshift x y)
  (let/ec _return (begin
(define xv x)
(define yv y)
(set! xv (xor xv (floor (/ yv 8192))))
(set! yv (xor yv (* xv 131072)))
(set! xv (xor xv (floor (/ yv 32))))
(_return xv)
))
)
(define (pull m)
  (let/ec _return (begin
(define buf (if m (hash-ref m "buffer" #f) #f))
(define par (if m (hash-ref m "params" #f) #f))
(define key (modulo (if m (hash-ref m "time" #f) #f) size))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r t]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define r (if par (if (hash? par) (hash-ref par key #f) (safe-index par (int key))) #f))
      (define value (if buf (if (hash? buf) (hash-ref buf key #f) (safe-index buf (int key))) #f))
      (set! buf (list-set buf (int key) (round_dec (* (* r value) (- 1.0 value)) 10)))
      (define new_r (let ([__l (* (* 1.0 (if m (hash-ref m "time" #f) #f)) 0.01)] [__r (* r 1.01)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! new_r (- new_r (* 1.0 (int new_r))))
      (set! par (list-set par (int key) (let ([__l new_r] [__r 3.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define x (int (* (if buf (if (hash? buf) (hash-ref buf (modulo (let ([__l key] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) size) #f) (safe-index buf (int (modulo (let ([__l key] [__r 2]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) size)))) #f) 10000000000.0)))
(define y (int (* (if buf (if (hash? buf) (hash-ref buf (modulo (- (let ([__l key] [__r size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2) size) #f) (safe-index buf (int (modulo (- (let ([__l key] [__r size]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2) size)))) #f) 10000000000.0)))
(define new_machine (let ([h (make-hash)]) (hash-set! h "buffer" buf) (hash-set! h "params" par) (hash-set! h "time" (let ([__l (if m (hash-ref m "time" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
(define value (modulo (xorshift x y) 4294967295))
(_return (let ([h (make-hash)]) (hash-set! h "value" value) (hash-set! h "machine" new_machine) h))
))
)
(define machine (reset))
(define i 0)
(define res (pull machine))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 100]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! machine (push machine i))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln (if res (hash-ref res "value" #f) #f))
(displayln (if (if res (hash-ref res "machine" #f) #f) (hash-ref (if res (hash-ref res "machine" #f) #f) "buffer" #f) #f))
(displayln (if (if res (hash-ref res "machine" #f) #f) (hash-ref (if res (hash-ref res "machine" #f) #f) "params" #f) #f))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
