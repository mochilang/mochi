;; Generated by Mochi 0.10.64 on 2025-08-12 13:41 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (make_matrix values)
  (let/ec _return (begin
(define r (cond [(not values) 0] [(string? values) (string-length values)] [(hash? values) (hash-count values)] [else (length values)]))
(if (equal? r 0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "data" (list)) (hash-set! h "rows" 0) (hash-set! h "cols" 0) h))
) (void))
(define c (cond [(not (if values (if (hash? values) (hash-ref values 0 #f) (safe-index values (int 0))) #f)) 0] [(string? (if values (if (hash? values) (hash-ref values 0 #f) (safe-index values (int 0))) #f)) (string-length (if values (if (hash? values) (hash-ref values 0 #f) (safe-index values (int 0))) #f))] [(hash? (if values (if (hash? values) (hash-ref values 0 #f) (safe-index values (int 0))) #f)) (hash-count (if values (if (hash? values) (hash-ref values 0 #f) (safe-index values (int 0))) #f))] [else (length (if values (if (hash? values) (hash-ref values 0 #f) (safe-index values (int 0))) #f))]))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r r]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? (cond [(not (if values (if (hash? values) (hash-ref values i #f) (safe-index values (int i))) #f)) 0] [(string? (if values (if (hash? values) (hash-ref values i #f) (safe-index values (int i))) #f)) (string-length (if values (if (hash? values) (hash-ref values i #f) (safe-index values (int i))) #f))] [(hash? (if values (if (hash? values) (hash-ref values i #f) (safe-index values (int i))) #f)) (hash-count (if values (if (hash? values) (hash-ref values i #f) (safe-index values (int i))) #f))] [else (length (if values (if (hash? values) (hash-ref values i #f) (safe-index values (int i))) #f))]) c)) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "data" (list)) (hash-set! h "rows" 0) (hash-set! h "cols" 0) h))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" values) (hash-set! h "rows" r) (hash-set! h "cols" c) h))
))
)
(define (matrix_columns m)
  (let/ec _return (begin
(define cols (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (if m (hash-ref m "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define col (list))
      (define i 0)
      (let/ec _break (let loop ()
  (if (let ([__l i] [__r (if m (hash-ref m "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! col (append (or col (list)) (list (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) j #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) (int j))) #f))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! cols (append (or cols (list)) (list col)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return cols)
))
)
(define (matrix_identity m)
  (let/ec _return (begin
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if m (hash-ref m "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (if m (hash-ref m "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define v (if (equal? i j) 1.0 0.0))
      (set! row (append (or row (list)) (list v)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! vals (append (or vals (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" vals) (hash-set! h "rows" (if m (hash-ref m "rows" #f) #f)) (hash-set! h "cols" (if m (hash-ref m "cols" #f) #f)) h))
))
)
(define (matrix_minor m r c)
  (let/ec _return (begin
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if m (hash-ref m "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? i r)) (let ()
(define row (list))
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (if m (hash-ref m "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? j c)) (let ()
(set! row (append (or row (list)) (list (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) j #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) (int j))) #f))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! vals (append (or vals (list)) (list row)))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define sub (let ([h (make-hash)]) (hash-set! h "data" vals) (hash-set! h "rows" (- (if m (hash-ref m "rows" #f) #f) 1)) (hash-set! h "cols" (- (if m (hash-ref m "cols" #f) #f) 1)) h))
(_return (matrix_determinant sub))
))
)
(define (matrix_cofactor m r c)
  (let/ec _return (begin
(define minor (matrix_minor m r c))
(if (equal? (modulo (let ([__l r] [__r c]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2) 0) (let ()
(_return minor)
) (void))
(_return (* (- 1.0) minor))
))
)
(define (matrix_minors m)
  (let/ec _return (begin
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if m (hash-ref m "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (if m (hash-ref m "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (matrix_minor m i j))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! vals (append (or vals (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" vals) (hash-set! h "rows" (if m (hash-ref m "rows" #f) #f)) (hash-set! h "cols" (if m (hash-ref m "cols" #f) #f)) h))
))
)
(define (matrix_cofactors m)
  (let/ec _return (begin
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if m (hash-ref m "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (if m (hash-ref m "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (matrix_cofactor m i j))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! vals (append (or vals (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" vals) (hash-set! h "rows" (if m (hash-ref m "rows" #f) #f)) (hash-set! h "cols" (if m (hash-ref m "cols" #f) #f)) h))
))
)
(define (matrix_determinant m)
  (let/ec _return (begin
(if (not (equal? (if m (hash-ref m "rows" #f) #f) (if m (hash-ref m "cols" #f) #f))) (let ()
(_return 0.0)
) (void))
(if (equal? (if m (hash-ref m "rows" #f) #f) 0) (let ()
(_return 0.0)
) (void))
(if (equal? (if m (hash-ref m "rows" #f) #f) 1) (let ()
(_return (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) 0 #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) (int 0))) #f))
) (void))
(if (equal? (if m (hash-ref m "rows" #f) #f) 2) (let ()
(_return (- (* (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) 0 #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) (int 0))) #f) (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 1))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 1))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 1))) #f) 1 #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 1))) #f) (int 1))) #f)) (* (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) 1 #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) (int 1))) #f) (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 1))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 1))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 1))) #f) 0 #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 1 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 1))) #f) (int 0))) #f))))
) (void))
(define sum 0.0)
(define j 0)
(let/ec _break (let loop ()
  (if (let ([__l j] [__r (if m (hash-ref m "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (* (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) j #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) 0 #f) (safe-index (if m (hash-ref m "data" #f) #f) (int 0))) #f) (int j))) #f) (matrix_cofactor m 0 j))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (matrix_is_invertible m)
  (let/ec _return (begin
(_return (not (equal? (matrix_determinant m) 0.0)))
))
)
(define (matrix_adjugate m)
  (let/ec _return (begin
(define cof (matrix_cofactors m))
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if m (hash-ref m "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (if m (hash-ref m "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (if (if (if cof (hash-ref cof "data" #f) #f) (if (hash? (if cof (hash-ref cof "data" #f) #f)) (hash-ref (if cof (hash-ref cof "data" #f) #f) j #f) (safe-index (if cof (hash-ref cof "data" #f) #f) (int j))) #f) (if (hash? (if (if cof (hash-ref cof "data" #f) #f) (if (hash? (if cof (hash-ref cof "data" #f) #f)) (hash-ref (if cof (hash-ref cof "data" #f) #f) j #f) (safe-index (if cof (hash-ref cof "data" #f) #f) (int j))) #f)) (hash-ref (if (if cof (hash-ref cof "data" #f) #f) (if (hash? (if cof (hash-ref cof "data" #f) #f)) (hash-ref (if cof (hash-ref cof "data" #f) #f) j #f) (safe-index (if cof (hash-ref cof "data" #f) #f) (int j))) #f) i #f) (safe-index (if (if cof (hash-ref cof "data" #f) #f) (if (hash? (if cof (hash-ref cof "data" #f) #f)) (hash-ref (if cof (hash-ref cof "data" #f) #f) j #f) (safe-index (if cof (hash-ref cof "data" #f) #f) (int j))) #f) (int i))) #f))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! vals (append (or vals (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" vals) (hash-set! h "rows" (if m (hash-ref m "rows" #f) #f)) (hash-set! h "cols" (if m (hash-ref m "cols" #f) #f)) h))
))
)
(define (matrix_inverse m)
  (let/ec _return (begin
(define det (matrix_determinant m))
(if (equal? det 0.0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "data" (list)) (hash-set! h "rows" 0) (hash-set! h "cols" 0) h))
) (void))
(define adj (matrix_adjugate m))
(_return (matrix_mul_scalar adj (/ 1.0 det)))
))
)
(define (matrix_add_row m row)
  (let/ec _return (begin
(define newData (if m (hash-ref m "data" #f) #f))
(set! newData (append (or newData (list)) (list row)))
(_return (let ([h (make-hash)]) (hash-set! h "data" newData) (hash-set! h "rows" (let ([__l (if m (hash-ref m "rows" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "cols" (if m (hash-ref m "cols" #f) #f)) h))
))
)
(define (matrix_add_column m col)
  (let/ec _return (begin
(define newData (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if m (hash-ref m "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! newData (append (or newData (list)) (list (append (or (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) (list)) (list (if col (if (hash? col) (hash-ref col i #f) (safe-index col (int i))) #f))))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" newData) (hash-set! h "rows" (if m (hash-ref m "rows" #f) #f)) (hash-set! h "cols" (let ([__l (if m (hash-ref m "cols" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
))
)
(define (matrix_mul_scalar m s)
  (let/ec _return (begin
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if m (hash-ref m "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (if m (hash-ref m "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (* (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) j #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) (int j))) #f) s))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! vals (append (or vals (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" vals) (hash-set! h "rows" (if m (hash-ref m "rows" #f) #f)) (hash-set! h "cols" (if m (hash-ref m "cols" #f) #f)) h))
))
)
(define (matrix_neg m)
  (let/ec _return (begin
(_return (matrix_mul_scalar m (- 1.0)))
))
)
(define (matrix_add a b)
  (let/ec _return (begin
(if (or (not (equal? (if a (hash-ref a "rows" #f) #f) (if b (hash-ref b "rows" #f) #f))) (not (equal? (if a (hash-ref a "cols" #f) #f) (if b (hash-ref b "cols" #f) #f)))) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "data" (list)) (hash-set! h "rows" 0) (hash-set! h "cols" 0) h))
) (void))
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if a (hash-ref a "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (if a (hash-ref a "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (let ([__l (if (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (safe-index (if a (hash-ref a "data" #f) #f) (int i))) #f) (if (hash? (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (safe-index (if a (hash-ref a "data" #f) #f) (int i))) #f)) (hash-ref (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (safe-index (if a (hash-ref a "data" #f) #f) (int i))) #f) j #f) (safe-index (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (safe-index (if a (hash-ref a "data" #f) #f) (int i))) #f) (int j))) #f)] [__r (if (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (safe-index (if b (hash-ref b "data" #f) #f) (int i))) #f) (if (hash? (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (safe-index (if b (hash-ref b "data" #f) #f) (int i))) #f)) (hash-ref (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (safe-index (if b (hash-ref b "data" #f) #f) (int i))) #f) j #f) (safe-index (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (safe-index (if b (hash-ref b "data" #f) #f) (int i))) #f) (int j))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! vals (append (or vals (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" vals) (hash-set! h "rows" (if a (hash-ref a "rows" #f) #f)) (hash-set! h "cols" (if a (hash-ref a "cols" #f) #f)) h))
))
)
(define (matrix_sub a b)
  (let/ec _return (begin
(if (or (not (equal? (if a (hash-ref a "rows" #f) #f) (if b (hash-ref b "rows" #f) #f))) (not (equal? (if a (hash-ref a "cols" #f) #f) (if b (hash-ref b "cols" #f) #f)))) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "data" (list)) (hash-set! h "rows" 0) (hash-set! h "cols" 0) h))
) (void))
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if a (hash-ref a "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (if a (hash-ref a "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (- (if (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (safe-index (if a (hash-ref a "data" #f) #f) (int i))) #f) (if (hash? (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (safe-index (if a (hash-ref a "data" #f) #f) (int i))) #f)) (hash-ref (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (safe-index (if a (hash-ref a "data" #f) #f) (int i))) #f) j #f) (safe-index (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (safe-index (if a (hash-ref a "data" #f) #f) (int i))) #f) (int j))) #f) (if (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (safe-index (if b (hash-ref b "data" #f) #f) (int i))) #f) (if (hash? (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (safe-index (if b (hash-ref b "data" #f) #f) (int i))) #f)) (hash-ref (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (safe-index (if b (hash-ref b "data" #f) #f) (int i))) #f) j #f) (safe-index (if (if b (hash-ref b "data" #f) #f) (if (hash? (if b (hash-ref b "data" #f) #f)) (hash-ref (if b (hash-ref b "data" #f) #f) i #f) (safe-index (if b (hash-ref b "data" #f) #f) (int i))) #f) (int j))) #f)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! vals (append (or vals (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" vals) (hash-set! h "rows" (if a (hash-ref a "rows" #f) #f)) (hash-set! h "cols" (if a (hash-ref a "cols" #f) #f)) h))
))
)
(define (matrix_dot row col)
  (let/ec _return (begin
(define sum 0.0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (* (if row (if (hash? row) (hash-ref row i #f) (safe-index row (int i))) #f) (if col (if (hash? col) (hash-ref col i #f) (safe-index col (int i))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (matrix_mul a b)
  (let/ec _return (begin
(if (not (equal? (if a (hash-ref a "cols" #f) #f) (if b (hash-ref b "rows" #f) #f))) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "data" (list)) (hash-set! h "rows" 0) (hash-set! h "cols" 0) h))
) (void))
(define bcols (matrix_columns b))
(define vals (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if a (hash-ref a "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (if b (hash-ref b "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list (matrix_dot (if (if a (hash-ref a "data" #f) #f) (if (hash? (if a (hash-ref a "data" #f) #f)) (hash-ref (if a (hash-ref a "data" #f) #f) i #f) (safe-index (if a (hash-ref a "data" #f) #f) (int i))) #f) (if bcols (if (hash? bcols) (hash-ref bcols j #f) (safe-index bcols (int j))) #f)))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! vals (append (or vals (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (let ([h (make-hash)]) (hash-set! h "data" vals) (hash-set! h "rows" (if a (hash-ref a "rows" #f) #f)) (hash-set! h "cols" (if b (hash-ref b "cols" #f) #f)) h))
))
)
(define (matrix_pow m p)
  (let/ec _return (begin
(if (equal? p 0) (let ()
(_return (matrix_identity m))
) (void))
(if (let ([__l p] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(if (matrix_is_invertible m) (let ()
(_return (matrix_pow (matrix_inverse m) (- p)))
) (void))
(_return (let ([h (make-hash)]) (hash-set! h "data" (list)) (hash-set! h "rows" 0) (hash-set! h "cols" 0) h))
) (void))
(define result m)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r p]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! result (matrix_mul result m))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (matrix_to_string m)
  (let/ec _return (begin
(if (equal? (if m (hash-ref m "rows" #f) #f) 0) (let ()
(_return "[]")
) (void))
(define s "[")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (if m (hash-ref m "rows" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! s (string-append s "["))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (if m (hash-ref m "cols" #f) #f)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! s (string-append s (to-string (if (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) (if (hash? (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f)) (hash-ref (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) j #f) (safe-index (if (if m (hash-ref m "data" #f) #f) (if (hash? (if m (hash-ref m "data" #f) #f)) (hash-ref (if m (hash-ref m "data" #f) #f) i #f) (safe-index (if m (hash-ref m "data" #f) #f) (int i))) #f) (int j))) #f))))
      (if (let ([__l j] [__r (- (if m (hash-ref m "cols" #f) #f) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! s (string-append s " "))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! s (string-append s "]"))
      (if (let ([__l i] [__r (- (if m (hash-ref m "rows" #f) #f) 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! s (string-append s "\n "))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! s (string-append s "]"))
(_return s)
))
)
(define (main)
  (let/ec _return (begin
(define m (make_matrix (list (list 1.0 2.0 3.0) (list 4.0 5.0 6.0) (list 7.0 8.0 9.0))))
(displayln (matrix_to_string m))
(displayln (to-string (matrix_columns m)))
(displayln (string-append (string-append (to-string (if m (hash-ref m "rows" #f) #f)) ",") (to-string (if m (hash-ref m "cols" #f) #f))))
(displayln (to-string (matrix_is_invertible m)))
(displayln (matrix_to_string (matrix_identity m)))
(displayln (to-string (matrix_determinant m)))
(displayln (matrix_to_string (matrix_minors m)))
(displayln (matrix_to_string (matrix_cofactors m)))
(displayln (matrix_to_string (matrix_adjugate m)))
(define m2 (matrix_mul_scalar m 3.0))
(displayln (matrix_to_string m2))
(displayln (matrix_to_string (matrix_add m m2)))
(displayln (matrix_to_string (matrix_sub m m2)))
(displayln (matrix_to_string (matrix_pow m 3)))
(define m3 (matrix_add_row m (list 10.0 11.0 12.0)))
(displayln (matrix_to_string m3))
(define m4 (matrix_add_column m2 (list 8.0 16.0 32.0)))
(displayln (matrix_to_string (matrix_mul m3 m4)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
