;; Generated by Mochi 0.10.61 on 2025-08-08 18:48 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define (is_safe grid visited row col)
  (let/ec _return (begin
(define rows (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]))
(define cols (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))]))
(define visited_cell (if (if visited (if (hash? visited) (hash-ref visited row #f) (safe-index visited (int row))) #f) (if (hash? (if visited (if (hash? visited) (hash-ref visited row #f) (safe-index visited (int row))) #f)) (hash-ref (if visited (if (hash? visited) (hash-ref visited row #f) (safe-index visited (int row))) #f) col #f) (safe-index (if visited (if (hash? visited) (hash-ref visited row #f) (safe-index visited (int row))) #f) (int col))) #f))
(define within_bounds (and (and (and (>= row 0) (< row rows)) (>= col 0)) (< col cols)))
(define not_visited (not visited_cell))
(_return (and (and within_bounds not_visited) (equal? (if (if grid (if (hash? grid) (hash-ref grid row #f) (safe-index grid (int row))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid row #f) (safe-index grid (int row))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid row #f) (safe-index grid (int row))) #f) col #f) (safe-index (if grid (if (hash? grid) (hash-ref grid row #f) (safe-index grid (int row))) #f) (int col))) #f) 1)))
))
)
(define (dfs grid visited row col)
  (let/ec _return (begin
(define row_nbr (list (- 1) (- 1) (- 1) 0 0 1 1 1))
(define col_nbr (list (- 1) 0 1 (- 1) 1 (- 1) 0 1))
(set! visited (list-set visited row (list-set (list-ref visited row) col #t)))
(define k 0)
(let/ec _break (let loop ()
  (if (< k 8) (begin
    (let/ec _cont
      (define new_row (let ([__l row] [__r (if row_nbr (if (hash? row_nbr) (hash-ref row_nbr k #f) (safe-index row_nbr (int k))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define new_col (let ([__l col] [__r (if col_nbr (if (hash? col_nbr) (hash-ref col_nbr k #f) (safe-index col_nbr (int k))) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (if (is_safe grid visited new_row new_col) (let ()
(dfs grid visited new_row new_col)
) (void))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (count_islands grid)
  (let/ec _return (begin
(define rows (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]))
(define cols (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))]))
(define visited (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i rows) (begin
    (let/ec _cont
      (define row_list (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j cols) (begin
    (let/ec _cont
      (set! row_list (append row_list (list #f)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! visited (append visited (list row_list)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define count 0)
(set! i 0)
(let/ec _break (let loop ()
  (if (< i rows) (begin
    (let/ec _cont
      (define j 0)
      (let/ec _break (let loop ()
  (if (< j cols) (begin
    (let/ec _cont
      (if (and (not (if (if visited (if (hash? visited) (hash-ref visited i #f) (safe-index visited (int i))) #f) (if (hash? (if visited (if (hash? visited) (hash-ref visited i #f) (safe-index visited (int i))) #f)) (hash-ref (if visited (if (hash? visited) (hash-ref visited i #f) (safe-index visited (int i))) #f) j #f) (safe-index (if visited (if (hash? visited) (hash-ref visited i #f) (safe-index visited (int i))) #f) (int j))) #f)) (equal? (if (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) j #f) (safe-index (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f) (int j))) #f) 1)) (let ()
(dfs grid visited i j)
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return count)
))
)
(define grid (list (list 1 1 0 0 0) (list 0 1 0 0 1) (list 1 0 0 1 1) (list 0 0 0 0 0) (list 1 0 1 0 1)))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (count_islands grid))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
