;; Generated by Mochi 0.10.64 on 2025-08-12 13:41 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (is_alnum ch)
  (let/ec _return (begin
(_return (or (or (and (string>=? ch "0") (string<=? ch "9")) (and (string>=? ch "A") (string<=? ch "Z"))) (and (string>=? ch "a") (string<=? ch "z"))))
))
)
(define (to_int token)
  (let/ec _return (begin
(define res 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not token) 0] [(string? token) (string-length token)] [(hash? token) (hash-count token)] [else (length token)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! res (let ([__l (* res 10)] [__r (int (slice token i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (split s sep)
  (let/ec _return (begin
(define res (list))
(define current "")
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (string=? ch sep) (let ()
(set! res (append (or res (list)) (list current)))
(set! current "")
) (let ()
(set! current (string-append current ch))
))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! res (append (or res (list)) (list current)))
(_return res)
))
)
(define (parse_moves input_str)
  (let/ec _return (begin
(define pairs (split input_str ","))
(define moves (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not pairs) 0] [(string? pairs) (string-length pairs)] [(hash? pairs) (hash-count pairs)] [else (length pairs)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define pair (if pairs (if (hash? pairs) (hash-ref pairs i #f) (safe-index pairs (int i))) #f))
      (define numbers (list))
      (define num "")
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not pair) 0] [(string? pair) (string-length pair)] [(hash? pair) (hash-count pair)] [else (length pair)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (slice pair j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (string=? ch " ") (let ()
(if (not (string=? num "")) (let ()
(set! numbers (append (or numbers (list)) (list num)))
(set! num "")
) (void))
) (let ()
(set! num (string-append num ch))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if (not (string=? num "")) (let ()
(set! numbers (append (or numbers (list)) (list num)))
) (void))
      (if (not (equal? (cond [(not numbers) 0] [(string? numbers) (string-length numbers)] [(hash? numbers) (hash-count numbers)] [else (length numbers)]) 2)) (let ()
(panic "Each move must have exactly two numbers.")
) (void))
      (define x (to_int (if numbers (if (hash? numbers) (hash-ref numbers 0 #f) (safe-index numbers (int 0))) #f)))
      (define y (to_int (if numbers (if (hash? numbers) (hash-ref numbers 1 #f) (safe-index numbers (int 1))) #f)))
      (set! moves (append (or moves (list)) (list (let ([h (make-hash)]) (hash-set! h "x" x) (hash-set! h "y" y) h))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return moves)
))
)
(define (validate_matrix_size size)
  (let/ec _return (begin
(if (let ([__l size] [__r 0]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(panic "Matrix size must be a positive integer.")
) (void))
))
)
(define (validate_matrix_content matrix size)
  (let/ec _return (begin
(if (not (equal? (cond [(not matrix) 0] [(string? matrix) (string-length matrix)] [(hash? matrix) (hash-count matrix)] [else (length matrix)]) size)) (let ()
(panic "The matrix dont match with size.")
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (if matrix (if (hash? matrix) (hash-ref matrix i #f) (safe-index matrix (int i))) #f))
      (if (not (equal? (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)]) size)) (let ()
(panic (string-append (string-append "Each row in the matrix must have exactly " (to-string size)) " characters."))
) (void))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (slice row j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (not (is_alnum ch)) (let ()
(panic "Matrix rows can only contain letters and numbers.")
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (validate_moves moves size)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not moves) 0] [(string? moves) (string-length moves)] [(hash? moves) (hash-count moves)] [else (length moves)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define mv (if moves (if (hash? moves) (hash-ref moves i #f) (safe-index moves (int i))) #f))
      (if (or (or (or (let ([__l (if mv (hash-ref mv "x" #f) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l (if mv (hash-ref mv "x" #f) #f)] [__r size]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ([__l (if mv (hash-ref mv "y" #f) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l (if mv (hash-ref mv "y" #f) #f)] [__r size]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ()
(panic "Move is out of bounds for a matrix.")
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(define (contains pos r c)
  (let/ec _return (begin
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not pos) 0] [(string? pos) (string-length pos)] [(hash? pos) (hash-count pos)] [else (length pos)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p (if pos (if (hash? pos) (hash-ref pos i #f) (safe-index pos (int i))) #f))
      (if (and (equal? (if p (hash-ref p "x" #f) #f) r) (equal? (if p (hash-ref p "y" #f) #f) c)) (let ()
(_return #t)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #f)
))
)
(define (find_repeat matrix_g row column size)
  (let/ec _return (begin
(set! column (- (- size 1) column))
(define visited (list))
(define repeated (list))
(define color (if (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g column #f) (safe-index matrix_g (int column))) #f) (if (hash? (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g column #f) (safe-index matrix_g (int column))) #f)) (hash-ref (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g column #f) (safe-index matrix_g (int column))) #f) row #f) (safe-index (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g column #f) (safe-index matrix_g (int column))) #f) (int row))) #f))
(if (string=? color "-") (let ()
(_return repeated)
) (void))
(define stack (list (let ([h (make-hash)]) (hash-set! h "x" column) (hash-set! h "y" row) h)))
(let/ec _break (let loop ()
  (if (let ([__l (cond [(not stack) 0] [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)])] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (define idx (- (cond [(not stack) 0] [(string? stack) (string-length stack)] [(hash? stack) (hash-count stack)] [else (length stack)]) 1))
      (define pos (if stack (if (hash? stack) (hash-ref stack idx #f) (safe-index stack (int idx))) #f))
      (set! stack (slice stack 0 idx))
      (if (or (or (or (let ([__l (if pos (hash-ref pos "x" #f) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ([__l (if pos (hash-ref pos "x" #f) #f)] [__r size]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ([__l (if pos (hash-ref pos "y" #f) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))]))) (let ([__l (if pos (hash-ref pos "y" #f) #f)] [__r size]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))]))) (let ()
(_cont)
) (void))
      (if (contains visited (if pos (hash-ref pos "x" #f) #f) (if pos (hash-ref pos "y" #f) #f)) (let ()
(_cont)
) (void))
      (set! visited (append (or visited (list)) (list pos)))
      (if (string=? (if (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g (if pos (hash-ref pos "x" #f) #f) #f) (safe-index matrix_g (int (if pos (hash-ref pos "x" #f) #f)))) #f) (if (hash? (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g (if pos (hash-ref pos "x" #f) #f) #f) (safe-index matrix_g (int (if pos (hash-ref pos "x" #f) #f)))) #f)) (hash-ref (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g (if pos (hash-ref pos "x" #f) #f) #f) (safe-index matrix_g (int (if pos (hash-ref pos "x" #f) #f)))) #f) (if pos (hash-ref pos "y" #f) #f) #f) (safe-index (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g (if pos (hash-ref pos "x" #f) #f) #f) (safe-index matrix_g (int (if pos (hash-ref pos "x" #f) #f)))) #f) (int (if pos (hash-ref pos "y" #f) #f)))) #f) color) (let ()
(set! repeated (append (or repeated (list)) (list pos)))
(set! stack (append (or stack (list)) (list (let ([h (make-hash)]) (hash-set! h "x" (- (if pos (hash-ref pos "x" #f) #f) 1)) (hash-set! h "y" (if pos (hash-ref pos "y" #f) #f)) h))))
(set! stack (append (or stack (list)) (list (let ([h (make-hash)]) (hash-set! h "x" (let ([__l (if pos (hash-ref pos "x" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "y" (if pos (hash-ref pos "y" #f) #f)) h))))
(set! stack (append (or stack (list)) (list (let ([h (make-hash)]) (hash-set! h "x" (if pos (hash-ref pos "x" #f) #f)) (hash-set! h "y" (- (if pos (hash-ref pos "y" #f) #f) 1)) h))))
(set! stack (append (or stack (list)) (list (let ([h (make-hash)]) (hash-set! h "x" (if pos (hash-ref pos "x" #f) #f)) (hash-set! h "y" (let ([__l (if pos (hash-ref pos "y" #f) #f)] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))))
) (void))
    )
    (loop)) (void))))
(_return repeated)
))
)
(define (increment_score count)
  (let/ec _return (begin
(_return (floor (/ (* count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) 2)))
))
)
(define (move_x matrix_g column size)
  (let/ec _return (begin
(define new_list (list))
(define row 0)
(let/ec _break (let loop ()
  (if (let ([__l row] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define val (if (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g row #f) (safe-index matrix_g (int row))) #f) (if (hash? (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g row #f) (safe-index matrix_g (int row))) #f)) (hash-ref (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g row #f) (safe-index matrix_g (int row))) #f) column #f) (safe-index (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g row #f) (safe-index matrix_g (int row))) #f) (int column))) #f))
      (if (not (string=? val "-")) (let ()
(set! new_list (append (or new_list (list)) (list val)))
) (let ()
(set! new_list (append (list val) new_list))
))
      (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! row 0)
(let/ec _break (let loop ()
  (if (let ([__l row] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! matrix_g (list-set matrix_g row (list-set (list-ref matrix_g row) column (if new_list (if (hash? new_list) (hash-ref new_list row #f) (safe-index new_list (int row))) #f))))
      (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return matrix_g)
))
)
(define (move_y matrix_g size)
  (let/ec _return (begin
(define empty_cols (list))
(define column (- size 1))
(let/ec _break (let loop ()
  (if (let ([__l column] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row 0)
      (define all_empty #t)
      (let/ec _break (let loop ()
  (if (let ([__l row] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (string=? (if (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g row #f) (safe-index matrix_g (int row))) #f) (if (hash? (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g row #f) (safe-index matrix_g (int row))) #f)) (hash-ref (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g row #f) (safe-index matrix_g (int row))) #f) column #f) (safe-index (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g row #f) (safe-index matrix_g (int row))) #f) (int column))) #f) "-")) (let ()
(set! all_empty #f)
(_break)
) (void))
      (set! row (let ([__l row] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (if all_empty (let ()
(set! empty_cols (append (or empty_cols (list)) (list column)))
) (void))
      (set! column (- column 1))
    )
    (loop)) (void))))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not empty_cols) 0] [(string? empty_cols) (string-length empty_cols)] [(hash? empty_cols) (hash-count empty_cols)] [else (length empty_cols)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define col (if empty_cols (if (hash? empty_cols) (hash-ref empty_cols i #f) (safe-index empty_cols (int i))) #f))
      (define c (let ([__l col] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (let/ec _break (let loop ()
  (if (let ([__l c] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define r 0)
      (let/ec _break (let loop ()
  (if (let ([__l r] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! matrix_g (list-set matrix_g r (list-set (list-ref matrix_g r) (- c 1) (if (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g r #f) (safe-index matrix_g (int r))) #f) (if (hash? (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g r #f) (safe-index matrix_g (int r))) #f)) (hash-ref (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g r #f) (safe-index matrix_g (int r))) #f) c #f) (safe-index (if matrix_g (if (hash? matrix_g) (hash-ref matrix_g r #f) (safe-index matrix_g (int r))) #f) (int c))) #f))))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! c (let ([__l c] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (define r 0)
      (let/ec _break (let loop ()
  (if (let ([__l r] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! matrix_g (list-set matrix_g r (list-set (list-ref matrix_g r) (- size 1) "-")))
      (set! r (let ([__l r] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return matrix_g)
))
)
(define (play matrix_g pos_x pos_y size)
  (let/ec _return (begin
(define same_colors (find_repeat matrix_g pos_x pos_y size))
(if (not (equal? (cond [(not same_colors) 0] [(string? same_colors) (string-length same_colors)] [(hash? same_colors) (hash-count same_colors)] [else (length same_colors)]) 0)) (let ()
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not same_colors) 0] [(string? same_colors) (string-length same_colors)] [(hash? same_colors) (hash-count same_colors)] [else (length same_colors)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define p (if same_colors (if (hash? same_colors) (hash-ref same_colors i #f) (safe-index same_colors (int i))) #f))
      (set! matrix_g (list-set matrix_g (if p (hash-ref p "x" #f) #f) (list-set (list-ref matrix_g (if p (hash-ref p "x" #f) #f)) (if p (hash-ref p "y" #f) #f) "-")))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define column 0)
(let/ec _break (let loop ()
  (if (let ([__l column] [__r size]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! matrix_g (move_x matrix_g column size))
      (set! column (let ([__l column] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(set! matrix_g (move_y matrix_g size))
) (void))
(define sc (increment_score (cond [(not same_colors) 0] [(string? same_colors) (string-length same_colors)] [(hash? same_colors) (hash-count same_colors)] [else (length same_colors)])))
(_return (let ([h (make-hash)]) (hash-set! h "matrix" matrix_g) (hash-set! h "score" sc) h))
))
)
(define (build_matrix matrix)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not matrix) 0] [(string? matrix) (string-length matrix)] [(hash? matrix) (hash-count matrix)] [else (length matrix)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (if matrix (if (hash? matrix) (hash-ref matrix i #f) (safe-index matrix (int i))) #f))
      (define row_list (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row_list (append (or row_list (list)) (list (slice row j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! res (append (or res (list)) (list row_list)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (process_game size matrix moves)
  (let/ec _return (begin
(define game_matrix (build_matrix matrix))
(define total 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not moves) 0] [(string? moves) (string-length moves)] [(hash? moves) (hash-count moves)] [else (length moves)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define mv (if moves (if (hash? moves) (hash-ref moves i #f) (safe-index moves (int i))) #f))
      (define res (play game_matrix (if mv (hash-ref mv "x" #f) #f) (if mv (hash-ref mv "y" #f) #f) size))
      (set! game_matrix (if res (hash-ref res "matrix" #f) #f))
      (set! total (let ([__l total] [__r (if res (hash-ref res "score" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return total)
))
)
(define (main)
  (let/ec _return (begin
(define size 4)
(define matrix (list "RRBG" "RBBG" "YYGG" "XYGG"))
(define moves (parse_moves "0 1,1 1"))
(validate_matrix_size size)
(validate_matrix_content matrix size)
(validate_moves moves size)
(define score (process_game size matrix moves))
(displayln (to-string score))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
