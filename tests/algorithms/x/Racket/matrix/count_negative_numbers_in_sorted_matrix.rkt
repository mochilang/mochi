;; Generated by Mochi 0.10.65 on 2025-08-14 15:51 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (generate_large_matrix)
  (let/ec _return (begin
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 1000]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j (- 1000 i))
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (- (- 1000) i)]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list j)))
      (set! j (- j 1))
    )
    (loop)) (void))))
      (set! result (append (or result (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (find_negative_index arr)
  (let/ec _return (begin
(define left 0)
(define right (- (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 1))
(if (equal? (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]) 0) (let ()
(_return 0)
) (void))
(if (let ([__l (if arr (if (hash? arr) (hash-ref arr 0 #f) (safe-index arr (int 0))) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(_return 0)
) (void))
(let/ec _break (let loop ()
  (if (let ([__l left] [__r right]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define mid (floor (/ (let ([__l left] [__r right]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2)))
      (define num (if arr (if (hash? arr) (hash-ref arr mid #f) (safe-index arr (int mid))) #f))
      (if (let ([__l num] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(if (equal? mid 0) (let ()
(_return 0)
) (void))
(if (let ([__l (if arr (if (hash? arr) (hash-ref arr (- mid 1) #f) (safe-index arr (int (- mid 1)))) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(_return mid)
) (void))
(set! right (- mid 1))
) (let ()
(set! left (let ([__l mid] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
))
    )
    (loop)) (void))))
(_return (cond [(not arr) 0] [(string? arr) (string-length arr)] [(hash? arr) (hash-count arr)] [else (length arr)]))
))
)
(define (count_negatives_binary_search grid)
  (let/ec _return (begin
(define total 0)
(define bound (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))]))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f))
      (define idx (find_negative_index (slice row 0 bound)))
      (set! bound idx)
      (set! total (let ([__l total] [__r idx]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return (- (* (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)]) (cond [(not (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid 0 #f) (safe-index grid (int 0))) #f))])) total))
))
)
(define (count_negatives_brute_force grid)
  (let/ec _return (begin
(define count 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (let ([__l (if row (if (hash? row) (hash-ref row j #f) (safe-index row (int j))) #f)] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! count (let ([__l count] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return count)
))
)
(define (count_negatives_brute_force_with_break grid)
  (let/ec _return (begin
(define total 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (if grid (if (hash? grid) (hash-ref grid i #f) (safe-index grid (int i))) #f))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define number (if row (if (hash? row) (hash-ref row j #f) (safe-index row (int j))) #f))
      (if (let ([__l number] [__r 0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (let ()
(set! total (let ([__l total] [__r (- (cond [(not row) 0] [(string? row) (string-length row)] [(hash? row) (hash-count row)] [else (length row)]) j)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_break)
) (void))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return total)
))
)
(define grid (generate_large_matrix))
(define test_grids (list (list (list 4 3 2 (- 1)) (list 3 2 1 (- 1)) (list 1 1 (- 1) (- 2)) (list (- 1) (- 1) (- 2) (- 3))) (list (list 3 2) (list 1 0)) (list (list 7 7 6)) (list (list 7 7 6) (list (- 1) (- 2) (- 3))) grid))
(define results_bin (list))
(define i 0)
(define results_brute (list))
(define results_break (list))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not test_grids) 0] [(string? test_grids) (string-length test_grids)] [(hash? test_grids) (hash-count test_grids)] [else (length test_grids)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! results_bin (append (or results_bin (list)) (list (count_negatives_binary_search (if test_grids (if (hash? test_grids) (hash-ref test_grids i #f) (safe-index test_grids (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln (to-string results_bin))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not test_grids) 0] [(string? test_grids) (string-length test_grids)] [(hash? test_grids) (hash-count test_grids)] [else (length test_grids)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! results_brute (append (or results_brute (list)) (list (count_negatives_brute_force (if test_grids (if (hash? test_grids) (hash-ref test_grids i #f) (safe-index test_grids (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln (to-string results_brute))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not test_grids) 0] [(string? test_grids) (string-length test_grids)] [(hash? test_grids) (hash-count test_grids)] [else (length test_grids)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! results_break (append (or results_break (list)) (list (count_negatives_brute_force_with_break (if test_grids (if (hash? test_grids) (hash-ref test_grids i #f) (safe-index test_grids (int i))) #f)))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln (to-string results_break))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
