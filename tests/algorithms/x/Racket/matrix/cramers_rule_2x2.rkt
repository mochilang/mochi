;; Generated by Mochi 0.10.64 on 2025-08-12 13:41 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (cramers_rule_2x2 eq1 eq2)
  (let/ec _return (begin
(if (or (not (equal? (cond [(not eq1) 0] [(string? eq1) (string-length eq1)] [(hash? eq1) (hash-count eq1)] [else (length eq1)]) 3)) (not (equal? (cond [(not eq2) 0] [(string? eq2) (string-length eq2)] [(hash? eq2) (hash-count eq2)] [else (length eq2)]) 3))) (let ()
(panic "Please enter a valid equation.")
) (void))
(if (and (and (and (equal? (if eq1 (if (hash? eq1) (hash-ref eq1 0 #f) (safe-index eq1 (int 0))) #f) 0.0) (equal? (if eq1 (if (hash? eq1) (hash-ref eq1 1 #f) (safe-index eq1 (int 1))) #f) 0.0)) (equal? (if eq2 (if (hash? eq2) (hash-ref eq2 0 #f) (safe-index eq2 (int 0))) #f) 0.0)) (equal? (if eq2 (if (hash? eq2) (hash-ref eq2 1 #f) (safe-index eq2 (int 1))) #f) 0.0)) (let ()
(panic "Both a & b of two equations can't be zero.")
) (void))
(define a1 (if eq1 (if (hash? eq1) (hash-ref eq1 0 #f) (safe-index eq1 (int 0))) #f))
(define b1 (if eq1 (if (hash? eq1) (hash-ref eq1 1 #f) (safe-index eq1 (int 1))) #f))
(define c1 (if eq1 (if (hash? eq1) (hash-ref eq1 2 #f) (safe-index eq1 (int 2))) #f))
(define a2 (if eq2 (if (hash? eq2) (hash-ref eq2 0 #f) (safe-index eq2 (int 0))) #f))
(define b2 (if eq2 (if (hash? eq2) (hash-ref eq2 1 #f) (safe-index eq2 (int 1))) #f))
(define c2 (if eq2 (if (hash? eq2) (hash-ref eq2 2 #f) (safe-index eq2 (int 2))) #f))
(define determinant (- (* a1 b2) (* a2 b1)))
(define determinant_x (- (* c1 b2) (* c2 b1)))
(define determinant_y (- (* a1 c2) (* a2 c1)))
(if (equal? determinant 0.0) (let ()
(if (and (equal? determinant_x 0.0) (equal? determinant_y 0.0)) (let ()
(panic "Infinite solutions. (Consistent system)")
) (void))
(panic "No solution. (Inconsistent system)")
) (void))
(if (and (equal? determinant_x 0.0) (equal? determinant_y 0.0)) (let ()
(_return (list 0.0 0.0))
) (void))
(define x (/ determinant_x determinant))
(define y (/ determinant_y determinant))
(_return (list x y))
))
)
(define (test_cramers_rule_2x2)
  (let/ec _return (begin
(define r1 (cramers_rule_2x2 (list 2.0 3.0 0.0) (list 5.0 1.0 0.0)))
(if (or (not (equal? (if r1 (if (hash? r1) (hash-ref r1 0 #f) (safe-index r1 (int 0))) #f) 0.0)) (not (equal? (if r1 (if (hash? r1) (hash-ref r1 1 #f) (safe-index r1 (int 1))) #f) 0.0))) (let ()
(panic "Test1 failed")
) (void))
(define r2 (cramers_rule_2x2 (list 0.0 4.0 50.0) (list 2.0 0.0 26.0)))
(if (or (not (equal? (if r2 (if (hash? r2) (hash-ref r2 0 #f) (safe-index r2 (int 0))) #f) 13.0)) (not (equal? (if r2 (if (hash? r2) (hash-ref r2 1 #f) (safe-index r2 (int 1))) #f) 12.5))) (let ()
(panic "Test2 failed")
) (void))
))
)
(define (main)
  (let/ec _return (begin
(test_cramers_rule_2x2)
(displayln (cramers_rule_2x2 (list 11.0 2.0 30.0) (list 1.0 0.0 4.0)))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
