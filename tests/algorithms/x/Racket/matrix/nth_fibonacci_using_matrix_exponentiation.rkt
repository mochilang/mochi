;; Generated by Mochi 0.10.67 on 2025-08-17 13:28 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/format racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x)
     (let ([s (~r x #:precision 15 #:notation 'positional)])
       (if (and (inexact? x) (integer? x))
           (number->string (inexact->exact x))
           s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) 0)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (multiply matrix_a matrix_b)
  (let/ec _return (begin
(define n (cond [(not matrix_a) 0] [(string? matrix_a) (string-length matrix_a)] [(hash? matrix_a) (hash-count matrix_a)] [else (length matrix_a)]))
(define matrix_c (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define val 0)
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! val (let ([__l val] [__r (* (if (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (safe-index matrix_a (int i))) #f) (if (hash? (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (safe-index matrix_a (int i))) #f)) (hash-ref (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (safe-index matrix_a (int i))) #f) k #f) (safe-index (if matrix_a (if (hash? matrix_a) (hash-ref matrix_a i #f) (safe-index matrix_a (int i))) #f) (int k))) #f) (if (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b k #f) (safe-index matrix_b (int k))) #f) (if (hash? (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b k #f) (safe-index matrix_b (int k))) #f)) (hash-ref (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b k #f) (safe-index matrix_b (int k))) #f) j #f) (safe-index (if matrix_b (if (hash? matrix_b) (hash-ref matrix_b k #f) (safe-index matrix_b (int k))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! row (append (or row (list)) (list val)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! matrix_c (append (or matrix_c (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return matrix_c)
))
)
(define (identity n)
  (let/ec _return (begin
(define res (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? i j) (let ()
(set! row (append (or row (list)) (list 1)))
) (let ()
(set! row (append (or row (list)) (list 0)))
))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! res (append (or res (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return res)
))
)
(define (nth_fibonacci_matrix n)
  (let/ec _return (begin
(if (let ([__l n] [__r 1]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(_return n)
) (void))
(define res_matrix (identity 2))
(define fib_matrix (list (list 1 1) (list 1 0)))
(define m (- n 1))
(let/ec _break (let loop ()
  (if (let ([__l m] [__r 0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (equal? (modulo m 2) 1) (let ()
(set! res_matrix (multiply res_matrix fib_matrix))
) (void))
      (set! fib_matrix (multiply fib_matrix fib_matrix))
      (set! m (floor (/ m 2)))
    )
    (loop)) (void))))
(_return (if (if res_matrix (if (hash? res_matrix) (hash-ref res_matrix 0 #f) (safe-index res_matrix (int 0))) #f) (if (hash? (if res_matrix (if (hash? res_matrix) (hash-ref res_matrix 0 #f) (safe-index res_matrix (int 0))) #f)) (hash-ref (if res_matrix (if (hash? res_matrix) (hash-ref res_matrix 0 #f) (safe-index res_matrix (int 0))) #f) 0 #f) (safe-index (if res_matrix (if (hash? res_matrix) (hash-ref res_matrix 0 #f) (safe-index res_matrix (int 0))) #f) (int 0))) #f))
))
)
(define (nth_fibonacci_bruteforce n)
  (let/ec _return (begin
(if (let ([__l n] [__r 1]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (let ()
(_return n)
) (void))
(define fib0 0)
(define fib1 1)
(define i 2)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (<= __l __r)] [else (<= (int __l) (int __r))])) (begin
    (let/ec _cont
      (define next (let ([__l fib0] [__r fib1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! fib0 fib1)
      (set! fib1 next)
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return fib1)
))
)
(define (parse_number s)
  (let/ec _return (begin
(define result 0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not s) 0] [(string? s) (string-length s)] [(hash? s) (hash-count s)] [else (length s)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ch (slice s i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
      (if (and (string>=? ch "0") (string<=? ch "9")) (let ()
(set! result (let ([__l (* result 10)] [__r (int ch)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (main)
  (let/ec _return (begin
(define ordinals (list "0th" "1st" "2nd" "3rd" "10th" "100th" "1000th"))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r (cond [(not ordinals) 0] [(string? ordinals) (string-length ordinals)] [(hash? ordinals) (hash-count ordinals)] [else (length ordinals)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define ordinal (if ordinals (if (hash? ordinals) (hash-ref ordinals i #f) (safe-index ordinals (int i))) #f))
      (define n (parse_number ordinal))
      (define msg (string-append (string-append (string-append (string-append ordinal " fibonacci number using matrix exponentiation is ") (to-string (nth_fibonacci_matrix n))) " and using bruteforce is ") (to-string (nth_fibonacci_bruteforce n))))
      (displayln msg)
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(main)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
