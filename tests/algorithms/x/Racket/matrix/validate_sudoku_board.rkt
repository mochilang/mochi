;; Generated by Mochi 0.10.64 on 2025-08-12 13:41 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define NUM_SQUARES 9)
(define EMPTY_CELL ".")
(define (is_valid_sudoku_board board)
  (let/ec _return (begin
(if (not (equal? (cond [(not board) 0] [(string? board) (string-length board)] [(hash? board) (hash-count board)] [else (length board)]) NUM_SQUARES)) (let ()
(_return #f)
) (void))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r NUM_SQUARES]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? (cond [(not (if board (if (hash? board) (hash-ref board i #f) (safe-index board (int i))) #f)) 0] [(string? (if board (if (hash? board) (hash-ref board i #f) (safe-index board (int i))) #f)) (string-length (if board (if (hash? board) (hash-ref board i #f) (safe-index board (int i))) #f))] [(hash? (if board (if (hash? board) (hash-ref board i #f) (safe-index board (int i))) #f)) (hash-count (if board (if (hash? board) (hash-ref board i #f) (safe-index board (int i))) #f))] [else (length (if board (if (hash? board) (hash-ref board i #f) (safe-index board (int i))) #f))]) NUM_SQUARES)) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(define rows (list))
(define cols (list))
(define boxes (list))
(set! i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r NUM_SQUARES]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! rows (append (or rows (list)) (list (list))))
      (set! cols (append (or cols (list)) (list (list))))
      (set! boxes (append (or boxes (list)) (list (list))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(let/ec _break (let ([r 0])
  (let loop ()
    (when (< r NUM_SQUARES)
(let/ec _break (let ([c 0])
  (let loop ()
    (when (< c NUM_SQUARES)
(define value (if (if board (if (hash? board) (hash-ref board r #f) (safe-index board (int r))) #f) (if (hash? (if board (if (hash? board) (hash-ref board r #f) (safe-index board (int r))) #f)) (hash-ref (if board (if (hash? board) (hash-ref board r #f) (safe-index board (int r))) #f) c #f) (safe-index (if board (if (hash? board) (hash-ref board r #f) (safe-index board (int r))) #f) (int c))) #f))
(if (string=? value EMPTY_CELL) (let ()
(begin (set! c (+ c 1)) (loop))
) (void))
(define box (let ([__l (* (int (floor (/ r 3))) 3)] [__r (int (floor (/ c 3)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(if (or (or (not (not (member value (or (if rows (if (hash? rows) (hash-ref rows r #f) (safe-index rows (int r))) #f) '())))) (not (not (member value (or (if cols (if (hash? cols) (hash-ref cols c #f) (safe-index cols (int c))) #f) '()))))) (not (not (member value (or (if boxes (if (hash? boxes) (hash-ref boxes box #f) (safe-index boxes (int box))) #f) '()))))) (let ()
(_return #f)
) (void))
(set! rows (list-set rows (int r) (append (or (if rows (if (hash? rows) (hash-ref rows r #f) (safe-index rows (int r))) #f) (list)) (list value))))
(set! cols (list-set cols (int c) (append (or (if cols (if (hash? cols) (hash-ref cols c #f) (safe-index cols (int c))) #f) (list)) (list value))))
(set! boxes (list-set boxes (int box) (append (or (if boxes (if (hash? boxes) (hash-ref boxes box #f) (safe-index boxes (int box))) #f) (list)) (list value))))
      (set! c (+ c 1))
      (loop)))
))
      (set! r (+ r 1))
      (loop)))
))
(_return #t)
))
)
(define valid_board (list (list "5" "3" "." "." "7" "." "." "." ".") (list "6" "." "." "1" "9" "5" "." "." ".") (list "." "9" "8" "." "." "." "." "6" ".") (list "8" "." "." "." "6" "." "." "." "3") (list "4" "." "." "8" "." "3" "." "." "1") (list "7" "." "." "." "2" "." "." "." "6") (list "." "6" "." "." "." "." "2" "8" ".") (list "." "." "." "4" "1" "9" "." "." "5") (list "." "." "." "." "8" "." "." "7" "9")))
(define invalid_board (list (list "8" "3" "." "." "7" "." "." "." ".") (list "6" "." "." "1" "9" "5" "." "." ".") (list "." "9" "8" "." "." "." "." "6" ".") (list "8" "." "." "." "6" "." "." "." "3") (list "4" "." "." "8" "." "3" "." "." "1") (list "7" "." "." "." "2" "." "." "." "6") (list "." "6" "." "." "." "." "2" "8" ".") (list "." "." "." "4" "1" "9" "." "." "5") (list "." "." "." "." "8" "." "." "7" "9")))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (is_valid_sudoku_board valid_board))
(displayln (is_valid_sudoku_board invalid_board))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
