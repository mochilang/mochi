;; Generated by Mochi 0.10.64 on 2025-08-12 13:41 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (let* ([s (format "~a" x)]) (if (regexp-match? #rx"[.]0$" s) (substring s 0 (- (string-length s) 2)) s))]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (is_square matrix)
  (let/ec _return (begin
(define n (cond [(not matrix) 0] [(string? matrix) (string-length matrix)] [(hash? matrix) (hash-count matrix)] [else (length matrix)]))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (if (not (equal? (cond [(not (if matrix (if (hash? matrix) (hash-ref matrix i #f) (safe-index matrix (int i))) #f)) 0] [(string? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (safe-index matrix (int i))) #f)) (string-length (if matrix (if (hash? matrix) (hash-ref matrix i #f) (safe-index matrix (int i))) #f))] [(hash? (if matrix (if (hash? matrix) (hash-ref matrix i #f) (safe-index matrix (int i))) #f)) (hash-count (if matrix (if (hash? matrix) (hash-ref matrix i #f) (safe-index matrix (int i))) #f))] [else (length (if matrix (if (hash? matrix) (hash-ref matrix i #f) (safe-index matrix (int i))) #f))]) n)) (let ()
(_return #f)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return #t)
))
)
(define (matrix_multiply a b)
  (let/ec _return (begin
(define rows (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define cols (cond [(not (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) 0] [(string? (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) (string-length (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))] [(hash? (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) (hash-count (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))] [else (length (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))]))
(define inner (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r rows]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r cols]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define sum 0)
      (define k 0)
      (let/ec _break (let loop ()
  (if (let ([__l k] [__r inner]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! sum (let ([__l sum] [__r (* (if (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) k #f) (safe-index (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (int k))) #f) (if (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) (if (hash? (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) j #f) (safe-index (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! k (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! row (append (or row (list)) (list sum)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! result (append (or result (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return result)
))
)
(define (multiply i j k a b result n m)
  (let/ec _return (begin
(if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(_return void)
) (void))
(if (let ([__l j] [__r m]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(multiply (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 0 0 a b result n m)
(_return void)
) (void))
(if (let ([__l k] [__r (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)])]) (cond [(and (number? __l) (number? __r)) (>= __l __r)] [else (>= (int __l) (int __r))])) (let ()
(multiply i (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 0 a b result n m)
(_return void)
) (void))
(set! result (list-set result i (list-set (list-ref result i) j (let ([__l (if (if result (if (hash? result) (hash-ref result i #f) (safe-index result (int i))) #f) (if (hash? (if result (if (hash? result) (hash-ref result i #f) (safe-index result (int i))) #f)) (hash-ref (if result (if (hash? result) (hash-ref result i #f) (safe-index result (int i))) #f) j #f) (safe-index (if result (if (hash? result) (hash-ref result i #f) (safe-index result (int i))) #f) (int j))) #f)] [__r (* (if (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (if (hash? (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f)) (hash-ref (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) k #f) (safe-index (if a (if (hash? a) (hash-ref a i #f) (safe-index a (int i))) #f) (int k))) #f) (if (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) (if (hash? (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f)) (hash-ref (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) j #f) (safe-index (if b (if (hash? b) (hash-ref b k #f) (safe-index b (int k))) #f) (int j))) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))))
(multiply i j (let ([__l k] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) a b result n m)
))
)
(define (matrix_multiply_recursive a b)
  (let/ec _return (begin
(if (or (equal? (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) 0) (equal? (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]) 0)) (let ()
(_return (list))
) (void))
(if (or (or (not (equal? (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]) (cond [(not b) 0] [(string? b) (string-length b)] [(hash? b) (hash-count b)] [else (length b)]))) (not (is_square a))) (not (is_square b))) (let ()
(panic "Invalid matrix dimensions")
) (void))
(define n (cond [(not a) 0] [(string? a) (string-length a)] [(hash? a) (hash-count a)] [else (length a)]))
(define m (cond [(not (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) 0] [(string? (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) (string-length (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))] [(hash? (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f)) (hash-count (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))] [else (length (if b (if (hash? b) (hash-ref b 0 #f) (safe-index b (int 0))) #f))]))
(define result (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r n]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r m]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! row (append (or row (list)) (list 0)))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! result (append (or result (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(multiply 0 0 0 a b result n m)
(_return result)
))
)
(define matrix_1_to_4 (list (list 1 2) (list 3 4)))
(define matrix_5_to_8 (list (list 5 6) (list 7 8)))
(define matrix_count_up (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12) (list 13 14 15 16)))
(define matrix_unordered (list (list 5 8 1 2) (list 6 7 3 0) (list 4 5 9 1) (list 2 6 10 14)))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (matrix_multiply_recursive matrix_1_to_4 matrix_5_to_8))
(displayln (matrix_multiply_recursive matrix_count_up matrix_unordered))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
