;; Generated by Mochi 0.10.60 on 2025-08-07 16:04 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (format "~a" s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (list->bytes bs))))
(define (_fetch url) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))

(define PI 3.141592653589793)
(define TWO_PI 6.283185307179586)
(define (_mod x m)
  (let/ec _return (begin
(_return (- x (* (exact->inexact (int (/ x m))) m)))
))
)
(define (sin x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) TWO_PI) PI))
(define y2 (* y y))
(define y3 (* y2 y))
(define y5 (* y3 y2))
(define y7 (* y5 y2))
(_return (- (let ([__l (- y (/ y3 6.0))] [__r (/ y5 120.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y7 5040.0)))
))
)
(define (cos x)
  (let/ec _return (begin
(define y (- (_mod (let ([__l x] [__r PI]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) TWO_PI) PI))
(define y2 (* y y))
(define y4 (* y2 y2))
(define y6 (* y4 y2))
(_return (- (let ([__l (- 1.0 (/ y2 2.0))] [__r (/ y4 24.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) (/ y6 720.0)))
))
)
(define (rotate v angle_deg)
  (let/ec _return (begin
(define theta (/ (* angle_deg PI) 180.0))
(define c (cos theta))
(define s (sin theta))
(_return (hash "x" (- (* (if v (hash-ref v "x" #f) #f) c) (* (if v (hash-ref v "y" #f) #f) s)) "y" (let ([__l (* (if v (hash-ref v "x" #f) #f) s)] [__r (* (if v (hash-ref v "y" #f) #f) c)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (iteration_step vectors)
  (let/ec _return (begin
(define new_vectors (list))
(define i 0)
(let/ec _break (let loop ()
  (if (< i (- (cond [(string? vectors) (string-length vectors)] [(hash? vectors) (hash-count vectors)] [else (length vectors)]) 1)) (let/ec _cont
    (define start (if vectors (if (hash? vectors) (hash-ref vectors i #f) (list-ref vectors (int i))) #f))
    (define end (if vectors (if (hash? vectors) (hash-ref vectors (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) #f) (list-ref vectors (int (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))) #f))
    (set! new_vectors (append new_vectors (list start)))
    (define dx (- (if end (hash-ref end "x" #f) #f) (if start (hash-ref start "x" #f) #f)))
    (define dy (- (if end (hash-ref end "y" #f) #f) (if start (hash-ref start "y" #f) #f)))
    (define one_third (hash "x" (let ([__l (if start (hash-ref start "x" #f) #f)] [__r (/ dx 3.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "y" (let ([__l (if start (hash-ref start "y" #f) #f)] [__r (/ dy 3.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define mid (rotate (hash "x" (/ dx 3.0) "y" (/ dy 3.0)) 60.0))
    (define peak (hash "x" (let ([__l (if one_third (hash-ref one_third "x" #f) #f)] [__r (if mid (hash-ref mid "x" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "y" (let ([__l (if one_third (hash-ref one_third "y" #f) #f)] [__r (if mid (hash-ref mid "y" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (define two_third (hash "x" (let ([__l (if start (hash-ref start "x" #f) #f)] [__r (/ (* dx 2.0) 3.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) "y" (let ([__l (if start (hash-ref start "y" #f) #f)] [__r (/ (* dy 2.0) 3.0)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
    (set! new_vectors (append new_vectors (list one_third)))
    (set! new_vectors (append new_vectors (list peak)))
    (set! new_vectors (append new_vectors (list two_third)))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! new_vectors (append new_vectors (list (if vectors (if (hash? vectors) (hash-ref vectors (- (cond [(string? vectors) (string-length vectors)] [(hash? vectors) (hash-count vectors)] [else (length vectors)]) 1) #f) (list-ref vectors (int (- (cond [(string? vectors) (string-length vectors)] [(hash? vectors) (hash-count vectors)] [else (length vectors)]) 1)))) #f))))
(_return new_vectors)
))
)
(define (iterate initial steps)
  (let/ec _return (begin
(define vectors initial)
(define i 0)
(let/ec _break (let loop ()
  (if (< i steps) (let/ec _cont
    (set! vectors (iteration_step vectors))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(_return vectors)
))
)
(define (vec_to_string v)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append "(" (format "~a" (if v (hash-ref v "x" #f) #f))) ", ") (format "~a" (if v (hash-ref v "y" #f) #f))) ")"))
))
)
(define (vec_list_to_string lst)
  (let/ec _return (begin
(define res "[")
(define i 0)
(let/ec _break (let loop ()
  (if (< i (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)])) (let/ec _cont
    (set! res (string-append res (vec_to_string (if lst (if (hash? lst) (hash-ref lst i #f) (list-ref lst (int i))) #f))))
    (if (< i (- (cond [(string? lst) (string-length lst)] [(hash? lst) (hash-count lst)] [else (length lst)]) 1)) (let ()
(set! res (string-append res ", "))
) (void))
    (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    (loop)) (void))))
(set! res (string-append res "]"))
(_return res)
))
)
(define VECTOR_1 (hash "x" 0.0 "y" 0.0))
(define VECTOR_2 (hash "x" 0.5 "y" 0.8660254))
(define VECTOR_3 (hash "x" 1.0 "y" 0.0))
(define INITIAL_VECTORS (list VECTOR_1 VECTOR_2 VECTOR_3 VECTOR_1))
(define example (iterate (list VECTOR_1 VECTOR_3) 1))
(let* ([_start_mem (current-memory-use)] [_start (now)])
  (let/ec _return (begin
(displayln (vec_list_to_string example))
    (void)
  ))
  (let* ([_end (now)] [_end_mem (current-memory-use)]
         [_dur (- _end _start)]
         [_dur_us _dur]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
