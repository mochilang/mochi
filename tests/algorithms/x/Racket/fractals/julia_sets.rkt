;; Generated by Mochi 0.10.65 on 2025-08-14 10:00 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (complex_add a b)
  (let/ec _return (begin
(_return (let ([h (make-hash)]) (hash-set! h "re" (let ([__l (if a (hash-ref a "re" #f) #f)] [__r (if b (hash-ref b "re" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) (hash-set! h "im" (let ([__l (if a (hash-ref a "im" #f) #f)] [__r (if b (hash-ref b "im" #f) #f)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))) h))
))
)
(define (complex_mul a b)
  (let/ec _return (begin
(define real (- (* (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "re" #f) #f)) (* (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "im" #f) #f))))
(define imag (let ([__l (* (if a (hash-ref a "re" #f) #f) (if b (hash-ref b "im" #f) #f))] [__r (* (if a (hash-ref a "im" #f) #f) (if b (hash-ref b "re" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
(_return (let ([h (make-hash)]) (hash-set! h "re" real) (hash-set! h "im" imag) h))
))
)
(define (sqrtApprox x)
  (let/ec _return (begin
(define guess (/ x 2.0))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 20]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! guess (/ (let ([__l guess] [__r (/ x guess)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))) 2.0))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return guess)
))
)
(define (complex_abs a)
  (let/ec _return (begin
(_return (sqrtApprox (let ([__l (* (if a (hash-ref a "re" #f) #f) (if a (hash-ref a "re" #f) #f))] [__r (* (if a (hash-ref a "im" #f) #f) (if a (hash-ref a "im" #f) #f))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (sin_taylor x)
  (let/ec _return (begin
(define term x)
(define sum x)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 10]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define k1 (* 2.0 (exact->inexact i)))
      (define k2 (let ([__l (* 2.0 (exact->inexact i))] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! term (/ (* (* (- term) x) x) (* k1 k2)))
      (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (cos_taylor x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define i 1)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 10]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define k1 (- (* 2.0 (exact->inexact i)) 1.0))
      (define k2 (* 2.0 (exact->inexact i)))
      (set! term (/ (* (* (- term) x) x) (* k1 k2)))
      (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (exp_taylor x)
  (let/ec _return (begin
(define term 1.0)
(define sum 1.0)
(define i 1.0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r 20.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! term (/ (* term x) i))
      (set! sum (let ([__l sum] [__r term]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! i (let ([__l i] [__r 1.0]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return sum)
))
)
(define (complex_exp z)
  (let/ec _return (begin
(define e (exp_taylor (if z (hash-ref z "re" #f) #f)))
(_return (let ([h (make-hash)]) (hash-set! h "re" (* e (cos_taylor (if z (hash-ref z "im" #f) #f)))) (hash-set! h "im" (* e (sin_taylor (if z (hash-ref z "im" #f) #f)))) h))
))
)
(define (eval_quadratic c z)
  (let/ec _return (begin
(_return (complex_add (complex_mul z z) c))
))
)
(define (eval_exponential c z)
  (let/ec _return (begin
(_return (complex_add (complex_exp z) c))
))
)
(define (iterate_function eval_function c nb_iterations z0 infinity)
  (let/ec _return (begin
(define z_n z0)
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r nb_iterations]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! z_n (eval_function c z_n))
      (if (let ([__l (complex_abs z_n)] [__r infinity]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(_return z_n)
) (void))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return z_n)
))
)
(define (prepare_grid window_size nb_pixels)
  (let/ec _return (begin
(define grid (list))
(define i 0)
(let/ec _break (let loop ()
  (if (let ([__l i] [__r nb_pixels]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define j 0)
      (let/ec _break (let loop ()
  (if (let ([__l j] [__r nb_pixels]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define real (let ([__l (- window_size)] [__r (/ (* (* 2.0 window_size) (exact->inexact i)) (exact->inexact (- nb_pixels 1)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define imag (let ([__l (- window_size)] [__r (/ (* (* 2.0 window_size) (exact->inexact j)) (exact->inexact (- nb_pixels 1)))]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! row (append (or row (list)) (list (let ([h (make-hash)]) (hash-set! h "re" real) (hash-set! h "im" imag) h))))
      (set! j (let ([__l j] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! grid (append (or grid (list)) (list row)))
      (set! i (let ([__l i] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return grid)
))
)
(define (julia_demo)
  (let/ec _return (begin
(define grid (prepare_grid 1.0 5))
(define c_poly (let ([h (make-hash)]) (hash-set! h "re" (- 0.4)) (hash-set! h "im" 0.6) h))
(define c_exp (let ([h (make-hash)]) (hash-set! h "re" (- 2.0)) (hash-set! h "im" 0.0) h))
(define poly_result (list))
(define exp_result (list))
(define y 0)
(let/ec _break (let loop ()
  (if (let ([__l y] [__r (cond [(not grid) 0] [(string? grid) (string-length grid)] [(hash? grid) (hash-count grid)] [else (length grid)])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row_poly (list))
      (define row_exp (list))
      (define x 0)
      (let/ec _break (let loop ()
  (if (let ([__l x] [__r (cond [(not (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f)) 0] [(string? (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f)) (string-length (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f))] [(hash? (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f)) (hash-count (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f))] [else (length (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f))])]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define z0 (if (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f) (if (hash? (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f)) (hash-ref (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f) x #f) (safe-index (if grid (if (hash? grid) (hash-ref grid y #f) (safe-index grid (int y))) #f) (int x))) #f))
      (define z_poly (iterate_function eval_quadratic c_poly 20 z0 4.0))
      (define z_exp (iterate_function eval_exponential c_exp 10 z0 10000000000.0))
      (set! row_poly (append (or row_poly (list)) (list (if (let ([__l (complex_abs z_poly)] [__r 2.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) 1 0))))
      (set! row_exp (append (or row_exp (list)) (list (if (let ([__l (complex_abs z_exp)] [__r 10000.0]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) 1 0))))
      (set! x (let ([__l x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! poly_result (append (or poly_result (list)) (list row_poly)))
      (set! exp_result (append (or exp_result (list)) (list row_exp)))
      (set! y (let ([__l y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(displayln poly_result)
(displayln exp_result)
))
)
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(julia_demo)
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
