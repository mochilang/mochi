;; Generated by Mochi 0.10.65 on 2025-08-14 10:00 +0700
#lang racket/base
(require racket/list racket/string racket/math racket/match racket/system racket/port net/url net/http-client json openssl/sha1 openssl/md5)
(define nowSeed (let ([s (getenv "MOCHI_NOW_SEED")]) (and s (string->number s))))
(define (now)
  (if nowSeed
      (begin (set! nowSeed (modulo (+ (* nowSeed 1664525) 1013904223) 2147483647)) nowSeed)
      (inexact->exact (floor (* (current-inexact-monotonic-milliseconds) 1000)))))
(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x) (let ([n (string->number x)]) (if n (inexact->exact (truncate n)) 0))]
    [else 0]))
(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x) (let ([n (string->number x)]) (if n (exact->inexact n) 0.0))]
    [else 0.0]))
(define (to-string x)
  (cond
    [(number? x) (number->string x)]
    [else (format "~a" x)]))
(define (upper s) (string-upcase s))
(define (lower s) (string-downcase s))
(define (sublist lst start end)
  (if (string? lst)
      (substring lst start end)
      (take (drop lst start) (- end start))))

(define (slice seq start end)
  (define len (if (string? seq) (string-length seq) (length seq)))
  (define s (int start))
  (define e (int end))
  (when (< s 0) (set! s (+ len s)))
  (when (< e 0) (set! e (+ len e)))
  (set! s (max 0 (min len s)))
  (set! e (max 0 (min len e)))
  (when (< e s) (set! e s))
  (if (string? seq) (substring seq s e) (sublist seq s e)))
(define (pad-start s width ch)
  (let ([s (to-string s)])
    (if (< (string-length s) width)
        (string-append (make-string (- width (string-length s)) (string-ref ch 0)) s)
        s)))
(define (index-of s ch)
  (cond
    [(string? s)
     (let loop ([i 0])
       (cond [(>= i (string-length s)) -1]
             [(string=? (substring s i (add1 i)) ch) i]
             [else (loop (add1 i))]))]
    [else
     (let loop ([i 0] [lst s])
       (cond [(null? lst) -1]
             [(equal? (car lst) ch) i]
             [else (loop (add1 i) (cdr lst))]))]))
(define (safe-index lst idx) (let ([i (int idx)]) (if (and (>= i 0) (< i (length lst))) (list-ref lst i) #f)))
(define (_repeat s n)
  (cond
    [(string? s) (apply string-append (make-list (int n) s))]
    [(list? s) (apply append (make-list (int n) s))]
    [else '()]))
(define (list-set lst idx val)
  (define i (int idx))
  (define len (length lst))
  (cond
    [(>= i len) (append lst (make-list (- i len) '()) (list val))]
    [(zero? i) (cons val (cdr lst))]
    [else (cons (car lst) (list-set (cdr lst) (sub1 i) val))]))
(define (_parse-int-str s base) (int (string->number s base)))
(define (_sha256 bs) (bytes->list (sha256-bytes (if (string? bs) (string->bytes/utf-8 bs) (list->bytes bs)))))
(define (_fetch url [opts #f]) (let ([p (get-pure-port (string->url url))]) (define txt (port->string p)) (close-input-port p) (string->jsexpr txt)))
(define (num r) (numerator r))
(define (denom r) (denominator r))
(define (panic msg) (error msg))
(define (json-encode x)
  (define (sanitize v)
    (cond
      [(hash? v) (for/hash ([k (in-hash-keys v)]) (values (string->symbol k) (sanitize (hash-ref v k))))]
      [(list? v) (map sanitize v)]
      [else v]))
  (jsexpr->string (sanitize x)))
(define Object (hash "keys" (lambda (self m) (let ([lst (hash-keys m)]) (hash "join" (lambda (s sep) (string-join lst sep)))))))
(define stdout (hash "write" (lambda (s) (display s))))
(define __name__ "__main__")
(define (input) (let ([ln (read-line)]) (if (eof-object? ln) "" ln)))

(define (round_int x)
  (let/ec _return (begin
(_return (int (let ([__l x] [__r 0.5]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))))
))
)
(define (hsv_to_rgb h s v)
  (let/ec _return (begin
(define i (int (* h 6.0)))
(define f (- (* h 6.0) (exact->inexact i)))
(define p (* v (- 1.0 s)))
(define q (* v (- 1.0 (* f s))))
(define t (* v (- 1.0 (* (- 1.0 f) s))))
(define mod (modulo i 6))
(define r 0.0)
(define g 0.0)
(define b 0.0)
(if (equal? mod 0) (let ()
(set! r v)
(set! g t)
(set! b p)
) (let ()
(if (equal? mod 1) (let ()
(set! r q)
(set! g v)
(set! b p)
) (let ()
(if (equal? mod 2) (let ()
(set! r p)
(set! g v)
(set! b t)
) (let ()
(if (equal? mod 3) (let ()
(set! r p)
(set! g q)
(set! b v)
) (let ()
(if (equal? mod 4) (let ()
(set! r t)
(set! g p)
(set! b v)
) (let ()
(set! r v)
(set! g p)
(set! b q)
))
))
))
))
))
(_return (let ([h (make-hash)]) (hash-set! h "r" (round_int (* r 255.0))) (hash-set! h "g" (round_int (* g 255.0))) (hash-set! h "b" (round_int (* b 255.0))) h))
))
)
(define (get_distance x y max_step)
  (let/ec _return (begin
(define a x)
(define b y)
(define step (- 1))
(let/ec _break (let loop ()
  (if (let ([__l step] [__r (- max_step 1)]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (set! step (let ([__l step] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define a_new (let ([__l (- (* a a) (* b b))] [__r x]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! b (let ([__l (* (* 2.0 a) b)] [__r y]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (set! a a_new)
      (if (let ([__l (let ([__l (* a a)] [__r (* b b)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r)))] [__r 4.0]) (cond [(and (number? __l) (number? __r)) (> __l __r)] [else (> (int __l) (int __r))])) (let ()
(_break)
) (void))
    )
    (loop)) (void))))
(_return (/ (exact->inexact step) (exact->inexact (- max_step 1))))
))
)
(define (get_black_and_white_rgb distance)
  (let/ec _return (begin
(if (equal? distance 1.0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "r" 0) (hash-set! h "g" 0) (hash-set! h "b" 0) h))
) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "r" 255) (hash-set! h "g" 255) (hash-set! h "b" 255) h))
))
))
)
(define (get_color_coded_rgb distance)
  (let/ec _return (begin
(if (equal? distance 1.0) (let ()
(_return (let ([h (make-hash)]) (hash-set! h "r" 0) (hash-set! h "g" 0) (hash-set! h "b" 0) h))
) (let ()
(_return (hsv_to_rgb distance 1.0 1.0))
))
))
)
(define (get_image image_width image_height figure_center_x figure_center_y figure_width max_step use_distance_color_coding)
  (let/ec _return (begin
(define img (list))
(define figure_height (* (/ figure_width (exact->inexact image_width)) (exact->inexact image_height)))
(define image_y 0)
(let/ec _break (let loop ()
  (if (let ([__l image_y] [__r image_height]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define row (list))
      (define image_x 0)
      (let/ec _break (let loop ()
  (if (let ([__l image_x] [__r image_width]) (cond [(and (number? __l) (number? __r)) (< __l __r)] [else (< (int __l) (int __r))])) (begin
    (let/ec _cont
      (define fx (let ([__l figure_center_x] [__r (* (- (/ (exact->inexact image_x) (exact->inexact image_width)) 0.5) figure_width)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define fy (let ([__l figure_center_y] [__r (* (- (/ (exact->inexact image_y) (exact->inexact image_height)) 0.5) figure_height)]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
      (define distance (get_distance fx fy max_step))
      (define rgb (hash))
      (if use_distance_color_coding (let ()
(set! rgb (get_color_coded_rgb distance))
) (let ()
(set! rgb (get_black_and_white_rgb distance))
))
      (set! row (append (or row (list)) (list rgb)))
      (set! image_x (let ([__l image_x] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
      (set! img (append (or img (list)) (list row)))
      (set! image_y (let ([__l image_y] [__r 1]) (if (and (string? __l) (string? __r)) (string-append __l __r) (+ __l __r))))
    )
    (loop)) (void))))
(_return img)
))
)
(define (rgb_to_string c)
  (let/ec _return (begin
(_return (string-append (string-append (string-append (string-append (string-append (string-append "(" (to-string (if c (hash-ref c "r" #f) #f))) ", ") (to-string (if c (hash-ref c "g" #f) #f))) ", ") (to-string (if c (hash-ref c "b" #f) #f))) ")"))
))
)
(define img1 (get_image 10 10 (- 0.6) 0.0 3.2 50 #t))
(define img2 (get_image 10 10 (- 0.6) 0.0 3.2 50 #f))
(let* ([_start_mem (current-memory-use)] [_start (current-inexact-monotonic-milliseconds)])
  (let/ec _return (begin
(displayln (rgb_to_string (if (if img1 (if (hash? img1) (hash-ref img1 0 #f) (safe-index img1 (int 0))) #f) (if (hash? (if img1 (if (hash? img1) (hash-ref img1 0 #f) (safe-index img1 (int 0))) #f)) (hash-ref (if img1 (if (hash? img1) (hash-ref img1 0 #f) (safe-index img1 (int 0))) #f) 0 #f) (safe-index (if img1 (if (hash? img1) (hash-ref img1 0 #f) (safe-index img1 (int 0))) #f) (int 0))) #f)))
(displayln (rgb_to_string (if (if img2 (if (hash? img2) (hash-ref img2 0 #f) (safe-index img2 (int 0))) #f) (if (hash? (if img2 (if (hash? img2) (hash-ref img2 0 #f) (safe-index img2 (int 0))) #f)) (hash-ref (if img2 (if (hash? img2) (hash-ref img2 0 #f) (safe-index img2 (int 0))) #f) 0 #f) (safe-index (if img2 (if (hash? img2) (hash-ref img2 0 #f) (safe-index img2 (int 0))) #f) (int 0))) #f)))
    (void)
  ))
  (let* ([_end (current-inexact-monotonic-milliseconds)] [_end_mem (current-memory-use)]
         [_dur_us (max 1 (exact-ceiling (* (- _end _start) 1000)))]
         [_mem (max 0 (- _end_mem _start_mem))])
    (displayln "{")
    (displayln (format "  \"duration_us\": ~a," _dur_us))
    (displayln (format "  \"memory_bytes\": ~a," _mem))
    (displayln "  \"name\": \"main\"")
    (displayln "}")
  )
)
