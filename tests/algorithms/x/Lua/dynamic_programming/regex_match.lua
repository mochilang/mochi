-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function recursive_match(text, pattern)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(pattern) == 0) then
          return ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(text) == 0)
            end
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(text) == 0) then
                  if (((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(pattern) >= 2) and (_substring(pattern, ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(pattern) - 1), (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(pattern)) == "*")) then
                                return recursive_match(text, _substring(pattern, 0, ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(pattern) - 2)))
                                  end
                                  return false
                                end
                                local last_text = _substring(text, ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(text) - 1), (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(text))
                                        local last_pattern = _substring(pattern, ((function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(pattern) - 1), (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(pattern))
                                                if ((last_text == last_pattern) or (last_pattern == ".")) then
                                                  return recursive_match(_substring(text, 0, ((function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(text) - 1)), _substring(pattern, 0, ((function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(pattern) - 1)))
                                                        end
                                                        if (last_pattern == "*") then
                                                          if recursive_match(_substring(text, 0, ((function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(text) - 1)), pattern) then
                                                                return true
                                                              end
                                                              return recursive_match(text, _substring(pattern, 0, ((function(v)
                                                              if type(v) == 'table' and v.items ~= nil then
                                                                return #v.items
                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                  local c = 0
                                                                  for _ in pairs(v) do c = c + 1 end
                                                                  return c
                                                                elseif type(v) == 'string' then
                                                                    local l = utf8.len(v)
                                                                    if l then return l end
                                                                    return #v
                                                                  elseif type(v) == 'table' then
                                                                      return #v
                                                                    else
                                                                      return 0
                                                                    end
                                                                  end)(pattern) - 2)))
                                                                end
                                                                return false
                                                              end
                                                              function dp_match(text, pattern)
                                                                local m = (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(text)
                                                                    local n = (function(v)
                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                      return #v.items
                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                        local c = 0
                                                                        for _ in pairs(v) do c = c + 1 end
                                                                        return c
                                                                      elseif type(v) == 'string' then
                                                                          local l = utf8.len(v)
                                                                          if l then return l end
                                                                          return #v
                                                                        elseif type(v) == 'table' then
                                                                            return #v
                                                                          else
                                                                            return 0
                                                                          end
                                                                        end)(pattern)
                                                                        local dp = {}
                                                                        local i = 0
                                                                        while (i <= m) do
                                                                          local row = {}
                                                                          local j = 0
                                                                          while (j <= n) do
                                                                            row = (function(lst, item)
                                                                            local res = {table.unpack(lst or {})}
                                                                            table.insert(res, item)
                                                                            return res
                                                                          end)(row, false)
                                                                          j = (j + 1)
                                                                        end
                                                                        dp = (function(lst, item)
                                                                        local res = {table.unpack(lst or {})}
                                                                        table.insert(res, item)
                                                                        return res
                                                                      end)(dp, row)
                                                                      i = (i + 1)
                                                                    end
                                                                    dp[0 + 1][0 + 1] = true
                                                                    local j = 1
                                                                    while (j <= n) do
                                                                      if ((_substring(pattern, (j - 1), j) == "*") and (j >= 2)) then
                                                                        if dp[0 + 1][(j - 2) + 1] then
                                                                          dp[0 + 1][j + 1] = true
                                                                        end
                                                                      end
                                                                      j = (j + 1)
                                                                    end
                                                                    i = 1
                                                                    while (i <= m) do
                                                                      j = 1
                                                                      while (j <= n) do
                                                                        local p_char = _substring(pattern, (j - 1), j)
                                                                        local t_char = _substring(text, (i - 1), i)
                                                                        if ((p_char == ".") or (p_char == t_char)) then
                                                                          if dp[(i - 1) + 1][(j - 1) + 1] then
                                                                            dp[i + 1][j + 1] = true
                                                                          end
                                                                        else
                                                                          if (p_char == "*") then
                                                                            if (j >= 2) then
                                                                              if dp[i + 1][(j - 2) + 1] then
                                                                                dp[i + 1][j + 1] = true
                                                                              end
                                                                              local prev_p = _substring(pattern, (j - 2), (j - 1))
                                                                              if ((prev_p == ".") or (prev_p == t_char)) then
                                                                                if dp[(i - 1) + 1][j + 1] then
                                                                                  dp[i + 1][j + 1] = true
                                                                                end
                                                                              end
                                                                            end
                                                                          else
                                                                            dp[i + 1][j + 1] = false
                                                                          end
                                                                        end
                                                                        j = (j + 1)
                                                                      end
                                                                      i = (i + 1)
                                                                    end
                                                                    return dp[m + 1][n + 1]
                                                                  end
                                                                  function print_bool(b)
                                                                    if b then
                                                                      print(((true) and (1) or (0)))
                                                                    else
                                                                      print(((false) and (1) or (0)))
                                                                    end
                                                                  end
                                                                  print_bool(recursive_match("abc", "a.c"))
                                                                  print_bool(recursive_match("abc", "af*.c"))
                                                                  print_bool(recursive_match("abc", "a.c*"))
                                                                  print_bool(recursive_match("abc", "a.c*d"))
                                                                  print_bool(recursive_match("aa", ".*"))
                                                                  print_bool(dp_match("abc", "a.c"))
                                                                  print_bool(dp_match("abc", "af*.c"))
                                                                  print_bool(dp_match("abc", "a.c*"))
                                                                  print_bool(dp_match("abc", "a.c*d"))
                                                                  print_bool(dp_match("aa", ".*"))
                                                                  local _bench_end = os.clock()
                                                                  collectgarbage()
                                                                  local _bench_end_mem = collectgarbage('count') * 1024
                                                                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                end;
