-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function key(state, obs)
    return ((state .. "|") .. obs)
  end
  function viterbi(observations, states, start_p, trans_p, emit_p)
    if (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(observations) == 0) or ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(states) == 0)) then
              panic("empty parameters")
            end
            local probs = {}
            local ptrs = {}
            local first_obs = observations[0 + 1]
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(states)) do
                  local state = states[i + 1]
                  probs[key(state, first_obs)] = (start_p[state] * emit_p[state][first_obs])
                  ptrs[key(state, first_obs)] = ""
                  i = (i + 1)
                end
                local t = 1
                while (t < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(observations)) do
                      local obs = observations[t + 1]
                      local j = 0
                      while (j < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(states)) do
                            local state = states[j + 1]
                            local max_prob = (-1)
                            local prev_state = ""
                            local k = 0
                            while (k < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(states)) do
                                  local state0 = states[k + 1]
                                  local obs0 = observations[(t - 1) + 1]
                                  local prob_prev = probs[key(state0, obs0)]
                                  local prob = ((prob_prev * trans_p[state0][state]) * emit_p[state][obs])
                                  if (prob > max_prob) then
                                    max_prob = prob
                                    prev_state = state0
                                  end
                                  k = (k + 1)
                                end
                                probs[key(state, obs)] = max_prob
                                ptrs[key(state, obs)] = prev_state
                                j = (j + 1)
                              end
                              t = (t + 1)
                            end
                            local path = {}
                            local n = 0
                            while (n < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(observations)) do
                                  path = (function(lst, item)
                                  local res = {table.unpack(lst or {})}
                                  table.insert(res, item)
                                  return res
                                end)(path, "")
                                n = (n + 1)
                              end
                              local last_obs = observations[((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(observations) - 1) + 1]
                                  local max_final = (-1)
                                  local last_state = ""
                                  local m = 0
                                  while (m < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(states)) do
                                        local state = states[m + 1]
                                        local prob = probs[key(state, last_obs)]
                                        if (prob > max_final) then
                                          max_final = prob
                                          last_state = state
                                        end
                                        m = (m + 1)
                                      end
                                      local last_index = ((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(observations) - 1)
                                          path[last_index + 1] = last_state
                                          local idx = last_index
                                          while (idx > 0) do
                                            local obs = observations[idx + 1]
                                            local prev = ptrs[key(path[idx + 1], obs)]
                                            path[(idx - 1) + 1] = prev
                                            idx = (idx - 1)
                                          end
                                          return path
                                        end
                                        function join_words(words)
                                          local res = ""
                                          local i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(words)) do
                                                if (i > 0) then
                                                  res = (res .. " ")
                                                end
                                                res = (res .. words[i + 1])
                                                i = (i + 1)
                                              end
                                              return res
                                            end
                                            observations = {"normal", "cold", "dizzy"}
                                            states = {"Healthy", "Fever"}
                                            start_p = {__name = "GenType1", __order = {"Healthy", "Fever"}, Healthy = 0.6, Fever = 0.4}
                                            trans_p = {__name = "GenType2", __order = {"Healthy", "Fever"}, Healthy = {__name = "GenType3", __order = {"Healthy", "Fever"}, Healthy = 0.7, Fever = 0.3}, Fever = {__name = "GenType4", __order = {"Healthy", "Fever"}, Healthy = 0.4, Fever = 0.6}}
                                            emit_p = {__name = "GenType5", __order = {"Healthy", "Fever"}, Healthy = {__name = "GenType6", __order = {"normal", "cold", "dizzy"}, normal = 0.5, cold = 0.4, dizzy = 0.1}, Fever = {__name = "GenType7", __order = {"normal", "cold", "dizzy"}, normal = 0.1, cold = 0.3, dizzy = 0.6}}
                                            result = viterbi(observations, states, start_p, trans_p, emit_p)
                                            print((((type(join_words(result)) == "table")) and (
                                            (function(v)
                                            local function encode(x)
                                            if type(x) == "table" then
                                              if x.__name and x.__order then
                                                local parts = {x.__name, " {"}
                                                for i, k in ipairs(x.__order) do
                                                  if i > 1 then parts[#parts+1] = ", " end
                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              elseif #x > 0 then
                                                  local allTables = true
                                                  for _, v in ipairs(x) do
                                                    if type(v) ~= "table" then allTables = false break end
                                                  end
                                                  local parts = {}
                                                  if not allTables then parts[#parts+1] = "[" end
                                                  for i, val in ipairs(x) do
                                                    parts[#parts+1] = encode(val)
                                                    if i < #x then parts[#parts+1] = " " end
                                                  end
                                                  if not allTables then parts[#parts+1] = "]" end
                                                  return table.concat(parts)
                                                else
                                                  local keys = {}
                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                  local parts = {"{"}
                                                  for i, k in ipairs(keys) do
                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                    if i < #keys then parts[#parts+1] = ", " end
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                end
                                              elseif type(x) == "string" then
                                                  return '"' .. x .. '"'
                                                else
                                                  return tostring(x)
                                                end
                                              end
                                              return encode(v)
                                            end)(join_words(result))) or (join_words(result))))
                                            local _bench_end = os.clock()
                                            collectgarbage()
                                            local _bench_end_mem = collectgarbage('count') * 1024
                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                          end;
