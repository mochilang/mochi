-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sort_nodes(nodes)
    local arr = nodes
    local i = 1
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(arr)) do
          local key_node = arr[i + 1]
          local j = (i - 1)
          while (j >= 0) do
            local temp = arr[j + 1]
            if (temp.key > key_node.key) then
              arr[(j + 1) + 1] = temp
              j = (j - 1)
            else
              break
            end
          end
          arr[(j + 1) + 1] = key_node
          i = (i + 1)
        end
        return arr
      end
      function print_node(n)
        print((((type((((("Node(key=" .. tostring(n.key)) .. ", freq=") .. tostring(n.freq)) .. ")")) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)((((("Node(key=" .. tostring(n.key)) .. ", freq=") .. tostring(n.freq)) .. ")"))) or ((((("Node(key=" .. tostring(n.key)) .. ", freq=") .. tostring(n.freq)) .. ")"))))
      end
      function print_binary_search_tree(root, keys, i, j, parent, is_left)
        if (((i > j) or (i < 0)) or (j > ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(root) - 1))) then
              return
            end
            local node = root[i + 1][j + 1]
            if (parent == (-1)) then
              print((((type((tostring(keys[node + 1]) .. " is the root of the binary search tree.")) == "table")) and (
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)((tostring(keys[node + 1]) .. " is the root of the binary search tree."))) or ((tostring(keys[node + 1]) .. " is the root of the binary search tree."))))
            else
              if is_left then
                print((((type((((tostring(keys[node + 1]) .. " is the left child of key ") .. tostring(parent)) .. ".")) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)((((tostring(keys[node + 1]) .. " is the left child of key ") .. tostring(parent)) .. "."))) or ((((tostring(keys[node + 1]) .. " is the left child of key ") .. tostring(parent)) .. "."))))
              else
                print((((type((((tostring(keys[node + 1]) .. " is the right child of key ") .. tostring(parent)) .. ".")) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)((((tostring(keys[node + 1]) .. " is the right child of key ") .. tostring(parent)) .. "."))) or ((((tostring(keys[node + 1]) .. " is the right child of key ") .. tostring(parent)) .. "."))))
              end
            end
            print_binary_search_tree(root, keys, i, (node - 1), keys[node + 1], true)
            print_binary_search_tree(root, keys, (node + 1), j, keys[node + 1], false)
          end
          function find_optimal_binary_search_tree(original_nodes)
            local nodes = sort_nodes(original_nodes)
            local n = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(nodes)
                local keys = {}
                local freqs = {}
                local i = 0
                while (i < n) do
                  local node = nodes[i + 1]
                  keys = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(keys, node.key)
                freqs = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(freqs, node.freq)
              i = (i + 1)
            end
            local dp = {}
            local total = {}
            local root = {}
            i = 0
            while (i < n) do
              local dp_row = {}
              local total_row = {}
              local root_row = {}
              local j = 0
              while (j < n) do
                if (i == j) then
                  dp_row = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(dp_row, freqs[i + 1])
                total_row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(total_row, freqs[i + 1])
              root_row = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(root_row, i)
          else
            dp_row = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(dp_row, 0)
          total_row = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(total_row, 0)
        root_row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(root_row, 0)
    end
    j = (j + 1)
  end
  dp = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(dp, dp_row)
total = (function(lst, item)
local res = {table.unpack(lst or {})}
table.insert(res, item)
return res
end)(total, total_row)
root = (function(lst, item)
local res = {table.unpack(lst or {})}
table.insert(res, item)
return res
end)(root, root_row)
i = (i + 1)
end
local interval_length = 2
local INF = 2147483647
while (interval_length <= n) do
  i = 0
  while (i < ((n - interval_length) + 1)) do
    local j = ((i + interval_length) - 1)
    dp[i + 1][j + 1] = INF
    total[i + 1][j + 1] = (total[i + 1][(j - 1) + 1] + freqs[j + 1])
    local r = root[i + 1][(j - 1) + 1]
    while (r <= root[(i + 1) + 1][j + 1]) do
      local left = (((r ~= i)) and (dp[i + 1][(r - 1) + 1]) or (0))
      local right = (((r ~= j)) and (dp[(r + 1) + 1][j + 1]) or (0))
      local cost = ((left + total[i + 1][j + 1]) + right)
      if (dp[i + 1][j + 1] > cost) then
        dp[i + 1][j + 1] = cost
        root[i + 1][j + 1] = r
      end
      r = (r + 1)
    end
    i = (i + 1)
  end
  interval_length = (interval_length + 1)
end
print("Binary search tree nodes:")
i = 0
while (i < n) do
  print_node(nodes[i + 1])
  i = (i + 1)
end
print((((type((("\nThe cost of optimal BST for given tree nodes is " .. tostring(dp[0 + 1][(n - 1) + 1])) .. ".")) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)((("\nThe cost of optimal BST for given tree nodes is " .. tostring(dp[0 + 1][(n - 1) + 1])) .. "."))) or ((("\nThe cost of optimal BST for given tree nodes is " .. tostring(dp[0 + 1][(n - 1) + 1])) .. "."))))
print_binary_search_tree(root, keys, 0, (n - 1), (-1), false)
end
function main()
  local nodes = {{key = 12, freq = 8}, {key = 10, freq = 34}, {key = 20, freq = 50}, {key = 42, freq = 3}, {key = 25, freq = 40}, {key = 37, freq = 30}}
  find_optimal_binary_search_tree(nodes)
end
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
