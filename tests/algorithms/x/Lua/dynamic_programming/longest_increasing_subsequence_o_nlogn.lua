-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function ceil_index(v, left, right, key)
    local l = left
    local r = right
    while ((r - l) > 1) do
      local middle = ((l + r) // 2)
      if (v[middle + 1] >= key) then
        r = middle
      else
        l = middle
      end
    end
    return r
  end
  function longest_increasing_subsequence_length(v)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(v) == 0) then
          return 0
        end
        local tail = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(v)) do
              tail = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(tail, 0)
            i = (i + 1)
          end
          local length = 1
          tail[0 + 1] = v[0 + 1]
          local j = 1
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(v)) do
                if (v[j + 1] < tail[0 + 1]) then
                  tail[0 + 1] = v[j + 1]
                else
                  if (v[j + 1] > tail[(length - 1) + 1]) then
                    tail[length + 1] = v[j + 1]
                    length = (length + 1)
                  else
                    local idx = ceil_index(tail, (-1), (length - 1), v[j + 1])
                    tail[idx + 1] = v[j + 1]
                  end
                end
                j = (j + 1)
              end
              return length
            end
            function main()
              local example1 = {2, 5, 3, 7, 11, 8, 10, 13, 6}
              local example2 = {}
              local example3 = {0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15}
              local example4 = {5, 4, 3, 2, 1}
              print(longest_increasing_subsequence_length(example1))
              print(longest_increasing_subsequence_length(example2))
              print(longest_increasing_subsequence_length(example3))
              print(longest_increasing_subsequence_length(example4))
            end
            main()
            local _bench_end = os.clock()
            collectgarbage()
            local _bench_end_mem = collectgarbage('count') * 1024
            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
          end;
