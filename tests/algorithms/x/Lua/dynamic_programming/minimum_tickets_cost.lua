-- Generated by Mochi v0.10.72 on 2025-08-25 08:35 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for k in pairs(v) do
      if k ~= '__name' and k ~= '__order' then
        c = c + 1
      end
    end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _str(v)
    if type(v) == 'number' then
      local s = tostring(v)
      s = string.gsub(s, '%.0+$', '')
      return s
    elseif type(v) == 'boolean' then
        if v then return 'true' else return 'false' end
      elseif type(v) == 'table' then
          local src = v
          if v.items ~= nil then
            src = v.items
          end
          local parts = {}
          for i = 1, #src do
            parts[#parts+1] = _str(src[i])
          end
          return '[' .. table.concat(parts, ', ') .. ']'
        end
        return tostring(v)
      end
      do
        collectgarbage()
        local _bench_start_mem = collectgarbage('count') * 1024
        local _bench_start = os.clock()
        function make_list(len, value)
          local arr = {}
          local i = 0
          while (i < len) do
            arr = (function(lst, item)
            local res = {table.unpack(lst or {})}
            res[#res+1] = item
            return res
          end)(arr, value)
          i = (i + 1)
        end
        return arr
      end
      function max_int(a, b)
        if (a > b) then
          return a
        else
          return b
        end
      end
      function min_int(a, b)
        if (a < b) then
          return a
        else
          return b
        end
      end
      function min3(a, b, c)
        return min_int(min_int(a, b), c)
      end
      function minimum_tickets_cost(days, costs)
        if (_len(days) == 0) then
          return 0
        end
        local last_day = days[(_len(days) - 1) + 1]
        local dp = make_list((last_day + 1), 0)
        local day_index = 0
        local d = 1
        while (d <= last_day) do
          if ((day_index < _len(days)) and (d == days[day_index + 1])) then
            local cost1 = (dp[(d - 1) + 1] + costs[0 + 1])
            local cost7 = (dp[max_int(0, (d - 7)) + 1] + costs[1 + 1])
            local cost30 = (dp[max_int(0, (d - 30)) + 1] + costs[2 + 1])
            dp[d + 1] = min3(cost1, cost7, cost30)
            day_index = (day_index + 1)
          else
            dp[d + 1] = dp[(d - 1) + 1]
          end
          d = (d + 1)
        end
        return dp[last_day + 1]
      end
      print((((type(_str(minimum_tickets_cost({1, 4, 6, 7, 8, 20}, {2, 7, 15}))) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if math.type and math.type(x) == "integer" then
              return string.format("%d", x)
            else
              local s = string.format("%g", x)
              if not string.find(s, "[%.eE]") then
                s = s .. ".0"
              end
              return s
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(_str(minimum_tickets_cost({1, 4, 6, 7, 8, 20}, {2, 7, 15})))) or (_str(minimum_tickets_cost({1, 4, 6, 7, 8, 20}, {2, 7, 15})))))
        print((((type(_str(minimum_tickets_cost({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}, {2, 7, 15}))) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "number" then
              if math.type and math.type(x) == "integer" then
                return string.format("%d", x)
              else
                local s = string.format("%g", x)
                if not string.find(s, "[%.eE]") then
                  s = s .. ".0"
                end
                return s
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(_str(minimum_tickets_cost({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}, {2, 7, 15})))) or (_str(minimum_tickets_cost({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}, {2, 7, 15})))))
          print((((type(_str(minimum_tickets_cost({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}, {2, 90, 150}))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "number" then
                if math.type and math.type(x) == "integer" then
                  return string.format("%d", x)
                else
                  local s = string.format("%g", x)
                  if not string.find(s, "[%.eE]") then
                    s = s .. ".0"
                  end
                  return s
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(_str(minimum_tickets_cost({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}, {2, 90, 150})))) or (_str(minimum_tickets_cost({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31}, {2, 90, 150})))))
            local _bench_end = os.clock()
            collectgarbage()
            local _bench_end_mem = collectgarbage('count') * 1024
            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
          end;
