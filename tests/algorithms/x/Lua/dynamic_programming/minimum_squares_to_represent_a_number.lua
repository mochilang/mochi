-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_list(len, value)
    local arr = {}
    local i = 0
    while (i < len) do
      arr = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(arr, value)
    i = (i + 1)
  end
  return arr
end
function int_sqrt(n)
  local r = 0
  while (((r + 1) * (r + 1)) <= n) do
    r = (r + 1)
  end
  return r
end
function minimum_squares_to_represent_a_number(number)
  if (number < 0) then
    panic("the value of input must not be a negative number")
  end
  if (number == 0) then
    return 1
  end
  local answers = make_list((number + 1), (-1))
  answers[0 + 1] = 0
  local i = 1
  while (i <= number) do
    local answer = i
    local root = int_sqrt(i)
    local j = 1
    while (j <= root) do
      local current_answer = (1 + answers[(i - (j * j)) + 1])
      if (current_answer < answer) then
        answer = current_answer
      end
      j = (j + 1)
    end
    answers[i + 1] = answer
    i = (i + 1)
  end
  return answers[number + 1]
end
print(minimum_squares_to_represent_a_number(25))
print(minimum_squares_to_represent_a_number(21))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
