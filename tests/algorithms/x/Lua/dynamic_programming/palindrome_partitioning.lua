-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function min_partitions(s)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)
        local cut = {}
        local i = 0
        while (i < n) do
          cut = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(cut, 0)
        i = (i + 1)
      end
      local pal = {}
      i = 0
      while (i < n) do
        local row = {}
        local j = 0
        while (j < n) do
          row = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(row, false)
        j = (j + 1)
      end
      pal = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(pal, row)
    i = (i + 1)
  end
  i = 0
  while (i < n) do
    local mincut = i
    local j = 0
    while (j <= i) do
      if ((string.sub(s, (i + 1), (i + 1)) == string.sub(s, (j + 1), (j + 1))) and (((i - j) < 2) or pal[(j + 1) + 1][(i - 1) + 1])) then
        pal[j + 1][i + 1] = true
        if (j == 0) then
          mincut = 0
        else
          local candidate = (cut[(j - 1) + 1] + 1)
          if (candidate < mincut) then
            mincut = candidate
          end
        end
      end
      j = (j + 1)
    end
    cut[i + 1] = mincut
    i = (i + 1)
  end
  return cut[(n - 1) + 1]
end
print(min_partitions("aab"))
print(min_partitions("aaa"))
print(min_partitions("ababbbabbababa"))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
