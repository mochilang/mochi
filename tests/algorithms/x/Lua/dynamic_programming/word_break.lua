-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function build_set(words)
    local m = {}
    for _, w in ipairs(words) do
      m[w] = true
    end
    return m
  end
  function word_break(s, words)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)
        local dict = build_set(words)
        local dp = {}
        local i = 0
        while (i <= n) do
          dp = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(dp, false)
        i = (i + 1)
      end
      dp[0 + 1] = true
      i = 1
      while (i <= n) do
        local j = 0
        while (j < i) do
          if dp[j + 1] then
            local sub = string.sub(s, (j + 1), i)
            if (dict[sub] ~= nil) then
              dp[i + 1] = true
              j = i
            end
          end
          j = (j + 1)
        end
        i = (i + 1)
      end
      return dp[n + 1]
    end
    function print_bool(b)
      if b then
        print(((true) and (1) or (0)))
      else
        print(((false) and (1) or (0)))
      end
    end
    print_bool(word_break("applepenapple", {"apple", "pen"}))
    print_bool(word_break("catsandog", {"cats", "dog", "sand", "and", "cat"}))
    print_bool(word_break("cars", {"car", "ca", "rs"}))
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
