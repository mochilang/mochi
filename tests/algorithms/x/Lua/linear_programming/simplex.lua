-- Generated by Mochi v0.10.65 on 2025-08-14 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pivot(t, row, col)
    local pivotRow = {}
    local pivotVal = t[row + 1][col + 1]
    for j = 0, (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(t[row + 1]) - 1 do
          pivotRow = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(pivotRow, (t[row + 1][j + 1] / pivotVal))
      end
      t[row + 1] = pivotRow
      for i = 0, (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(t) - 1 do
            if (i ~= row) then
              local factor = t[i + 1][col + 1]
              local newRow = {}
              for j = 0, (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(t[i + 1]) - 1 do
                    local value = (t[i + 1][j + 1] - (factor * pivotRow[j + 1]))
                    newRow = (function(lst, item)
                    lst = lst or {}
                    table.insert(lst, item)
                    return lst
                  end)(newRow, value)
                end
                t[i + 1] = newRow
              end
            end
            return t
          end
          function findPivot(t)
            local col = 0
            local minVal = 0.0
            for j = 0, ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(t[0 + 1]) - 1) - 1 do
                  local v = t[0 + 1][j + 1]
                  if (v < minVal) then
                    minVal = v
                    col = j
                  end
                end
                if (minVal >= 0.0) then
                  return {(-1), (-1)}
                end
                local row = (-1)
                local minRatio = 0.0
                local first = true
                for i = 1, (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(t) - 1 do
                      local coeff = t[i + 1][col + 1]
                      if (coeff > 0.0) then
                        local rhs = t[i + 1][((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(t[i + 1]) - 1) + 1]
                            local ratio = (rhs // coeff)
                            if (first or (ratio < minRatio)) then
                              minRatio = ratio
                              row = i
                              first = false
                            end
                          end
                        end
                        return {row, col}
                      end
                      function interpret(t, nVars)
                        local lastCol = ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(t[0 + 1]) - 1)
                            local p = t[0 + 1][lastCol + 1]
                            if (p < 0.0) then
                              p = (-p)
                            end
                            local result = {}
                            result.P = p
                            for i = 0, nVars - 1 do
                              local nzRow = (-1)
                              local nzCount = 0
                              for r = 0, (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(t) - 1 do
                                    local val = t[r + 1][i + 1]
                                    if (val ~= 0.0) then
                                      nzCount = (nzCount + 1)
                                      nzRow = r
                                    end
                                  end
                                  if ((nzCount == 1) and (t[nzRow + 1][i + 1] == 1.0)) then
                                    result[("x" .. _str((i + 1)))] = t[nzRow + 1][lastCol + 1]
                                  end
                                end
                                return result
                              end
                              function simplex(tab)
                                local t = tab
                                while true do
                                  local p = findPivot(t)
                                  local row = p[0 + 1]
                                  local col = p[1 + 1]
                                  if (row < 0) then
                                    break
                                  end
                                  t = pivot(t, row, col)
                                end
                                return t
                              end
                              tableau = {{(-1.0), (-1.0), 0.0, 0.0, 0.0}, {1.0, 3.0, 1.0, 0.0, 4.0}, {3.0, 1.0, 0.0, 1.0, 4.0}}
                              finalTab = simplex(tableau)
                              res = interpret(finalTab, 2)
                              print((((type(("P: " .. _str(res.P))) == "table")) and (
                              (function(v)
                              local function encode(x)
                              if type(x) == "table" then
                                if x.__name and x.__order then
                                  local parts = {x.__name, " {"}
                                  for i, k in ipairs(x.__order) do
                                    if i > 1 then parts[#parts+1] = ", " end
                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                elseif #x > 0 then
                                    local allTables = true
                                    for _, v in ipairs(x) do
                                      if type(v) ~= "table" then allTables = false break end
                                    end
                                    local parts = {}
                                    if not allTables then parts[#parts+1] = "[" end
                                    for i, val in ipairs(x) do
                                      parts[#parts+1] = encode(val)
                                      if i < #x then parts[#parts+1] = " " end
                                    end
                                    if not allTables then parts[#parts+1] = "]" end
                                    return table.concat(parts)
                                  else
                                    local keys = {}
                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                    local parts = {"{"}
                                    for i, k in ipairs(keys) do
                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                      if i < #keys then parts[#parts+1] = ", " end
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  end
                                elseif type(x) == "string" then
                                    return '"' .. x .. '"'
                                  else
                                    return tostring(x)
                                  end
                                end
                                return encode(v)
                              end)(("P: " .. _str(res.P)))) or (("P: " .. _str(res.P)))))
                              for i = 0, 2 - 1 do
                                key = ("x" .. _str((i + 1)))
                                if (res[key] ~= nil) then
                                  print((((type(((tostring(key) .. ": ") .. _str(res[key]))) == "table")) and (
                                  (function(v)
                                  local function encode(x)
                                  if type(x) == "table" then
                                    if x.__name and x.__order then
                                      local parts = {x.__name, " {"}
                                      for i, k in ipairs(x.__order) do
                                        if i > 1 then parts[#parts+1] = ", " end
                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    elseif #x > 0 then
                                        local allTables = true
                                        for _, v in ipairs(x) do
                                          if type(v) ~= "table" then allTables = false break end
                                        end
                                        local parts = {}
                                        if not allTables then parts[#parts+1] = "[" end
                                        for i, val in ipairs(x) do
                                          parts[#parts+1] = encode(val)
                                          if i < #x then parts[#parts+1] = " " end
                                        end
                                        if not allTables then parts[#parts+1] = "]" end
                                        return table.concat(parts)
                                      else
                                        local keys = {}
                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                        local parts = {"{"}
                                        for i, k in ipairs(keys) do
                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                          if i < #keys then parts[#parts+1] = ", " end
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      end
                                    elseif type(x) == "string" then
                                        return '"' .. x .. '"'
                                      else
                                        return tostring(x)
                                      end
                                    end
                                    return encode(v)
                                  end)(((tostring(key) .. ": ") .. _str(res[key])))) or (((tostring(key) .. ": ") .. _str(res[key])))))
                                end
                              end
                              local _bench_end = os.clock()
                              collectgarbage()
                              local _bench_end_mem = collectgarbage('count') * 1024
                              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                            end;
