-- Generated by Mochi v0.10.69 on 2025-08-22 14:19 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for k in pairs(v) do
      if k ~= '__name' and k ~= '__order' then
        c = c + 1
      end
    end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _panic(msg)
    -- ensure panic messages are newline-terminated for readability
    io.stderr:write(tostring(msg) .. '\n')
    io.stderr:flush()
    os.exit(1)
  end
  
  local function _str(v)
  if type(v) == 'number' then
    local s = tostring(v)
    s = string.gsub(s, '%.0+$', '')
    return s
  elseif type(v) == 'boolean' then
      if v then return 'true' else return 'false' end
    elseif type(v) == 'table' then
        local src = v
        if v.items ~= nil then
          src = v.items
        end
        local parts = {}
        for i = 1, #src do
          parts[#parts+1] = _str(src[i])
        end
        return '[' .. table.concat(parts, ', ') .. ']'
      end
      return tostring(v)
    end
    do
      collectgarbage()
      local _bench_start_mem = collectgarbage('count') * 1024
      local _bench_start = os.clock()
      function pow10(n)
        local p = 1.0
        if (n >= 0) then
          local i = 0
          while (i < n) do
            p = (p * 10.0)
            i = (i + 1)
          end
        else
          local i = 0
          while (i > n) do
            p = (p / 10.0)
            i = (i - 1)
          end
        end
        return p
      end
      function floor(x)
        local i = (function(v) if v >= 0 then return math.floor(v) else return math.ceil(v) end end)((tonumber(x) or 0))
        local f = i
        if (f > x) then
          return (i - 1)
        end
        return f
      end
      function format_scientific_3(x)
        if (x == 0.0) then
          return "0.000e+00"
        end
        local sign = ""
        local num = x
        if (num < 0.0) then
          sign = "-"
          num = (-num)
        end
        local exp = 0
        while (num >= 10.0) do
          num = (num / 10.0)
          exp = (exp + 1)
        end
        while (num < 1.0) do
          num = (num * 10.0)
          exp = (exp - 1)
        end
        local temp = floor(((num * 1000.0) + 0.5))
        local scaled = (function(v) if v >= 0 then return math.floor(v) else return math.ceil(v) end end)((tonumber(temp) or 0))
        if (scaled == 10000) then
          scaled = 1000
          exp = (exp + 1)
        end
        local int_part = (scaled // 1000)
        local frac_part = (scaled % 1000)
        local frac_str = _str(frac_part)
        while (_len(frac_str) < 3) do
          frac_str = ("0" .. frac_str)
        end
        local mantissa = ((_str(int_part) .. ".") .. frac_str)
        local exp_sign = "+"
        local exp_abs = exp
        if (exp < 0) then
          exp_sign = "-"
          exp_abs = (-exp)
        end
        local exp_str = _str(exp_abs)
        if (exp_abs < 10) then
          exp_str = ("0" .. exp_str)
        end
        return ((((sign .. mantissa) .. "e") .. exp_sign) .. exp_str)
      end
      function orbital_transfer_work(mass_central, mass_object, r_initial, r_final)
        local G = (6.6743 * pow10((-11)))
        if ((r_initial <= 0.0) or (r_final <= 0.0)) then
          _panic("Orbital radii must be greater than zero.")
        end
        local work = ((((G * mass_central) * mass_object) / 2.0) * ((1.0 / r_initial) - (1.0 / r_final)))
        return format_scientific_3(work)
      end
      function test_orbital_transfer_work()
        if (orbital_transfer_work((5.972 * pow10(24)), 1000.0, (6.371 * pow10(6)), (7.0 * pow10(6))) ~= "2.811e+09") then
          _panic("case1 failed")
        end
        if (orbital_transfer_work((5.972 * pow10(24)), 500.0, (7.0 * pow10(6)), (6.371 * pow10(6))) ~= "-1.405e+09") then
          _panic("case2 failed")
        end
        if (orbital_transfer_work((1.989 * pow10(30)), 1000.0, (1.5 * pow10(11)), (2.28 * pow10(11))) ~= "1.514e+11") then
          _panic("case3 failed")
        end
      end
      function main()
        test_orbital_transfer_work()
        print((((type(orbital_transfer_work((5.972 * pow10(24)), 1000.0, (6.371 * pow10(6)), (7.0 * pow10(6)))) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "number" then
              if math.type and math.type(x) == "integer" then
                return string.format("%d", x)
              else
                local s = string.format("%g", x)
                if not string.find(s, "[%.eE]") then
                  s = s .. ".0"
                end
                return s
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(orbital_transfer_work((5.972 * pow10(24)), 1000.0, (6.371 * pow10(6)), (7.0 * pow10(6))))) or (orbital_transfer_work((5.972 * pow10(24)), 1000.0, (6.371 * pow10(6)), (7.0 * pow10(6))))))
        end
        main()
        local _bench_end = os.clock()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
