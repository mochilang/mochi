-- Generated by Mochi v0.10.67 on 2025-08-17 13:22 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pow10(n)
    local result = 1.0
    local i = 0
    while (i < n) do
      result = (result * 10.0)
      i = (i + 1)
    end
    return result
  end
  function sqrt(x)
    if (x <= 0.0) then
      return 0.0
    end
    local guess = x
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2.0)
      i = (i + 1)
    end
    return guess
  end
  function abs(x)
    if (x < 0.0) then
      return (-x)
    end
    return x
  end
  function capture_radii(target_body_radius, target_body_mass, projectile_velocity)
    if (target_body_mass < 0.0) then
      _panic("Mass cannot be less than 0")
    end
    if (target_body_radius < 0.0) then
      _panic("Radius cannot be less than 0")
    end
    if (projectile_velocity > C) then
      _panic("Cannot go beyond speed of light")
    end
    local escape_velocity_squared = (((2.0 * G) * target_body_mass) / target_body_radius)
    local denom = (projectile_velocity * projectile_velocity)
    local capture_radius = (target_body_radius * sqrt((1.0 + (escape_velocity_squared / denom))))
    return capture_radius
  end
  function capture_area(capture_radius)
    if (capture_radius < 0.0) then
      _panic("Cannot have a capture radius less than 0")
    end
    local sigma = ((PI * capture_radius) * capture_radius)
    return sigma
  end
  function run_tests()
    local r = capture_radii((6.957 * pow10(8)), (1.99 * pow10(30)), 25000.0)
    if (abs((r - (1.720959069143714 * pow10(10)))) > 1.0) then
      _panic("capture_radii failed")
    end
    local a = capture_area(r)
    if (abs((a - (9.304455331801812 * pow10(20)))) > 1.0) then
      _panic("capture_area failed")
    end
  end
  function main()
    run_tests()
    local r = capture_radii((6.957 * pow10(8)), (1.99 * pow10(30)), 25000.0)
    print((((type(_str(r)) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "number" then
          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
            return string.format("%d", x)
          else
            return tostring(x)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(_str(r))) or (_str(r))))
      print((((type(_str(capture_area(r))) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
              return string.format("%d", x)
            else
              return tostring(x)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(_str(capture_area(r)))) or (_str(capture_area(r)))))
      end
      G = 6.6743e-11
      C = 2.99792458e+08
      PI = 3.141592653589793
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
