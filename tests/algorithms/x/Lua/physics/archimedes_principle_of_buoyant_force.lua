-- Generated by Mochi v0.10.73 on 2025-08-25 23:45 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
if type(msg) == 'table' then
  io.stderr:write(_str(msg) .. '\n')
else
  io.stderr:write(tostring(msg) .. '\n')
end
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'boolean' then
    if v then return 'true' else return 'false' end
  elseif type(v) == 'table' then
      local src = v
      if v.items ~= nil then
        src = v.items
      end
      local parts = {}
      for i = 1, #src do
        parts[#parts+1] = _str(src[i])
      end
      return '[' .. table.concat(parts, ', ') .. ']'
    end
    return tostring(v)
  end
  do
    collectgarbage()
    local _bench_start_mem = collectgarbage('count') * 1024
    local _bench_start = os.clock()
    function archimedes_principle(fluid_density, volume, gravity)
      if (fluid_density <= 0.0) then
        _panic("Impossible fluid density")
      end
      if (volume <= 0.0) then
        _panic("Impossible object volume")
      end
      if (gravity < 0.0) then
        _panic("Impossible gravity")
      end
      return ((fluid_density * volume) * gravity)
    end
    function archimedes_principle_default(fluid_density, volume)
      local res = archimedes_principle(fluid_density, volume, G)
      return res
    end
    G = 9.80665
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
