-- Generated by Mochi v0.10.59 on 2025-08-07 11:58 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_body(px, py, vx, vy, mass)
    return {position_x = px, position_y = py, velocity_x = vx, velocity_y = vy, mass = mass}
  end
  function update_velocity(body, force_x, force_y, delta_time)
    body.velocity_x = (body.velocity_x + (force_x * delta_time))
    body.velocity_y = (body.velocity_y + (force_y * delta_time))
    return body
  end
  function update_position(body, delta_time)
    body.position_x = (body.position_x + (body.velocity_x * delta_time))
    body.position_y = (body.position_y + (body.velocity_y * delta_time))
    return body
  end
  function make_body_system(bodies, g, tf, sf)
    return {bodies = bodies, gravitation_constant = g, time_factor = tf, softening_factor = sf}
  end
  function sqrtApprox(x)
    local guess = (x / 2)
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function update_system(system, delta_time)
    local bodies = system.bodies
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(bodies)) do
          local body1 = bodies[i + 1]
          local force_x = 0
          local force_y = 0
          local j = 0
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(bodies)) do
                if (i ~= j) then
                  local body2 = bodies[j + 1]
                  local dif_x = (body2.position_x - body1.position_x)
                  local dif_y = (body2.position_y - body1.position_y)
                  local distance_sq = (((dif_x * dif_x) + (dif_y * dif_y)) + system.softening_factor)
                  local distance = sqrtApprox(distance_sq)
                  local denom = ((distance * distance) * distance)
                  force_x = (force_x + (((system.gravitation_constant * body2.mass) * dif_x) / denom))
                  force_y = (force_y + (((system.gravitation_constant * body2.mass) * dif_y) / denom))
                end
                j = (j + 1)
              end
              body1 = update_velocity((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(body1), force_x, force_y, (delta_time * system.time_factor))
              bodies[i + 1] = body1
              i = (i + 1)
            end
            i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(bodies)) do
                  local body = bodies[i + 1]
                  body = update_position((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(body), (delta_time * system.time_factor))
                  bodies[i + 1] = body
                  i = (i + 1)
                end
                system.bodies = bodies
                return system
              end
              function main()
                local b1 = make_body(0, 0, 0, 0, 1)
                local b2 = make_body(10, 0, 0, 0, 1)
                local sys1 = make_body_system({b1, b2}, 1, 1, 0)
                sys1 = update_system((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(sys1), 1)
                local b1_after = sys1.bodies[0 + 1]
                local pos1x = b1_after.position_x
                local pos1y = b1_after.position_y
                ;
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if #x > 0 then
                    local parts = {"["}
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "]"
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do table.insert(keys, k) end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                print(encode(v))
              end)({__name = "GenType1", __order = {"x", "y"}, x = pos1x, y = pos1y})
              local vel1x = b1_after.velocity_x
              local vel1y = b1_after.velocity_y
              ;
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if #x > 0 then
                  local parts = {"["}
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "]"
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do table.insert(keys, k) end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              print(encode(v))
            end)({__name = "GenType2", __order = {"vx", "vy"}, vx = vel1x, vy = vel1y})
            local b3 = make_body((-10), 0, 0, 0, 1)
            local b4 = make_body(10, 0, 0, 0, 4)
            local sys2 = make_body_system({b3, b4}, 1, 10, 0)
            sys2 = update_system((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(sys2), 1)
            local b2_after = sys2.bodies[0 + 1]
            local pos2x = b2_after.position_x
            local pos2y = b2_after.position_y
            ;
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if #x > 0 then
                local parts = {"["}
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "]"
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do table.insert(keys, k) end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            print(encode(v))
          end)({__name = "GenType3", __order = {"x", "y"}, x = pos2x, y = pos2y})
          local vel2x = b2_after.velocity_x
          local vel2y = b2_after.velocity_y
          ;
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if #x > 0 then
              local parts = {"["}
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "]"
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do table.insert(keys, k) end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          print(encode(v))
        end)({__name = "GenType4", __order = {"vx", "vy"}, vx = vel2x, vy = vel2y})
      end
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
