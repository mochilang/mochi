-- Generated by Mochi v0.10.66 on 2025-08-16 11:48 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function dot(a, b)
    local sum = 0.0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(a)) do
          sum = (sum + (a[i + 1] * b[i + 1]))
          i = (i + 1)
        end
        return sum
      end
      function maxf(a, b)
        if (a > b) then
          return a
        end
        return b
      end
      function minf(a, b)
        if (a < b) then
          return a
        end
        return b
      end
      function absf(x)
        if (x >= 0.0) then
          return x
        end
        return (0.0 - x)
      end
      function predict_raw(samples, labels, alphas, b, x)
        local res = 0.0
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(samples)) do
              res = (res + ((alphas[i + 1] * labels[i + 1]) * dot(samples[i + 1], x)))
              i = (i + 1)
            end
            return (res + b)
          end
          function smo_train(samples, labels, c, tol, max_passes)
            local m = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(samples)
                local alphas = {}
                local i = 0
                while (i < m) do
                  alphas = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  res[#res+1] = item
                  return res
                end)(alphas, 0.0)
                i = (i + 1)
              end
              local b = 0.0
              local passes = 0
              while (passes < max_passes) do
                local num_changed = 0
                local i1 = 0
                while (i1 < m) do
                  local Ei = (predict_raw(samples, labels, alphas, b, samples[i1 + 1]) - labels[i1 + 1])
                  if ((((labels[i1 + 1] * Ei) < (0.0 - tol)) and (alphas[i1 + 1] < c)) or (((labels[i1 + 1] * Ei) > tol) and (alphas[i1 + 1] > 0.0))) then
                    local i2 = ((i1 + 1) % m)
                    local Ej = (predict_raw(samples, labels, alphas, b, samples[i2 + 1]) - labels[i2 + 1])
                    local alpha1_old = alphas[i1 + 1]
                    local alpha2_old = alphas[i2 + 1]
                    local L = 0.0
                    local H = 0.0
                    if (labels[i1 + 1] ~= labels[i2 + 1]) then
                      L = maxf(0.0, (alpha2_old - alpha1_old))
                      H = minf(c, ((c + alpha2_old) - alpha1_old))
                    else
                      L = maxf(0.0, ((alpha2_old + alpha1_old) - c))
                      H = minf(c, (alpha2_old + alpha1_old))
                    end
                    if (L == H) then
                      i1 = (i1 + 1)
                      goto __cont_2
                    end
                    local eta = (((2.0 * dot(samples[i1 + 1], samples[i2 + 1])) - dot(samples[i1 + 1], samples[i1 + 1])) - dot(samples[i2 + 1], samples[i2 + 1]))
                    if (eta >= 0.0) then
                      i1 = (i1 + 1)
                      goto __cont_2
                    end
                    alphas[i2 + 1] = (alpha2_old - ((labels[i2 + 1] * (Ei - Ej)) / eta))
                    if (alphas[i2 + 1] > H) then
                      alphas[i2 + 1] = H
                    end
                    if (alphas[i2 + 1] < L) then
                      alphas[i2 + 1] = L
                    end
                    if (absf((alphas[i2 + 1] - alpha2_old)) < 1e-05) then
                      i1 = (i1 + 1)
                      goto __cont_2
                    end
                    alphas[i1 + 1] = (alpha1_old + ((labels[i1 + 1] * labels[i2 + 1]) * (alpha2_old - alphas[i2 + 1])))
                    local b1 = (((b - Ei) - ((labels[i1 + 1] * (alphas[i1 + 1] - alpha1_old)) * dot(samples[i1 + 1], samples[i1 + 1]))) - ((labels[i2 + 1] * (alphas[i2 + 1] - alpha2_old)) * dot(samples[i1 + 1], samples[i2 + 1])))
                    local b2 = (((b - Ej) - ((labels[i1 + 1] * (alphas[i1 + 1] - alpha1_old)) * dot(samples[i1 + 1], samples[i2 + 1]))) - ((labels[i2 + 1] * (alphas[i2 + 1] - alpha2_old)) * dot(samples[i2 + 1], samples[i2 + 1])))
                    if ((alphas[i1 + 1] > 0.0) and (alphas[i1 + 1] < c)) then
                      b = b1
                    else
                      if ((alphas[i2 + 1] > 0.0) and (alphas[i2 + 1] < c)) then
                        b = b2
                      else
                        b = ((b1 + b2) / 2.0)
                      end
                    end
                    num_changed = (num_changed + 1)
                  end
                  i1 = (i1 + 1)
                  ::__cont_2::
                end
                if (num_changed == 0) then
                  passes = (passes + 1)
                else
                  passes = 0
                end
                ::__cont_1::
              end
              return {alphas, {b}}
            end
            function predict(samples, labels, model, x)
              local alphas = model[0 + 1]
              local b = model[1 + 1][0 + 1]
              local val = predict_raw(samples, labels, alphas, b, x)
              if (val >= 0.0) then
                return 1.0
              end
              return (-1.0)
            end
            samples = {{2.0, 2.0}, {1.5, 1.5}, {0.0, 0.0}, {0.5, 0.0}}
            labels = {1.0, 1.0, (-1.0), (-1.0)}
            model = smo_train(samples, labels, 1.0, 0.001, 10)
            print((((type(predict(samples, labels, model, {1.5, 1.0})) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "number" then
                  if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                    return string.format("%d", x)
                  else
                    return tostring(x)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(predict(samples, labels, model, {1.5, 1.0}))) or (predict(samples, labels, model, {1.5, 1.0}))))
              print((((type(predict(samples, labels, model, {0.2, 0.1})) == "table")) and (
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "number" then
                    if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                      return string.format("%d", x)
                    else
                      return tostring(x)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(predict(samples, labels, model, {0.2, 0.1}))) or (predict(samples, labels, model, {0.2, 0.1}))))
                local _bench_end = os.clock()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
