-- Generated by Mochi v0.10.66 on 2025-08-16 11:48 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function dot(x, y)
    local sum = 0.0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(x)) do
          sum = (sum + (x[i + 1] * y[i + 1]))
          i = (i + 1)
        end
        return sum
      end
      function run_steep_gradient_descent(data_x, data_y, len_data, alpha, theta)
        local gradients = {}
        local j = 0
        while (j < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(theta)) do
              gradients = (function(lst, item)
              local res = {table.unpack(lst or {})}
              res[#res+1] = item
              return res
            end)(gradients, 0.0)
            j = (j + 1)
          end
          local i = 0
          while (i < len_data) do
            local prediction = dot(theta, data_x[i + 1])
            local error = (prediction - data_y[i + 1])
            local k = 0
            while (k < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(theta)) do
                  gradients[k + 1] = (gradients[k + 1] + (error * data_x[i + 1][k + 1]))
                  k = (k + 1)
                end
                i = (i + 1)
              end
              local t = {}
              local g = 0
              while (g < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(theta)) do
                    t = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    res[#res+1] = item
                    return res
                  end)(t, (theta[g + 1] - ((alpha / len_data) * gradients[g + 1])))
                  g = (g + 1)
                end
                return t
              end
              function sum_of_square_error(data_x, data_y, len_data, theta)
                local total = 0.0
                local i = 0
                while (i < len_data) do
                  local prediction = dot(theta, data_x[i + 1])
                  local diff = (prediction - data_y[i + 1])
                  total = (total + (diff * diff))
                  i = (i + 1)
                end
                return (total / (2.0 * len_data))
              end
              function run_linear_regression(data_x, data_y)
                local iterations = 10
                local alpha = 0.01
                local no_features = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(data_x[0 + 1])
                    local len_data = (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(data_x)
                        local theta = {}
                        local i = 0
                        while (i < no_features) do
                          theta = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          res[#res+1] = item
                          return res
                        end)(theta, 0.0)
                        i = (i + 1)
                      end
                      local iter = 0
                      while (iter < iterations) do
                        theta = run_steep_gradient_descent(data_x, data_y, len_data, alpha, theta)
                        local error = sum_of_square_error(data_x, data_y, len_data, theta)
                        print((((type(((("At Iteration " .. _str((iter + 1))) .. " - Error is ") .. _str(error))) == "table")) and (
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "number" then
                              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                return string.format("%d", x)
                              else
                                return tostring(x)
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(((("At Iteration " .. _str((iter + 1))) .. " - Error is ") .. _str(error)))) or (((("At Iteration " .. _str((iter + 1))) .. " - Error is ") .. _str(error)))))
                          iter = (iter + 1)
                        end
                        return theta
                      end
                      function absf(x)
                        if (x < 0.0) then
                          return (-x)
                        else
                          return x
                        end
                      end
                      function mean_absolute_error(predicted_y, original_y)
                        local total = 0.0
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(predicted_y)) do
                              local diff = absf((predicted_y[i + 1] - original_y[i + 1]))
                              total = (total + diff)
                              i = (i + 1)
                            end
                            return (total / (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(predicted_y))
                              end
                              data_x = {{1.0, 1.0}, {1.0, 2.0}, {1.0, 3.0}}
                              data_y = {1.0, 2.0, 3.0}
                              theta = run_linear_regression(data_x, data_y)
                              print("Resultant Feature vector :")
                              i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(theta)) do
                                    print((((type(_str(theta[i + 1])) == "table")) and (
                                    (function(v)
                                    local function encode(x)
                                    if type(x) == "table" then
                                      if x.__name and x.__order then
                                        local parts = {x.__name, " {"}
                                        for i, k in ipairs(x.__order) do
                                          if i > 1 then parts[#parts+1] = ", " end
                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      elseif #x > 0 then
                                          local allTables = true
                                          for _, v in ipairs(x) do
                                            if type(v) ~= "table" then allTables = false break end
                                          end
                                          local parts = {}
                                          if not allTables then parts[#parts+1] = "[" end
                                          for i, val in ipairs(x) do
                                            parts[#parts+1] = encode(val)
                                            if i < #x then parts[#parts+1] = " " end
                                          end
                                          if not allTables then parts[#parts+1] = "]" end
                                          return table.concat(parts)
                                        else
                                          local keys = {}
                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                          local parts = {"{"}
                                          for i, k in ipairs(keys) do
                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                            if i < #keys then parts[#parts+1] = ", " end
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        end
                                      elseif type(x) == "number" then
                                          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                            return string.format("%d", x)
                                          else
                                            return tostring(x)
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(_str(theta[i + 1]))) or (_str(theta[i + 1]))))
                                      i = (i + 1)
                                    end
                                    predicted_y = {3.0, (-0.5), 2.0, 7.0}
                                    original_y = {2.5, 0.0, 2.0, 8.0}
                                    mae = mean_absolute_error(predicted_y, original_y)
                                    print((((type(("Mean Absolute Error : " .. _str(mae))) == "table")) and (
                                    (function(v)
                                    local function encode(x)
                                    if type(x) == "table" then
                                      if x.__name and x.__order then
                                        local parts = {x.__name, " {"}
                                        for i, k in ipairs(x.__order) do
                                          if i > 1 then parts[#parts+1] = ", " end
                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      elseif #x > 0 then
                                          local allTables = true
                                          for _, v in ipairs(x) do
                                            if type(v) ~= "table" then allTables = false break end
                                          end
                                          local parts = {}
                                          if not allTables then parts[#parts+1] = "[" end
                                          for i, val in ipairs(x) do
                                            parts[#parts+1] = encode(val)
                                            if i < #x then parts[#parts+1] = " " end
                                          end
                                          if not allTables then parts[#parts+1] = "]" end
                                          return table.concat(parts)
                                        else
                                          local keys = {}
                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                          local parts = {"{"}
                                          for i, k in ipairs(keys) do
                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                            if i < #keys then parts[#parts+1] = ", " end
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        end
                                      elseif type(x) == "number" then
                                          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                            return string.format("%d", x)
                                          else
                                            return tostring(x)
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(("Mean Absolute Error : " .. _str(mae)))) or (("Mean Absolute Error : " .. _str(mae)))))
                                      local _bench_end = os.clock()
                                      collectgarbage()
                                      local _bench_end_mem = collectgarbage('count') * 1024
                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                    end;
