-- Generated by Mochi v0.10.63 on 2025-08-11 18:28 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function int_to_float(x)
    return (x * 1)
  end
  function abs_float(x)
    if (x < 0) then
      return (0 - x)
    end
    return x
  end
  function exp_approx(x)
    local term = 1
    local sum = 1
    local i = 1
    while (i < 10) do
      term = ((term * x) / int_to_float(i))
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function floor_int(x)
    local i = 0
    while (int_to_float((i + 1)) <= x) do
      i = (i + 1)
    end
    return i
  end
  function dot(a, b)
    local s = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(a)) do
          s = (s + (a[i + 1] * b[i + 1]))
          i = (i + 1)
        end
        return s
      end
      function transpose(m)
        local rows = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(m)
            local cols = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(m[0 + 1])
                local res = {}
                local j = 0
                while (j < cols) do
                  local row = {}
                  local i = 0
                  while (i < rows) do
                    row = (function(lst, item)
                    lst = lst or {}
                    table.insert(lst, item)
                    return lst
                  end)(row, m[i + 1][j + 1])
                  i = (i + 1)
                end
                res = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(res, row)
              j = (j + 1)
            end
            return res
          end
          function matmul(a, b)
            local n = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(a)
                local m = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(b[0 + 1])
                    local p = (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(b)
                        local res = {}
                        local i = 0
                        while (i < n) do
                          local row = {}
                          local j = 0
                          while (j < m) do
                            local s = 0
                            local k = 0
                            while (k < p) do
                              s = (s + (a[i + 1][k + 1] * b[k + 1][j + 1]))
                              k = (k + 1)
                            end
                            row = (function(lst, item)
                            lst = lst or {}
                            table.insert(lst, item)
                            return lst
                          end)(row, s)
                          j = (j + 1)
                        end
                        res = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(res, row)
                      i = (i + 1)
                    end
                    return res
                  end
                  function matvec(a, b)
                    local res = {}
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(a)) do
                          res = (function(lst, item)
                          lst = lst or {}
                          table.insert(lst, item)
                          return lst
                        end)(res, dot(a[i + 1], b))
                        i = (i + 1)
                      end
                      return res
                    end
                    function identity(n)
                      local res = {}
                      local i = 0
                      while (i < n) do
                        local row = {}
                        local j = 0
                        while (j < n) do
                          row = (function(lst, item)
                          lst = lst or {}
                          table.insert(lst, item)
                          return lst
                        end)(row, (((i == j)) and (1) or (0)))
                        j = (j + 1)
                      end
                      res = (function(lst, item)
                      lst = lst or {}
                      table.insert(lst, item)
                      return lst
                    end)(res, row)
                    i = (i + 1)
                  end
                  return res
                end
                function invert(mat)
                  local n = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(mat)
                      local a = mat
                      local inv = identity(n)
                      local i = 0
                      while (i < n) do
                        local pivot = a[i + 1][i + 1]
                        local j = 0
                        while (j < n) do
                          a[i + 1][j + 1] = (a[i + 1][j + 1] / pivot)
                          inv[i + 1][j + 1] = (inv[i + 1][j + 1] / pivot)
                          j = (j + 1)
                        end
                        local k = 0
                        while (k < n) do
                          if (k ~= i) then
                            local factor = a[k + 1][i + 1]
                            j = 0
                            while (j < n) do
                              a[k + 1][j + 1] = (a[k + 1][j + 1] - (factor * a[i + 1][j + 1]))
                              inv[k + 1][j + 1] = (inv[k + 1][j + 1] - (factor * inv[i + 1][j + 1]))
                              j = (j + 1)
                            end
                          end
                          k = (k + 1)
                        end
                        i = (i + 1)
                      end
                      return inv
                    end
                    function normal_equation(X, y)
                      local Xt = transpose(X)
                      local XtX = matmul(Xt, X)
                      local XtX_inv = invert(XtX)
                      local Xty = matvec(Xt, y)
                      return matvec(XtX_inv, Xty)
                    end
                    function linear_regression_prediction(train_dt, train_usr, train_mtch, test_dt, test_mtch)
                      local X = {}
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(train_dt)) do
                            X = (function(lst, item)
                            lst = lst or {}
                            table.insert(lst, item)
                            return lst
                          end)(X, {1, train_dt[i + 1], train_mtch[i + 1]})
                          i = (i + 1)
                        end
                        local beta = normal_equation(X, train_usr)
                        return abs_float(((beta[0 + 1] + (test_dt[0 + 1] * beta[1 + 1])) + (test_mtch[0 + 1] * beta[2 + 1])))
                      end
                      function sarimax_predictor(train_user, train_match, test_match)
                        local n = (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(train_user)
                            local X = {}
                            local y = {}
                            local i = 1
                            while (i < n) do
                              X = (function(lst, item)
                              lst = lst or {}
                              table.insert(lst, item)
                              return lst
                            end)(X, {1, train_user[(i - 1) + 1], train_match[i + 1]})
                            y = (function(lst, item)
                            lst = lst or {}
                            table.insert(lst, item)
                            return lst
                          end)(y, train_user[i + 1])
                          i = (i + 1)
                        end
                        local beta = normal_equation(X, y)
                        return ((beta[0 + 1] + (beta[1 + 1] * train_user[(n - 1) + 1])) + (beta[2 + 1] * test_match[0 + 1]))
                      end
                      function rbf_kernel(a, b, gamma)
                        local sum = 0
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(a)) do
                              local diff = (a[i + 1] - b[i + 1])
                              sum = (sum + (diff * diff))
                              i = (i + 1)
                            end
                            return exp_approx(((-gamma) * sum))
                          end
                          function support_vector_regressor(x_train, x_test, train_user)
                            local gamma = 0.1
                            local weights = {}
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(x_train)) do
                                  weights = (function(lst, item)
                                  lst = lst or {}
                                  table.insert(lst, item)
                                  return lst
                                end)(weights, rbf_kernel(x_train[i + 1], x_test[0 + 1], gamma))
                                i = (i + 1)
                              end
                              local num = 0
                              local den = 0
                              i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(train_user)) do
                                    num = (num + (weights[i + 1] * train_user[i + 1]))
                                    den = (den + weights[i + 1])
                                    i = (i + 1)
                                  end
                                  return (num / den)
                                end
                                function set_at_float(xs, idx, value)
                                  local i = 0
                                  local res = {}
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(xs)) do
                                        if (i == idx) then
                                          res = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(res, value)
                                      else
                                        res = (function(lst, item)
                                        lst = lst or {}
                                        table.insert(lst, item)
                                        return lst
                                      end)(res, xs[i + 1])
                                    end
                                    i = (i + 1)
                                  end
                                  return res
                                end
                                function sort_float(xs)
                                  local res = xs
                                  local i = 1
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(res)) do
                                        local key = res[i + 1]
                                        local j = (i - 1)
                                        while ((j >= 0) and (res[j + 1] > key)) do
                                          res = set_at_float(res, (j + 1), res[j + 1])
                                          j = (j - 1)
                                        end
                                        res = set_at_float(res, (j + 1), key)
                                        i = (i + 1)
                                      end
                                      return res
                                    end
                                    function percentile(data, q)
                                      local sorted = sort_float(data)
                                      local n = (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(sorted)
                                          local pos = ((q / 100) * int_to_float((n - 1)))
                                          local idx = floor_int(pos)
                                          local frac = (pos - int_to_float(idx))
                                          if ((idx + 1) < n) then
                                            return ((sorted[idx + 1] * (1 - frac)) + (sorted[(idx + 1) + 1] * frac))
                                          end
                                          return sorted[idx + 1]
                                        end
                                        function interquartile_range_checker(train_user)
                                          local q1 = percentile(train_user, 25)
                                          local q3 = percentile(train_user, 75)
                                          local iqr = (q3 - q1)
                                          return (q1 - (iqr * 0.1))
                                        end
                                        function data_safety_checker(list_vote, actual_result)
                                          local safe = 0
                                          local not_safe = 0
                                          local i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(list_vote)) do
                                                local v = list_vote[i + 1]
                                                if (v > actual_result) then
                                                  safe = (not_safe + 1)
                                                else
                                                  if (abs_float((abs_float(v) - abs_float(actual_result))) <= 0.1) then
                                                    safe = (safe + 1)
                                                  else
                                                    not_safe = (not_safe + 1)
                                                  end
                                                end
                                                i = (i + 1)
                                              end
                                              return (safe > not_safe)
                                            end
                                            function main()
                                              local vote = {linear_regression_prediction({2, 3, 4, 5}, {5, 3, 4, 6}, {3, 1, 2, 4}, {2}, {2}), sarimax_predictor({4, 2, 6, 8}, {3, 1, 2, 4}, {2}), support_vector_regressor({{5, 2}, {1, 5}, {6, 2}}, {{3, 2}}, {2, 1, 4})}
                                              print((((type(vote[0 + 1]) == "table")) and (
                                              (function(v)
                                              local function encode(x)
                                              if type(x) == "table" then
                                                if x.__name and x.__order then
                                                  local parts = {x.__name, " {"}
                                                  for i, k in ipairs(x.__order) do
                                                    if i > 1 then parts[#parts+1] = ", " end
                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                elseif #x > 0 then
                                                    local allTables = true
                                                    for _, v in ipairs(x) do
                                                      if type(v) ~= "table" then allTables = false break end
                                                    end
                                                    local parts = {}
                                                    if not allTables then parts[#parts+1] = "[" end
                                                    for i, val in ipairs(x) do
                                                      parts[#parts+1] = encode(val)
                                                      if i < #x then parts[#parts+1] = " " end
                                                    end
                                                    if not allTables then parts[#parts+1] = "]" end
                                                    return table.concat(parts)
                                                  else
                                                    local keys = {}
                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                    local parts = {"{"}
                                                    for i, k in ipairs(keys) do
                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                      if i < #keys then parts[#parts+1] = ", " end
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  end
                                                elseif type(x) == "string" then
                                                    return '"' .. x .. '"'
                                                  else
                                                    return tostring(x)
                                                  end
                                                end
                                                return encode(v)
                                              end)(vote[0 + 1])) or (vote[0 + 1])))
                                              print((((type(vote[1 + 1]) == "table")) and (
                                              (function(v)
                                              local function encode(x)
                                              if type(x) == "table" then
                                                if x.__name and x.__order then
                                                  local parts = {x.__name, " {"}
                                                  for i, k in ipairs(x.__order) do
                                                    if i > 1 then parts[#parts+1] = ", " end
                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                elseif #x > 0 then
                                                    local allTables = true
                                                    for _, v in ipairs(x) do
                                                      if type(v) ~= "table" then allTables = false break end
                                                    end
                                                    local parts = {}
                                                    if not allTables then parts[#parts+1] = "[" end
                                                    for i, val in ipairs(x) do
                                                      parts[#parts+1] = encode(val)
                                                      if i < #x then parts[#parts+1] = " " end
                                                    end
                                                    if not allTables then parts[#parts+1] = "]" end
                                                    return table.concat(parts)
                                                  else
                                                    local keys = {}
                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                    local parts = {"{"}
                                                    for i, k in ipairs(keys) do
                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                      if i < #keys then parts[#parts+1] = ", " end
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  end
                                                elseif type(x) == "string" then
                                                    return '"' .. x .. '"'
                                                  else
                                                    return tostring(x)
                                                  end
                                                end
                                                return encode(v)
                                              end)(vote[1 + 1])) or (vote[1 + 1])))
                                              print((((type(vote[2 + 1]) == "table")) and (
                                              (function(v)
                                              local function encode(x)
                                              if type(x) == "table" then
                                                if x.__name and x.__order then
                                                  local parts = {x.__name, " {"}
                                                  for i, k in ipairs(x.__order) do
                                                    if i > 1 then parts[#parts+1] = ", " end
                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                elseif #x > 0 then
                                                    local allTables = true
                                                    for _, v in ipairs(x) do
                                                      if type(v) ~= "table" then allTables = false break end
                                                    end
                                                    local parts = {}
                                                    if not allTables then parts[#parts+1] = "[" end
                                                    for i, val in ipairs(x) do
                                                      parts[#parts+1] = encode(val)
                                                      if i < #x then parts[#parts+1] = " " end
                                                    end
                                                    if not allTables then parts[#parts+1] = "]" end
                                                    return table.concat(parts)
                                                  else
                                                    local keys = {}
                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                    local parts = {"{"}
                                                    for i, k in ipairs(keys) do
                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                      if i < #keys then parts[#parts+1] = ", " end
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  end
                                                elseif type(x) == "string" then
                                                    return '"' .. x .. '"'
                                                  else
                                                    return tostring(x)
                                                  end
                                                end
                                                return encode(v)
                                              end)(vote[2 + 1])) or (vote[2 + 1])))
                                              print((((type(data_safety_checker(vote, 5)) == "table")) and (
                                              (function(v)
                                              local function encode(x)
                                              if type(x) == "table" then
                                                if x.__name and x.__order then
                                                  local parts = {x.__name, " {"}
                                                  for i, k in ipairs(x.__order) do
                                                    if i > 1 then parts[#parts+1] = ", " end
                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                elseif #x > 0 then
                                                    local allTables = true
                                                    for _, v in ipairs(x) do
                                                      if type(v) ~= "table" then allTables = false break end
                                                    end
                                                    local parts = {}
                                                    if not allTables then parts[#parts+1] = "[" end
                                                    for i, val in ipairs(x) do
                                                      parts[#parts+1] = encode(val)
                                                      if i < #x then parts[#parts+1] = " " end
                                                    end
                                                    if not allTables then parts[#parts+1] = "]" end
                                                    return table.concat(parts)
                                                  else
                                                    local keys = {}
                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                    local parts = {"{"}
                                                    for i, k in ipairs(keys) do
                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                      if i < #keys then parts[#parts+1] = ", " end
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  end
                                                elseif type(x) == "string" then
                                                    return '"' .. x .. '"'
                                                  else
                                                    return tostring(x)
                                                  end
                                                end
                                                return encode(v)
                                              end)(data_safety_checker(vote, 5))) or (data_safety_checker(vote, 5))))
                                            end
                                            main()
                                            local _bench_end = os.clock()
                                            collectgarbage()
                                            local _bench_end_mem = collectgarbage('count') * 1024
                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                          end;
