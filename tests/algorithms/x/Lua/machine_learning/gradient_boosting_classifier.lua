-- Generated by Mochi v0.10.66 on 2025-08-15 10:17 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function exp_approx(x)
    local term = 1.0
    local sum = 1.0
    local i = 1
    while (i < 10) do
      term = ((term * x) / i)
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function signf(x)
    if (x >= 0.0) then
      return 1.0
    end
    return (-1.0)
  end
  function gradient(target, preds)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(target)
        local residuals = {}
        local i = 0
        while (i < n) do
          local t = target[i + 1]
          local y = preds[i + 1]
          local exp_val = exp_approx((t * y))
          local res = ((-t) / (1.0 + exp_val))
          residuals = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(residuals, res)
        i = (i + 1)
      end
      return residuals
    end
    function predict_raw(models, features, learning_rate)
      local n = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(features)
          local preds = {}
          local i = 0
          while (i < n) do
            preds = (function(lst, item)
            local res = {table.unpack(lst or {})}
            res[#res+1] = item
            return res
          end)(preds, 0.0)
          i = (i + 1)
        end
        local m = 0
        while (m < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(models)) do
              local stump = models[m + 1]
              i = 0
              while (i < n) do
                local value = features[i + 1][stump.feature + 1]
                if (value <= stump.threshold) then
                  preds[i + 1] = (preds[i + 1] + (learning_rate * stump.left))
                else
                  preds[i + 1] = (preds[i + 1] + (learning_rate * stump.right))
                end
                i = (i + 1)
              end
              m = (m + 1)
            end
            return preds
          end
          function predict(models, features, learning_rate)
            local raw = predict_raw(models, features, learning_rate)
            local result = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(raw)) do
                  result = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  res[#res+1] = item
                  return res
                end)(result, signf(raw[i + 1]))
                i = (i + 1)
              end
              return result
            end
            function train_stump(features, residuals)
              local n_samples = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(features)
                  local n_features = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(features[0 + 1])
                      local best_feature = 0
                      local best_threshold = 0.0
                      local best_error = 1e+09
                      local best_left = 0.0
                      local best_right = 0.0
                      local j = 0
                      while (j < n_features) do
                        local t_index = 0
                        while (t_index < n_samples) do
                          local t = features[t_index + 1][j + 1]
                          local sum_left = 0.0
                          local count_left = 0
                          local sum_right = 0.0
                          local count_right = 0
                          local i = 0
                          while (i < n_samples) do
                            if (features[i + 1][j + 1] <= t) then
                              sum_left = (sum_left + residuals[i + 1])
                              count_left = (count_left + 1)
                            else
                              sum_right = (sum_right + residuals[i + 1])
                              count_right = (count_right + 1)
                            end
                            i = (i + 1)
                          end
                          local left_val = 0.0
                          if (count_left ~= 0) then
                            left_val = (sum_left / count_left)
                          end
                          local right_val = 0.0
                          if (count_right ~= 0) then
                            right_val = (sum_right / count_right)
                          end
                          local error = 0.0
                          i = 0
                          while (i < n_samples) do
                            local pred = (((features[i + 1][j + 1] <= t)) and (left_val) or (right_val))
                            local diff = (residuals[i + 1] - pred)
                            error = (error + (diff * diff))
                            i = (i + 1)
                          end
                          if (error < best_error) then
                            best_error = error
                            best_feature = j
                            best_threshold = t
                            best_left = left_val
                            best_right = right_val
                          end
                          t_index = (t_index + 1)
                        end
                        j = (j + 1)
                      end
                      return {feature = best_feature, threshold = best_threshold, left = best_left, right = best_right}
                    end
                    function fit(n_estimators, learning_rate, features, target)
                      local models = {}
                      local m = 0
                      while (m < n_estimators) do
                        local preds = predict_raw(models, features, learning_rate)
                        local grad = gradient(target, preds)
                        local residuals = {}
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(grad)) do
                              residuals = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              res[#res+1] = item
                              return res
                            end)(residuals, (-grad[i + 1]))
                            i = (i + 1)
                          end
                          local stump = train_stump(features, residuals)
                          models = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          res[#res+1] = item
                          return res
                        end)(models, stump)
                        m = (m + 1)
                      end
                      return models
                    end
                    function accuracy(preds, target)
                      local n = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(target)
                          local correct = 0
                          local i = 0
                          while (i < n) do
                            if (preds[i + 1] == target[i + 1]) then
                              correct = (correct + 1)
                            end
                            i = (i + 1)
                          end
                          return (correct // n)
                        end
                        features = {{1.0}, {2.0}, {3.0}, {4.0}}
                        target = {(-1.0), (-1.0), 1.0, 1.0}
                        models = fit(5, 0.5, features, target)
                        predictions = predict(models, features, 0.5)
                        acc = accuracy(predictions, target)
                        print((((type(("Accuracy: " .. _str(acc))) == "table")) and (
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "string" then
                              return '"' .. x .. '"'
                            else
                              return tostring(x)
                            end
                          end
                          return encode(v)
                        end)(("Accuracy: " .. _str(acc)))) or (("Accuracy: " .. _str(acc)))))
                        local _bench_end = os.clock()
                        collectgarbage()
                        local _bench_end_mem = collectgarbage('count') * 1024
                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                      end;
