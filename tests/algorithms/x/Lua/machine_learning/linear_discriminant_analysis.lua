-- Generated by Mochi v0.10.66 on 2025-08-16 11:48 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rand()
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return seed
  end
  function random()
    return (rand() / 2.147483648e+09)
  end
  function _mod(x, m)
    return (x - (math.floor(tonumber((x / m)) or 0) * m))
  end
  function cos(x)
    local y = (_mod((x + PI), TWO_PI) - PI)
    local y2 = (y * y)
    local y4 = (y2 * y2)
    local y6 = (y4 * y2)
    return (((1.0 - (y2 / 2.0)) + (y4 / 24.0)) - (y6 / 720.0))
  end
  function sqrtApprox(x)
    if (x <= 0.0) then
      return 0.0
    end
    local guess = x
    local i = 0
    while (i < 10) do
      guess = ((guess + (x / guess)) / 2.0)
      i = (i + 1)
    end
    return guess
  end
  function ln(x)
    local t = ((x - 1.0) / (x + 1.0))
    local term = t
    local sum = 0.0
    local n = 1
    while (n <= 19) do
      sum = (sum + (term / n))
      term = ((term * t) * t)
      n = (n + 2)
    end
    return (2.0 * sum)
  end
  function gaussian_distribution(mean, std_dev, instance_count)
    local res = {}
    local i = 0
    while (i < instance_count) do
      local u1 = random()
      local u2 = random()
      local r = sqrtApprox(((-2.0) * ln(u1)))
      local theta = (TWO_PI * u2)
      local z = (r * cos(theta))
      res = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(res, (mean + (z * std_dev)))
    i = (i + 1)
  end
  return res
end
function y_generator(class_count, instance_count)
  local res = {}
  local k = 0
  while (k < class_count) do
    local i = 0
    while (i < instance_count[k + 1]) do
      res = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(res, k)
    i = (i + 1)
  end
  k = (k + 1)
end
return res
end
function calculate_mean(instance_count, items)
  local total = 0.0
  local i = 0
  while (i < instance_count) do
    total = (total + items[i + 1])
    i = (i + 1)
  end
  return (total / instance_count)
end
function calculate_probabilities(instance_count, total_count)
  return (instance_count // total_count)
end
function calculate_variance(items, means, total_count)
  local squared_diff = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(items)) do
        local j = 0
        while (j < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(items[i + 1])) do
              local diff = (items[i + 1][j + 1] - means[i + 1])
              squared_diff = (function(lst, item)
              local res = {table.unpack(lst or {})}
              res[#res+1] = item
              return res
            end)(squared_diff, (diff * diff))
            j = (j + 1)
          end
          i = (i + 1)
        end
        local sum_sq = 0.0
        local k = 0
        while (k < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(squared_diff)) do
              sum_sq = (sum_sq + squared_diff[k + 1])
              k = (k + 1)
            end
            local n_classes = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(means)
                return ((1.0 / (total_count - n_classes)) * sum_sq)
              end
              function predict_y_values(x_items, means, variance, probabilities)
                local results = {}
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(x_items)) do
                      local j = 0
                      while (j < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(x_items[i + 1])) do
                            local temp = {}
                            local k = 0
                            while (k < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(x_items)) do
                                  local discr = (((x_items[i + 1][j + 1] * (means[k + 1] / variance)) - ((means[k + 1] * means[k + 1]) / (2.0 * variance))) + ln(probabilities[k + 1]))
                                  temp = (function(lst, item)
                                  local res = {table.unpack(lst or {})}
                                  res[#res+1] = item
                                  return res
                                end)(temp, discr)
                                k = (k + 1)
                              end
                              local max_idx = 0
                              local max_val = temp[0 + 1]
                              local t = 1
                              while (t < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(temp)) do
                                    if (temp[t + 1] > max_val) then
                                      max_val = temp[t + 1]
                                      max_idx = t
                                    end
                                    t = (t + 1)
                                  end
                                  results = (function(lst, item)
                                  local res = {table.unpack(lst or {})}
                                  res[#res+1] = item
                                  return res
                                end)(results, max_idx)
                                j = (j + 1)
                              end
                              i = (i + 1)
                            end
                            return results
                          end
                          function accuracy(actual_y, predicted_y)
                            local correct = 0
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(actual_y)) do
                                  if (actual_y[i + 1] == predicted_y[i + 1]) then
                                    correct = (correct + 1)
                                  end
                                  i = (i + 1)
                                end
                                return ((correct // (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(actual_y)) * 100.0)
                                  end
                                  function main()
                                    seed = 1
                                    local counts = {20, 20, 20}
                                    local means = {5.0, 10.0, 15.0}
                                    local std_dev = 1.0
                                    local x = {}
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(counts)) do
                                          x = (function(lst, item)
                                          local res = {table.unpack(lst or {})}
                                          res[#res+1] = item
                                          return res
                                        end)(x, gaussian_distribution(means[i + 1], std_dev, counts[i + 1]))
                                        i = (i + 1)
                                      end
                                      local y = y_generator((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(counts), counts)
                                          local actual_means = {}
                                          i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(counts)) do
                                                actual_means = (function(lst, item)
                                                local res = {table.unpack(lst or {})}
                                                res[#res+1] = item
                                                return res
                                              end)(actual_means, calculate_mean(counts[i + 1], x[i + 1]))
                                              i = (i + 1)
                                            end
                                            local total_count = 0
                                            i = 0
                                            while (i < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(counts)) do
                                                  total_count = (total_count + counts[i + 1])
                                                  i = (i + 1)
                                                end
                                                local probabilities = {}
                                                i = 0
                                                while (i < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(counts)) do
                                                      probabilities = (function(lst, item)
                                                      local res = {table.unpack(lst or {})}
                                                      res[#res+1] = item
                                                      return res
                                                    end)(probabilities, calculate_probabilities(counts[i + 1], total_count))
                                                    i = (i + 1)
                                                  end
                                                  local variance = calculate_variance(x, actual_means, total_count)
                                                  local predicted = predict_y_values(x, actual_means, variance, probabilities)
                                                  print(
                                                  (function(v)
                                                  local function encode(x)
                                                  if type(x) == "table" then
                                                    if x.__name and x.__order then
                                                      local parts = {x.__name, " {"}
                                                      for i, k in ipairs(x.__order) do
                                                        if i > 1 then parts[#parts+1] = ", " end
                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    elseif #x > 0 then
                                                        local allTables = true
                                                        for _, v in ipairs(x) do
                                                          if type(v) ~= "table" then allTables = false break end
                                                        end
                                                        local parts = {}
                                                        if not allTables then parts[#parts+1] = "[" end
                                                        for i, val in ipairs(x) do
                                                          parts[#parts+1] = encode(val)
                                                          if i < #x then parts[#parts+1] = " " end
                                                        end
                                                        if not allTables then parts[#parts+1] = "]" end
                                                        return table.concat(parts)
                                                      else
                                                        local keys = {}
                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                        local parts = {"{"}
                                                        for i, k in ipairs(keys) do
                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                          if i < #keys then parts[#parts+1] = ", " end
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      end
                                                    elseif type(x) == "number" then
                                                        if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                          return string.format("%d", x)
                                                        else
                                                          return tostring(x)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(predicted))
                                                    print((((type(accuracy(y, predicted)) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "number" then
                                                          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                            return string.format("%d", x)
                                                          else
                                                            return tostring(x)
                                                          end
                                                        elseif type(x) == "string" then
                                                            return '"' .. x .. '"'
                                                          else
                                                            return tostring(x)
                                                          end
                                                        end
                                                        return encode(v)
                                                      end)(accuracy(y, predicted))) or (accuracy(y, predicted))))
                                                    end
                                                    PI = 3.141592653589793
                                                    TWO_PI = 6.283185307179586
                                                    seed = 1
                                                    main()
                                                    local _bench_end = os.clock()
                                                    collectgarbage()
                                                    local _bench_end_mem = collectgarbage('count') * 1024
                                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                  end;
