-- Generated by Mochi v0.10.66 on 2025-08-16 11:48 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end

local function slice(lst, s, e)
local len = #lst
if s < 0 then s = len + s end
if s < 0 then s = 0 end
if e == nil then
  e = len
elseif e < 0 then
    e = len + e
  end
  if e > len then e = len end
  if s > e then return {} end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function _mod(x, m)
    return (x - (math.floor(tonumber((x / m)) or 0) * m))
  end
  function sin(x)
    local y = (_mod((x + PI), TWO_PI) - PI)
    local y2 = (y * y)
    local y3 = (y2 * y)
    local y5 = (y3 * y2)
    local y7 = (y5 * y2)
    return (((y - (y3 / 6.0)) + (y5 / 120.0)) - (y7 / 5040.0))
  end
  function rand()
    seed = (((1103515245 * seed) + 12345) % 2147483648)
    return (seed / 2.147483648e+09)
  end
  function mean(vals)
    local sum = 0.0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(vals)) do
          sum = (sum + vals[i + 1])
          i = (i + 1)
        end
        return (sum / (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(vals))
          end
          function mean_squared_error(labels, prediction)
            local total = 0.0
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(labels)) do
                  local diff = (labels[i + 1] - prediction)
                  total = (total + (diff * diff))
                  i = (i + 1)
                end
                return (total / (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(labels))
                  end
                  function train_tree(x, y, depth, min_leaf_size)
                    if ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(x) < (2 * min_leaf_size)) then
                          return {__name = "Leaf", prediction = mean(y)}
                        end
                        if (depth == 1) then
                          return {__name = "Leaf", prediction = mean(y)}
                        end
                        local best_split = 0
                        local min_error = (mean_squared_error(x, mean(y)) * 2.0)
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(x)) do
                              if ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)((function(lst,s,e)
                                  local r={}
                                  for i=s+1,e do
                                    r[#r+1]=lst[i]
                                  end
                                  return r
                                end)(x, 0, i)) < min_leaf_size) then
                                  i = i
                                else
                                  if ((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)((function(lst,s,e)
                                      local r={}
                                      for i=s+1,e do
                                        r[#r+1]=lst[i]
                                      end
                                      return r
                                    end)(x, i, #x)) < min_leaf_size) then
                                      i = i
                                    else
                                      local err_left = mean_squared_error((function(lst,s,e)
                                      local r={}
                                      for i=s+1,e do
                                        r[#r+1]=lst[i]
                                      end
                                      return r
                                    end)(x, 0, i), mean((function(lst,s,e)
                                    local r={}
                                    for i=s+1,e do
                                      r[#r+1]=lst[i]
                                    end
                                    return r
                                  end)(y, 0, i)))
                                  local err_right = mean_squared_error((function(lst,s,e)
                                  local r={}
                                  for i=s+1,e do
                                    r[#r+1]=lst[i]
                                  end
                                  return r
                                end)(x, i, #x), mean((function(lst,s,e)
                                local r={}
                                for i=s+1,e do
                                  r[#r+1]=lst[i]
                                end
                                return r
                              end)(y, i, #y)))
                              local err = (err_left + err_right)
                              if (err < min_error) then
                                best_split = i
                                min_error = err
                              end
                            end
                          end
                          i = (i + 1)
                        end
                        if (best_split ~= 0) then
                          local left_x = (function(lst,s,e)
                          local r={}
                          for i=s+1,e do
                            r[#r+1]=lst[i]
                          end
                          return r
                        end)(x, 0, best_split)
                        local left_y = (function(lst,s,e)
                        local r={}
                        for i=s+1,e do
                          r[#r+1]=lst[i]
                        end
                        return r
                      end)(y, 0, best_split)
                      local right_x = (function(lst,s,e)
                      local r={}
                      for i=s+1,e do
                        r[#r+1]=lst[i]
                      end
                      return r
                    end)(x, best_split, #x)
                    local right_y = (function(lst,s,e)
                    local r={}
                    for i=s+1,e do
                      r[#r+1]=lst[i]
                    end
                    return r
                  end)(y, best_split, #y)
                  local boundary = x[best_split + 1]
                  local left_tree = train_tree(left_x, left_y, (depth - 1), min_leaf_size)
                  local right_tree = train_tree(right_x, right_y, (depth - 1), min_leaf_size)
                  return {__name = "Branch", decision_boundary = boundary, left = left_tree, right = right_tree}
                end
                return {__name = "Leaf", prediction = mean(y)}
              end
              function predict(tree, value)
                return (function(_m)
                if _m['__name'] == "Leaf" then
                  local p = _m["prediction"]
                  return p
                elseif _m['__name'] == "Branch" then
                    local b = _m["decision_boundary"]
                    local l = _m["left"]
                    local r = _m["right"]
                    return (((value >= b)) and (predict(r, value)) or (predict(l, value)))
                  end
                end)(tree)
              end
              function main()
                local x = {}
                local v = (-1.0)
                while (v < 1.0) do
                  x = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  res[#res+1] = item
                  return res
                end)(x, v)
                v = (v + 0.005)
              end
              local y = {}
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(x)) do
                    y = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    res[#res+1] = item
                    return res
                  end)(y, sin(x[i + 1]))
                  i = (i + 1)
                end
                local tree = train_tree(x, y, 10, 10)
                local test_cases = {}
                i = 0
                while (i < 10) do
                  test_cases = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  res[#res+1] = item
                  return res
                end)(test_cases, ((rand() * 2.0) - 1.0))
                i = (i + 1)
              end
              local predictions = {}
              i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(test_cases)) do
                    predictions = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    res[#res+1] = item
                    return res
                  end)(predictions, predict(tree, test_cases[i + 1]))
                  i = (i + 1)
                end
                local sum_err = 0.0
                i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(test_cases)) do
                      local diff = (predictions[i + 1] - test_cases[i + 1])
                      sum_err = (sum_err + (diff * diff))
                      i = (i + 1)
                    end
                    local avg_error = (sum_err / (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(test_cases))
                        print((((type(("Test values: " ..
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "number" then
                              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                return string.format("%d", x)
                              else
                                return tostring(x)
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(test_cases))) == "table")) and (
                          (function(v)
                          local function encode(x)
                          if type(x) == "table" then
                            if x.__name and x.__order then
                              local parts = {x.__name, " {"}
                              for i, k in ipairs(x.__order) do
                                if i > 1 then parts[#parts+1] = ", " end
                                parts[#parts+1] = k .. " = " .. encode(x[k])
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            elseif #x > 0 then
                                local allTables = true
                                for _, v in ipairs(x) do
                                  if type(v) ~= "table" then allTables = false break end
                                end
                                local parts = {}
                                if not allTables then parts[#parts+1] = "[" end
                                for i, val in ipairs(x) do
                                  parts[#parts+1] = encode(val)
                                  if i < #x then parts[#parts+1] = " " end
                                end
                                if not allTables then parts[#parts+1] = "]" end
                                return table.concat(parts)
                              else
                                local keys = {}
                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                local parts = {"{"}
                                for i, k in ipairs(keys) do
                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                  if i < #keys then parts[#parts+1] = ", " end
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              end
                            elseif type(x) == "number" then
                                if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                  return string.format("%d", x)
                                else
                                  return tostring(x)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(("Test values: " ..
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "number" then
                                  if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                    return string.format("%d", x)
                                  else
                                    return tostring(x)
                                  end
                                elseif type(x) == "string" then
                                    return '"' .. x .. '"'
                                  else
                                    return tostring(x)
                                  end
                                end
                                return encode(v)
                              end)(test_cases)))) or (("Test values: " ..
                              (function(v)
                              local function encode(x)
                              if type(x) == "table" then
                                if x.__name and x.__order then
                                  local parts = {x.__name, " {"}
                                  for i, k in ipairs(x.__order) do
                                    if i > 1 then parts[#parts+1] = ", " end
                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                elseif #x > 0 then
                                    local allTables = true
                                    for _, v in ipairs(x) do
                                      if type(v) ~= "table" then allTables = false break end
                                    end
                                    local parts = {}
                                    if not allTables then parts[#parts+1] = "[" end
                                    for i, val in ipairs(x) do
                                      parts[#parts+1] = encode(val)
                                      if i < #x then parts[#parts+1] = " " end
                                    end
                                    if not allTables then parts[#parts+1] = "]" end
                                    return table.concat(parts)
                                  else
                                    local keys = {}
                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                    local parts = {"{"}
                                    for i, k in ipairs(keys) do
                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                      if i < #keys then parts[#parts+1] = ", " end
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  end
                                elseif type(x) == "number" then
                                    if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                      return string.format("%d", x)
                                    else
                                      return tostring(x)
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)(test_cases)))))
                                print((((type(("Predictions: " ..
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "number" then
                                      if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                        return string.format("%d", x)
                                      else
                                        return tostring(x)
                                      end
                                    elseif type(x) == "string" then
                                        return '"' .. x .. '"'
                                      else
                                        return tostring(x)
                                      end
                                    end
                                    return encode(v)
                                  end)(predictions))) == "table")) and (
                                  (function(v)
                                  local function encode(x)
                                  if type(x) == "table" then
                                    if x.__name and x.__order then
                                      local parts = {x.__name, " {"}
                                      for i, k in ipairs(x.__order) do
                                        if i > 1 then parts[#parts+1] = ", " end
                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    elseif #x > 0 then
                                        local allTables = true
                                        for _, v in ipairs(x) do
                                          if type(v) ~= "table" then allTables = false break end
                                        end
                                        local parts = {}
                                        if not allTables then parts[#parts+1] = "[" end
                                        for i, val in ipairs(x) do
                                          parts[#parts+1] = encode(val)
                                          if i < #x then parts[#parts+1] = " " end
                                        end
                                        if not allTables then parts[#parts+1] = "]" end
                                        return table.concat(parts)
                                      else
                                        local keys = {}
                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                        local parts = {"{"}
                                        for i, k in ipairs(keys) do
                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                          if i < #keys then parts[#parts+1] = ", " end
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      end
                                    elseif type(x) == "number" then
                                        if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                          return string.format("%d", x)
                                        else
                                          return tostring(x)
                                        end
                                      elseif type(x) == "string" then
                                          return '"' .. x .. '"'
                                        else
                                          return tostring(x)
                                        end
                                      end
                                      return encode(v)
                                    end)(("Predictions: " ..
                                    (function(v)
                                    local function encode(x)
                                    if type(x) == "table" then
                                      if x.__name and x.__order then
                                        local parts = {x.__name, " {"}
                                        for i, k in ipairs(x.__order) do
                                          if i > 1 then parts[#parts+1] = ", " end
                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      elseif #x > 0 then
                                          local allTables = true
                                          for _, v in ipairs(x) do
                                            if type(v) ~= "table" then allTables = false break end
                                          end
                                          local parts = {}
                                          if not allTables then parts[#parts+1] = "[" end
                                          for i, val in ipairs(x) do
                                            parts[#parts+1] = encode(val)
                                            if i < #x then parts[#parts+1] = " " end
                                          end
                                          if not allTables then parts[#parts+1] = "]" end
                                          return table.concat(parts)
                                        else
                                          local keys = {}
                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                          local parts = {"{"}
                                          for i, k in ipairs(keys) do
                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                            if i < #keys then parts[#parts+1] = ", " end
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        end
                                      elseif type(x) == "number" then
                                          if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                            return string.format("%d", x)
                                          else
                                            return tostring(x)
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(predictions)))) or (("Predictions: " ..
                                      (function(v)
                                      local function encode(x)
                                      if type(x) == "table" then
                                        if x.__name and x.__order then
                                          local parts = {x.__name, " {"}
                                          for i, k in ipairs(x.__order) do
                                            if i > 1 then parts[#parts+1] = ", " end
                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        elseif #x > 0 then
                                            local allTables = true
                                            for _, v in ipairs(x) do
                                              if type(v) ~= "table" then allTables = false break end
                                            end
                                            local parts = {}
                                            if not allTables then parts[#parts+1] = "[" end
                                            for i, val in ipairs(x) do
                                              parts[#parts+1] = encode(val)
                                              if i < #x then parts[#parts+1] = " " end
                                            end
                                            if not allTables then parts[#parts+1] = "]" end
                                            return table.concat(parts)
                                          else
                                            local keys = {}
                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                            local parts = {"{"}
                                            for i, k in ipairs(keys) do
                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                              if i < #keys then parts[#parts+1] = ", " end
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          end
                                        elseif type(x) == "number" then
                                            if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                              return string.format("%d", x)
                                            else
                                              return tostring(x)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(predictions)))))
                                        print((((type(("Average error: " .. _str(avg_error))) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "number" then
                                              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                return string.format("%d", x)
                                              else
                                                return tostring(x)
                                              end
                                            elseif type(x) == "string" then
                                                return '"' .. x .. '"'
                                              else
                                                return tostring(x)
                                              end
                                            end
                                            return encode(v)
                                          end)(("Average error: " .. _str(avg_error)))) or (("Average error: " .. _str(avg_error)))))
                                        end
                                        PI = 3.141592653589793
                                        TWO_PI = 6.283185307179586
                                        seed = 123456789
                                        main()
                                        local _bench_end = os.clock()
                                        collectgarbage()
                                        local _bench_end_mem = collectgarbage('count') * 1024
                                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                      end;
