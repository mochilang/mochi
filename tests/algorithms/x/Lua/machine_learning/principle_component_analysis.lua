-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sqrt(x)
    local guess = (((x > 1)) and ((x / 2)) or (1))
    local i = 0
    while (i < 20) do
      guess = (0.5 * (guess + (x / guess)))
      i = (i + 1)
    end
    return guess
  end
  function mean(xs)
    local sum = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          sum = (sum + xs[i + 1])
          i = (i + 1)
        end
        return (sum / (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs))
          end
          function standardize(data)
            local n_samples = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(data)
                local n_features = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(data[0 + 1])
                    local means = {}
                    local stds = {}
                    local j = 0
                    while (j < n_features) do
                      local column = {}
                      local i = 0
                      while (i < n_samples) do
                        column = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(column, data[i + 1][j + 1])
                      i = (i + 1)
                    end
                    local m = mean(column)
                    means = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(means, m)
                  local variance = 0
                  local k = 0
                  while (k < n_samples) do
                    local diff = (column[k + 1] - m)
                    variance = (variance + (diff * diff))
                    k = (k + 1)
                  end
                  stds = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(stds, sqrt((variance / (n_samples - 1))))
                j = (j + 1)
              end
              local standardized = {}
              local r = 0
              while (r < n_samples) do
                local row = {}
                local c = 0
                while (c < n_features) do
                  row = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(row, ((data[r + 1][c + 1] - means[c + 1]) / stds[c + 1]))
                c = (c + 1)
              end
              standardized = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(standardized, row)
            r = (r + 1)
          end
          return standardized
        end
        function covariance_matrix(data)
          local n_samples = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(data)
              local n_features = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(data[0 + 1])
                  local cov = {}
                  local i = 0
                  while (i < n_features) do
                    local row = {}
                    local j = 0
                    while (j < n_features) do
                      local sum = 0
                      local k = 0
                      while (k < n_samples) do
                        sum = (sum + (data[k + 1][i + 1] * data[k + 1][j + 1]))
                        k = (k + 1)
                      end
                      row = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(row, (sum / (n_samples - 1)))
                    j = (j + 1)
                  end
                  cov = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(cov, row)
                i = (i + 1)
              end
              return cov
            end
            function normalize(vec)
              local sum = 0
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(vec)) do
                    sum = (sum + (vec[i + 1] * vec[i + 1]))
                    i = (i + 1)
                  end
                  local n = sqrt(sum)
                  local res = {}
                  local j = 0
                  while (j < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(vec)) do
                        res = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(res, (vec[j + 1] / n))
                      j = (j + 1)
                    end
                    return res
                  end
                  function eigen_decomposition_2x2(matrix)
                    local a = matrix[0 + 1][0 + 1]
                    local b = matrix[0 + 1][1 + 1]
                    local c = matrix[1 + 1][1 + 1]
                    local diff = (a - c)
                    local discriminant = sqrt(((diff * diff) + ((4 * b) * b)))
                    local lambda1 = (((a + c) + discriminant) / 2)
                    local lambda2 = (((a + c) - discriminant) / 2)
                    local v1 = nil
                    local v2 = nil
                    if (b ~= 0) then
                      v1 = normalize({(lambda1 - c), b})
                      v2 = normalize({(lambda2 - c), b})
                    else
                      v1 = {1, 0}
                      v2 = {0, 1}
                    end
                    local eigenvalues = {lambda1, lambda2}
                    local eigenvectors = {v1, v2}
                    if (eigenvalues[0 + 1] < eigenvalues[1 + 1]) then
                      local tmp_val = eigenvalues[0 + 1]
                      eigenvalues[0 + 1] = eigenvalues[1 + 1]
                      eigenvalues[1 + 1] = tmp_val
                      local tmp_vec = eigenvectors[0 + 1]
                      eigenvectors[0 + 1] = eigenvectors[1 + 1]
                      eigenvectors[1 + 1] = tmp_vec
                    end
                    return {values = eigenvalues, vectors = eigenvectors}
                  end
                  function transpose(matrix)
                    local rows = (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(matrix)
                        local cols = (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(matrix[0 + 1])
                            local trans = {}
                            local i = 0
                            while (i < cols) do
                              local row = {}
                              local j = 0
                              while (j < rows) do
                                row = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(row, matrix[j + 1][i + 1])
                              j = (j + 1)
                            end
                            trans = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(trans, row)
                          i = (i + 1)
                        end
                        return trans
                      end
                      function matrix_multiply(a, b)
                        local rows_a = (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(a)
                            local cols_a = (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(a[0 + 1])
                                local rows_b = (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(b)
                                    local cols_b = (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(b[0 + 1])
                                        if (cols_a ~= rows_b) then
                                          panic("Incompatible matrices")
                                        end
                                        local result = {}
                                        local i = 0
                                        while (i < rows_a) do
                                          local row = {}
                                          local j = 0
                                          while (j < cols_b) do
                                            local sum = 0
                                            local k = 0
                                            while (k < cols_a) do
                                              sum = (sum + (a[i + 1][k + 1] * b[k + 1][j + 1]))
                                              k = (k + 1)
                                            end
                                            row = (function(lst, item)
                                            local res = {table.unpack(lst or {})}
                                            table.insert(res, item)
                                            return res
                                          end)(row, sum)
                                          j = (j + 1)
                                        end
                                        result = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        table.insert(res, item)
                                        return res
                                      end)(result, row)
                                      i = (i + 1)
                                    end
                                    return result
                                  end
                                  function apply_pca(data, n_components)
                                    local standardized = standardize(data)
                                    local cov = covariance_matrix(standardized)
                                    local eig = eigen_decomposition_2x2(cov)
                                    local eigenvalues = eig.values
                                    local eigenvectors = eig.vectors
                                    local components = transpose(eigenvectors)
                                    local transformed = matrix_multiply(standardized, components)
                                    local total = (eigenvalues[0 + 1] + eigenvalues[1 + 1])
                                    local ratios = {}
                                    local i = 0
                                    while (i < n_components) do
                                      ratios = (function(lst, item)
                                      local res = {table.unpack(lst or {})}
                                      table.insert(res, item)
                                      return res
                                    end)(ratios, (eigenvalues[i + 1] / total))
                                    i = (i + 1)
                                  end
                                  return {transformed = transformed, variance_ratio = ratios}
                                end
                                data = {{2.5, 2.4}, {0.5, 0.7}, {2.2, 2.9}, {1.9, 2.2}, {3.1, 3}, {2.3, 2.7}, {2, 1.6}, {1, 1.1}, {1.5, 1.6}, {1.1, 0.9}}
                                result = apply_pca(data, 2)
                                print("Transformed Data (first 5 rows):")
                                idx = 0
                                while (idx < 5) do
                                  print(
                                  (function(v)
                                  local function encode(x)
                                  if type(x) == "table" then
                                    if x.__name and x.__order then
                                      local parts = {x.__name, " {"}
                                      for i, k in ipairs(x.__order) do
                                        if i > 1 then parts[#parts+1] = ", " end
                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    elseif #x > 0 then
                                        local allTables = true
                                        for _, v in ipairs(x) do
                                          if type(v) ~= "table" then allTables = false break end
                                        end
                                        local parts = {}
                                        if not allTables then parts[#parts+1] = "[" end
                                        for i, val in ipairs(x) do
                                          parts[#parts+1] = encode(val)
                                          if i < #x then parts[#parts+1] = " " end
                                        end
                                        if not allTables then parts[#parts+1] = "]" end
                                        return table.concat(parts)
                                      else
                                        local keys = {}
                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                        local parts = {"{"}
                                        for i, k in ipairs(keys) do
                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                          if i < #keys then parts[#parts+1] = ", " end
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      end
                                    elseif type(x) == "string" then
                                        return '"' .. x .. '"'
                                      else
                                        return tostring(x)
                                      end
                                    end
                                    return encode(v)
                                  end)(result.transformed[idx + 1]))
                                  idx = (idx + 1)
                                end
                                print("Explained Variance Ratio:")
                                print(
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)(result.variance_ratio))
                                local _bench_end = os.clock()
                                collectgarbage()
                                local _bench_end_mem = collectgarbage('count') * 1024
                                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                              end;
