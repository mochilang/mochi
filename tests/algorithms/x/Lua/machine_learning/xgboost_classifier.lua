-- Generated by Mochi v0.10.66 on 2025-08-15 10:17 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
elseif type(v) == 'table' then
    local parts = {}
    for i = 1, #v do
      parts[#parts+1] = _str(v[i])
    end
    return '[' .. table.concat(parts, ', ') .. ']'
  end
  return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function mean(xs)
    local sum = 0.0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          sum = (sum + xs[i + 1])
          i = (i + 1)
        end
        return (sum / ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs) * 1.0))
          end
          function stump_predict(s, x)
            if (x[s.feature + 1] < s.threshold) then
              return s.left
            end
            return s.right
          end
          function train_stump(features, residuals)
            local best_feature = 0
            local best_threshold = 0.0
            local best_error = 1e+09
            local best_left = 0.0
            local best_right = 0.0
            local num_features = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(features[0 + 1])
                local f = 0
                while (f < num_features) do
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(features)) do
                        local threshold = features[i + 1][f + 1]
                        local left = {}
                        local right = {}
                        local j = 0
                        while (j < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(features)) do
                              if (features[j + 1][f + 1] < threshold) then
                                left = (function(a, b)
                                local res = {table.unpack(a or {})}
                                for _, v in ipairs(b or {}) do
                                  res[#res+1] = v
                                end
                                return res
                              end)(left, {residuals[j + 1]})
                            else
                              right = (function(a, b)
                              local res = {table.unpack(a or {})}
                              for _, v in ipairs(b or {}) do
                                res[#res+1] = v
                              end
                              return res
                            end)(right, {residuals[j + 1]})
                          end
                          j = (j + 1)
                        end
                        if (((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(left) ~= 0) and ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(right) ~= 0)) then
                                  local left_mean = mean(left)
                                  local right_mean = mean(right)
                                  local err = 0.0
                                  j = 0
                                  while (j < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(features)) do
                                        local pred = (((features[j + 1][f + 1] < threshold)) and (left_mean) or (right_mean))
                                        local diff = (residuals[j + 1] - pred)
                                        err = (err + (diff * diff))
                                        j = (j + 1)
                                      end
                                      if (err < best_error) then
                                        best_error = err
                                        best_feature = f
                                        best_threshold = threshold
                                        best_left = left_mean
                                        best_right = right_mean
                                      end
                                    end
                                    i = (i + 1)
                                  end
                                  f = (f + 1)
                                end
                                return {feature = best_feature, threshold = best_threshold, left = best_left, right = best_right}
                              end
                              function boost(features, targets, rounds)
                                local model = {}
                                local preds = {}
                                local i = 0
                                while (i < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(targets)) do
                                      preds = (function(a, b)
                                      local res = {table.unpack(a or {})}
                                      for _, v in ipairs(b or {}) do
                                        res[#res+1] = v
                                      end
                                      return res
                                    end)(preds, {0.0})
                                    i = (i + 1)
                                  end
                                  local r = 0
                                  while (r < rounds) do
                                    local residuals = {}
                                    local j = 0
                                    while (j < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(targets)) do
                                          residuals = (function(a, b)
                                          local res = {table.unpack(a or {})}
                                          for _, v in ipairs(b or {}) do
                                            res[#res+1] = v
                                          end
                                          return res
                                        end)(residuals, {(targets[j + 1] - preds[j + 1])})
                                        j = (j + 1)
                                      end
                                      local stump = train_stump(features, residuals)
                                      model = (function(a, b)
                                      local res = {table.unpack(a or {})}
                                      for _, v in ipairs(b or {}) do
                                        res[#res+1] = v
                                      end
                                      return res
                                    end)(model, {stump})
                                    j = 0
                                    while (j < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(preds)) do
                                          preds[j + 1] = (preds[j + 1] + stump_predict(stump, features[j + 1]))
                                          j = (j + 1)
                                        end
                                        r = (r + 1)
                                      end
                                      return model
                                    end
                                    function predict(model, x)
                                      local score = 0.0
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(model)) do
                                            local s = model[i + 1]
                                            if (x[s.feature + 1] < s.threshold) then
                                              score = (score + s.left)
                                            else
                                              score = (score + s.right)
                                            end
                                            i = (i + 1)
                                          end
                                          return score
                                        end
                                        function main()
                                          local features = {{5.1, 3.5}, {4.9, 3.0}, {6.2, 3.4}, {5.9, 3.0}}
                                          local targets = {0, 0, 1, 1}
                                          local model = boost(features, targets, 3)
                                          local out = ""
                                          local i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(features)) do
                                                local s = predict(model, features[i + 1])
                                                local label = (((s >= 0.5)) and (1) or (0))
                                                if (i == 0) then
                                                  out = _str(label)
                                                else
                                                  out = ((out .. " ") .. _str(label))
                                                end
                                                i = (i + 1)
                                              end
                                              print((((type(out) == "table")) and (
                                              (function(v)
                                              local function encode(x)
                                              if type(x) == "table" then
                                                if x.__name and x.__order then
                                                  local parts = {x.__name, " {"}
                                                  for i, k in ipairs(x.__order) do
                                                    if i > 1 then parts[#parts+1] = ", " end
                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                elseif #x > 0 then
                                                    local allTables = true
                                                    for _, v in ipairs(x) do
                                                      if type(v) ~= "table" then allTables = false break end
                                                    end
                                                    local parts = {}
                                                    if not allTables then parts[#parts+1] = "[" end
                                                    for i, val in ipairs(x) do
                                                      parts[#parts+1] = encode(val)
                                                      if i < #x then parts[#parts+1] = " " end
                                                    end
                                                    if not allTables then parts[#parts+1] = "]" end
                                                    return table.concat(parts)
                                                  else
                                                    local keys = {}
                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                    local parts = {"{"}
                                                    for i, k in ipairs(keys) do
                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                      if i < #keys then parts[#parts+1] = ", " end
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  end
                                                elseif type(x) == "string" then
                                                    return '"' .. x .. '"'
                                                  else
                                                    return tostring(x)
                                                  end
                                                end
                                                return encode(v)
                                              end)(out)) or (out)))
                                            end
                                            main()
                                            local _bench_end = os.clock()
                                            collectgarbage()
                                            local _bench_end_mem = collectgarbage('count') * 1024
                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                          end;
