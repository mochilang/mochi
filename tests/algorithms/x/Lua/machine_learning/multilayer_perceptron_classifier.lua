-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function exp_taylor(x)
    local term = 1
    local sum = 1
    local i = 1
    while (i < 20) do
      term = ((term * x) / i)
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function sigmoid(x)
    return (1 / (1 + exp_taylor((-x))))
  end
  function train(epochs, lr)
    local e = 0
    while (e < epochs) do
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(X)) do
            local x0 = X[i + 1][0 + 1]
            local x1 = X[i + 1][1 + 1]
            local target = Y[i + 1]
            local z1 = (((w1[0 + 1][0 + 1] * x0) + (w1[1 + 1][0 + 1] * x1)) + b1[0 + 1])
            local z2 = (((w1[0 + 1][1 + 1] * x0) + (w1[1 + 1][1 + 1] * x1)) + b1[1 + 1])
            local h1 = sigmoid(z1)
            local h2 = sigmoid(z2)
            local z3 = (((w2[0 + 1] * h1) + (w2[1 + 1] * h2)) + b2)
            local out = sigmoid(z3)
            local error = (out - target)
            local d1 = (((h1 * (1 - h1)) * w2[0 + 1]) * error)
            local d2 = (((h2 * (1 - h2)) * w2[1 + 1]) * error)
            w2[0 + 1] = (w2[0 + 1] - ((lr * error) * h1))
            w2[1 + 1] = (w2[1 + 1] - ((lr * error) * h2))
            b2 = (b2 - (lr * error))
            w1[0 + 1][0 + 1] = (w1[0 + 1][0 + 1] - ((lr * d1) * x0))
            w1[1 + 1][0 + 1] = (w1[1 + 1][0 + 1] - ((lr * d1) * x1))
            b1[0 + 1] = (b1[0 + 1] - (lr * d1))
            w1[0 + 1][1 + 1] = (w1[0 + 1][1 + 1] - ((lr * d2) * x0))
            w1[1 + 1][1 + 1] = (w1[1 + 1][1 + 1] - ((lr * d2) * x1))
            b1[1 + 1] = (b1[1 + 1] - (lr * d2))
            i = (i + 1)
          end
          e = (e + 1)
        end
      end
      function predict(samples)
        local preds = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(samples)) do
              local x0 = samples[i + 1][0 + 1]
              local x1 = samples[i + 1][1 + 1]
              local z1 = (((w1[0 + 1][0 + 1] * x0) + (w1[1 + 1][0 + 1] * x1)) + b1[0 + 1])
              local z2 = (((w1[0 + 1][1 + 1] * x0) + (w1[1 + 1][1 + 1] * x1)) + b1[1 + 1])
              local h1 = sigmoid(z1)
              local h2 = sigmoid(z2)
              local z3 = (((w2[0 + 1] * h1) + (w2[1 + 1] * h2)) + b2)
              local out = sigmoid(z3)
              local label = 0
              if (out >= 0.5) then
                label = 1
              end
              preds = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(preds, label)
            i = (i + 1)
          end
          return preds
        end
        function wrapper(y)
          return y
        end
        X = {{0, 0}, {1, 1}, {1, 0}, {0, 1}}
        Y = {0, 1, 0, 0}
        test_data = {{0, 0}, {0, 1}, {1, 1}}
        w1 = {{0.5, (-0.5)}, {0.5, 0.5}}
        b1 = {0, 0}
        w2 = {0.5, (-0.5)}
        b2 = 0
        train(4000, 0.5)
        preds = wrapper(predict(test_data))
        print((((type(
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(preds)) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(preds))) or (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(preds))))
        local _bench_end = os.clock()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
