-- Generated by Mochi v0.10.66 on 2025-08-16 11:48 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
local len = #lst
if s < 0 then s = len + s end
if s < 0 then s = 0 end
if e == nil then
  e = len
elseif e < 0 then
    e = len + e
  end
  if e > len then e = len end
  if s > e then return {} end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_node(name, count, parent)
    return {__name = "GenType1", __order = {"name", "count", "parent", "children", "node_link"}, name = name, count = count, parent = parent, children = {}, node_link = _nil}
  end
  function update_header(node_to_test, target_node)
    local current = node_to_test
    while (current.node_link ~= _nil) do
      current = current.node_link
    end
    current.node_link = target_node
  end
  function update_tree(items, in_tree, header_table, count)
    local first = items[0 + 1]
    local children = in_tree.children
    if (function(lst,v) for _,x in ipairs(lst) do if x==v then return true end end return false end)(children, first) then
      local child = children[first]
      child.count = (child.count + count)
      children[first] = child
      in_tree.children = children
    else
      local new_node = make_node(first, count, in_tree)
      children[first] = new_node
      in_tree.children = children
      local entry = header_table[first]
      if (entry.node == _nil) then
        entry.node = new_node
      else
        update_header(entry.node, new_node)
      end
      header_table[first] = entry
    end
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(items) > 1) then
          local rest = (function(lst,s,e)
          local r={}
          for i=s+1,e do
            r[#r+1]=lst[i]
          end
          return r
        end)(items, 1, (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(items))
            update_tree(rest, children[first], header_table, count)
          end
        end
        function sort_items(items, header_table)
          local arr = items
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(arr)) do
                local j = (i + 1)
                while (j < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(arr)) do
                      if (header_table[arr[i + 1]].count < header_table[arr[j + 1]].count) then
                        local tmp = arr[i + 1]
                        arr[i + 1] = arr[j + 1]
                        arr[j + 1] = tmp
                      end
                      j = (j + 1)
                    end
                    i = (i + 1)
                  end
                  return arr
                end
                function create_tree(data_set, min_sup)
                  local counts = {}
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(data_set)) do
                        local trans = data_set[i + 1]
                        local j = 0
                        while (j < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(trans)) do
                              local item = trans[j + 1]
                              if (counts[item] ~= nil) then
                                counts[item] = (counts[item] + 1)
                              else
                                counts[item] = 1
                              end
                              j = (j + 1)
                            end
                            i = (i + 1)
                          end
                          local header_table = {}
                          local _k0 = {}
                          for k in pairs(counts) do if k ~= '__name' and k ~= '__order' then table.insert(_k0, k) end end
                          table.sort(_k0, function(a,b) return a<b end)
                          for _, k in ipairs(_k0) do
                            local cnt = counts[k]
                            if (cnt >= min_sup) then
                              header_table[k] = {__name = "GenType2", __order = {"count", "node"}, count = cnt, node = _nil}
                            end
                          end
                          local freq_items = {}
                          local _k1 = {}
                          for k in pairs(header_table) do if k ~= '__name' and k ~= '__order' then table.insert(_k1, k) end end
                          table.sort(_k1, function(a,b) return a<b end)
                          for _, k in ipairs(_k1) do
                            freq_items = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            res[#res+1] = item
                            return res
                          end)(freq_items, k)
                        end
                        if ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(freq_items) == 0) then
                              return {__name = "GenType3", __order = {"tree", "header"}, tree = make_node("Null Set", 1, _nil), header = {}}
                            end
                            local fp_tree = make_node("Null Set", 1, _nil)
                            i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(data_set)) do
                                  local tran = data_set[i + 1]
                                  local local_items = {}
                                  local j = 0
                                  while (j < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(tran)) do
                                        local item = tran[j + 1]
                                        if (header_table[item] ~= nil) then
                                          local_items = (function(lst, item)
                                          local res = {table.unpack(lst or {})}
                                          res[#res+1] = item
                                          return res
                                        end)(local_items, item)
                                      end
                                      j = (j + 1)
                                    end
                                    if ((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(local_items) > 0) then
                                          local_items = sort_items(local_items, header_table)
                                          update_tree(local_items, fp_tree, header_table, 1)
                                        end
                                        i = (i + 1)
                                      end
                                      return {__name = "GenType4", __order = {"tree", "header"}, tree = fp_tree, header = header_table}
                                    end
                                    function ascend_tree(leaf_node, path)
                                      local prefix = path
                                      if (leaf_node.parent ~= _nil) then
                                        prefix = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        res[#res+1] = item
                                        return res
                                      end)(prefix, leaf_node.name)
                                      prefix = ascend_tree(leaf_node.parent, prefix)
                                    else
                                      prefix = (function(lst, item)
                                      local res = {table.unpack(lst or {})}
                                      res[#res+1] = item
                                      return res
                                    end)(prefix, leaf_node.name)
                                  end
                                  return prefix
                                end
                                function find_prefix_path(base_pat, tree_node)
                                  local cond_pats = {}
                                  local node = tree_node
                                  while (node ~= _nil) do
                                    local prefix = ascend_tree(node, {})
                                    if ((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(prefix) > 1) then
                                          local items = (function(lst,s,e)
                                          local r={}
                                          for i=s+1,e do
                                            r[#r+1]=lst[i]
                                          end
                                          return r
                                        end)(prefix, 1, (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(prefix))
                                            cond_pats = (function(lst, item)
                                            local res = {table.unpack(lst or {})}
                                            res[#res+1] = item
                                            return res
                                          end)(cond_pats, {__name = "GenType5", __order = {"items", "count"}, items = items, count = node.count})
                                        end
                                        node = node.node_link
                                      end
                                      return cond_pats
                                    end
                                    function mine_tree(in_tree, header_table, min_sup, pre_fix, freq_item_list)
                                      local freq_list = freq_item_list
                                      local items = {}
                                      for _, k in ipairs(header_table) do
                                        items = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        res[#res+1] = item
                                        return res
                                      end)(items, k)
                                    end
                                    local sorted_items = items
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(sorted_items)) do
                                          local j = (i + 1)
                                          while (j < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(sorted_items)) do
                                                if (header_table[sorted_items[i + 1]].count > header_table[sorted_items[j + 1]].count) then
                                                  local tmp = sorted_items[i + 1]
                                                  sorted_items[i + 1] = sorted_items[j + 1]
                                                  sorted_items[j + 1] = tmp
                                                end
                                                j = (j + 1)
                                              end
                                              i = (i + 1)
                                            end
                                            local idx = 0
                                            while (idx < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(sorted_items)) do
                                                  local base_pat = sorted_items[idx + 1]
                                                  local new_freq = pre_fix
                                                  new_freq = (function(lst, item)
                                                  local res = {table.unpack(lst or {})}
                                                  res[#res+1] = item
                                                  return res
                                                end)(new_freq, base_pat)
                                                freq_list = (function(lst, item)
                                                local res = {table.unpack(lst or {})}
                                                res[#res+1] = item
                                                return res
                                              end)(freq_list, new_freq)
                                              local cond_pats = find_prefix_path(base_pat, header_table[base_pat].node)
                                              local cond_dataset = {}
                                              local p = 0
                                              while (p < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(cond_pats)) do
                                                    local pat = cond_pats[p + 1]
                                                    local r = 0
                                                    while (r < pat.count) do
                                                      cond_dataset = (function(lst, item)
                                                      local res = {table.unpack(lst or {})}
                                                      res[#res+1] = item
                                                      return res
                                                    end)(cond_dataset, pat.items)
                                                    r = (r + 1)
                                                  end
                                                  p = (p + 1)
                                                end
                                                local res2 = create_tree(cond_dataset, min_sup)
                                                local my_tree = res2.tree
                                                local my_head = res2.header
                                                if ((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(my_head) > 0) then
                                                      freq_list = mine_tree(my_tree, my_head, min_sup, new_freq, freq_list)
                                                    end
                                                    idx = (idx + 1)
                                                  end
                                                  return freq_list
                                                end
                                                function list_to_string(xs)
                                                  local s = "["
                                                  local i = 0
                                                  while (i < (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(xs)) do
                                                        s = (s .. xs[i + 1])
                                                        if (i < ((function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(xs) - 1)) then
                                                              s = (s .. ", ")
                                                            end
                                                            i = (i + 1)
                                                          end
                                                          return (s .. "]")
                                                        end
                                                        function main()
                                                          local data_set = {{"bread", "milk", "cheese"}, {"bread", "milk"}, {"bread", "diapers"}, {"bread", "milk", "diapers"}, {"milk", "diapers"}, {"milk", "cheese"}, {"diapers", "cheese"}, {"bread", "milk", "cheese", "diapers"}}
                                                          local res = create_tree(data_set, 3)
                                                          local fp_tree = res.tree
                                                          local header_table = res.header
                                                          local freq_items = {}
                                                          freq_items = mine_tree(fp_tree, header_table, 3, {}, freq_items)
                                                          print((function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(data_set))
                                                              print((function(v)
                                                              if type(v) == 'table' and v.items ~= nil then
                                                                return #v.items
                                                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                  local c = 0
                                                                  for _ in pairs(v) do c = c + 1 end
                                                                  return c
                                                                elseif type(v) == 'string' then
                                                                    local l = utf8.len(v)
                                                                    if l then return l end
                                                                    return #v
                                                                  elseif type(v) == 'table' then
                                                                      return #v
                                                                    else
                                                                      return 0
                                                                    end
                                                                  end)(header_table))
                                                                  local i = 0
                                                                  while (i < (function(v)
                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                    return #v.items
                                                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                      local c = 0
                                                                      for _ in pairs(v) do c = c + 1 end
                                                                      return c
                                                                    elseif type(v) == 'string' then
                                                                        local l = utf8.len(v)
                                                                        if l then return l end
                                                                        return #v
                                                                      elseif type(v) == 'table' then
                                                                          return #v
                                                                        else
                                                                          return 0
                                                                        end
                                                                      end)(freq_items)) do
                                                                        print((((type(list_to_string(freq_items[i + 1])) == "table")) and (
                                                                        (function(v)
                                                                        local function encode(x)
                                                                        if type(x) == "table" then
                                                                          if x.__name and x.__order then
                                                                            local parts = {x.__name, " {"}
                                                                            for i, k in ipairs(x.__order) do
                                                                              if i > 1 then parts[#parts+1] = ", " end
                                                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          elseif #x > 0 then
                                                                              local allTables = true
                                                                              for _, v in ipairs(x) do
                                                                                if type(v) ~= "table" then allTables = false break end
                                                                              end
                                                                              local parts = {}
                                                                              if not allTables then parts[#parts+1] = "[" end
                                                                              for i, val in ipairs(x) do
                                                                                parts[#parts+1] = encode(val)
                                                                                if i < #x then parts[#parts+1] = " " end
                                                                              end
                                                                              if not allTables then parts[#parts+1] = "]" end
                                                                              return table.concat(parts)
                                                                            else
                                                                              local keys = {}
                                                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                              local parts = {"{"}
                                                                              for i, k in ipairs(keys) do
                                                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                if i < #keys then parts[#parts+1] = ", " end
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            end
                                                                          elseif type(x) == "number" then
                                                                              if (math.type and math.type(x) == "integer") or x % 1 == 0 then
                                                                                return string.format("%d", x)
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)(list_to_string(freq_items[i + 1]))) or (list_to_string(freq_items[i + 1]))))
                                                                          i = (i + 1)
                                                                        end
                                                                      end
                                                                      main()
                                                                      local _bench_end = os.clock()
                                                                      collectgarbage()
                                                                      local _bench_end_mem = collectgarbage('count') * 1024
                                                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                    end;
