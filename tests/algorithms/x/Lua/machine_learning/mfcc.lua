-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sinApprox(x)
    local term = x
    local sum = x
    local n = 1
    while (n <= 10) do
      local denom = ((2 * n) * ((2 * n) + 1))
      term = ((((-term) * x) * x) / denom)
      sum = (sum + term)
      n = (n + 1)
    end
    return sum
  end
  function cosApprox(x)
    local term = 1
    local sum = 1
    local n = 1
    while (n <= 10) do
      local denom = (((2 * n) - 1) * (2 * n))
      term = ((((-term) * x) * x) / denom)
      sum = (sum + term)
      n = (n + 1)
    end
    return sum
  end
  function expApprox(x)
    local sum = 1
    local term = 1
    local n = 1
    while (n < 10) do
      term = ((term * x) / n)
      sum = (sum + term)
      n = (n + 1)
    end
    return sum
  end
  function ln(x)
    local t = ((x - 1) / (x + 1))
    local term = t
    local sum = 0
    local n = 1
    while (n <= 19) do
      sum = (sum + (term / n))
      term = ((term * t) * t)
      n = (n + 2)
    end
    return (2 * sum)
  end
  function log10(x)
    return (ln(x) / ln(10))
  end
  function sqrtApprox(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 10) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function absf(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function normalize(audio)
    local max_val = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(audio)) do
          local v = absf(audio[i + 1])
          if (v > max_val) then
            max_val = v
          end
          i = (i + 1)
        end
        local res = {}
        i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(audio)) do
              res = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(res, (audio[i + 1] / max_val))
            i = (i + 1)
          end
          return res
        end
        function dft(frame, bins)
          local N = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(frame)
              local spec = {}
              local k = 0
              while (k < bins) do
                local real = 0
                local imag = 0
                local n = 0
                while (n < N) do
                  local angle = (((((-2) * PI) * k) * n) / N)
                  real = (real + (frame[n + 1] * cosApprox(angle)))
                  imag = (imag + (frame[n + 1] * sinApprox(angle)))
                  n = (n + 1)
                end
                spec = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(spec, ((real * real) + (imag * imag)))
              k = (k + 1)
            end
            return spec
          end
          function triangular_filters(bins, spectrum_size)
            local filters = {}
            local b = 0
            while (b < bins) do
              local center = (((b + 1) * spectrum_size) // (bins + 1))
              local filt = {}
              local i = 0
              while (i < spectrum_size) do
                local v = 0
                if (i <= center) then
                  v = (i // center)
                else
                  v = ((spectrum_size - i) // (spectrum_size - center))
                end
                filt = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(filt, v)
              i = (i + 1)
            end
            filters = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(filters, filt)
          b = (b + 1)
        end
        return filters
      end
      function dot(mat, vec)
        local res = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(mat)) do
              local sum = 0
              local j = 0
              while (j < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(vec)) do
                    sum = (sum + (mat[i + 1][j + 1] * vec[j + 1]))
                    j = (j + 1)
                  end
                  res = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(res, sum)
                i = (i + 1)
              end
              return res
            end
            function discrete_cosine_transform(dct_filter_num, filter_num)
              local basis = {}
              local i = 0
              while (i < dct_filter_num) do
                local row = {}
                local j = 0
                while (j < filter_num) do
                  if (i == 0) then
                    row = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(row, (1 / sqrtApprox(filter_num)))
                else
                  local angle = (((((2 * j) + 1) * i) * PI) / (2 * filter_num))
                  row = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(row, (cosApprox(angle) * sqrtApprox((2 / filter_num))))
              end
              j = (j + 1)
            end
            basis = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(basis, row)
          i = (i + 1)
        end
        return basis
      end
      function mfcc(audio, bins, dct_num)
        local norm = normalize(audio)
        local spec = dft(norm, (bins + 2))
        local filters = triangular_filters(bins, (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(spec))
            local energies = dot(filters, spec)
            local logfb = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(energies)) do
                  logfb = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(logfb, (10 * log10((energies[i + 1] + 1e-10))))
                i = (i + 1)
              end
              local dct_basis = discrete_cosine_transform(dct_num, bins)
              local res = dot(dct_basis, logfb)
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(res) == 0) then
                    res = {0, 0, 0}
                  end
                  return res
                end
                PI = 3.141592653589793
                sample_rate = 8000
                size = 16
                audio = {}
                n = 0
                while (n < size) do
                  t = (n // sample_rate)
                  audio = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(audio, sinApprox((((2 * PI) * 440) * t)))
                n = (n + 1)
              end
              coeffs = mfcc(audio, 5, 3)
              for _, c in ipairs(coeffs) do
                print((((type(c) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(c)) or (c)))
              end
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
