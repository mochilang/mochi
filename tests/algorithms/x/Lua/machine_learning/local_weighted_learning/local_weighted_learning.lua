-- Generated by Mochi v0.10.66 on 2025-08-15 10:17 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function expApprox(x)
    if (x < 0.0) then
      return (1.0 / expApprox((-x)))
    end
    if (x > 1.0) then
      local half = expApprox((x / 2.0))
      return (half * half)
    end
    local sum = 1.0
    local term = 1.0
    local n = 1
    while (n < 20) do
      term = ((term * x) / n)
      sum = (sum + term)
      n = (n + 1)
    end
    return sum
  end
  function transpose(mat)
    local rows = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(mat)
        local cols = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(mat[0 + 1])
            local res = {}
            local i = 0
            while (i < cols) do
              local row = {}
              local j = 0
              while (j < rows) do
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                res[#res+1] = item
                return res
              end)(row, mat[j + 1][i + 1])
              j = (j + 1)
            end
            res = (function(lst, item)
            local res = {table.unpack(lst or {})}
            res[#res+1] = item
            return res
          end)(res, row)
          i = (i + 1)
        end
        return res
      end
      function matMul(a, b)
        local a_rows = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(a)
            local a_cols = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(a[0 + 1])
                local b_cols = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(b[0 + 1])
                    local res = {}
                    local i = 0
                    while (i < a_rows) do
                      local row = {}
                      local j = 0
                      while (j < b_cols) do
                        local sum = 0.0
                        local k = 0
                        while (k < a_cols) do
                          sum = (sum + (a[i + 1][k + 1] * b[k + 1][j + 1]))
                          k = (k + 1)
                        end
                        row = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        res[#res+1] = item
                        return res
                      end)(row, sum)
                      j = (j + 1)
                    end
                    res = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    res[#res+1] = item
                    return res
                  end)(res, row)
                  i = (i + 1)
                end
                return res
              end
              function matInv(mat)
                local n = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(mat)
                    local aug = {}
                    local i = 0
                    while (i < n) do
                      local row = {}
                      local j = 0
                      while (j < n) do
                        row = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        res[#res+1] = item
                        return res
                      end)(row, mat[i + 1][j + 1])
                      j = (j + 1)
                    end
                    j = 0
                    while (j < n) do
                      if (i == j) then
                        row = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        res[#res+1] = item
                        return res
                      end)(row, 1.0)
                    else
                      row = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      res[#res+1] = item
                      return res
                    end)(row, 0.0)
                  end
                  j = (j + 1)
                end
                aug = (function(lst, item)
                local res = {table.unpack(lst or {})}
                res[#res+1] = item
                return res
              end)(aug, row)
              i = (i + 1)
            end
            local col = 0
            while (col < n) do
              local pivot = aug[col + 1][col + 1]
              if (pivot == 0.0) then
                _panic("Matrix is singular")
              end
              local j = 0
              while (j < (2 * n)) do
                aug[col + 1][j + 1] = (aug[col + 1][j + 1] / pivot)
                j = (j + 1)
              end
              local r = 0
              while (r < n) do
                if (r ~= col) then
                  local factor = aug[r + 1][col + 1]
                  j = 0
                  while (j < (2 * n)) do
                    aug[r + 1][j + 1] = (aug[r + 1][j + 1] - (factor * aug[col + 1][j + 1]))
                    j = (j + 1)
                  end
                end
                r = (r + 1)
              end
              col = (col + 1)
            end
            local inv = {}
            i = 0
            while (i < n) do
              local row = {}
              local j = 0
              while (j < n) do
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                res[#res+1] = item
                return res
              end)(row, aug[i + 1][(j + n) + 1])
              j = (j + 1)
            end
            inv = (function(lst, item)
            local res = {table.unpack(lst or {})}
            res[#res+1] = item
            return res
          end)(inv, row)
          i = (i + 1)
        end
        return inv
      end
      function weight_matrix(point, x_train, tau)
        local m = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(x_train)
            local weights = {}
            local i = 0
            while (i < m) do
              local row = {}
              local j = 0
              while (j < m) do
                if (i == j) then
                  row = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  res[#res+1] = item
                  return res
                end)(row, 1.0)
              else
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                res[#res+1] = item
                return res
              end)(row, 0.0)
            end
            j = (j + 1)
          end
          weights = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(weights, row)
        i = (i + 1)
      end
      local j = 0
      while (j < m) do
        local diff_sq = 0.0
        local k = 0
        while (k < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(point)) do
              local diff = (point[k + 1] - x_train[j + 1][k + 1])
              diff_sq = (diff_sq + (diff * diff))
              k = (k + 1)
            end
            weights[j + 1][j + 1] = expApprox(((-diff_sq) / ((2.0 * tau) * tau)))
            j = (j + 1)
          end
          return weights
        end
        function local_weight(point, x_train, y_train, tau)
          local w = weight_matrix(point, x_train, tau)
          local x_t = transpose(x_train)
          local x_t_w = matMul(x_t, w)
          local x_t_w_x = matMul(x_t_w, x_train)
          local inv_part = matInv(x_t_w_x)
          local y_col = {}
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(y_train)) do
                y_col = (function(lst, item)
                local res = {table.unpack(lst or {})}
                res[#res+1] = item
                return res
              end)(y_col, {y_train[i + 1]})
              i = (i + 1)
            end
            local x_t_w_y = matMul(x_t_w, y_col)
            return matMul(inv_part, x_t_w_y)
          end
          function local_weight_regression(x_train, y_train, tau)
            local m = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(x_train)
                local preds = {}
                local i = 0
                while (i < m) do
                  local theta = local_weight(x_train[i + 1], x_train, y_train, tau)
                  local weights_vec = {}
                  local k = 0
                  while (k < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(theta)) do
                        weights_vec = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        res[#res+1] = item
                        return res
                      end)(weights_vec, theta[k + 1][0 + 1])
                      k = (k + 1)
                    end
                    local pred = 0.0
                    local j = 0
                    while (j < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(x_train[i + 1])) do
                          pred = (pred + (x_train[i + 1][j + 1] * weights_vec[j + 1]))
                          j = (j + 1)
                        end
                        preds = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        res[#res+1] = item
                        return res
                      end)(preds, pred)
                      i = (i + 1)
                    end
                    return preds
                  end
                  x_train = {{16.99, 10.34}, {21.01, 23.68}, {24.59, 25.69}}
                  y_train = {1.01, 1.66, 3.5}
                  preds = local_weight_regression(x_train, y_train, 0.6)
                  ;
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if #x > 0 then
                      local parts = {"["}
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "]"
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do table.insert(keys, k) end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  print(encode(v))
                end)(preds)
                local _bench_end = os.clock()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
