-- Generated by Mochi v0.10.63 on 2025-08-11 18:28 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function dot(a, b)
    local s = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(a)) do
          s = (s + (a[i + 1] * b[i + 1]))
          i = (i + 1)
        end
        return s
      end
      function new_svc(lr, lambda, epochs)
        return {weights = {}, bias = 0, lr = lr, lambda = lambda, epochs = epochs}
      end
      function fit(model, xs, ys)
        local n_features = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs[0 + 1])
            local w = {}
            local i = 0
            while (i < n_features) do
              w = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(w, 0)
            i = (i + 1)
          end
          local b = 0
          local epoch = 0
          while (epoch < model.epochs) do
            local j = 0
            while (j < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(xs)) do
                  local x = xs[j + 1]
                  local y = ys[j + 1]
                  local prod = (dot(w, x) + b)
                  if ((y * prod) < 1) then
                    local k = 0
                    while (k < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(w)) do
                          w[k + 1] = (w[k + 1] + (model.lr * ((y * x[k + 1]) - ((2 * model.lambda) * w[k + 1]))))
                          k = (k + 1)
                        end
                        b = (b + (model.lr * y))
                      else
                        local k = 0
                        while (k < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(w)) do
                              w[k + 1] = (w[k + 1] - (model.lr * ((2 * model.lambda) * w[k + 1])))
                              k = (k + 1)
                            end
                          end
                          j = (j + 1)
                        end
                        epoch = (epoch + 1)
                      end
                      return {weights = w, bias = b, lr = model.lr, lambda = model.lambda, epochs = model.epochs}
                    end
                    function predict(model, x)
                      local s = (dot(model.weights, x) + model.bias)
                      if (s >= 0) then
                        return 1
                      else
                        return (-1)
                      end
                    end
                    xs = {{0, 1}, {0, 2}, {1, 1}, {1, 2}}
                    ys = {1, 1, (-1), (-1)}
                    base = new_svc(0.01, 0.01, 1000)
                    model = fit(base, xs, ys)
                    print(predict(model, {0, 1}))
                    print(predict(model, {1, 1}))
                    print(predict(model, {2, 2}))
                    local _bench_end = os.clock()
                    collectgarbage()
                    local _bench_end_mem = collectgarbage('count') * 1024
                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                  end;
