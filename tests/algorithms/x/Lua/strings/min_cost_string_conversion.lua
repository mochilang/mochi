-- Generated by Mochi v0.10.61 on 2025-08-08 16:37 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function string_to_chars(s)
    local chars = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          chars = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(chars, _substring(s, i, (i + 1)))
        i = (i + 1)
      end
      return chars
    end
    function join_chars(chars)
      local res = ""
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(chars)) do
            res = (res .. chars[i + 1])
            i = (i + 1)
          end
          return res
        end
        function insert_at(chars, index, ch)
          local res = {}
          local i = 0
          while (i < index) do
            res = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(res, chars[i + 1])
          i = (i + 1)
        end
        res = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(res, ch)
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(chars)) do
            res = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(res, chars[i + 1])
          i = (i + 1)
        end
        return res
      end
      function remove_at(chars, index)
        local res = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(chars)) do
              if (i ~= index) then
                res = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(res, chars[i + 1])
            end
            i = (i + 1)
          end
          return res
        end
        function make_matrix_int(rows, cols, init)
          local matrix = {}
          for _ = 0, rows - 1 do
            local row = {}
            for _2 = 0, cols - 1 do
              row = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(row, init)
          end
          matrix = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(matrix, row)
      end
      return matrix
    end
    function make_matrix_string(rows, cols, init)
      local matrix = {}
      for _ = 0, rows - 1 do
        local row = {}
        for _2 = 0, cols - 1 do
          row = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(row, init)
      end
      matrix = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(matrix, row)
  end
  return matrix
end
function compute_transform_tables(source_string, destination_string, copy_cost, replace_cost, delete_cost, insert_cost)
  local source_seq = string_to_chars(source_string)
  local dest_seq = string_to_chars(destination_string)
  local m = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(source_seq)
      local n = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(dest_seq)
          local costs = make_matrix_int((m + 1), (n + 1), 0)
          local ops = make_matrix_string((m + 1), (n + 1), "0")
          local i = 1
          while (i <= m) do
            costs[i + 1][0 + 1] = (i * delete_cost)
            ops[i + 1][0 + 1] = ("D" .. source_seq[(i - 1) + 1])
            i = (i + 1)
          end
          local j = 1
          while (j <= n) do
            costs[0 + 1][j + 1] = (j * insert_cost)
            ops[0 + 1][j + 1] = ("I" .. dest_seq[(j - 1) + 1])
            j = (j + 1)
          end
          i = 1
          while (i <= m) do
            j = 1
            while (j <= n) do
              if (source_seq[(i - 1) + 1] == dest_seq[(j - 1) + 1]) then
                costs[i + 1][j + 1] = (costs[(i - 1) + 1][(j - 1) + 1] + copy_cost)
                ops[i + 1][j + 1] = ("C" .. source_seq[(i - 1) + 1])
              else
                costs[i + 1][j + 1] = (costs[(i - 1) + 1][(j - 1) + 1] + replace_cost)
                ops[i + 1][j + 1] = (("R" .. source_seq[(i - 1) + 1]) .. dest_seq[(j - 1) + 1])
              end
              if ((costs[(i - 1) + 1][j + 1] + delete_cost) < costs[i + 1][j + 1]) then
                costs[i + 1][j + 1] = (costs[(i - 1) + 1][j + 1] + delete_cost)
                ops[i + 1][j + 1] = ("D" .. source_seq[(i - 1) + 1])
              end
              if ((costs[i + 1][(j - 1) + 1] + insert_cost) < costs[i + 1][j + 1]) then
                costs[i + 1][j + 1] = (costs[i + 1][(j - 1) + 1] + insert_cost)
                ops[i + 1][j + 1] = ("I" .. dest_seq[(j - 1) + 1])
              end
              j = (j + 1)
            end
            i = (i + 1)
          end
          return {costs = costs, ops = ops}
        end
        function assemble_transformation(ops, i, j)
          if ((i == 0) and (j == 0)) then
            return {}
          end
          local op = ops[i + 1][j + 1]
          local kind = _substring(op, 0, 1)
          if ((kind == "C") or (kind == "R")) then
            local seq = assemble_transformation(ops, (i - 1), (j - 1))
            seq = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(seq, op)
          return seq
        else
          if (kind == "D") then
            local seq = assemble_transformation(ops, (i - 1), j)
            seq = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(seq, op)
          return seq
        else
          local seq = assemble_transformation(ops, i, (j - 1))
          seq = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(seq, op)
        return seq
      end
    end
  end
  function main()
    local copy_cost = (-1)
    local replace_cost = 1
    local delete_cost = 2
    local insert_cost = 2
    local src = "Python"
    local dst = "Algorithms"
    local tables = compute_transform_tables(src, dst, copy_cost, replace_cost, delete_cost, insert_cost)
    local operations = tables.ops
    local m = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(operations)
        local n = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(operations[0 + 1])
            local sequence = assemble_transformation(operations, (m - 1), (n - 1))
            local string_list = string_to_chars(src)
            local idx = 0
            local cost = 0
            local k = 0
            while (k < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(sequence)) do
                  print((((type(join_chars(string_list)) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(join_chars(string_list))) or (join_chars(string_list))))
                  local op = sequence[k + 1]
                  local kind = _substring(op, 0, 1)
                  if (kind == "C") then
                    cost = (cost + copy_cost)
                  else
                    if (kind == "R") then
                      string_list[idx + 1] = _substring(op, 2, 3)
                      cost = (cost + replace_cost)
                    else
                      if (kind == "D") then
                        string_list = remove_at(string_list, idx)
                        cost = (cost + delete_cost)
                      else
                        string_list = insert_at(string_list, idx, _substring(op, 1, 2))
                        cost = (cost + insert_cost)
                      end
                    end
                  end
                  idx = (idx + 1)
                  k = (k + 1)
                end
                print((((type(join_chars(string_list)) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(join_chars(string_list))) or (join_chars(string_list))))
                print((((type(("Cost: " .. _str(cost))) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(("Cost: " .. _str(cost)))) or (("Cost: " .. _str(cost)))))
              end
              main()
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
