-- Generated by Mochi v0.10.61 on 2025-08-08 16:37 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function count_char(s, target)
    local cnt = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (_substring(s, i, (i + 1)) == target) then
            cnt = (cnt + 1)
          end
          i = (i + 1)
        end
        return cnt
      end
      function char_in(c, allowed)
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(allowed)) do
              if (_substring(allowed, i, (i + 1)) == c) then
                return true
              end
              i = (i + 1)
            end
            return false
          end
          function starts_with_char(s, c)
            return (((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s) > 0) and (_substring(s, 0, 1) == c))
              end
              function ends_with_char(s, c)
                return (((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s) > 0) and (_substring(s, ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(s) - 1), (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(s)) == c))
                          end
                          function contains_double_dot(s)
                            if ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(s) < 2) then
                                  return false
                                end
                                local i = 0
                                while (i < ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(s) - 1)) do
                                      if (_substring(s, i, (i + 2)) == "..") then
                                        return true
                                      end
                                      i = (i + 1)
                                    end
                                    return false
                                  end
                                  function is_valid_email_address(email)
                                    if (count_char(email, "@") ~= 1) then
                                      return false
                                    end
                                    local at_idx = 0
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(email)) do
                                          if (_substring(email, i, (i + 1)) == "@") then
                                            at_idx = i
                                            break
                                          end
                                          i = (i + 1)
                                        end
                                        local local_part = _substring(email, 0, at_idx)
                                        local domain = _substring(email, (at_idx + 1), (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(email))
                                            if (((function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(local_part) > MAX_LOCAL_PART_OCTETS) or ((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(domain) > MAX_DOMAIN_OCTETS)) then
                                                      return false
                                                    end
                                                    local i = 0
                                                    while (i < (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(local_part)) do
                                                          local ch = _substring(local_part, i, (i + 1))
                                                          if (not char_in(ch, ((ASCII_LETTERS .. DIGITS) .. LOCAL_EXTRA))) then
                                                            return false
                                                          end
                                                          i = (i + 1)
                                                        end
                                                        if ((starts_with_char(local_part, ".") or ends_with_char(local_part, ".")) or contains_double_dot(local_part)) then
                                                          return false
                                                        end
                                                        i = 0
                                                        while (i < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(domain)) do
                                                              local ch = _substring(domain, i, (i + 1))
                                                              if (not char_in(ch, ((ASCII_LETTERS .. DIGITS) .. DOMAIN_EXTRA))) then
                                                                return false
                                                              end
                                                              i = (i + 1)
                                                            end
                                                            if (starts_with_char(domain, "-") or ends_with_char(domain, ".")) then
                                                              return false
                                                            end
                                                            if ((starts_with_char(domain, ".") or ends_with_char(domain, ".")) or contains_double_dot(domain)) then
                                                              return false
                                                            end
                                                            return true
                                                          end
                                                          MAX_LOCAL_PART_OCTETS = 64
                                                          MAX_DOMAIN_OCTETS = 255
                                                          ASCII_LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                                          DIGITS = "0123456789"
                                                          LOCAL_EXTRA = ".(!#$%&'*+-/=?^_`{|}~)"
                                                          DOMAIN_EXTRA = ".-"
                                                          email_tests = {"simple@example.com", "very.common@example.com", "disposable.style.email.with+symbol@example.com", "other-email-with-hyphen@and.subdomains.example.com", "fully-qualified-domain@example.com", "user.name+tag+sorting@example.com", "x@example.com", "example-indeed@strange-example.com", "test/test@test.com", "123456789012345678901234567890123456789012345678901234567890123@example.com", "admin@mailserver1", "example@s.example", "Abc.example.com", "A@b@c@example.com", "abc@example..com", "a(c)d,e:f;g<h>i[j\\k]l@example.com", "12345678901234567890123456789012345678901234567890123456789012345@example.com", "i.like.underscores@but_its_not_allowed_in_this_part", ""}
                                                          idx = 0
                                                          while (idx < (function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(email_tests)) do
                                                                email = email_tests[idx + 1]
                                                                print((((type(_str(is_valid_email_address(email))) == "table")) and (
                                                                (function(v)
                                                                local function encode(x)
                                                                if type(x) == "table" then
                                                                  if x.__name and x.__order then
                                                                    local parts = {x.__name, " {"}
                                                                    for i, k in ipairs(x.__order) do
                                                                      if i > 1 then parts[#parts+1] = ", " end
                                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  elseif #x > 0 then
                                                                      local allTables = true
                                                                      for _, v in ipairs(x) do
                                                                        if type(v) ~= "table" then allTables = false break end
                                                                      end
                                                                      local parts = {}
                                                                      if not allTables then parts[#parts+1] = "[" end
                                                                      for i, val in ipairs(x) do
                                                                        parts[#parts+1] = encode(val)
                                                                        if i < #x then parts[#parts+1] = " " end
                                                                      end
                                                                      if not allTables then parts[#parts+1] = "]" end
                                                                      return table.concat(parts)
                                                                    else
                                                                      local keys = {}
                                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                      local parts = {"{"}
                                                                      for i, k in ipairs(keys) do
                                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                        if i < #keys then parts[#parts+1] = ", " end
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    end
                                                                  elseif type(x) == "string" then
                                                                      return '"' .. x .. '"'
                                                                    else
                                                                      return tostring(x)
                                                                    end
                                                                  end
                                                                  return encode(v)
                                                                end)(_str(is_valid_email_address(email)))) or (_str(is_valid_email_address(email)))))
                                                                idx = (idx + 1)
                                                              end
                                                              local _bench_end = os.clock()
                                                              collectgarbage()
                                                              local _bench_end_mem = collectgarbage('count') * 1024
                                                              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                            end;
