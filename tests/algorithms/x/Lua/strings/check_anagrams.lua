-- Generated by Mochi v0.10.63 on 2025-08-11 17:23 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function strip_and_remove_spaces(s)
    local start = 0
    local _end = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - 1)
        while ((start < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) and (string.sub(s, (start + 1), (start + 1)) == " ")) do
              start = (start + 1)
            end
            while ((_end >= start) and (string.sub(s, (_end + 1), (_end + 1)) == " ")) do
              _end = (_end - 1)
            end
            local res = ""
            local i = start
            while (i <= _end) do
              local ch = string.sub(s, (i + 1), (i + 1))
              if (ch ~= " ") then
                res = (res .. ch)
              end
              i = (i + 1)
            end
            return res
          end
          function check_anagrams(a, b)
            local s1 = string.lower(a)
            local s2 = string.lower(b)
            s1 = strip_and_remove_spaces(s1)
            s2 = strip_and_remove_spaces(s2)
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s1) ~= (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s2)) then
                      return false
                    end
                    local count = {}
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(s1)) do
                          local c1 = string.sub(s1, (i + 1), (i + 1))
                          local c2 = string.sub(s2, (i + 1), (i + 1))
                          if (count[c1] ~= nil) then
                            count[c1] = (count[c1] + 1)
                          else
                            count[c1] = 1
                          end
                          if (count[c2] ~= nil) then
                            count[c2] = (count[c2] - 1)
                          else
                            count[c2] = (-1)
                          end
                          i = (i + 1)
                        end
                        for ch in pairs(count) do
                          if (count[ch] ~= 0) then
                            return false
                          end
                        end
                        return true
                      end
                      function print_bool(b)
                        if b then
                          print(((true) and (1) or (0)))
                        else
                          print(((false) and (1) or (0)))
                        end
                      end
                      print_bool(check_anagrams("Silent", "Listen"))
                      print_bool(check_anagrams("This is a string", "Is this a string"))
                      print_bool(check_anagrams("This is    a      string", "Is     this a string"))
                      print_bool(check_anagrams("There", "Their"))
                      local _bench_end = os.clock()
                      collectgarbage()
                      local _bench_end_mem = collectgarbage('count') * 1024
                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                    end;
