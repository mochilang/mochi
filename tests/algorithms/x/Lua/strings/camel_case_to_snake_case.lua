-- Generated by Mochi v0.10.61 on 2025-08-08 16:37 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then
  e = #lst
elseif e < 0 then
    e = #lst + e
  end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function is_lower(ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(LOWER)) do
          if (string.sub(LOWER, (i + 1), (i + 1)) == ch) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function is_upper(ch)
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(UPPER)) do
              if (string.sub(UPPER, (i + 1), (i + 1)) == ch) then
                return true
              end
              i = (i + 1)
            end
            return false
          end
          function is_digit(ch)
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(DIGITS)) do
                  if (string.sub(DIGITS, (i + 1), (i + 1)) == ch) then
                    return true
                  end
                  i = (i + 1)
                end
                return false
              end
              function is_alpha(ch)
                if is_lower(ch) then
                  return true
                end
                if is_upper(ch) then
                  return true
                end
                return false
              end
              function is_alnum(ch)
                if is_alpha(ch) then
                  return true
                end
                if is_digit(ch) then
                  return true
                end
                return false
              end
              function to_lower(ch)
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(UPPER)) do
                      if (string.sub(UPPER, (i + 1), (i + 1)) == ch) then
                        return string.sub(LOWER, (i + 1), (i + 1))
                      end
                      i = (i + 1)
                    end
                    return ch
                  end
                  function camel_to_snake_case(input_str)
                    local snake_str = ""
                    local i = 0
                    local prev_is_digit = false
                    local prev_is_alpha = false
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(input_str)) do
                          local ch = string.sub(input_str, (i + 1), (i + 1))
                          if is_upper(ch) then
                            snake_str = ((snake_str .. "_") .. to_lower(ch))
                          else
                            if (prev_is_digit and is_lower(ch)) then
                              snake_str = ((snake_str .. "_") .. ch)
                            else
                              if (prev_is_alpha and is_digit(ch)) then
                                snake_str = ((snake_str .. "_") .. ch)
                              else
                                if (not is_alnum(ch)) then
                                  snake_str = (snake_str .. "_")
                                else
                                  snake_str = (snake_str .. ch)
                                end
                              end
                            end
                          end
                          prev_is_digit = is_digit(ch)
                          prev_is_alpha = is_alpha(ch)
                          i = (i + 1)
                        end
                        if (((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(snake_str) > 0) and (string.sub(snake_str, (0 + 1), (0 + 1)) == "_")) then
                              snake_str = string.sub(snake_str, (1 + 1), (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(snake_str))
                                end
                                return snake_str
                              end
                              function main()
                                print((((type(camel_to_snake_case("someRandomString")) == "table")) and (
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)(camel_to_snake_case("someRandomString"))) or (camel_to_snake_case("someRandomString"))))
                                print((((type(camel_to_snake_case("SomeRandomStr#ng")) == "table")) and (
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)(camel_to_snake_case("SomeRandomStr#ng"))) or (camel_to_snake_case("SomeRandomStr#ng"))))
                                print((((type(camel_to_snake_case("123SomeRandom123String123")) == "table")) and (
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)(camel_to_snake_case("123SomeRandom123String123"))) or (camel_to_snake_case("123SomeRandom123String123"))))
                              end
                              LOWER = "abcdefghijklmnopqrstuvwxyz"
                              UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                              DIGITS = "0123456789"
                              main()
                              local _bench_end = os.clock()
                              collectgarbage()
                              local _bench_end_mem = collectgarbage('count') * 1024
                              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                            end;
