-- Generated by Mochi v0.10.61 on 2025-08-08 16:37 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function range_list(n)
    local lst = {}
    local i = 0
    while (i < n) do
      lst = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(lst, i)
    i = (i + 1)
  end
  return lst
end
function min3(a, b, c)
  local m = a
  if (b < m) then
    m = b
  end
  if (c < m) then
    m = c
  end
  return m
end
function levenshtein_distance(first_word, second_word)
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(first_word) < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(second_word)) then
            return levenshtein_distance(second_word, first_word)
          end
          if ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(second_word) == 0) then
                return (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(first_word)
                  end
                  local previous_row = range_list(((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(second_word) + 1))
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(first_word)) do
                            local c1 = string.sub(first_word, (i + 1), (i + 1))
                            local current_row = {}
                            current_row = (function(lst, item)
                            lst = lst or {}
                            table.insert(lst, item)
                            return lst
                          end)(current_row, (i + 1))
                          local j = 0
                          while (j < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(second_word)) do
                                local c2 = string.sub(second_word, (j + 1), (j + 1))
                                local insertions = (previous_row[(j + 1) + 1] + 1)
                                local deletions = (current_row[j + 1] + 1)
                                local substitutions = (previous_row[j + 1] + (((c1 == c2)) and (0) or (1)))
                                local min_val = min3(insertions, deletions, substitutions)
                                current_row = (function(lst, item)
                                lst = lst or {}
                                table.insert(lst, item)
                                return lst
                              end)(current_row, min_val)
                              j = (j + 1)
                            end
                            previous_row = current_row
                            i = (i + 1)
                          end
                          return previous_row[((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(previous_row) - 1) + 1]
                            end
                            function levenshtein_distance_optimized(first_word, second_word)
                              if ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(first_word) < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(second_word)) then
                                        return levenshtein_distance_optimized(second_word, first_word)
                                      end
                                      if ((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(second_word) == 0) then
                                            return (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(first_word)
                                              end
                                              local previous_row = range_list(((function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(second_word) + 1))
                                                  local i = 0
                                                  while (i < (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(first_word)) do
                                                        local c1 = string.sub(first_word, (i + 1), (i + 1))
                                                        local current_row = {}
                                                        current_row = (function(lst, item)
                                                        lst = lst or {}
                                                        table.insert(lst, item)
                                                        return lst
                                                      end)(current_row, (i + 1))
                                                      local k = 0
                                                      while (k < (function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(second_word)) do
                                                            current_row = (function(lst, item)
                                                            lst = lst or {}
                                                            table.insert(lst, item)
                                                            return lst
                                                          end)(current_row, 0)
                                                          k = (k + 1)
                                                        end
                                                        local j = 0
                                                        while (j < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(second_word)) do
                                                              local c2 = string.sub(second_word, (j + 1), (j + 1))
                                                              local insertions = (previous_row[(j + 1) + 1] + 1)
                                                              local deletions = (current_row[j + 1] + 1)
                                                              local substitutions = (previous_row[j + 1] + (((c1 == c2)) and (0) or (1)))
                                                              local min_val = min3(insertions, deletions, substitutions)
                                                              current_row[(j + 1) + 1] = min_val
                                                              j = (j + 1)
                                                            end
                                                            previous_row = current_row
                                                            i = (i + 1)
                                                          end
                                                          return previous_row[((function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(previous_row) - 1) + 1]
                                                            end
                                                            function main()
                                                              local a = "kitten"
                                                              local b = "sitting"
                                                              print((((type(_str(levenshtein_distance(a, b))) == "table")) and (
                                                              (function(v)
                                                              local function encode(x)
                                                              if type(x) == "table" then
                                                                if x.__name and x.__order then
                                                                  local parts = {x.__name, " {"}
                                                                  for i, k in ipairs(x.__order) do
                                                                    if i > 1 then parts[#parts+1] = ", " end
                                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                  end
                                                                  parts[#parts+1] = "}"
                                                                  return table.concat(parts)
                                                                elseif #x > 0 then
                                                                    local allTables = true
                                                                    for _, v in ipairs(x) do
                                                                      if type(v) ~= "table" then allTables = false break end
                                                                    end
                                                                    local parts = {}
                                                                    if not allTables then parts[#parts+1] = "[" end
                                                                    for i, val in ipairs(x) do
                                                                      parts[#parts+1] = encode(val)
                                                                      if i < #x then parts[#parts+1] = " " end
                                                                    end
                                                                    if not allTables then parts[#parts+1] = "]" end
                                                                    return table.concat(parts)
                                                                  else
                                                                    local keys = {}
                                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                    local parts = {"{"}
                                                                    for i, k in ipairs(keys) do
                                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                      if i < #keys then parts[#parts+1] = ", " end
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  end
                                                                elseif type(x) == "string" then
                                                                    return '"' .. x .. '"'
                                                                  else
                                                                    return tostring(x)
                                                                  end
                                                                end
                                                                return encode(v)
                                                              end)(_str(levenshtein_distance(a, b)))) or (_str(levenshtein_distance(a, b)))))
                                                              print((((type(_str(levenshtein_distance_optimized(a, b))) == "table")) and (
                                                              (function(v)
                                                              local function encode(x)
                                                              if type(x) == "table" then
                                                                if x.__name and x.__order then
                                                                  local parts = {x.__name, " {"}
                                                                  for i, k in ipairs(x.__order) do
                                                                    if i > 1 then parts[#parts+1] = ", " end
                                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                  end
                                                                  parts[#parts+1] = "}"
                                                                  return table.concat(parts)
                                                                elseif #x > 0 then
                                                                    local allTables = true
                                                                    for _, v in ipairs(x) do
                                                                      if type(v) ~= "table" then allTables = false break end
                                                                    end
                                                                    local parts = {}
                                                                    if not allTables then parts[#parts+1] = "[" end
                                                                    for i, val in ipairs(x) do
                                                                      parts[#parts+1] = encode(val)
                                                                      if i < #x then parts[#parts+1] = " " end
                                                                    end
                                                                    if not allTables then parts[#parts+1] = "]" end
                                                                    return table.concat(parts)
                                                                  else
                                                                    local keys = {}
                                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                    local parts = {"{"}
                                                                    for i, k in ipairs(keys) do
                                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                      if i < #keys then parts[#parts+1] = ", " end
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  end
                                                                elseif type(x) == "string" then
                                                                    return '"' .. x .. '"'
                                                                  else
                                                                    return tostring(x)
                                                                  end
                                                                end
                                                                return encode(v)
                                                              end)(_str(levenshtein_distance_optimized(a, b)))) or (_str(levenshtein_distance_optimized(a, b)))))
                                                            end
                                                            main()
                                                            local _bench_end = os.clock()
                                                            collectgarbage()
                                                            local _bench_end_mem = collectgarbage('count') * 1024
                                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                          end;
