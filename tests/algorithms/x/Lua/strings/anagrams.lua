-- Generated by Mochi v0.10.70 on 2025-08-23 13:46 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for k in pairs(v) do
      if k ~= '__name' and k ~= '__order' then
        c = c + 1
      end
    end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    _dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/strings"
    
    local function _read_file(path)
    local p = path
    local f = io.open(p, 'rb')
    if not f and _dataDir then
      f = io.open(_dataDir .. '/' .. path, 'rb')
    end
    if not f then return '' end
    local data = f:read('*a') or ''
    f:close()
    return data
  end
  
  local function _split(s, sep)
  local t = {}
  local pattern = string.format("([^%s]+)", sep)
  string.gsub(s, pattern, function(c) t[#t+1] = c end)
  return t
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function split(s, sep)
    local res = {}
    local current = ""
    local i = 0
    while (i < _len(s)) do
      local ch = string.sub(s, (i + 1), (i + 1))
      if (ch == sep) then
        res = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(res, current)
      current = ""
    else
      current = (current .. ch)
    end
    i = (i + 1)
  end
  res = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(res, current)
return res
end
function insertion_sort(arr)
  local a = arr
  local i = 1
  while (i < _len(a)) do
    local key = a[i + 1]
    local j = (i - 1)
    while ((j >= 0) and (a[j + 1] > key)) do
      a[(j + 1) + 1] = a[j + 1]
      j = (j - 1)
    end
    a[(j + 1) + 1] = key
    i = (i + 1)
  end
  return a
end
function sort_chars(word)
  local chars = {}
  local i = 0
  while (i < _len(word)) do
    chars = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(chars, string.sub(word, (i + 1), (i + 1)))
  i = (i + 1)
end
chars = insertion_sort(chars)
local res = ""
i = 0
while (i < _len(chars)) do
  res = (res .. chars[i + 1])
  i = (i + 1)
end
return res
end
function unique_sorted(words)
  local seen = {}
  local res = {}
  for _, w in ipairs(words) do
    if ((w ~= "") and (not (seen[w] ~= nil))) then
      res = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(res, w)
    seen[w] = true
  end
end
res = insertion_sort(res)
return res
end
function build_map(words)
  for _, w in ipairs(words) do
    local sig = sort_chars(w)
    local arr = {}
    if (word_by_signature[sig] ~= nil) then
      arr = word_by_signature[sig]
    end
    arr = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(arr, w)
  word_by_signature[sig] = arr
end
end
function anagram(my_word)
  local sig = sort_chars(my_word)
  if (word_by_signature[sig] ~= nil) then
    return word_by_signature[sig]
  end
  return {}
end
function main()
  local text = _read_file("words.txt")
  local lines = split(text, "\n")
  local words = unique_sorted(lines)
  build_map(words)
  for _, w in ipairs(words) do
    local anas = anagram(w)
    if (_len(anas) > 1) then
      local line = (tostring(w) .. ":")
      local i = 0
      while (i < _len(anas)) do
        if (i > 0) then
          line = (tostring(line) .. ",")
        end
        line = (tostring(line) .. tostring(anas[i + 1]))
        i = (i + 1)
      end
      print((((type(line) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if math.type and math.type(x) == "integer" then
              return string.format("%d", x)
            else
              local s = string.format("%g", x)
              if not string.find(s, "[%.eE]") then
                s = s .. ".0"
              end
              return s
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(line)) or (line)))
      end
    end
  end
  word_by_signature = {}
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
