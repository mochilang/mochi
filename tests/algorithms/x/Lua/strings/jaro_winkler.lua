-- Generated by Mochi v0.10.61 on 2025-08-08 16:37 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function min_int(a, b)
    if (a < b) then
      return a
    else
      return b
    end
  end
  function max_int(a, b)
    if (a > b) then
      return a
    else
      return b
    end
  end
  function repeat_bool(n, value)
    local res = {}
    local i = 0
    while (i < n) do
      res = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(res, value)
    i = (i + 1)
  end
  return res
end
function set_bool(xs, idx, value)
  local res = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(xs)) do
        if (i == idx) then
          res = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(res, value)
      else
        res = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(res, xs[i + 1])
    end
    i = (i + 1)
  end
  return res
end
function jaro_winkler(s1, s2)
  local len1 = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s1)
      local len2 = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(s2)
          local limit = (min_int(len1, len2) // 2)
          local match1 = repeat_bool(len1, false)
          local match2 = repeat_bool(len2, false)
          local matches = 0
          local i = 0
          while (i < len1) do
            local start = max_int(0, (i - limit))
            local _end = min_int(((i + limit) + 1), len2)
            local j = start
            while (j < _end) do
              if ((not match2[j + 1]) and (_substring(s1, i, (i + 1)) == _substring(s2, j, (j + 1)))) then
                match1 = set_bool(match1, i, true)
                match2 = set_bool(match2, j, true)
                matches = (matches + 1)
                break
              end
              j = (j + 1)
            end
            i = (i + 1)
          end
          if (matches == 0) then
            return 0
          end
          local transpositions = 0
          local k = 0
          i = 0
          while (i < len1) do
            if match1[i + 1] then
              while (not match2[k + 1]) do
                k = (k + 1)
              end
              if (_substring(s1, i, (i + 1)) ~= _substring(s2, k, (k + 1))) then
                transpositions = (transpositions + 1)
              end
              k = (k + 1)
            end
            i = (i + 1)
          end
          local m = matches
          local jaro = ((((m / len1) + (m / len2)) + ((m - (transpositions / 2)) / m)) / 3)
          local prefix_len = 0
          i = 0
          while (((i < 4) and (i < len1)) and (i < len2)) do
            if (_substring(s1, i, (i + 1)) == _substring(s2, i, (i + 1))) then
              prefix_len = (prefix_len + 1)
            else
              break
            end
            i = (i + 1)
          end
          return (jaro + ((0.1 * prefix_len) * (1 - jaro)))
        end
        print((((type(_str(jaro_winkler("hello", "world"))) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(_str(jaro_winkler("hello", "world")))) or (_str(jaro_winkler("hello", "world")))))
        local _bench_end = os.clock()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
