-- Generated by Mochi v0.10.61 on 2025-08-08 16:37 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function index_of_char(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (string.sub(s, (i + 1), (i + 1)) == ch) then
            return i
          end
          i = (i + 1)
        end
        return (-1)
      end
      function ord(ch)
        local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local lower = "abcdefghijklmnopqrstuvwxyz"
        local digits = "0123456789"
        local idx = index_of_char(upper, ch)
        if (idx >= 0) then
          return (65 + idx)
        end
        idx = index_of_char(lower, ch)
        if (idx >= 0) then
          return (97 + idx)
        end
        idx = index_of_char(digits, ch)
        if (idx >= 0) then
          return (48 + idx)
        end
        if (ch == "ü") then
          return 252
        end
        if (ch == "Ü") then
          return 220
        end
        if (ch == " ") then
          return 32
        end
        return 0
      end
      function rabin_karp(pattern, text)
        local p_len = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(pattern)
            local t_len = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(text)
                if (p_len > t_len) then
                  return false
                end
                local p_hash = 0
                local t_hash = 0
                local modulus_power = 1
                local i = 0
                while (i < p_len) do
                  p_hash = ((ord(string.sub(pattern, (i + 1), (i + 1))) + (p_hash * alphabet_size)) % modulus)
                  t_hash = ((ord(string.sub(text, (i + 1), (i + 1))) + (t_hash * alphabet_size)) % modulus)
                  if (i ~= (p_len - 1)) then
                    modulus_power = ((modulus_power * alphabet_size) % modulus)
                  end
                  i = (i + 1)
                end
                local j = 0
                while (j <= (t_len - p_len)) do
                  if ((t_hash == p_hash) and (_substring(text, j, (j + p_len)) == pattern)) then
                    return true
                  end
                  if (j == (t_len - p_len)) then
                    j = (j + 1)
                    goto __cont_1
                  end
                  t_hash = ((((t_hash - (ord(string.sub(text, (j + 1), (j + 1))) * modulus_power)) * alphabet_size) + ord(string.sub(text, ((j + p_len) + 1), ((j + p_len) + 1)))) % modulus)
                  if (t_hash < 0) then
                    t_hash = (t_hash + modulus)
                  end
                  j = (j + 1)
                  ::__cont_1::
                end
                return false
              end
              function test_rabin_karp()
                local pattern1 = "abc1abc12"
                local text1 = "alskfjaldsabc1abc1abc12k23adsfabcabc"
                local text2 = "alskfjaldsk23adsfabcabc"
                if ((not rabin_karp(pattern1, text1)) or rabin_karp(pattern1, text2)) then
                  print("Failure")
                  return
                end
                local pattern2 = "ABABX"
                local text3 = "ABABZABABYABABX"
                if (not rabin_karp(pattern2, text3)) then
                  print("Failure")
                  return
                end
                local pattern3 = "AAAB"
                local text4 = "ABAAAAAB"
                if (not rabin_karp(pattern3, text4)) then
                  print("Failure")
                  return
                end
                local pattern4 = "abcdabcy"
                local text5 = "abcxabcdabxabcdabcdabcy"
                if (not rabin_karp(pattern4, text5)) then
                  print("Failure")
                  return
                end
                local pattern5 = "Lü"
                local text6 = "Lüsai"
                if (not rabin_karp(pattern5, text6)) then
                  print("Failure")
                  return
                end
                local pattern6 = "Lue"
                if rabin_karp(pattern6, text6) then
                  print("Failure")
                  return
                end
                print("Success.")
              end
              alphabet_size = 256
              modulus = 1000003
              test_rabin_karp()
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
