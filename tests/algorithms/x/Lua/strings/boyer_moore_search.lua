-- Generated by Mochi v0.10.61 on 2025-08-08 16:37 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function match_in_pattern(pat, ch)
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(pat) - 1)
        while (i >= 0) do
          if (_substring(pat, i, (i + 1)) == ch) then
            return i
          end
          i = (i - 1)
        end
        return (-1)
      end
      function mismatch_in_text(text, pat, current_pos)
        local i = ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(pat) - 1)
            while (i >= 0) do
              if (_substring(pat, i, (i + 1)) ~= _substring(text, (current_pos + i), ((current_pos + i) + 1))) then
                return (current_pos + i)
              end
              i = (i - 1)
            end
            return (-1)
          end
          function bad_character_heuristic(text, pat)
            local textLen = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(text)
                local patLen = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(pat)
                    local positions = {}
                    local i = 0
                    while (i <= (textLen - patLen)) do
                      local mismatch_index = mismatch_in_text(text, pat, i)
                      if (mismatch_index < 0) then
                        positions = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(positions, i)
                      i = (i + 1)
                    else
                      local ch = _substring(text, mismatch_index, (mismatch_index + 1))
                      local match_index = match_in_pattern(pat, ch)
                      if (match_index < 0) then
                        i = (mismatch_index + 1)
                      else
                        i = (mismatch_index - match_index)
                      end
                    end
                  end
                  return positions
                end
                local _bench_end = os.clock()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
