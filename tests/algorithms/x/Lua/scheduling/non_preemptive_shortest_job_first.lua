-- Generated by Mochi v0.10.61 on 2025-08-08 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function calculate_waitingtime(arrival_time, burst_time, no_of_processes)
    local waiting_time = nil
    local remaining_time = nil
    local i = 0
    while (i < no_of_processes) do
      waiting_time = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(waiting_time, 0)
    remaining_time = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(remaining_time, burst_time[i + 1])
  i = (i + 1)
end
local completed = 0
local total_time = 0
while (completed ~= no_of_processes) do
  local ready_process = {}
  local target_process = (-1)
  local j = 0
  while (j < no_of_processes) do
    if ((arrival_time[j + 1] <= total_time) and (remaining_time[j + 1] > 0)) then
      ready_process = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(ready_process, j)
  end
  j = (j + 1)
end
if ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(ready_process) > 0) then
      target_process = ready_process[0 + 1]
      local k = 0
      while (k < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(ready_process)) do
            local idx = ready_process[k + 1]
            if (remaining_time[idx + 1] < remaining_time[target_process + 1]) then
              target_process = idx
            end
            k = (k + 1)
          end
          total_time = (total_time + burst_time[target_process + 1])
          completed = (completed + 1)
          remaining_time[target_process + 1] = 0
          waiting_time[target_process + 1] = ((total_time - arrival_time[target_process + 1]) - burst_time[target_process + 1])
        else
          total_time = (total_time + 1)
        end
      end
      return waiting_time
    end
    function calculate_turnaroundtime(burst_time, no_of_processes, waiting_time)
      local turn_around_time = nil
      local i = 0
      while (i < no_of_processes) do
        turn_around_time = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(turn_around_time, (burst_time[i + 1] + waiting_time[i + 1]))
      i = (i + 1)
    end
    return turn_around_time
  end
  function average(values)
    local total = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(values)) do
          total = (total + values[i + 1])
          i = (i + 1)
        end
        return (total // (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(values))
          end
          print("[TEST CASE 01]")
          no_of_processes = 4
          burst_time = {2, 5, 3, 7}
          arrival_time = {0, 0, 0, 0}
          waiting_time = calculate_waitingtime(arrival_time, burst_time, no_of_processes)
          turn_around_time = calculate_turnaroundtime(burst_time, no_of_processes, waiting_time)
          print("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time")
          i = 0
          while (i < no_of_processes) do
            pid = (i + 1)
            print((((type(((((((((_str(pid) .. "\t") .. _str(burst_time[i + 1])) .. "\t\t\t") .. _str(arrival_time[i + 1])) .. "\t\t\t\t") .. _str(waiting_time[i + 1])) .. "\t\t\t\t") .. _str(turn_around_time[i + 1]))) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(((((((((_str(pid) .. "\t") .. _str(burst_time[i + 1])) .. "\t\t\t") .. _str(arrival_time[i + 1])) .. "\t\t\t\t") .. _str(waiting_time[i + 1])) .. "\t\t\t\t") .. _str(turn_around_time[i + 1])))) or (((((((((_str(pid) .. "\t") .. _str(burst_time[i + 1])) .. "\t\t\t") .. _str(arrival_time[i + 1])) .. "\t\t\t\t") .. _str(waiting_time[i + 1])) .. "\t\t\t\t") .. _str(turn_around_time[i + 1])))))
            i = (i + 1)
          end
          avg_wait = average(waiting_time)
          avg_turn = average(turn_around_time)
          print((((type(("\nAverage waiting time = " .. _str(avg_wait))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(("\nAverage waiting time = " .. _str(avg_wait)))) or (("\nAverage waiting time = " .. _str(avg_wait)))))
          print((((type(("Average turnaround time = " .. _str(avg_turn))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(("Average turnaround time = " .. _str(avg_turn)))) or (("Average turnaround time = " .. _str(avg_turn)))))
          local _bench_end = os.clock()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
