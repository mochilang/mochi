-- Generated by Mochi v0.10.61 on 2025-08-08 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function is_sorted(arr)
    local i = 1
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(arr)) do
          if (arr[(i - 1) + 1] > arr[i + 1]) then
            return false
          end
          i = (i + 1)
        end
        return true
      end
      function binary_search(sorted_collection, item)
        if (not is_sorted(sorted_collection)) then
          return (-1)
        end
        local left = 0
        local right = ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(sorted_collection) - 1)
            while (left <= right) do
              local midpoint = (left + ((right - left) // 2))
              local current_item = sorted_collection[midpoint + 1]
              if (current_item == item) then
                return midpoint
              end
              if (item < current_item) then
                right = (midpoint - 1)
              else
                left = (midpoint + 1)
              end
            end
            return (-1)
          end
          function binary_search_by_recursion(sorted_collection, item, left, right)
            if (right < left) then
              return (-1)
            end
            local midpoint = (left + ((right - left) // 2))
            if (sorted_collection[midpoint + 1] == item) then
              return midpoint
            end
            if (sorted_collection[midpoint + 1] > item) then
              return binary_search_by_recursion(sorted_collection, item, left, (midpoint - 1))
            end
            return binary_search_by_recursion(sorted_collection, item, (midpoint + 1), right)
          end
          function exponential_search(sorted_collection, item)
            if (not is_sorted(sorted_collection)) then
              return (-1)
            end
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(sorted_collection) == 0) then
                  return (-1)
                end
                local bound = 1
                while ((bound < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(sorted_collection)) and (sorted_collection[bound + 1] < item)) do
                      bound = (bound * 2)
                    end
                    local left = (bound // 2)
                    local right = (function(lst)
                    local m = nil
                    for _, v in ipairs(lst) do
                      if m == nil or v < m then
                        m = v
                      end
                    end
                    return m
                  end)({bound, ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(sorted_collection) - 1)})
                      return binary_search_by_recursion(sorted_collection, item, left, right)
                    end
                    function main()
                      local data = {0, 5, 7, 10, 15}
                      print((((type(_str(binary_search(data, 0))) == "table")) and (
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(_str(binary_search(data, 0)))) or (_str(binary_search(data, 0)))))
                      print((((type(_str(binary_search(data, 15))) == "table")) and (
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(_str(binary_search(data, 15)))) or (_str(binary_search(data, 15)))))
                      print((((type(_str(binary_search(data, 5))) == "table")) and (
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(_str(binary_search(data, 5)))) or (_str(binary_search(data, 5)))))
                      print((((type(_str(binary_search(data, 6))) == "table")) and (
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(_str(binary_search(data, 6)))) or (_str(binary_search(data, 6)))))
                      print((((type(_str(binary_search_by_recursion(data, 0, 0, ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(data) - 1)))) == "table")) and (
                          (function(v)
                          local function encode(x)
                          if type(x) == "table" then
                            if x.__name and x.__order then
                              local parts = {x.__name, " {"}
                              for i, k in ipairs(x.__order) do
                                if i > 1 then parts[#parts+1] = ", " end
                                parts[#parts+1] = k .. " = " .. encode(x[k])
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            elseif #x > 0 then
                                local allTables = true
                                for _, v in ipairs(x) do
                                  if type(v) ~= "table" then allTables = false break end
                                end
                                local parts = {}
                                if not allTables then parts[#parts+1] = "[" end
                                for i, val in ipairs(x) do
                                  parts[#parts+1] = encode(val)
                                  if i < #x then parts[#parts+1] = " " end
                                end
                                if not allTables then parts[#parts+1] = "]" end
                                return table.concat(parts)
                              else
                                local keys = {}
                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                local parts = {"{"}
                                for i, k in ipairs(keys) do
                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                  if i < #keys then parts[#parts+1] = ", " end
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(_str(binary_search_by_recursion(data, 0, 0, ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(data) - 1))))) or (_str(binary_search_by_recursion(data, 0, 0, ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(data) - 1))))))
                                  print((((type(_str(binary_search_by_recursion(data, 15, 0, ((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(data) - 1)))) == "table")) and (
                                      (function(v)
                                      local function encode(x)
                                      if type(x) == "table" then
                                        if x.__name and x.__order then
                                          local parts = {x.__name, " {"}
                                          for i, k in ipairs(x.__order) do
                                            if i > 1 then parts[#parts+1] = ", " end
                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        elseif #x > 0 then
                                            local allTables = true
                                            for _, v in ipairs(x) do
                                              if type(v) ~= "table" then allTables = false break end
                                            end
                                            local parts = {}
                                            if not allTables then parts[#parts+1] = "[" end
                                            for i, val in ipairs(x) do
                                              parts[#parts+1] = encode(val)
                                              if i < #x then parts[#parts+1] = " " end
                                            end
                                            if not allTables then parts[#parts+1] = "]" end
                                            return table.concat(parts)
                                          else
                                            local keys = {}
                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                            local parts = {"{"}
                                            for i, k in ipairs(keys) do
                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                              if i < #keys then parts[#parts+1] = ", " end
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(_str(binary_search_by_recursion(data, 15, 0, ((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(data) - 1))))) or (_str(binary_search_by_recursion(data, 15, 0, ((function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(data) - 1))))))
                                              print((((type(_str(binary_search_by_recursion(data, 5, 0, ((function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(data) - 1)))) == "table")) and (
                                                  (function(v)
                                                  local function encode(x)
                                                  if type(x) == "table" then
                                                    if x.__name and x.__order then
                                                      local parts = {x.__name, " {"}
                                                      for i, k in ipairs(x.__order) do
                                                        if i > 1 then parts[#parts+1] = ", " end
                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    elseif #x > 0 then
                                                        local allTables = true
                                                        for _, v in ipairs(x) do
                                                          if type(v) ~= "table" then allTables = false break end
                                                        end
                                                        local parts = {}
                                                        if not allTables then parts[#parts+1] = "[" end
                                                        for i, val in ipairs(x) do
                                                          parts[#parts+1] = encode(val)
                                                          if i < #x then parts[#parts+1] = " " end
                                                        end
                                                        if not allTables then parts[#parts+1] = "]" end
                                                        return table.concat(parts)
                                                      else
                                                        local keys = {}
                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                        local parts = {"{"}
                                                        for i, k in ipairs(keys) do
                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                          if i < #keys then parts[#parts+1] = ", " end
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      end
                                                    elseif type(x) == "string" then
                                                        return '"' .. x .. '"'
                                                      else
                                                        return tostring(x)
                                                      end
                                                    end
                                                    return encode(v)
                                                  end)(_str(binary_search_by_recursion(data, 5, 0, ((function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(data) - 1))))) or (_str(binary_search_by_recursion(data, 5, 0, ((function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(data) - 1))))))
                                                          print((((type(_str(binary_search_by_recursion(data, 6, 0, ((function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(data) - 1)))) == "table")) and (
                                                              (function(v)
                                                              local function encode(x)
                                                              if type(x) == "table" then
                                                                if x.__name and x.__order then
                                                                  local parts = {x.__name, " {"}
                                                                  for i, k in ipairs(x.__order) do
                                                                    if i > 1 then parts[#parts+1] = ", " end
                                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                  end
                                                                  parts[#parts+1] = "}"
                                                                  return table.concat(parts)
                                                                elseif #x > 0 then
                                                                    local allTables = true
                                                                    for _, v in ipairs(x) do
                                                                      if type(v) ~= "table" then allTables = false break end
                                                                    end
                                                                    local parts = {}
                                                                    if not allTables then parts[#parts+1] = "[" end
                                                                    for i, val in ipairs(x) do
                                                                      parts[#parts+1] = encode(val)
                                                                      if i < #x then parts[#parts+1] = " " end
                                                                    end
                                                                    if not allTables then parts[#parts+1] = "]" end
                                                                    return table.concat(parts)
                                                                  else
                                                                    local keys = {}
                                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                    local parts = {"{"}
                                                                    for i, k in ipairs(keys) do
                                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                      if i < #keys then parts[#parts+1] = ", " end
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  end
                                                                elseif type(x) == "string" then
                                                                    return '"' .. x .. '"'
                                                                  else
                                                                    return tostring(x)
                                                                  end
                                                                end
                                                                return encode(v)
                                                              end)(_str(binary_search_by_recursion(data, 6, 0, ((function(v)
                                                              if type(v) == 'table' and v.items ~= nil then
                                                                return #v.items
                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                  local c = 0
                                                                  for _ in pairs(v) do c = c + 1 end
                                                                  return c
                                                                elseif type(v) == 'string' then
                                                                    local l = utf8.len(v)
                                                                    if l then return l end
                                                                    return #v
                                                                  elseif type(v) == 'table' then
                                                                      return #v
                                                                    else
                                                                      return 0
                                                                    end
                                                                  end)(data) - 1))))) or (_str(binary_search_by_recursion(data, 6, 0, ((function(v)
                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                    return #v.items
                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                      local c = 0
                                                                      for _ in pairs(v) do c = c + 1 end
                                                                      return c
                                                                    elseif type(v) == 'string' then
                                                                        local l = utf8.len(v)
                                                                        if l then return l end
                                                                        return #v
                                                                      elseif type(v) == 'table' then
                                                                          return #v
                                                                        else
                                                                          return 0
                                                                        end
                                                                      end)(data) - 1))))))
                                                                      print((((type(_str(exponential_search(data, 0))) == "table")) and (
                                                                      (function(v)
                                                                      local function encode(x)
                                                                      if type(x) == "table" then
                                                                        if x.__name and x.__order then
                                                                          local parts = {x.__name, " {"}
                                                                          for i, k in ipairs(x.__order) do
                                                                            if i > 1 then parts[#parts+1] = ", " end
                                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                          end
                                                                          parts[#parts+1] = "}"
                                                                          return table.concat(parts)
                                                                        elseif #x > 0 then
                                                                            local allTables = true
                                                                            for _, v in ipairs(x) do
                                                                              if type(v) ~= "table" then allTables = false break end
                                                                            end
                                                                            local parts = {}
                                                                            if not allTables then parts[#parts+1] = "[" end
                                                                            for i, val in ipairs(x) do
                                                                              parts[#parts+1] = encode(val)
                                                                              if i < #x then parts[#parts+1] = " " end
                                                                            end
                                                                            if not allTables then parts[#parts+1] = "]" end
                                                                            return table.concat(parts)
                                                                          else
                                                                            local keys = {}
                                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                            local parts = {"{"}
                                                                            for i, k in ipairs(keys) do
                                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                              if i < #keys then parts[#parts+1] = ", " end
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          end
                                                                        elseif type(x) == "string" then
                                                                            return '"' .. x .. '"'
                                                                          else
                                                                            return tostring(x)
                                                                          end
                                                                        end
                                                                        return encode(v)
                                                                      end)(_str(exponential_search(data, 0)))) or (_str(exponential_search(data, 0)))))
                                                                      print((((type(_str(exponential_search(data, 15))) == "table")) and (
                                                                      (function(v)
                                                                      local function encode(x)
                                                                      if type(x) == "table" then
                                                                        if x.__name and x.__order then
                                                                          local parts = {x.__name, " {"}
                                                                          for i, k in ipairs(x.__order) do
                                                                            if i > 1 then parts[#parts+1] = ", " end
                                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                          end
                                                                          parts[#parts+1] = "}"
                                                                          return table.concat(parts)
                                                                        elseif #x > 0 then
                                                                            local allTables = true
                                                                            for _, v in ipairs(x) do
                                                                              if type(v) ~= "table" then allTables = false break end
                                                                            end
                                                                            local parts = {}
                                                                            if not allTables then parts[#parts+1] = "[" end
                                                                            for i, val in ipairs(x) do
                                                                              parts[#parts+1] = encode(val)
                                                                              if i < #x then parts[#parts+1] = " " end
                                                                            end
                                                                            if not allTables then parts[#parts+1] = "]" end
                                                                            return table.concat(parts)
                                                                          else
                                                                            local keys = {}
                                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                            local parts = {"{"}
                                                                            for i, k in ipairs(keys) do
                                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                              if i < #keys then parts[#parts+1] = ", " end
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          end
                                                                        elseif type(x) == "string" then
                                                                            return '"' .. x .. '"'
                                                                          else
                                                                            return tostring(x)
                                                                          end
                                                                        end
                                                                        return encode(v)
                                                                      end)(_str(exponential_search(data, 15)))) or (_str(exponential_search(data, 15)))))
                                                                      print((((type(_str(exponential_search(data, 5))) == "table")) and (
                                                                      (function(v)
                                                                      local function encode(x)
                                                                      if type(x) == "table" then
                                                                        if x.__name and x.__order then
                                                                          local parts = {x.__name, " {"}
                                                                          for i, k in ipairs(x.__order) do
                                                                            if i > 1 then parts[#parts+1] = ", " end
                                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                          end
                                                                          parts[#parts+1] = "}"
                                                                          return table.concat(parts)
                                                                        elseif #x > 0 then
                                                                            local allTables = true
                                                                            for _, v in ipairs(x) do
                                                                              if type(v) ~= "table" then allTables = false break end
                                                                            end
                                                                            local parts = {}
                                                                            if not allTables then parts[#parts+1] = "[" end
                                                                            for i, val in ipairs(x) do
                                                                              parts[#parts+1] = encode(val)
                                                                              if i < #x then parts[#parts+1] = " " end
                                                                            end
                                                                            if not allTables then parts[#parts+1] = "]" end
                                                                            return table.concat(parts)
                                                                          else
                                                                            local keys = {}
                                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                            local parts = {"{"}
                                                                            for i, k in ipairs(keys) do
                                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                              if i < #keys then parts[#parts+1] = ", " end
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          end
                                                                        elseif type(x) == "string" then
                                                                            return '"' .. x .. '"'
                                                                          else
                                                                            return tostring(x)
                                                                          end
                                                                        end
                                                                        return encode(v)
                                                                      end)(_str(exponential_search(data, 5)))) or (_str(exponential_search(data, 5)))))
                                                                      print((((type(_str(exponential_search(data, 6))) == "table")) and (
                                                                      (function(v)
                                                                      local function encode(x)
                                                                      if type(x) == "table" then
                                                                        if x.__name and x.__order then
                                                                          local parts = {x.__name, " {"}
                                                                          for i, k in ipairs(x.__order) do
                                                                            if i > 1 then parts[#parts+1] = ", " end
                                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                          end
                                                                          parts[#parts+1] = "}"
                                                                          return table.concat(parts)
                                                                        elseif #x > 0 then
                                                                            local allTables = true
                                                                            for _, v in ipairs(x) do
                                                                              if type(v) ~= "table" then allTables = false break end
                                                                            end
                                                                            local parts = {}
                                                                            if not allTables then parts[#parts+1] = "[" end
                                                                            for i, val in ipairs(x) do
                                                                              parts[#parts+1] = encode(val)
                                                                              if i < #x then parts[#parts+1] = " " end
                                                                            end
                                                                            if not allTables then parts[#parts+1] = "]" end
                                                                            return table.concat(parts)
                                                                          else
                                                                            local keys = {}
                                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                            local parts = {"{"}
                                                                            for i, k in ipairs(keys) do
                                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                              if i < #keys then parts[#parts+1] = ", " end
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          end
                                                                        elseif type(x) == "string" then
                                                                            return '"' .. x .. '"'
                                                                          else
                                                                            return tostring(x)
                                                                          end
                                                                        end
                                                                        return encode(v)
                                                                      end)(_str(exponential_search(data, 6)))) or (_str(exponential_search(data, 6)))))
                                                                    end
                                                                    main()
                                                                    local _bench_end = os.clock()
                                                                    collectgarbage()
                                                                    local _bench_end_mem = collectgarbage('count') * 1024
                                                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                  end;
