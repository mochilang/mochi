-- Generated by Mochi v0.10.63 on 2025-08-11 16:20 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function score(p, f)
    return f(p.x, p.y)
  end
  function get_neighbors(p)
    local s = p.step
    local ns = {}
    ns = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(ns, {x = (p.x - s), y = (p.y - s), step = s})
  ns = (function(lst, item)
  lst = lst or {}
  table.insert(lst, item)
  return lst
end)(ns, {x = (p.x - s), y = p.y, step = s})
ns = (function(lst, item)
lst = lst or {}
table.insert(lst, item)
return lst
end)(ns, {x = (p.x - s), y = (p.y + s), step = s})
ns = (function(lst, item)
lst = lst or {}
table.insert(lst, item)
return lst
end)(ns, {x = p.x, y = (p.y - s), step = s})
ns = (function(lst, item)
lst = lst or {}
table.insert(lst, item)
return lst
end)(ns, {x = p.x, y = (p.y + s), step = s})
ns = (function(lst, item)
lst = lst or {}
table.insert(lst, item)
return lst
end)(ns, {x = (p.x + s), y = (p.y - s), step = s})
ns = (function(lst, item)
lst = lst or {}
table.insert(lst, item)
return lst
end)(ns, {x = (p.x + s), y = p.y, step = s})
ns = (function(lst, item)
lst = lst or {}
table.insert(lst, item)
return lst
end)(ns, {x = (p.x + s), y = (p.y + s), step = s})
return ns
end
function remove_at(lst, idx)
  local res = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(lst)) do
        if (i ~= idx) then
          res = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(res, lst[i + 1])
      end
      i = (i + 1)
    end
    return res
  end
  function rand()
    local _t = _now()
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return seed
  end
  function random_float()
    return (rand() / 2.147483648e+09)
  end
  function randint(low, high)
    return ((rand() % ((high - low) + 1)) + low)
  end
  function expApprox(x)
    local y = x
    local is_neg = false
    if (x < 0) then
      is_neg = true
      y = (-x)
    end
    local term = 1
    local sum = 1
    local n = 1
    while (n < 30) do
      term = ((term * y) / n)
      sum = (sum + term)
      n = (n + 1)
    end
    if is_neg then
      return (1 / sum)
    end
    return sum
  end
  function simulated_annealing(search_prob, f, find_max, max_x, min_x, max_y, min_y, start_temp, rate_of_decrease, threshold_temp)
    local search_end = false
    local current_state = search_prob
    local current_temp = start_temp
    local best_state = current_state
    while (not search_end) do
      local current_score = score(current_state, f)
      if (score(best_state, f) < current_score) then
        best_state = current_state
      end
      local next_state = current_state
      local found_next = false
      local neighbors = get_neighbors(current_state)
      while ((not found_next) and ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(neighbors) > 0)) do
            local idx = randint(0, ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(neighbors) - 1))
                local picked_neighbor = neighbors[idx + 1]
                neighbors = remove_at(neighbors, idx)
                if ((((picked_neighbor.x > max_x) or (picked_neighbor.x < min_x)) or (picked_neighbor.y > max_y)) or (picked_neighbor.y < min_y)) then
                  goto __cont_2
                end
                local change = (score(picked_neighbor, f) - current_score)
                if (not find_max) then
                  change = (-change)
                end
                if (change > 0) then
                  next_state = picked_neighbor
                  found_next = true
                else
                  local probability = expApprox((change / current_temp))
                  if (random_float() < probability) then
                    next_state = picked_neighbor
                    found_next = true
                  end
                end
                ::__cont_2::
              end
              current_temp = (current_temp - (current_temp * rate_of_decrease))
              if ((current_temp < threshold_temp) or (not found_next)) then
                search_end = true
              else
                current_state = next_state
              end
              ::__cont_1::
            end
            return best_state
          end
          function test_f1(x, y)
            return ((x * x) + (y * y))
          end
          function test_f2(x, y)
            return (((3 * x) * x) - (6 * y))
          end
          function main()
            local prob1 = {x = 12, y = 47, step = 1}
            local min_state = simulated_annealing(prob1, test_f1, false, 100, 5, 50, (-5), 100, 0.01, 1)
            print((string.gsub(string.format("min1 %s", (((type(test_f1(min_state.x, min_state.y)) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(test_f1(min_state.x, min_state.y))) or (test_f1(min_state.x, min_state.y)))), "%s+$", "")))
            local prob2 = {x = 12, y = 47, step = 1}
            local max_state = simulated_annealing(prob2, test_f1, true, 100, 5, 50, (-5), 100, 0.01, 1)
            print((string.gsub(string.format("max1 %s", (((type(test_f1(max_state.x, max_state.y)) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(test_f1(max_state.x, max_state.y))) or (test_f1(max_state.x, max_state.y)))), "%s+$", "")))
            local prob3 = {x = 3, y = 4, step = 1}
            local min_state2 = simulated_annealing(prob3, test_f2, false, 1000, (-1000), 1000, (-1000), 100, 0.01, 1)
            print((string.gsub(string.format("min2 %s", (((type(test_f2(min_state2.x, min_state2.y)) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(test_f2(min_state2.x, min_state2.y))) or (test_f2(min_state2.x, min_state2.y)))), "%s+$", "")))
            local prob4 = {x = 3, y = 4, step = 1}
            local max_state2 = simulated_annealing(prob4, test_f2, true, 1000, (-1000), 1000, (-1000), 100, 0.01, 1)
            print((string.gsub(string.format("max2 %s", (((type(test_f2(max_state2.x, max_state2.y)) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(test_f2(max_state2.x, max_state2.y))) or (test_f2(max_state2.x, max_state2.y)))), "%s+$", "")))
          end
          seed = 1
          main()
          local _bench_end = os.clock()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
