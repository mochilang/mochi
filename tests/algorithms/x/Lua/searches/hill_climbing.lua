-- Generated by Mochi v0.10.61 on 2025-08-08 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function score(sp)
    return f(sp, sp.x, sp.y)
  end
  function neighbors(sp)
    local s = sp.step
    return {{x = (sp.x - s), y = (sp.y - s), step = s, f = sp.f}, {x = (sp.x - s), y = sp.y, step = s, f = sp.f}, {x = (sp.x - s), y = (sp.y + s), step = s, f = sp.f}, {x = sp.x, y = (sp.y - s), step = s, f = sp.f}, {x = sp.x, y = (sp.y + s), step = s, f = sp.f}, {x = (sp.x + s), y = (sp.y - s), step = s, f = sp.f}, {x = (sp.x + s), y = sp.y, step = s, f = sp.f}, {x = (sp.x + s), y = (sp.y + s), step = s, f = sp.f}}
  end
  function equal_state(a, b)
    return ((a.x == b.x) and (a.y == b.y))
  end
  function contains_state(lst, sp)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(lst)) do
          if equal_state(lst[i + 1], sp) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function hill_climbing(sp, find_max, max_x, min_x, max_y, min_y, max_iter)
        local current = sp
        local visited = {}
        local iterations = 0
        local solution_found = false
        while ((solution_found == false) and (iterations < max_iter)) do
          visited = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(visited, current)
        iterations = (iterations + 1)
        local current_score = score(current)
        local neighs = neighbors(current)
        local max_change = (-1e+18)
        local min_change = 1e+18
        local next = current
        local improved = false
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(neighs)) do
              local n = neighs[i + 1]
              i = (i + 1)
              if contains_state(visited, n) then
                goto __cont_2
              end
              if ((((n.x > max_x) or (n.x < min_x)) or (n.y > max_y)) or (n.y < min_y)) then
                goto __cont_2
              end
              local change = (score(n) - current_score)
              if find_max then
                if ((change > max_change) and (change > 0)) then
                  max_change = change
                  next = n
                  improved = true
                end
              else
                if ((change < min_change) and (change < 0)) then
                  min_change = change
                  next = n
                  improved = true
                end
              end
              ::__cont_2::
            end
            if improved then
              current = next
            else
              solution_found = true
            end
            ::__cont_1::
          end
          return current
        end
        function test_f1(x, y)
          return ((x * x) + (y * y))
        end
        function main()
          local prob1 = {x = 3, y = 4, step = 1, f = test_f1}
          local local_min1 = hill_climbing((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(prob1), false, 1e+09, (-1e+09), 1e+09, (-1e+09), 10000)
          print((((type(_str(math.floor(tonumber(score(local_min1)) or 0))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(_str(math.floor(tonumber(score(local_min1)) or 0)))) or (_str(math.floor(tonumber(score(local_min1)) or 0)))))
          local prob2 = {x = 12, y = 47, step = 1, f = test_f1}
          local local_min2 = hill_climbing((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(prob2), false, 100, 5, 50, (-5), 10000)
          print((((type(_str(math.floor(tonumber(score(local_min2)) or 0))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(_str(math.floor(tonumber(score(local_min2)) or 0)))) or (_str(math.floor(tonumber(score(local_min2)) or 0)))))
          local prob3 = {x = 3, y = 4, step = 1, f = test_f1}
          local local_max = hill_climbing((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(prob3), true, 1e+09, (-1e+09), 1e+09, (-1e+09), 1000)
          print((((type(_str(math.floor(tonumber(score(local_max)) or 0))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(_str(math.floor(tonumber(score(local_max)) or 0)))) or (_str(math.floor(tonumber(score(local_max)) or 0)))))
        end
        main()
        local _bench_end = os.clock()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
