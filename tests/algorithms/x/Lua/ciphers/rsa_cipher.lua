-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pow_int(base, exp)
    local result = 1
    local i = 0
    while (i < exp) do
      result = (result * base)
      i = (i + 1)
    end
    return result
  end
  function mod_pow(base, exponent, modulus)
    local result = 1
    local b = (base % modulus)
    local e = exponent
    while (e > 0) do
      if ((e % 2) == 1) then
        result = ((result * b) % modulus)
      end
      e = (e // 2)
      b = ((b * b) % modulus)
    end
    return result
  end
  function ord(ch)
    if (ch == " ") then
      return 32
    end
    if (ch == "a") then
      return 97
    end
    if (ch == "b") then
      return 98
    end
    if (ch == "c") then
      return 99
    end
    if (ch == "d") then
      return 100
    end
    if (ch == "e") then
      return 101
    end
    if (ch == "f") then
      return 102
    end
    if (ch == "g") then
      return 103
    end
    if (ch == "h") then
      return 104
    end
    if (ch == "i") then
      return 105
    end
    if (ch == "j") then
      return 106
    end
    if (ch == "k") then
      return 107
    end
    if (ch == "l") then
      return 108
    end
    if (ch == "m") then
      return 109
    end
    if (ch == "n") then
      return 110
    end
    if (ch == "o") then
      return 111
    end
    if (ch == "p") then
      return 112
    end
    if (ch == "q") then
      return 113
    end
    if (ch == "r") then
      return 114
    end
    if (ch == "s") then
      return 115
    end
    if (ch == "t") then
      return 116
    end
    if (ch == "u") then
      return 117
    end
    if (ch == "v") then
      return 118
    end
    if (ch == "w") then
      return 119
    end
    if (ch == "x") then
      return 120
    end
    if (ch == "y") then
      return 121
    end
    if (ch == "z") then
      return 122
    end
    return 0
  end
  function chr(code)
    if (code == 32) then
      return " "
    end
    if (code == 97) then
      return "a"
    end
    if (code == 98) then
      return "b"
    end
    if (code == 99) then
      return "c"
    end
    if (code == 100) then
      return "d"
    end
    if (code == 101) then
      return "e"
    end
    if (code == 102) then
      return "f"
    end
    if (code == 103) then
      return "g"
    end
    if (code == 104) then
      return "h"
    end
    if (code == 105) then
      return "i"
    end
    if (code == 106) then
      return "j"
    end
    if (code == 107) then
      return "k"
    end
    if (code == 108) then
      return "l"
    end
    if (code == 109) then
      return "m"
    end
    if (code == 110) then
      return "n"
    end
    if (code == 111) then
      return "o"
    end
    if (code == 112) then
      return "p"
    end
    if (code == 113) then
      return "q"
    end
    if (code == 114) then
      return "r"
    end
    if (code == 115) then
      return "s"
    end
    if (code == 116) then
      return "t"
    end
    if (code == 117) then
      return "u"
    end
    if (code == 118) then
      return "v"
    end
    if (code == 119) then
      return "w"
    end
    if (code == 120) then
      return "x"
    end
    if (code == 121) then
      return "y"
    end
    if (code == 122) then
      return "z"
    end
    return ""
  end
  function get_blocks_from_text(message, block_size)
    local block_ints = {}
    local block_start = 0
    while (block_start < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(message)) do
          local block_int = 0
          local i = block_start
          while ((i < (block_start + block_size)) and (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(message))) do
                block_int = (block_int + (ord(string.sub(message, (i + 1), (i + 1))) * pow_int(BYTE_SIZE, (i - block_start))))
                i = (i + 1)
              end
              block_ints = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(block_ints, block_int)
            block_start = (block_start + block_size)
          end
          return block_ints
        end
        function get_text_from_blocks(block_ints, message_length, block_size)
          local message = ""
          for _, block_int in ipairs(block_ints) do
            local block = block_int
            local i = (block_size - 1)
            local block_message = ""
            while (i >= 0) do
              if (((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(message) + i) < message_length) then
                    local ascii_number = (block // pow_int(BYTE_SIZE, i))
                    block = (block % pow_int(BYTE_SIZE, i))
                    block_message = (chr(ascii_number) .. tostring(block_message))
                  end
                  i = (i - 1)
                end
                message = (message .. tostring(block_message))
              end
              return message
            end
            function encrypt_message(message, n, e, block_size)
              local encrypted = {}
              local blocks = get_blocks_from_text(message, block_size)
              for _, block in ipairs(blocks) do
                encrypted = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(encrypted, mod_pow(block, e, n))
            end
            return encrypted
          end
          function decrypt_message(blocks, message_length, n, d, block_size)
            local decrypted_blocks = {}
            for _, block in ipairs(blocks) do
              decrypted_blocks = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(decrypted_blocks, mod_pow(block, d, n))
          end
          local message = ""
          for _, num in ipairs(decrypted_blocks) do
            message = (message .. chr(num))
          end
          return message
        end
        function main()
          local message = "hello world"
          local n = 3233
          local e = 17
          local d = 2753
          local block_size = 1
          local encrypted = encrypt_message(message, n, e, block_size)
          print((((type(
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(encrypted)) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(encrypted))) or (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(encrypted))))
          local decrypted = decrypt_message(encrypted, (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(message), n, d, block_size)
              print((((type(decrypted) == "table")) and (
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(decrypted)) or (decrypted)))
            end
            BYTE_SIZE = 256
            main()
            local _bench_end = os.clock()
            collectgarbage()
            local _bench_end_mem = collectgarbage('count') * 1024
            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
          end;
