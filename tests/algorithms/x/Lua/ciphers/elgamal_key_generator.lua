-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rand()
    seed = (((seed * 1103515245) + 12345) % 2147483647)
    return seed
  end
  function rand_range(min, max)
    return (min + (rand() % ((max - min) + 1)))
  end
  function mod_pow(base, exponent, modulus)
    local result = 1
    local b = (base % modulus)
    local e = exponent
    while (e > 0) do
      if ((e % 2) == 1) then
        result = ((result * b) % modulus)
      end
      e = (e // 2)
      b = ((b * b) % modulus)
    end
    return result
  end
  function extended_gcd(a, b)
    if (b == 0) then
      return {g = a, x = 1, y = 0}
    end
    local res = extended_gcd(b, (a % b))
    return {g = res.g, x = res.y, y = (res.x - ((a // b) * res.y))}
  end
  function mod_inverse(a, m)
    local res = extended_gcd(a, m)
    if (res.g ~= 1) then
      panic("inverse does not exist")
    end
    local r = (res.x % m)
    if (r < 0) then
      return (r + m)
    end
    return r
  end
  function pow2(n)
    local r = 1
    local i = 0
    while (i < n) do
      r = (r * 2)
      i = (i + 1)
    end
    return r
  end
  function is_probable_prime(n, k)
    if (n <= 1) then
      return false
    end
    if (n <= 3) then
      return true
    end
    if ((n % 2) == 0) then
      return false
    end
    local r = 0
    local d = (n - 1)
    while ((d % 2) == 0) do
      d = (d // 2)
      r = (r + 1)
    end
    local i = 0
    while (i < k) do
      local a = rand_range(2, (n - 2))
      local x = mod_pow(a, d, n)
      if ((x == 1) or (x == (n - 1))) then
        i = (i + 1)
        goto __cont_1
      end
      local j = 1
      local found = false
      while (j < r) do
        x = mod_pow(x, 2, n)
        if (x == (n - 1)) then
          found = true
          break
        end
        j = (j + 1)
      end
      if (not found) then
        return false
      end
      i = (i + 1)
      ::__cont_1::
    end
    return true
  end
  function generate_large_prime(bits)
    local min = pow2((bits - 1))
    local max = (pow2(bits) - 1)
    local p = rand_range(min, max)
    if ((p % 2) == 0) then
      p = (p + 1)
    end
    while (not is_probable_prime(p, 5)) do
      p = (p + 2)
      if (p > max) then
        p = (min + 1)
      end
    end
    return p
  end
  function primitive_root(p)
    while true do
      ::__cont_2::
      local g = rand_range(3, (p - 1))
      if (mod_pow(g, 2, p) == 1) then
        goto __cont_2
      end
      if (mod_pow(g, p, p) == 1) then
        goto __cont_2
      end
      return g
    end
  end
  function generate_key(key_size)
    local p = generate_large_prime(key_size)
    local e1 = primitive_root(p)
    local d = rand_range(3, (p - 1))
    local e2 = mod_inverse(mod_pow(e1, d, p), p)
    local public_key = {key_size = key_size, g = e1, e2 = e2, p = p}
    local private_key = {key_size = key_size, d = d}
    return {public_key = public_key, private_key = private_key}
  end
  function main()
    local key_size = 16
    local kp = generate_key(key_size)
    local pub = kp.public_key
    local priv = kp.private_key
    print((((type((((((((("public key: (" .. tostring(pub.key_size)) .. ", ") .. tostring(pub.g)) .. ", ") .. tostring(pub.e2)) .. ", ") .. tostring(pub.p)) .. ")")) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)((((((((("public key: (" .. tostring(pub.key_size)) .. ", ") .. tostring(pub.g)) .. ", ") .. tostring(pub.e2)) .. ", ") .. tostring(pub.p)) .. ")"))) or ((((((((("public key: (" .. tostring(pub.key_size)) .. ", ") .. tostring(pub.g)) .. ", ") .. tostring(pub.e2)) .. ", ") .. tostring(pub.p)) .. ")"))))
    print((((type((((("private key: (" .. tostring(priv.key_size)) .. ", ") .. tostring(priv.d)) .. ")")) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)((((("private key: (" .. tostring(priv.key_size)) .. ", ") .. tostring(priv.d)) .. ")"))) or ((((("private key: (" .. tostring(priv.key_size)) .. ", ") .. tostring(priv.d)) .. ")"))))
  end
  seed = 123456789
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
