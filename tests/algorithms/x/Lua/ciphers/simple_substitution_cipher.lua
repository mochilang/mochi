-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rand(n)
    seed = (((seed * 1664525) + 1013904223) % 2147483647)
    return (seed % n)
  end
  function get_random_key()
    local chars = nil
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(LETTERS)) do
          chars = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(chars, string.sub(LETTERS, (i + 1), (i + 1)))
        i = (i + 1)
      end
      local j = ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(chars) - 1)
          while (j > 0) do
            local k = rand((j + 1))
            local tmp = chars[j + 1]
            chars[j + 1] = chars[k + 1]
            chars[k + 1] = tmp
            j = (j - 1)
          end
          local res = ""
          i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(chars)) do
                res = (res .. chars[i + 1])
                i = (i + 1)
              end
              return res
            end
            function check_valid_key(key)
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(key) ~= (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(LETTERS)) then
                        return false
                      end
                      local used = {}
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(key)) do
                            local ch = string.sub(key, (i + 1), (i + 1))
                            if used[ch] then
                              return false
                            end
                            used[ch] = true
                            i = (i + 1)
                          end
                          i = 0
                          while (i < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(LETTERS)) do
                                local ch = string.sub(LETTERS, (i + 1), (i + 1))
                                if (not used[ch]) then
                                  return false
                                end
                                i = (i + 1)
                              end
                              return true
                            end
                            function index_in(s, ch)
                              local i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(s)) do
                                    if (string.sub(s, (i + 1), (i + 1)) == ch) then
                                      return i
                                    end
                                    i = (i + 1)
                                  end
                                  return (-1)
                                end
                                function char_to_upper(c)
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(LOWERCASE)) do
                                        if (c == string.sub(LOWERCASE, (i + 1), (i + 1))) then
                                          return string.sub(LETTERS, (i + 1), (i + 1))
                                        end
                                        i = (i + 1)
                                      end
                                      return c
                                    end
                                    function char_to_lower(c)
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(LETTERS)) do
                                            if (c == string.sub(LETTERS, (i + 1), (i + 1))) then
                                              return string.sub(LOWERCASE, (i + 1), (i + 1))
                                            end
                                            i = (i + 1)
                                          end
                                          return c
                                        end
                                        function is_upper(c)
                                          local i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(LETTERS)) do
                                                if (c == string.sub(LETTERS, (i + 1), (i + 1))) then
                                                  return true
                                                end
                                                i = (i + 1)
                                              end
                                              return false
                                            end
                                            function translate_message(key, message, mode)
                                              local chars_a = LETTERS
                                              local chars_b = key
                                              if (mode == "decrypt") then
                                                local tmp = chars_a
                                                chars_a = chars_b
                                                chars_b = tmp
                                              end
                                              local translated = ""
                                              local i = 0
                                              while (i < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(message)) do
                                                    local symbol = string.sub(message, (i + 1), (i + 1))
                                                    local upper_symbol = char_to_upper(symbol)
                                                    local idx = index_in(chars_a, upper_symbol)
                                                    if (idx >= 0) then
                                                      local mapped = string.sub(chars_b, (idx + 1), (idx + 1))
                                                      if is_upper(symbol) then
                                                        translated = (translated .. mapped)
                                                      else
                                                        translated = (translated .. char_to_lower(mapped))
                                                      end
                                                    else
                                                      translated = (translated .. symbol)
                                                    end
                                                    i = (i + 1)
                                                  end
                                                  return translated
                                                end
                                                function encrypt_message(key, message)
                                                  local res = translate_message(key, message, "encrypt")
                                                  return res
                                                end
                                                function decrypt_message(key, message)
                                                  local res = translate_message(key, message, "decrypt")
                                                  return res
                                                end
                                                LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                                LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
                                                seed = 1
                                                key = "LFWOAYUISVKMNXPBDCRJTQEGHZ"
                                                print((((type(encrypt_message(key, "Harshil Darji")) == "table")) and (
                                                (function(v)
                                                local function encode(x)
                                                if type(x) == "table" then
                                                  if x.__name and x.__order then
                                                    local parts = {x.__name, " {"}
                                                    for i, k in ipairs(x.__order) do
                                                      if i > 1 then parts[#parts+1] = ", " end
                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  elseif #x > 0 then
                                                      local allTables = true
                                                      for _, v in ipairs(x) do
                                                        if type(v) ~= "table" then allTables = false break end
                                                      end
                                                      local parts = {}
                                                      if not allTables then parts[#parts+1] = "[" end
                                                      for i, val in ipairs(x) do
                                                        parts[#parts+1] = encode(val)
                                                        if i < #x then parts[#parts+1] = " " end
                                                      end
                                                      if not allTables then parts[#parts+1] = "]" end
                                                      return table.concat(parts)
                                                    else
                                                      local keys = {}
                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                      local parts = {"{"}
                                                      for i, k in ipairs(keys) do
                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                        if i < #keys then parts[#parts+1] = ", " end
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    end
                                                  elseif type(x) == "string" then
                                                      return '"' .. x .. '"'
                                                    else
                                                      return tostring(x)
                                                    end
                                                  end
                                                  return encode(v)
                                                end)(encrypt_message(key, "Harshil Darji"))) or (encrypt_message(key, "Harshil Darji"))))
                                                print((((type(decrypt_message(key, "Ilcrism Olcvs")) == "table")) and (
                                                (function(v)
                                                local function encode(x)
                                                if type(x) == "table" then
                                                  if x.__name and x.__order then
                                                    local parts = {x.__name, " {"}
                                                    for i, k in ipairs(x.__order) do
                                                      if i > 1 then parts[#parts+1] = ", " end
                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  elseif #x > 0 then
                                                      local allTables = true
                                                      for _, v in ipairs(x) do
                                                        if type(v) ~= "table" then allTables = false break end
                                                      end
                                                      local parts = {}
                                                      if not allTables then parts[#parts+1] = "[" end
                                                      for i, val in ipairs(x) do
                                                        parts[#parts+1] = encode(val)
                                                        if i < #x then parts[#parts+1] = " " end
                                                      end
                                                      if not allTables then parts[#parts+1] = "]" end
                                                      return table.concat(parts)
                                                    else
                                                      local keys = {}
                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                      local parts = {"{"}
                                                      for i, k in ipairs(keys) do
                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                        if i < #keys then parts[#parts+1] = ", " end
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    end
                                                  elseif type(x) == "string" then
                                                      return '"' .. x .. '"'
                                                    else
                                                      return tostring(x)
                                                    end
                                                  end
                                                  return encode(v)
                                                end)(decrypt_message(key, "Ilcrism Olcvs"))) or (decrypt_message(key, "Ilcrism Olcvs"))))
                                                local _bench_end = os.clock()
                                                collectgarbage()
                                                local _bench_end_mem = collectgarbage('count') * 1024
                                                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                              end;
