-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pow2(exp)
    local res = 1
    local i = 0
    while (i < exp) do
      res = (res * 2)
      i = (i + 1)
    end
    return res
  end
  function next_seed(x)
    return (((x * 1103515245) + 12345) % 2147483648)
  end
  function rand_range(min, max)
    seed = next_seed(seed)
    return (min + (seed % (max - min)))
  end
  function gcd(a, b)
    local x = a
    local y = b
    while (y ~= 0) do
      local temp = (x % y)
      x = y
      y = temp
    end
    return x
  end
  function mod_inverse(e, phi)
    local t = 0
    local newt = 1
    local r = phi
    local newr = e
    while (newr ~= 0) do
      local quotient = (r // newr)
      local tmp = newt
      newt = (t - (quotient * newt))
      t = tmp
      local tmp_r = newr
      newr = (r - (quotient * newr))
      r = tmp_r
    end
    if (r > 1) then
      return 0
    end
    if (t < 0) then
      t = (t + phi)
    end
    return t
  end
  function is_prime(n)
    if (n < 2) then
      return false
    end
    local i = 2
    while ((i * i) <= n) do
      if ((n % i) == 0) then
        return false
      end
      i = (i + 1)
    end
    return true
  end
  function generate_prime(bits)
    local min = pow2((bits - 1))
    local max = pow2(bits)
    local p = rand_range(min, max)
    if ((p % 2) == 0) then
      p = (p + 1)
    end
    while (not is_prime(p)) do
      p = (p + 2)
      if (p >= max) then
        p = (min + 1)
      end
    end
    return p
  end
  function generate_key(bits)
    local p = generate_prime(bits)
    local q = generate_prime(bits)
    local n = (p * q)
    local phi = ((p - 1) * (q - 1))
    local e = rand_range(2, phi)
    while (gcd(e, phi) ~= 1) do
      e = (e + 1)
      if (e >= phi) then
        e = 2
      end
    end
    local d = mod_inverse(e, phi)
    return {public_key = {n, e}, private_key = {n, d}}
  end
  seed = 1
  keys = generate_key(8)
  pub = keys.public_key
  priv = keys.private_key
  print((((type((((("Public key: (" .. tostring(pub[0 + 1])) .. ", ") .. tostring(pub[1 + 1])) .. ")")) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)((((("Public key: (" .. tostring(pub[0 + 1])) .. ", ") .. tostring(pub[1 + 1])) .. ")"))) or ((((("Public key: (" .. tostring(pub[0 + 1])) .. ", ") .. tostring(pub[1 + 1])) .. ")"))))
  print((((type((((("Private key: (" .. tostring(priv[0 + 1])) .. ", ") .. tostring(priv[1 + 1])) .. ")")) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)((((("Private key: (" .. tostring(priv[0 + 1])) .. ", ") .. tostring(priv[1 + 1])) .. ")"))) or ((((("Private key: (" .. tostring(priv[0 + 1])) .. ", ") .. tostring(priv[1 + 1])) .. ")"))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
