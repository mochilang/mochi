-- Generated by Mochi v0.10.61 on 2025-08-08 19:19 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function mod36(n)
    local r = (n % 36)
    if (r < 0) then
      r = (r + 36)
    end
    return r
  end
  function gcd(a, b)
    local x = a
    local y = b
    while (y ~= 0) do
      local t = y
      y = (x % y)
      x = t
    end
    if (x < 0) then
      x = (-x)
    end
    return x
  end
  function replace_letters(letter)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(KEY_STRING)) do
          if (string.sub(KEY_STRING, (i + 1), (i + 1)) == letter) then
            return i
          end
          i = (i + 1)
        end
        return 0
      end
      function replace_digits(num)
        local idx = mod36(num)
        return string.sub(KEY_STRING, (idx + 1), (idx + 1))
      end
      function to_upper(c)
        local lower = "abcdefghijklmnopqrstuvwxyz"
        local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(lower)) do
              if (c == string.sub(lower, (i + 1), (i + 1))) then
                return string.sub(upper, (i + 1), (i + 1))
              end
              i = (i + 1)
            end
            return c
          end
          function process_text(text, break_key)
            local chars = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(text)) do
                  local c = to_upper(string.sub(text, (i + 1), (i + 1)))
                  local j = 0
                  local ok = false
                  while (j < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(KEY_STRING)) do
                        if (string.sub(KEY_STRING, (j + 1), (j + 1)) == c) then
                          ok = true
                          break
                        end
                        j = (j + 1)
                      end
                      if ok then
                        chars = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(chars, c)
                    end
                    i = (i + 1)
                  end
                  if ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(chars) == 0) then
                        return ""
                      end
                      local last = chars[((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(chars) - 1) + 1]
                          while (((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(chars) % break_key) ~= 0) do
                                chars = (function(lst, item)
                                lst = lst or {}
                                table.insert(lst, item)
                                return lst
                              end)(chars, last)
                            end
                            local res = ""
                            local k = 0
                            while (k < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(chars)) do
                                  res = (res .. chars[k + 1])
                                  k = (k + 1)
                                end
                                return res
                              end
                              function matrix_minor(m, row, col)
                                local res = {}
                                local i = 0
                                while (i < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(m)) do
                                      if (i ~= row) then
                                        local r = {}
                                        local j = 0
                                        while (j < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(m[i + 1])) do
                                              if (j ~= col) then
                                                r = (function(lst, item)
                                                lst = lst or {}
                                                table.insert(lst, item)
                                                return lst
                                              end)(r, m[i + 1][j + 1])
                                            end
                                            j = (j + 1)
                                          end
                                          res = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(res, r)
                                      end
                                      i = (i + 1)
                                    end
                                    return res
                                  end
                                  function determinant(m)
                                    local n = (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(m)
                                        if (n == 1) then
                                          return m[0 + 1][0 + 1]
                                        end
                                        if (n == 2) then
                                          return ((m[0 + 1][0 + 1] * m[1 + 1][1 + 1]) - (m[0 + 1][1 + 1] * m[1 + 1][0 + 1]))
                                        end
                                        local det = 0
                                        local col = 0
                                        while (col < n) do
                                          local minor_mat = matrix_minor(m, 0, col)
                                          local sign = 1
                                          if ((col % 2) == 1) then
                                            sign = (-1)
                                          end
                                          det = (det + ((sign * m[0 + 1][col + 1]) * determinant(minor_mat)))
                                          col = (col + 1)
                                        end
                                        return det
                                      end
                                      function cofactor_matrix(m)
                                        local n = (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(m)
                                            local res = {}
                                            local i = 0
                                            while (i < n) do
                                              local row = {}
                                              local j = 0
                                              while (j < n) do
                                                local minor_mat = matrix_minor(m, i, j)
                                                local det_minor = determinant(minor_mat)
                                                local sign = 1
                                                if (((i + j) % 2) == 1) then
                                                  sign = (-1)
                                                end
                                                row = (function(lst, item)
                                                lst = lst or {}
                                                table.insert(lst, item)
                                                return lst
                                              end)(row, (sign * det_minor))
                                              j = (j + 1)
                                            end
                                            res = (function(lst, item)
                                            lst = lst or {}
                                            table.insert(lst, item)
                                            return lst
                                          end)(res, row)
                                          i = (i + 1)
                                        end
                                        return res
                                      end
                                      function transpose(m)
                                        local rows = (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(m)
                                            local cols = (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(m[0 + 1])
                                                local res = {}
                                                local j = 0
                                                while (j < cols) do
                                                  local row = {}
                                                  local i = 0
                                                  while (i < rows) do
                                                    row = (function(lst, item)
                                                    lst = lst or {}
                                                    table.insert(lst, item)
                                                    return lst
                                                  end)(row, m[i + 1][j + 1])
                                                  i = (i + 1)
                                                end
                                                res = (function(lst, item)
                                                lst = lst or {}
                                                table.insert(lst, item)
                                                return lst
                                              end)(res, row)
                                              j = (j + 1)
                                            end
                                            return res
                                          end
                                          function matrix_mod(m)
                                            local res = {}
                                            local i = 0
                                            while (i < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(m)) do
                                                  local row = {}
                                                  local j = 0
                                                  while (j < (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(m[i + 1])) do
                                                        row = (function(lst, item)
                                                        lst = lst or {}
                                                        table.insert(lst, item)
                                                        return lst
                                                      end)(row, mod36(m[i + 1][j + 1]))
                                                      j = (j + 1)
                                                    end
                                                    res = (function(lst, item)
                                                    lst = lst or {}
                                                    table.insert(lst, item)
                                                    return lst
                                                  end)(res, row)
                                                  i = (i + 1)
                                                end
                                                return res
                                              end
                                              function scalar_matrix_mult(s, m)
                                                local res = {}
                                                local i = 0
                                                while (i < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(m)) do
                                                      local row = {}
                                                      local j = 0
                                                      while (j < (function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(m[i + 1])) do
                                                            row = (function(lst, item)
                                                            lst = lst or {}
                                                            table.insert(lst, item)
                                                            return lst
                                                          end)(row, mod36((s * m[i + 1][j + 1])))
                                                          j = (j + 1)
                                                        end
                                                        res = (function(lst, item)
                                                        lst = lst or {}
                                                        table.insert(lst, item)
                                                        return lst
                                                      end)(res, row)
                                                      i = (i + 1)
                                                    end
                                                    return res
                                                  end
                                                  function adjugate(m)
                                                    local cof = cofactor_matrix(m)
                                                    local n = (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(cof)
                                                        local res = {}
                                                        local i = 0
                                                        while (i < n) do
                                                          local row = {}
                                                          local j = 0
                                                          while (j < n) do
                                                            row = (function(lst, item)
                                                            lst = lst or {}
                                                            table.insert(lst, item)
                                                            return lst
                                                          end)(row, cof[j + 1][i + 1])
                                                          j = (j + 1)
                                                        end
                                                        res = (function(lst, item)
                                                        lst = lst or {}
                                                        table.insert(lst, item)
                                                        return lst
                                                      end)(res, row)
                                                      i = (i + 1)
                                                    end
                                                    return res
                                                  end
                                                  function multiply_matrix_vector(m, v)
                                                    local n = (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(m)
                                                        local res = {}
                                                        local i = 0
                                                        while (i < n) do
                                                          local sum = 0
                                                          local j = 0
                                                          while (j < n) do
                                                            sum = (sum + (m[i + 1][j + 1] * v[j + 1]))
                                                            j = (j + 1)
                                                          end
                                                          res = (function(lst, item)
                                                          lst = lst or {}
                                                          table.insert(lst, item)
                                                          return lst
                                                        end)(res, mod36(sum))
                                                        i = (i + 1)
                                                      end
                                                      return res
                                                    end
                                                    function inverse_key(key)
                                                      local det_val = determinant(key)
                                                      local det_mod = mod36(det_val)
                                                      local det_inv = 0
                                                      local i = 0
                                                      while (i < 36) do
                                                        if (((det_mod * i) % 36) == 1) then
                                                          det_inv = i
                                                          break
                                                        end
                                                        i = (i + 1)
                                                      end
                                                      local adj = adjugate(key)
                                                      local tmp = scalar_matrix_mult(det_inv, adj)
                                                      local res = matrix_mod(tmp)
                                                      return res
                                                    end
                                                    function hill_encrypt(key, text)
                                                      local break_key = (function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(key)
                                                          local processed = process_text(text, break_key)
                                                          local encrypted = ""
                                                          local i = 0
                                                          while (i < (function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(processed)) do
                                                                local vec = {}
                                                                local j = 0
                                                                while (j < break_key) do
                                                                  vec = (function(lst, item)
                                                                  lst = lst or {}
                                                                  table.insert(lst, item)
                                                                  return lst
                                                                end)(vec, replace_letters(string.sub(processed, ((i + j) + 1), ((i + j) + 1))))
                                                                j = (j + 1)
                                                              end
                                                              local enc_vec = multiply_matrix_vector(key, vec)
                                                              local k = 0
                                                              while (k < break_key) do
                                                                encrypted = (encrypted .. replace_digits(enc_vec[k + 1]))
                                                                k = (k + 1)
                                                              end
                                                              i = (i + break_key)
                                                            end
                                                            return encrypted
                                                          end
                                                          function hill_decrypt(key, text)
                                                            local break_key = (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(key)
                                                                local decrypt_key = inverse_key(key)
                                                                local processed = process_text(text, break_key)
                                                                local decrypted = ""
                                                                local i = 0
                                                                while (i < (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(processed)) do
                                                                      local vec = {}
                                                                      local j = 0
                                                                      while (j < break_key) do
                                                                        vec = (function(lst, item)
                                                                        lst = lst or {}
                                                                        table.insert(lst, item)
                                                                        return lst
                                                                      end)(vec, replace_letters(string.sub(processed, ((i + j) + 1), ((i + j) + 1))))
                                                                      j = (j + 1)
                                                                    end
                                                                    local dec_vec = multiply_matrix_vector(decrypt_key, vec)
                                                                    local k = 0
                                                                    while (k < break_key) do
                                                                      decrypted = (decrypted .. replace_digits(dec_vec[k + 1]))
                                                                      k = (k + 1)
                                                                    end
                                                                    i = (i + break_key)
                                                                  end
                                                                  return decrypted
                                                                end
                                                                KEY_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
                                                                key = {{2, 5}, {1, 6}}
                                                                print((((type(hill_encrypt(key, "testing hill cipher")) == "table")) and (
                                                                (function(v)
                                                                local function encode(x)
                                                                if type(x) == "table" then
                                                                  if x.__name and x.__order then
                                                                    local parts = {x.__name, " {"}
                                                                    for i, k in ipairs(x.__order) do
                                                                      if i > 1 then parts[#parts+1] = ", " end
                                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  elseif #x > 0 then
                                                                      local allTables = true
                                                                      for _, v in ipairs(x) do
                                                                        if type(v) ~= "table" then allTables = false break end
                                                                      end
                                                                      local parts = {}
                                                                      if not allTables then parts[#parts+1] = "[" end
                                                                      for i, val in ipairs(x) do
                                                                        parts[#parts+1] = encode(val)
                                                                        if i < #x then parts[#parts+1] = " " end
                                                                      end
                                                                      if not allTables then parts[#parts+1] = "]" end
                                                                      return table.concat(parts)
                                                                    else
                                                                      local keys = {}
                                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                      local parts = {"{"}
                                                                      for i, k in ipairs(keys) do
                                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                        if i < #keys then parts[#parts+1] = ", " end
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    end
                                                                  elseif type(x) == "string" then
                                                                      return '"' .. x .. '"'
                                                                    else
                                                                      return tostring(x)
                                                                    end
                                                                  end
                                                                  return encode(v)
                                                                end)(hill_encrypt(key, "testing hill cipher"))) or (hill_encrypt(key, "testing hill cipher"))))
                                                                print((((type(hill_encrypt(key, "hello")) == "table")) and (
                                                                (function(v)
                                                                local function encode(x)
                                                                if type(x) == "table" then
                                                                  if x.__name and x.__order then
                                                                    local parts = {x.__name, " {"}
                                                                    for i, k in ipairs(x.__order) do
                                                                      if i > 1 then parts[#parts+1] = ", " end
                                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  elseif #x > 0 then
                                                                      local allTables = true
                                                                      for _, v in ipairs(x) do
                                                                        if type(v) ~= "table" then allTables = false break end
                                                                      end
                                                                      local parts = {}
                                                                      if not allTables then parts[#parts+1] = "[" end
                                                                      for i, val in ipairs(x) do
                                                                        parts[#parts+1] = encode(val)
                                                                        if i < #x then parts[#parts+1] = " " end
                                                                      end
                                                                      if not allTables then parts[#parts+1] = "]" end
                                                                      return table.concat(parts)
                                                                    else
                                                                      local keys = {}
                                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                      local parts = {"{"}
                                                                      for i, k in ipairs(keys) do
                                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                        if i < #keys then parts[#parts+1] = ", " end
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    end
                                                                  elseif type(x) == "string" then
                                                                      return '"' .. x .. '"'
                                                                    else
                                                                      return tostring(x)
                                                                    end
                                                                  end
                                                                  return encode(v)
                                                                end)(hill_encrypt(key, "hello"))) or (hill_encrypt(key, "hello"))))
                                                                print((((type(hill_decrypt(key, "WHXYJOLM9C6XT085LL")) == "table")) and (
                                                                (function(v)
                                                                local function encode(x)
                                                                if type(x) == "table" then
                                                                  if x.__name and x.__order then
                                                                    local parts = {x.__name, " {"}
                                                                    for i, k in ipairs(x.__order) do
                                                                      if i > 1 then parts[#parts+1] = ", " end
                                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  elseif #x > 0 then
                                                                      local allTables = true
                                                                      for _, v in ipairs(x) do
                                                                        if type(v) ~= "table" then allTables = false break end
                                                                      end
                                                                      local parts = {}
                                                                      if not allTables then parts[#parts+1] = "[" end
                                                                      for i, val in ipairs(x) do
                                                                        parts[#parts+1] = encode(val)
                                                                        if i < #x then parts[#parts+1] = " " end
                                                                      end
                                                                      if not allTables then parts[#parts+1] = "]" end
                                                                      return table.concat(parts)
                                                                    else
                                                                      local keys = {}
                                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                      local parts = {"{"}
                                                                      for i, k in ipairs(keys) do
                                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                        if i < #keys then parts[#parts+1] = ", " end
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    end
                                                                  elseif type(x) == "string" then
                                                                      return '"' .. x .. '"'
                                                                    else
                                                                      return tostring(x)
                                                                    end
                                                                  end
                                                                  return encode(v)
                                                                end)(hill_decrypt(key, "WHXYJOLM9C6XT085LL"))) or (hill_decrypt(key, "WHXYJOLM9C6XT085LL"))))
                                                                print((((type(hill_decrypt(key, "85FF00")) == "table")) and (
                                                                (function(v)
                                                                local function encode(x)
                                                                if type(x) == "table" then
                                                                  if x.__name and x.__order then
                                                                    local parts = {x.__name, " {"}
                                                                    for i, k in ipairs(x.__order) do
                                                                      if i > 1 then parts[#parts+1] = ", " end
                                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  elseif #x > 0 then
                                                                      local allTables = true
                                                                      for _, v in ipairs(x) do
                                                                        if type(v) ~= "table" then allTables = false break end
                                                                      end
                                                                      local parts = {}
                                                                      if not allTables then parts[#parts+1] = "[" end
                                                                      for i, val in ipairs(x) do
                                                                        parts[#parts+1] = encode(val)
                                                                        if i < #x then parts[#parts+1] = " " end
                                                                      end
                                                                      if not allTables then parts[#parts+1] = "]" end
                                                                      return table.concat(parts)
                                                                    else
                                                                      local keys = {}
                                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                      local parts = {"{"}
                                                                      for i, k in ipairs(keys) do
                                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                        if i < #keys then parts[#parts+1] = ", " end
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    end
                                                                  elseif type(x) == "string" then
                                                                      return '"' .. x .. '"'
                                                                    else
                                                                      return tostring(x)
                                                                    end
                                                                  end
                                                                  return encode(v)
                                                                end)(hill_decrypt(key, "85FF00"))) or (hill_decrypt(key, "85FF00"))))
                                                                local _bench_end = os.clock()
                                                                collectgarbage()
                                                                local _bench_end_mem = collectgarbage('count') * 1024
                                                                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                              end;
