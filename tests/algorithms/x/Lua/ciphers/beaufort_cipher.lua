-- Generated by Mochi v0.10.59 on 2025-08-06 18:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function index_of(ch)
    for i = 0, (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(ALPHABET) - 1 do
          if (string.sub(ALPHABET, (i + 1), (i + 1)) == ch) then
            return i
          end
        end
        return (-1)
      end
      function generate_key(message, key)
        local key_new = key
        local i = 0
        while ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(key_new) < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(message)) do
                  key_new = (key_new .. string.sub(key, (i + 1), (i + 1)))
                  i = (i + 1)
                  if (i == (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(key)) then
                        i = 0
                      end
                    end
                    return key_new
                  end
                  function cipher_text(message, key_new)
                    local res = ""
                    local i = 0
                    for idx = 0, (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(message) - 1 do
                          local ch = string.sub(message, (idx + 1), (idx + 1))
                          if (ch == " ") then
                            res = (res .. " ")
                          else
                            local x = (((index_of(ch) - index_of(string.sub(key_new, (i + 1), (i + 1)))) + 26) % 26)
                            i = (i + 1)
                            res = (res .. string.sub(ALPHABET, (x + 1), (x + 1)))
                          end
                        end
                        return res
                      end
                      function original_text(cipher, key_new)
                        local res = ""
                        local i = 0
                        for idx = 0, (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(cipher) - 1 do
                              local ch = string.sub(cipher, (idx + 1), (idx + 1))
                              if (ch == " ") then
                                res = (res .. " ")
                              else
                                local x = (((index_of(ch) + index_of(string.sub(key_new, (i + 1), (i + 1)))) + 26) % 26)
                                i = (i + 1)
                                res = (res .. string.sub(ALPHABET, (x + 1), (x + 1)))
                              end
                            end
                            return res
                          end
                          ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                          message = "THE GERMAN ATTACK"
                          key = "SECRET"
                          key_new = generate_key(message, key)
                          encrypted = cipher_text(message, key_new)
                          print((((type(("Encrypted Text = " .. encrypted)) == "table")) and (
                          (function(v)
                          local function encode(x)
                          if type(x) == "table" then
                            if x.__name and x.__order then
                              local parts = {x.__name, " {"}
                              for i, k in ipairs(x.__order) do
                                if i > 1 then parts[#parts+1] = ", " end
                                parts[#parts+1] = k .. " = " .. encode(x[k])
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            elseif #x > 0 then
                                local allTables = true
                                for _, v in ipairs(x) do
                                  if type(v) ~= "table" then allTables = false break end
                                end
                                local parts = {}
                                if not allTables then parts[#parts+1] = "[" end
                                for i, val in ipairs(x) do
                                  parts[#parts+1] = encode(val)
                                  if i < #x then parts[#parts+1] = " " end
                                end
                                if not allTables then parts[#parts+1] = "]" end
                                return table.concat(parts)
                              else
                                local keys = {}
                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                local parts = {"{"}
                                for i, k in ipairs(keys) do
                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                  if i < #keys then parts[#parts+1] = ", " end
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(("Encrypted Text = " .. encrypted))) or (("Encrypted Text = " .. encrypted))))
                          print((((type(("Original Text = " .. original_text(encrypted, key_new))) == "table")) and (
                          (function(v)
                          local function encode(x)
                          if type(x) == "table" then
                            if x.__name and x.__order then
                              local parts = {x.__name, " {"}
                              for i, k in ipairs(x.__order) do
                                if i > 1 then parts[#parts+1] = ", " end
                                parts[#parts+1] = k .. " = " .. encode(x[k])
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            elseif #x > 0 then
                                local allTables = true
                                for _, v in ipairs(x) do
                                  if type(v) ~= "table" then allTables = false break end
                                end
                                local parts = {}
                                if not allTables then parts[#parts+1] = "[" end
                                for i, val in ipairs(x) do
                                  parts[#parts+1] = encode(val)
                                  if i < #x then parts[#parts+1] = " " end
                                end
                                if not allTables then parts[#parts+1] = "]" end
                                return table.concat(parts)
                              else
                                local keys = {}
                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                local parts = {"{"}
                                for i, k in ipairs(keys) do
                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                  if i < #keys then parts[#parts+1] = ", " end
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(("Original Text = " .. original_text(encrypted, key_new)))) or (("Original Text = " .. original_text(encrypted, key_new)))))
                          local _bench_end = os.clock()
                          collectgarbage()
                          local _bench_end_mem = collectgarbage('count') * 1024
                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                        end;
