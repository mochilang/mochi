-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function contains(xs, x)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (xs[i + 1] == x) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function index_of(xs, x)
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs)) do
              if (xs[i + 1] == x) then
                return i
              end
              i = (i + 1)
            end
            return (-1)
          end
          function prepare_input(dirty)
            local letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            local upper_dirty = string.upper(dirty)
            local filtered = ""
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(upper_dirty)) do
                  local c = _substring(upper_dirty, i, (i + 1))
                  if (string.find(letters, c, 1, true) ~= nil) then
                    filtered = (filtered .. c)
                  end
                  i = (i + 1)
                end
                if ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(filtered) < 2) then
                      return filtered
                    end
                    local clean = ""
                    i = 0
                    while (i < ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(filtered) - 1)) do
                          local c1 = _substring(filtered, i, (i + 1))
                          local c2 = _substring(filtered, (i + 1), (i + 2))
                          clean = (clean .. c1)
                          if (c1 == c2) then
                            clean = (clean .. "X")
                          end
                          i = (i + 1)
                        end
                        clean = (clean .. _substring(filtered, ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(filtered) - 1), (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(filtered)))
                                if (((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(clean) % 2) == 1) then
                                      clean = (clean .. "X")
                                    end
                                    return clean
                                  end
                                  function generate_table(key)
                                    local alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
                                    local _table = {}
                                    local upper_key = string.upper(key)
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(upper_key)) do
                                          local c = _substring(upper_key, i, (i + 1))
                                          if (string.find(alphabet, c, 1, true) ~= nil) then
                                            if (not (function(lst, v)
                                            for _, x in ipairs(lst) do
                                              if x == v then
                                                return true
                                              end
                                            end
                                            return false
                                          end)(_table, c)) then
                                            _table = (function(lst, item)
                                            local res = {table.unpack(lst or {})}
                                            table.insert(res, item)
                                            return res
                                          end)(_table, c)
                                        end
                                      end
                                      i = (i + 1)
                                    end
                                    i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(alphabet)) do
                                          local c = _substring(alphabet, i, (i + 1))
                                          if (not (function(lst, v)
                                          for _, x in ipairs(lst) do
                                            if x == v then
                                              return true
                                            end
                                          end
                                          return false
                                        end)(_table, c)) then
                                          _table = (function(lst, item)
                                          local res = {table.unpack(lst or {})}
                                          table.insert(res, item)
                                          return res
                                        end)(_table, c)
                                      end
                                      i = (i + 1)
                                    end
                                    return _table
                                  end
                                  function encode(plaintext, key)
                                    local _table = generate_table(key)
                                    local text = prepare_input(plaintext)
                                    local cipher = ""
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(text)) do
                                          local c1 = _substring(text, i, (i + 1))
                                          local c2 = _substring(text, (i + 1), (i + 2))
                                          local idx1 = index_of(_table, c1)
                                          local idx2 = index_of(_table, c2)
                                          local row1 = (idx1 // 5)
                                          local col1 = (idx1 % 5)
                                          local row2 = (idx2 // 5)
                                          local col2 = (idx2 % 5)
                                          if (row1 == row2) then
                                            cipher = (cipher .. _table[((row1 * 5) + ((col1 + 1) % 5)) + 1])
                                            cipher = (cipher .. _table[((row2 * 5) + ((col2 + 1) % 5)) + 1])
                                          else
                                            if (col1 == col2) then
                                              cipher = (cipher .. _table[((((row1 + 1) % 5) * 5) + col1) + 1])
                                              cipher = (cipher .. _table[((((row2 + 1) % 5) * 5) + col2) + 1])
                                            else
                                              cipher = (cipher .. _table[((row1 * 5) + col2) + 1])
                                              cipher = (cipher .. _table[((row2 * 5) + col1) + 1])
                                            end
                                          end
                                          i = (i + 2)
                                        end
                                        return cipher
                                      end
                                      function decode(cipher, key)
                                        local _table = generate_table(key)
                                        local plain = ""
                                        local i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(cipher)) do
                                              local c1 = _substring(cipher, i, (i + 1))
                                              local c2 = _substring(cipher, (i + 1), (i + 2))
                                              local idx1 = index_of(_table, c1)
                                              local idx2 = index_of(_table, c2)
                                              local row1 = (idx1 // 5)
                                              local col1 = (idx1 % 5)
                                              local row2 = (idx2 // 5)
                                              local col2 = (idx2 % 5)
                                              if (row1 == row2) then
                                                plain = (plain .. _table[((row1 * 5) + ((col1 + 4) % 5)) + 1])
                                                plain = (plain .. _table[((row2 * 5) + ((col2 + 4) % 5)) + 1])
                                              else
                                                if (col1 == col2) then
                                                  plain = (plain .. _table[((((row1 + 4) % 5) * 5) + col1) + 1])
                                                  plain = (plain .. _table[((((row2 + 4) % 5) * 5) + col2) + 1])
                                                else
                                                  plain = (plain .. _table[((row1 * 5) + col2) + 1])
                                                  plain = (plain .. _table[((row2 * 5) + col1) + 1])
                                                end
                                              end
                                              i = (i + 2)
                                            end
                                            return plain
                                          end
                                          function main()
                                            print((string.gsub(string.format("Encoded: %s", (((type(encode("BYE AND THANKS", "GREETING")) == "table")) and (
                                            (function(v)
                                            local function encode(x)
                                            if type(x) == "table" then
                                              if x.__name and x.__order then
                                                local parts = {x.__name, " {"}
                                                for i, k in ipairs(x.__order) do
                                                  if i > 1 then parts[#parts+1] = ", " end
                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              elseif #x > 0 then
                                                  local allTables = true
                                                  for _, v in ipairs(x) do
                                                    if type(v) ~= "table" then allTables = false break end
                                                  end
                                                  local parts = {}
                                                  if not allTables then parts[#parts+1] = "[" end
                                                  for i, val in ipairs(x) do
                                                    parts[#parts+1] = encode(val)
                                                    if i < #x then parts[#parts+1] = " " end
                                                  end
                                                  if not allTables then parts[#parts+1] = "]" end
                                                  return table.concat(parts)
                                                else
                                                  local keys = {}
                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                  local parts = {"{"}
                                                  for i, k in ipairs(keys) do
                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                    if i < #keys then parts[#parts+1] = ", " end
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                end
                                              elseif type(x) == "string" then
                                                  return '"' .. x .. '"'
                                                else
                                                  return tostring(x)
                                                end
                                              end
                                              return encode(v)
                                            end)(encode("BYE AND THANKS", "GREETING"))) or (encode("BYE AND THANKS", "GREETING")))), "%s+$", "")))
                                            print((string.gsub(string.format("Decoded: %s", (((type(decode("CXRBANRLBALQ", "GREETING")) == "table")) and (
                                            (function(v)
                                            local function encode(x)
                                            if type(x) == "table" then
                                              if x.__name and x.__order then
                                                local parts = {x.__name, " {"}
                                                for i, k in ipairs(x.__order) do
                                                  if i > 1 then parts[#parts+1] = ", " end
                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              elseif #x > 0 then
                                                  local allTables = true
                                                  for _, v in ipairs(x) do
                                                    if type(v) ~= "table" then allTables = false break end
                                                  end
                                                  local parts = {}
                                                  if not allTables then parts[#parts+1] = "[" end
                                                  for i, val in ipairs(x) do
                                                    parts[#parts+1] = encode(val)
                                                    if i < #x then parts[#parts+1] = " " end
                                                  end
                                                  if not allTables then parts[#parts+1] = "]" end
                                                  return table.concat(parts)
                                                else
                                                  local keys = {}
                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                  local parts = {"{"}
                                                  for i, k in ipairs(keys) do
                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                    if i < #keys then parts[#parts+1] = ", " end
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                end
                                              elseif type(x) == "string" then
                                                  return '"' .. x .. '"'
                                                else
                                                  return tostring(x)
                                                end
                                              end
                                              return encode(v)
                                            end)(decode("CXRBANRLBALQ", "GREETING"))) or (decode("CXRBANRLBALQ", "GREETING")))), "%s+$", "")))
                                          end
                                          main()
                                          local _bench_end = os.clock()
                                          collectgarbage()
                                          local _bench_end_mem = collectgarbage('count') * 1024
                                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                        end;
