-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function ord(ch)
    local digits = "0123456789"
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(digits)) do
          if (_substring(digits, i, (i + 1)) == ch) then
            return (48 + i)
          end
          i = (i + 1)
        end
        local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(upper)) do
              if (_substring(upper, i, (i + 1)) == ch) then
                return (65 + i)
              end
              i = (i + 1)
            end
            local lower = "abcdefghijklmnopqrstuvwxyz"
            i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(lower)) do
                  if (_substring(lower, i, (i + 1)) == ch) then
                    return (97 + i)
                  end
                  i = (i + 1)
                end
                return 0
              end
              function neg_pos(iterlist)
                local i = 1
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(iterlist)) do
                      iterlist[i + 1] = (-iterlist[i + 1])
                      i = (i + 2)
                    end
                    return iterlist
                  end
                  function passcode_creator()
                    local choices = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
                    local seed = _now()
                    local length = (10 + (seed % 11))
                    local password = {}
                    local i = 0
                    while (i < length) do
                      seed = (((seed * 1103515245) + 12345) % 2147483647)
                      local idx = (seed % (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(choices))
                          password = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(password, _substring(choices, idx, (idx + 1)))
                        i = (i + 1)
                      end
                      return password
                    end
                    function unique_sorted(chars)
                      local uniq = {}
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(chars)) do
                            local ch = chars[i + 1]
                            if (not (function(lst,v) for _,x in ipairs(lst) do if x==v then return true end end return false end)(uniq, ch)) then
                              uniq = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(uniq, ch)
                          end
                          i = (i + 1)
                        end
                        local j = 0
                        while (j < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(uniq)) do
                              local k = (j + 1)
                              local min_idx = j
                              while (k < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(uniq)) do
                                    if (uniq[k + 1] < uniq[min_idx + 1]) then
                                      min_idx = k
                                    end
                                    k = (k + 1)
                                  end
                                  if (min_idx ~= j) then
                                    local tmp = uniq[j + 1]
                                    uniq[j + 1] = uniq[min_idx + 1]
                                    uniq[min_idx + 1] = tmp
                                  end
                                  j = (j + 1)
                                end
                                return uniq
                              end
                              function make_key_list(passcode)
                                local key_list_options = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n"
                                local breakpoints = unique_sorted(passcode)
                                local keys_l = {}
                                local temp_list = {}
                                local i = 0
                                while (i < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(key_list_options)) do
                                      local ch = _substring(key_list_options, i, (i + 1))
                                      temp_list = (function(lst, item)
                                      local res = {table.unpack(lst or {})}
                                      table.insert(res, item)
                                      return res
                                    end)(temp_list, ch)
                                    if ((function(lst,v) for _,x in ipairs(lst) do if x==v then return true end end return false end)(breakpoints, ch) or (i == ((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(key_list_options) - 1))) then
                                          local k = ((function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(temp_list) - 1)
                                              while (k >= 0) do
                                                keys_l = (function(lst, item)
                                                local res = {table.unpack(lst or {})}
                                                table.insert(res, item)
                                                return res
                                              end)(keys_l, temp_list[k + 1])
                                              k = (k - 1)
                                            end
                                            temp_list = {}
                                          end
                                          i = (i + 1)
                                        end
                                        return keys_l
                                      end
                                      function make_shift_key(passcode)
                                        local codes = {}
                                        local i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(passcode)) do
                                              codes = (function(lst, item)
                                              local res = {table.unpack(lst or {})}
                                              table.insert(res, item)
                                              return res
                                            end)(codes, ord(passcode[i + 1]))
                                            i = (i + 1)
                                          end
                                          codes = neg_pos(codes)
                                          local total = 0
                                          i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(codes)) do
                                                total = (total + codes[i + 1])
                                                i = (i + 1)
                                              end
                                              if (total > 0) then
                                                return total
                                              end
                                              return (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(passcode)
                                                end
                                                function new_cipher(passcode_str)
                                                  local passcode = {}
                                                  if ((function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(passcode_str) == 0) then
                                                        passcode = passcode_creator()
                                                      else
                                                        local i = 0
                                                        while (i < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(passcode_str)) do
                                                              passcode = (function(lst, item)
                                                              local res = {table.unpack(lst or {})}
                                                              table.insert(res, item)
                                                              return res
                                                            end)(passcode, _substring(passcode_str, i, (i + 1)))
                                                            i = (i + 1)
                                                          end
                                                        end
                                                        local key_list = make_key_list(passcode)
                                                        local shift_key = make_shift_key(passcode)
                                                        return {passcode = passcode, key_list = key_list, shift_key = shift_key}
                                                      end
                                                      function index_of(lst, ch)
                                                        local i = 0
                                                        while (i < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(lst)) do
                                                              if (lst[i + 1] == ch) then
                                                                return i
                                                              end
                                                              i = (i + 1)
                                                            end
                                                            return (-1)
                                                          end
                                                          function encrypt(c, plaintext)
                                                            local encoded = ""
                                                            local i = 0
                                                            local n = (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(c.key_list)
                                                                while (i < (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(plaintext)) do
                                                                      local ch = _substring(plaintext, i, (i + 1))
                                                                      local position = index_of(c.key_list, ch)
                                                                      local new_pos = ((position + c.shift_key) % n)
                                                                      encoded = (encoded .. tostring(c.key_list[new_pos + 1]))
                                                                      i = (i + 1)
                                                                    end
                                                                    return encoded
                                                                  end
                                                                  function decrypt(c, encoded_message)
                                                                    local decoded = ""
                                                                    local i = 0
                                                                    local n = (function(v)
                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                      return #v.items
                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                        local c = 0
                                                                        for _ in pairs(v) do c = c + 1 end
                                                                        return c
                                                                      elseif type(v) == 'string' then
                                                                          local l = utf8.len(v)
                                                                          if l then return l end
                                                                          return #v
                                                                        elseif type(v) == 'table' then
                                                                            return #v
                                                                          else
                                                                            return 0
                                                                          end
                                                                        end)(c.key_list)
                                                                        while (i < (function(v)
                                                                        if type(v) == 'table' and v.items ~= nil then
                                                                          return #v.items
                                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                                            local c = 0
                                                                            for _ in pairs(v) do c = c + 1 end
                                                                            return c
                                                                          elseif type(v) == 'string' then
                                                                              local l = utf8.len(v)
                                                                              if l then return l end
                                                                              return #v
                                                                            elseif type(v) == 'table' then
                                                                                return #v
                                                                              else
                                                                                return 0
                                                                              end
                                                                            end)(encoded_message)) do
                                                                              local ch = _substring(encoded_message, i, (i + 1))
                                                                              local position = index_of(c.key_list, ch)
                                                                              local new_pos = ((position - c.shift_key) % n)
                                                                              if (new_pos < 0) then
                                                                                new_pos = (new_pos + n)
                                                                              end
                                                                              decoded = (decoded .. tostring(c.key_list[new_pos + 1]))
                                                                              i = (i + 1)
                                                                            end
                                                                            return decoded
                                                                          end
                                                                          function test_end_to_end()
                                                                            local msg = "Hello, this is a modified Caesar cipher"
                                                                            local cip = new_cipher("")
                                                                            return decrypt(cip, encrypt(cip, msg))
                                                                          end
                                                                          ssc = new_cipher("4PYIXyqeQZr44")
                                                                          encoded = encrypt(ssc, "Hello, this is a modified Caesar cipher")
                                                                          print((((type(encoded) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)(encoded)) or (encoded)))
                                                                          print((((type(decrypt(ssc, encoded)) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)(decrypt(ssc, encoded))) or (decrypt(ssc, encoded))))
                                                                          local _bench_end = os.clock()
                                                                          collectgarbage()
                                                                          local _bench_end_mem = collectgarbage('count') * 1024
                                                                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                        end;
