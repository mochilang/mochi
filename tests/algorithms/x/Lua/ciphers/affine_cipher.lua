-- Generated by Mochi v0.10.61 on 2025-08-08 19:19 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function gcd(a, b)
    local x = a
    local y = b
    while (y ~= 0) do
      local temp = (x % y)
      x = y
      y = temp
    end
    return x
  end
  function mod_inverse(a, m)
    if (gcd(a, m) ~= 1) then
      _panic((((("mod inverse of " .. _str(a)) .. " and ") .. _str(m)) .. " does not exist"))
    end
    local u1 = 1
    local u2 = 0
    local u3 = a
    local v1 = 0
    local v2 = 1
    local v3 = m
    while (v3 ~= 0) do
      local q = (u3 // v3)
      local t1 = (u1 - (q * v1))
      local t2 = (u2 - (q * v2))
      local t3 = (u3 - (q * v3))
      u1 = v1
      u2 = v2
      u3 = v3
      v1 = t1
      v2 = t2
      v3 = t3
    end
    local res = (u1 % m)
    if (res < 0) then
      return (res + m)
    end
    return res
  end
  function find_symbol(ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(SYMBOLS)) do
          if (string.sub(SYMBOLS, (i + 1), (i + 1)) == ch) then
            return i
          end
          i = (i + 1)
        end
        return (-1)
      end
      function check_keys(key_a, key_b, mode)
        local m = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(SYMBOLS)
            if (mode == "encrypt") then
              if (key_a == 1) then
                _panic("The affine cipher becomes weak when key A is set to 1. Choose different key")
              end
              if (key_b == 0) then
                _panic("The affine cipher becomes weak when key B is set to 0. Choose different key")
              end
            end
            if (((key_a < 0) or (key_b < 0)) or (key_b > (m - 1))) then
              _panic(("Key A must be greater than 0 and key B must be between 0 and " .. _str((m - 1))))
            end
            if (gcd(key_a, m) ~= 1) then
              _panic((((("Key A " .. _str(key_a)) .. " and the symbol set size ") .. _str(m)) .. " are not relatively prime. Choose a different key."))
            end
          end
          function encrypt_message(key, message)
            local m = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(SYMBOLS)
                local key_a = (key // m)
                local key_b = (key % m)
                check_keys(key_a, key_b, "encrypt")
                local cipher_text = ""
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(message)) do
                      local ch = string.sub(message, (i + 1), (i + 1))
                      local index = find_symbol(ch)
                      if (index >= 0) then
                        cipher_text = (cipher_text .. string.sub(SYMBOLS, ((((index * key_a) + key_b) % m) + 1), ((((index * key_a) + key_b) % m) + 1)))
                      else
                        cipher_text = (cipher_text .. ch)
                      end
                      i = (i + 1)
                    end
                    return cipher_text
                  end
                  function decrypt_message(key, message)
                    local m = (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(SYMBOLS)
                        local key_a = (key // m)
                        local key_b = (key % m)
                        check_keys(key_a, key_b, "decrypt")
                        local inv = mod_inverse(key_a, m)
                        local plain_text = ""
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(message)) do
                              local ch = string.sub(message, (i + 1), (i + 1))
                              local index = find_symbol(ch)
                              if (index >= 0) then
                                local n = ((index - key_b) * inv)
                                local pos = (n % m)
                                local final = (((pos < 0)) and ((pos + m)) or (pos))
                                plain_text = (plain_text .. string.sub(SYMBOLS, (final + 1), (final + 1)))
                              else
                                plain_text = (plain_text .. ch)
                              end
                              i = (i + 1)
                            end
                            return plain_text
                          end
                          function main()
                            local key = 4545
                            local msg = "The affine cipher is a type of monoalphabetic substitution cipher."
                            local enc = encrypt_message(key, msg)
                            print((((type(enc) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(enc)) or (enc)))
                            print((((type(decrypt_message(key, enc)) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(decrypt_message(key, enc))) or (decrypt_message(key, enc))))
                          end
                          SYMBOLS = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                          main()
                          local _bench_end = os.clock()
                          collectgarbage()
                          local _bench_end_mem = collectgarbage('count') * 1024
                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                        end;
