-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _indexOf(s, ch)
if type(s) == 'string' then
  for i = 1, #s do
    if string.sub(s, i, i) == ch then
      return i - 1
    end
  end
elseif type(s) == 'table' then
    for i, v in ipairs(s) do
      if v == ch then
        return i - 1
      end
    end
  end
  return -1
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function indexOf(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (string.sub(s, (i + 1), (i + 1)) == ch) then
            return i
          end
          i = (i + 1)
        end
        return (-1)
      end
      function ord(ch)
        local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local lower = "abcdefghijklmnopqrstuvwxyz"
        local idx = _indexOf(upper, ch)
        if (idx >= 0) then
          return (65 + idx)
        end
        idx = _indexOf(lower, ch)
        if (idx >= 0) then
          return (97 + idx)
        end
        return 0
      end
      function chr(n)
        local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local lower = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 65) and (n < 91)) then
          return string.sub(upper, ((n - 65) + 1), (n - 64))
        end
        if ((n >= 97) and (n < 123)) then
          return string.sub(lower, ((n - 97) + 1), (n - 96))
        end
        return "?"
      end
      function clean_text(s)
        local out = ""
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) do
              local ch = string.sub(s, (i + 1), (i + 1))
              if ((ch >= "A") and (ch <= "Z")) then
                out = (out .. ch)
              else
                if ((ch >= "a") and (ch <= "z")) then
                  out = (out .. chr((ord(ch) - 32)))
                end
              end
              i = (i + 1)
            end
            return out
          end
          function running_key_encrypt(key, plaintext)
            local pt = clean_text(plaintext)
            local k = clean_text(key)
            local key_len = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(k)
                local res = ""
                local ord_a = ord("A")
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(pt)) do
                      local p = (ord(string.sub(pt, (i + 1), (i + 1))) - ord_a)
                      local kv = (ord(string.sub(k, ((i % key_len) + 1), ((i % key_len) + 1))) - ord_a)
                      local c = ((p + kv) % 26)
                      res = (res .. chr((c + ord_a)))
                      i = (i + 1)
                    end
                    return res
                  end
                  function running_key_decrypt(key, ciphertext)
                    local ct = clean_text(ciphertext)
                    local k = clean_text(key)
                    local key_len = (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(k)
                        local res = ""
                        local ord_a = ord("A")
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(ct)) do
                              local c = (ord(string.sub(ct, (i + 1), (i + 1))) - ord_a)
                              local kv = (ord(string.sub(k, ((i % key_len) + 1), ((i % key_len) + 1))) - ord_a)
                              local p = (((c - kv) + 26) % 26)
                              res = (res .. chr((p + ord_a)))
                              i = (i + 1)
                            end
                            return res
                          end
                          key = "How does the duck know that? said Victor"
                          plaintext = "DEFEND THIS"
                          ciphertext = running_key_encrypt(key, plaintext)
                          print((((type(ciphertext) == "table")) and (
                          (function(v)
                          local function encode(x)
                          if type(x) == "table" then
                            if x.__name and x.__order then
                              local parts = {x.__name, " {"}
                              for i, k in ipairs(x.__order) do
                                if i > 1 then parts[#parts+1] = ", " end
                                parts[#parts+1] = k .. " = " .. encode(x[k])
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            elseif #x > 0 then
                                local allTables = true
                                for _, v in ipairs(x) do
                                  if type(v) ~= "table" then allTables = false break end
                                end
                                local parts = {}
                                if not allTables then parts[#parts+1] = "[" end
                                for i, val in ipairs(x) do
                                  parts[#parts+1] = encode(val)
                                  if i < #x then parts[#parts+1] = " " end
                                end
                                if not allTables then parts[#parts+1] = "]" end
                                return table.concat(parts)
                              else
                                local keys = {}
                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                local parts = {"{"}
                                for i, k in ipairs(keys) do
                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                  if i < #keys then parts[#parts+1] = ", " end
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(ciphertext)) or (ciphertext)))
                          print((((type(running_key_decrypt(key, ciphertext)) == "table")) and (
                          (function(v)
                          local function encode(x)
                          if type(x) == "table" then
                            if x.__name and x.__order then
                              local parts = {x.__name, " {"}
                              for i, k in ipairs(x.__order) do
                                if i > 1 then parts[#parts+1] = ", " end
                                parts[#parts+1] = k .. " = " .. encode(x[k])
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            elseif #x > 0 then
                                local allTables = true
                                for _, v in ipairs(x) do
                                  if type(v) ~= "table" then allTables = false break end
                                end
                                local parts = {}
                                if not allTables then parts[#parts+1] = "[" end
                                for i, val in ipairs(x) do
                                  parts[#parts+1] = encode(val)
                                  if i < #x then parts[#parts+1] = " " end
                                end
                                if not allTables then parts[#parts+1] = "]" end
                                return table.concat(parts)
                              else
                                local keys = {}
                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                local parts = {"{"}
                                for i, k in ipairs(keys) do
                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                  if i < #keys then parts[#parts+1] = ", " end
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(running_key_decrypt(key, ciphertext))) or (running_key_decrypt(key, ciphertext))))
                          local _bench_end = os.clock()
                          collectgarbage()
                          local _bench_end_mem = collectgarbage('count') * 1024
                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                        end;
