-- Generated by Mochi v0.10.67 on 2025-08-17 14:03 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _str(v)
    if type(v) == 'number' then
      local s = tostring(v)
      s = string.gsub(s, '%.0+$', '')
      return s
    elseif type(v) == 'table' then
        local parts = {}
        for i = 1, #v do
          parts[#parts+1] = _str(v[i])
        end
        return '[' .. table.concat(parts, ', ') .. ']'
      end
      return tostring(v)
    end
    do
      collectgarbage()
      local _bench_start_mem = collectgarbage('count') * 1024
      local _bench_start = os.clock()
      function breadth_first_search(graph, source, sink, parent)
        local visited = {}
        local i = 0
        while (i < _len(graph)) do
          visited = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(visited, false)
        i = (i + 1)
      end
      local queue = {}
      queue = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(queue, source)
    visited[source + 1] = true
    local head = 0
    while (head < _len(queue)) do
      local u = queue[head + 1]
      head = (head + 1)
      local row = graph[u + 1]
      local ind = 0
      while (ind < _len(row)) do
        local capacity = row[ind + 1]
        if ((visited[ind + 1] == false) and (capacity > 0)) then
          queue = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(queue, ind)
        visited[ind + 1] = true
        parent[ind + 1] = u
      end
      ind = (ind + 1)
    end
  end
  return visited[sink + 1]
end
function ford_fulkerson(graph, source, sink)
  local parent = {}
  local i = 0
  while (i < _len(graph)) do
    parent = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(parent, (-1))
  i = (i + 1)
end
local max_flow = 0
while breadth_first_search(graph, source, sink, parent) do
  local path_flow = INF
  local s = sink
  while (s ~= source) do
    local prev = parent[s + 1]
    local cap = graph[prev + 1][s + 1]
    if (cap < path_flow) then
      path_flow = cap
    end
    s = prev
  end
  max_flow = (max_flow + path_flow)
  local v = sink
  while (v ~= source) do
    local u = parent[v + 1]
    graph[u + 1][v + 1] = (graph[u + 1][v + 1] - path_flow)
    graph[v + 1][u + 1] = (graph[v + 1][u + 1] + path_flow)
    v = u
  end
  local j = 0
  while (j < _len(parent)) do
    parent[j + 1] = (-1)
    j = (j + 1)
  end
end
return max_flow
end
INF = 1000000000
graph = {{0, 16, 13, 0, 0, 0}, {0, 0, 10, 12, 0, 0}, {0, 4, 0, 0, 14, 0}, {0, 0, 9, 0, 0, 20}, {0, 0, 0, 7, 0, 4}, {0, 0, 0, 0, 0, 0}}
print((((type(_str(ford_fulkerson(graph, 0, 5))) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "number" then
      if math.type and math.type(x) == "integer" then
        return string.format("%d", x)
      else
        local s = string.format("%g", x)
        if not string.find(s, "[%.eE]") then
          s = s .. ".0"
        end
        return s
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(_str(ford_fulkerson(graph, 0, 5)))) or (_str(ford_fulkerson(graph, 0, 5)))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
