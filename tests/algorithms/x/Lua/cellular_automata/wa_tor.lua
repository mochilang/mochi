-- Generated by Mochi v0.10.59 on 2025-08-06 18:11 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rand()
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return seed
  end
  function rand_range(max)
    return (rand() % max)
  end
  function shuffle(list_int)
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(list_int) - 1)
        while (i > 0) do
          local j = rand_range((i + 1))
          local tmp = list_int[i + 1]
          list_int[i + 1] = list_int[j + 1]
          list_int[j + 1] = tmp
          i = (i - 1)
        end
        return list_int
      end
      function create_board()
        local board = {}
        local r = 0
        while (r < HEIGHT) do
          local row = {}
          local c = 0
          while (c < WIDTH) do
            row = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(row, 0)
          c = (c + 1)
        end
        board = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(board, row)
      r = (r + 1)
    end
    return board
  end
  function create_prey(r, c)
    return {TYPE_PREY, r, c, PREY_REPRODUCTION_TIME, 0, 1}
  end
  function create_predator(r, c)
    return {TYPE_PREDATOR, r, c, PREDATOR_REPRODUCTION_TIME, PREDATOR_INITIAL_ENERGY, 1}
  end
  function empty_cell(r, c)
    return (board[r + 1][c + 1] == 0)
  end
  function add_entity(typ)
    while true do
      local r = rand_range(HEIGHT)
      local c = rand_range(WIDTH)
      if empty_cell(r, c) then
        if (typ == TYPE_PREY) then
          board[r + 1][c + 1] = 1
          entities = (function(lst, item)
          local res = {table.unpack(lst)}
          table.insert(res, item)
          return res
        end)(entities, create_prey(r, c))
      else
        board[r + 1][c + 1] = 2
        entities = (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(entities, create_predator(r, c))
    end
    return
  end
end
end
function setup()
  local i = 0
  while (i < PREY_INITIAL_COUNT) do
    add_entity(TYPE_PREY)
    i = (i + 1)
  end
  i = 0
  while (i < PREDATOR_INITIAL_COUNT) do
    add_entity(TYPE_PREDATOR)
    i = (i + 1)
  end
end
function inside(r, c)
  return ((((r >= 0) and (r < HEIGHT)) and (c >= 0)) and (c < WIDTH))
end
function find_prey(r, c)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(entities)) do
        local e = entities[i + 1]
        if ((((e[5 + 1] == 1) and (e[0 + 1] == TYPE_PREY)) and (e[1 + 1] == r)) and (e[2 + 1] == c)) then
          return i
        end
        i = (i + 1)
      end
      return (-1)
    end
    function step_world()
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(entities)) do
            local e = entities[i + 1]
            if (e[5 + 1] == 0) then
              i = (i + 1)
              goto __cont_1
            end
            local typ = e[0 + 1]
            local row = e[1 + 1]
            local col = e[2 + 1]
            local repro = e[3 + 1]
            local energy = e[4 + 1]
            local dirs = {0, 1, 2, 3}
            dirs = shuffle(dirs)
            local moved = false
            local old_r = row
            local old_c = col
            if (typ == TYPE_PREDATOR) then
              local j = 0
              local ate = false
              while (j < 4) do
                local d = dirs[j + 1]
                local nr = (row + dr[d + 1])
                local nc = (col + dc[d + 1])
                if (inside(nr, nc) and (board[nr + 1][nc + 1] == 1)) then
                  local prey_index = find_prey(nr, nc)
                  if (prey_index >= 0) then
                    entities[prey_index + 1][5 + 1] = 0
                  end
                  board[nr + 1][nc + 1] = 2
                  board[row + 1][col + 1] = 0
                  e[1 + 1] = nr
                  e[2 + 1] = nc
                  e[4 + 1] = ((energy + PREDATOR_FOOD_VALUE) - 1)
                  moved = true
                  ate = true
                  break
                end
                j = (j + 1)
              end
              if (not ate) then
                j = 0
                while (j < 4) do
                  local d = dirs[j + 1]
                  local nr = (row + dr[d + 1])
                  local nc = (col + dc[d + 1])
                  if (inside(nr, nc) and (board[nr + 1][nc + 1] == 0)) then
                    board[nr + 1][nc + 1] = 2
                    board[row + 1][col + 1] = 0
                    e[1 + 1] = nr
                    e[2 + 1] = nc
                    moved = true
                    break
                  end
                  j = (j + 1)
                end
                e[4 + 1] = (energy - 1)
              end
              if (e[4 + 1] <= 0) then
                e[5 + 1] = 0
                board[e[1 + 1] + 1][e[2 + 1] + 1] = 0
              end
            else
              local j = 0
              while (j < 4) do
                local d = dirs[j + 1]
                local nr = (row + dr[d + 1])
                local nc = (col + dc[d + 1])
                if (inside(nr, nc) and (board[nr + 1][nc + 1] == 0)) then
                  board[nr + 1][nc + 1] = 1
                  board[row + 1][col + 1] = 0
                  e[1 + 1] = nr
                  e[2 + 1] = nc
                  moved = true
                  break
                end
                j = (j + 1)
              end
            end
            if (e[5 + 1] == 1) then
              if (moved and (repro <= 0)) then
                if (typ == TYPE_PREY) then
                  board[old_r + 1][old_c + 1] = 1
                  entities = (function(lst, item)
                  local res = {table.unpack(lst)}
                  table.insert(res, item)
                  return res
                end)(entities, create_prey(old_r, old_c))
                e[3 + 1] = PREY_REPRODUCTION_TIME
              else
                board[old_r + 1][old_c + 1] = 2
                entities = (function(lst, item)
                local res = {table.unpack(lst)}
                table.insert(res, item)
                return res
              end)(entities, create_predator(old_r, old_c))
              e[3 + 1] = PREDATOR_REPRODUCTION_TIME
            end
          else
            e[3 + 1] = (repro - 1)
          end
        end
        i = (i + 1)
        ::__cont_1::
      end
      local alive = {}
      local k = 0
      while (k < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(entities)) do
            local e2 = entities[k + 1]
            if (e2[5 + 1] == 1) then
              alive = (function(lst, item)
              local res = {table.unpack(lst)}
              table.insert(res, item)
              return res
            end)(alive, e2)
          end
          k = (k + 1)
        end
        entities = alive
      end
      function count_entities(typ)
        local cnt = 0
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(entities)) do
              if ((entities[i + 1][0 + 1] == typ) and (entities[i + 1][5 + 1] == 1)) then
                cnt = (cnt + 1)
              end
              i = (i + 1)
            end
            return cnt
          end
          WIDTH = 10
          HEIGHT = 10
          PREY_INITIAL_COUNT = 20
          PREY_REPRODUCTION_TIME = 5
          PREDATOR_INITIAL_COUNT = 5
          PREDATOR_REPRODUCTION_TIME = 20
          PREDATOR_INITIAL_ENERGY = 15
          PREDATOR_FOOD_VALUE = 5
          TYPE_PREY = 0
          TYPE_PREDATOR = 1
          seed = 123456789
          board = create_board()
          entities = {}
          dr = {(-1), 0, 1, 0}
          dc = {0, 1, 0, (-1)}
          setup()
          t = 0
          while (t < 10) do
            step_world()
            t = (t + 1)
          end
          print((((type(("Prey: " .. tostring(count_entities(TYPE_PREY)))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(("Prey: " .. tostring(count_entities(TYPE_PREY))))) or (("Prey: " .. tostring(count_entities(TYPE_PREY))))))
          print((((type(("Predators: " .. tostring(count_entities(TYPE_PREDATOR)))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(("Predators: " .. tostring(count_entities(TYPE_PREDATOR))))) or (("Predators: " .. tostring(count_entities(TYPE_PREDATOR))))))
          local _bench_end = os.clock()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
