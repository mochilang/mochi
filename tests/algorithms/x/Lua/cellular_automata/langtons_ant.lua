-- Generated by Mochi v0.10.61 on 2025-08-08 19:19 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function create_board(width, height)
    local board = {}
    local i = 0
    while (i < height) do
      local row = {}
      local j = 0
      while (j < width) do
        row = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(row, true)
      j = (j + 1)
    end
    board = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(board, row)
  i = (i + 1)
end
return board
end
function move_ant(board, x, y, direction)
  if board[x + 1][y + 1] then
    direction = ((direction + 1) % 4)
  else
    direction = ((direction + 3) % 4)
  end
  local old_x = x
  local old_y = y
  if (direction == 0) then
    x = (x - 1)
  else
    if (direction == 1) then
      y = (y + 1)
    else
      if (direction == 2) then
        x = (x + 1)
      else
        y = (y - 1)
      end
    end
  end
  board[old_x + 1][old_y + 1] = (not board[old_x + 1][old_y + 1])
  return {x, y, direction}
end
function langtons_ant(width, height, steps)
  local board = create_board(width, height)
  local x = (width // 2)
  local y = (height // 2)
  local dir = 3
  local s = 0
  while (s < steps) do
    local state = move_ant(board, x, y, dir)
    x = state[0 + 1]
    y = state[1 + 1]
    dir = state[2 + 1]
    s = (s + 1)
  end
  return board
end
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
