-- Generated by Mochi v0.10.65 on 2025-08-14 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
local len = #lst
if s < 0 then s = len + s end
if s < 0 then s = 0 end
if e == nil then
  e = len
elseif e < 0 then
    e = len + e
  end
  if e > len then e = len end
  if s > e then return {} end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function index_of(s, ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if (string.sub(s, (i + 1), (i + 1)) == ch) then
            return i
          end
          i = (i + 1)
        end
        return (-1)
      end
      function ord(ch)
        local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local lower = "abcdefghijklmnopqrstuvwxyz"
        local idx = index_of(upper, ch)
        if (idx >= 0) then
          return (65 + idx)
        end
        idx = index_of(lower, ch)
        if (idx >= 0) then
          return (97 + idx)
        end
        return 0
      end
      function chr(n)
        local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local lower = "abcdefghijklmnopqrstuvwxyz"
        if ((n >= 65) and (n < 91)) then
          return string.sub(upper, ((n - 65) + 1), (n - 64))
        end
        if ((n >= 97) and (n < 123)) then
          return string.sub(lower, ((n - 97) + 1), (n - 96))
        end
        return "?"
      end
      function text_to_bits(text)
        local bits = ""
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(text)) do
              local code = ord(string.sub(text, (i + 1), (i + 1)))
              local j = 7
              while (j >= 0) do
                local p = pow2(j)
                if (((code // p) % 2) == 1) then
                  bits = (bits .. "1")
                else
                  bits = (bits .. "0")
                end
                j = (j - 1)
              end
              i = (i + 1)
            end
            return bits
          end
          function text_from_bits(bits)
            local text = ""
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(bits)) do
                  local code = 0
                  local j = 0
                  while ((j < 8) and ((i + j) < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(bits))) do
                        code = (code * 2)
                        if (string.sub(bits, ((i + j) + 1), ((i + j) + 1)) == "1") then
                          code = (code + 1)
                        end
                        j = (j + 1)
                      end
                      text = (text .. chr(code))
                      i = (i + 8)
                    end
                    return text
                  end
                  function bool_to_string(b)
                    if b then
                      return "True"
                    end
                    return "False"
                  end
                  function string_to_bitlist(s)
                    local res = {}
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(s)) do
                          if (string.sub(s, (i + 1), (i + 1)) == "1") then
                            res = (function(lst, item)
                            lst = lst or {}
                            table.insert(lst, item)
                            return lst
                          end)(res, 1)
                        else
                          res = (function(lst, item)
                          lst = lst or {}
                          table.insert(lst, item)
                          return lst
                        end)(res, 0)
                      end
                      i = (i + 1)
                    end
                    return res
                  end
                  function bitlist_to_string(bits)
                    local s = ""
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(bits)) do
                          if (bits[i + 1] == 1) then
                            s = (s .. "1")
                          else
                            s = (s .. "0")
                          end
                          i = (i + 1)
                        end
                        return s
                      end
                      function is_power_of_two(x)
                        if (x < 1) then
                          return false
                        end
                        local p = 1
                        while (p < x) do
                          p = (p * 2)
                        end
                        return (p == x)
                      end
                      function list_eq(a, b)
                        if ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(a) ~= (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(b)) then
                                  return false
                                end
                                local i = 0
                                while (i < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(a)) do
                                      if (a[i + 1] ~= b[i + 1]) then
                                        return false
                                      end
                                      i = (i + 1)
                                    end
                                    return true
                                  end
                                  function pow2(e)
                                    local res = 1
                                    local i = 0
                                    while (i < e) do
                                      res = (res * 2)
                                      i = (i + 1)
                                    end
                                    return res
                                  end
                                  function has_bit(n, b)
                                    local p = pow2(b)
                                    if (((n // p) % 2) == 1) then
                                      return true
                                    end
                                    return false
                                  end
                                  function hamming_encode(r, data_bits)
                                    local total = (r + (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(data_bits))
                                        local data_ord = {}
                                        local cont_data = 0
                                        local x = 1
                                        while (x <= total) do
                                          if is_power_of_two(x) then
                                            data_ord = (function(lst, item)
                                            lst = lst or {}
                                            table.insert(lst, item)
                                            return lst
                                          end)(data_ord, (-1))
                                        else
                                          data_ord = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(data_ord, data_bits[cont_data + 1])
                                        cont_data = (cont_data + 1)
                                      end
                                      x = (x + 1)
                                    end
                                    local parity = {}
                                    local bp = 0
                                    while (bp < r) do
                                      local cont_bo = 0
                                      local j = 0
                                      while (j < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(data_ord)) do
                                            local bit = data_ord[j + 1]
                                            if (bit >= 0) then
                                              local pos = (j + 1)
                                              if (has_bit(pos, bp) and (bit == 1)) then
                                                cont_bo = (cont_bo + 1)
                                              end
                                            end
                                            j = (j + 1)
                                          end
                                          parity = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(parity, (cont_bo % 2))
                                        bp = (bp + 1)
                                      end
                                      local result = {}
                                      local cont_bp = 0
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(data_ord)) do
                                            if (data_ord[i + 1] < 0) then
                                              result = (function(lst, item)
                                              lst = lst or {}
                                              table.insert(lst, item)
                                              return lst
                                            end)(result, parity[cont_bp + 1])
                                            cont_bp = (cont_bp + 1)
                                          else
                                            result = (function(lst, item)
                                            lst = lst or {}
                                            table.insert(lst, item)
                                            return lst
                                          end)(result, data_ord[i + 1])
                                        end
                                        i = (i + 1)
                                      end
                                      return result
                                    end
                                    function hamming_decode(r, code)
                                      local data_output = {}
                                      local parity_received = {}
                                      local i = 1
                                      local idx = 0
                                      while (i <= (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(code)) do
                                            if is_power_of_two(i) then
                                              parity_received = (function(lst, item)
                                              lst = lst or {}
                                              table.insert(lst, item)
                                              return lst
                                            end)(parity_received, code[idx + 1])
                                          else
                                            data_output = (function(lst, item)
                                            lst = lst or {}
                                            table.insert(lst, item)
                                            return lst
                                          end)(data_output, code[idx + 1])
                                        end
                                        idx = (idx + 1)
                                        i = (i + 1)
                                      end
                                      local recomputed = hamming_encode(r, data_output)
                                      local parity_calc = {}
                                      local j = 0
                                      while (j < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(recomputed)) do
                                            if is_power_of_two((j + 1)) then
                                              parity_calc = (function(lst, item)
                                              lst = lst or {}
                                              table.insert(lst, item)
                                              return lst
                                            end)(parity_calc, recomputed[j + 1])
                                          end
                                          j = (j + 1)
                                        end
                                        local ack = list_eq(parity_received, parity_calc)
                                        return {data = data_output, ack = ack}
                                      end
                                      function main()
                                        local sizePari = 4
                                        local be = 2
                                        local text = "Message01"
                                        local binary = text_to_bits(text)
                                        print((((type((("Text input in binary is '" .. binary) .. "'")) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)((("Text input in binary is '" .. binary) .. "'"))) or ((("Text input in binary is '" .. binary) .. "'"))))
                                        local data_bits = string_to_bitlist(binary)
                                        local encoded = hamming_encode(sizePari, data_bits)
                                        print((((type(("Data converted ----------> " .. bitlist_to_string(encoded))) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(("Data converted ----------> " .. bitlist_to_string(encoded)))) or (("Data converted ----------> " .. bitlist_to_string(encoded)))))
                                        local decoded = hamming_decode(sizePari, encoded)
                                        print((((type(((("Data receive ------------> " .. bitlist_to_string(decoded.data)) .. " -- Data integrity: ") .. bool_to_string(decoded.ack))) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(((("Data receive ------------> " .. bitlist_to_string(decoded.data)) .. " -- Data integrity: ") .. bool_to_string(decoded.ack)))) or (((("Data receive ------------> " .. bitlist_to_string(decoded.data)) .. " -- Data integrity: ") .. bool_to_string(decoded.ack)))))
                                        local corrupted = {}
                                        local i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(encoded)) do
                                              corrupted = (function(lst, item)
                                              lst = lst or {}
                                              table.insert(lst, item)
                                              return lst
                                            end)(corrupted, encoded[i + 1])
                                            i = (i + 1)
                                          end
                                          local pos = (be - 1)
                                          if (corrupted[pos + 1] == 0) then
                                            corrupted[pos + 1] = 1
                                          else
                                            corrupted[pos + 1] = 0
                                          end
                                          local decoded_err = hamming_decode(sizePari, corrupted)
                                          print((((type(((("Data receive (error) ----> " .. bitlist_to_string(decoded_err.data)) .. " -- Data integrity: ") .. bool_to_string(decoded_err.ack))) == "table")) and (
                                          (function(v)
                                          local function encode(x)
                                          if type(x) == "table" then
                                            if x.__name and x.__order then
                                              local parts = {x.__name, " {"}
                                              for i, k in ipairs(x.__order) do
                                                if i > 1 then parts[#parts+1] = ", " end
                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            elseif #x > 0 then
                                                local allTables = true
                                                for _, v in ipairs(x) do
                                                  if type(v) ~= "table" then allTables = false break end
                                                end
                                                local parts = {}
                                                if not allTables then parts[#parts+1] = "[" end
                                                for i, val in ipairs(x) do
                                                  parts[#parts+1] = encode(val)
                                                  if i < #x then parts[#parts+1] = " " end
                                                end
                                                if not allTables then parts[#parts+1] = "]" end
                                                return table.concat(parts)
                                              else
                                                local keys = {}
                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                local parts = {"{"}
                                                for i, k in ipairs(keys) do
                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                  if i < #keys then parts[#parts+1] = ", " end
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              end
                                            elseif type(x) == "string" then
                                                return '"' .. x .. '"'
                                              else
                                                return tostring(x)
                                              end
                                            end
                                            return encode(v)
                                          end)(((("Data receive (error) ----> " .. bitlist_to_string(decoded_err.data)) .. " -- Data integrity: ") .. bool_to_string(decoded_err.ack)))) or (((("Data receive (error) ----> " .. bitlist_to_string(decoded_err.data)) .. " -- Data integrity: ") .. bool_to_string(decoded_err.ack)))))
                                        end
                                        main()
                                        local _bench_end = os.clock()
                                        collectgarbage()
                                        local _bench_end_mem = collectgarbage('count') * 1024
                                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                      end;
