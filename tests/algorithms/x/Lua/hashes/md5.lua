-- Generated by Mochi v0.10.65 on 2025-08-14 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function slice(lst, s, e)
local len = #lst
if s < 0 then s = len + s end
if s < 0 then s = 0 end
if e == nil then
  e = len
elseif e < 0 then
    e = len + e
  end
  if e > len then e = len end
  if s > e then return {} end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function ord(ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(ASCII)) do
          if (string.sub(ASCII, (i + 1), (i + 1)) == ch) then
            return (32 + i)
          end
          i = (i + 1)
        end
        return 0
      end
      function to_little_endian(s)
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s) ~= 32) then
              _panic("Input must be of length 32")
            end
            return (((string.sub(s, (24 + 1), 32) .. string.sub(s, (16 + 1), 24)) .. string.sub(s, (8 + 1), 16)) .. string.sub(s, (0 + 1), 8))
          end
          function int_to_bits(n, width)
            local bits = ""
            local num = n
            while (num > 0) do
              bits = (_str((num % 2)) .. bits)
              num = (num // 2)
            end
            while ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(bits) < width) do
                  bits = ("0" .. bits)
                end
                if ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(bits) > width) then
                      bits = string.sub(bits, (((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(bits) - width) + 1), (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(bits))
                            end
                            return bits
                          end
                          function bits_to_int(bits)
                            local num = 0
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(bits)) do
                                  if (string.sub(bits, (i + 1), (i + 1)) == "1") then
                                    num = ((num * 2) + 1)
                                  else
                                    num = (num * 2)
                                  end
                                  i = (i + 1)
                                end
                                return num
                              end
                              function to_hex(n)
                                local digits = "0123456789abcdef"
                                if (n == 0) then
                                  return "0"
                                end
                                local num = n
                                local s = ""
                                while (num > 0) do
                                  local d = (num % 16)
                                  s = (string.sub(digits, (d + 1), (d + 1)) .. s)
                                  num = (num // 16)
                                end
                                return s
                              end
                              function reformat_hex(i)
                                if (i < 0) then
                                  _panic("Input must be non-negative")
                                end
                                local hex = to_hex(i)
                                while ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(hex) < 8) do
                                      hex = ("0" .. hex)
                                    end
                                    if ((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(hex) > 8) then
                                          hex = string.sub(hex, (((function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(hex) - 8) + 1), (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(hex))
                                                end
                                                local le = ""
                                                local j = ((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(hex) - 2)
                                                    while (j >= 0) do
                                                      le = (le .. string.sub(hex, (j + 1), (j + 2)))
                                                      j = (j - 2)
                                                    end
                                                    return le
                                                  end
                                                  function preprocess(message)
                                                    local bit_string = ""
                                                    local i = 0
                                                    while (i < (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(message)) do
                                                          local ch = string.sub(message, (i + 1), (i + 1))
                                                          bit_string = (bit_string .. int_to_bits(ord(ch), 8))
                                                          i = (i + 1)
                                                        end
                                                        local start_len = int_to_bits((function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(bit_string), 64)
                                                            bit_string = (bit_string .. "1")
                                                            while (((function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(bit_string) % 512) ~= 448) do
                                                                  bit_string = (bit_string .. "0")
                                                                end
                                                                bit_string = ((bit_string .. to_little_endian(string.sub(start_len, (32 + 1), 64))) .. to_little_endian(string.sub(start_len, (0 + 1), 32)))
                                                                return bit_string
                                                              end
                                                              function get_block_words(bit_string)
                                                                if (((function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(bit_string) % 512) ~= 0) then
                                                                      _panic("Input must have length that's a multiple of 512")
                                                                    end
                                                                    local blocks = {}
                                                                    local pos = 0
                                                                    while (pos < (function(v)
                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                      return #v.items
                                                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                        local c = 0
                                                                        for _ in pairs(v) do c = c + 1 end
                                                                        return c
                                                                      elseif type(v) == 'string' then
                                                                          local l = utf8.len(v)
                                                                          if l then return l end
                                                                          return #v
                                                                        elseif type(v) == 'table' then
                                                                            return #v
                                                                          else
                                                                            return 0
                                                                          end
                                                                        end)(bit_string)) do
                                                                          local block = {}
                                                                          local i = 0
                                                                          while (i < 512) do
                                                                            local part = string.sub(bit_string, ((pos + i) + 1), ((pos + i) + 32))
                                                                            local word = bits_to_int(to_little_endian(part))
                                                                            block = (function(lst, item)
                                                                            lst = lst or {}
                                                                            table.insert(lst, item)
                                                                            return lst
                                                                          end)(block, word)
                                                                          i = (i + 32)
                                                                        end
                                                                        blocks = (function(lst, item)
                                                                        lst = lst or {}
                                                                        table.insert(lst, item)
                                                                        return lst
                                                                      end)(blocks, block)
                                                                      pos = (pos + 512)
                                                                    end
                                                                    return blocks
                                                                  end
                                                                  function bit_and(a, b)
                                                                    local x = a
                                                                    local y = b
                                                                    local res = 0
                                                                    local bit = 1
                                                                    local i = 0
                                                                    while (i < 32) do
                                                                      if (((x % 2) == 1) and ((y % 2) == 1)) then
                                                                        res = (res + bit)
                                                                      end
                                                                      x = (x // 2)
                                                                      y = (y // 2)
                                                                      bit = (bit * 2)
                                                                      i = (i + 1)
                                                                    end
                                                                    return res
                                                                  end
                                                                  function bit_or(a, b)
                                                                    local x = a
                                                                    local y = b
                                                                    local res = 0
                                                                    local bit = 1
                                                                    local i = 0
                                                                    while (i < 32) do
                                                                      local abit = (x % 2)
                                                                      local bbit = (y % 2)
                                                                      if ((abit == 1) or (bbit == 1)) then
                                                                        res = (res + bit)
                                                                      end
                                                                      x = (x // 2)
                                                                      y = (y // 2)
                                                                      bit = (bit * 2)
                                                                      i = (i + 1)
                                                                    end
                                                                    return res
                                                                  end
                                                                  function bit_xor(a, b)
                                                                    local x = a
                                                                    local y = b
                                                                    local res = 0
                                                                    local bit = 1
                                                                    local i = 0
                                                                    while (i < 32) do
                                                                      local abit = (x % 2)
                                                                      local bbit = (y % 2)
                                                                      if (((abit + bbit) % 2) == 1) then
                                                                        res = (res + bit)
                                                                      end
                                                                      x = (x // 2)
                                                                      y = (y // 2)
                                                                      bit = (bit * 2)
                                                                      i = (i + 1)
                                                                    end
                                                                    return res
                                                                  end
                                                                  function not_32(i)
                                                                    if (i < 0) then
                                                                      _panic("Input must be non-negative")
                                                                    end
                                                                    return (4294967295 - i)
                                                                  end
                                                                  function sum_32(a, b)
                                                                    return ((a + b) % MOD)
                                                                  end
                                                                  function lshift(num, k)
                                                                    local result = (num % MOD)
                                                                    local i = 0
                                                                    while (i < k) do
                                                                      result = ((result * 2) % MOD)
                                                                      i = (i + 1)
                                                                    end
                                                                    return result
                                                                  end
                                                                  function rshift(num, k)
                                                                    local result = num
                                                                    local i = 0
                                                                    while (i < k) do
                                                                      result = (result // 2)
                                                                      i = (i + 1)
                                                                    end
                                                                    return result
                                                                  end
                                                                  function left_rotate_32(i, shift)
                                                                    if (i < 0) then
                                                                      _panic("Input must be non-negative")
                                                                    end
                                                                    if (shift < 0) then
                                                                      _panic("Shift must be non-negative")
                                                                    end
                                                                    local left = lshift(i, shift)
                                                                    local right = rshift(i, (32 - shift))
                                                                    return ((left + right) % MOD)
                                                                  end
                                                                  function md5_me(message)
                                                                    local bit_string = preprocess(message)
                                                                    local added_consts = {3614090360, 3905402710, 606105819, 3250441966, 4118548399, 1200080426, 2821735955, 4249261313, 1770035416, 2336552879, 4294925233, 2304563134, 1804603682, 4254626195, 2792965006, 1236535329, 4129170786, 3225465664, 643717713, 3921069994, 3593408605, 38016083, 3634488961, 3889429448, 568446438, 3275163606, 4107603335, 1163531501, 2850285829, 4243563512, 1735328473, 2368359562, 4294588738, 2272392833, 1839030562, 4259657740, 2763975236, 1272893353, 4139469664, 3200236656, 681279174, 3936430074, 3572445317, 76029189, 3654602809, 3873151461, 530742520, 3299628645, 4096336452, 1126891415, 2878612391, 4237533241, 1700485571, 2399980690, 4293915773, 2240044497, 1873313359, 4264355552, 2734768916, 1309151649, 4149444226, 3174756917, 718787259, 3951481745}
                                                                    local shift_amounts = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21}
                                                                    local a0 = 1732584193
                                                                    local b0 = 4023233417
                                                                    local c0 = 2562383102
                                                                    local d0 = 271733878
                                                                    local blocks = get_block_words(bit_string)
                                                                    local bi = 0
                                                                    while (bi < (function(v)
                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                      return #v.items
                                                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                        local c = 0
                                                                        for _ in pairs(v) do c = c + 1 end
                                                                        return c
                                                                      elseif type(v) == 'string' then
                                                                          local l = utf8.len(v)
                                                                          if l then return l end
                                                                          return #v
                                                                        elseif type(v) == 'table' then
                                                                            return #v
                                                                          else
                                                                            return 0
                                                                          end
                                                                        end)(blocks)) do
                                                                          local block = blocks[bi + 1]
                                                                          local a = a0
                                                                          local b = b0
                                                                          local c = c0
                                                                          local d = d0
                                                                          local i = 0
                                                                          while (i < 64) do
                                                                            local f = 0
                                                                            local g = 0
                                                                            if (i <= 15) then
                                                                              f = bit_xor(d, bit_and(b, bit_xor(c, d)))
                                                                              g = i
                                                                            else
                                                                              if (i <= 31) then
                                                                                f = bit_xor(c, bit_and(d, bit_xor(b, c)))
                                                                                g = (((5 * i) + 1) % 16)
                                                                              else
                                                                                if (i <= 47) then
                                                                                  f = bit_xor(bit_xor(b, c), d)
                                                                                  g = (((3 * i) + 5) % 16)
                                                                                else
                                                                                  f = bit_xor(c, bit_or(b, not_32(d)))
                                                                                  g = ((7 * i) % 16)
                                                                                end
                                                                              end
                                                                            end
                                                                            f = sum_32(f, a)
                                                                            f = sum_32(f, added_consts[i + 1])
                                                                            f = sum_32(f, block[g + 1])
                                                                            local rotated = left_rotate_32(f, shift_amounts[i + 1])
                                                                            local new_b = sum_32(b, rotated)
                                                                            a = d
                                                                            d = c
                                                                            c = b
                                                                            b = new_b
                                                                            i = (i + 1)
                                                                          end
                                                                          a0 = sum_32(a0, a)
                                                                          b0 = sum_32(b0, b)
                                                                          c0 = sum_32(c0, c)
                                                                          d0 = sum_32(d0, d)
                                                                          bi = (bi + 1)
                                                                        end
                                                                        local digest = (((reformat_hex(a0) .. reformat_hex(b0)) .. reformat_hex(c0)) .. reformat_hex(d0))
                                                                        return digest
                                                                      end
                                                                      MOD = 4294967296
                                                                      ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                                                                      local _bench_end = os.clock()
                                                                      collectgarbage()
                                                                      local _bench_end_mem = collectgarbage('count') * 1024
                                                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                    end;
