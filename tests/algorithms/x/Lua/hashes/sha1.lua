-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function ord(ch)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(ASCII)) do
          if (string.sub(ASCII, (i + 1), (i + 1)) == ch) then
            return (32 + i)
          end
          i = (i + 1)
        end
        return 0
      end
      function pow2(n)
        local res = 1
        local i = 0
        while (i < n) do
          res = (res * 2)
          i = (i + 1)
        end
        return res
      end
      function bit_and(a, b)
        local x = a
        local y = b
        local res = 0
        local bit = 1
        local i = 0
        while (i < 32) do
          if (((x % 2) == 1) and ((y % 2) == 1)) then
            res = (res + bit)
          end
          x = (x // 2)
          y = (y // 2)
          bit = (bit * 2)
          i = (i + 1)
        end
        return res
      end
      function bit_or(a, b)
        local x = a
        local y = b
        local res = 0
        local bit = 1
        local i = 0
        while (i < 32) do
          local abit = (x % 2)
          local bbit = (y % 2)
          if ((abit == 1) or (bbit == 1)) then
            res = (res + bit)
          end
          x = (x // 2)
          y = (y // 2)
          bit = (bit * 2)
          i = (i + 1)
        end
        return res
      end
      function bit_xor(a, b)
        local x = a
        local y = b
        local res = 0
        local bit = 1
        local i = 0
        while (i < 32) do
          local abit = (x % 2)
          local bbit = (y % 2)
          if (((abit == 1) and (bbit == 0)) or ((abit == 0) and (bbit == 1))) then
            res = (res + bit)
          end
          x = (x // 2)
          y = (y // 2)
          bit = (bit * 2)
          i = (i + 1)
        end
        return res
      end
      function bit_not(a)
        return ((MOD - 1) - a)
      end
      function rotate_left(n, b)
        local left = ((n * pow2(b)) % MOD)
        local right = (n // pow2((32 - b)))
        return ((left + right) % MOD)
      end
      function to_hex32(n)
        local digits = "0123456789abcdef"
        local num = n
        local s = ""
        if (num == 0) then
          s = "0"
        end
        while (num > 0) do
          local d = (num % 16)
          s = (string.sub(digits, (d + 1), (d + 1)) .. s)
          num = (num // 16)
        end
        while ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s) < 8) do
              s = ("0" .. s)
            end
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s) > 8) then
                  s = string.sub(s, (((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(s) - 8) + 1), (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(s))
                        end
                        return s
                      end
                      function sha1(message)
                        local bytes = {}
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(message)) do
                              bytes = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(bytes, ord(string.sub(message, (i + 1), (i + 1))))
                            i = (i + 1)
                          end
                          bytes = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(bytes, 128)
                        while ((((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(bytes) + 8) % 64) ~= 0) do
                              bytes = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(bytes, 0)
                          end
                          local bit_len = ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(message) * 8)
                              local len_bytes = {0, 0, 0, 0, 0, 0, 0, 0}
                              local bl = bit_len
                              local k = 7
                              while (k >= 0) do
                                len_bytes[k + 1] = (bl % 256)
                                bl = (bl // 256)
                                k = (k - 1)
                              end
                              local j = 0
                              while (j < 8) do
                                bytes = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(bytes, len_bytes[j + 1])
                              j = (j + 1)
                            end
                            local blocks = {}
                            local pos = 0
                            while (pos < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(bytes)) do
                                  local block = {}
                                  local j2 = 0
                                  while (j2 < 64) do
                                    block = (function(lst, item)
                                    local res = {table.unpack(lst or {})}
                                    table.insert(res, item)
                                    return res
                                  end)(block, bytes[(pos + j2) + 1])
                                  j2 = (j2 + 1)
                                end
                                blocks = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(blocks, block)
                              pos = (pos + 64)
                            end
                            local h0 = 1732584193
                            local h1 = 4023233417
                            local h2 = 2562383102
                            local h3 = 271733878
                            local h4 = 3285377520
                            local bindex = 0
                            while (bindex < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(blocks)) do
                                  local block = blocks[bindex + 1]
                                  local w = {}
                                  local t = 0
                                  while (t < 16) do
                                    local j3 = (t * 4)
                                    local word = ((((((block[j3 + 1] * 256) + block[(j3 + 1) + 1]) * 256) + block[(j3 + 2) + 1]) * 256) + block[(j3 + 3) + 1])
                                    w = (function(lst, item)
                                    local res = {table.unpack(lst or {})}
                                    table.insert(res, item)
                                    return res
                                  end)(w, word)
                                  t = (t + 1)
                                end
                                while (t < 80) do
                                  local tmp = bit_xor(bit_xor(bit_xor(w[(t - 3) + 1], w[(t - 8) + 1]), w[(t - 14) + 1]), w[(t - 16) + 1])
                                  w = (function(lst, item)
                                  local res = {table.unpack(lst or {})}
                                  table.insert(res, item)
                                  return res
                                end)(w, rotate_left(tmp, 1))
                                t = (t + 1)
                              end
                              local a = h0
                              local b = h1
                              local c = h2
                              local d = h3
                              local e = h4
                              local i2 = 0
                              while (i2 < 80) do
                                local f = 0
                                local kconst = 0
                                if (i2 < 20) then
                                  f = bit_or(bit_and(b, c), bit_and(bit_not(b), d))
                                  kconst = 1518500249
                                else
                                  if (i2 < 40) then
                                    f = bit_xor(bit_xor(b, c), d)
                                    kconst = 1859775393
                                  else
                                    if (i2 < 60) then
                                      f = bit_or(bit_or(bit_and(b, c), bit_and(b, d)), bit_and(c, d))
                                      kconst = 2400959708
                                    else
                                      f = bit_xor(bit_xor(b, c), d)
                                      kconst = 3395469782
                                    end
                                  end
                                end
                                local temp = (((((rotate_left(a, 5) + f) + e) + kconst) + w[i2 + 1]) % MOD)
                                e = d
                                d = c
                                c = rotate_left(b, 30)
                                b = a
                                a = temp
                                i2 = (i2 + 1)
                              end
                              h0 = ((h0 + a) % MOD)
                              h1 = ((h1 + b) % MOD)
                              h2 = ((h2 + c) % MOD)
                              h3 = ((h3 + d) % MOD)
                              h4 = ((h4 + e) % MOD)
                              bindex = (bindex + 1)
                            end
                            return ((((to_hex32(h0) .. to_hex32(h1)) .. to_hex32(h2)) .. to_hex32(h3)) .. to_hex32(h4))
                          end
                          function main()
                            print((((type(sha1("Test String")) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(sha1("Test String"))) or (sha1("Test String"))))
                          end
                          MOD = 4294967296
                          ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                          main()
                          local _bench_end = os.clock()
                          collectgarbage()
                          local _bench_end_mem = collectgarbage('count') * 1024
                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                        end;
