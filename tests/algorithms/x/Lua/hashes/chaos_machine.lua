-- Generated by Mochi v0.10.65 on 2025-08-14 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function round_dec(x, n)
    local m10 = 1.0
    local i = 0
    while (i < n) do
      m10 = (m10 * 10.0)
      i = (i + 1)
    end
    local y = ((x * m10) + 0.5)
    return ((1.0 * math.floor(tonumber(y) or 0)) / m10)
  end
  function reset()
    return {buffer = K, params = {0.0, 0.0, 0.0, 0.0, 0.0}, time = 0}
  end
  function push(m, seed)
    local buf = m.buffer
    local par = m.params
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(buf)) do
          local value = buf[i + 1]
          local e = ((1.0 * seed) / value)
          local next_value = (buf[((i + 1) % size) + 1] + e)
          next_value = (next_value - (1.0 * math.floor(tonumber(next_value) or 0)))
          local r = (par[i + 1] + e)
          r = (r - (1.0 * math.floor(tonumber(r) or 0)))
          r = (r + 3.0)
          buf[i + 1] = round_dec(((r * next_value) * (1.0 - next_value)), 10)
          par[i + 1] = r
          i = (i + 1)
        end
        return {buffer = buf, params = par, time = (m.time + 1)}
      end
      function xor(a, b)
        local aa = a
        local bb = b
        local res = 0
        local bit = 1
        while ((aa > 0) or (bb > 0)) do
          local abit = (aa % 2)
          local bbit = (bb % 2)
          if (abit ~= bbit) then
            res = (res + bit)
          end
          aa = (aa // 2)
          bb = (bb // 2)
          bit = (bit * 2)
        end
        return res
      end
      function xorshift(x, y)
        local xv = x
        local yv = y
        xv = xor(xv, (yv // 8192))
        yv = xor(yv, (xv * 131072))
        xv = xor(xv, (yv // 32))
        return xv
      end
      function pull(m)
        local buf = m.buffer
        local par = m.params
        local key = (m.time % size)
        local i = 0
        while (i < t) do
          local r = par[key + 1]
          local value = buf[key + 1]
          buf[key + 1] = round_dec(((r * value) * (1.0 - value)), 10)
          local new_r = (((1.0 * m.time) * 0.01) + (r * 1.01))
          new_r = (new_r - (1.0 * math.floor(tonumber(new_r) or 0)))
          par[key + 1] = (new_r + 3.0)
          i = (i + 1)
        end
        local x = math.floor(tonumber((buf[((key + 2) % size) + 1] * 1e+10)) or 0)
        local y = math.floor(tonumber((buf[(((key + size) - 2) % size) + 1] * 1e+10)) or 0)
        local new_machine = {buffer = buf, params = par, time = (m.time + 1)}
        local value = (xorshift(x, y) % 4294967295)
        return {value = value, machine = new_machine}
      end
      K = {0.33, 0.44, 0.55, 0.44, 0.33}
      t = 3
      size = 5
      machine = reset()
      i = 0
      while (i < 100) do
        machine = push(machine, i)
        i = (i + 1)
      end
      res = pull(machine)
      print(res.value)
      print(
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(res.machine.buffer))
      print(
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(res.machine.params))
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
