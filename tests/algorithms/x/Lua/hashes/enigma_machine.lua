-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function build_alphabet()
    local result = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(ASCII)) do
          result = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(result, string.sub(ASCII, (i + 1), (i + 1)))
        i = (i + 1)
      end
      return result
    end
    function range_list(n)
      local lst = {}
      local i = 0
      while (i < n) do
        lst = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(lst, i)
      i = (i + 1)
    end
    return lst
  end
  function reversed_range_list(n)
    local lst = {}
    local i = (n - 1)
    while (i >= 0) do
      lst = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(lst, i)
    i = (i - 1)
  end
  return lst
end
function index_of_char(lst, ch)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(lst)) do
        if (lst[i + 1] == ch) then
          return i
        end
        i = (i + 1)
      end
      return (-1)
    end
    function index_of_int(lst, value)
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(lst)) do
            if (lst[i + 1] == value) then
              return i
            end
            i = (i + 1)
          end
          return (-1)
        end
        function enigma_encrypt(message, token)
          local alphabets = build_alphabet()
          local n = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(alphabets)
              local gear_one = range_list(n)
              local gear_two = range_list(n)
              local gear_three = range_list(n)
              local reflector = reversed_range_list(n)
              local gear_one_pos = 0
              local gear_two_pos = 0
              local gear_three_pos = 0
              local function rotator()
              local i = gear_one[0 + 1]
              gear_one = (function(lst,s,e)
              local r={}
              for i=s+1,e do
                r[#r+1]=lst[i]
              end
              return r
            end)(gear_one, 1, (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(gear_one))
                gear_one = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(gear_one, i)
              gear_one_pos = (gear_one_pos + 1)
              if ((gear_one_pos % n) == 0) then
                i = gear_two[0 + 1]
                gear_two = (function(lst,s,e)
                local r={}
                for i=s+1,e do
                  r[#r+1]=lst[i]
                end
                return r
              end)(gear_two, 1, (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(gear_two))
                  gear_two = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(gear_two, i)
                gear_two_pos = (gear_two_pos + 1)
                if ((gear_two_pos % n) == 0) then
                  i = gear_three[0 + 1]
                  gear_three = (function(lst,s,e)
                  local r={}
                  for i=s+1,e do
                    r[#r+1]=lst[i]
                  end
                  return r
                end)(gear_three, 1, (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(gear_three))
                    gear_three = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(gear_three, i)
                  gear_three_pos = (gear_three_pos + 1)
                end
              end
            end
            local function engine(ch)
            local target = index_of_char(alphabets, ch)
            target = gear_one[target + 1]
            target = gear_two[target + 1]
            target = gear_three[target + 1]
            target = reflector[target + 1]
            target = index_of_int(gear_three, target)
            target = index_of_int(gear_two, target)
            target = index_of_int(gear_one, target)
            rotator()
            return alphabets[target + 1]
          end
          local t = 0
          while (t < token) do
            rotator()
            t = (t + 1)
          end
          local result = ""
          local idx = 0
          while (idx < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(message)) do
                result = (result .. engine(string.sub(message, (idx + 1), (idx + 1))))
                idx = (idx + 1)
              end
              return result
            end
            ASCII = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
            message = "HELLO WORLD"
            token = 123
            encoded = enigma_encrypt(message, token)
            print((((type(encoded) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(encoded)) or (encoded)))
            local _bench_end = os.clock()
            collectgarbage()
            local _bench_end_mem = collectgarbage('count') * 1024
            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
          end;
