-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sanitize(unit)
    local res = string.lower(unit)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(res) > 0) then
          local last = _substring(res, ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(res) - 1), (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(res))
                  if (last == "s") then
                    res = _substring(res, 0, ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(res) - 1))
                      end
                    end
                    if (UNIT_SYMBOL[res] ~= nil) then
                      return UNIT_SYMBOL[res]
                    end
                    return res
                  end
                  function pow10(exp)
                    if (exp == 0) then
                      return 1
                    end
                    local e = exp
                    local res = 1
                    if (e < 0) then
                      e = (-e)
                    end
                    local i = 0
                    while (i < e) do
                      res = (res * 10)
                      i = (i + 1)
                    end
                    if (exp < 0) then
                      return (1 / res)
                    end
                    return res
                  end
                  function length_conversion(value, from_type, to_type)
                    local from_sanitized = sanitize(from_type)
                    local to_sanitized = sanitize(to_type)
                    if (not (METRIC_CONVERSION[from_sanitized] ~= nil)) then
                      panic(((("Invalid 'from_type' value: '" .. from_type) .. "'.\nConversion abbreviations are: ") .. ABBREVIATIONS))
                    end
                    if (not (METRIC_CONVERSION[to_sanitized] ~= nil)) then
                      panic(((("Invalid 'to_type' value: '" .. to_type) .. "'.\nConversion abbreviations are: ") .. ABBREVIATIONS))
                    end
                    local from_exp = METRIC_CONVERSION[from_sanitized]
                    local to_exp = METRIC_CONVERSION[to_sanitized]
                    local exponent = 0
                    if (from_exp > to_exp) then
                      exponent = (from_exp - to_exp)
                    else
                      exponent = (-(to_exp - from_exp))
                    end
                    return (value * pow10(exponent))
                  end
                  UNIT_SYMBOL = {__name = "GenType1", __order = {"meter", "kilometer", "megametre", "gigametre", "terametre", "petametre", "exametre", "zettametre", "yottametre"}, meter = "m", kilometer = "km", megametre = "Mm", gigametre = "Gm", terametre = "Tm", petametre = "Pm", exametre = "Em", zettametre = "Zm", yottametre = "Ym"}
                  METRIC_CONVERSION = {__name = "GenType2", __order = {"m", "km", "Mm", "Gm", "Tm", "Pm", "Em", "Zm", "Ym"}, m = 0, km = 3, Mm = 6, Gm = 9, Tm = 12, Pm = 15, Em = 18, Zm = 21, Ym = 24}
                  ABBREVIATIONS = "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"
                  print((((type(tostring(length_conversion(1, "meter", "kilometer"))) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(tostring(length_conversion(1, "meter", "kilometer")))) or (tostring(length_conversion(1, "meter", "kilometer")))))
                  print((((type(tostring(length_conversion(1, "meter", "megametre"))) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(tostring(length_conversion(1, "meter", "megametre")))) or (tostring(length_conversion(1, "meter", "megametre")))))
                  print((((type(tostring(length_conversion(1, "gigametre", "meter"))) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(tostring(length_conversion(1, "gigametre", "meter")))) or (tostring(length_conversion(1, "gigametre", "meter")))))
                  print((((type(tostring(length_conversion(1, "terametre", "zettametre"))) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(tostring(length_conversion(1, "terametre", "zettametre")))) or (tostring(length_conversion(1, "terametre", "zettametre")))))
                  print((((type(tostring(length_conversion(1, "yottametre", "zettametre"))) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(tostring(length_conversion(1, "yottametre", "zettametre")))) or (tostring(length_conversion(1, "yottametre", "zettametre")))))
                  local _bench_end = os.clock()
                  collectgarbage()
                  local _bench_end_mem = collectgarbage('count') * 1024
                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                end;
