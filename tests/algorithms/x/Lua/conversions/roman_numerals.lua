-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function char_value(c)
    if (c == "I") then
      return 1
    end
    if (c == "V") then
      return 5
    end
    if (c == "X") then
      return 10
    end
    if (c == "L") then
      return 50
    end
    if (c == "C") then
      return 100
    end
    if (c == "D") then
      return 500
    end
    if (c == "M") then
      return 1000
    end
    return 0
  end
  function roman_to_int(roman)
    local total = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(roman)) do
          if (((i + 1) < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(roman)) and (char_value(string.sub(roman, (i + 1), (i + 1))) < char_value(string.sub(roman, ((i + 1) + 1), ((i + 1) + 1))))) then
                total = ((total + char_value(string.sub(roman, ((i + 1) + 1), ((i + 1) + 1)))) - char_value(string.sub(roman, (i + 1), (i + 1))))
                i = (i + 2)
              else
                total = (total + char_value(string.sub(roman, (i + 1), (i + 1))))
                i = (i + 1)
              end
            end
            return total
          end
          function int_to_roman(number)
            local num = number
            local res = ""
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(roman_values)) do
                  local value = roman_values[i + 1]
                  local symbol = roman_symbols[i + 1]
                  local factor = (num // value)
                  num = (num % value)
                  local j = 0
                  while (j < factor) do
                    res = (res .. symbol)
                    j = (j + 1)
                  end
                  if (num == 0) then
                    break
                  end
                  i = (i + 1)
                end
                return res
              end
              roman_values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}
              roman_symbols = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"}
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
