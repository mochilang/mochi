-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pow10(exp)
    local result = 1
    if (exp >= 0) then
      local i = 0
      while (i < exp) do
        result = (result * 10)
        i = (i + 1)
      end
    else
      local i = 0
      while (i < (0 - exp)) do
        result = (result / 10)
        i = (i + 1)
      end
    end
    return result
  end
  function weight_conversion(from_type, to_type, value)
    local has_to = (KILOGRAM_CHART[to_type] ~= nil)
    local has_from = (WEIGHT_TYPE_CHART[from_type] ~= nil)
    if (has_to and has_from) then
      return ((value * KILOGRAM_CHART[to_type]) * WEIGHT_TYPE_CHART[from_type])
    end
    print("Invalid 'from_type' or 'to_type'")
    return 0
  end
  KILOGRAM_CHART = {__name = "GenType1", __order = {"kilogram", "gram", "milligram", "metric-ton", "long-ton", "short-ton", "pound", "stone", "ounce", "carrat", "atomic-mass-unit"}, kilogram = 1, gram = 1000, milligram = 1e+06, ["metric-ton"] = 0.001, ["long-ton"] = 0.0009842073, ["short-ton"] = 0.0011023122, pound = 2.2046244202, stone = 0.1574731728, ounce = 35.273990723, carrat = 5000, ["atomic-mass-unit"] = (6.022136652 * pow10(26))}
  WEIGHT_TYPE_CHART = {__name = "GenType2", __order = {"kilogram", "gram", "milligram", "metric-ton", "long-ton", "short-ton", "pound", "stone", "ounce", "carrat", "atomic-mass-unit"}, kilogram = 1, gram = 0.001, milligram = 1e-06, ["metric-ton"] = 1000, ["long-ton"] = 1016.04608, ["short-ton"] = 907.184, pound = 0.453592, stone = 6.35029, ounce = 0.0283495, carrat = 0.0002, ["atomic-mass-unit"] = (1.660540199 * pow10((-27)))}
  print((((type(weight_conversion("kilogram", "gram", 1)) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(weight_conversion("kilogram", "gram", 1))) or (weight_conversion("kilogram", "gram", 1))))
  print((((type(weight_conversion("gram", "pound", 3)) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(weight_conversion("gram", "pound", 3))) or (weight_conversion("gram", "pound", 3))))
  print((((type(weight_conversion("ounce", "kilogram", 3)) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(weight_conversion("ounce", "kilogram", 3))) or (weight_conversion("ounce", "kilogram", 3))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
