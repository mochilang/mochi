-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function split_by_dot(s)
    local res = {}
    local current = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          local c = string.sub(s, (i + 1), (i + 1))
          if (c == ".") then
            res = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(res, current)
          current = ""
        else
          current = (current .. c)
        end
        i = (i + 1)
      end
      res = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(res, current)
    return res
  end
  function parse_decimal(s)
    if ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) == 0) then
          panic("Invalid IPv4 address format")
        end
        local value = 0
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) do
              local c = string.sub(s, (i + 1), (i + 1))
              if ((c < "0") or (c > "9")) then
                panic("Invalid IPv4 address format")
              end
              value = ((value * 10) + math.floor(tonumber(c) or 0))
              i = (i + 1)
            end
            return value
          end
          function to_hex2(n)
            local x = n
            local res = ""
            while (x > 0) do
              local d = (x % 16)
              res = (string.sub(hex_digits, (d + 1), (d + 1)) .. res)
              x = (x // 16)
            end
            while ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(res) < 2) do
                  res = ("0" .. res)
                end
                return res
              end
              function ipv4_to_decimal(ipv4_address)
                local parts = split_by_dot(ipv4_address)
                if ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(parts) ~= 4) then
                      panic("Invalid IPv4 address format")
                    end
                    local result = 0
                    local i = 0
                    while (i < 4) do
                      local oct = parse_decimal(parts[i + 1])
                      if ((oct < 0) or (oct > 255)) then
                        panic(("Invalid IPv4 octet " .. tostring(oct)))
                      end
                      result = ((result * 256) + oct)
                      i = (i + 1)
                    end
                    return result
                  end
                  function alt_ipv4_to_decimal(ipv4_address)
                    local parts = split_by_dot(ipv4_address)
                    if ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(parts) ~= 4) then
                          panic("Invalid IPv4 address format")
                        end
                        local hex_str = ""
                        local i = 0
                        while (i < 4) do
                          local oct = parse_decimal(parts[i + 1])
                          if ((oct < 0) or (oct > 255)) then
                            panic(("Invalid IPv4 octet " .. tostring(oct)))
                          end
                          hex_str = (hex_str .. to_hex2(oct))
                          i = (i + 1)
                        end
                        local value = 0
                        local k = 0
                        while (k < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(hex_str)) do
                              local c = string.sub(hex_str, (k + 1), (k + 1))
                              local digit = (0 - 1)
                              local j = 0
                              while (j < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(hex_digits)) do
                                    if (string.sub(hex_digits, (j + 1), (j + 1)) == c) then
                                      digit = j
                                    end
                                    j = (j + 1)
                                  end
                                  if (digit < 0) then
                                    panic("Invalid hex digit")
                                  end
                                  value = ((value * 16) + digit)
                                  k = (k + 1)
                                end
                                return value
                              end
                              function decimal_to_ipv4(decimal_ipv4)
                                if ((decimal_ipv4 < 0) or (decimal_ipv4 > 4294967295)) then
                                  panic("Invalid decimal IPv4 address")
                                end
                                local n = decimal_ipv4
                                local parts = {}
                                local i = 0
                                while (i < 4) do
                                  local octet = (n % 256)
                                  parts = (function(lst, item)
                                  local res = {table.unpack(lst or {})}
                                  table.insert(res, item)
                                  return res
                                end)(parts, tostring(octet))
                                n = (n // 256)
                                i = (i + 1)
                              end
                              local res = ""
                              local j = ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(parts) - 1)
                                  while (j >= 0) do
                                    res = (res .. parts[j + 1])
                                    if (j > 0) then
                                      res = (res .. ".")
                                    end
                                    j = (j - 1)
                                  end
                                  return res
                                end
                                hex_digits = "0123456789abcdef"
                                print(ipv4_to_decimal("192.168.0.1"))
                                print(ipv4_to_decimal("10.0.0.255"))
                                print(alt_ipv4_to_decimal("192.168.0.1"))
                                print(alt_ipv4_to_decimal("10.0.0.255"))
                                print((((type(decimal_to_ipv4(3232235521)) == "table")) and (
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)(decimal_to_ipv4(3232235521))) or (decimal_to_ipv4(3232235521))))
                                print((((type(decimal_to_ipv4(167772415)) == "table")) and (
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)(decimal_to_ipv4(167772415))) or (decimal_to_ipv4(167772415))))
                                local _bench_end = os.clock()
                                collectgarbage()
                                local _bench_end_mem = collectgarbage('count') * 1024
                                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                              end;
