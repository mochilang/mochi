-- Generated by Mochi v0.10.65 on 2025-08-14 17:09 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rand()
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return seed
  end
  function random()
    return ((1.0 * rand()) / 2.147483648e+09)
  end
  function sqrtApprox(x)
    if (x <= 0.0) then
      return 0.0
    end
    local guess = x
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2.0)
      i = (i + 1)
    end
    return guess
  end
  function absf(x)
    return (((x < 0.0)) and ((-x)) or (x))
  end
  function dot(a, b)
    local s = 0.0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(a)) do
          s = (s + (a[i + 1] * b[i + 1]))
          i = (i + 1)
        end
        return s
      end
      function vector_scale(v, s)
        local res = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(v)) do
              res = (function(lst, item)
              local res = {table.unpack(lst or {})}
              res[#res+1] = item
              return res
            end)(res, (v[i + 1] * s))
            i = (i + 1)
          end
          return res
        end
        function vector_sub(a, b)
          local res = {}
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(a)) do
                res = (function(lst, item)
                local res = {table.unpack(lst or {})}
                res[#res+1] = item
                return res
              end)(res, (a[i + 1] - b[i + 1]))
              i = (i + 1)
            end
            return res
          end
          function vector_add(a, b)
            local res = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(a)) do
                  res = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  res[#res+1] = item
                  return res
                end)(res, (a[i + 1] + b[i + 1]))
                i = (i + 1)
              end
              return res
            end
            function zeros_matrix(r, c)
              local m = {}
              local i = 0
              while (i < r) do
                local row = {}
                local j = 0
                while (j < c) do
                  row = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  res[#res+1] = item
                  return res
                end)(row, 0.0)
                j = (j + 1)
              end
              m = (function(lst, item)
              local res = {table.unpack(lst or {})}
              res[#res+1] = item
              return res
            end)(m, row)
            i = (i + 1)
          end
          return m
        end
        function column(m, idx)
          local col = {}
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(m)) do
                col = (function(lst, item)
                local res = {table.unpack(lst or {})}
                res[#res+1] = item
                return res
              end)(col, m[i + 1][idx + 1])
              i = (i + 1)
            end
            return col
          end
          function validate_adjacency_list(graph)
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(graph)) do
                  local j = 0
                  while (j < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(graph[i + 1])) do
                        local v = graph[i + 1][j + 1]
                        if ((v < 0) or (v >= (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(graph))) then
                              _panic("Invalid neighbor")
                            end
                            j = (j + 1)
                          end
                          i = (i + 1)
                        end
                      end
                      function multiply_matrix_vector(graph, vector)
                        local n = (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(graph)
                            if ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(vector) ~= n) then
                                  _panic("Vector length must match number of nodes")
                                end
                                local result = {}
                                local i = 0
                                while (i < n) do
                                  local sum = 0.0
                                  local j = 0
                                  while (j < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(graph[i + 1])) do
                                        local nb = graph[i + 1][j + 1]
                                        sum = (sum + vector[nb + 1])
                                        j = (j + 1)
                                      end
                                      result = (function(lst, item)
                                      local res = {table.unpack(lst or {})}
                                      res[#res+1] = item
                                      return res
                                    end)(result, sum)
                                    i = (i + 1)
                                  end
                                  return result
                                end
                                function lanczos_iteration(graph, k)
                                  local n = (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(graph)
                                      if ((k < 1) or (k > n)) then
                                        _panic("invalid number of eigenvectors")
                                      end
                                      local q = zeros_matrix(n, k)
                                      local t = zeros_matrix(k, k)
                                      local v = {}
                                      local i = 0
                                      while (i < n) do
                                        v = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        res[#res+1] = item
                                        return res
                                      end)(v, random())
                                      i = (i + 1)
                                    end
                                    local ss = 0.0
                                    i = 0
                                    while (i < n) do
                                      ss = (ss + (v[i + 1] * v[i + 1]))
                                      i = (i + 1)
                                    end
                                    local vnorm = sqrtApprox(ss)
                                    i = 0
                                    while (i < n) do
                                      q[i + 1][0 + 1] = (v[i + 1] / vnorm)
                                      i = (i + 1)
                                    end
                                    local beta = 0.0
                                    local j = 0
                                    while (j < k) do
                                      local w = multiply_matrix_vector(graph, column(q, j))
                                      if (j > 0) then
                                        w = vector_sub(w, vector_scale(column(q, (j - 1)), beta))
                                      end
                                      local alpha = dot(column(q, j), w)
                                      w = vector_sub(w, vector_scale(column(q, j), alpha))
                                      local ss2 = 0.0
                                      local p = 0
                                      while (p < n) do
                                        ss2 = (ss2 + (w[p + 1] * w[p + 1]))
                                        p = (p + 1)
                                      end
                                      beta = sqrtApprox(ss2)
                                      t[j + 1][j + 1] = alpha
                                      if (j < (k - 1)) then
                                        t[j + 1][(j + 1) + 1] = beta
                                        t[(j + 1) + 1][j + 1] = beta
                                        if (beta > 1e-10) then
                                          local wnorm = vector_scale(w, (1.0 / beta))
                                          local r = 0
                                          while (r < n) do
                                            q[r + 1][(j + 1) + 1] = wnorm[r + 1]
                                            r = (r + 1)
                                          end
                                        end
                                      end
                                      j = (j + 1)
                                    end
                                    return {t = t, q = q}
                                  end
                                  function jacobi_eigen(a_in, max_iter)
                                    local n = (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(a_in)
                                        local a = a_in
                                        local v = zeros_matrix(n, n)
                                        local i = 0
                                        while (i < n) do
                                          v[i + 1][i + 1] = 1.0
                                          i = (i + 1)
                                        end
                                        local iter = 0
                                        while (iter < max_iter) do
                                          local p = 0
                                          local q = 1
                                          local max = absf(a[p + 1][q + 1])
                                          i = 0
                                          while (i < n) do
                                            local j = (i + 1)
                                            while (j < n) do
                                              local val = absf(a[i + 1][j + 1])
                                              if (val > max) then
                                                max = val
                                                p = i
                                                q = j
                                              end
                                              j = (j + 1)
                                            end
                                            i = (i + 1)
                                          end
                                          if (max < 1e-08) then
                                            break
                                          end
                                          local app = a[p + 1][p + 1]
                                          local aqq = a[q + 1][q + 1]
                                          local apq = a[p + 1][q + 1]
                                          local theta = ((aqq - app) / (2.0 * apq))
                                          local t = (1.0 / (absf(theta) + sqrtApprox(((theta * theta) + 1.0))))
                                          if (theta < 0.0) then
                                            t = (-t)
                                          end
                                          local c = (1.0 / sqrtApprox((1.0 + (t * t))))
                                          local s = (t * c)
                                          local tau = (s / (1.0 + c))
                                          a[p + 1][p + 1] = (app - (t * apq))
                                          a[q + 1][q + 1] = (aqq + (t * apq))
                                          a[p + 1][q + 1] = 0.0
                                          a[q + 1][p + 1] = 0.0
                                          local k = 0
                                          while (k < n) do
                                            if ((k ~= p) and (k ~= q)) then
                                              local akp = a[k + 1][p + 1]
                                              local akq = a[k + 1][q + 1]
                                              a[k + 1][p + 1] = (akp - (s * (akq + (tau * akp))))
                                              a[p + 1][k + 1] = a[k + 1][p + 1]
                                              a[k + 1][q + 1] = (akq + (s * (akp - (tau * akq))))
                                              a[q + 1][k + 1] = a[k + 1][q + 1]
                                            end
                                            k = (k + 1)
                                          end
                                          k = 0
                                          while (k < n) do
                                            local vkp = v[k + 1][p + 1]
                                            local vkq = v[k + 1][q + 1]
                                            v[k + 1][p + 1] = (vkp - (s * (vkq + (tau * vkp))))
                                            v[k + 1][q + 1] = (vkq + (s * (vkp - (tau * vkq))))
                                            k = (k + 1)
                                          end
                                          iter = (iter + 1)
                                        end
                                        local eigenvalues = {}
                                        i = 0
                                        while (i < n) do
                                          eigenvalues = (function(lst, item)
                                          local res = {table.unpack(lst or {})}
                                          res[#res+1] = item
                                          return res
                                        end)(eigenvalues, a[i + 1][i + 1])
                                        i = (i + 1)
                                      end
                                      return {values = eigenvalues, vectors = v}
                                    end
                                    function matmul(a, b)
                                      local rows = (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(a)
                                          local cols = (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(b[0 + 1])
                                              local inner = (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(b)
                                                  local m = zeros_matrix(rows, cols)
                                                  local i = 0
                                                  while (i < rows) do
                                                    local j = 0
                                                    while (j < cols) do
                                                      local s = 0.0
                                                      local k = 0
                                                      while (k < inner) do
                                                        s = (s + (a[i + 1][k + 1] * b[k + 1][j + 1]))
                                                        k = (k + 1)
                                                      end
                                                      m[i + 1][j + 1] = s
                                                      j = (j + 1)
                                                    end
                                                    i = (i + 1)
                                                  end
                                                  return m
                                                end
                                                function sort_eigenpairs(vals, vecs)
                                                  local n = (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(vals)
                                                      local values = vals
                                                      local vectors = vecs
                                                      local i = 0
                                                      while (i < n) do
                                                        local j = 0
                                                        while (j < (n - 1)) do
                                                          if (values[j + 1] < values[(j + 1) + 1]) then
                                                            local tmp = values[j + 1]
                                                            values[j + 1] = values[(j + 1) + 1]
                                                            values[(j + 1) + 1] = tmp
                                                            local r = 0
                                                            while (r < (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(vectors)) do
                                                                  local tv = vectors[r + 1][j + 1]
                                                                  vectors[r + 1][j + 1] = vectors[r + 1][(j + 1) + 1]
                                                                  vectors[r + 1][(j + 1) + 1] = tv
                                                                  r = (r + 1)
                                                                end
                                                              end
                                                              j = (j + 1)
                                                            end
                                                            i = (i + 1)
                                                          end
                                                          return {values = values, vectors = vectors}
                                                        end
                                                        function find_lanczos_eigenvectors(graph, k)
                                                          validate_adjacency_list(graph)
                                                          local res = lanczos_iteration(graph, k)
                                                          local eig = jacobi_eigen(res.t, 50)
                                                          local sorted = sort_eigenpairs(eig.values, eig.vectors)
                                                          local final_vectors = matmul(res.q, sorted.vectors)
                                                          return {values = sorted.values, vectors = final_vectors}
                                                        end
                                                        function list_to_string(arr)
                                                          local s = "["
                                                          local i = 0
                                                          while (i < (function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(arr)) do
                                                                s = (s .. _str(arr[i + 1]))
                                                                if (i < ((function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(arr) - 1)) then
                                                                      s = (s .. ", ")
                                                                    end
                                                                    i = (i + 1)
                                                                  end
                                                                  return (s .. "]")
                                                                end
                                                                function matrix_to_string(m)
                                                                  local s = "["
                                                                  local i = 0
                                                                  while (i < (function(v)
                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                    return #v.items
                                                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                      local c = 0
                                                                      for _ in pairs(v) do c = c + 1 end
                                                                      return c
                                                                    elseif type(v) == 'string' then
                                                                        local l = utf8.len(v)
                                                                        if l then return l end
                                                                        return #v
                                                                      elseif type(v) == 'table' then
                                                                          return #v
                                                                        else
                                                                          return 0
                                                                        end
                                                                      end)(m)) do
                                                                        s = (s .. list_to_string(m[i + 1]))
                                                                        if (i < ((function(v)
                                                                        if type(v) == 'table' and v.items ~= nil then
                                                                          return #v.items
                                                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                            local c = 0
                                                                            for _ in pairs(v) do c = c + 1 end
                                                                            return c
                                                                          elseif type(v) == 'string' then
                                                                              local l = utf8.len(v)
                                                                              if l then return l end
                                                                              return #v
                                                                            elseif type(v) == 'table' then
                                                                                return #v
                                                                              else
                                                                                return 0
                                                                              end
                                                                            end)(m) - 1)) then
                                                                              s = (s .. "; ")
                                                                            end
                                                                            i = (i + 1)
                                                                          end
                                                                          return (s .. "]")
                                                                        end
                                                                        seed = 123456789
                                                                        graph = {{1, 2}, {0, 2}, {0, 1}}
                                                                        result = find_lanczos_eigenvectors(graph, 2)
                                                                        print((((type(list_to_string(result.values)) == "table")) and (
                                                                        (function(v)
                                                                        local function encode(x)
                                                                        if type(x) == "table" then
                                                                          if x.__name and x.__order then
                                                                            local parts = {x.__name, " {"}
                                                                            for i, k in ipairs(x.__order) do
                                                                              if i > 1 then parts[#parts+1] = ", " end
                                                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          elseif #x > 0 then
                                                                              local allTables = true
                                                                              for _, v in ipairs(x) do
                                                                                if type(v) ~= "table" then allTables = false break end
                                                                              end
                                                                              local parts = {}
                                                                              if not allTables then parts[#parts+1] = "[" end
                                                                              for i, val in ipairs(x) do
                                                                                parts[#parts+1] = encode(val)
                                                                                if i < #x then parts[#parts+1] = " " end
                                                                              end
                                                                              if not allTables then parts[#parts+1] = "]" end
                                                                              return table.concat(parts)
                                                                            else
                                                                              local keys = {}
                                                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                              local parts = {"{"}
                                                                              for i, k in ipairs(keys) do
                                                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                if i < #keys then parts[#parts+1] = ", " end
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            end
                                                                          elseif type(x) == "string" then
                                                                              return '"' .. x .. '"'
                                                                            else
                                                                              return tostring(x)
                                                                            end
                                                                          end
                                                                          return encode(v)
                                                                        end)(list_to_string(result.values))) or (list_to_string(result.values))))
                                                                        print((((type(matrix_to_string(result.vectors)) == "table")) and (
                                                                        (function(v)
                                                                        local function encode(x)
                                                                        if type(x) == "table" then
                                                                          if x.__name and x.__order then
                                                                            local parts = {x.__name, " {"}
                                                                            for i, k in ipairs(x.__order) do
                                                                              if i > 1 then parts[#parts+1] = ", " end
                                                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          elseif #x > 0 then
                                                                              local allTables = true
                                                                              for _, v in ipairs(x) do
                                                                                if type(v) ~= "table" then allTables = false break end
                                                                              end
                                                                              local parts = {}
                                                                              if not allTables then parts[#parts+1] = "[" end
                                                                              for i, val in ipairs(x) do
                                                                                parts[#parts+1] = encode(val)
                                                                                if i < #x then parts[#parts+1] = " " end
                                                                              end
                                                                              if not allTables then parts[#parts+1] = "]" end
                                                                              return table.concat(parts)
                                                                            else
                                                                              local keys = {}
                                                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                              local parts = {"{"}
                                                                              for i, k in ipairs(keys) do
                                                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                if i < #keys then parts[#parts+1] = ", " end
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            end
                                                                          elseif type(x) == "string" then
                                                                              return '"' .. x .. '"'
                                                                            else
                                                                              return tostring(x)
                                                                            end
                                                                          end
                                                                          return encode(v)
                                                                        end)(matrix_to_string(result.vectors))) or (matrix_to_string(result.vectors))))
                                                                        local _bench_end = os.clock()
                                                                        collectgarbage()
                                                                        local _bench_end_mem = collectgarbage('count') * 1024
                                                                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                      end;
