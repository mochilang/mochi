-- Generated by Mochi v0.10.65 on 2025-08-14 17:09 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function depth_first_search(graph, vertex, visited, rec_stk)
    visited[vertex + 1] = true
    rec_stk[vertex + 1] = true
    for _, node in ipairs(graph[vertex + 1]) do
      if (not visited[node + 1]) then
        if depth_first_search(graph, node, visited, rec_stk) then
          return true
        end
      else
        if rec_stk[node + 1] then
          return true
        end
      end
    end
    rec_stk[vertex + 1] = false
    return false
  end
  function check_cycle(graph)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(graph)
        local visited = {}
        local rec_stk = {}
        local i = 0
        while (i < n) do
          visited = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(visited, false)
        rec_stk = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(rec_stk, false)
      i = (i + 1)
    end
    i = 0
    while (i < n) do
      if (not visited[i + 1]) then
        if depth_first_search(graph, i, visited, rec_stk) then
          return true
        end
      end
      i = (i + 1)
    end
    return false
  end
  function print_bool(b)
    if b then
      print(((true) and (1) or (0)))
    else
      print(((false) and (1) or (0)))
    end
  end
  g1 = {{}, {0, 3}, {0, 4}, {5}, {5}, {}}
  print_bool(check_cycle(g1))
  g2 = {{1, 2}, {2}, {0, 3}, {3}}
  print_bool(check_cycle(g2))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
