-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function longest_distance(graph)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(graph)
        local indegree = {}
        local i = 0
        while (i < n) do
          indegree = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(indegree, 0)
        i = (i + 1)
      end
      local long_dist = {}
      local j = 0
      while (j < n) do
        long_dist = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(long_dist, 1)
      j = (j + 1)
    end
    local u = 0
    while (u < n) do
      for _, v in ipairs(graph[u + 1]) do
        indegree[v] = (indegree[v] + 1)
      end
      u = (u + 1)
    end
    local queue = {}
    local head = 0
    local k = 0
    while (k < n) do
      if (indegree[k + 1] == 0) then
        queue = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(queue, k)
    end
    k = (k + 1)
  end
  while (head < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(queue)) do
        local vertex = queue[head + 1]
        head = (head + 1)
        for _, x in ipairs(graph[vertex + 1]) do
          indegree[x] = (indegree[x] - 1)
          local new_dist = (long_dist[vertex + 1] + 1)
          if (new_dist > long_dist[x]) then
            long_dist[x] = new_dist
          end
          if (indegree[x] == 0) then
            queue = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(queue, x)
        end
      end
    end
    local max_len = long_dist[0 + 1]
    local m = 1
    while (m < n) do
      if (long_dist[m + 1] > max_len) then
        max_len = long_dist[m + 1]
      end
      m = (m + 1)
    end
    return max_len
  end
  graph = {{2, 3, 4}, {2, 7}, {5}, {5, 7}, {7}, {6}, {7}, {}}
  print(longest_distance(graph))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
