-- Generated by Mochi v0.10.65 on 2025-08-14 15:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
local len = #lst
if s < 0 then s = len + s end
if s < 0 then s = 0 end
if e == nil then
  e = len
elseif e < 0 then
    e = len + e
  end
  if e > len then e = len end
  if s > e then return {} end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function contains(xs, x)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (xs[i + 1] == x) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function contains_key(m, key)
        local _k0 = {}
        for k in pairs(m) do if k ~= '__name' and k ~= '__order' then table.insert(_k0, k) end end
        table.sort(_k0, function(a,b) return a<b end)
        for _, k in ipairs(_k0) do
          if (k == key) then
            return true
          end
        end
        return false
      end
      function bfs_shortest_path(graph, start, goal)
        local explored = {}
        local queue = {{start}}
        if (start == goal) then
          return {start}
        end
        while ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(queue) > 0) do
              local path = queue[0 + 1]
              queue = slice(queue, 1, (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(queue))
                  local node = path[((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(path) - 1) + 1]
                      if (not contains(explored, node)) then
                        local neighbours = graph[node]
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(neighbours)) do
                              local neighbour = neighbours[i + 1]
                              local new_path = path
                              new_path = (function(lst, item)
                              lst = lst or {}
                              table.insert(lst, item)
                              return lst
                            end)(new_path, neighbour)
                            queue = (function(lst, item)
                            lst = lst or {}
                            table.insert(lst, item)
                            return lst
                          end)(queue, new_path)
                          if (neighbour == goal) then
                            return new_path
                          end
                          i = (i + 1)
                        end
                        explored = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(explored, node)
                    end
                  end
                  return {}
                end
                function bfs_shortest_path_distance(graph, start, target)
                  if ((contains_key(graph, start) == false) or (contains_key(graph, target) == false)) then
                    return (-1)
                  end
                  if (start == target) then
                    return 0
                  end
                  local queue = {start}
                  local visited = {start}
                  local dist = {}
                  dist[start] = 0
                  dist[target] = (-1)
                  while ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(queue) > 0) do
                        local node = queue[0 + 1]
                        queue = slice(queue, 1, (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(queue))
                            if (node == target) then
                              if ((dist[target] == ((-1))) or (dist[node] < dist[target])) then
                                dist[target] = dist[node]
                              end
                            end
                            local adj = graph[node]
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(adj)) do
                                  local next = adj[i + 1]
                                  if (not contains(visited, next)) then
                                    visited = (function(lst, item)
                                    lst = lst or {}
                                    table.insert(lst, item)
                                    return lst
                                  end)(visited, next)
                                  queue = (function(lst, item)
                                  lst = lst or {}
                                  table.insert(lst, item)
                                  return lst
                                end)(queue, next)
                                dist[next] = (dist[node] + 1)
                              end
                              i = (i + 1)
                            end
                          end
                          return dist[target]
                        end
                        demo_graph = {__name = "GenType1", __order = {"A", "B", "C", "D", "E", "F", "G"}, A = {"B", "C", "E"}, B = {"A", "D", "E"}, C = {"A", "F", "G"}, D = {"B"}, E = {"A", "B", "D"}, F = {"C"}, G = {"C"}}
                        local _bench_end = os.clock()
                        collectgarbage()
                        local _bench_end_mem = collectgarbage('count') * 1024
                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                      end;
