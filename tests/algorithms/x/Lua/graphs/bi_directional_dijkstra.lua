-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function get_min_index(q)
    local idx = 0
    local i = 1
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(q)) do
          if (q[i + 1].cost < q[idx + 1].cost) then
            idx = i
          end
          i = (i + 1)
        end
        return idx
      end
      function remove_at(q, idx)
        local res = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(q)) do
              if (i ~= idx) then
                res = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(res, q[i + 1])
            end
            i = (i + 1)
          end
          return res
        end
        function pass_and_relaxation(graph, v, visited_forward, visited_backward, cst_fwd, cst_bwd, queue, parent, shortest_distance)
          local q = queue
          local sd = shortest_distance
          for _, e in ipairs(graph[v]) do
            local nxt = e.to
            local d = e.cost
            if (visited_forward[nxt] ~= nil) then
              goto __cont_1
            end
            local old_cost = (((cst_fwd[nxt] ~= nil)) and (cst_fwd[nxt]) or (2147483647))
            local new_cost = (cst_fwd[v] + d)
            if (new_cost < old_cost) then
              q = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(q, {node = nxt, cost = new_cost})
            cst_fwd[nxt] = new_cost
            parent[nxt] = v
          end
          if (visited_backward[nxt] ~= nil) then
            local alt = ((cst_fwd[v] + d) + cst_bwd[nxt])
            if (alt < sd) then
              sd = alt
            end
          end
          ::__cont_1::
        end
        return {queue = q, dist = sd}
      end
      function bidirectional_dij(source, destination, graph_forward, graph_backward)
        local shortest_path_distance = (-1)
        local visited_forward = {}
        local visited_backward = {}
        local cst_fwd = {}
        cst_fwd[source] = 0
        local cst_bwd = {}
        cst_bwd[destination] = 0
        local parent_forward = {}
        parent_forward[source] = ""
        local parent_backward = {}
        parent_backward[destination] = ""
        local queue_forward = {}
        queue_forward = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(queue_forward, {node = source, cost = 0})
      local queue_backward = {}
      queue_backward = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(queue_backward, {node = destination, cost = 0})
    local shortest_distance = 2147483647
    if (source == destination) then
      return 0
    end
    while (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(queue_forward) > 0) and ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(queue_backward) > 0)) do
              local idx_f = get_min_index(queue_forward)
              local item_f = queue_forward[idx_f + 1]
              queue_forward = remove_at(queue_forward, idx_f)
              local v_fwd = item_f.node
              visited_forward[v_fwd] = true
              local idx_b = get_min_index(queue_backward)
              local item_b = queue_backward[idx_b + 1]
              queue_backward = remove_at(queue_backward, idx_b)
              local v_bwd = item_b.node
              visited_backward[v_bwd] = true
              local res_f = pass_and_relaxation(graph_forward, v_fwd, visited_forward, visited_backward, cst_fwd, cst_bwd, queue_forward, parent_forward, shortest_distance)
              queue_forward = res_f.queue
              shortest_distance = res_f.dist
              local res_b = pass_and_relaxation(graph_backward, v_bwd, visited_backward, visited_forward, cst_bwd, cst_fwd, queue_backward, parent_backward, shortest_distance)
              queue_backward = res_b.queue
              shortest_distance = res_b.dist
              if ((cst_fwd[v_fwd] + cst_bwd[v_bwd]) >= shortest_distance) then
                break
              end
            end
            if (shortest_distance ~= 2147483647) then
              shortest_path_distance = shortest_distance
            end
            return shortest_path_distance
          end
          graph_fwd = {__name = "GenType1", __order = {"B", "C", "D", "E", "F", "G"}, B = {{to = "C", cost = 1}}, C = {{to = "D", cost = 1}}, D = {{to = "F", cost = 1}}, E = {{to = "B", cost = 1}, {to = "G", cost = 2}}, F = {}, G = {{to = "F", cost = 1}}}
          graph_bwd = {__name = "GenType2", __order = {"B", "C", "D", "F", "E", "G"}, B = {{to = "E", cost = 1}}, C = {{to = "B", cost = 1}}, D = {{to = "C", cost = 1}}, F = {{to = "D", cost = 1}, {to = "G", cost = 1}}, E = {}, G = {{to = "E", cost = 2}}}
          print((((type(tostring(bidirectional_dij("E", "F", graph_fwd, graph_bwd))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(tostring(bidirectional_dij("E", "F", graph_fwd, graph_bwd)))) or (tostring(bidirectional_dij("E", "F", graph_fwd, graph_bwd)))))
          local _bench_end = os.clock()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
