-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function connect(graph, a, b, w)
    local u = (a - 1)
    local v = (b - 1)
    local g = graph
    g[u + 1] = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(g[u + 1], {v, w})
  g[v + 1] = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(g[v + 1], {u, w})
return g
end
function in_list(arr, x)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr)) do
        if (arr[i + 1] == x) then
          return true
        end
        i = (i + 1)
      end
      return false
    end
    function prim(graph, s, n)
      local dist = {}
      local parent = {}
      dist[s + 1] = 0
      parent[s + 1] = (-1)
      local known = {}
      local keys = {s}
      while ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(known) < n) do
            local mini = INF
            local u = (-1)
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(keys)) do
                  local k = keys[i + 1]
                  local d = dist[k + 1]
                  if ((not in_list(known, k)) and (d < mini)) then
                    mini = d
                    u = k
                  end
                  i = (i + 1)
                end
                known = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(known, u)
              for _, e in ipairs(graph[u + 1]) do
                local v = e[0 + 1]
                local w = e[1 + 1]
                if (not in_list(keys, v)) then
                  keys = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(keys, v)
              end
              local cur = (((dist[v] ~= nil)) and (dist[v + 1]) or (INF))
              if ((not in_list(known, v)) and (w < cur)) then
                dist[v + 1] = w
                parent[v + 1] = u
              end
            end
          end
          local edges = {}
          local j = 0
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(keys)) do
                local v = keys[j + 1]
                if (v ~= s) then
                  edges = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(edges, {(v + 1), (parent[v + 1] + 1)})
              end
              j = (j + 1)
            end
            return edges
          end
          function sort_heap(h, dist)
            local a = h
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(a)) do
                  local j = 0
                  while (j < (((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(a) - i) - 1)) do
                        local dj = (((dist[a[j + 1]] ~= nil)) and (dist[a[j + 1] + 1]) or (INF))
                        local dj1 = (((dist[a[(j + 1) + 1]] ~= nil)) and (dist[a[(j + 1) + 1] + 1]) or (INF))
                        if (dj > dj1) then
                          local t = a[j + 1]
                          a[j + 1] = a[(j + 1) + 1]
                          a[(j + 1) + 1] = t
                        end
                        j = (j + 1)
                      end
                      i = (i + 1)
                    end
                    return a
                  end
                  function prim_heap(graph, s, n)
                    local dist = {}
                    local parent = {}
                    dist[s + 1] = 0
                    parent[s + 1] = (-1)
                    local h = {}
                    local i = 0
                    while (i < n) do
                      h = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(h, i)
                    i = (i + 1)
                  end
                  h = sort_heap(h, dist)
                  local known = {}
                  while ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(h) > 0) do
                        local u = h[0 + 1]
                        h = slice(h, 1, (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(h))
                            known = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(known, u)
                          for _, e in ipairs(graph[u + 1]) do
                            local v = e[0 + 1]
                            local w = e[1 + 1]
                            local cur = (((dist[v] ~= nil)) and (dist[v + 1]) or (INF))
                            if ((not in_list(known, v)) and (w < cur)) then
                              dist[v + 1] = w
                              parent[v + 1] = u
                            end
                          end
                          h = sort_heap(h, dist)
                        end
                        local edges = {}
                        local j = 0
                        while (j < n) do
                          if (j ~= s) then
                            edges = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(edges, {(j + 1), (parent[j + 1] + 1)})
                        end
                        j = (j + 1)
                      end
                      return edges
                    end
                    function print_edges(edges)
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(edges)) do
                            local e = edges[i + 1]
                            print((((type((((("(" .. tostring(e[0 + 1])) .. ", ") .. tostring(e[1 + 1])) .. ")")) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)((((("(" .. tostring(e[0 + 1])) .. ", ") .. tostring(e[1 + 1])) .. ")"))) or ((((("(" .. tostring(e[0 + 1])) .. ", ") .. tostring(e[1 + 1])) .. ")"))))
                            i = (i + 1)
                          end
                        end
                        function test_vector()
                          local x = 5
                          local G = {}
                          local i = 0
                          while (i < x) do
                            G[i + 1] = {}
                            i = (i + 1)
                          end
                          G = connect(G, 1, 2, 15)
                          G = connect(G, 1, 3, 12)
                          G = connect(G, 2, 4, 13)
                          G = connect(G, 2, 5, 5)
                          G = connect(G, 3, 2, 6)
                          G = connect(G, 3, 4, 6)
                          local mst = prim(G, 0, x)
                          print_edges(mst)
                          local mst_heap = prim_heap(G, 0, x)
                          print_edges(mst_heap)
                        end
                        INF = 1000000000
                        test_vector()
                        local _bench_end = os.clock()
                        collectgarbage()
                        local _bench_end_mem = collectgarbage('count') * 1024
                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                      end;
