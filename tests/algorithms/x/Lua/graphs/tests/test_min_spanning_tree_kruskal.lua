-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sort_edges(edges)
    local es = edges
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(es)) do
          local j = 0
          while (j < (((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(es) - i) - 1)) do
                if (es[j + 1][2 + 1] > es[(j + 1) + 1][2 + 1]) then
                  local tmp = es[j + 1]
                  es[j + 1] = es[(j + 1) + 1]
                  es[(j + 1) + 1] = tmp
                end
                j = (j + 1)
              end
              i = (i + 1)
            end
            return es
          end
          function find(parent, x)
            local r = x
            while (parent[r + 1] ~= r) do
              r = parent[r + 1]
            end
            return r
          end
          function kruskal(n, edges)
            local parent = {}
            local i = 0
            while (i < n) do
              parent = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(parent, i)
            i = (i + 1)
          end
          local sorted = sort_edges(edges)
          local mst = {}
          local e = 0
          while (e < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(sorted)) do
                if ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(mst) == (n - 1)) then
                      break
                    end
                    local edge = sorted[e + 1]
                    e = (e + 1)
                    local u = edge[0 + 1]
                    local v = edge[1 + 1]
                    local w = edge[2 + 1]
                    local ru = find(parent, u)
                    local rv = find(parent, v)
                    if (ru ~= rv) then
                      parent[ru + 1] = rv
                      mst = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(mst, {u, v, w})
                  end
                end
                return mst
              end
              function edges_equal(a, b)
                if ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(a) ~= (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(b)) then
                          return false
                        end
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(a)) do
                              local e1 = a[i + 1]
                              local e2 = b[i + 1]
                              if (((e1[0 + 1] ~= e2[0 + 1]) or (e1[1 + 1] ~= e2[1 + 1])) or (e1[2 + 1] ~= e2[2 + 1])) then
                                return false
                              end
                              i = (i + 1)
                            end
                            return true
                          end
                          function main()
                            local num_nodes = 9
                            local edges = {{0, 1, 4}, {0, 7, 8}, {1, 2, 8}, {7, 8, 7}, {7, 6, 1}, {2, 8, 2}, {8, 6, 6}, {2, 3, 7}, {2, 5, 4}, {6, 5, 2}, {3, 5, 14}, {3, 4, 9}, {5, 4, 10}, {1, 7, 11}}
                            local expected = {{7, 6, 1}, {2, 8, 2}, {6, 5, 2}, {0, 1, 4}, {2, 5, 4}, {2, 3, 7}, {0, 7, 8}, {3, 4, 9}}
                            local result = kruskal(num_nodes, edges)
                            local sorted_result = sort_edges(result)
                            local sorted_expected = sort_edges(expected)
                            print((((type(
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(sorted_result)) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(sorted_result))) or (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(sorted_result))))
                            if edges_equal(sorted_expected, sorted_result) then
                              print(((true) and (1) or (0)))
                            else
                              print(((false) and (1) or (0)))
                            end
                          end
                          main()
                          local _bench_end = os.clock()
                          collectgarbage()
                          local _bench_end_mem = collectgarbage('count') * 1024
                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                        end;
