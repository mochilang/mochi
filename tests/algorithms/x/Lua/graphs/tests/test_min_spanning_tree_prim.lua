-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function prims_algorithm(adjacency)
    local visited = {}
    visited[0 + 1] = true
    local mst = {}
    local count = 1
    local total = 0
    for k in pairs(adjacency) do
      total = (total + 1)
    end
    while (count < total) do
      local best_u = 0
      local best_v = 0
      local best_cost = 2147483647
      for u_str in pairs(adjacency) do
        local u = math.floor(tonumber(u_str) or 0)
        if visited[u + 1] then
          for _, n in ipairs(adjacency[u + 1]) do
            if ((not visited[n.node + 1]) and (n.cost < best_cost)) then
              best_cost = n.cost
              best_u = u
              best_v = n.node
            end
          end
        end
      end
      visited[best_v + 1] = true
      mst = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(mst, {u = best_u, v = best_v})
    count = (count + 1)
  end
  return mst
end
function test_prim_successful_result()
  local edges = {{0, 1, 4}, {0, 7, 8}, {1, 2, 8}, {7, 8, 7}, {7, 6, 1}, {2, 8, 2}, {8, 6, 6}, {2, 3, 7}, {2, 5, 4}, {6, 5, 2}, {3, 5, 14}, {3, 4, 9}, {5, 4, 10}, {1, 7, 11}}
  local adjacency = {}
  for _, e in ipairs(edges) do
    local u = e[0 + 1]
    local v = e[1 + 1]
    local w = e[2 + 1]
    if (not (adjacency[u] ~= nil)) then
      adjacency[u + 1] = {}
    end
    if (not (adjacency[v] ~= nil)) then
      adjacency[v + 1] = {}
    end
    adjacency[u + 1] = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(adjacency[u + 1], {node = v, cost = w})
  adjacency[v + 1] = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(adjacency[v + 1], {node = u, cost = w})
end
local result = prims_algorithm(adjacency)
local seen = {}
for _, e in ipairs(result) do
  local key1 = ((tostring(e.u) .. ",") .. tostring(e.v))
  local key2 = ((tostring(e.v) .. ",") .. tostring(e.u))
  seen[key1] = true
  seen[key2] = true
end
local expected = {{7, 6, 1}, {2, 8, 2}, {6, 5, 2}, {0, 1, 4}, {2, 5, 4}, {2, 3, 7}, {0, 7, 8}, {3, 4, 9}}
for _, ans in ipairs(expected) do
  local key = ((tostring(ans[0 + 1]) .. ",") .. tostring(ans[1 + 1]))
  if (not seen[key]) then
    return false
  end
end
return true
end
print((((type(test_prim_successful_result()) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(test_prim_successful_result())) or (test_prim_successful_result())))
print(((true) and (1) or (0)))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
