-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function uf_make(n)
    local p = {}
    local r = {}
    local i = 0
    while (i < n) do
      p = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(p, i)
    r = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(r, 0)
  i = (i + 1)
end
return {parent = p, rank = r}
end
function uf_find(uf, x)
  local p = uf.parent
  if (p[x + 1] ~= x) then
    local res = uf_find({parent = p, rank = uf.rank}, p[x + 1])
    p = res.uf.parent
    p[x + 1] = res.root
    return {root = res.root, uf = {parent = p, rank = res.uf.rank}}
  end
  return {root = x, uf = uf}
end
function uf_union(uf, x, y)
  local fr1 = uf_find(uf, x)
  local uf1 = fr1.uf
  local root1 = fr1.root
  local fr2 = uf_find(uf1, y)
  uf1 = fr2.uf
  local root2 = fr2.root
  if (root1 == root2) then
    return uf1
  end
  local p = uf1.parent
  local r = uf1.rank
  if (r[root1 + 1] > r[root2 + 1]) then
    p[root2 + 1] = root1
  else
    if (r[root1 + 1] < r[root2 + 1]) then
      p[root1 + 1] = root2
    else
      p[root2 + 1] = root1
      r[root1 + 1] = (r[root1 + 1] + 1)
    end
  end
  return {parent = p, rank = r}
end
function boruvka(n, edges)
  local uf = uf_make(n)
  local num_components = n
  local mst = {}
  while (num_components > 1) do
    local cheap = {}
    local i = 0
    while (i < n) do
      cheap = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(cheap, (0 - 1))
    i = (i + 1)
  end
  local idx = 0
  while (idx < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(edges)) do
        local e = edges[idx + 1]
        local fr1 = uf_find(uf, e.u)
        uf = fr1.uf
        local set1 = fr1.root
        local fr2 = uf_find(uf, e.v)
        uf = fr2.uf
        local set2 = fr2.root
        if (set1 ~= set2) then
          if ((cheap[set1 + 1] == (0 - 1)) or (edges[cheap[set1 + 1] + 1].w > e.w)) then
            cheap[set1 + 1] = idx
          end
          if ((cheap[set2 + 1] == (0 - 1)) or (edges[cheap[set2 + 1] + 1].w > e.w)) then
            cheap[set2 + 1] = idx
          end
        end
        idx = (idx + 1)
      end
      local v = 0
      while (v < n) do
        local idxe = cheap[v + 1]
        if (idxe ~= (0 - 1)) then
          local e = edges[idxe + 1]
          local fr1 = uf_find(uf, e.u)
          uf = fr1.uf
          local set1 = fr1.root
          local fr2 = uf_find(uf, e.v)
          uf = fr2.uf
          local set2 = fr2.root
          if (set1 ~= set2) then
            mst = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(mst, e)
          uf = uf_union((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(uf), set1, set2)
          num_components = (num_components - 1)
        end
      end
      v = (v + 1)
    end
  end
  return mst
end
function main()
  local edges = {{u = 0, v = 1, w = 1}, {u = 0, v = 2, w = 2}, {u = 2, v = 3, w = 3}}
  local mst = boruvka(4, edges)
  for _, e in ipairs(mst) do
    print((((type(((((tostring(e.u) .. " - ") .. tostring(e.v)) .. " : ") .. tostring(e.w))) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(((((tostring(e.u) .. " - ") .. tostring(e.v)) .. " : ") .. tostring(e.w)))) or (((((tostring(e.u) .. " - ") .. tostring(e.v)) .. " : ") .. tostring(e.w)))))
  end
end
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
