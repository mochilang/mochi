-- Generated by Mochi v0.10.65 on 2025-08-14 17:09 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function new_graph(num_nodes)
    return {num_nodes = num_nodes, edges = {}, component = {}}
  end
  function add_edge(g, u, v, w)
    local es = g.edges
    es = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(es, {u = u, v = v, w = w})
  return {num_nodes = g.num_nodes, edges = es, component = g.component}
end
function find_component(g, node)
  if (g.component[node] == node) then
    return node
  end
  return find_component(g, g.component[node])
end
function set_component(g, node)
  if (g.component[node] ~= node) then
    local comp = g.component
    local k = 0
    while (k < g.num_nodes) do
      comp[k] = find_component(g, k)
      k = (k + 1)
    end
    g = {num_nodes = g.num_nodes, edges = g.edges, component = comp}
  end
  return g
end
function union(g, component_size, u, v)
  local comp_size = component_size
  local comp = g.component
  if (comp_size[u + 1] <= comp_size[v + 1]) then
    comp[u] = v
    comp_size[v + 1] = (comp_size[v + 1] + comp_size[u + 1])
    g = {num_nodes = g.num_nodes, edges = g.edges, component = comp}
    g = set_component(g, u)
  else
    comp[v] = u
    comp_size[u + 1] = (comp_size[u + 1] + comp_size[v + 1])
    g = {num_nodes = g.num_nodes, edges = g.edges, component = comp}
    g = set_component(g, v)
  end
  return {graph = g, component_size = comp_size}
end
function create_empty_edges(n)
  local res = {}
  local i = 0
  while (i < n) do
    res = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(res, {u = (0 - 1), v = (0 - 1), w = (0 - 1)})
  i = (i + 1)
end
return res
end
function boruvka(g)
  local component_size = {}
  local i = 0
  while (i < g.num_nodes) do
    component_size = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(component_size, 1)
  local comp = g.component
  comp[i] = i
  g = {num_nodes = g.num_nodes, edges = g.edges, component = comp}
  i = (i + 1)
end
local mst_weight = 0
local num_components = g.num_nodes
local minimum_weight_edge = create_empty_edges(g.num_nodes)
while (num_components > 1) do
  for _, e in ipairs(g.edges) do
    local u = e.u
    local v = e.v
    local w = e.w
    local u_comp = g.component[u]
    local v_comp = g.component[v]
    if (u_comp ~= v_comp) then
      local current_u = minimum_weight_edge[u_comp + 1]
      if ((current_u.u == (0 - 1)) or (current_u.w > w)) then
        minimum_weight_edge[u_comp + 1] = {u = u, v = v, w = w}
      end
      local current_v = minimum_weight_edge[v_comp + 1]
      if ((current_v.u == (0 - 1)) or (current_v.w > w)) then
        minimum_weight_edge[v_comp + 1] = {u = u, v = v, w = w}
      end
    end
  end
  for _, e in ipairs(minimum_weight_edge) do
    if (e.u ~= (0 - 1)) then
      local u = e.u
      local v = e.v
      local w = e.w
      local u_comp = g.component[u]
      local v_comp = g.component[v]
      if (u_comp ~= v_comp) then
        mst_weight = (mst_weight + w)
        local res = union(g, component_size, u_comp, v_comp)
        g = res.graph
        component_size = res.component_size
        print((((type((((("Added edge [" .. _str(u)) .. " - ") .. _str(v)) .. "]")) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)((((("Added edge [" .. _str(u)) .. " - ") .. _str(v)) .. "]"))) or ((((("Added edge [" .. _str(u)) .. " - ") .. _str(v)) .. "]"))))
        print((((type(("Added weight: " .. _str(w))) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(("Added weight: " .. _str(w)))) or (("Added weight: " .. _str(w)))))
        print("")
        num_components = (num_components - 1)
      end
    end
  end
  minimum_weight_edge = create_empty_edges(g.num_nodes)
end
print((((type(("The total weight of the minimal spanning tree is: " .. _str(mst_weight))) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(("The total weight of the minimal spanning tree is: " .. _str(mst_weight)))) or (("The total weight of the minimal spanning tree is: " .. _str(mst_weight)))))
return mst_weight
end
function main()
  local g = new_graph(8)
  local edges = {{0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4}, {3, 4, 8}, {4, 5, 10}, {4, 6, 6}, {4, 7, 5}, {5, 7, 15}, {6, 7, 4}}
  for _, e in ipairs(edges) do
    g = add_edge(g, e[0 + 1], e[1 + 1], e[2 + 1])
  end
  boruvka(g)
end
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
