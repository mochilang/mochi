-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function dfs_skip(graph, visited, skip, at)
    visited[at + 1] = true
    local count = 1
    for _, to in ipairs(graph[at + 1]) do
      if (to == skip) then
        goto __cont_1
      end
      if (visited[to] == false) then
        count = (count + dfs_skip(graph, visited, skip, to))
      end
      ::__cont_1::
    end
    return count
  end
  function articulation_points(graph)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(graph)
        local result = {}
        local v = 0
        while (v < n) do
          local visited = {}
          local i = 0
          while (i < n) do
            visited = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(visited, false)
          i = (i + 1)
        end
        local start = 0
        while ((start == v) and (start < n)) do
          start = (start + 1)
        end
        local reach = dfs_skip(graph, visited, v, start)
        if (reach < (n - 1)) then
          result = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(result, v)
        print(v)
      end
      v = (v + 1)
    end
    return result
  end
  function main()
    local graph = {{1, 2}, {0, 2}, {0, 1, 3, 5}, {2, 4}, {3}, {2, 6, 8}, {5, 7}, {6, 8}, {5, 7}}
    articulation_points(graph)
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
