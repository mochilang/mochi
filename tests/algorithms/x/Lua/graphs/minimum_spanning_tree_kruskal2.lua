-- Generated by Mochi v0.10.65 on 2025-08-14 17:09 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function new_graph()
    return {edges = {}, num_nodes = 0}
  end
  function add_edge(g, u, v, w)
    local es = g.edges
    es = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(es, {u = u, v = v, w = w})
  local n = g.num_nodes
  if (u > n) then
    n = u
  end
  if (v > n) then
    n = v
  end
  return {edges = es, num_nodes = n}
end
function make_ds(n)
  local parent = {}
  local rank = {}
  local i = 0
  while (i <= n) do
    parent = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(parent, i)
  rank = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(rank, 0)
i = (i + 1)
end
return {parent = parent, rank = rank}
end
function find_set(ds, x)
  if (ds.parent[x + 1] == x) then
    return {ds = ds, root = x}
  end
  local res = find_set(ds, ds.parent[x + 1])
  local p = res.ds.parent
  p[x + 1] = res.root
  return {ds = {parent = p, rank = res.ds.rank}, root = res.root}
end
function union_set(ds, x, y)
  local fx = find_set(ds, x)
  local ds1 = fx.ds
  local x_root = fx.root
  local fy = find_set(ds1, y)
  local ds2 = fy.ds
  local y_root = fy.root
  if (x_root == y_root) then
    return ds2
  end
  local p = ds2.parent
  local r = ds2.rank
  if (r[x_root + 1] > r[y_root + 1]) then
    p[y_root + 1] = x_root
  else
    p[x_root + 1] = y_root
    if (r[x_root + 1] == r[y_root + 1]) then
      r[y_root + 1] = (r[y_root + 1] + 1)
    end
  end
  return {parent = p, rank = r}
end
function sort_edges(edges)
  local arr = edges
  local i = 1
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr)) do
        local key = arr[i + 1]
        local j = (i - 1)
        while (j >= 0) do
          local temp = arr[j + 1]
          if ((temp.w > key.w) or ((temp.w == key.w) and ((temp.u > key.u) or ((temp.u == key.u) and (temp.v > key.v))))) then
            arr[(j + 1) + 1] = temp
            j = (j - 1)
          else
            break
          end
        end
        arr[(j + 1) + 1] = key
        i = (i + 1)
      end
      return arr
    end
    function kruskal(g)
      local edges = sort_edges(g.edges)
      local ds = make_ds(g.num_nodes)
      local mst_edges = {}
      local i = 0
      local added = 0
      while ((added < (g.num_nodes - 1)) and (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(edges))) do
            local e = edges[i + 1]
            i = (i + 1)
            local fu = find_set(ds, e.u)
            ds = fu.ds
            local ru = fu.root
            local fv = find_set(ds, e.v)
            ds = fv.ds
            local rv = fv.root
            if (ru ~= rv) then
              mst_edges = (function(lst, item)
              local res = {table.unpack(lst or {})}
              res[#res+1] = item
              return res
            end)(mst_edges, e)
            added = (added + 1)
            ds = union_set(ds, ru, rv)
          end
        end
        return {edges = mst_edges, num_nodes = g.num_nodes}
      end
      function print_mst(g)
        local es = sort_edges(g.edges)
        for _, e in ipairs(es) do
          print((((type(((((_str(e.u) .. "-") .. _str(e.v)) .. ":") .. _str(e.w))) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(((((_str(e.u) .. "-") .. _str(e.v)) .. ":") .. _str(e.w)))) or (((((_str(e.u) .. "-") .. _str(e.v)) .. ":") .. _str(e.w)))))
        end
      end
      function main()
        local g = new_graph()
        g = add_edge(g, 1, 2, 1)
        g = add_edge(g, 2, 3, 2)
        g = add_edge(g, 3, 4, 1)
        g = add_edge(g, 3, 5, 100)
        g = add_edge(g, 4, 5, 5)
        local mst = kruskal(g)
        print_mst(mst)
      end
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
