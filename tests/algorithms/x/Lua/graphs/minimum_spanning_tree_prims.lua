-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pairs_to_string(edges)
    local s = "["
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(edges)) do
          local e = edges[i + 1]
          s = (((((s .. "(") .. tostring(e.u)) .. ", ") .. tostring(e.v)) .. ")")
          if (i < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(edges) - 1)) then
                s = (s .. ", ")
              end
              i = (i + 1)
            end
            return (s .. "]")
          end
          function prim_mst(graph)
            local n = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(graph)
                local visited = {}
                local dist = {}
                local parent = {}
                local i = 0
                while (i < n) do
                  visited = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(visited, false)
                dist = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(dist, INF)
              parent = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(parent, (-1))
            i = (i + 1)
          end
          dist[0 + 1] = 0
          local result = {}
          local count = 0
          while (count < n) do
            local min_val = INF
            local u = 0
            local v = 0
            while (v < n) do
              if ((visited[v + 1] == false) and (dist[v + 1] < min_val)) then
                min_val = dist[v + 1]
                u = v
              end
              v = (v + 1)
            end
            if (min_val == INF) then
              break
            end
            visited[u + 1] = true
            if (u ~= 0) then
              result = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(result, {u = parent[u + 1], v = u})
          end
          for _, e in ipairs(graph[u + 1]) do
            if ((visited[e.to] == false) and (e.weight < dist[e.to])) then
              dist[e.to] = e.weight
              parent[e.to] = u
            end
          end
          count = (count + 1)
        end
        return result
      end
      INF = 1000000000
      adjacency_list = {{{to = 1, weight = 1}, {to = 3, weight = 3}}, {{to = 0, weight = 1}, {to = 2, weight = 6}, {to = 3, weight = 5}, {to = 4, weight = 1}}, {{to = 1, weight = 6}, {to = 4, weight = 5}, {to = 5, weight = 2}}, {{to = 0, weight = 3}, {to = 1, weight = 5}, {to = 4, weight = 1}}, {{to = 1, weight = 1}, {to = 2, weight = 5}, {to = 3, weight = 1}, {to = 5, weight = 4}}, {{to = 2, weight = 2}, {to = 4, weight = 4}}}
      mst_edges = prim_mst(adjacency_list)
      print((((type(pairs_to_string(mst_edges)) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(pairs_to_string(mst_edges))) or (pairs_to_string(mst_edges))))
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
