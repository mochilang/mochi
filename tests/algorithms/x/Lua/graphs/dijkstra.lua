-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  G = {__name = "GenType1", __order = {"A", "B", "C", "D", "E", "F"}, A = {__name = "GenType2", __order = {"B", "C"}, B = 2, C = 5}, B = {__name = "GenType3", __order = {"A", "D", "E", "F"}, A = 2, D = 3, E = 1, F = 1}, C = {__name = "GenType4", __order = {"A", "F"}, A = 5, F = 3}, D = {__name = "GenType5", __order = {"B"}, B = 3}, E = {__name = "GenType6", __order = {"B", "F"}, B = 4, F = 3}, F = {__name = "GenType7", __order = {"C", "E"}, C = 3, E = 3}}
  heap = {{node = "E", cost = 0}}
  visited = {}
  result = (-1)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(heap) > 0) do
        best_idx = 0
        i = 1
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(heap)) do
              if (heap[i + 1].cost < heap[best_idx + 1].cost) then
                best_idx = i
              end
              i = (i + 1)
            end
            best = heap[best_idx + 1]
            new_heap = {}
            j = 0
            while (j < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(heap)) do
                  if (j ~= best_idx) then
                    new_heap = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(new_heap, heap[j + 1])
                end
                j = (j + 1)
              end
              heap = new_heap
              u = best.node
              cost = best.cost
              if (visited[u] ~= nil) then
                goto __cont_1
              end
              visited[u] = true
              if (u == "C") then
                result = cost
                break
              end
              for v in pairs(G[u]) do
                if (visited[v] ~= nil) then
                  goto __cont_2
                end
                next_cost = (cost + G[u][v])
                heap = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(heap, {node = v, cost = next_cost})
              ::__cont_2::
            end
            ::__cont_1::
          end
          print(result)
          G2 = {__name = "GenType8", __order = {"B", "C", "D", "E", "F"}, B = {__name = "GenType9", __order = {"C"}, C = 1}, C = {__name = "GenType10", __order = {"D"}, D = 1}, D = {__name = "GenType11", __order = {"F"}, F = 1}, E = {__name = "GenType12", __order = {"B", "F"}, B = 1, F = 3}, F = {}}
          heap2 = {{node = "E", cost = 0}}
          visited2 = {}
          result2 = (-1)
          while ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(heap2) > 0) do
                best2_idx = 0
                i2 = 1
                while (i2 < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(heap2)) do
                      if (heap2[i2 + 1].cost < heap2[best2_idx + 1].cost) then
                        best2_idx = i2
                      end
                      i2 = (i2 + 1)
                    end
                    best2 = heap2[best2_idx + 1]
                    new_heap2 = {}
                    j2 = 0
                    while (j2 < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(heap2)) do
                          if (j2 ~= best2_idx) then
                            new_heap2 = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(new_heap2, heap2[j2 + 1])
                        end
                        j2 = (j2 + 1)
                      end
                      heap2 = new_heap2
                      u2 = best2.node
                      cost2 = best2.cost
                      if (visited2[u2] ~= nil) then
                        goto __cont_3
                      end
                      visited2[u2] = true
                      if (u2 == "F") then
                        result2 = cost2
                        break
                      end
                      for v2 in pairs(G2[u2]) do
                        if (visited2[v2] ~= nil) then
                          goto __cont_4
                        end
                        next_cost2 = (cost2 + G2[u2][v2])
                        heap2 = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(heap2, {node = v2, cost = next_cost2})
                      ::__cont_4::
                    end
                    ::__cont_3::
                  end
                  print(result2)
                  G3 = {__name = "GenType13", __order = {"B", "C", "D", "E", "F", "G"}, B = {__name = "GenType14", __order = {"C"}, C = 1}, C = {__name = "GenType15", __order = {"D"}, D = 1}, D = {__name = "GenType16", __order = {"F"}, F = 1}, E = {__name = "GenType17", __order = {"B", "G"}, B = 1, G = 2}, F = {}, G = {__name = "GenType18", __order = {"F"}, F = 1}}
                  heap3 = {{node = "E", cost = 0}}
                  visited3 = {}
                  result3 = (-1)
                  while ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(heap3) > 0) do
                        best3_idx = 0
                        i3 = 1
                        while (i3 < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(heap3)) do
                              if (heap3[i3 + 1].cost < heap3[best3_idx + 1].cost) then
                                best3_idx = i3
                              end
                              i3 = (i3 + 1)
                            end
                            best3 = heap3[best3_idx + 1]
                            new_heap3 = {}
                            j3 = 0
                            while (j3 < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(heap3)) do
                                  if (j3 ~= best3_idx) then
                                    new_heap3 = (function(lst, item)
                                    local res = {table.unpack(lst or {})}
                                    table.insert(res, item)
                                    return res
                                  end)(new_heap3, heap3[j3 + 1])
                                end
                                j3 = (j3 + 1)
                              end
                              heap3 = new_heap3
                              u3 = best3.node
                              cost3 = best3.cost
                              if (visited3[u3] ~= nil) then
                                goto __cont_5
                              end
                              visited3[u3] = true
                              if (u3 == "F") then
                                result3 = cost3
                                break
                              end
                              for v3 in pairs(G3[u3]) do
                                if (visited3[v3] ~= nil) then
                                  goto __cont_6
                                end
                                next_cost3 = (cost3 + G3[u3][v3])
                                heap3 = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(heap3, {node = v3, cost = next_cost3})
                              ::__cont_6::
                            end
                            ::__cont_5::
                          end
                          print(result3)
                          local _bench_end = os.clock()
                          collectgarbage()
                          local _bench_end_mem = collectgarbage('count') * 1024
                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                        end;
