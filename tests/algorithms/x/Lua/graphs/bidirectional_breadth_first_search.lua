-- Generated by Mochi v0.10.65 on 2025-08-14 17:09 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function key(y, x)
    return ((_str(y) .. ",") .. _str(x))
  end
  function parse_int(s)
    local value = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          local c = string.sub(s, (i + 1), (i + 1))
          value = ((value * 10) + math.floor(tonumber(c) or 0))
          i = (i + 1)
        end
        return value
      end
      function parse_key(k)
        local idx = 0
        while ((idx < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(k)) and (_substring(k, idx, (idx + 1)) ~= ",")) do
              idx = (idx + 1)
            end
            local y = parse_int(_substring(k, 0, idx))
            local x = parse_int(_substring(k, (idx + 1), (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(k)))
                return {y, x}
              end
              function neighbors(pos)
                local coords = parse_key(pos)
                local y = coords[0 + 1]
                local x = coords[1 + 1]
                local res = {}
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(delta)) do
                      local ny = (y + delta[i + 1][0 + 1])
                      local nx = (x + delta[i + 1][1 + 1])
                      if ((((ny >= 0) and (ny < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(grid))) and (nx >= 0)) and (nx < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(grid[0 + 1]))) then
                                if (grid[ny + 1][nx + 1] == 0) then
                                  res = (function(lst, item)
                                  local res = {table.unpack(lst or {})}
                                  res[#res+1] = item
                                  return res
                                end)(res, key(ny, nx))
                              end
                            end
                            i = (i + 1)
                          end
                          return res
                        end
                        function reverse_list(lst)
                          local res = {}
                          local i = ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(lst) - 1)
                              while (i >= 0) do
                                res = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                res[#res+1] = item
                                return res
                              end)(res, lst[i + 1])
                              i = (i - 1)
                            end
                            return res
                          end
                          function bfs(start, goal)
                            local queue = {}
                            queue = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            res[#res+1] = item
                            return res
                          end)(queue, {pos = start, path = {start}})
                          local head = 0
                          local visited = {__name = "GenType1", __order = {"start"}, start = true}
                          while (head < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(queue)) do
                                local node = queue[head + 1]
                                head = (head + 1)
                                if (node.pos == goal) then
                                  return node.path
                                end
                                local neigh = neighbors(node.pos)
                                local i = 0
                                while (i < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(neigh)) do
                                      local npos = neigh[i + 1]
                                      if (not (visited[npos] ~= nil)) then
                                        visited[npos] = true
                                        local new_path = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        res[#res+1] = item
                                        return res
                                      end)(node.path, npos)
                                      queue = (function(lst, item)
                                      local res = {table.unpack(lst or {})}
                                      res[#res+1] = item
                                      return res
                                    end)(queue, {pos = npos, path = new_path})
                                  end
                                  i = (i + 1)
                                end
                              end
                              return {}
                            end
                            function bidirectional_bfs(start, goal)
                              local queue_f = {}
                              local queue_b = {}
                              queue_f = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              res[#res+1] = item
                              return res
                            end)(queue_f, {pos = start, path = {start}})
                            queue_b = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            res[#res+1] = item
                            return res
                          end)(queue_b, {pos = goal, path = {goal}})
                          local head_f = 0
                          local head_b = 0
                          local visited_f = {__name = "GenType2", __order = {"start"}, start = {start}}
                          local visited_b = {__name = "GenType3", __order = {"goal"}, goal = {goal}}
                          while ((head_f < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(queue_f)) and (head_b < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(queue_b))) do
                                    local node_f = queue_f[head_f + 1]
                                    head_f = (head_f + 1)
                                    local neigh_f = neighbors(node_f.pos)
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(neigh_f)) do
                                          local npos = neigh_f[i + 1]
                                          if (not (visited_f[npos] ~= nil)) then
                                            local new_path = (function(lst, item)
                                            local res = {table.unpack(lst or {})}
                                            res[#res+1] = item
                                            return res
                                          end)(node_f.path, npos)
                                          visited_f[npos] = new_path
                                          if (visited_b[npos] ~= nil) then
                                            local rev = reverse_list(visited_b[npos])
                                            local j = 1
                                            while (j < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(rev)) do
                                                  new_path = (function(lst, item)
                                                  local res = {table.unpack(lst or {})}
                                                  res[#res+1] = item
                                                  return res
                                                end)(new_path, rev[j + 1])
                                                j = (j + 1)
                                              end
                                              return new_path
                                            end
                                            queue_f = (function(lst, item)
                                            local res = {table.unpack(lst or {})}
                                            res[#res+1] = item
                                            return res
                                          end)(queue_f, {pos = npos, path = new_path})
                                        end
                                        i = (i + 1)
                                      end
                                      local node_b = queue_b[head_b + 1]
                                      head_b = (head_b + 1)
                                      local neigh_b = neighbors(node_b.pos)
                                      local j = 0
                                      while (j < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(neigh_b)) do
                                            local nposb = neigh_b[j + 1]
                                            if (not (visited_b[nposb] ~= nil)) then
                                              local new_path_b = (function(lst, item)
                                              local res = {table.unpack(lst or {})}
                                              res[#res+1] = item
                                              return res
                                            end)(node_b.path, nposb)
                                            visited_b[nposb] = new_path_b
                                            if (visited_f[nposb] ~= nil) then
                                              local path_f = visited_f[nposb]
                                              new_path_b = reverse_list(new_path_b)
                                              local t = 1
                                              while (t < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(new_path_b)) do
                                                    path_f = (function(lst, item)
                                                    local res = {table.unpack(lst or {})}
                                                    res[#res+1] = item
                                                    return res
                                                  end)(path_f, new_path_b[t + 1])
                                                  t = (t + 1)
                                                end
                                                return path_f
                                              end
                                              queue_b = (function(lst, item)
                                              local res = {table.unpack(lst or {})}
                                              res[#res+1] = item
                                              return res
                                            end)(queue_b, {pos = nposb, path = new_path_b})
                                          end
                                          j = (j + 1)
                                        end
                                      end
                                      return {start}
                                    end
                                    function path_to_string(path)
                                      if ((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(path) == 0) then
                                            return "[]"
                                          end
                                          local first = parse_key(path[0 + 1])
                                          local s = (((("[(" .. _str(first[0 + 1])) .. ", ") .. _str(first[1 + 1])) .. ")")
                                          local i = 1
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(path)) do
                                                local c = parse_key(path[i + 1])
                                                s = (((((s .. ", (") .. _str(c[0 + 1])) .. ", ") .. _str(c[1 + 1])) .. ")")
                                                i = (i + 1)
                                              end
                                              s = (s .. "]")
                                              return s
                                            end
                                            grid = {{0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0}, {1, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0}}
                                            delta = {{(-1), 0}, {0, (-1)}, {1, 0}, {0, 1}}
                                            start = key(0, 0)
                                            goal = key(((function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(grid) - 1), ((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(grid[0 + 1]) - 1))
                                                    path1 = bfs(start, goal)
                                                    print((((type(path_to_string(path1)) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(path_to_string(path1))) or (path_to_string(path1))))
                                                    path2 = bidirectional_bfs(start, goal)
                                                    print((((type(path_to_string(path2)) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(path_to_string(path2))) or (path_to_string(path2))))
                                                    local _bench_end = os.clock()
                                                    collectgarbage()
                                                    local _bench_end_mem = collectgarbage('count') * 1024
                                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                  end;
