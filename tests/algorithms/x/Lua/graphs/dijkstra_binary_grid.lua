-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function key(p)
    return ((tostring(p.x) .. ",") .. tostring(p.y))
  end
  function path_to_string(path)
    local s = "["
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(path)) do
          local pt = path[i + 1]
          s = (((((s .. "(") .. tostring(pt.x)) .. ", ") .. tostring(pt.y)) .. ")")
          if (i < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(path) - 1)) then
                s = (s .. ", ")
              end
              i = (i + 1)
            end
            s = (s .. "]")
            return s
          end
          function dijkstra(grid, source, destination, allow_diagonal)
            local rows = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(grid)
                local cols = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(grid[0 + 1])
                    local dx = {(-1), 1, 0, 0}
                    local dy = {0, 0, (-1), 1}
                    if allow_diagonal then
                      dx = (function(a, b)
                      local res = {table.unpack(a or {})}
                      for _, v in ipairs(b or {}) do
                        res[#res+1] = v
                      end
                      return res
                    end)(dx, {(-1), (-1), 1, 1})
                    dy = (function(a, b)
                    local res = {table.unpack(a or {})}
                    for _, v in ipairs(b or {}) do
                      res[#res+1] = v
                    end
                    return res
                  end)(dy, {(-1), 1, (-1), 1})
                end
                local INF = 1e+12
                local queue = {source}
                local front = 0
                local dist_map = {[key(source)] = 0}
                local prev = {}
                while (front < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(queue)) do
                      local current = queue[front + 1]
                      front = (front + 1)
                      local cur_key = key(current)
                      if ((current.x == destination.x) and (current.y == destination.y)) then
                        break
                      end
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(dx)) do
                            local nx = (current.x + dx[i + 1])
                            local ny = (current.y + dy[i + 1])
                            if ((((nx >= 0) and (nx < rows)) and (ny >= 0)) and (ny < cols)) then
                              if (grid[nx + 1][ny + 1] == 1) then
                                local n_key = ((tostring(nx) .. ",") .. tostring(ny))
                                if (not (dist_map[n_key] ~= nil)) then
                                  dist_map[n_key] = (dist_map[cur_key] + 1)
                                  prev[n_key] = current
                                  queue = (function(lst, item)
                                  local res = {table.unpack(lst or {})}
                                  table.insert(res, item)
                                  return res
                                end)(queue, {x = nx, y = ny})
                              end
                            end
                          end
                          i = (i + 1)
                        end
                      end
                      local dest_key = key(destination)
                      if (dist_map[dest_key] ~= nil) then
                        local path_rev = {destination}
                        local step_key = dest_key
                        local step_pt = destination
                        while (step_key ~= key(source)) do
                          step_pt = prev[step_key]
                          step_key = key(step_pt)
                          path_rev = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(path_rev, step_pt)
                      end
                      local path = {}
                      local k = ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(path_rev) - 1)
                          while (k >= 0) do
                            path = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(path, path_rev[k + 1])
                          k = (k - 1)
                        end
                        return {distance = dist_map[dest_key], path = path}
                      end
                      return {distance = INF, path = {}}
                    end
                    function print_result(res)
                      print((((type(((tostring(res.distance) .. ", ") .. path_to_string(res.path))) == "table")) and (
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(((tostring(res.distance) .. ", ") .. path_to_string(res.path)))) or (((tostring(res.distance) .. ", ") .. path_to_string(res.path)))))
                    end
                    grid1 = {{1, 1, 1}, {0, 1, 0}, {0, 1, 1}}
                    print_result(dijkstra(grid1, {x = 0, y = 0}, {x = 2, y = 2}, false))
                    print_result(dijkstra(grid1, {x = 0, y = 0}, {x = 2, y = 2}, true))
                    grid2 = {{1, 1, 1}, {0, 0, 1}, {0, 1, 1}}
                    print_result(dijkstra(grid2, {x = 0, y = 0}, {x = 2, y = 2}, false))
                    local _bench_end = os.clock()
                    collectgarbage()
                    local _bench_end_mem = collectgarbage('count') * 1024
                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                  end;
