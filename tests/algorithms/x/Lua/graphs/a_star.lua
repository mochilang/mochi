-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function iabs(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function search(grid, init, goal, cost, heuristic)
    local closed = {}
    local r = 0
    while (r < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(grid)) do
          local row = {}
          local c = 0
          while (c < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(grid[0 + 1])) do
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(row, 0)
              c = (c + 1)
            end
            closed = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(closed, row)
          r = (r + 1)
        end
        closed[init[0 + 1] + 1][init[1 + 1] + 1] = 1
        local action = {}
        r = 0
        while (r < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(grid)) do
              local row = {}
              local c = 0
              while (c < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(grid[0 + 1])) do
                    row = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(row, 0)
                  c = (c + 1)
                end
                action = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(action, row)
              r = (r + 1)
            end
            local x = init[0 + 1]
            local y = init[1 + 1]
            local g = 0
            local f = (g + heuristic[x + 1][y + 1])
            local cell = {{f, g, x, y}}
            local found = false
            local resign = false
            while ((not found) and (not resign)) do
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(cell) == 0) then
                    panic("Algorithm is unable to find solution")
                  else
                    local best_i = 0
                    local best_f = cell[0 + 1][0 + 1]
                    local i = 1
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(cell)) do
                          if (cell[i + 1][0 + 1] < best_f) then
                            best_f = cell[i + 1][0 + 1]
                            best_i = i
                          end
                          i = (i + 1)
                        end
                        local next_cell = cell[best_i + 1]
                        local new_cell = {}
                        i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(cell)) do
                              if (i ~= best_i) then
                                new_cell = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(new_cell, cell[i + 1])
                            end
                            i = (i + 1)
                          end
                          cell = new_cell
                          x = next_cell[2 + 1]
                          y = next_cell[3 + 1]
                          g = next_cell[1 + 1]
                          if ((x == goal[0 + 1]) and (y == goal[1 + 1])) then
                            found = true
                          else
                            local d = 0
                            while (d < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(DIRECTIONS)) do
                                  local x2 = (x + DIRECTIONS[d + 1][0 + 1])
                                  local y2 = (y + DIRECTIONS[d + 1][1 + 1])
                                  if ((((((x2 >= 0) and (x2 < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(grid))) and (y2 >= 0)) and (y2 < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(grid[0 + 1]))) and (closed[x2 + 1][y2 + 1] == 0)) and (grid[x2 + 1][y2 + 1] == 0)) then
                                            local g2 = (g + cost)
                                            local f2 = (g2 + heuristic[x2 + 1][y2 + 1])
                                            cell = (function(lst, item)
                                            local res = {table.unpack(lst or {})}
                                            table.insert(res, item)
                                            return res
                                          end)(cell, {f2, g2, x2, y2})
                                          closed[x2 + 1][y2 + 1] = 1
                                          action[x2 + 1][y2 + 1] = d
                                        end
                                        d = (d + 1)
                                      end
                                    end
                                  end
                                end
                                local invpath = {}
                                x = goal[0 + 1]
                                y = goal[1 + 1]
                                invpath = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(invpath, {x, y})
                              while ((x ~= init[0 + 1]) or (y ~= init[1 + 1])) do
                                local dir = action[x + 1][y + 1]
                                local x2 = (x - DIRECTIONS[dir + 1][0 + 1])
                                local y2 = (y - DIRECTIONS[dir + 1][1 + 1])
                                x = x2
                                y = y2
                                invpath = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(invpath, {x, y})
                            end
                            local path = {}
                            local idx = ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(invpath) - 1)
                                while (idx >= 0) do
                                  path = (function(lst, item)
                                  local res = {table.unpack(lst or {})}
                                  table.insert(res, item)
                                  return res
                                end)(path, invpath[idx + 1])
                                idx = (idx - 1)
                              end
                              return {path = path, action = action}
                            end
                            function main()
                              local grid = {{0, 1, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0}, {0, 1, 0, 0, 1, 0}, {0, 0, 0, 0, 1, 0}}
                              local init = {0, 0}
                              local goal = {((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(grid) - 1), ((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(grid[0 + 1]) - 1)}
                                      local cost = 1
                                      local heuristic = {}
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(grid)) do
                                            local row = {}
                                            local j = 0
                                            while (j < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(grid[0 + 1])) do
                                                  local h = (iabs((i - goal[0 + 1])) + iabs((j - goal[1 + 1])))
                                                  if (grid[i + 1][j + 1] == 1) then
                                                    row = (function(lst, item)
                                                    local res = {table.unpack(lst or {})}
                                                    table.insert(res, item)
                                                    return res
                                                  end)(row, 99)
                                                else
                                                  row = (function(lst, item)
                                                  local res = {table.unpack(lst or {})}
                                                  table.insert(res, item)
                                                  return res
                                                end)(row, h)
                                              end
                                              j = (j + 1)
                                            end
                                            heuristic = (function(lst, item)
                                            local res = {table.unpack(lst or {})}
                                            table.insert(res, item)
                                            return res
                                          end)(heuristic, row)
                                          i = (i + 1)
                                        end
                                        local result = search(grid, init, goal, cost, heuristic)
                                        print("ACTION MAP")
                                        local rr = 0
                                        while (rr < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(result.action)) do
                                              print(
                                              (function(v)
                                              local function encode(x)
                                              if type(x) == "table" then
                                                if x.__name and x.__order then
                                                  local parts = {x.__name, " {"}
                                                  for i, k in ipairs(x.__order) do
                                                    if i > 1 then parts[#parts+1] = ", " end
                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                elseif #x > 0 then
                                                    local allTables = true
                                                    for _, v in ipairs(x) do
                                                      if type(v) ~= "table" then allTables = false break end
                                                    end
                                                    local parts = {}
                                                    if not allTables then parts[#parts+1] = "[" end
                                                    for i, val in ipairs(x) do
                                                      parts[#parts+1] = encode(val)
                                                      if i < #x then parts[#parts+1] = " " end
                                                    end
                                                    if not allTables then parts[#parts+1] = "]" end
                                                    return table.concat(parts)
                                                  else
                                                    local keys = {}
                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                    local parts = {"{"}
                                                    for i, k in ipairs(keys) do
                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                      if i < #keys then parts[#parts+1] = ", " end
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  end
                                                elseif type(x) == "string" then
                                                    return '"' .. x .. '"'
                                                  else
                                                    return tostring(x)
                                                  end
                                                end
                                                return encode(v)
                                              end)(result.action[rr + 1]))
                                              rr = (rr + 1)
                                            end
                                            local p = 0
                                            while (p < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(result.path)) do
                                                  print(
                                                  (function(v)
                                                  local function encode(x)
                                                  if type(x) == "table" then
                                                    if x.__name and x.__order then
                                                      local parts = {x.__name, " {"}
                                                      for i, k in ipairs(x.__order) do
                                                        if i > 1 then parts[#parts+1] = ", " end
                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    elseif #x > 0 then
                                                        local allTables = true
                                                        for _, v in ipairs(x) do
                                                          if type(v) ~= "table" then allTables = false break end
                                                        end
                                                        local parts = {}
                                                        if not allTables then parts[#parts+1] = "[" end
                                                        for i, val in ipairs(x) do
                                                          parts[#parts+1] = encode(val)
                                                          if i < #x then parts[#parts+1] = " " end
                                                        end
                                                        if not allTables then parts[#parts+1] = "]" end
                                                        return table.concat(parts)
                                                      else
                                                        local keys = {}
                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                        local parts = {"{"}
                                                        for i, k in ipairs(keys) do
                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                          if i < #keys then parts[#parts+1] = ", " end
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      end
                                                    elseif type(x) == "string" then
                                                        return '"' .. x .. '"'
                                                      else
                                                        return tostring(x)
                                                      end
                                                    end
                                                    return encode(v)
                                                  end)(result.path[p + 1]))
                                                  p = (p + 1)
                                                end
                                              end
                                              DIRECTIONS = {{(-1), 0}, {0, (-1)}, {1, 0}, {0, 1}}
                                              main()
                                              local _bench_end = os.clock()
                                              collectgarbage()
                                              local _bench_end_mem = collectgarbage('count') * 1024
                                              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                            end;
