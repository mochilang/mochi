-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function print_dist(dist)
    print("Vertex Distance")
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(dist)) do
          if (dist[i + 1] >= INF) then
            print((string.gsub(string.format("%d \tINF", i), "%s+$", "")))
          else
            print((string.gsub(string.format("%d \t %d", i, math.floor(tonumber(dist[i + 1]) or 0)), "%s+$", "")))
          end
          i = (i + 1)
        end
      end
      function min_dist(mdist, vset)
        local min_val = INF
        local min_ind = (-1)
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(mdist)) do
              if ((not vset[i + 1]) and (mdist[i + 1] < min_val)) then
                min_val = mdist[i + 1]
                min_ind = i
              end
              i = (i + 1)
            end
            return min_ind
          end
          function dijkstra(graph, src)
            local v = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(graph)
                local mdist = {}
                local vset = {}
                local i = 0
                while (i < v) do
                  mdist = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(mdist, INF)
                vset = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(vset, false)
              i = (i + 1)
            end
            mdist[src + 1] = 0
            local count = 0
            while (count < (v - 1)) do
              local u = min_dist(mdist, vset)
              vset[u + 1] = true
              local i = 0
              while (i < v) do
                local alt = (mdist[u + 1] + graph[u + 1][i + 1])
                if (((not vset[i + 1]) and (graph[u + 1][i + 1] < INF)) and (alt < mdist[i + 1])) then
                  mdist[i + 1] = alt
                end
                i = (i + 1)
              end
              count = (count + 1)
            end
            return mdist
          end
          function main()
            local graph = {{0, 10, INF, INF, 5}, {INF, 0, 1, INF, 2}, {INF, INF, 0, 4, INF}, {INF, INF, 6, 0, INF}, {INF, 3, 9, 2, 0}}
            local dist = dijkstra(graph, 0)
            print_dist(dist)
          end
          INF = 1e+09
          main()
          local _bench_end = os.clock()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
