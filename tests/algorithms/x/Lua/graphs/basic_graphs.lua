-- Generated by Mochi v0.10.65 on 2025-08-14 09:59 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
local len = #lst
if s < 0 then s = len + s end
if s < 0 then s = 0 end
if e == nil then
  e = len
elseif e < 0 then
    e = len + e
  end
  if e > len then e = len end
  if s > e then return {} end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function dfs(g, s)
    local visited = {}
    local stack = {}
    visited[s] = true
    stack = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(stack, s)
  print(s)
  while ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(stack) > 0) do
        local u = stack[((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(stack) - 1) + 1]
            local found = false
            for _, v in ipairs(g[u]) do
              if (not (visited[v] ~= nil)) then
                visited[v] = true
                stack = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(stack, v)
              print((((type(v) == "table")) and (
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(v)) or (v)))
              found = true
              break
            end
          end
          if (not found) then
            stack = slice(stack, 0, ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(stack) - 1))
              end
            end
          end
          function bfs(g, s)
            local visited = {}
            local q = {}
            visited[s] = true
            q = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(q, s)
          print(s)
          while ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(q) > 0) do
                local u = q[0 + 1]
                q = slice(q, 1, (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(q))
                    for _, v in ipairs(g[u]) do
                      if (not (visited[v] ~= nil)) then
                        visited[v] = true
                        q = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(q, v)
                      print((((type(v) == "table")) and (
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(v)) or (v)))
                    end
                  end
                end
              end
              function sort_ints(a)
                local arr = a
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(arr)) do
                      local j = 0
                      while (j < (((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(arr) - i) - 1)) do
                            if (arr[j + 1] > arr[(j + 1) + 1]) then
                              local tmp = arr[j + 1]
                              arr[j + 1] = arr[(j + 1) + 1]
                              arr[(j + 1) + 1] = tmp
                            end
                            j = (j + 1)
                          end
                          i = (i + 1)
                        end
                        return arr
                      end
                      function dijkstra(g, s)
                        local dist = {}
                        dist[s] = 0
                        local path = {}
                        path[s] = 0
                        local known = {}
                        local keys = {s}
                        while ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(known) < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(keys)) do
                                  local mini = 100000
                                  local u = (-1)
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(keys)) do
                                        local k = keys[i + 1]
                                        local d = dist[k]
                                        if ((not (function(lst,v) for _,x in ipairs(lst) do if x==v then return true end end return false end)(known, k)) and (d < mini)) then
                                          mini = d
                                          u = k
                                        end
                                        i = (i + 1)
                                      end
                                      known = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(known, u)
                                    for _, e in ipairs(g[u]) do
                                      local v = e[0 + 1]
                                      local w = e[1 + 1]
                                      if (not (function(lst,v) for _,x in ipairs(lst) do if x==v then return true end end return false end)(keys, v)) then
                                        keys = (function(lst, item)
                                        lst = lst or {}
                                        table.insert(lst, item)
                                        return lst
                                      end)(keys, v)
                                    end
                                    local alt = (dist[u] + w)
                                    local cur = (((dist[v] ~= nil)) and (dist[v]) or (100000))
                                    if ((not (function(lst,v) for _,x in ipairs(lst) do if x==v then return true end end return false end)(known, v)) and (alt < cur)) then
                                      dist[v] = alt
                                      path[v] = u
                                    end
                                  end
                                end
                                local ordered = sort_ints(keys)
                                local idx = 0
                                while (idx < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(ordered)) do
                                      local k = ordered[idx + 1]
                                      if (k ~= s) then
                                        print(dist[k])
                                      end
                                      idx = (idx + 1)
                                    end
                                  end
                                  function topo(g, n)
                                    local ind = {}
                                    local i = 0
                                    while (i <= n) do
                                      ind = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(ind, 0)
                                    i = (i + 1)
                                  end
                                  local node = 1
                                  while (node <= n) do
                                    for _, v in ipairs(g[node]) do
                                      ind[v + 1] = (ind[v + 1] + 1)
                                    end
                                    node = (node + 1)
                                  end
                                  local q = {}
                                  local j = 1
                                  while (j <= n) do
                                    if (ind[j + 1] == 0) then
                                      q = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(q, j)
                                  end
                                  j = (j + 1)
                                end
                                while ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(q) > 0) do
                                      local v = q[0 + 1]
                                      q = slice(q, 1, (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(q))
                                          print(v)
                                          for _, w in ipairs(g[v]) do
                                            ind[w + 1] = (ind[w + 1] - 1)
                                            if (ind[w + 1] == 0) then
                                              q = (function(lst, item)
                                              lst = lst or {}
                                              table.insert(lst, item)
                                              return lst
                                            end)(q, w)
                                          end
                                        end
                                      end
                                    end
                                    function floyd(a)
                                      local n = (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(a)
                                          local dist = {}
                                          local i = 0
                                          while (i < n) do
                                            local row = {}
                                            local j = 0
                                            while (j < n) do
                                              row = (function(lst, item)
                                              lst = lst or {}
                                              table.insert(lst, item)
                                              return lst
                                            end)(row, a[i + 1][j + 1])
                                            j = (j + 1)
                                          end
                                          dist = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(dist, row)
                                        i = (i + 1)
                                      end
                                      local k = 0
                                      while (k < n) do
                                        local ii = 0
                                        while (ii < n) do
                                          local jj = 0
                                          while (jj < n) do
                                            if (dist[ii + 1][jj + 1] > (dist[ii + 1][k + 1] + dist[k + 1][jj + 1])) then
                                              dist[ii + 1][jj + 1] = (dist[ii + 1][k + 1] + dist[k + 1][jj + 1])
                                            end
                                            jj = (jj + 1)
                                          end
                                          ii = (ii + 1)
                                        end
                                        k = (k + 1)
                                      end
                                      print(
                                      (function(v)
                                      local function encode(x)
                                      if type(x) == "table" then
                                        if x.__name and x.__order then
                                          local parts = {x.__name, " {"}
                                          for i, k in ipairs(x.__order) do
                                            if i > 1 then parts[#parts+1] = ", " end
                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        elseif #x > 0 then
                                            local allTables = true
                                            for _, v in ipairs(x) do
                                              if type(v) ~= "table" then allTables = false break end
                                            end
                                            local parts = {}
                                            if not allTables then parts[#parts+1] = "[" end
                                            for i, val in ipairs(x) do
                                              parts[#parts+1] = encode(val)
                                              if i < #x then parts[#parts+1] = " " end
                                            end
                                            if not allTables then parts[#parts+1] = "]" end
                                            return table.concat(parts)
                                          else
                                            local keys = {}
                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                            local parts = {"{"}
                                            for i, k in ipairs(keys) do
                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                              if i < #keys then parts[#parts+1] = ", " end
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(dist))
                                    end
                                    function prim(g, s, n)
                                      local dist = {}
                                      dist[s] = 0
                                      local known = {}
                                      local keys = {s}
                                      local total = 0
                                      while ((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(known) < n) do
                                            local mini = 100000
                                            local u = (-1)
                                            local i = 0
                                            while (i < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(keys)) do
                                                  local k = keys[i + 1]
                                                  local d = dist[k]
                                                  if ((not (function(lst,v) for _,x in ipairs(lst) do if x==v then return true end end return false end)(known, k)) and (d < mini)) then
                                                    mini = d
                                                    u = k
                                                  end
                                                  i = (i + 1)
                                                end
                                                known = (function(lst, item)
                                                lst = lst or {}
                                                table.insert(lst, item)
                                                return lst
                                              end)(known, u)
                                              total = (total + mini)
                                              for _, e in ipairs(g[u]) do
                                                local v = e[0 + 1]
                                                local w = e[1 + 1]
                                                if (not (function(lst,v) for _,x in ipairs(lst) do if x==v then return true end end return false end)(keys, v)) then
                                                  keys = (function(lst, item)
                                                  lst = lst or {}
                                                  table.insert(lst, item)
                                                  return lst
                                                end)(keys, v)
                                              end
                                              local cur = (((dist[v] ~= nil)) and (dist[v]) or (100000))
                                              if ((not (function(lst,v) for _,x in ipairs(lst) do if x==v then return true end end return false end)(known, v)) and (w < cur)) then
                                                dist[v] = w
                                              end
                                            end
                                          end
                                          return total
                                        end
                                        function sort_edges(edges)
                                          local es = edges
                                          local i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(es)) do
                                                local j = 0
                                                while (j < (((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(es) - i) - 1)) do
                                                      if (es[j + 1][2 + 1] > es[(j + 1) + 1][2 + 1]) then
                                                        local tmp = es[j + 1]
                                                        es[j + 1] = es[(j + 1) + 1]
                                                        es[(j + 1) + 1] = tmp
                                                      end
                                                      j = (j + 1)
                                                    end
                                                    i = (i + 1)
                                                  end
                                                  return es
                                                end
                                                function find_parent(parent, x)
                                                  local r = x
                                                  while (parent[r + 1] ~= r) do
                                                    r = parent[r + 1]
                                                  end
                                                  return r
                                                end
                                                function union_parent(parent, a, b)
                                                  parent[a + 1] = b
                                                end
                                                function kruskal(edges, n)
                                                  local es = sort_edges(edges)
                                                  local parent = {}
                                                  local i = 0
                                                  while (i <= n) do
                                                    parent = (function(lst, item)
                                                    lst = lst or {}
                                                    table.insert(lst, item)
                                                    return lst
                                                  end)(parent, i)
                                                  i = (i + 1)
                                                end
                                                local total = 0
                                                local count = 0
                                                local idx = 0
                                                while ((count < (n - 1)) and (idx < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(es))) do
                                                      local e = es[idx + 1]
                                                      idx = (idx + 1)
                                                      local u = e[0 + 1]
                                                      local v = e[1 + 1]
                                                      local w = e[2 + 1]
                                                      local ru = find_parent(parent, u)
                                                      local rv = find_parent(parent, v)
                                                      if (ru ~= rv) then
                                                        union_parent(parent, ru, rv)
                                                        total = (total + w)
                                                        count = (count + 1)
                                                      end
                                                    end
                                                    return total
                                                  end
                                                  function find_isolated_nodes(g, nodes)
                                                    local isolated = {}
                                                    for _, node in ipairs(nodes) do
                                                      if ((function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(g[node]) == 0) then
                                                            isolated = (function(lst, item)
                                                            lst = lst or {}
                                                            table.insert(lst, item)
                                                            return lst
                                                          end)(isolated, node)
                                                        end
                                                      end
                                                      return isolated
                                                    end
                                                    g_dfs = {[1] = {2, 3}, [2] = {4, 5}, [3] = {}, [4] = {}, [5] = {}}
                                                    g_bfs = {[1] = {2, 3}, [2] = {4, 5}, [3] = {6, 7}, [4] = {}, [5] = {8}, [6] = {}, [7] = {}, [8] = {}}
                                                    g_weighted = {[1] = {{2, 7}, {3, 9}, {6, 14}}, [2] = {{1, 7}, {3, 10}, {4, 15}}, [3] = {{1, 9}, {2, 10}, {4, 11}, {6, 2}}, [4] = {{2, 15}, {3, 11}, {5, 6}}, [5] = {{4, 6}, {6, 9}}, [6] = {{1, 14}, {3, 2}, {5, 9}}}
                                                    g_topo = {[1] = {2, 3}, [2] = {4}, [3] = {4}, [4] = {}}
                                                    matrix = {{0, 5, 9, 100000}, {100000, 0, 2, 8}, {100000, 100000, 0, 7}, {4, 100000, 100000, 0}}
                                                    g_prim = {[1] = {{2, 1}, {3, 3}}, [2] = {{1, 1}, {3, 1}, {4, 6}}, [3] = {{1, 3}, {2, 1}, {4, 2}}, [4] = {{2, 6}, {3, 2}}}
                                                    edges_kruskal = {{1, 2, 1}, {2, 3, 2}, {1, 3, 2}, {3, 4, 1}}
                                                    g_iso = {[1] = {2, 3}, [2] = {1, 3}, [3] = {1, 2}, [4] = {}}
                                                    dfs(g_dfs, 1)
                                                    bfs(g_bfs, 1)
                                                    dijkstra(g_weighted, 1)
                                                    topo(g_topo, 4)
                                                    floyd(matrix)
                                                    print(prim(g_prim, 1, 4))
                                                    print(kruskal(edges_kruskal, 4))
                                                    iso = find_isolated_nodes(g_iso, {1, 2, 3, 4})
                                                    print(
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(iso))
                                                    local _bench_end = os.clock()
                                                    collectgarbage()
                                                    local _bench_end_mem = collectgarbage('count') * 1024
                                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                  end;
