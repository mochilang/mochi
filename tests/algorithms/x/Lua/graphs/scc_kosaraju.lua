-- Generated by Mochi v0.10.65 on 2025-08-14 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function dfs(u, graph, visit, stack)
    if visit[u + 1] then
      return stack
    end
    visit[u + 1] = true
    for _, v in ipairs(graph[u + 1]) do
      stack = dfs(v, graph, visit, stack)
    end
    stack = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(stack, u)
  return stack
end
function dfs2(u, reversed_graph, visit, component)
  if visit[u + 1] then
    return component
  end
  visit[u + 1] = true
  component = (function(lst, item)
  lst = lst or {}
  table.insert(lst, item)
  return lst
end)(component, u)
for _, v in ipairs(reversed_graph[u + 1]) do
  component = dfs2(v, reversed_graph, visit, component)
end
return component
end
function kosaraju(graph)
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(graph)
      local reversed_graph = {}
      local i = 0
      while (i < n) do
        reversed_graph = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(reversed_graph, {})
      i = (i + 1)
    end
    i = 0
    while (i < n) do
      for _, v in ipairs(graph[i + 1]) do
        reversed_graph[v + 1] = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(reversed_graph[v + 1], i)
    end
    i = (i + 1)
  end
  local visit = {}
  i = 0
  while (i < n) do
    visit = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(visit, false)
  i = (i + 1)
end
local stack = {}
i = 0
while (i < n) do
  if (visit[i + 1] == false) then
    stack = dfs(i, graph, visit, stack)
  end
  i = (i + 1)
end
i = 0
while (i < n) do
  visit[i + 1] = false
  i = (i + 1)
end
local scc = {}
local idx = ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(stack) - 1)
    while (idx >= 0) do
      local node = stack[idx + 1]
      if (visit[node + 1] == false) then
        local component = {}
        component = dfs2(node, reversed_graph, visit, component)
        scc = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(scc, component)
    end
    idx = (idx - 1)
  end
  return scc
end
function main()
  local graph = {{1}, {2}, {0, 3}, {4}, {}}
  local comps = kosaraju(graph)
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(comps)) do
        print(
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(comps[i + 1]))
        i = (i + 1)
      end
    end
    main()
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
