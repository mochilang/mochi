-- Generated by Mochi v0.10.65 on 2025-08-14 17:09 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pow2(k)
    local res = 1
    local i = 0
    while (i < k) do
      res = (res * 2)
      i = (i + 1)
    end
    return res
  end
  function min2(a, b)
    if (a < b) then
      return a
    end
    return b
  end
  function new_dinic(n)
    local lvl = {}
    local ptr = {}
    local q = {}
    local adj = {}
    local i = 0
    while (i < n) do
      lvl = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(lvl, 0)
    ptr = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(ptr, 0)
  q = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(q, 0)
local edges = {}
adj = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(adj, edges)
i = (i + 1)
end
return {n = n, lvl = lvl, ptr = ptr, q = q, adj = adj}
end
function add_edge(g, a, b, c, rcap)
  local adj = g.adj
  local list_a = adj[a + 1]
  local list_b = adj[b + 1]
  local e1 = {b, (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(list_b), c, 0}
      local e2 = {a, (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(list_a), rcap, 0}
          list_a = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(list_a, e1)
        list_b = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(list_b, e2)
      adj[a + 1] = list_a
      adj[b + 1] = list_b
      g.adj = adj
    end
    function dfs(g, v, sink, flow)
      if ((v == sink) or (flow == 0)) then
        return flow
      end
      local ptr = g.ptr
      local i = ptr[v + 1]
      local adj_all = g.adj
      local adj_v = adj_all[v + 1]
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(adj_v)) do
            local e = adj_v[i + 1]
            local to = e[0 + 1]
            if (g.lvl[to + 1] == (g.lvl[v + 1] + 1)) then
              local avail = (e[2 + 1] - e[3 + 1])
              local pushed = dfs(g, to, sink, min2(flow, avail))
              if (pushed > 0) then
                e[3 + 1] = (e[3 + 1] + pushed)
                adj_v[i + 1] = e
                local adj_to = adj_all[to + 1]
                local back = adj_to[e[1 + 1] + 1]
                back[3 + 1] = (back[3 + 1] - pushed)
                adj_to[e[1 + 1] + 1] = back
                adj_all[to + 1] = adj_to
                adj_all[v + 1] = adj_v
                g.adj = adj_all
                return pushed
              end
            end
            i = (i + 1)
            ptr[v + 1] = i
          end
          g.ptr = ptr
          adj_all[v + 1] = adj_v
          g.adj = adj_all
          return 0
        end
        function max_flow(g, source, sink)
          local flow = 0
          local l = 0
          while (l < 31) do
            local threshold = pow2((30 - l))
            while true do
              local lvl = {}
              local ptr = {}
              local i = 0
              while (i < g.n) do
                lvl = (function(lst, item)
                local res = {table.unpack(lst or {})}
                res[#res+1] = item
                return res
              end)(lvl, 0)
              ptr = (function(lst, item)
              local res = {table.unpack(lst or {})}
              res[#res+1] = item
              return res
            end)(ptr, 0)
            i = (i + 1)
          end
          g.lvl = lvl
          g.ptr = ptr
          local qi = 0
          local qe = 1
          lvl[source + 1] = 1
          g.lvl = lvl
          local q = g.q
          q[0 + 1] = source
          while ((qi < qe) and (g.lvl[sink + 1] == 0)) do
            local v = q[qi + 1]
            qi = (qi + 1)
            local edges = g.adj[v + 1]
            local j = 0
            while (j < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(edges)) do
                  local e = edges[j + 1]
                  local to = e[0 + 1]
                  local residual = (e[2 + 1] - e[3 + 1])
                  local lvl_inner = g.lvl
                  if ((lvl_inner[to + 1] == 0) and (residual >= threshold)) then
                    q[qe + 1] = to
                    qe = (qe + 1)
                    lvl_inner[to + 1] = (lvl_inner[v + 1] + 1)
                    g.lvl = lvl_inner
                  end
                  j = (j + 1)
                end
              end
              local p = dfs(g, source, sink, INF)
              while (p > 0) do
                flow = (flow + p)
                p = dfs(g, source, sink, INF)
              end
              if (g.lvl[sink + 1] == 0) then
                break
              end
            end
            l = (l + 1)
          end
          return flow
        end
        INF = 1000000000
        graph = new_dinic(10)
        source = 0
        sink = 9
        v = 1
        while (v < 5) do
          add_edge(graph, source, v, 1, 0)
          v = (v + 1)
        end
        v = 5
        while (v < 9) do
          add_edge(graph, v, sink, 1, 0)
          v = (v + 1)
        end
        v = 1
        while (v < 5) do
          add_edge(graph, v, (v + 4), 1, 0)
          v = (v + 1)
        end
        print((((type(_str(max_flow(graph, source, sink))) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(_str(max_flow(graph, source, sink)))) or (_str(max_flow(graph, source, sink)))))
        local _bench_end = os.clock()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
