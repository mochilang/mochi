-- Generated by Mochi v0.10.65 on 2025-08-14 15:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function push_relabel_max_flow(graph, sources, sinks)
    if (((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(sources) == 0) or ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(sinks) == 0)) then
              return 0
            end
            local g = graph
            local source_index = sources[0 + 1]
            local sink_index = sinks[0 + 1]
            if (((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(sources) > 1) or ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(sinks) > 1)) then
                      local max_input_flow = 0
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(sources)) do
                            local j = 0
                            while (j < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(g[sources[i + 1] + 1])) do
                                  max_input_flow = (max_input_flow + g[sources[i + 1] + 1][j + 1])
                                  j = (j + 1)
                                end
                                i = (i + 1)
                              end
                              local size = ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(g) + 1)
                                  local new_graph = {}
                                  local zero_row = {}
                                  local j = 0
                                  while (j < size) do
                                    zero_row = (function(lst, item)
                                    lst = lst or {}
                                    table.insert(lst, item)
                                    return lst
                                  end)(zero_row, 0)
                                  j = (j + 1)
                                end
                                new_graph = (function(lst, item)
                                lst = lst or {}
                                table.insert(lst, item)
                                return lst
                              end)(new_graph, zero_row)
                              local r = 0
                              while (r < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(g)) do
                                    local row = {0}
                                    local c = 0
                                    while (c < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(g[r + 1])) do
                                          row = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(row, g[r + 1][c + 1])
                                        c = (c + 1)
                                      end
                                      new_graph = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(new_graph, row)
                                    r = (r + 1)
                                  end
                                  g = new_graph
                                  i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(sources)) do
                                        g[0 + 1][(sources[i + 1] + 1) + 1] = max_input_flow
                                        i = (i + 1)
                                      end
                                      source_index = 0
                                      size = ((function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(g) + 1)
                                          new_graph = {}
                                          r = 0
                                          while (r < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(g)) do
                                                local row2 = g[r + 1]
                                                row2 = (function(lst, item)
                                                lst = lst or {}
                                                table.insert(lst, item)
                                                return lst
                                              end)(row2, 0)
                                              new_graph = (function(lst, item)
                                              lst = lst or {}
                                              table.insert(lst, item)
                                              return lst
                                            end)(new_graph, row2)
                                            r = (r + 1)
                                          end
                                          local last_row = {}
                                          j = 0
                                          while (j < size) do
                                            last_row = (function(lst, item)
                                            lst = lst or {}
                                            table.insert(lst, item)
                                            return lst
                                          end)(last_row, 0)
                                          j = (j + 1)
                                        end
                                        new_graph = (function(lst, item)
                                        lst = lst or {}
                                        table.insert(lst, item)
                                        return lst
                                      end)(new_graph, last_row)
                                      g = new_graph
                                      i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(sinks)) do
                                            g[(sinks[i + 1] + 1) + 1][(size - 1) + 1] = max_input_flow
                                            i = (i + 1)
                                          end
                                          sink_index = (size - 1)
                                        end
                                        local n = (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(g)
                                            local preflow = {}
                                            local i = 0
                                            while (i < n) do
                                              local row = {}
                                              local j = 0
                                              while (j < n) do
                                                row = (function(lst, item)
                                                lst = lst or {}
                                                table.insert(lst, item)
                                                return lst
                                              end)(row, 0)
                                              j = (j + 1)
                                            end
                                            preflow = (function(lst, item)
                                            lst = lst or {}
                                            table.insert(lst, item)
                                            return lst
                                          end)(preflow, row)
                                          i = (i + 1)
                                        end
                                        local heights = {}
                                        i = 0
                                        while (i < n) do
                                          heights = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(heights, 0)
                                        i = (i + 1)
                                      end
                                      local excesses = {}
                                      i = 0
                                      while (i < n) do
                                        excesses = (function(lst, item)
                                        lst = lst or {}
                                        table.insert(lst, item)
                                        return lst
                                      end)(excesses, 0)
                                      i = (i + 1)
                                    end
                                    heights[source_index + 1] = n
                                    i = 0
                                    while (i < n) do
                                      local bandwidth = g[source_index + 1][i + 1]
                                      preflow[source_index + 1][i + 1] = (preflow[source_index + 1][i + 1] + bandwidth)
                                      preflow[i + 1][source_index + 1] = (preflow[i + 1][source_index + 1] - bandwidth)
                                      excesses[i + 1] = (excesses[i + 1] + bandwidth)
                                      i = (i + 1)
                                    end
                                    local vertices_list = {}
                                    i = 0
                                    while (i < n) do
                                      if ((i ~= source_index) and (i ~= sink_index)) then
                                        vertices_list = (function(lst, item)
                                        lst = lst or {}
                                        table.insert(lst, item)
                                        return lst
                                      end)(vertices_list, i)
                                    end
                                    i = (i + 1)
                                  end
                                  local idx = 0
                                  while (idx < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(vertices_list)) do
                                        local v = vertices_list[idx + 1]
                                        local prev_height = heights[v + 1]
                                        while (excesses[v + 1] > 0) do
                                          local nb = 0
                                          while (nb < n) do
                                            if (((g[v + 1][nb + 1] - preflow[v + 1][nb + 1]) > 0) and (heights[v + 1] > heights[nb + 1])) then
                                              local delta = excesses[v + 1]
                                              local capacity = (g[v + 1][nb + 1] - preflow[v + 1][nb + 1])
                                              if (delta > capacity) then
                                                delta = capacity
                                              end
                                              preflow[v + 1][nb + 1] = (preflow[v + 1][nb + 1] + delta)
                                              preflow[nb + 1][v + 1] = (preflow[nb + 1][v + 1] - delta)
                                              excesses[v + 1] = (excesses[v + 1] - delta)
                                              excesses[nb + 1] = (excesses[nb + 1] + delta)
                                            end
                                            nb = (nb + 1)
                                          end
                                          local min_height = (-1)
                                          nb = 0
                                          while (nb < n) do
                                            if ((g[v + 1][nb + 1] - preflow[v + 1][nb + 1]) > 0) then
                                              if ((min_height == ((-1))) or (heights[nb + 1] < min_height)) then
                                                min_height = heights[nb + 1]
                                              end
                                            end
                                            nb = (nb + 1)
                                          end
                                          if (min_height ~= ((-1))) then
                                            heights[v + 1] = (min_height + 1)
                                          else
                                            break
                                          end
                                        end
                                        if (heights[v + 1] > prev_height) then
                                          local vertex = vertices_list[idx + 1]
                                          local j = idx
                                          while (j > 0) do
                                            vertices_list[j + 1] = vertices_list[(j - 1) + 1]
                                            j = (j - 1)
                                          end
                                          vertices_list[0 + 1] = vertex
                                          idx = 0
                                        else
                                          idx = (idx + 1)
                                        end
                                      end
                                      local flow = 0
                                      i = 0
                                      while (i < n) do
                                        flow = (flow + preflow[source_index + 1][i + 1])
                                        i = (i + 1)
                                      end
                                      if (flow < 0) then
                                        flow = (-flow)
                                      end
                                      return flow
                                    end
                                    graph = {{0, 7, 0, 0}, {0, 0, 6, 0}, {0, 0, 0, 8}, {9, 0, 0, 0}}
                                    sources = {0}
                                    sinks = {3}
                                    result = push_relabel_max_flow(graph, sources, sinks)
                                    print((((type(("maximum flow is " .. _str(result))) == "table")) and (
                                    (function(v)
                                    local function encode(x)
                                    if type(x) == "table" then
                                      if x.__name and x.__order then
                                        local parts = {x.__name, " {"}
                                        for i, k in ipairs(x.__order) do
                                          if i > 1 then parts[#parts+1] = ", " end
                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      elseif #x > 0 then
                                          local allTables = true
                                          for _, v in ipairs(x) do
                                            if type(v) ~= "table" then allTables = false break end
                                          end
                                          local parts = {}
                                          if not allTables then parts[#parts+1] = "[" end
                                          for i, val in ipairs(x) do
                                            parts[#parts+1] = encode(val)
                                            if i < #x then parts[#parts+1] = " " end
                                          end
                                          if not allTables then parts[#parts+1] = "]" end
                                          return table.concat(parts)
                                        else
                                          local keys = {}
                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                          local parts = {"{"}
                                          for i, k in ipairs(keys) do
                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                            if i < #keys then parts[#parts+1] = ", " end
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        end
                                      elseif type(x) == "string" then
                                          return '"' .. x .. '"'
                                        else
                                          return tostring(x)
                                        end
                                      end
                                      return encode(v)
                                    end)(("maximum flow is " .. _str(result)))) or (("maximum flow is " .. _str(result)))))
                                    local _bench_end = os.clock()
                                    collectgarbage()
                                    local _bench_end_mem = collectgarbage('count') * 1024
                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                  end;
