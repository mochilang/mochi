-- Generated by Mochi v0.10.65 on 2025-08-14 17:09 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pos_equal(a, b)
    return ((a.x == b.x) and (a.y == b.y))
  end
  function pos_key(p)
    return ((_str(p.x) .. ",") .. _str(p.y))
  end
  function sqrtApprox(x)
    if (x <= 0.0) then
      return 0.0
    end
    local guess = x
    local i = 0
    while (i < 10) do
      guess = ((guess + (x / guess)) / 2.0)
      i = (i + 1)
    end
    return guess
  end
  function consistent_heuristic(p, goal)
    local dx = (p.x - goal.x)
    local dy = (p.y - goal.y)
    return sqrtApprox(((dx * dx) + (dy * dy)))
  end
  function iabs(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function heuristic_1(p, goal)
    return (iabs((p.x - goal.x)) + iabs((p.y - goal.y)))
  end
  function heuristic_2(p, goal)
    local h = consistent_heuristic(p, goal)
    return (h / t)
  end
  function heuristic(i, p, goal)
    if (i == 0) then
      return consistent_heuristic(p, goal)
    end
    if (i == 1) then
      return heuristic_1(p, goal)
    end
    return heuristic_2(p, goal)
  end
  function key_fn(start, i, goal, g_func)
    local g = g_func[pos_key(start)]
    return (g + (W1 * heuristic(i, start, goal)))
  end
  function valid(p)
    if ((p.x < 0) or (p.x > (n - 1))) then
      return false
    end
    if ((p.y < 0) or (p.y > (n - 1))) then
      return false
    end
    return true
  end
  function in_blocks(p)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(blocks)) do
          if pos_equal(blocks[i + 1], p) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function pq_put(pq, node, pri)
        local updated = false
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(pq)) do
              if pos_equal(pq[i + 1].pos, node) then
                if (pri < pq[i + 1].pri) then
                  pq[i + 1] = {pos = node, pri = pri}
                end
                updated = true
              end
              i = (i + 1)
            end
            if (not updated) then
              pq = (function(lst, item)
              local res = {table.unpack(lst or {})}
              res[#res+1] = item
              return res
            end)(pq, {pos = node, pri = pri})
          end
          return pq
        end
        function pq_minkey(pq)
          if ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(pq) == 0) then
                return INF
              end
              local first = pq[0 + 1]
              local m = first.pri
              local i = 1
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(pq)) do
                    local item = pq[i + 1]
                    if (item.pri < m) then
                      m = item.pri
                    end
                    i = (i + 1)
                  end
                  return m
                end
                function pq_pop_min(pq)
                  local best = pq[0 + 1]
                  local idx = 0
                  local i = 1
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(pq)) do
                        if (pq[i + 1].pri < best.pri) then
                          best = pq[i + 1]
                          idx = i
                        end
                        i = (i + 1)
                      end
                      local new_pq = {}
                      i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(pq)) do
                            if (i ~= idx) then
                              new_pq = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              res[#res+1] = item
                              return res
                            end)(new_pq, pq[i + 1])
                          end
                          i = (i + 1)
                        end
                        return {pq = new_pq, node = best}
                      end
                      function pq_remove(pq, node)
                        local new_pq = {}
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(pq)) do
                              if (not pos_equal(pq[i + 1].pos, node)) then
                                new_pq = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                res[#res+1] = item
                                return res
                              end)(new_pq, pq[i + 1])
                            end
                            i = (i + 1)
                          end
                          return new_pq
                        end
                        function reconstruct(back_pointer, goal, start)
                          local path = {}
                          local current = goal
                          local key = pos_key(current)
                          path = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          res[#res+1] = item
                          return res
                        end)(path, current)
                        while (not pos_equal(current, start)) do
                          current = back_pointer[key]
                          key = pos_key(current)
                          path = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          res[#res+1] = item
                          return res
                        end)(path, current)
                      end
                      local rev = {}
                      local i = ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(path) - 1)
                          while (i >= 0) do
                            rev = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            res[#res+1] = item
                            return res
                          end)(rev, path[i + 1])
                          i = (i - 1)
                        end
                        return rev
                      end
                      function neighbours(p)
                        local left = {x = (p.x - 1), y = p.y}
                        local right = {x = (p.x + 1), y = p.y}
                        local up = {x = p.x, y = (p.y + 1)}
                        local down = {x = p.x, y = (p.y - 1)}
                        return {left, right, up, down}
                      end
                      function multi_a_star(start, goal, n_heuristic)
                        local g_function = {}
                        local back_pointer = {}
                        local visited = {}
                        local open_list = {}
                        g_function[pos_key(start)] = 0.0
                        g_function[pos_key(goal)] = INF
                        back_pointer[pos_key(start)] = {x = (-1), y = (-1)}
                        back_pointer[pos_key(goal)] = {x = (-1), y = (-1)}
                        visited[pos_key(start)] = true
                        local i = 0
                        while (i < n_heuristic) do
                          open_list = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          res[#res+1] = item
                          return res
                        end)(open_list, {})
                        local pri = key_fn(start, i, goal, g_function)
                        open_list[i + 1] = pq_put(open_list[i + 1], start, pri)
                        i = (i + 1)
                      end
                      while (pq_minkey(open_list[0 + 1]) < INF) do
                        local chosen = 0
                        i = 1
                        while (i < n_heuristic) do
                          if (pq_minkey(open_list[i + 1]) <= (W2 * pq_minkey(open_list[0 + 1]))) then
                            chosen = i
                            break
                          end
                          i = (i + 1)
                        end
                        if (chosen ~= 0) then
                          t = (t + 1)
                        end
                        local pair = pq_pop_min(open_list[chosen + 1])
                        open_list[chosen + 1] = pair.pq
                        local current = pair.node
                        i = 0
                        while (i < n_heuristic) do
                          if (i ~= chosen) then
                            open_list[i + 1] = pq_remove(open_list[i + 1], current.pos)
                          end
                          i = (i + 1)
                        end
                        local ckey = pos_key(current.pos)
                        if (visited[ckey] ~= nil) then
                          goto __cont_1
                        end
                        visited[ckey] = true
                        if pos_equal(current.pos, goal) then
                          local path = reconstruct(back_pointer, goal, start)
                          local j = 0
                          while (j < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(path)) do
                                local p = path[j + 1]
                                print((((type((((("(" .. _str(p.x)) .. ",") .. _str(p.y)) .. ")")) == "table")) and (
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)((((("(" .. _str(p.x)) .. ",") .. _str(p.y)) .. ")"))) or ((((("(" .. _str(p.x)) .. ",") .. _str(p.y)) .. ")"))))
                                j = (j + 1)
                              end
                              return
                            end
                            local neighs = neighbours(current.pos)
                            local k = 0
                            while (k < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(neighs)) do
                                  local nb = neighs[k + 1]
                                  if (valid(nb) and (in_blocks(nb) == false)) then
                                    local nkey = pos_key(nb)
                                    local tentative = (g_function[ckey] + 1.0)
                                    if ((not (g_function[nkey] ~= nil)) or (tentative < g_function[nkey])) then
                                      g_function[nkey] = tentative
                                      back_pointer[nkey] = current.pos
                                      i = 0
                                      while (i < n_heuristic) do
                                        local pri2 = (tentative + (W1 * heuristic(i, nb, goal)))
                                        open_list[i + 1] = pq_put(open_list[i + 1], nb, pri2)
                                        i = (i + 1)
                                      end
                                    end
                                  end
                                  k = (k + 1)
                                end
                                ::__cont_1::
                              end
                              print("No path found to goal")
                            end
                            W1 = 1.0
                            W2 = 1.0
                            n = 20
                            n_heuristic = 3
                            INF = 1e+09
                            t = 1
                            blocks = {{x = 0, y = 1}, {x = 1, y = 1}, {x = 2, y = 1}, {x = 3, y = 1}, {x = 4, y = 1}, {x = 5, y = 1}, {x = 6, y = 1}, {x = 7, y = 1}, {x = 8, y = 1}, {x = 9, y = 1}, {x = 10, y = 1}, {x = 11, y = 1}, {x = 12, y = 1}, {x = 13, y = 1}, {x = 14, y = 1}, {x = 15, y = 1}, {x = 16, y = 1}, {x = 17, y = 1}, {x = 18, y = 1}, {x = 19, y = 1}}
                            start = {x = 0, y = 0}
                            goal = {x = (n - 1), y = (n - 1)}
                            multi_a_star(start, goal, n_heuristic)
                            local _bench_end = os.clock()
                            collectgarbage()
                            local _bench_end_mem = collectgarbage('count') * 1024
                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                          end;
