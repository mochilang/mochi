-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rand()
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return seed
  end
  function random()
    return ((1 * rand()) / 2.147483648e+09)
  end
  function get_nodes(trans)
    local seen = {}
    for _, t in ipairs(trans) do
      seen[t.src] = true
      seen[t.dst] = true
    end
    local nodes = {}
    for _, k in ipairs((function(m)
    local keys = {}
    for k in pairs(m) do
      if k ~= '__name' and k ~= '__order' then table.insert(keys, k) end
    end
    table.sort(keys, function(a,b) return a<b end)
    return keys
  end)(seen)) do
    nodes = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(nodes, k)
end
return nodes
end
function transition(current, trans)
  local current_probability = 0
  local random_value = random()
  for _, t in ipairs(trans) do
    if (t.src == current) then
      current_probability = (current_probability + t.prob)
      if (current_probability > random_value) then
        return t.dst
      end
    end
  end
  return ""
end
function get_transitions(start, trans, steps)
  local visited = {}
  for _, node in ipairs(get_nodes(trans)) do
    local one = 1
    visited[node] = one
  end
  local node = start
  local i = 0
  while (i < steps) do
    node = transition(node, trans)
    local count = visited[node]
    count = (count + 1)
    visited[node] = count
    i = (i + 1)
  end
  return visited
end
function main()
  local transitions = {{src = "a", dst = "a", prob = 0.9}, {src = "a", dst = "b", prob = 0.075}, {src = "a", dst = "c", prob = 0.025}, {src = "b", dst = "a", prob = 0.15}, {src = "b", dst = "b", prob = 0.8}, {src = "b", dst = "c", prob = 0.05}, {src = "c", dst = "a", prob = 0.25}, {src = "c", dst = "b", prob = 0.25}, {src = "c", dst = "c", prob = 0.5}}
  local result = get_transitions("a", transitions, 5000)
  print((((type(((((tostring(result.a) .. " ") .. tostring(result.b)) .. " ") .. tostring(result.c))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(((((tostring(result.a) .. " ") .. tostring(result.b)) .. " ") .. tostring(result.c)))) or (((((tostring(result.a) .. " ") .. tostring(result.b)) .. " ") .. tostring(result.c)))))
end
seed = 1
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
