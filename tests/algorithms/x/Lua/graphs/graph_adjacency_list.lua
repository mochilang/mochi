-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function create_graph(vertices, edges, directed)
    local adj = {}
    for _, v in ipairs(vertices) do
      adj[v] = {}
    end
    for _, e in ipairs(edges) do
      local s = e[0 + 1]
      local d = e[1 + 1]
      if (not (adj[s] ~= nil)) then
        adj[s] = {}
      end
      if (not (adj[d] ~= nil)) then
        adj[d] = {}
      end
      adj[s] = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(adj[s], d)
    if (not directed) then
      adj[d] = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(adj[d], s)
  end
end
return {adj = adj, directed = directed}
end
function add_vertex(graph, v)
  if (graph.adj[v] ~= nil) then
    panic("vertex exists")
  end
  local adj = {}
  for k in pairs(graph.adj) do
    adj[k] = graph.adj[k]
  end
  adj[v] = {}
  return {adj = adj, directed = graph.directed}
end
function remove_from_list(lst, value)
  local res = {}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(lst)) do
        if (lst[i + 1] ~= value) then
          res = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(res, lst[i + 1])
      end
      i = (i + 1)
    end
    return res
  end
  function remove_key(m, key)
    local res = {}
    for k in pairs(m) do
      if (k ~= key) then
        res[k] = m[k]
      end
    end
    return res
  end
  function add_edge(graph, s, d)
    if ((not (graph.adj[s] ~= nil)) or (not (graph.adj[d] ~= nil))) then
      panic("vertex missing")
    end
    if contains_edge(graph, s, d) then
      panic("edge exists")
    end
    local adj = {}
    for k in pairs(graph.adj) do
      adj[k] = graph.adj[k]
    end
    local list_s = adj[s]
    list_s = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(list_s, d)
  adj[s] = list_s
  if (not graph.directed) then
    local list_d = adj[d]
    list_d = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(list_d, s)
  adj[d] = list_d
end
return {adj = adj, directed = graph.directed}
end
function remove_edge(graph, s, d)
  if ((not (graph.adj[s] ~= nil)) or (not (graph.adj[d] ~= nil))) then
    panic("vertex missing")
  end
  if (not contains_edge(graph, s, d)) then
    panic("edge missing")
  end
  local adj = {}
  for k in pairs(graph.adj) do
    adj[k] = graph.adj[k]
  end
  adj[s] = remove_from_list(adj[s], d)
  if (not graph.directed) then
    adj[d] = remove_from_list(adj[d], s)
  end
  return {adj = adj, directed = graph.directed}
end
function remove_vertex(graph, v)
  if (not (graph.adj[v] ~= nil)) then
    panic("vertex missing")
  end
  local adj = {}
  for k in pairs(graph.adj) do
    if (k ~= v) then
      adj[k] = remove_from_list(graph.adj[k], v)
    end
  end
  return {adj = adj, directed = graph.directed}
end
function contains_vertex(graph, v)
  return (graph.adj[v] ~= nil)
end
function contains_edge(graph, s, d)
  if ((not (graph.adj[s] ~= nil)) or (not (graph.adj[d] ~= nil))) then
    panic("vertex missing")
  end
  for _, x in ipairs(graph.adj[s]) do
    if (x == d) then
      return true
    end
  end
  return false
end
function clear_graph(graph)
  return {adj = {}, directed = graph.directed}
end
function to_string(graph)
  return
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(graph.adj)
end
function main()
  local vertices = {"1", "2", "3", "4"}
  local edges = {{"1", "2"}, {"2", "3"}, {"3", "4"}}
  local g = create_graph(vertices, edges, false)
  print((((type(to_string(g)) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(to_string(g))) or (to_string(g))))
  g = add_vertex((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(g), "5")
  g = add_edge((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(g), "4", "5")
  print((((type(tostring(contains_edge(g, "4", "5"))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(tostring(contains_edge(g, "4", "5")))) or (tostring(contains_edge(g, "4", "5")))))
  g = remove_edge((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(g), "1", "2")
  g = remove_vertex((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(g), "3")
  print((((type(to_string(g)) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(to_string(g))) or (to_string(g))))
end
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
