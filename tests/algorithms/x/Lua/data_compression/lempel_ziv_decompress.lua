-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function list_contains(xs, v)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (xs[i + 1] == v) then
            return true
          end
          i = (i + 1)
        end
        return false
      end
      function is_power_of_two(n)
        if (n < 1) then
          return false
        end
        local x = n
        while (x > 1) do
          if ((x % 2) ~= 0) then
            return false
          end
          x = (x // 2)
        end
        return true
      end
      function bin_string(n)
        if (n == 0) then
          return "0"
        end
        local res = ""
        local x = n
        while (x > 0) do
          local bit = (x % 2)
          res = (tostring(bit) .. res)
          x = (x // 2)
        end
        return res
      end
      function decompress_data(data_bits)
        local lexicon = {__name = "GenType1", __order = {"0", "1"}, ["0"] = "0", ["1"] = "1"}
        local keys = {"0", "1"}
        local result = ""
        local curr_string = ""
        local index = 2
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(data_bits)) do
              curr_string = (curr_string .. _substring(data_bits, i, (i + 1)))
              if (not list_contains(keys, curr_string)) then
                i = (i + 1)
                goto __cont_1
              end
              local last_match_id = lexicon[curr_string]
              result = (result .. last_match_id)
              lexicon[curr_string] = (last_match_id .. "0")
              if is_power_of_two(index) then
                local new_lex = {}
                local new_keys = {}
                local j = 0
                while (j < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(keys)) do
                      local curr_key = keys[j + 1]
                      new_lex[("0" .. curr_key)] = lexicon[curr_key]
                      new_keys = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(new_keys, ("0" .. curr_key))
                    j = (j + 1)
                  end
                  lexicon = new_lex
                  keys = new_keys
                end
                local new_key = bin_string(index)
                lexicon[new_key] = (last_match_id .. "1")
                keys = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(keys, new_key)
              index = (index + 1)
              curr_string = ""
              i = (i + 1)
              ::__cont_1::
            end
            return result
          end
          sample = "1011001"
          decompressed = decompress_data(sample)
          print((((type(decompressed) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(decompressed)) or (decompressed)))
          local _bench_end = os.clock()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
