-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function token_to_string(t)
    return (((((("(" .. tostring(t.offset)) .. ", ") .. tostring(t.length)) .. ", ") .. tostring(t.indicator)) .. ")")
  end
  function tokens_to_string(ts)
    local res = "["
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(ts)) do
          res = (res .. token_to_string(ts[i + 1]))
          if (i < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(ts) - 1)) then
                res = (res .. ", ")
              end
              i = (i + 1)
            end
            return (res .. "]")
          end
          function match_length_from_index(text, window, text_index, window_index)
            if ((text_index >= (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(text)) or (window_index >= (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(window))) then
                      return 0
                    end
                    local tc = _substring(text, text_index, (text_index + 1))
                    local wc = _substring(window, window_index, (window_index + 1))
                    if (tc ~= wc) then
                      return 0
                    end
                    return (1 + match_length_from_index(text, (window .. tc), (text_index + 1), (window_index + 1)))
                  end
                  function find_encoding_token(text, search_buffer)
                    if ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(text) == 0) then
                          panic("We need some text to work with.")
                        end
                        local length = 0
                        local offset = 0
                        if ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(search_buffer) == 0) then
                              return {offset = offset, length = length, indicator = _substring(text, 0, 1)}
                            end
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(search_buffer)) do
                                  local ch = _substring(search_buffer, i, (i + 1))
                                  local found_offset = ((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(search_buffer) - i)
                                      if (ch == _substring(text, 0, 1)) then
                                        local found_length = match_length_from_index(text, search_buffer, 0, i)
                                        if (found_length >= length) then
                                          offset = found_offset
                                          length = found_length
                                        end
                                      end
                                      i = (i + 1)
                                    end
                                    return {offset = offset, length = length, indicator = _substring(text, length, (length + 1))}
                                  end
                                  function lz77_compress(text, window_size, lookahead)
                                    local search_buffer_size = (window_size - lookahead)
                                    local output = {}
                                    local search_buffer = ""
                                    local remaining = text
                                    while ((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(remaining) > 0) do
                                          local token = find_encoding_token(remaining, search_buffer)
                                          local add_len = (token.length + 1)
                                          search_buffer = (search_buffer .. _substring(remaining, 0, add_len))
                                          if ((function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(search_buffer) > search_buffer_size) then
                                                search_buffer = _substring(search_buffer, ((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(search_buffer) - search_buffer_size), (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(search_buffer))
                                                      end
                                                      remaining = _substring(remaining, add_len, (function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(remaining))
                                                          output = (function(lst, item)
                                                          local res = {table.unpack(lst or {})}
                                                          table.insert(res, item)
                                                          return res
                                                        end)(output, token)
                                                      end
                                                      return output
                                                    end
                                                    function lz77_decompress(tokens)
                                                      local output = ""
                                                      for _, t in ipairs(tokens) do
                                                        local i = 0
                                                        while (i < t.length) do
                                                          output = (output .. _substring(output, ((function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(output) - t.offset), (((function(v)
                                                              if type(v) == 'table' and v.items ~= nil then
                                                                return #v.items
                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                  local c = 0
                                                                  for _ in pairs(v) do c = c + 1 end
                                                                  return c
                                                                elseif type(v) == 'string' then
                                                                    local l = utf8.len(v)
                                                                    if l then return l end
                                                                    return #v
                                                                  elseif type(v) == 'table' then
                                                                      return #v
                                                                    else
                                                                      return 0
                                                                    end
                                                                  end)(output) - t.offset) + 1)))
                                                                  i = (i + 1)
                                                                end
                                                                output = (output .. tostring(t.indicator))
                                                              end
                                                              return output
                                                            end
                                                            c1 = lz77_compress("ababcbababaa", 13, 6)
                                                            print((((type(tokens_to_string(c1)) == "table")) and (
                                                            (function(v)
                                                            local function encode(x)
                                                            if type(x) == "table" then
                                                              if x.__name and x.__order then
                                                                local parts = {x.__name, " {"}
                                                                for i, k in ipairs(x.__order) do
                                                                  if i > 1 then parts[#parts+1] = ", " end
                                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              elseif #x > 0 then
                                                                  local allTables = true
                                                                  for _, v in ipairs(x) do
                                                                    if type(v) ~= "table" then allTables = false break end
                                                                  end
                                                                  local parts = {}
                                                                  if not allTables then parts[#parts+1] = "[" end
                                                                  for i, val in ipairs(x) do
                                                                    parts[#parts+1] = encode(val)
                                                                    if i < #x then parts[#parts+1] = " " end
                                                                  end
                                                                  if not allTables then parts[#parts+1] = "]" end
                                                                  return table.concat(parts)
                                                                else
                                                                  local keys = {}
                                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                  local parts = {"{"}
                                                                  for i, k in ipairs(keys) do
                                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                    if i < #keys then parts[#parts+1] = ", " end
                                                                  end
                                                                  parts[#parts+1] = "}"
                                                                  return table.concat(parts)
                                                                end
                                                              elseif type(x) == "string" then
                                                                  return '"' .. x .. '"'
                                                                else
                                                                  return tostring(x)
                                                                end
                                                              end
                                                              return encode(v)
                                                            end)(tokens_to_string(c1))) or (tokens_to_string(c1))))
                                                            c2 = lz77_compress("aacaacabcabaaac", 13, 6)
                                                            print((((type(tokens_to_string(c2)) == "table")) and (
                                                            (function(v)
                                                            local function encode(x)
                                                            if type(x) == "table" then
                                                              if x.__name and x.__order then
                                                                local parts = {x.__name, " {"}
                                                                for i, k in ipairs(x.__order) do
                                                                  if i > 1 then parts[#parts+1] = ", " end
                                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              elseif #x > 0 then
                                                                  local allTables = true
                                                                  for _, v in ipairs(x) do
                                                                    if type(v) ~= "table" then allTables = false break end
                                                                  end
                                                                  local parts = {}
                                                                  if not allTables then parts[#parts+1] = "[" end
                                                                  for i, val in ipairs(x) do
                                                                    parts[#parts+1] = encode(val)
                                                                    if i < #x then parts[#parts+1] = " " end
                                                                  end
                                                                  if not allTables then parts[#parts+1] = "]" end
                                                                  return table.concat(parts)
                                                                else
                                                                  local keys = {}
                                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                  local parts = {"{"}
                                                                  for i, k in ipairs(keys) do
                                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                    if i < #keys then parts[#parts+1] = ", " end
                                                                  end
                                                                  parts[#parts+1] = "}"
                                                                  return table.concat(parts)
                                                                end
                                                              elseif type(x) == "string" then
                                                                  return '"' .. x .. '"'
                                                                else
                                                                  return tostring(x)
                                                                end
                                                              end
                                                              return encode(v)
                                                            end)(tokens_to_string(c2))) or (tokens_to_string(c2))))
                                                            tokens_example = {{offset = 0, length = 0, indicator = "c"}, {offset = 0, length = 0, indicator = "a"}, {offset = 0, length = 0, indicator = "b"}, {offset = 0, length = 0, indicator = "r"}, {offset = 3, length = 1, indicator = "c"}, {offset = 2, length = 1, indicator = "d"}, {offset = 7, length = 4, indicator = "r"}, {offset = 3, length = 5, indicator = "d"}}
                                                            print((((type(lz77_decompress(tokens_example)) == "table")) and (
                                                            (function(v)
                                                            local function encode(x)
                                                            if type(x) == "table" then
                                                              if x.__name and x.__order then
                                                                local parts = {x.__name, " {"}
                                                                for i, k in ipairs(x.__order) do
                                                                  if i > 1 then parts[#parts+1] = ", " end
                                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              elseif #x > 0 then
                                                                  local allTables = true
                                                                  for _, v in ipairs(x) do
                                                                    if type(v) ~= "table" then allTables = false break end
                                                                  end
                                                                  local parts = {}
                                                                  if not allTables then parts[#parts+1] = "[" end
                                                                  for i, val in ipairs(x) do
                                                                    parts[#parts+1] = encode(val)
                                                                    if i < #x then parts[#parts+1] = " " end
                                                                  end
                                                                  if not allTables then parts[#parts+1] = "]" end
                                                                  return table.concat(parts)
                                                                else
                                                                  local keys = {}
                                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                  local parts = {"{"}
                                                                  for i, k in ipairs(keys) do
                                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                    if i < #keys then parts[#parts+1] = ", " end
                                                                  end
                                                                  parts[#parts+1] = "}"
                                                                  return table.concat(parts)
                                                                end
                                                              elseif type(x) == "string" then
                                                                  return '"' .. x .. '"'
                                                                else
                                                                  return tostring(x)
                                                                end
                                                              end
                                                              return encode(v)
                                                            end)(lz77_decompress(tokens_example))) or (lz77_decompress(tokens_example))))
                                                            local _bench_end = os.clock()
                                                            collectgarbage()
                                                            local _bench_end_mem = collectgarbage('count') * 1024
                                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                          end;
