-- Generated by Mochi v0.10.65 on 2025-08-14 09:59 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_conn_mock()
    return {recv_called = 0, send_called = 0, close_called = 0}
  end
  function conn_recv(conn, size)
    conn.recv_called = (conn.recv_called + 1)
    return 0
  end
  function conn_send(conn, data)
    conn.send_called = (conn.send_called + 1)
  end
  function conn_close(conn)
    conn.close_called = (conn.close_called + 1)
  end
  function make_socket_mock(conn)
    return {bind_called = 0, listen_called = 0, accept_called = 0, shutdown_called = 0, close_called = 0, conn = conn}
  end
  function socket_bind(sock)
    sock.bind_called = (sock.bind_called + 1)
  end
  function socket_listen(sock)
    sock.listen_called = (sock.listen_called + 1)
  end
  function socket_accept(sock)
    sock.accept_called = (sock.accept_called + 1)
    return sock.conn
  end
  function socket_shutdown(sock)
    sock.shutdown_called = (sock.shutdown_called + 1)
  end
  function socket_close(sock)
    sock.close_called = (sock.close_called + 1)
  end
  function make_file_mock(values)
    return {read_called = 0, data = values}
  end
  function file_read(f, size)
    if (f.read_called < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(f.data)) then
          local value = f.data[f.read_called + 1]
          f.read_called = (f.read_called + 1)
          return value
        end
        f.read_called = (f.read_called + 1)
        return 0
      end
      function file_open()
        return make_file_mock({1, 0})
      end
      function send_file(sock, f)
        socket_bind(sock)
        socket_listen(sock)
        local conn = socket_accept(sock)
        local _ = conn_recv(conn, 1024)
        local data = file_read(f, 1024)
        while (data ~= 0) do
          conn_send(conn, data)
          data = file_read(f, 1024)
        end
        conn_close(conn)
        socket_shutdown(sock)
        socket_close(sock)
      end
      function test_send_file_running_as_expected()
        local conn = make_conn_mock()
        local sock = make_socket_mock(conn)
        local f = file_open()
        send_file(sock, f)
        if (((((((((sock.bind_called == 1) and (sock.listen_called == 1)) and (sock.accept_called == 1)) and (conn.recv_called == 1)) and (f.read_called >= 1)) and (conn.send_called == 1)) and (conn.close_called == 1)) and (sock.shutdown_called == 1)) and (sock.close_called == 1)) then
          return "pass"
        end
        return "fail"
      end
      print((((type(test_send_file_running_as_expected()) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(test_send_file_running_as_expected())) or (test_send_file_running_as_expected())))
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
