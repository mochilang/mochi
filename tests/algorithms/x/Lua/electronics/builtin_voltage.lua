-- Generated by Mochi v0.10.65 on 2025-08-14 09:59 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pow10(n)
    local result = 1.0
    local i = 0
    while (i < n) do
      result = (result * 10.0)
      i = (i + 1)
    end
    return result
  end
  function ln_series(x)
    local t = ((x - 1.0) / (x + 1.0))
    local term = t
    local sum = 0.0
    local n = 1
    while (n <= 19) do
      sum = (sum + (term / n))
      term = ((term * t) * t)
      n = (n + 2)
    end
    return (2.0 * sum)
  end
  function ln(x)
    local y = x
    local k = 0
    while (y >= 10.0) do
      y = (y / 10.0)
      k = (k + 1)
    end
    while (y < 1.0) do
      y = (y * 10.0)
      k = (k - 1)
    end
    return (ln_series(y) + (k * ln_series(10.0)))
  end
  function builtin_voltage(donor_conc, acceptor_conc, intrinsic_conc)
    if (donor_conc <= 0.0) then
      _panic("Donor concentration should be positive")
    end
    if (acceptor_conc <= 0.0) then
      _panic("Acceptor concentration should be positive")
    end
    if (intrinsic_conc <= 0.0) then
      _panic("Intrinsic concentration should be positive")
    end
    if (donor_conc <= intrinsic_conc) then
      _panic("Donor concentration should be greater than intrinsic concentration")
    end
    if (acceptor_conc <= intrinsic_conc) then
      _panic("Acceptor concentration should be greater than intrinsic concentration")
    end
    return (((BOLTZMANN * TEMPERATURE) * ln(((donor_conc * acceptor_conc) / (intrinsic_conc * intrinsic_conc)))) / ELECTRON_VOLT)
  end
  BOLTZMANN = (1.380649 / pow10(23))
  ELECTRON_VOLT = (1.602176634 / pow10(19))
  TEMPERATURE = 300.0
  print((((type(_str(builtin_voltage(pow10(17), pow10(17), pow10(10)))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(_str(builtin_voltage(pow10(17), pow10(17), pow10(10))))) or (_str(builtin_voltage(pow10(17), pow10(17), pow10(10))))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
