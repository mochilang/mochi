-- Generated by Mochi v0.10.65 on 2025-08-14 09:59 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function slice(lst, s, e)
local len = #lst
if s < 0 then s = len + s end
if s < 0 then s = 0 end
if e == nil then
  e = len
elseif e < 0 then
    e = len + e
  end
  if e > len then e = len end
  if s > e then return {} end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function contains(list, value)
    for _, c in ipairs(list) do
      if (c == value) then
        return true
      end
    end
    return false
  end
  function get_significant_digits(colors)
    local digit = 0
    for _, color in ipairs(colors) do
      if (not (significant_figures_color_values[color] ~= nil)) then
        _panic((tostring(color) .. " is not a valid color for significant figure bands"))
      end
      digit = ((digit * 10) + significant_figures_color_values[color])
    end
    return digit
  end
  function get_multiplier(color)
    if (not (multiplier_color_values[color] ~= nil)) then
      _panic((color .. " is not a valid color for multiplier band"))
    end
    return multiplier_color_values[color]
  end
  function get_tolerance(color)
    if (not (tolerance_color_values[color] ~= nil)) then
      _panic((color .. " is not a valid color for tolerance band"))
    end
    return tolerance_color_values[color]
  end
  function get_temperature_coeffecient(color)
    if (not (temperature_coeffecient_color_values[color] ~= nil)) then
      _panic((color .. " is not a valid color for temperature coeffecient band"))
    end
    return temperature_coeffecient_color_values[color]
  end
  function get_band_type_count(total, typ)
    if (total == 3) then
      if (typ == "significant") then
        return 2
      end
      if (typ == "multiplier") then
        return 1
      end
      _panic((typ .. " is not valid for a 3 band resistor"))
    else
      if (total == 4) then
        if (typ == "significant") then
          return 2
        end
        if (typ == "multiplier") then
          return 1
        end
        if (typ == "tolerance") then
          return 1
        end
        _panic((typ .. " is not valid for a 4 band resistor"))
      else
        if (total == 5) then
          if (typ == "significant") then
            return 3
          end
          if (typ == "multiplier") then
            return 1
          end
          if (typ == "tolerance") then
            return 1
          end
          _panic((typ .. " is not valid for a 5 band resistor"))
        else
          if (total == 6) then
            if (typ == "significant") then
              return 3
            end
            if (typ == "multiplier") then
              return 1
            end
            if (typ == "tolerance") then
              return 1
            end
            if (typ == "temp_coeffecient") then
              return 1
            end
            _panic((typ .. " is not valid for a 6 band resistor"))
          else
            _panic((_str(total) .. " is not a valid number of bands"))
          end
        end
      end
    end
  end
  function check_validity(number_of_bands, colors)
    if ((number_of_bands < 3) or (number_of_bands > 6)) then
      _panic("Invalid number of bands. Resistor bands must be 3 to 6")
    end
    if (number_of_bands ~= (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(colors)) then
          _panic((((("Expecting " .. _str(number_of_bands)) .. " colors, provided ") .. _str((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(colors))) .. " colors"))
            end
            for _, color in ipairs(colors) do
              if (not contains(valid_colors, color)) then
                _panic((tostring(color) .. " is not a valid color"))
              end
            end
            return true
          end
          function calculate_resistance(number_of_bands, color_code_list)
            check_validity(number_of_bands, color_code_list)
            local sig_count = get_band_type_count(number_of_bands, "significant")
            local significant_colors = (function(lst,s,e)
            local r={}
            for i=s+1,e do
              r[#r+1]=lst[i]
            end
            return r
          end)(color_code_list, 0, sig_count)
          local significant_digits = get_significant_digits(significant_colors)
          local multiplier_color = color_code_list[sig_count + 1]
          local multiplier = get_multiplier(multiplier_color)
          local tolerance = 20.0
          if (number_of_bands >= 4) then
            local tolerance_color = color_code_list[(sig_count + 1) + 1]
            tolerance = get_tolerance(tolerance_color)
          end
          local temp_coeff = 0
          if (number_of_bands == 6) then
            local temp_color = color_code_list[(sig_count + 2) + 1]
            temp_coeff = get_temperature_coeffecient(temp_color)
          end
          local resistance_value = (multiplier * significant_digits)
          local resistance_str = _str(resistance_value)
          if (resistance_value == math.floor(tonumber(resistance_value) or 0)) then
            resistance_str = _str(math.floor(tonumber(resistance_value) or 0))
          end
          local answer = (((resistance_str .. "Ω ±") .. _str(tolerance)) .. "% ")
          if (temp_coeff ~= 0) then
            answer = ((answer .. _str(temp_coeff)) .. " ppm/K")
          end
          return answer
        end
        valid_colors = {"Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White", "Gold", "Silver"}
        significant_figures_color_values = {__name = "GenType1", __order = {"Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White"}, Black = 0, Brown = 1, Red = 2, Orange = 3, Yellow = 4, Green = 5, Blue = 6, Violet = 7, Grey = 8, White = 9}
        multiplier_color_values = {__name = "GenType2", __order = {"Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White", "Gold", "Silver"}, Black = 1.0, Brown = 10.0, Red = 100.0, Orange = 1000.0, Yellow = 10000.0, Green = 100000.0, Blue = 1e+06, Violet = 1e+07, Grey = 1e+08, White = 1e+09, Gold = 0.1, Silver = 0.01}
        tolerance_color_values = {__name = "GenType3", __order = {"Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "Gold", "Silver"}, Brown = 1.0, Red = 2.0, Orange = 0.05, Yellow = 0.02, Green = 0.5, Blue = 0.25, Violet = 0.1, Grey = 0.01, Gold = 5.0, Silver = 10.0}
        temperature_coeffecient_color_values = {__name = "GenType4", __order = {"Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey"}, Black = 250, Brown = 100, Red = 50, Orange = 15, Yellow = 25, Green = 20, Blue = 10, Violet = 5, Grey = 1}
        local _bench_end = os.clock()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
