-- Generated by Mochi v0.10.60 on 2025-08-08 10:08 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function get_greyscale(blue, green, red)
    local b = blue
    local g = green
    local r = red
    return math.floor(tonumber((((0.114 * b) + (0.587 * g)) + (0.299 * r))) or 0)
  end
  function zeros(h, w)
    local _table = {}
    local i = 0
    while (i < h) do
      local row = {}
      local j = 0
      while (j < w) do
        row = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(row, 0)
      j = (j + 1)
    end
    _table = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(_table, row)
  i = (i + 1)
end
return _table
end
function burkes_dither(img, threshold)
  local height = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(img)
      local width = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(img[0 + 1])
          local error_table = zeros((height + 1), (width + 4))
          local output = {}
          local y = 0
          while (y < height) do
            local row = {}
            local x = 0
            while (x < width) do
              local px = img[y + 1][x + 1]
              local grey = get_greyscale(px[0 + 1], px[1 + 1], px[2 + 1])
              local total = (grey + error_table[y + 1][(x + 2) + 1])
              local new_val = 0
              local current_error = 0
              if (threshold > total) then
                new_val = 0
                current_error = total
              else
                new_val = 255
                current_error = (total - 255)
              end
              row = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(row, new_val)
            error_table[y + 1][(x + 3) + 1] = (error_table[y + 1][(x + 3) + 1] + ((8 * current_error) // 32))
            error_table[y + 1][(x + 4) + 1] = (error_table[y + 1][(x + 4) + 1] + ((4 * current_error) // 32))
            error_table[(y + 1) + 1][(x + 2) + 1] = (error_table[(y + 1) + 1][(x + 2) + 1] + ((8 * current_error) // 32))
            error_table[(y + 1) + 1][(x + 3) + 1] = (error_table[(y + 1) + 1][(x + 3) + 1] + ((4 * current_error) // 32))
            error_table[(y + 1) + 1][(x + 4) + 1] = (error_table[(y + 1) + 1][(x + 4) + 1] + ((2 * current_error) // 32))
            error_table[(y + 1) + 1][(x + 1) + 1] = (error_table[(y + 1) + 1][(x + 1) + 1] + ((4 * current_error) // 32))
            error_table[(y + 1) + 1][x + 1] = (error_table[(y + 1) + 1][x + 1] + ((2 * current_error) // 32))
            x = (x + 1)
          end
          output = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(output, row)
        y = (y + 1)
      end
      return output
    end
    function main()
      local img = {{{0, 0, 0}, {64, 64, 64}, {128, 128, 128}, {192, 192, 192}}, {{255, 255, 255}, {200, 200, 200}, {150, 150, 150}, {100, 100, 100}}, {{30, 144, 255}, {255, 0, 0}, {0, 255, 0}, {0, 0, 255}}, {{50, 100, 150}, {80, 160, 240}, {70, 140, 210}, {60, 120, 180}}}
      local result = burkes_dither(img, 128)
      local y = 0
      while (y < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(result)) do
            local line = ""
            local x = 0
            while (x < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(result[y + 1])) do
                  line = (line .. _str(result[y + 1][x + 1]))
                  if (x < ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(result[y + 1]) - 1)) then
                        line = (line .. " ")
                      end
                      x = (x + 1)
                    end
                    print((((type(line) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)(line)) or (line)))
                    y = (y + 1)
                  end
                end
                main()
                local _bench_end = os.clock()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
