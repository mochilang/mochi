-- Generated by Mochi v0.10.60 on 2025-08-08 10:08 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sqrtApprox(x)
    local guess = (x / 2)
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function atanApprox(x)
    if (x > 1) then
      return ((PI / 2) - (x / ((x * x) + 0.28)))
    end
    if (x < (-1)) then
      return (((-PI) / 2) - (x / ((x * x) + 0.28)))
    end
    return (x / (1 + ((0.28 * x) * x)))
  end
  function atan2Approx(y, x)
    if (x > 0) then
      local r = atanApprox((y / x))
      return r
    end
    if (x < 0) then
      if (y >= 0) then
        return (atanApprox((y / x)) + PI)
      end
      return (atanApprox((y / x)) - PI)
    end
    if (y > 0) then
      return (PI / 2)
    end
    if (y < 0) then
      return ((-PI) / 2)
    end
    return 0
  end
  function deg(rad)
    return ((rad * 180) / PI)
  end
  function zero_matrix(h, w)
    local out = {}
    local i = 0
    while (i < h) do
      local row = {}
      local j = 0
      while (j < w) do
        row = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(row, 0)
      j = (j + 1)
    end
    out = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(out, row)
  i = (i + 1)
end
return out
end
function convolve(img, kernel)
  local h = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(img)
      local w = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(img[0 + 1])
          local k = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(kernel)
              local pad = (k // 2)
              local out = zero_matrix(h, w)
              local y = pad
              while (y < (h - pad)) do
                local x = pad
                while (x < (w - pad)) do
                  local sum = 0
                  local ky = 0
                  while (ky < k) do
                    local kx = 0
                    while (kx < k) do
                      local pixel = img[((y - pad) + ky) + 1][((x - pad) + kx) + 1]
                      local weight = kernel[ky + 1][kx + 1]
                      sum = (sum + (pixel * weight))
                      kx = (kx + 1)
                    end
                    ky = (ky + 1)
                  end
                  out[y + 1][x + 1] = sum
                  x = (x + 1)
                end
                y = (y + 1)
              end
              return out
            end
            function gaussian_blur(img)
              return convolve(img, GAUSSIAN_KERNEL)
            end
            function sobel_filter(img)
              local gx = convolve(img, SOBEL_GX)
              local gy = convolve(img, SOBEL_GY)
              local h = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(img)
                  local w = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(img[0 + 1])
                      local grad = zero_matrix(h, w)
                      local dir = zero_matrix(h, w)
                      local i = 0
                      while (i < h) do
                        local j = 0
                        while (j < w) do
                          local gxx = gx[i + 1][j + 1]
                          local gyy = gy[i + 1][j + 1]
                          grad[i + 1][j + 1] = sqrtApprox(((gxx * gxx) + (gyy * gyy)))
                          dir[i + 1][j + 1] = (deg(atan2Approx(gyy, gxx)) + 180)
                          j = (j + 1)
                        end
                        i = (i + 1)
                      end
                      return {__name = "GenType1", __order = {"grad", "dir"}, grad = grad, dir = dir}
                    end
                    function suppress_non_maximum(h, w, direction, grad)
                      local dest = zero_matrix(h, w)
                      local r = 1
                      while (r < (h - 1)) do
                        local c = 1
                        while (c < (w - 1)) do
                          local angle = direction[r + 1][c + 1]
                          local q = 0
                          local p = 0
                          if ((((angle >= 0) and (angle < 22.5)) or ((angle >= 157.5) and (angle <= 180))) or (angle >= 337.5)) then
                            q = grad[r + 1][(c + 1) + 1]
                            p = grad[r + 1][(c - 1) + 1]
                          else
                            if (((angle >= 22.5) and (angle < 67.5)) or ((angle >= 202.5) and (angle < 247.5))) then
                              q = grad[(r + 1) + 1][(c - 1) + 1]
                              p = grad[(r - 1) + 1][(c + 1) + 1]
                            else
                              if (((angle >= 67.5) and (angle < 112.5)) or ((angle >= 247.5) and (angle < 292.5))) then
                                q = grad[(r + 1) + 1][c + 1]
                                p = grad[(r - 1) + 1][c + 1]
                              else
                                q = grad[(r - 1) + 1][(c - 1) + 1]
                                p = grad[(r + 1) + 1][(c + 1) + 1]
                              end
                            end
                          end
                          if ((grad[r + 1][c + 1] >= q) and (grad[r + 1][c + 1] >= p)) then
                            dest[r + 1][c + 1] = grad[r + 1][c + 1]
                          end
                          c = (c + 1)
                        end
                        r = (r + 1)
                      end
                      return dest
                    end
                    function double_threshold(h, w, img, low, high, weak, strong)
                      local r = 0
                      while (r < h) do
                        local c = 0
                        while (c < w) do
                          local v = img[r + 1][c + 1]
                          if (v >= high) then
                            img[r + 1][c + 1] = strong
                          else
                            if (v < low) then
                              img[r + 1][c + 1] = 0
                            else
                              img[r + 1][c + 1] = weak
                            end
                          end
                          c = (c + 1)
                        end
                        r = (r + 1)
                      end
                    end
                    function track_edge(h, w, img, weak, strong)
                      local r = 1
                      while (r < (h - 1)) do
                        local c = 1
                        while (c < (w - 1)) do
                          if (img[r + 1][c + 1] == weak) then
                            if ((((((((img[(r + 1) + 1][c + 1] == strong) or (img[(r - 1) + 1][c + 1] == strong)) or (img[r + 1][(c + 1) + 1] == strong)) or (img[r + 1][(c - 1) + 1] == strong)) or (img[(r - 1) + 1][(c - 1) + 1] == strong)) or (img[(r - 1) + 1][(c + 1) + 1] == strong)) or (img[(r + 1) + 1][(c - 1) + 1] == strong)) or (img[(r + 1) + 1][(c + 1) + 1] == strong)) then
                              img[r + 1][c + 1] = strong
                            else
                              img[r + 1][c + 1] = 0
                            end
                          end
                          c = (c + 1)
                        end
                        r = (r + 1)
                      end
                    end
                    function canny(image, low, high, weak, strong)
                      local blurred = gaussian_blur(image)
                      local sob = sobel_filter(blurred)
                      local grad = sob.grad
                      local direction = sob.dir
                      local h = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(image)
                          local w = (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(image[0 + 1])
                              local suppressed = suppress_non_maximum(h, w, direction, grad)
                              double_threshold(h, w, suppressed, low, high, weak, strong)
                              track_edge(h, w, suppressed, weak, strong)
                              return suppressed
                            end
                            function print_image(img)
                              local r = 0
                              while (r < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(img)) do
                                    local c = 0
                                    local line = ""
                                    while (c < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(img[r + 1])) do
                                          line = ((line .. _str(math.floor(tonumber(img[r + 1][c + 1]) or 0))) .. " ")
                                          c = (c + 1)
                                        end
                                        print((((type(line) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(line)) or (line)))
                                        r = (r + 1)
                                      end
                                    end
                                    PI = 3.141592653589793
                                    GAUSSIAN_KERNEL = {{0.0625, 0.125, 0.0625}, {0.125, 0.25, 0.125}, {0.0625, 0.125, 0.0625}}
                                    SOBEL_GX = {{(-1), 0, 1}, {(-2), 0, 2}, {(-1), 0, 1}}
                                    SOBEL_GY = {{1, 2, 1}, {0, 0, 0}, {(-1), (-2), (-1)}}
                                    image = {{0, 0, 0, 0, 0}, {0, 255, 255, 255, 0}, {0, 255, 255, 255, 0}, {0, 255, 255, 255, 0}, {0, 0, 0, 0, 0}}
                                    edges = canny(image, 20, 40, 128, 255)
                                    print_image(edges)
                                    local _bench_end = os.clock()
                                    collectgarbage()
                                    local _bench_end_mem = collectgarbage('count') * 1024
                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                  end;
