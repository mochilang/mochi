-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rgb_to_gray(rgb)
    local result = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(rgb)) do
          local row = {}
          local j = 0
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(rgb[i + 1])) do
                local r = rgb[i + 1][j + 1][0 + 1]
                local g = rgb[i + 1][j + 1][1 + 1]
                local b = rgb[i + 1][j + 1][2 + 1]
                local gray = (((0.2989 * (1 * r)) + (0.587 * (1 * g))) + (0.114 * (1 * b)))
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(row, gray)
              j = (j + 1)
            end
            result = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(result, row)
          i = (i + 1)
        end
        return result
      end
      function gray_to_binary(gray)
        local result = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(gray)) do
              local row = {}
              local j = 0
              while (j < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(gray[i + 1])) do
                    local v = gray[i + 1][j + 1]
                    if ((v > 127) and (v <= 255)) then
                      row = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(row, 1)
                  else
                    row = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(row, 0)
                end
                j = (j + 1)
              end
              result = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(result, row)
            i = (i + 1)
          end
          return result
        end
        function dilation(image, kernel)
          local img_h = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(image)
              local img_w = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(image[0 + 1])
                  local k_h = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(kernel)
                      local k_w = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(kernel[0 + 1])
                          local pad_h = (k_h // 2)
                          local pad_w = (k_w // 2)
                          local p_h = (img_h + (2 * pad_h))
                          local p_w = (img_w + (2 * pad_w))
                          local padded = {}
                          local i = 0
                          while (i < p_h) do
                            local row = {}
                            local j = 0
                            while (j < p_w) do
                              row = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(row, 0)
                            j = (j + 1)
                          end
                          padded = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(padded, row)
                        i = (i + 1)
                      end
                      i = 0
                      while (i < img_h) do
                        local j = 0
                        while (j < img_w) do
                          padded[(pad_h + i) + 1][(pad_w + j) + 1] = image[i + 1][j + 1]
                          j = (j + 1)
                        end
                        i = (i + 1)
                      end
                      local output = {}
                      i = 0
                      while (i < img_h) do
                        local row = {}
                        local j = 0
                        while (j < img_w) do
                          local sum = 0
                          local ky = 0
                          while (ky < k_h) do
                            local kx = 0
                            while (kx < k_w) do
                              if (kernel[ky + 1][kx + 1] == 1) then
                                sum = (sum + padded[(i + ky) + 1][(j + kx) + 1])
                              end
                              kx = (kx + 1)
                            end
                            ky = (ky + 1)
                          end
                          if (sum > 0) then
                            row = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(row, 1)
                        else
                          row = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(row, 0)
                      end
                      j = (j + 1)
                    end
                    output = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(output, row)
                  i = (i + 1)
                end
                return output
              end
              function print_float_matrix(mat)
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(mat)) do
                      local line = ""
                      local j = 0
                      while (j < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(mat[i + 1])) do
                            line = (line .. tostring(mat[i + 1][j + 1]))
                            if (j < ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(mat[i + 1]) - 1)) then
                                  line = (line .. " ")
                                end
                                j = (j + 1)
                              end
                              print((((type(line) == "table")) and (
                              (function(v)
                              local function encode(x)
                              if type(x) == "table" then
                                if x.__name and x.__order then
                                  local parts = {x.__name, " {"}
                                  for i, k in ipairs(x.__order) do
                                    if i > 1 then parts[#parts+1] = ", " end
                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                elseif #x > 0 then
                                    local allTables = true
                                    for _, v in ipairs(x) do
                                      if type(v) ~= "table" then allTables = false break end
                                    end
                                    local parts = {}
                                    if not allTables then parts[#parts+1] = "[" end
                                    for i, val in ipairs(x) do
                                      parts[#parts+1] = encode(val)
                                      if i < #x then parts[#parts+1] = " " end
                                    end
                                    if not allTables then parts[#parts+1] = "]" end
                                    return table.concat(parts)
                                  else
                                    local keys = {}
                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                    local parts = {"{"}
                                    for i, k in ipairs(keys) do
                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                      if i < #keys then parts[#parts+1] = ", " end
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  end
                                elseif type(x) == "string" then
                                    return '"' .. x .. '"'
                                  else
                                    return tostring(x)
                                  end
                                end
                                return encode(v)
                              end)(line)) or (line)))
                              i = (i + 1)
                            end
                          end
                          function print_int_matrix(mat)
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(mat)) do
                                  local line = ""
                                  local j = 0
                                  while (j < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(mat[i + 1])) do
                                        line = (line .. tostring(mat[i + 1][j + 1]))
                                        if (j < ((function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(mat[i + 1]) - 1)) then
                                              line = (line .. " ")
                                            end
                                            j = (j + 1)
                                          end
                                          print((((type(line) == "table")) and (
                                          (function(v)
                                          local function encode(x)
                                          if type(x) == "table" then
                                            if x.__name and x.__order then
                                              local parts = {x.__name, " {"}
                                              for i, k in ipairs(x.__order) do
                                                if i > 1 then parts[#parts+1] = ", " end
                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            elseif #x > 0 then
                                                local allTables = true
                                                for _, v in ipairs(x) do
                                                  if type(v) ~= "table" then allTables = false break end
                                                end
                                                local parts = {}
                                                if not allTables then parts[#parts+1] = "[" end
                                                for i, val in ipairs(x) do
                                                  parts[#parts+1] = encode(val)
                                                  if i < #x then parts[#parts+1] = " " end
                                                end
                                                if not allTables then parts[#parts+1] = "]" end
                                                return table.concat(parts)
                                              else
                                                local keys = {}
                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                local parts = {"{"}
                                                for i, k in ipairs(keys) do
                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                  if i < #keys then parts[#parts+1] = ", " end
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              end
                                            elseif type(x) == "string" then
                                                return '"' .. x .. '"'
                                              else
                                                return tostring(x)
                                              end
                                            end
                                            return encode(v)
                                          end)(line)) or (line)))
                                          i = (i + 1)
                                        end
                                      end
                                      function main()
                                        local rgb_example = {{{127, 255, 0}}}
                                        print_float_matrix(rgb_to_gray(rgb_example))
                                        local gray_example = {{26, 255, 14}, {5, 147, 20}, {1, 200, 0}}
                                        print_int_matrix(gray_to_binary(gray_example))
                                        local binary_image = {{0, 1, 0}, {0, 1, 0}, {0, 1, 0}}
                                        local kernel = {{0, 1, 0}, {1, 1, 1}, {0, 1, 0}}
                                        print_int_matrix(dilation(binary_image, kernel))
                                      end
                                      main()
                                      local _bench_end = os.clock()
                                      collectgarbage()
                                      local _bench_end_mem = collectgarbage('count') * 1024
                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                    end;
