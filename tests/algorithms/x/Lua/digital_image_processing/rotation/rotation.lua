-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function mat_inverse3(m)
    local a = m[0 + 1][0 + 1]
    local b = m[0 + 1][1 + 1]
    local c = m[0 + 1][2 + 1]
    local d = m[1 + 1][0 + 1]
    local e = m[1 + 1][1 + 1]
    local f = m[1 + 1][2 + 1]
    local g = m[2 + 1][0 + 1]
    local h = m[2 + 1][1 + 1]
    local i = m[2 + 1][2 + 1]
    local det = (((a * ((e * i) - (f * h))) - (b * ((d * i) - (f * g)))) + (c * ((d * h) - (e * g))))
    if (det == 0) then
      panic("singular matrix")
    end
    local adj00 = ((e * i) - (f * h))
    local adj01 = ((c * h) - (b * i))
    local adj02 = ((b * f) - (c * e))
    local adj10 = ((f * g) - (d * i))
    local adj11 = ((a * i) - (c * g))
    local adj12 = ((c * d) - (a * f))
    local adj20 = ((d * h) - (e * g))
    local adj21 = ((b * g) - (a * h))
    local adj22 = ((a * e) - (b * d))
    local inv = {}
    inv = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(inv, {(adj00 / det), (adj01 / det), (adj02 / det)})
  inv = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(inv, {(adj10 / det), (adj11 / det), (adj12 / det)})
inv = (function(lst, item)
local res = {table.unpack(lst or {})}
table.insert(res, item)
return res
end)(inv, {(adj20 / det), (adj21 / det), (adj22 / det)})
return inv
end
function mat_vec_mul(m, v)
  local res = {}
  local i = 0
  while (i < 3) do
    local val = (((m[i + 1][0 + 1] * v[0 + 1]) + (m[i + 1][1 + 1] * v[1 + 1])) + (m[i + 1][2 + 1] * v[2 + 1]))
    res = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(res, val)
  i = (i + 1)
end
return res
end
function create_matrix(rows, cols, value)
  local result = {}
  local r = 0
  while (r < rows) do
    local row = {}
    local c = 0
    while (c < cols) do
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(row, value)
    c = (c + 1)
  end
  result = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(result, row)
r = (r + 1)
end
return result
end
function round_to_int(x)
  if (x >= 0) then
    return math.floor(tonumber((x + 0.5)) or 0)
  end
  return math.floor(tonumber((x - 0.5)) or 0)
end
function get_rotation(img, pt1, pt2, rows, cols)
  local src = {{pt1[0 + 1][0 + 1], pt1[0 + 1][1 + 1], 1}, {pt1[1 + 1][0 + 1], pt1[1 + 1][1 + 1], 1}, {pt1[2 + 1][0 + 1], pt1[2 + 1][1 + 1], 1}}
  local inv = mat_inverse3(src)
  local vecx = {pt2[0 + 1][0 + 1], pt2[1 + 1][0 + 1], pt2[2 + 1][0 + 1]}
  local vecy = {pt2[0 + 1][1 + 1], pt2[1 + 1][1 + 1], pt2[2 + 1][1 + 1]}
  local avec = mat_vec_mul(inv, vecx)
  local bvec = mat_vec_mul(inv, vecy)
  local a0 = avec[0 + 1]
  local a1 = avec[1 + 1]
  local a2 = avec[2 + 1]
  local b0 = bvec[0 + 1]
  local b1 = bvec[1 + 1]
  local b2 = bvec[2 + 1]
  local out = create_matrix(rows, cols, 0)
  local y = 0
  while (y < rows) do
    local x = 0
    while (x < cols) do
      local xf = (((a0 * (1 * x)) + (a1 * (1 * y))) + a2)
      local yf = (((b0 * (1 * x)) + (b1 * (1 * y))) + b2)
      local sx = round_to_int(xf)
      local sy = round_to_int(yf)
      if ((((sx >= 0) and (sx < cols)) and (sy >= 0)) and (sy < rows)) then
        out[sy + 1][sx + 1] = img[y + 1][x + 1]
      end
      x = (x + 1)
    end
    y = (y + 1)
  end
  return out
end
img = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}
pts1 = {{0, 0}, {2, 0}, {0, 2}}
pts2 = {{0, 2}, {0, 0}, {2, 2}}
rotated = get_rotation(img, pts1, pts2, 3, 3)
print((((type(
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(rotated)) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(rotated))) or (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(rotated))))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
