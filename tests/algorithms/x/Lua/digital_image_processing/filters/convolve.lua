-- Generated by Mochi v0.10.60 on 2025-08-08 10:08 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pad_edge(image, pad_size)
    local height = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(image)
        local width = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(image[0 + 1])
            local new_height = (height + (pad_size * 2))
            local new_width = (width + (pad_size * 2))
            local padded = {}
            local i = 0
            while (i < new_height) do
              local row = {}
              local src_i = i
              if (src_i < pad_size) then
                src_i = 0
              end
              if (src_i >= (height + pad_size)) then
                src_i = (height - 1)
              else
                src_i = (src_i - pad_size)
              end
              local j = 0
              while (j < new_width) do
                local src_j = j
                if (src_j < pad_size) then
                  src_j = 0
                end
                if (src_j >= (width + pad_size)) then
                  src_j = (width - 1)
                else
                  src_j = (src_j - pad_size)
                end
                row = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(row, image[src_i + 1][src_j + 1])
              j = (j + 1)
            end
            padded = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(padded, row)
          i = (i + 1)
        end
        return padded
      end
      function im2col(image, block_h, block_w)
        local rows = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(image)
            local cols = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(image[0 + 1])
                local dst_height = ((rows - block_h) + 1)
                local dst_width = ((cols - block_w) + 1)
                local image_array = {}
                local i = 0
                while (i < dst_height) do
                  local j = 0
                  while (j < dst_width) do
                    local window = {}
                    local bi = 0
                    while (bi < block_h) do
                      local bj = 0
                      while (bj < block_w) do
                        window = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(window, image[(i + bi) + 1][(j + bj) + 1])
                      bj = (bj + 1)
                    end
                    bi = (bi + 1)
                  end
                  image_array = (function(lst, item)
                  lst = lst or {}
                  table.insert(lst, item)
                  return lst
                end)(image_array, window)
                j = (j + 1)
              end
              i = (i + 1)
            end
            return image_array
          end
          function flatten(matrix)
            local out = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(matrix)) do
                  local j = 0
                  while (j < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(matrix[i + 1])) do
                        out = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(out, matrix[i + 1][j + 1])
                      j = (j + 1)
                    end
                    i = (i + 1)
                  end
                  return out
                end
                function dot(a, b)
                  local sum = 0
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(a)) do
                        sum = (sum + (a[i + 1] * b[i + 1]))
                        i = (i + 1)
                      end
                      return sum
                    end
                    function img_convolve(image, kernel)
                      local height = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(image)
                          local width = (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(image[0 + 1])
                              local k_size = (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(kernel)
                                  local pad_size = (k_size // 2)
                                  local padded = pad_edge(image, pad_size)
                                  local image_array = im2col(padded, k_size, k_size)
                                  local kernel_flat = flatten(kernel)
                                  local dst = {}
                                  local idx = 0
                                  local i = 0
                                  while (i < height) do
                                    local row = {}
                                    local j = 0
                                    while (j < width) do
                                      local val = dot(image_array[idx + 1], kernel_flat)
                                      row = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(row, val)
                                    idx = (idx + 1)
                                    j = (j + 1)
                                  end
                                  dst = (function(lst, item)
                                  lst = lst or {}
                                  table.insert(lst, item)
                                  return lst
                                end)(dst, row)
                                i = (i + 1)
                              end
                              return dst
                            end
                            function print_matrix(m)
                              local i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(m)) do
                                    local line = ""
                                    local j = 0
                                    while (j < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(m[i + 1])) do
                                          if (j > 0) then
                                            line = (line .. " ")
                                          end
                                          line = (line .. _str(m[i + 1][j + 1]))
                                          j = (j + 1)
                                        end
                                        print((((type(line) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(line)) or (line)))
                                        i = (i + 1)
                                      end
                                    end
                                    image = {{1, 2, 3, 0, 0}, {4, 5, 6, 0, 0}, {7, 8, 9, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}}
                                    laplace_kernel = {{0, 1, 0}, {1, (-4), 1}, {0, 1, 0}}
                                    result = img_convolve(image, laplace_kernel)
                                    print_matrix(result)
                                    local _bench_end = os.clock()
                                    collectgarbage()
                                    local _bench_end_mem = collectgarbage('count') * 1024
                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                  end;
