-- Generated by Mochi v0.10.60 on 2025-08-08 10:08 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function to_radians(deg)
    return ((deg * PI) / 180)
  end
  function sin_taylor(x)
    local term = x
    local sum = x
    local i = 1
    while (i < 10) do
      local k1 = (2 * i)
      local k2 = (k1 + 1)
      term = ((((-term) * x) * x) / (k1 * k2))
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function cos_taylor(x)
    local term = 1
    local sum = 1
    local i = 1
    while (i < 10) do
      local k1 = ((2 * i) - 1)
      local k2 = (2 * i)
      term = ((((-term) * x) * x) / (k1 * k2))
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function exp_taylor(x)
    local term = 1
    local sum = 1
    local i = 1
    while (i < 20) do
      term = ((term * x) / i)
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function gabor_filter_kernel(ksize, sigma, theta, lambd, gamma, psi)
    local size = ksize
    if ((size % 2) == 0) then
      size = (size + 1)
    end
    local gabor = {}
    local y = 0
    while (y < size) do
      local row = {}
      local x = 0
      while (x < size) do
        local px = (x - (size // 2))
        local py = (y - (size // 2))
        local rad = to_radians(theta)
        local cos_theta = cos_taylor(rad)
        local sin_theta = sin_taylor(rad)
        local x_rot = ((cos_theta * px) + (sin_theta * py))
        local y_rot = (((-sin_theta) * px) + (cos_theta * py))
        local exponent = ((-((x_rot * x_rot) + (((gamma * gamma) * y_rot) * y_rot))) / ((2 * sigma) * sigma))
        local value = (exp_taylor(exponent) * cos_taylor(((((2 * PI) * x_rot) / lambd) + psi)))
        row = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(row, value)
      x = (x + 1)
    end
    gabor = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(gabor, row)
  y = (y + 1)
end
return gabor
end
PI = 3.141592653589793
kernel = gabor_filter_kernel(3, 8, 0, 10, 0, 0)
print(
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(kernel))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
