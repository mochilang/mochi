-- Generated by Mochi v0.10.59 on 2025-08-06 22:50 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function abs(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function sqrtApprox(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 10) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function expApprox(x)
    local term = 1
    local sum = 1
    local n = 1
    while (n < 10) do
      term = ((term * x) / n)
      sum = (sum + term)
      n = (n + 1)
    end
    return sum
  end
  function vec_gaussian(mat, variance)
    local i = 0
    local out = {}
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(mat)) do
          local row = {}
          local j = 0
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(mat[i + 1])) do
                local v = mat[i + 1][j + 1]
                local e = ((-(v * v)) / (2 * variance))
                row = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(row, {expApprox(e)})
                j = (j + 1)
              end
              out = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(out, {row})
              i = (i + 1)
            end
            return out
          end
          function get_slice(img, x, y, kernel_size)
            local half = (kernel_size // 2)
            local i = (x - half)
            local slice = {}
            while (i <= (x + half)) do
              local row = {}
              local j = (y - half)
              while (j <= (y + half)) do
                row = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(row, {img[i + 1][j + 1]})
                j = (j + 1)
              end
              slice = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(slice, {row})
              i = (i + 1)
            end
            return slice
          end
          function get_gauss_kernel(kernel_size, spatial_variance)
            local arr = {}
            local i = 0
            while (i < kernel_size) do
              local row = {}
              local j = 0
              while (j < kernel_size) do
                local di = (i - (kernel_size // 2))
                local dj = (j - (kernel_size // 2))
                local dist = sqrtApprox(((di * di) + (dj * dj)))
                row = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(row, {dist})
                j = (j + 1)
              end
              arr = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(arr, {row})
              i = (i + 1)
            end
            return vec_gaussian(arr, spatial_variance)
          end
          function elementwise_sub(mat, value)
            local res = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(mat)) do
                  local row = {}
                  local j = 0
                  while (j < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(mat[i + 1])) do
                        row = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(row, {(mat[i + 1][j + 1] - value)})
                        j = (j + 1)
                      end
                      res = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(res, {row})
                      i = (i + 1)
                    end
                    return res
                  end
                  function elementwise_mul(a, b)
                    local res = {}
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(a)) do
                          local row = {}
                          local j = 0
                          while (j < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(a[i + 1])) do
                                row = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(row, {(a[i + 1][j + 1] * b[i + 1][j + 1])})
                                j = (j + 1)
                              end
                              res = (function(a,b) local res={table.unpack(a or {})} for _,v in ipairs(b or {}) do res[#res+1]=v end return res end)(res, {row})
                              i = (i + 1)
                            end
                            return res
                          end
                          function matrix_sum(mat)
                            local total = 0
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(mat)) do
                                  local j = 0
                                  while (j < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(mat[i + 1])) do
                                        total = (total + mat[i + 1][j + 1])
                                        j = (j + 1)
                                      end
                                      i = (i + 1)
                                    end
                                    return total
                                  end
                                  function bilateral_filter(img, spatial_variance, intensity_variance, kernel_size)
                                    local gauss_ker = get_gauss_kernel(kernel_size, spatial_variance)
                                    local img_s = img
                                    local center = img_s[(kernel_size // 2) + 1][(kernel_size // 2) + 1]
                                    local img_i = elementwise_sub(img_s, center)
                                    local img_ig = vec_gaussian(img_i, intensity_variance)
                                    local weights = elementwise_mul(gauss_ker, img_ig)
                                    local vals = elementwise_mul(img_s, weights)
                                    local sum_weights = matrix_sum(weights)
                                    local val = 0
                                    if (sum_weights ~= 0) then
                                      val = (matrix_sum(vals) / sum_weights)
                                    end
                                    return val
                                  end
                                  PI = 3.141592653589793
                                  img = {{0.2, 0.3, 0.4}, {0.3, 0.4, 0.5}, {0.4, 0.5, 0.6}}
                                  result = bilateral_filter(img, 1, 1, 3)
                                  print((((type(result) == "table")) and (
                                  (function(v)
                                  local function encode(x)
                                  if type(x) == "table" then
                                    if x.__name and x.__order then
                                      local parts = {x.__name, " {"}
                                      for i, k in ipairs(x.__order) do
                                        if i > 1 then parts[#parts+1] = ", " end
                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    elseif #x > 0 then
                                        local allTables = true
                                        for _, v in ipairs(x) do
                                          if type(v) ~= "table" then allTables = false break end
                                        end
                                        local parts = {}
                                        if not allTables then parts[#parts+1] = "[" end
                                        for i, val in ipairs(x) do
                                          parts[#parts+1] = encode(val)
                                          if i < #x then parts[#parts+1] = " " end
                                        end
                                        if not allTables then parts[#parts+1] = "]" end
                                        return table.concat(parts)
                                      else
                                        local keys = {}
                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                        local parts = {"{"}
                                        for i, k in ipairs(keys) do
                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                          if i < #keys then parts[#parts+1] = ", " end
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      end
                                    elseif type(x) == "string" then
                                        return '"' .. x .. '"'
                                      else
                                        return tostring(x)
                                      end
                                    end
                                    return encode(v)
                                  end)(result)) or (result)))
                                  local _bench_end = os.clock()
                                  collectgarbage()
                                  local _bench_end_mem = collectgarbage('count') * 1024
                                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                end;
