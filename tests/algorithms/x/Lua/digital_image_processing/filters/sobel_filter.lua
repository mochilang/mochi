-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function absf(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function sqrtApprox(x)
    if (x <= 0) then
      return 0
    end
    local guess = (x / 2)
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function atanApprox(x)
    if (x > 1) then
      return ((PI / 2) - (x / ((x * x) + 0.28)))
    end
    if (x < (-1)) then
      return (((-PI) / 2) - (x / ((x * x) + 0.28)))
    end
    return (x / (1 + ((0.28 * x) * x)))
  end
  function atan2Approx(y, x)
    if (x == 0) then
      if (y > 0) then
        return (PI / 2)
      end
      if (y < 0) then
        return ((-PI) / 2)
      end
      return 0
    end
    local a = atanApprox((y / x))
    if (x > 0) then
      return a
    end
    if (y >= 0) then
      return (a + PI)
    end
    return (a - PI)
  end
  function zeros(h, w)
    local m = {}
    local y = 0
    while (y < h) do
      local row = {}
      local x = 0
      while (x < w) do
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(row, 0)
      x = (x + 1)
    end
    m = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(m, row)
  y = (y + 1)
end
return m
end
function pad_edge(img, pad)
  local h = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(img)
      local w = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(img[0 + 1])
          local out = zeros((h + (pad * 2)), (w + (pad * 2)))
          local y = 0
          while (y < (h + (pad * 2))) do
            local x = 0
            while (x < (w + (pad * 2))) do
              local sy = (y - pad)
              if (sy < 0) then
                sy = 0
              end
              if (sy >= h) then
                sy = (h - 1)
              end
              local sx = (x - pad)
              if (sx < 0) then
                sx = 0
              end
              if (sx >= w) then
                sx = (w - 1)
              end
              out[y + 1][x + 1] = img[sy + 1][sx + 1]
              x = (x + 1)
            end
            y = (y + 1)
          end
          return out
        end
        function img_convolve(img, kernel)
          local h = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(img)
              local w = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(img[0 + 1])
                  local k = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(kernel)
                      local pad = (k // 2)
                      local padded = pad_edge(img, pad)
                      local out = zeros(h, w)
                      local y = 0
                      while (y < h) do
                        local x = 0
                        while (x < w) do
                          local sum = 0
                          local i = 0
                          while (i < k) do
                            local j = 0
                            while (j < k) do
                              sum = (sum + (padded[(y + i) + 1][(x + j) + 1] * kernel[i + 1][j + 1]))
                              j = (j + 1)
                            end
                            i = (i + 1)
                          end
                          out[y + 1][x + 1] = sum
                          x = (x + 1)
                        end
                        y = (y + 1)
                      end
                      return out
                    end
                    function abs_matrix(mat)
                      local h = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(mat)
                          local w = (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(mat[0 + 1])
                              local out = zeros(h, w)
                              local y = 0
                              while (y < h) do
                                local x = 0
                                while (x < w) do
                                  local v = mat[y + 1][x + 1]
                                  if (v < 0) then
                                    out[y + 1][x + 1] = (-v)
                                  else
                                    out[y + 1][x + 1] = v
                                  end
                                  x = (x + 1)
                                end
                                y = (y + 1)
                              end
                              return out
                            end
                            function max_matrix(mat)
                              local max_val = mat[0 + 1][0 + 1]
                              local y = 0
                              while (y < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(mat)) do
                                    local x = 0
                                    while (x < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(mat[0 + 1])) do
                                          if (mat[y + 1][x + 1] > max_val) then
                                            max_val = mat[y + 1][x + 1]
                                          end
                                          x = (x + 1)
                                        end
                                        y = (y + 1)
                                      end
                                      return max_val
                                    end
                                    function scale_matrix(mat, factor)
                                      local h = (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(mat)
                                          local w = (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(mat[0 + 1])
                                              local out = zeros(h, w)
                                              local y = 0
                                              while (y < h) do
                                                local x = 0
                                                while (x < w) do
                                                  out[y + 1][x + 1] = (mat[y + 1][x + 1] * factor)
                                                  x = (x + 1)
                                                end
                                                y = (y + 1)
                                              end
                                              return out
                                            end
                                            function sobel_filter(image)
                                              local h = (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(image)
                                                  local w = (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(image[0 + 1])
                                                      local img = {}
                                                      local y0 = 0
                                                      while (y0 < h) do
                                                        local row = {}
                                                        local x0 = 0
                                                        while (x0 < w) do
                                                          row = (function(lst, item)
                                                          local res = {table.unpack(lst or {})}
                                                          table.insert(res, item)
                                                          return res
                                                        end)(row, image[y0 + 1][x0 + 1])
                                                        x0 = (x0 + 1)
                                                      end
                                                      img = (function(lst, item)
                                                      local res = {table.unpack(lst or {})}
                                                      table.insert(res, item)
                                                      return res
                                                    end)(img, row)
                                                    y0 = (y0 + 1)
                                                  end
                                                  local kernel_x = {{(-1), 0, 1}, {(-2), 0, 2}, {(-1), 0, 1}}
                                                  local kernel_y = {{1, 2, 1}, {0, 0, 0}, {(-1), (-2), (-1)}}
                                                  local dst_x = abs_matrix(img_convolve(img, kernel_x))
                                                  local dst_y = abs_matrix(img_convolve(img, kernel_y))
                                                  local max_x = max_matrix(dst_x)
                                                  local max_y = max_matrix(dst_y)
                                                  dst_x = scale_matrix(dst_x, (255 / max_x))
                                                  dst_y = scale_matrix(dst_y, (255 / max_y))
                                                  local mag = zeros(h, w)
                                                  local theta = zeros(h, w)
                                                  local y = 0
                                                  while (y < h) do
                                                    local x = 0
                                                    while (x < w) do
                                                      local gx = dst_x[y + 1][x + 1]
                                                      local gy = dst_y[y + 1][x + 1]
                                                      mag[y + 1][x + 1] = sqrtApprox(((gx * gx) + (gy * gy)))
                                                      theta[y + 1][x + 1] = atan2Approx(gy, gx)
                                                      x = (x + 1)
                                                    end
                                                    y = (y + 1)
                                                  end
                                                  local max_m = max_matrix(mag)
                                                  mag = scale_matrix(mag, (255 / max_m))
                                                  return {mag, theta}
                                                end
                                                function print_matrix_int(mat)
                                                  local y = 0
                                                  while (y < (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(mat)) do
                                                        local line = ""
                                                        local x = 0
                                                        while (x < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(mat[y + 1])) do
                                                              line = (line .. tostring(math.floor(tonumber(mat[y + 1][x + 1]) or 0)))
                                                              if (x < ((function(v)
                                                              if type(v) == 'table' and v.items ~= nil then
                                                                return #v.items
                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                  local c = 0
                                                                  for _ in pairs(v) do c = c + 1 end
                                                                  return c
                                                                elseif type(v) == 'string' then
                                                                    local l = utf8.len(v)
                                                                    if l then return l end
                                                                    return #v
                                                                  elseif type(v) == 'table' then
                                                                      return #v
                                                                    else
                                                                      return 0
                                                                    end
                                                                  end)(mat[y + 1]) - 1)) then
                                                                    line = (line .. " ")
                                                                  end
                                                                  x = (x + 1)
                                                                end
                                                                print((((type(line) == "table")) and (
                                                                (function(v)
                                                                local function encode(x)
                                                                if type(x) == "table" then
                                                                  if x.__name and x.__order then
                                                                    local parts = {x.__name, " {"}
                                                                    for i, k in ipairs(x.__order) do
                                                                      if i > 1 then parts[#parts+1] = ", " end
                                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                    end
                                                                    parts[#parts+1] = "}"
                                                                    return table.concat(parts)
                                                                  elseif #x > 0 then
                                                                      local allTables = true
                                                                      for _, v in ipairs(x) do
                                                                        if type(v) ~= "table" then allTables = false break end
                                                                      end
                                                                      local parts = {}
                                                                      if not allTables then parts[#parts+1] = "[" end
                                                                      for i, val in ipairs(x) do
                                                                        parts[#parts+1] = encode(val)
                                                                        if i < #x then parts[#parts+1] = " " end
                                                                      end
                                                                      if not allTables then parts[#parts+1] = "]" end
                                                                      return table.concat(parts)
                                                                    else
                                                                      local keys = {}
                                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                      local parts = {"{"}
                                                                      for i, k in ipairs(keys) do
                                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                        if i < #keys then parts[#parts+1] = ", " end
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    end
                                                                  elseif type(x) == "string" then
                                                                      return '"' .. x .. '"'
                                                                    else
                                                                      return tostring(x)
                                                                    end
                                                                  end
                                                                  return encode(v)
                                                                end)(line)) or (line)))
                                                                y = (y + 1)
                                                              end
                                                            end
                                                            function print_matrix_float(mat)
                                                              local y = 0
                                                              while (y < (function(v)
                                                              if type(v) == 'table' and v.items ~= nil then
                                                                return #v.items
                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                  local c = 0
                                                                  for _ in pairs(v) do c = c + 1 end
                                                                  return c
                                                                elseif type(v) == 'string' then
                                                                    local l = utf8.len(v)
                                                                    if l then return l end
                                                                    return #v
                                                                  elseif type(v) == 'table' then
                                                                      return #v
                                                                    else
                                                                      return 0
                                                                    end
                                                                  end)(mat)) do
                                                                    local line = ""
                                                                    local x = 0
                                                                    while (x < (function(v)
                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                      return #v.items
                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                        local c = 0
                                                                        for _ in pairs(v) do c = c + 1 end
                                                                        return c
                                                                      elseif type(v) == 'string' then
                                                                          local l = utf8.len(v)
                                                                          if l then return l end
                                                                          return #v
                                                                        elseif type(v) == 'table' then
                                                                            return #v
                                                                          else
                                                                            return 0
                                                                          end
                                                                        end)(mat[y + 1])) do
                                                                          line = (line .. tostring(mat[y + 1][x + 1]))
                                                                          if (x < ((function(v)
                                                                          if type(v) == 'table' and v.items ~= nil then
                                                                            return #v.items
                                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                                              local c = 0
                                                                              for _ in pairs(v) do c = c + 1 end
                                                                              return c
                                                                            elseif type(v) == 'string' then
                                                                                local l = utf8.len(v)
                                                                                if l then return l end
                                                                                return #v
                                                                              elseif type(v) == 'table' then
                                                                                  return #v
                                                                                else
                                                                                  return 0
                                                                                end
                                                                              end)(mat[y + 1]) - 1)) then
                                                                                line = (line .. " ")
                                                                              end
                                                                              x = (x + 1)
                                                                            end
                                                                            print((((type(line) == "table")) and (
                                                                            (function(v)
                                                                            local function encode(x)
                                                                            if type(x) == "table" then
                                                                              if x.__name and x.__order then
                                                                                local parts = {x.__name, " {"}
                                                                                for i, k in ipairs(x.__order) do
                                                                                  if i > 1 then parts[#parts+1] = ", " end
                                                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              elseif #x > 0 then
                                                                                  local allTables = true
                                                                                  for _, v in ipairs(x) do
                                                                                    if type(v) ~= "table" then allTables = false break end
                                                                                  end
                                                                                  local parts = {}
                                                                                  if not allTables then parts[#parts+1] = "[" end
                                                                                  for i, val in ipairs(x) do
                                                                                    parts[#parts+1] = encode(val)
                                                                                    if i < #x then parts[#parts+1] = " " end
                                                                                  end
                                                                                  if not allTables then parts[#parts+1] = "]" end
                                                                                  return table.concat(parts)
                                                                                else
                                                                                  local keys = {}
                                                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                  local parts = {"{"}
                                                                                  for i, k in ipairs(keys) do
                                                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                    if i < #keys then parts[#parts+1] = ", " end
                                                                                  end
                                                                                  parts[#parts+1] = "}"
                                                                                  return table.concat(parts)
                                                                                end
                                                                              elseif type(x) == "string" then
                                                                                  return '"' .. x .. '"'
                                                                                else
                                                                                  return tostring(x)
                                                                                end
                                                                              end
                                                                              return encode(v)
                                                                            end)(line)) or (line)))
                                                                            y = (y + 1)
                                                                          end
                                                                        end
                                                                        function main()
                                                                          local img = {{10, 10, 10, 10, 10}, {10, 50, 50, 50, 10}, {10, 50, 80, 50, 10}, {10, 50, 50, 50, 10}, {10, 10, 10, 10, 10}}
                                                                          local res = sobel_filter(img)
                                                                          local mag = res[0 + 1]
                                                                          local theta = res[1 + 1]
                                                                          print_matrix_int(mag)
                                                                          print_matrix_float(theta)
                                                                        end
                                                                        PI = 3.141592653589793
                                                                        main()
                                                                        local _bench_end = os.clock()
                                                                        collectgarbage()
                                                                        local _bench_end_mem = collectgarbage('count') * 1024
                                                                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                      end;
