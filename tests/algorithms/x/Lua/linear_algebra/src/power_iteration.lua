-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function abs(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function sqrtApprox(x)
    if (x == 0) then
      return 0
    end
    local guess = (x / 2)
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function dot(a, b)
    local sum = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(a)) do
          sum = (sum + (a[i + 1] * b[i + 1]))
          i = (i + 1)
        end
        return sum
      end
      function mat_vec_mult(mat, vec)
        local res = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(mat)) do
              res = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(res, dot(mat[i + 1], vec))
            i = (i + 1)
          end
          return res
        end
        function norm(vec)
          local sum = 0
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(vec)) do
                sum = (sum + (vec[i + 1] * vec[i + 1]))
                i = (i + 1)
              end
              local root = sqrtApprox(sum)
              return root
            end
            function normalize(vec)
              local n = norm(vec)
              local res = {}
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(vec)) do
                    res = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(res, (vec[i + 1] / n))
                  i = (i + 1)
                end
                return res
              end
              function power_iteration(matrix, vector, error_tol, max_iterations)
                local v = normalize(vector)
                local lambda_prev = 0
                local lambda = 0
                local err = 1e+12
                local iterations = 0
                while ((err > error_tol) and (iterations < max_iterations)) do
                  local w = mat_vec_mult(matrix, v)
                  v = normalize(w)
                  local mv = mat_vec_mult(matrix, v)
                  lambda = dot(v, mv)
                  local denom = (((lambda ~= 0)) and (abs(lambda)) or (1))
                  err = (abs((lambda - lambda_prev)) / denom)
                  lambda_prev = lambda
                  iterations = (iterations + 1)
                end
                return {eigenvalue = lambda, eigenvector = v}
              end
              input_matrix = {{41, 4, 20}, {4, 26, 30}, {20, 30, 50}}
              vector = {41, 4, 20}
              result = power_iteration(input_matrix, vector, 1e-12, 100)
              print((((type(tostring(result.eigenvalue)) == "table")) and (
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(tostring(result.eigenvalue))) or (tostring(result.eigenvalue))))
              print((((type(
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(result.eigenvector)) == "table")) and (
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(result.eigenvector))) or (
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(result.eigenvector))))
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
