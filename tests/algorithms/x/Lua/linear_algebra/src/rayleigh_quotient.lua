-- Generated by Mochi v0.10.65 on 2025-08-14 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function complex_conj(z)
    return {re = z.re, im = (-z.im)}
  end
  function complex_eq(a, b)
    return ((a.re == b.re) and (a.im == b.im))
  end
  function complex_add(a, b)
    return {re = (a.re + b.re), im = (a.im + b.im)}
  end
  function complex_mul(a, b)
    local real = ((a.re * b.re) - (a.im * b.im))
    local imag = ((a.re * b.im) + (a.im * b.re))
    return {re = real, im = imag}
  end
  function conj_vector(v)
    local res = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(v)) do
          res = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(res, complex_conj(v[i + 1]))
        i = (i + 1)
      end
      return res
    end
    function vec_mat_mul(v, m)
      local result = {}
      local col = 0
      while (col < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(m[0 + 1])) do
            local sum = {re = 0.0, im = 0.0}
            local row = 0
            while (row < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(v)) do
                  sum = complex_add(sum, complex_mul(v[row + 1], m[row + 1][col + 1]))
                  row = (row + 1)
                end
                result = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(result, sum)
              col = (col + 1)
            end
            return result
          end
          function dot(a, b)
            local sum = {re = 0.0, im = 0.0}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(a)) do
                  sum = complex_add(sum, complex_mul(a[i + 1], b[i + 1]))
                  i = (i + 1)
                end
                return sum
              end
              function is_hermitian(m)
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(m)) do
                      local j = 0
                      while (j < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(m)) do
                            if (not complex_eq(m[i + 1][j + 1], complex_conj(m[j + 1][i + 1]))) then
                              return false
                            end
                            j = (j + 1)
                          end
                          i = (i + 1)
                        end
                        return true
                      end
                      function rayleigh_quotient(a, v)
                        local v_star = conj_vector(v)
                        local v_star_dot = vec_mat_mul(v_star, a)
                        local num = dot(v_star_dot, v)
                        local den = dot(v_star, v)
                        return (num.re / den.re)
                      end
                      a = {{{re = 2.0, im = 0.0}, {re = 2.0, im = 1.0}, {re = 4.0, im = 0.0}}, {{re = 2.0, im = (-1.0)}, {re = 3.0, im = 0.0}, {re = 0.0, im = 1.0}}, {{re = 4.0, im = 0.0}, {re = 0.0, im = (-1.0)}, {re = 1.0, im = 0.0}}}
                      v = {{re = 1.0, im = 0.0}, {re = 2.0, im = 0.0}, {re = 3.0, im = 0.0}}
                      if is_hermitian(a) then
                        r1 = rayleigh_quotient(a, v)
                        print((((type(r1) == "table")) and (
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "string" then
                              return '"' .. x .. '"'
                            else
                              return tostring(x)
                            end
                          end
                          return encode(v)
                        end)(r1)) or (r1)))
                        print("\n")
                      end
                      b = {{{re = 1.0, im = 0.0}, {re = 2.0, im = 0.0}, {re = 4.0, im = 0.0}}, {{re = 2.0, im = 0.0}, {re = 3.0, im = 0.0}, {re = (-1.0), im = 0.0}}, {{re = 4.0, im = 0.0}, {re = (-1.0), im = 0.0}, {re = 1.0, im = 0.0}}}
                      if is_hermitian(b) then
                        r2 = rayleigh_quotient(b, v)
                        print((((type(r2) == "table")) and (
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "string" then
                              return '"' .. x .. '"'
                            else
                              return tostring(x)
                            end
                          end
                          return encode(v)
                        end)(r2)) or (r2)))
                      end
                      local _bench_end = os.clock()
                      collectgarbage()
                      local _bench_end_mem = collectgarbage('count') * 1024
                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                    end;
