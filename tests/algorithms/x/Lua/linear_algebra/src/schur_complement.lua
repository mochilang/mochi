-- Generated by Mochi v0.10.65 on 2025-08-14 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function identity(n)
    local mat = {}
    local i = 0
    while (i < n) do
      local row = {}
      local j = 0
      while (j < n) do
        if (i == j) then
          row = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(row, 1.0)
      else
        row = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(row, 0.0)
    end
    j = (j + 1)
  end
  mat = (function(lst, item)
  lst = lst or {}
  table.insert(lst, item)
  return lst
end)(mat, row)
i = (i + 1)
end
return mat
end
function transpose(mat)
  local rows = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(mat)
      local cols = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(mat[0 + 1])
          local res = {}
          local j = 0
          while (j < cols) do
            local row = {}
            local i = 0
            while (i < rows) do
              row = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(row, mat[i + 1][j + 1])
            i = (i + 1)
          end
          res = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(res, row)
        j = (j + 1)
      end
      return res
    end
    function matmul(a, b)
      local rows = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(a)
          local cols = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(b[0 + 1])
              local inner = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(a[0 + 1])
                  local res = {}
                  local i = 0
                  while (i < rows) do
                    local row = {}
                    local j = 0
                    while (j < cols) do
                      local sum = 0.0
                      local k = 0
                      while (k < inner) do
                        sum = (sum + (a[i + 1][k + 1] * b[k + 1][j + 1]))
                        k = (k + 1)
                      end
                      row = (function(lst, item)
                      lst = lst or {}
                      table.insert(lst, item)
                      return lst
                    end)(row, sum)
                    j = (j + 1)
                  end
                  res = (function(lst, item)
                  lst = lst or {}
                  table.insert(lst, item)
                  return lst
                end)(res, row)
                i = (i + 1)
              end
              return res
            end
            function mat_sub(a, b)
              local rows = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(a)
                  local cols = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(a[0 + 1])
                      local res = {}
                      local i = 0
                      while (i < rows) do
                        local row = {}
                        local j = 0
                        while (j < cols) do
                          row = (function(lst, item)
                          lst = lst or {}
                          table.insert(lst, item)
                          return lst
                        end)(row, (a[i + 1][j + 1] - b[i + 1][j + 1]))
                        j = (j + 1)
                      end
                      res = (function(lst, item)
                      lst = lst or {}
                      table.insert(lst, item)
                      return lst
                    end)(res, row)
                    i = (i + 1)
                  end
                  return res
                end
                function inverse(mat)
                  local n = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(mat)
                      local id = identity(n)
                      local aug = {}
                      local i = 0
                      while (i < n) do
                        local row = (function(a, b)
                        local res = {table.unpack(a or {})}
                        for _, v in ipairs(b or {}) do
                          res[#res+1] = v
                        end
                        return res
                      end)(mat[i + 1], id[i + 1])
                      aug = (function(lst, item)
                      lst = lst or {}
                      table.insert(lst, item)
                      return lst
                    end)(aug, row)
                    i = (i + 1)
                  end
                  local col = 0
                  while (col < n) do
                    local pivot_row = aug[col + 1]
                    local pivot = pivot_row[col + 1]
                    if (pivot == 0.0) then
                      _panic("matrix is singular")
                    end
                    local j = 0
                    while (j < (2 * n)) do
                      pivot_row[j + 1] = (pivot_row[j + 1] / pivot)
                      j = (j + 1)
                    end
                    aug[col + 1] = pivot_row
                    local r = 0
                    while (r < n) do
                      if (r ~= col) then
                        local row_r = aug[r + 1]
                        local factor = row_r[col + 1]
                        j = 0
                        while (j < (2 * n)) do
                          row_r[j + 1] = (row_r[j + 1] - (factor * pivot_row[j + 1]))
                          j = (j + 1)
                        end
                        aug[r + 1] = row_r
                      end
                      r = (r + 1)
                    end
                    col = (col + 1)
                  end
                  local inv = {}
                  local r = 0
                  while (r < n) do
                    local row = {}
                    local c = n
                    while (c < (2 * n)) do
                      row = (function(lst, item)
                      lst = lst or {}
                      table.insert(lst, item)
                      return lst
                    end)(row, aug[r + 1][c + 1])
                    c = (c + 1)
                  end
                  inv = (function(lst, item)
                  lst = lst or {}
                  table.insert(lst, item)
                  return lst
                end)(inv, row)
                r = (r + 1)
              end
              return inv
            end
            function schur_complement(mat_a, mat_b, mat_c, pseudo_inv)
              local a_rows = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(mat_a)
                  local a_cols = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(mat_a[0 + 1])
                      if (a_rows ~= a_cols) then
                        _panic("Matrix A must be square")
                      end
                      if (a_rows ~= (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(mat_b)) then
                            _panic("Expected the same number of rows for A and B")
                          end
                          if ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(mat_b[0 + 1]) ~= (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(mat_c[0 + 1])) then
                                    _panic("Expected the same number of columns for B and C")
                                  end
                                  local a_inv = nil
                                  if pseudo_inv.ok then
                                    a_inv = pseudo_inv.value
                                  else
                                    a_inv = inverse(mat_a)
                                  end
                                  local bt = transpose(mat_b)
                                  local a_inv_b = matmul(a_inv, mat_b)
                                  local bt_a_inv_b = matmul(bt, a_inv_b)
                                  return mat_sub(mat_c, bt_a_inv_b)
                                end
                                function print_matrix(mat)
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(mat)) do
                                        local line = ""
                                        local j = 0
                                        local row = mat[i + 1]
                                        while (j < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(row)) do
                                              line = (line .. _str(row[j + 1]))
                                              if ((j + 1) < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(row)) then
                                                    line = (line .. " ")
                                                  end
                                                  j = (j + 1)
                                                end
                                                print((((type(line) == "table")) and (
                                                (function(v)
                                                local function encode(x)
                                                if type(x) == "table" then
                                                  if x.__name and x.__order then
                                                    local parts = {x.__name, " {"}
                                                    for i, k in ipairs(x.__order) do
                                                      if i > 1 then parts[#parts+1] = ", " end
                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  elseif #x > 0 then
                                                      local allTables = true
                                                      for _, v in ipairs(x) do
                                                        if type(v) ~= "table" then allTables = false break end
                                                      end
                                                      local parts = {}
                                                      if not allTables then parts[#parts+1] = "[" end
                                                      for i, val in ipairs(x) do
                                                        parts[#parts+1] = encode(val)
                                                        if i < #x then parts[#parts+1] = " " end
                                                      end
                                                      if not allTables then parts[#parts+1] = "]" end
                                                      return table.concat(parts)
                                                    else
                                                      local keys = {}
                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                      local parts = {"{"}
                                                      for i, k in ipairs(keys) do
                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                        if i < #keys then parts[#parts+1] = ", " end
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    end
                                                  elseif type(x) == "string" then
                                                      return '"' .. x .. '"'
                                                    else
                                                      return tostring(x)
                                                    end
                                                  end
                                                  return encode(v)
                                                end)(line)) or (line)))
                                                i = (i + 1)
                                              end
                                            end
                                            function main()
                                              local a = {{1.0, 2.0}, {2.0, 1.0}}
                                              local b = {{0.0, 3.0}, {3.0, 0.0}}
                                              local c = {{2.0, 1.0}, {6.0, 3.0}}
                                              local none = {value = {}, ok = false}
                                              local s = schur_complement(a, b, c, none)
                                              print_matrix(s)
                                            end
                                            main()
                                            local _bench_end = os.clock()
                                            collectgarbage()
                                            local _bench_end_mem = collectgarbage('count') * 1024
                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                          end;
