-- Generated by Mochi v0.10.59 on 2025-08-07 08:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rand()
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return seed
  end
  function random_int(a, b)
    local r = (rand() % ((b - a) + 1))
    return (a + r)
  end
  function sqrtApprox(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function arcsin_taylor(x)
    local term = x
    local sum = x
    local n = 1
    while (n < 10) do
      local num = ((((((2 * n) - 1) * ((2 * n) - 1)) * x) * x) * term)
      local den = ((2 * n) * ((2 * n) + 1))
      term = (num / den)
      sum = (sum + term)
      n = (n + 1)
    end
    return sum
  end
  function acos_taylor(x)
    return ((PI / 2) - arcsin_taylor(x))
  end
  function vector_len(v)
    return (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(v.components)
      end
      function vector_to_string(v)
        local s = "("
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(v.components)) do
              s = (s .. tostring(v.components[i + 1]))
              if (i < ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(v.components) - 1)) then
                    s = (s .. ",")
                  end
                  i = (i + 1)
                end
                s = (s .. ")")
                return s
              end
              function vector_add(a, b)
                local size = vector_len(a)
                if (size ~= vector_len(b)) then
                  return {components = {}}
                end
                local res = {}
                local i = 0
                while (i < size) do
                  res = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(res, (a.components[i + 1] + b.components[i + 1]))
                i = (i + 1)
              end
              return {components = res}
            end
            function vector_sub(a, b)
              local size = vector_len(a)
              if (size ~= vector_len(b)) then
                return {components = {}}
              end
              local res = {}
              local i = 0
              while (i < size) do
                res = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(res, (a.components[i + 1] - b.components[i + 1]))
              i = (i + 1)
            end
            return {components = res}
          end
          function vector_eq(a, b)
            if (vector_len(a) ~= vector_len(b)) then
              return false
            end
            local i = 0
            while (i < vector_len(a)) do
              if (a.components[i + 1] ~= b.components[i + 1]) then
                return false
              end
              i = (i + 1)
            end
            return true
          end
          function vector_mul_scalar(v, s)
            local res = {}
            local i = 0
            while (i < vector_len(v)) do
              res = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(res, (v.components[i + 1] * s))
            i = (i + 1)
          end
          return {components = res}
        end
        function vector_dot(a, b)
          local size = vector_len(a)
          if (size ~= vector_len(b)) then
            return 0
          end
          local sum = 0
          local i = 0
          while (i < size) do
            sum = (sum + (a.components[i + 1] * b.components[i + 1]))
            i = (i + 1)
          end
          return sum
        end
        function vector_copy(v)
          local res = {}
          local i = 0
          while (i < vector_len(v)) do
            res = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(res, v.components[i + 1])
          i = (i + 1)
        end
        return {components = res}
      end
      function vector_component(v, idx)
        return v.components[idx + 1]
      end
      function vector_change_component(v, pos, value)
        local comps = v.components
        comps[pos + 1] = value
        return {components = comps}
      end
      function vector_euclidean_length(v)
        local sum = 0
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(v.components)) do
              sum = (sum + (v.components[i + 1] * v.components[i + 1]))
              i = (i + 1)
            end
            local result = sqrtApprox(sum)
            return result
          end
          function vector_angle(a, b, deg)
            local num = vector_dot(a, b)
            local den = (vector_euclidean_length(a) * vector_euclidean_length(b))
            local ang = acos_taylor((num / den))
            if deg then
              ang = ((ang * 180) / PI)
            end
            return ang
          end
          function zero_vector(d)
            local res = {}
            local i = 0
            while (i < d) do
              res = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(res, 0)
            i = (i + 1)
          end
          return {components = res}
        end
        function unit_basis_vector(d, pos)
          local res = {}
          local i = 0
          while (i < d) do
            if (i == pos) then
              res = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(res, 1)
          else
            res = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(res, 0)
        end
        i = (i + 1)
      end
      return {components = res}
    end
    function axpy(s, x, y)
      return vector_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(vector_mul_scalar((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(x), s)), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(y))
    end
    function random_vector(n, a, b)
      local res = {}
      local i = 0
      while (i < n) do
        res = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(res, random_int(a, b))
      i = (i + 1)
    end
    return {components = res}
  end
  function matrix_to_string(m)
    local ans = ""
    local i = 0
    while (i < m.height) do
      ans = (ans .. "|")
      local j = 0
      while (j < m.width) do
        ans = (ans .. tostring(m.data[i + 1][j + 1]))
        if (j < (m.width - 1)) then
          ans = (ans .. ",")
        end
        j = (j + 1)
      end
      ans = (ans .. "|\n")
      i = (i + 1)
    end
    return ans
  end
  function matrix_add(a, b)
    if ((a.width ~= b.width) or (a.height ~= b.height)) then
      return {data = {}, width = 0, height = 0}
    end
    local mat = {}
    local i = 0
    while (i < a.height) do
      local row = {}
      local j = 0
      while (j < a.width) do
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(row, (a.data[i + 1][j + 1] + b.data[i + 1][j + 1]))
      j = (j + 1)
    end
    mat = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(mat, row)
  i = (i + 1)
end
return {data = mat, width = a.width, height = a.height}
end
function matrix_sub(a, b)
  if ((a.width ~= b.width) or (a.height ~= b.height)) then
    return {data = {}, width = 0, height = 0}
  end
  local mat = {}
  local i = 0
  while (i < a.height) do
    local row = {}
    local j = 0
    while (j < a.width) do
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(row, (a.data[i + 1][j + 1] - b.data[i + 1][j + 1]))
    j = (j + 1)
  end
  mat = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(mat, row)
i = (i + 1)
end
return {data = mat, width = a.width, height = a.height}
end
function matrix_mul_vector(m, v)
  if ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(v.components) ~= m.width) then
        return {components = {}}
      end
      local res = zero_vector(m.height)
      local i = 0
      while (i < m.height) do
        local sum = 0
        local j = 0
        while (j < m.width) do
          sum = (sum + (m.data[i + 1][j + 1] * v.components[j + 1]))
          j = (j + 1)
        end
        res = vector_change_component((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(res), i, sum)
        i = (i + 1)
      end
      return res
    end
    function matrix_mul_scalar(m, s)
      local mat = {}
      local i = 0
      while (i < m.height) do
        local row = {}
        local j = 0
        while (j < m.width) do
          row = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(row, (m.data[i + 1][j + 1] * s))
        j = (j + 1)
      end
      mat = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(mat, row)
    i = (i + 1)
  end
  return {data = mat, width = m.width, height = m.height}
end
function matrix_component(m, x, y)
  return m.data[x + 1][y + 1]
end
function matrix_change_component(m, x, y, value)
  local data = m.data
  data[x + 1][y + 1] = value
  return {data = data, width = m.width, height = m.height}
end
function matrix_minor(m, x, y)
  if (m.height ~= m.width) then
    return 0
  end
  local minor = {}
  local i = 0
  while (i < m.height) do
    if (i ~= x) then
      local row = {}
      local j = 0
      while (j < m.width) do
        if (j ~= y) then
          row = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(row, m.data[i + 1][j + 1])
      end
      j = (j + 1)
    end
    minor = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(minor, row)
end
i = (i + 1)
end
local sub = {data = minor, width = (m.width - 1), height = (m.height - 1)}
return matrix_determinant(sub)
end
function matrix_cofactor(m, x, y)
  local sign = (((((x + y) % 2) == 0)) and (1) or ((-1)))
  return (sign * matrix_minor(m, x, y))
end
function matrix_determinant(m)
  if (m.height ~= m.width) then
    return 0
  end
  if (m.height == 0) then
    return 0
  end
  if (m.height == 1) then
    return m.data[0 + 1][0 + 1]
  end
  if (m.height == 2) then
    return ((m.data[0 + 1][0 + 1] * m.data[1 + 1][1 + 1]) - (m.data[0 + 1][1 + 1] * m.data[1 + 1][0 + 1]))
  end
  local sum = 0
  local y = 0
  while (y < m.width) do
    sum = (sum + (m.data[0 + 1][y + 1] * matrix_cofactor(m, 0, y)))
    y = (y + 1)
  end
  return sum
end
function square_zero_matrix(n)
  local mat = {}
  local i = 0
  while (i < n) do
    local row = {}
    local j = 0
    while (j < n) do
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(row, 0)
    j = (j + 1)
  end
  mat = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(mat, row)
i = (i + 1)
end
return {data = mat, width = n, height = n}
end
function random_matrix(w, h, a, b)
  local mat = {}
  local i = 0
  while (i < h) do
    local row = {}
    local j = 0
    while (j < w) do
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(row, random_int(a, b))
    j = (j + 1)
  end
  mat = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(mat, row)
i = (i + 1)
end
return {data = mat, width = w, height = h}
end
function main()
  local v1 = {components = {1, 2, 3}}
  local v2 = {components = {4, 5, 6}}
  print((((type(vector_to_string(vector_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(v1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(v2)))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(vector_to_string(vector_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(v1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(v2))))) or (vector_to_string(vector_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(v1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(v2))))))
  print((((type(tostring(vector_dot(v1, v2))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(tostring(vector_dot(v1, v2)))) or (tostring(vector_dot(v1, v2)))))
  print((((type(tostring(vector_euclidean_length(v1))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(tostring(vector_euclidean_length(v1)))) or (tostring(vector_euclidean_length(v1)))))
  local m = {data = {{1, 2}, {3, 4}}, width = 2, height = 2}
  print((((type(tostring(matrix_determinant(m))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(tostring(matrix_determinant(m)))) or (tostring(matrix_determinant(m)))))
end
PI = 3.141592653589793
seed = 123456789
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
