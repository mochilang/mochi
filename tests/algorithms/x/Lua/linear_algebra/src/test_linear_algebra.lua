-- Generated by Mochi v0.10.65 on 2025-08-14 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function int_to_string(n)
    if (n == 0) then
      return "0"
    end
    local num = n
    local neg = false
    if (num < 0) then
      neg = true
      num = (-num)
    end
    local res = ""
    while (num > 0) do
      local digit = (num % 10)
      local ch = _substring("0123456789", digit, (digit + 1))
      res = (ch .. res)
      num = (num // 10)
    end
    if neg then
      res = ("-" .. res)
    end
    return res
  end
  function float_to_string(x, dec)
    local neg = false
    local num = x
    if (num < 0.0) then
      neg = true
      num = (-num)
    end
    local int_part = math.floor(tonumber(num) or 0)
    local res = int_to_string(int_part)
    if (dec > 0) then
      res = (res .. ".")
      local frac = (num - int_part)
      local i = 0
      while (i < dec) do
        frac = (frac * 10.0)
        local digit = math.floor(tonumber(frac) or 0)
        res = (res .. _substring("0123456789", digit, (digit + 1)))
        frac = (frac - digit)
        i = (i + 1)
      end
    end
    if neg then
      res = ("-" .. res)
    end
    return res
  end
  function vector_component(v, i)
    return v[i + 1]
  end
  function vector_str_int(v)
    local s = "("
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(v)) do
          s = (s .. int_to_string(v[i + 1]))
          if ((i + 1) < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(v)) then
                s = (s .. ",")
              end
              i = (i + 1)
            end
            s = (s .. ")")
            return s
          end
          function vector_str_float(v, dec)
            local s = "("
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(v)) do
                  s = (s .. float_to_string(v[i + 1], dec))
                  if ((i + 1) < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(v)) then
                        s = (s .. ",")
                      end
                      i = (i + 1)
                    end
                    s = (s .. ")")
                    return s
                  end
                  function vector_add(a, b)
                    local res = {}
                    local i = 0
                    while (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(a)) do
                          res = (function(lst, item)
                          lst = lst or {}
                          table.insert(lst, item)
                          return lst
                        end)(res, (a[i + 1] + b[i + 1]))
                        i = (i + 1)
                      end
                      return res
                    end
                    function vector_sub(a, b)
                      local res = {}
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(a)) do
                            res = (function(lst, item)
                            lst = lst or {}
                            table.insert(lst, item)
                            return lst
                          end)(res, (a[i + 1] - b[i + 1]))
                          i = (i + 1)
                        end
                        return res
                      end
                      function vector_scalar_mul(v, s)
                        local res = {}
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(v)) do
                              res = (function(lst, item)
                              lst = lst or {}
                              table.insert(lst, item)
                              return lst
                            end)(res, (v[i + 1] * s))
                            i = (i + 1)
                          end
                          return res
                        end
                        function vector_dot(a, b)
                          local sum = 0
                          local i = 0
                          while (i < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(a)) do
                                sum = (sum + (a[i + 1] * b[i + 1]))
                                i = (i + 1)
                              end
                              return sum
                            end
                            function sqrt_newton(x)
                              if (x == 0.0) then
                                return 0.0
                              end
                              local low = 0.0
                              local high = x
                              if (x < 1.0) then
                                high = 1.0
                              end
                              local mid = 0.0
                              local i = 0
                              while (i < 40) do
                                mid = ((low + high) / 2.0)
                                if ((mid * mid) > x) then
                                  high = mid
                                else
                                  low = mid
                                end
                                i = (i + 1)
                              end
                              return mid
                            end
                            function euclidean_length(v)
                              local sum = 0.0
                              local i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(v)) do
                                    local val = v[i + 1]
                                    sum = (sum + (val * val))
                                    i = (i + 1)
                                  end
                                  return sqrt_newton(sum)
                                end
                                function zero_vector(n)
                                  local v = {}
                                  local i = 0
                                  while (i < n) do
                                    v = (function(lst, item)
                                    lst = lst or {}
                                    table.insert(lst, item)
                                    return lst
                                  end)(v, 0)
                                  i = (i + 1)
                                end
                                return v
                              end
                              function unit_basis_vector(n, idx)
                                local v = zero_vector(n)
                                v[idx + 1] = 1
                                return v
                              end
                              function axpy(a, x, y)
                                local res = {}
                                local i = 0
                                while (i < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(x)) do
                                      res = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(res, ((a * x[i + 1]) + y[i + 1]))
                                    i = (i + 1)
                                  end
                                  return res
                                end
                                function copy_vector(x)
                                  local res = {}
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(x)) do
                                        res = (function(lst, item)
                                        lst = lst or {}
                                        table.insert(lst, item)
                                        return lst
                                      end)(res, x[i + 1])
                                      i = (i + 1)
                                    end
                                    return res
                                  end
                                  function change_component(v, idx, val)
                                    v[idx + 1] = val
                                  end
                                  function matrix_str(m)
                                    local s = ""
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(m)) do
                                          s = (s .. "|")
                                          local j = 0
                                          while (j < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(m[0 + 1])) do
                                                s = (s .. int_to_string(m[i + 1][j + 1]))
                                                if ((j + 1) < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(m[0 + 1])) then
                                                      s = (s .. ",")
                                                    end
                                                    j = (j + 1)
                                                  end
                                                  s = (s .. "|\n")
                                                  i = (i + 1)
                                                end
                                                return s
                                              end
                                              function submatrix(m, row, col)
                                                local res = {}
                                                local i = 0
                                                while (i < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(m)) do
                                                      if (i ~= row) then
                                                        local r = {}
                                                        local j = 0
                                                        while (j < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(m[0 + 1])) do
                                                              if (j ~= col) then
                                                                r = (function(lst, item)
                                                                lst = lst or {}
                                                                table.insert(lst, item)
                                                                return lst
                                                              end)(r, m[i + 1][j + 1])
                                                            end
                                                            j = (j + 1)
                                                          end
                                                          res = (function(lst, item)
                                                          lst = lst or {}
                                                          table.insert(lst, item)
                                                          return lst
                                                        end)(res, r)
                                                      end
                                                      i = (i + 1)
                                                    end
                                                    return res
                                                  end
                                                  function determinant(m)
                                                    local n = (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(m)
                                                        if (n == 1) then
                                                          return m[0 + 1][0 + 1]
                                                        end
                                                        if (n == 2) then
                                                          return ((m[0 + 1][0 + 1] * m[1 + 1][1 + 1]) - (m[0 + 1][1 + 1] * m[1 + 1][0 + 1]))
                                                        end
                                                        local det = 0
                                                        local c = 0
                                                        while (c < n) do
                                                          local sub = submatrix(m, 0, c)
                                                          local sign = 1
                                                          if ((c % 2) == 1) then
                                                            sign = (-1)
                                                          end
                                                          det = (det + ((sign * m[0 + 1][c + 1]) * determinant(sub)))
                                                          c = (c + 1)
                                                        end
                                                        return det
                                                      end
                                                      function matrix_minor(m, row, col)
                                                        return determinant(submatrix(m, row, col))
                                                      end
                                                      function matrix_cofactor(m, row, col)
                                                        local sign = 1
                                                        if (((row + col) % 2) == 1) then
                                                          sign = (-1)
                                                        end
                                                        return (sign * matrix_minor(m, row, col))
                                                      end
                                                      function matrix_mul_vector(m, v)
                                                        local res = {}
                                                        local i = 0
                                                        while (i < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(m)) do
                                                              local sum = 0
                                                              local j = 0
                                                              while (j < (function(v)
                                                              if type(v) == 'table' and v.items ~= nil then
                                                                return #v.items
                                                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                  local c = 0
                                                                  for _ in pairs(v) do c = c + 1 end
                                                                  return c
                                                                elseif type(v) == 'string' then
                                                                    local l = utf8.len(v)
                                                                    if l then return l end
                                                                    return #v
                                                                  elseif type(v) == 'table' then
                                                                      return #v
                                                                    else
                                                                      return 0
                                                                    end
                                                                  end)(m[0 + 1])) do
                                                                    sum = (sum + (m[i + 1][j + 1] * v[j + 1]))
                                                                    j = (j + 1)
                                                                  end
                                                                  res = (function(lst, item)
                                                                  lst = lst or {}
                                                                  table.insert(lst, item)
                                                                  return lst
                                                                end)(res, sum)
                                                                i = (i + 1)
                                                              end
                                                              return res
                                                            end
                                                            function matrix_mul_scalar(m, s)
                                                              local res = {}
                                                              local i = 0
                                                              while (i < (function(v)
                                                              if type(v) == 'table' and v.items ~= nil then
                                                                return #v.items
                                                              elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                  local c = 0
                                                                  for _ in pairs(v) do c = c + 1 end
                                                                  return c
                                                                elseif type(v) == 'string' then
                                                                    local l = utf8.len(v)
                                                                    if l then return l end
                                                                    return #v
                                                                  elseif type(v) == 'table' then
                                                                      return #v
                                                                    else
                                                                      return 0
                                                                    end
                                                                  end)(m)) do
                                                                    local row = {}
                                                                    local j = 0
                                                                    while (j < (function(v)
                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                      return #v.items
                                                                    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                        local c = 0
                                                                        for _ in pairs(v) do c = c + 1 end
                                                                        return c
                                                                      elseif type(v) == 'string' then
                                                                          local l = utf8.len(v)
                                                                          if l then return l end
                                                                          return #v
                                                                        elseif type(v) == 'table' then
                                                                            return #v
                                                                          else
                                                                            return 0
                                                                          end
                                                                        end)(m[0 + 1])) do
                                                                          row = (function(lst, item)
                                                                          lst = lst or {}
                                                                          table.insert(lst, item)
                                                                          return lst
                                                                        end)(row, (m[i + 1][j + 1] * s))
                                                                        j = (j + 1)
                                                                      end
                                                                      res = (function(lst, item)
                                                                      lst = lst or {}
                                                                      table.insert(lst, item)
                                                                      return lst
                                                                    end)(res, row)
                                                                    i = (i + 1)
                                                                  end
                                                                  return res
                                                                end
                                                                function matrix_change_component(m, i, j, val)
                                                                  m[i + 1][j + 1] = val
                                                                end
                                                                function matrix_component(m, i, j)
                                                                  return m[i + 1][j + 1]
                                                                end
                                                                function matrix_add(a, b)
                                                                  local res = {}
                                                                  local i = 0
                                                                  while (i < (function(v)
                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                    return #v.items
                                                                  elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                      local c = 0
                                                                      for _ in pairs(v) do c = c + 1 end
                                                                      return c
                                                                    elseif type(v) == 'string' then
                                                                        local l = utf8.len(v)
                                                                        if l then return l end
                                                                        return #v
                                                                      elseif type(v) == 'table' then
                                                                          return #v
                                                                        else
                                                                          return 0
                                                                        end
                                                                      end)(a)) do
                                                                        local row = {}
                                                                        local j = 0
                                                                        while (j < (function(v)
                                                                        if type(v) == 'table' and v.items ~= nil then
                                                                          return #v.items
                                                                        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                            local c = 0
                                                                            for _ in pairs(v) do c = c + 1 end
                                                                            return c
                                                                          elseif type(v) == 'string' then
                                                                              local l = utf8.len(v)
                                                                              if l then return l end
                                                                              return #v
                                                                            elseif type(v) == 'table' then
                                                                                return #v
                                                                              else
                                                                                return 0
                                                                              end
                                                                            end)(a[0 + 1])) do
                                                                              row = (function(lst, item)
                                                                              lst = lst or {}
                                                                              table.insert(lst, item)
                                                                              return lst
                                                                            end)(row, (a[i + 1][j + 1] + b[i + 1][j + 1]))
                                                                            j = (j + 1)
                                                                          end
                                                                          res = (function(lst, item)
                                                                          lst = lst or {}
                                                                          table.insert(lst, item)
                                                                          return lst
                                                                        end)(res, row)
                                                                        i = (i + 1)
                                                                      end
                                                                      return res
                                                                    end
                                                                    function matrix_sub(a, b)
                                                                      local res = {}
                                                                      local i = 0
                                                                      while (i < (function(v)
                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                        return #v.items
                                                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                          local c = 0
                                                                          for _ in pairs(v) do c = c + 1 end
                                                                          return c
                                                                        elseif type(v) == 'string' then
                                                                            local l = utf8.len(v)
                                                                            if l then return l end
                                                                            return #v
                                                                          elseif type(v) == 'table' then
                                                                              return #v
                                                                            else
                                                                              return 0
                                                                            end
                                                                          end)(a)) do
                                                                            local row = {}
                                                                            local j = 0
                                                                            while (j < (function(v)
                                                                            if type(v) == 'table' and v.items ~= nil then
                                                                              return #v.items
                                                                            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                                local c = 0
                                                                                for _ in pairs(v) do c = c + 1 end
                                                                                return c
                                                                              elseif type(v) == 'string' then
                                                                                  local l = utf8.len(v)
                                                                                  if l then return l end
                                                                                  return #v
                                                                                elseif type(v) == 'table' then
                                                                                    return #v
                                                                                  else
                                                                                    return 0
                                                                                  end
                                                                                end)(a[0 + 1])) do
                                                                                  row = (function(lst, item)
                                                                                  lst = lst or {}
                                                                                  table.insert(lst, item)
                                                                                  return lst
                                                                                end)(row, (a[i + 1][j + 1] - b[i + 1][j + 1]))
                                                                                j = (j + 1)
                                                                              end
                                                                              res = (function(lst, item)
                                                                              lst = lst or {}
                                                                              table.insert(lst, item)
                                                                              return lst
                                                                            end)(res, row)
                                                                            i = (i + 1)
                                                                          end
                                                                          return res
                                                                        end
                                                                        function square_zero_matrix(n)
                                                                          local m = {}
                                                                          local i = 0
                                                                          while (i < n) do
                                                                            m = (function(lst, item)
                                                                            lst = lst or {}
                                                                            table.insert(lst, item)
                                                                            return lst
                                                                          end)(m, zero_vector(n))
                                                                          i = (i + 1)
                                                                        end
                                                                        return m
                                                                      end
                                                                      function assert_int(name, actual, expected)
                                                                        if (actual == expected) then
                                                                          print((((type((name .. " ok")) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)((name .. " ok"))) or ((name .. " ok"))))
                                                                        else
                                                                          print((((type(((((name .. " fail ") .. int_to_string(actual)) .. " != ") .. int_to_string(expected))) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)(((((name .. " fail ") .. int_to_string(actual)) .. " != ") .. int_to_string(expected)))) or (((((name .. " fail ") .. int_to_string(actual)) .. " != ") .. int_to_string(expected)))))
                                                                        end
                                                                      end
                                                                      function assert_str(name, actual, expected)
                                                                        if (actual == expected) then
                                                                          print((((type((name .. " ok")) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)((name .. " ok"))) or ((name .. " ok"))))
                                                                        else
                                                                          print((((type((name .. " fail")) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)((name .. " fail"))) or ((name .. " fail"))))
                                                                          print((((type(actual) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)(actual)) or (actual)))
                                                                          print((((type(expected) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)(expected)) or (expected)))
                                                                        end
                                                                      end
                                                                      function assert_float(name, actual, expected, eps)
                                                                        local diff = (actual - expected)
                                                                        if (diff < 0.0) then
                                                                          diff = (-diff)
                                                                        end
                                                                        if (diff <= eps) then
                                                                          print((((type((name .. " ok")) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)((name .. " ok"))) or ((name .. " ok"))))
                                                                        else
                                                                          print((((type((name .. " fail")) == "table")) and (
                                                                          (function(v)
                                                                          local function encode(x)
                                                                          if type(x) == "table" then
                                                                            if x.__name and x.__order then
                                                                              local parts = {x.__name, " {"}
                                                                              for i, k in ipairs(x.__order) do
                                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                              end
                                                                              parts[#parts+1] = "}"
                                                                              return table.concat(parts)
                                                                            elseif #x > 0 then
                                                                                local allTables = true
                                                                                for _, v in ipairs(x) do
                                                                                  if type(v) ~= "table" then allTables = false break end
                                                                                end
                                                                                local parts = {}
                                                                                if not allTables then parts[#parts+1] = "[" end
                                                                                for i, val in ipairs(x) do
                                                                                  parts[#parts+1] = encode(val)
                                                                                  if i < #x then parts[#parts+1] = " " end
                                                                                end
                                                                                if not allTables then parts[#parts+1] = "]" end
                                                                                return table.concat(parts)
                                                                              else
                                                                                local keys = {}
                                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                local parts = {"{"}
                                                                                for i, k in ipairs(keys) do
                                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              end
                                                                            elseif type(x) == "string" then
                                                                                return '"' .. x .. '"'
                                                                              else
                                                                                return tostring(x)
                                                                              end
                                                                            end
                                                                            return encode(v)
                                                                          end)((name .. " fail"))) or ((name .. " fail"))))
                                                                        end
                                                                      end
                                                                      vx = {1, 2, 3}
                                                                      assert_int("component0", vector_component(vx, 0), 1)
                                                                      assert_int("component2", vector_component(vx, 2), 3)
                                                                      vs = {0, 0, 0, 0, 0, 1}
                                                                      assert_str("str_vector", vector_str_int(vs), "(0,0,0,0,0,1)")
                                                                      vsize = {1, 2, 3, 4}
                                                                      assert_int("size", (function(v)
                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                        return #v.items
                                                                      elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                          local c = 0
                                                                          for _ in pairs(v) do c = c + 1 end
                                                                          return c
                                                                        elseif type(v) == 'string' then
                                                                            local l = utf8.len(v)
                                                                            if l then return l end
                                                                            return #v
                                                                          elseif type(v) == 'table' then
                                                                              return #v
                                                                            else
                                                                              return 0
                                                                            end
                                                                          end)(vsize), 4)
                                                                          va = {1, 2, 3}
                                                                          vb = {1, 1, 1}
                                                                          vsum = vector_add(va, vb)
                                                                          assert_int("add0", vector_component(vsum, 0), 2)
                                                                          assert_int("add1", vector_component(vsum, 1), 3)
                                                                          assert_int("add2", vector_component(vsum, 2), 4)
                                                                          vsub = vector_sub(va, vb)
                                                                          assert_int("sub0", vector_component(vsub, 0), 0)
                                                                          assert_int("sub1", vector_component(vsub, 1), 1)
                                                                          assert_int("sub2", vector_component(vsub, 2), 2)
                                                                          vmul = vector_scalar_mul(va, 3.0)
                                                                          assert_str("scalar_mul", vector_str_float(vmul, 1), "(3.0,6.0,9.0)")
                                                                          assert_int("dot_product", vector_dot({2, (-1), 4}, {1, (-2), (-1)}), 0)
                                                                          zvec = zero_vector(10)
                                                                          zstr = vector_str_int(zvec)
                                                                          zcount = 0
                                                                          zi = 0
                                                                          while (zi < (function(v)
                                                                          if type(v) == 'table' and v.items ~= nil then
                                                                            return #v.items
                                                                          elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                                                                              local c = 0
                                                                              for _ in pairs(v) do c = c + 1 end
                                                                              return c
                                                                            elseif type(v) == 'string' then
                                                                                local l = utf8.len(v)
                                                                                if l then return l end
                                                                                return #v
                                                                              elseif type(v) == 'table' then
                                                                                  return #v
                                                                                else
                                                                                  return 0
                                                                                end
                                                                              end)(zstr)) do
                                                                                if (_substring(zstr, zi, (zi + 1)) == "0") then
                                                                                  zcount = (zcount + 1)
                                                                                end
                                                                                zi = (zi + 1)
                                                                              end
                                                                              assert_int("zero_vector", zcount, 10)
                                                                              assert_str("unit_basis", vector_str_int(unit_basis_vector(3, 1)), "(0,1,0)")
                                                                              assert_str("axpy", vector_str_int(axpy(2, {1, 2, 3}, {1, 0, 1})), "(3,4,7)")
                                                                              vcopy = copy_vector({1, 0, 0, 0, 0, 0})
                                                                              assert_str("copy", vector_str_int(vcopy), "(1,0,0,0,0,0)")
                                                                              vchange = {1, 0, 0}
                                                                              change_component(vchange, 0, 0)
                                                                              change_component(vchange, 1, 1)
                                                                              assert_str("change_component", vector_str_int(vchange), "(0,1,0)")
                                                                              ma = {{1, 2, 3}, {2, 4, 5}, {6, 7, 8}}
                                                                              assert_str("matrix_str", matrix_str(ma), "|1,2,3|\n|2,4,5|\n|6,7,8|\n")
                                                                              assert_int("determinant", determinant(ma), (-5))
                                                                              mb = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}
                                                                              mv = matrix_mul_vector(mb, {1, 2, 3})
                                                                              assert_str("matrix_vec_mul", vector_str_int(mv), "(14,32,50)")
                                                                              msc = matrix_mul_scalar(mb, 2)
                                                                              assert_str("matrix_scalar_mul", matrix_str(msc), "|2,4,6|\n|8,10,12|\n|14,16,18|\n")
                                                                              mc = {{1, 2, 3}, {2, 4, 5}, {6, 7, 8}}
                                                                              matrix_change_component(mc, 0, 2, 5)
                                                                              assert_str("change_component_matrix", matrix_str(mc), "|1,2,5|\n|2,4,5|\n|6,7,8|\n")
                                                                              assert_int("matrix_component", matrix_component(mc, 2, 1), 7)
                                                                              madd = matrix_add({{1, 2, 3}, {2, 4, 5}, {6, 7, 8}}, {{1, 2, 7}, {2, 4, 5}, {6, 7, 10}})
                                                                              assert_str("matrix_add", matrix_str(madd), "|2,4,10|\n|4,8,10|\n|12,14,18|\n")
                                                                              msub = matrix_sub({{1, 2, 3}, {2, 4, 5}, {6, 7, 8}}, {{1, 2, 7}, {2, 4, 5}, {6, 7, 10}})
                                                                              assert_str("matrix_sub", matrix_str(msub), "|0,0,-4|\n|0,0,0|\n|0,0,-2|\n")
                                                                              mzero = square_zero_matrix(5)
                                                                              assert_str("square_zero_matrix", matrix_str(mzero), "|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n")
                                                                              local _bench_end = os.clock()
                                                                              collectgarbage()
                                                                              local _bench_end_mem = collectgarbage('count') * 1024
                                                                              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                            end;
