-- Generated by Mochi v0.10.65 on 2025-08-14 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rank_of_matrix(matrix)
    local rows = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(matrix)
        if (rows == 0) then
          return 0
        end
        local columns = ((((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(matrix[0 + 1]) > 0)) and ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(matrix[0 + 1])) or (0))
                local rank = (((rows < columns)) and (rows) or (columns))
                local row = 0
                while (row < rank) do
                  if (matrix[row + 1][row + 1] ~= 0.0) then
                    local col = (row + 1)
                    while (col < rows) do
                      local mult = (matrix[col + 1][row + 1] / matrix[row + 1][row + 1])
                      local i = row
                      while (i < columns) do
                        matrix[col + 1][i + 1] = (matrix[col + 1][i + 1] - (mult * matrix[row + 1][i + 1]))
                        i = (i + 1)
                      end
                      col = (col + 1)
                    end
                  else
                    local reduce = true
                    local i = (row + 1)
                    while (i < rows) do
                      if (matrix[i + 1][row + 1] ~= 0.0) then
                        local temp = matrix[row + 1]
                        matrix[row + 1] = matrix[i + 1]
                        matrix[i + 1] = temp
                        reduce = false
                        break
                      end
                      i = (i + 1)
                    end
                    if reduce then
                      rank = (rank - 1)
                      local j = 0
                      while (j < rows) do
                        matrix[j + 1][row + 1] = matrix[j + 1][rank + 1]
                        j = (j + 1)
                      end
                    end
                    row = (row - 1)
                  end
                  row = (row + 1)
                end
                return rank
              end
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
