-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function round_int(x)
    if (x >= 0) then
      return math.floor(tonumber((x + 0.5)) or 0)
    end
    return math.floor(tonumber((x - 0.5)) or 0)
  end
  function zeros(rows, cols)
    local res = {}
    local i = 0
    while (i < rows) do
      local row = {}
      local j = 0
      while (j < cols) do
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(row, 0)
      j = (j + 1)
    end
    res = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(res, row)
  i = (i + 1)
end
return res
end
function warp(image, h_flow, v_flow)
  local h = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(image)
      local w = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(image[0 + 1])
          local out = {}
          local y = 0
          while (y < h) do
            local row = {}
            local x = 0
            while (x < w) do
              local sx = (x - round_int(h_flow[y + 1][x + 1]))
              local sy = (y - round_int(v_flow[y + 1][x + 1]))
              if ((((sx >= 0) and (sx < w)) and (sy >= 0)) and (sy < h)) then
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(row, image[sy + 1][sx + 1])
            else
              row = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(row, 0)
          end
          x = (x + 1)
        end
        out = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(out, row)
      y = (y + 1)
    end
    return out
  end
  function convolve(img, ker)
    local h = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(img)
        local w = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(img[0 + 1])
            local kh = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(ker)
                local kw = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(ker[0 + 1])
                    local py = (kh // 2)
                    local px = (kw // 2)
                    local out = {}
                    local y = 0
                    while (y < h) do
                      local row = {}
                      local x = 0
                      while (x < w) do
                        local s = 0
                        local ky = 0
                        while (ky < kh) do
                          local kx = 0
                          while (kx < kw) do
                            local iy = ((y + ky) - py)
                            local ix = ((x + kx) - px)
                            if ((((iy >= 0) and (iy < h)) and (ix >= 0)) and (ix < w)) then
                              s = (s + (img[iy + 1][ix + 1] * ker[ky + 1][kx + 1]))
                            end
                            kx = (kx + 1)
                          end
                          ky = (ky + 1)
                        end
                        row = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(row, s)
                      x = (x + 1)
                    end
                    out = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(out, row)
                  y = (y + 1)
                end
                return out
              end
              function horn_schunck(image0, image1, num_iter, alpha)
                local h = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(image0)
                    local w = (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(image0[0 + 1])
                        local u = zeros(h, w)
                        local v = zeros(h, w)
                        local kernel_x = {{(-0.25), 0.25}, {(-0.25), 0.25}}
                        local kernel_y = {{(-0.25), (-0.25)}, {0.25, 0.25}}
                        local kernel_t = {{0.25, 0.25}, {0.25, 0.25}}
                        local laplacian = {{0.0833333333333, 0.166666666667, 0.0833333333333}, {0.166666666667, 0, 0.166666666667}, {0.0833333333333, 0.166666666667, 0.0833333333333}}
                        local it = 0
                        while (it < num_iter) do
                          local warped = warp(image0, u, v)
                          local dx1 = convolve(warped, kernel_x)
                          local dx2 = convolve(image1, kernel_x)
                          local dy1 = convolve(warped, kernel_y)
                          local dy2 = convolve(image1, kernel_y)
                          local dt1 = convolve(warped, kernel_t)
                          local dt2 = convolve(image1, kernel_t)
                          local avg_u = convolve(u, laplacian)
                          local avg_v = convolve(v, laplacian)
                          local y = 0
                          while (y < h) do
                            local x = 0
                            while (x < w) do
                              local dx = (dx1[y + 1][x + 1] + dx2[y + 1][x + 1])
                              local dy = (dy1[y + 1][x + 1] + dy2[y + 1][x + 1])
                              local dt = (dt1[y + 1][x + 1] - dt2[y + 1][x + 1])
                              local au = avg_u[y + 1][x + 1]
                              local av = avg_v[y + 1][x + 1]
                              local numer = (((dx * au) + (dy * av)) + dt)
                              local denom = (((alpha * alpha) + (dx * dx)) + (dy * dy))
                              local upd = (numer / denom)
                              u[y + 1][x + 1] = (au - (dx * upd))
                              v[y + 1][x + 1] = (av - (dy * upd))
                              x = (x + 1)
                            end
                            y = (y + 1)
                          end
                          it = (it + 1)
                        end
                        return {u, v}
                      end
                      function print_matrix(mat)
                        local y = 0
                        while (y < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(mat)) do
                              local row = mat[y + 1]
                              local x = 0
                              local line = ""
                              while (x < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(row)) do
                                    line = (line .. tostring(round_int(row[x + 1])))
                                    if ((x + 1) < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(row)) then
                                          line = (line .. " ")
                                        end
                                        x = (x + 1)
                                      end
                                      print((((type(line) == "table")) and (
                                      (function(v)
                                      local function encode(x)
                                      if type(x) == "table" then
                                        if x.__name and x.__order then
                                          local parts = {x.__name, " {"}
                                          for i, k in ipairs(x.__order) do
                                            if i > 1 then parts[#parts+1] = ", " end
                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        elseif #x > 0 then
                                            local allTables = true
                                            for _, v in ipairs(x) do
                                              if type(v) ~= "table" then allTables = false break end
                                            end
                                            local parts = {}
                                            if not allTables then parts[#parts+1] = "[" end
                                            for i, val in ipairs(x) do
                                              parts[#parts+1] = encode(val)
                                              if i < #x then parts[#parts+1] = " " end
                                            end
                                            if not allTables then parts[#parts+1] = "]" end
                                            return table.concat(parts)
                                          else
                                            local keys = {}
                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                            local parts = {"{"}
                                            for i, k in ipairs(keys) do
                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                              if i < #keys then parts[#parts+1] = ", " end
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(line)) or (line)))
                                      y = (y + 1)
                                    end
                                  end
                                  function main()
                                    local image0 = {{0, 0, 2}, {0, 0, 2}}
                                    local image1 = {{0, 2, 0}, {0, 2, 0}}
                                    local flows = horn_schunck(image0, image1, 20, 0.1)
                                    local u = flows[0 + 1]
                                    local v = flows[1 + 1]
                                    print_matrix(u)
                                    print("---")
                                    print_matrix(v)
                                  end
                                  main()
                                  local _bench_end = os.clock()
                                  collectgarbage()
                                  local _bench_end_mem = collectgarbage('count') * 1024
                                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                end;
