-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function update_image_and_anno(all_img_list, all_annos, idxs, output_size, scale_range, filter_scale)
    local height = output_size[0 + 1]
    local width = output_size[1 + 1]
    local output_img = nil
    local r = 0
    while (r < height) do
      local row = nil
      local c = 0
      while (c < width) do
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(row, 0)
      c = (c + 1)
    end
    output_img = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(output_img, row)
  r = (r + 1)
end
local scale_x = ((scale_range[0 + 1] + scale_range[1 + 1]) / 2)
local scale_y = ((scale_range[0 + 1] + scale_range[1 + 1]) / 2)
local divid_point_x = math.floor(tonumber((scale_x * width)) or 0)
local divid_point_y = math.floor(tonumber((scale_y * height)) or 0)
local new_anno = nil
local path_list = nil
local i = 0
while (i < (function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(idxs)) do
      local index = idxs[i + 1]
      local path = all_img_list[index + 1]
      path_list = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(path_list, path)
    local img_annos = all_annos[index + 1]
    if (i == 0) then
      local y0 = 0
      while (y0 < divid_point_y) do
        local x0 = 0
        while (x0 < divid_point_x) do
          output_img[y0 + 1][x0 + 1] = (i + 1)
          x0 = (x0 + 1)
        end
        y0 = (y0 + 1)
      end
      local j0 = 0
      while (j0 < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(img_annos)) do
            local bbox = img_annos[j0 + 1]
            local xmin = (bbox[1 + 1] * scale_x)
            local ymin = (bbox[2 + 1] * scale_y)
            local xmax = (bbox[3 + 1] * scale_x)
            local ymax = (bbox[4 + 1] * scale_y)
            new_anno = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(new_anno, {bbox[0 + 1], xmin, ymin, xmax, ymax})
          j0 = (j0 + 1)
        end
      else
        if (i == 1) then
          local y1 = 0
          while (y1 < divid_point_y) do
            local x1 = divid_point_x
            while (x1 < width) do
              output_img[y1 + 1][x1 + 1] = (i + 1)
              x1 = (x1 + 1)
            end
            y1 = (y1 + 1)
          end
          local j1 = 0
          while (j1 < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(img_annos)) do
                local bbox1 = img_annos[j1 + 1]
                local xmin1 = (scale_x + (bbox1[1 + 1] * (1 - scale_x)))
                local ymin1 = (bbox1[2 + 1] * scale_y)
                local xmax1 = (scale_x + (bbox1[3 + 1] * (1 - scale_x)))
                local ymax1 = (bbox1[4 + 1] * scale_y)
                new_anno = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(new_anno, {bbox1[0 + 1], xmin1, ymin1, xmax1, ymax1})
              j1 = (j1 + 1)
            end
          else
            if (i == 2) then
              local y2 = divid_point_y
              while (y2 < height) do
                local x2 = 0
                while (x2 < divid_point_x) do
                  output_img[y2 + 1][x2 + 1] = (i + 1)
                  x2 = (x2 + 1)
                end
                y2 = (y2 + 1)
              end
              local j2 = 0
              while (j2 < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(img_annos)) do
                    local bbox2 = img_annos[j2 + 1]
                    local xmin2 = (bbox2[1 + 1] * scale_x)
                    local ymin2 = (scale_y + (bbox2[2 + 1] * (1 - scale_y)))
                    local xmax2 = (bbox2[3 + 1] * scale_x)
                    local ymax2 = (scale_y + (bbox2[4 + 1] * (1 - scale_y)))
                    new_anno = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(new_anno, {bbox2[0 + 1], xmin2, ymin2, xmax2, ymax2})
                  j2 = (j2 + 1)
                end
              else
                local y3 = divid_point_y
                while (y3 < height) do
                  local x3 = divid_point_x
                  while (x3 < width) do
                    output_img[y3 + 1][x3 + 1] = (i + 1)
                    x3 = (x3 + 1)
                  end
                  y3 = (y3 + 1)
                end
                local j3 = 0
                while (j3 < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(img_annos)) do
                      local bbox3 = img_annos[j3 + 1]
                      local xmin3 = (scale_x + (bbox3[1 + 1] * (1 - scale_x)))
                      local ymin3 = (scale_y + (bbox3[2 + 1] * (1 - scale_y)))
                      local xmax3 = (scale_x + (bbox3[3 + 1] * (1 - scale_x)))
                      local ymax3 = (scale_y + (bbox3[4 + 1] * (1 - scale_y)))
                      new_anno = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(new_anno, {bbox3[0 + 1], xmin3, ymin3, xmax3, ymax3})
                    j3 = (j3 + 1)
                  end
                end
              end
            end
            i = (i + 1)
          end
          if (filter_scale > 0) then
            local filtered = nil
            local k = 0
            while (k < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(new_anno)) do
                  local anno = new_anno[k + 1]
                  local w = (anno[3 + 1] - anno[1 + 1])
                  local h = (anno[4 + 1] - anno[2 + 1])
                  if ((filter_scale < w) and (filter_scale < h)) then
                    filtered = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(filtered, anno)
                end
                k = (k + 1)
              end
              new_anno = filtered
            end
            return {img = output_img, annos = new_anno, path = path_list[0 + 1]}
          end
          function main()
            local all_img_list = {"img0.jpg", "img1.jpg", "img2.jpg", "img3.jpg"}
            local all_annos = {{{0, 0.1, 0.1, 0.4, 0.4}}, {{1, 0.2, 0.3, 0.5, 0.7}}, {{2, 0.6, 0.2, 0.9, 0.5}}, {{3, 0.5, 0.5, 0.8, 0.8}}}
            local idxs = {0, 1, 2, 3}
            local output_size = {100, 100}
            local scale_range = {0.4, 0.6}
            local filter_scale = 0.05
            local res = update_image_and_anno(all_img_list, all_annos, idxs, output_size, scale_range, filter_scale)
            local new_annos = res.annos
            local path = res.path
            print((((type(("Base image: " .. path)) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(("Base image: " .. path))) or (("Base image: " .. path))))
            print((((type(("Mosaic annotation count: " .. tostring((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(new_annos)))) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(("Mosaic annotation count: " .. tostring((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(new_annos))))) or (("Mosaic annotation count: " .. tostring((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(new_annos))))))
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(new_annos)) do
                              local a = new_annos[i + 1]
                              print((((type(((((((((tostring(a[0 + 1]) .. " ") .. tostring(a[1 + 1])) .. " ") .. tostring(a[2 + 1])) .. " ") .. tostring(a[3 + 1])) .. " ") .. tostring(a[4 + 1]))) == "table")) and (
                              (function(v)
                              local function encode(x)
                              if type(x) == "table" then
                                if x.__name and x.__order then
                                  local parts = {x.__name, " {"}
                                  for i, k in ipairs(x.__order) do
                                    if i > 1 then parts[#parts+1] = ", " end
                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                elseif #x > 0 then
                                    local allTables = true
                                    for _, v in ipairs(x) do
                                      if type(v) ~= "table" then allTables = false break end
                                    end
                                    local parts = {}
                                    if not allTables then parts[#parts+1] = "[" end
                                    for i, val in ipairs(x) do
                                      parts[#parts+1] = encode(val)
                                      if i < #x then parts[#parts+1] = " " end
                                    end
                                    if not allTables then parts[#parts+1] = "]" end
                                    return table.concat(parts)
                                  else
                                    local keys = {}
                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                    local parts = {"{"}
                                    for i, k in ipairs(keys) do
                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                      if i < #keys then parts[#parts+1] = ", " end
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  end
                                elseif type(x) == "string" then
                                    return '"' .. x .. '"'
                                  else
                                    return tostring(x)
                                  end
                                end
                                return encode(v)
                              end)(((((((((tostring(a[0 + 1]) .. " ") .. tostring(a[1 + 1])) .. " ") .. tostring(a[2 + 1])) .. " ") .. tostring(a[3 + 1])) .. " ") .. tostring(a[4 + 1])))) or (((((((((tostring(a[0 + 1]) .. " ") .. tostring(a[1 + 1])) .. " ") .. tostring(a[2 + 1])) .. " ") .. tostring(a[3 + 1])) .. " ") .. tostring(a[4 + 1])))))
                              i = (i + 1)
                            end
                          end
                          main()
                          local _bench_end = os.clock()
                          collectgarbage()
                          local _bench_end_mem = collectgarbage('count') * 1024
                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                        end;
