-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function zeros(h, w)
    local m = {}
    local y = 0
    while (y < h) do
      local row = {}
      local x = 0
      while (x < w) do
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(row, 0)
      x = (x + 1)
    end
    m = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(m, row)
  y = (y + 1)
end
return m
end
function gradient(img)
  local h = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(img)
      local w = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(img[0 + 1])
          local dx = zeros(h, w)
          local dy = zeros(h, w)
          local y = 1
          while (y < (h - 1)) do
            local x = 1
            while (x < (w - 1)) do
              dx[y + 1][x + 1] = (img[y + 1][(x + 1) + 1] - img[y + 1][(x - 1) + 1])
              dy[y + 1][x + 1] = (img[(y + 1) + 1][x + 1] - img[(y - 1) + 1][x + 1])
              x = (x + 1)
            end
            y = (y + 1)
          end
          return {dx, dy}
        end
        function harris(img, k, window, thresh)
          local h = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(img)
              local w = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(img[0 + 1])
                  local grads = gradient(img)
                  local dx = grads[0 + 1]
                  local dy = grads[1 + 1]
                  local ixx = zeros(h, w)
                  local iyy = zeros(h, w)
                  local ixy = zeros(h, w)
                  local y = 0
                  while (y < h) do
                    local x = 0
                    while (x < w) do
                      local gx = dx[y + 1][x + 1]
                      local gy = dy[y + 1][x + 1]
                      ixx[y + 1][x + 1] = (gx * gx)
                      iyy[y + 1][x + 1] = (gy * gy)
                      ixy[y + 1][x + 1] = (gx * gy)
                      x = (x + 1)
                    end
                    y = (y + 1)
                  end
                  local offset = (window // 2)
                  local corners = {}
                  y = offset
                  while (y < (h - offset)) do
                    local x = offset
                    while (x < (w - offset)) do
                      local wxx = 0
                      local wyy = 0
                      local wxy = 0
                      local yy = (y - offset)
                      while (yy <= (y + offset)) do
                        local xx = (x - offset)
                        while (xx <= (x + offset)) do
                          wxx = (wxx + ixx[yy + 1][xx + 1])
                          wyy = (wyy + iyy[yy + 1][xx + 1])
                          wxy = (wxy + ixy[yy + 1][xx + 1])
                          xx = (xx + 1)
                        end
                        yy = (yy + 1)
                      end
                      local det = ((wxx * wyy) - (wxy * wxy))
                      local trace = (wxx + wyy)
                      local r = (det - (k * (trace * trace)))
                      if (r > thresh) then
                        corners = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(corners, {x, y})
                    end
                    x = (x + 1)
                  end
                  y = (y + 1)
                end
                return corners
              end
              img = {{1, 1, 1, 1, 1}, {1, 255, 255, 255, 1}, {1, 255, 0, 255, 1}, {1, 255, 255, 255, 1}, {1, 1, 1, 1, 1}}
              corners = harris(img, 0.04, 3, 1e+10)
              print(
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)(corners))
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
