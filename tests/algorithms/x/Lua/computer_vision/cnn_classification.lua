-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function conv2d(image, kernel)
    local rows = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(image)
        local cols = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(image[0 + 1])
            local k = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(kernel)
                local output = {}
                local i = 0
                while (i <= (rows - k)) do
                  local row = {}
                  local j = 0
                  while (j <= (cols - k)) do
                    local sum = 0
                    local ki = 0
                    while (ki < k) do
                      local kj = 0
                      while (kj < k) do
                        sum = (sum + (image[(i + ki) + 1][(j + kj) + 1] * kernel[ki + 1][kj + 1]))
                        kj = (kj + 1)
                      end
                      ki = (ki + 1)
                    end
                    row = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(row, sum)
                  j = (j + 1)
                end
                output = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(output, row)
              i = (i + 1)
            end
            return output
          end
          function relu_matrix(m)
            local out = {}
            for _, row in ipairs(m) do
              local new_row = {}
              for _, v in ipairs(row) do
                if (v > 0) then
                  new_row = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(new_row, v)
              else
                new_row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(new_row, 0)
            end
          end
          out = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(out, new_row)
      end
      return out
    end
    function max_pool2x2(m)
      local rows = (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(m)
          local cols = (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(m[0 + 1])
              local out = {}
              local i = 0
              while (i < rows) do
                local new_row = {}
                local j = 0
                while (j < cols) do
                  local max_val = m[i + 1][j + 1]
                  if (m[i + 1][(j + 1) + 1] > max_val) then
                    max_val = m[i + 1][(j + 1) + 1]
                  end
                  if (m[(i + 1) + 1][j + 1] > max_val) then
                    max_val = m[(i + 1) + 1][j + 1]
                  end
                  if (m[(i + 1) + 1][(j + 1) + 1] > max_val) then
                    max_val = m[(i + 1) + 1][(j + 1) + 1]
                  end
                  new_row = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(new_row, max_val)
                j = (j + 2)
              end
              out = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(out, new_row)
            i = (i + 2)
          end
          return out
        end
        function flatten(m)
          local res = {}
          for _, row in ipairs(m) do
            for _, v in ipairs(row) do
              res = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(res, v)
          end
        end
        return res
      end
      function dense(inputs, weights, bias)
        local s = bias
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(inputs)) do
              s = (s + (inputs[i + 1] * weights[i + 1]))
              i = (i + 1)
            end
            return s
          end
          function exp_approx(x)
            local sum = 1
            local term = 1
            local i = 1
            while (i <= 10) do
              term = ((term * x) / i)
              sum = (sum + term)
              i = (i + 1)
            end
            return sum
          end
          function sigmoid(x)
            return (1 / (1 + exp_approx((-x))))
          end
          image = {{0, 1, 1, 0, 0, 0}, {0, 1, 1, 0, 0, 0}, {0, 0, 1, 1, 0, 0}, {0, 0, 1, 1, 0, 0}, {0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0}}
          kernel = {{1, 0, (-1)}, {1, 0, (-1)}, {1, 0, (-1)}}
          conv = conv2d(image, kernel)
          activated = relu_matrix(conv)
          pooled = max_pool2x2(activated)
          flat = flatten(pooled)
          weights = {0.5, (-0.4), 0.3, 0.1}
          bias = 0
          output = dense(flat, weights, bias)
          probability = sigmoid(output)
          if (probability >= 0.5) then
            print("Abnormality detected")
          else
            print("Normal")
          end
          print("Probability:")
          print((((type(probability) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(probability)) or (probability)))
          local _bench_end = os.clock()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
