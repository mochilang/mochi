-- Generated by Mochi v0.10.59 on 2025-08-06 21:27 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function abs_int(n)
    if (n < 0) then
      return (-n)
    end
    return n
  end
  function sqrt(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 10) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function ln(x)
    if (x <= 0) then
      return 0
    end
    local e = 2.718281828
    local n = 0
    local y = x
    while (y >= e) do
      y = (y / e)
      n = (n + 1)
    end
    while (y <= (1 / e)) do
      y = (y * e)
      n = (n - 1)
    end
    y = (y - 1)
    local term = y
    local result = 0
    local k = 1
    while (k <= 20) do
      if ((k % 2) == 1) then
        result = (result + (term / (1 * k)))
      else
        result = (result - (term / (1 * k)))
      end
      term = (term * y)
      k = (k + 1)
    end
    return (result + (1 * n))
  end
  function matrix_concurrency(image, coord)
    local offset_x = coord[0 + 1]
    local offset_y = coord[1 + 1]
    local max_val = 0
    for r = 0, (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(image) - 1 do
          for c = 0, (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(image[r + 1]) - 1 do
                if (image[r + 1][c + 1] > max_val) then
                  max_val = image[r + 1][c + 1]
                end
              end
            end
            local size = (max_val + 1)
            local matrix = {}
            for i = 0, size - 1 do
              local row = {}
              for j = 0, size - 1 do
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(row, 0)
            end
            matrix = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(matrix, row)
        end
        for x = 1, ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(image) - 1) - 1 do
              for y = 1, ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(image[x + 1]) - 1) - 1 do
                    local base = image[x + 1][y + 1]
                    local offset = image[(x + offset_x) + 1][(y + offset_y) + 1]
                    matrix[base + 1][offset + 1] = (matrix[base + 1][offset + 1] + 1)
                  end
                end
                local total = 0
                for i = 0, size - 1 do
                  for j = 0, size - 1 do
                    total = (total + matrix[i + 1][j + 1])
                  end
                end
                if (total == 0) then
                  return matrix
                end
                for i = 0, size - 1 do
                  for j = 0, size - 1 do
                    matrix[i + 1][j + 1] = (matrix[i + 1][j + 1] / total)
                  end
                end
                return matrix
              end
              function haralick_descriptors(matrix)
                local rows = (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(matrix)
                    local cols = (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(matrix[0 + 1])
                        local maximum_prob = 0
                        local correlation = 0
                        local energy = 0
                        local contrast = 0
                        local dissimilarity = 0
                        local inverse_difference = 0
                        local homogeneity = 0
                        local entropy = 0
                        local i = 0
                        while (i < rows) do
                          local j = 0
                          while (j < cols) do
                            local val = matrix[i + 1][j + 1]
                            if (val > maximum_prob) then
                              maximum_prob = val
                            end
                            correlation = (correlation + (((1 * i) * j) * val))
                            energy = (energy + (val * val))
                            local diff = (i - j)
                            local adiff = abs_int(diff)
                            contrast = (contrast + (val * ((1 * diff) * diff)))
                            dissimilarity = (dissimilarity + (val * (1 * adiff)))
                            inverse_difference = (inverse_difference + (val / (1 + (1 * adiff))))
                            homogeneity = (homogeneity + (val / (1 + ((1 * diff) * diff))))
                            if (val > 0) then
                              entropy = (entropy - (val * ln(val)))
                            end
                            j = (j + 1)
                          end
                          i = (i + 1)
                        end
                        return {maximum_prob, correlation, energy, contrast, dissimilarity, inverse_difference, homogeneity, entropy}
                      end
                      image = {{0, 1, 0}, {1, 0, 1}, {0, 1, 0}}
                      glcm = matrix_concurrency(image, {0, 1})
                      descriptors = haralick_descriptors(glcm)
                      idx = 0
                      while (idx < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(descriptors)) do
                            print((((type(tostring(descriptors[idx + 1])) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(tostring(descriptors[idx + 1]))) or (tostring(descriptors[idx + 1]))))
                            idx = (idx + 1)
                          end
                          local _bench_end = os.clock()
                          collectgarbage()
                          local _bench_end_mem = collectgarbage('count') * 1024
                          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                        end;
