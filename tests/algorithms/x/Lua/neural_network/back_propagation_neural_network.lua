-- Generated by Mochi v0.10.67 on 2025-08-17 14:03 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    do
      collectgarbage()
      local _bench_start_mem = collectgarbage('count') * 1024
      local _bench_start = os.clock()
      function rand()
        seed = (((seed * 1103515245) + 12345) % 2147483648)
        return seed
      end
      function random()
        return ((1.0 * rand()) / 2.147483648e+09)
      end
      function expApprox(x)
        local y = x
        local is_neg = false
        if (x < 0.0) then
          is_neg = true
          y = (-x)
        end
        local term = 1.0
        local sum = 1.0
        local n = 1
        while (n < 30) do
          term = ((term * y) / n)
          sum = (sum + term)
          n = (n + 1)
        end
        if is_neg then
          return (1.0 / sum)
        end
        return sum
      end
      function sigmoid(z)
        return (1.0 / (1.0 + expApprox((-z))))
      end
      function sigmoid_vec(v)
        local res = {}
        local i = 0
        while (i < _len(v)) do
          res = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(res, sigmoid(v[i + 1]))
        i = (i + 1)
      end
      return res
    end
    function sigmoid_derivative(out)
      local res = {}
      local i = 0
      while (i < _len(out)) do
        local val = out[i + 1]
        res = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(res, (val * (1.0 - val)))
      i = (i + 1)
    end
    return res
  end
  function random_vector(n)
    local v = {}
    local i = 0
    while (i < n) do
      v = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(v, (random() - 0.5))
    i = (i + 1)
  end
  return v
end
function random_matrix(r, c)
  local m = {}
  local i = 0
  while (i < r) do
    m = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(m, random_vector(c))
  i = (i + 1)
end
return m
end
function matvec(mat, vec)
  local res = {}
  local i = 0
  while (i < _len(mat)) do
    local s = 0.0
    local j = 0
    while (j < _len(vec)) do
      s = (s + (mat[i + 1][j + 1] * vec[j + 1]))
      j = (j + 1)
    end
    res = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(res, s)
  i = (i + 1)
end
return res
end
function matTvec(mat, vec)
  local cols = _len(mat[0 + 1])
  local res = {}
  local j = 0
  while (j < cols) do
    local s = 0.0
    local i = 0
    while (i < _len(mat)) do
      s = (s + (mat[i + 1][j + 1] * vec[i + 1]))
      i = (i + 1)
    end
    res = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(res, s)
  j = (j + 1)
end
return res
end
function vec_sub(a, b)
  local res = {}
  local i = 0
  while (i < _len(a)) do
    res = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(res, (a[i + 1] - b[i + 1]))
  i = (i + 1)
end
return res
end
function vec_mul(a, b)
  local res = {}
  local i = 0
  while (i < _len(a)) do
    res = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(res, (a[i + 1] * b[i + 1]))
  i = (i + 1)
end
return res
end
function vec_scalar_mul(v, s)
  local res = {}
  local i = 0
  while (i < _len(v)) do
    res = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(res, (v[i + 1] * s))
  i = (i + 1)
end
return res
end
function outer(a, b)
  local res = {}
  local i = 0
  while (i < _len(a)) do
    local row = {}
    local j = 0
    while (j < _len(b)) do
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(row, (a[i + 1] * b[j + 1]))
    j = (j + 1)
  end
  res = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(res, row)
i = (i + 1)
end
return res
end
function mat_scalar_mul(mat, s)
  local res = {}
  local i = 0
  while (i < _len(mat)) do
    local row = {}
    local j = 0
    while (j < _len(mat[i + 1])) do
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(row, (mat[i + 1][j + 1] * s))
    j = (j + 1)
  end
  res = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(res, row)
i = (i + 1)
end
return res
end
function mat_sub(a, b)
  local res = {}
  local i = 0
  while (i < _len(a)) do
    local row = {}
    local j = 0
    while (j < _len(a[i + 1])) do
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(row, (a[i + 1][j + 1] - b[i + 1][j + 1]))
    j = (j + 1)
  end
  res = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(res, row)
i = (i + 1)
end
return res
end
function init_layer(units, back_units, lr)
  return {units = units, weight = random_matrix(units, back_units), bias = random_vector(units), output = {}, xdata = {}, learn_rate = lr}
end
function forward(layers, x)
  local data = x
  local i = 0
  while (i < _len(layers)) do
    local layer = layers[i + 1]
    layer.xdata = data
    if (i == 0) then
      layer.output = data
    else
      local z = vec_sub(matvec(layer.weight, data), layer.bias)
      layer.output = sigmoid_vec(z)
      data = layer.output
    end
    layers[i + 1] = layer
    i = (i + 1)
  end
  return layers
end
function backward(layers, grad)
  local g = grad
  local i = (_len(layers) - 1)
  while (i > 0) do
    local layer = layers[i + 1]
    local deriv = sigmoid_derivative(layer.output)
    local delta = vec_mul(g, deriv)
    local grad_w = outer(delta, layer.xdata)
    layer.weight = mat_sub(layer.weight, mat_scalar_mul(grad_w, layer.learn_rate))
    layer.bias = vec_sub(layer.bias, vec_scalar_mul(delta, layer.learn_rate))
    g = matTvec(layer.weight, delta)
    layers[i + 1] = layer
    i = (i - 1)
  end
  return layers
end
function calc_loss(y, yhat)
  local s = 0.0
  local i = 0
  while (i < _len(y)) do
    local d = (y[i + 1] - yhat[i + 1])
    s = (s + (d * d))
    i = (i + 1)
  end
  return s
end
function calc_gradient(y, yhat)
  local g = {}
  local i = 0
  while (i < _len(y)) do
    g = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(g, (2.0 * (yhat[i + 1] - y[i + 1])))
  i = (i + 1)
end
return g
end
function train(layers, xdata, ydata, rounds, acc)
  local r = 0
  while (r < rounds) do
    local i = 0
    while (i < _len(xdata)) do
      layers = forward(layers, xdata[i + 1])
      local out = layers[(_len(layers) - 1) + 1].output
      local grad = calc_gradient(ydata[i + 1], out)
      layers = backward(layers, grad)
      i = (i + 1)
    end
    r = (r + 1)
  end
  return 0.0
end
function create_data()
  local x = {}
  local i = 0
  while (i < 10) do
    x = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(x, random_vector(10))
  i = (i + 1)
end
local y = {{0.8, 0.4}, {0.4, 0.3}, {0.34, 0.45}, {0.67, 0.32}, {0.88, 0.67}, {0.78, 0.77}, {0.55, 0.66}, {0.55, 0.43}, {0.54, 0.1}, {0.1, 0.5}}
return {x = x, y = y}
end
function main()
  local data = create_data()
  local x = data.x
  local y = data.y
  local layers = {}
  layers = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(layers, init_layer(10, 0, 0.3))
layers = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(layers, init_layer(20, 10, 0.3))
layers = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(layers, init_layer(30, 20, 0.3))
layers = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(layers, init_layer(2, 30, 0.3))
local final_mse = train(layers, x, y, 100, 0.01)
print((((type(final_mse) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "number" then
      if math.type and math.type(x) == "integer" then
        return string.format("%d", x)
      else
        local s = string.format("%g", x)
        if not string.find(s, "[%.eE]") then
          s = s .. ".0"
        end
        return s
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(final_mse)) or (final_mse)))
end
seed = 1
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
