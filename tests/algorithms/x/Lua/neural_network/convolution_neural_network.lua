-- Generated by Mochi v0.10.59 on 2025-08-07 11:58 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function random()
    seed = (((seed * 13) + 7) % 100)
    return (seed / 100)
  end
  function sigmoid(x)
    return (1 / (1 + exp((-x))))
  end
  function to_float(x)
    return (x * 1)
  end
  function exp(x)
    local term = 1
    local sum = 1
    local n = 1
    while (n < 20) do
      term = ((term * x) / to_float(n))
      sum = (sum + term)
      n = (n + 1)
    end
    return sum
  end
  function convolve(data, kernel, step, bias)
    local size_data = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(data)
        local size_kernel = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(kernel)
            local out = {}
            local i = 0
            while (i <= (size_data - size_kernel)) do
              local row = {}
              local j = 0
              while (j <= (size_data - size_kernel)) do
                local sum = 0
                local a = 0
                while (a < size_kernel) do
                  local b = 0
                  while (b < size_kernel) do
                    sum = (sum + (data[(i + a) + 1][(j + b) + 1] * kernel[a + 1][b + 1]))
                    b = (b + 1)
                  end
                  a = (a + 1)
                end
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(row, sigmoid((sum - bias)))
              j = (j + step)
            end
            out = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(out, row)
          i = (i + step)
        end
        return out
      end
      function average_pool(map, size)
        local out = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(map)) do
              local row = {}
              local j = 0
              while (j < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(map[i + 1])) do
                    local sum = 0
                    local a = 0
                    while (a < size) do
                      local b = 0
                      while (b < size) do
                        sum = (sum + map[(i + a) + 1][(j + b) + 1])
                        b = (b + 1)
                      end
                      a = (a + 1)
                    end
                    row = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(row, (sum / (size * size)))
                  j = (j + size)
                end
                out = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(out, row)
              i = (i + size)
            end
            return out
          end
          function flatten(maps)
            local out = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(maps)) do
                  local j = 0
                  while (j < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(maps[i + 1])) do
                        local k = 0
                        while (k < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(maps[i + 1][j + 1])) do
                              out = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(out, maps[i + 1][j + 1][k + 1])
                            k = (k + 1)
                          end
                          j = (j + 1)
                        end
                        i = (i + 1)
                      end
                      return out
                    end
                    function vec_mul_mat(v, m)
                      local cols = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(m[0 + 1])
                          local res = {}
                          local j = 0
                          while (j < cols) do
                            local sum = 0
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(v)) do
                                  sum = (sum + (v[i + 1] * m[i + 1][j + 1]))
                                  i = (i + 1)
                                end
                                res = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(res, sum)
                              j = (j + 1)
                            end
                            return res
                          end
                          function matT_vec_mul(m, v)
                            local res = {}
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(m)) do
                                  local sum = 0
                                  local j = 0
                                  while (j < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(m[i + 1])) do
                                        sum = (sum + (m[i + 1][j + 1] * v[j + 1]))
                                        j = (j + 1)
                                      end
                                      res = (function(lst, item)
                                      local res = {table.unpack(lst or {})}
                                      table.insert(res, item)
                                      return res
                                    end)(res, sum)
                                    i = (i + 1)
                                  end
                                  return res
                                end
                                function vec_add(a, b)
                                  local res = {}
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(a)) do
                                        res = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        table.insert(res, item)
                                        return res
                                      end)(res, (a[i + 1] + b[i + 1]))
                                      i = (i + 1)
                                    end
                                    return res
                                  end
                                  function vec_sub(a, b)
                                    local res = {}
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(a)) do
                                          res = (function(lst, item)
                                          local res = {table.unpack(lst or {})}
                                          table.insert(res, item)
                                          return res
                                        end)(res, (a[i + 1] - b[i + 1]))
                                        i = (i + 1)
                                      end
                                      return res
                                    end
                                    function vec_mul(a, b)
                                      local res = {}
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(a)) do
                                            res = (function(lst, item)
                                            local res = {table.unpack(lst or {})}
                                            table.insert(res, item)
                                            return res
                                          end)(res, (a[i + 1] * b[i + 1]))
                                          i = (i + 1)
                                        end
                                        return res
                                      end
                                      function vec_map_sig(v)
                                        local res = {}
                                        local i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(v)) do
                                              res = (function(lst, item)
                                              local res = {table.unpack(lst or {})}
                                              table.insert(res, item)
                                              return res
                                            end)(res, sigmoid(v[i + 1]))
                                            i = (i + 1)
                                          end
                                          return res
                                        end
                                        function new_cnn()
                                          local k1 = {{1, 0}, {0, 1}}
                                          local k2 = {{0, 1}, {1, 0}}
                                          local conv_kernels = {k1, k2}
                                          local conv_bias = {0, 0}
                                          local conv_step = 2
                                          local pool_size = 2
                                          local input_size = 2
                                          local hidden_size = 2
                                          local output_size = 2
                                          local w_hidden = {}
                                          local i = 0
                                          while (i < input_size) do
                                            local row = {}
                                            local j = 0
                                            while (j < hidden_size) do
                                              row = (function(lst, item)
                                              local res = {table.unpack(lst or {})}
                                              table.insert(res, item)
                                              return res
                                            end)(row, (random() - 0.5))
                                            j = (j + 1)
                                          end
                                          w_hidden = (function(lst, item)
                                          local res = {table.unpack(lst or {})}
                                          table.insert(res, item)
                                          return res
                                        end)(w_hidden, row)
                                        i = (i + 1)
                                      end
                                      local w_out = {}
                                      i = 0
                                      while (i < hidden_size) do
                                        local row = {}
                                        local j = 0
                                        while (j < output_size) do
                                          row = (function(lst, item)
                                          local res = {table.unpack(lst or {})}
                                          table.insert(res, item)
                                          return res
                                        end)(row, (random() - 0.5))
                                        j = (j + 1)
                                      end
                                      w_out = (function(lst, item)
                                      local res = {table.unpack(lst or {})}
                                      table.insert(res, item)
                                      return res
                                    end)(w_out, row)
                                    i = (i + 1)
                                  end
                                  local b_hidden = {0, 0}
                                  local b_out = {0, 0}
                                  return {conv_kernels = conv_kernels, conv_bias = conv_bias, conv_step = conv_step, pool_size = pool_size, w_hidden = w_hidden, w_out = w_out, b_hidden = b_hidden, b_out = b_out, rate_weight = 0.2, rate_bias = 0.2}
                                end
                                function forward(cnn, data)
                                  local maps = {}
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(cnn.conv_kernels)) do
                                        local conv_map = convolve(data, cnn.conv_kernels[i + 1], cnn.conv_step, cnn.conv_bias[i + 1])
                                        local pooled = average_pool(conv_map, cnn.pool_size)
                                        maps = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        table.insert(res, item)
                                        return res
                                      end)(maps, pooled)
                                      i = (i + 1)
                                    end
                                    local flat = flatten(maps)
                                    local hidden_net = vec_add(vec_mul_mat(flat, cnn.w_hidden), cnn.b_hidden)
                                    local hidden_out = vec_map_sig(hidden_net)
                                    local out_net = vec_add(vec_mul_mat(hidden_out, cnn.w_out), cnn.b_out)
                                    local out = vec_map_sig(out_net)
                                    return out
                                  end
                                  function train(cnn, samples, epochs)
                                    local w_out = cnn.w_out
                                    local b_out = cnn.b_out
                                    local w_hidden = cnn.w_hidden
                                    local b_hidden = cnn.b_hidden
                                    local e = 0
                                    while (e < epochs) do
                                      local s = 0
                                      while (s < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(samples)) do
                                            local data = samples[s + 1].image
                                            local target = samples[s + 1].target
                                            local maps = {}
                                            local i = 0
                                            while (i < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(cnn.conv_kernels)) do
                                                  local conv_map = convolve(data, cnn.conv_kernels[i + 1], cnn.conv_step, cnn.conv_bias[i + 1])
                                                  local pooled = average_pool(conv_map, cnn.pool_size)
                                                  maps = (function(lst, item)
                                                  local res = {table.unpack(lst or {})}
                                                  table.insert(res, item)
                                                  return res
                                                end)(maps, pooled)
                                                i = (i + 1)
                                              end
                                              local flat = flatten(maps)
                                              local hidden_net = vec_add(vec_mul_mat(flat, w_hidden), b_hidden)
                                              local hidden_out = vec_map_sig(hidden_net)
                                              local out_net = vec_add(vec_mul_mat(hidden_out, w_out), b_out)
                                              local out = vec_map_sig(out_net)
                                              local error_out = vec_sub(target, out)
                                              local pd_out = vec_mul(error_out, vec_mul(out, vec_sub({1, 1}, out)))
                                              local error_hidden = matT_vec_mul(w_out, pd_out)
                                              local pd_hidden = vec_mul(error_hidden, vec_mul(hidden_out, vec_sub({1, 1}, hidden_out)))
                                              local j = 0
                                              while (j < (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(w_out)) do
                                                    local k = 0
                                                    while (k < (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(w_out[j + 1])) do
                                                          w_out[j + 1][k + 1] = (w_out[j + 1][k + 1] + ((cnn.rate_weight * hidden_out[j + 1]) * pd_out[k + 1]))
                                                          k = (k + 1)
                                                        end
                                                        j = (j + 1)
                                                      end
                                                      j = 0
                                                      while (j < (function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(b_out)) do
                                                            b_out[j + 1] = (b_out[j + 1] - (cnn.rate_bias * pd_out[j + 1]))
                                                            j = (j + 1)
                                                          end
                                                          local i_h = 0
                                                          while (i_h < (function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(w_hidden)) do
                                                                local j_h = 0
                                                                while (j_h < (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(w_hidden[i_h + 1])) do
                                                                      w_hidden[i_h + 1][j_h + 1] = (w_hidden[i_h + 1][j_h + 1] + ((cnn.rate_weight * flat[i_h + 1]) * pd_hidden[j_h + 1]))
                                                                      j_h = (j_h + 1)
                                                                    end
                                                                    i_h = (i_h + 1)
                                                                  end
                                                                  j = 0
                                                                  while (j < (function(v)
                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                    return #v.items
                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                      local c = 0
                                                                      for _ in pairs(v) do c = c + 1 end
                                                                      return c
                                                                    elseif type(v) == 'string' then
                                                                        local l = utf8.len(v)
                                                                        if l then return l end
                                                                        return #v
                                                                      elseif type(v) == 'table' then
                                                                          return #v
                                                                        else
                                                                          return 0
                                                                        end
                                                                      end)(b_hidden)) do
                                                                        b_hidden[j + 1] = (b_hidden[j + 1] - (cnn.rate_bias * pd_hidden[j + 1]))
                                                                        j = (j + 1)
                                                                      end
                                                                      s = (s + 1)
                                                                    end
                                                                    e = (e + 1)
                                                                  end
                                                                  return {conv_kernels = cnn.conv_kernels, conv_bias = cnn.conv_bias, conv_step = cnn.conv_step, pool_size = cnn.pool_size, w_hidden = w_hidden, w_out = w_out, b_hidden = b_hidden, b_out = b_out, rate_weight = cnn.rate_weight, rate_bias = cnn.rate_bias}
                                                                end
                                                                function main()
                                                                  local cnn = new_cnn()
                                                                  local image = {{1, 0, 1, 0}, {0, 1, 0, 1}, {1, 0, 1, 0}, {0, 1, 0, 1}}
                                                                  local sample = {image = image, target = {1, 0}}
                                                                  print((string.gsub(string.format("Before training: %s",
                                                                  (function(v)
                                                                  local function encode(x)
                                                                  if type(x) == "table" then
                                                                    if x.__name and x.__order then
                                                                      local parts = {x.__name, " {"}
                                                                      for i, k in ipairs(x.__order) do
                                                                        if i > 1 then parts[#parts+1] = ", " end
                                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    elseif #x > 0 then
                                                                        local allTables = true
                                                                        for _, v in ipairs(x) do
                                                                          if type(v) ~= "table" then allTables = false break end
                                                                        end
                                                                        local parts = {}
                                                                        if not allTables then parts[#parts+1] = "[" end
                                                                        for i, val in ipairs(x) do
                                                                          parts[#parts+1] = encode(val)
                                                                          if i < #x then parts[#parts+1] = " " end
                                                                        end
                                                                        if not allTables then parts[#parts+1] = "]" end
                                                                        return table.concat(parts)
                                                                      else
                                                                        local keys = {}
                                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                        local parts = {"{"}
                                                                        for i, k in ipairs(keys) do
                                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                          if i < #keys then parts[#parts+1] = ", " end
                                                                        end
                                                                        parts[#parts+1] = "}"
                                                                        return table.concat(parts)
                                                                      end
                                                                    elseif type(x) == "string" then
                                                                        return '"' .. x .. '"'
                                                                      else
                                                                        return tostring(x)
                                                                      end
                                                                    end
                                                                    return encode(v)
                                                                  end)(forward(cnn, image))), "%s+$", "")))
                                                                  local trained = train((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cnn), {sample}, 50)
                                                                  print((string.gsub(string.format("After training: %s",
                                                                  (function(v)
                                                                  local function encode(x)
                                                                  if type(x) == "table" then
                                                                    if x.__name and x.__order then
                                                                      local parts = {x.__name, " {"}
                                                                      for i, k in ipairs(x.__order) do
                                                                        if i > 1 then parts[#parts+1] = ", " end
                                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                      end
                                                                      parts[#parts+1] = "}"
                                                                      return table.concat(parts)
                                                                    elseif #x > 0 then
                                                                        local allTables = true
                                                                        for _, v in ipairs(x) do
                                                                          if type(v) ~= "table" then allTables = false break end
                                                                        end
                                                                        local parts = {}
                                                                        if not allTables then parts[#parts+1] = "[" end
                                                                        for i, val in ipairs(x) do
                                                                          parts[#parts+1] = encode(val)
                                                                          if i < #x then parts[#parts+1] = " " end
                                                                        end
                                                                        if not allTables then parts[#parts+1] = "]" end
                                                                        return table.concat(parts)
                                                                      else
                                                                        local keys = {}
                                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                        local parts = {"{"}
                                                                        for i, k in ipairs(keys) do
                                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                          if i < #keys then parts[#parts+1] = ", " end
                                                                        end
                                                                        parts[#parts+1] = "}"
                                                                        return table.concat(parts)
                                                                      end
                                                                    elseif type(x) == "string" then
                                                                        return '"' .. x .. '"'
                                                                      else
                                                                        return tostring(x)
                                                                      end
                                                                    end
                                                                    return encode(v)
                                                                  end)(forward(trained, image))), "%s+$", "")))
                                                                end
                                                                seed = 1
                                                                main()
                                                                local _bench_end = os.clock()
                                                                collectgarbage()
                                                                local _bench_end_mem = collectgarbage('count') * 1024
                                                                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                              end;
