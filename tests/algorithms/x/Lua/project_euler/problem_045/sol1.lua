-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function to_float(x)
    return (x * 1)
  end
  function sqrt(x)
    if (x <= 0) then
      return 0
    end
    local guess = x
    local i = 0
    while (i < 10) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function floor(x)
    local n = 0
    local y = x
    while (y >= 1) do
      y = (y - 1)
      n = (n + 1)
    end
    return n
  end
  function hexagonal_num(n)
    return (n * ((2 * n) - 1))
  end
  function is_pentagonal(n)
    local root = sqrt((1 + (24 * to_float(n))))
    local val = ((1 + root) / 6)
    return (val == to_float(floor(val)))
  end
  function solution(start)
    local idx = start
    local num = hexagonal_num(idx)
    while (not is_pentagonal(num)) do
      idx = (idx + 1)
      num = hexagonal_num(idx)
    end
    return num
  end
  function test_hexagonal_num()
    if (hexagonal_num(143) ~= 40755) then
      _panic("hexagonal_num(143) failed")
    end
    if (hexagonal_num(21) ~= 861) then
      _panic("hexagonal_num(21) failed")
    end
    if (hexagonal_num(10) ~= 190) then
      _panic("hexagonal_num(10) failed")
    end
  end
  function test_is_pentagonal()
    if (not is_pentagonal(330)) then
      _panic("330 should be pentagonal")
    end
    if is_pentagonal(7683) then
      _panic("7683 should not be pentagonal")
    end
    if (not is_pentagonal(2380)) then
      _panic("2380 should be pentagonal")
    end
  end
  function test_solution()
    if (solution(144) ~= 1533776805) then
      _panic("solution failed")
    end
  end
  test_hexagonal_num()
  test_is_pentagonal()
  test_solution()
  print((((type((_str(solution(144)) .. " = ")) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)((_str(solution(144)) .. " = "))) or ((_str(solution(144)) .. " = "))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
