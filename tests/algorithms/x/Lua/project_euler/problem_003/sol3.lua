-- Generated by Mochi v0.10.69 on 2025-08-22 14:19 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function largest_prime_factor(n)
    if (n <= 1) then
      return n
    end
    local i = 2
    local ans = 0
    local m = n
    if (m == 2) then
      return 2
    end
    while (m > 2) do
      while ((m % i) ~= 0) do
        i = (i + 1)
      end
      ans = i
      while ((m % i) == 0) do
        m = (m // i)
      end
      i = (i + 1)
    end
    return ans
  end
  ;
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if #x > 0 then
      local parts = {"["}
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "]"
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do table.insert(keys, k) end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  print(encode(v))
end)(largest_prime_factor(13195))
;
(function(v)
local function encode(x)
if type(x) == "table" then
  if #x > 0 then
    local parts = {"["}
    for i, val in ipairs(x) do
      parts[#parts+1] = encode(val)
      if i < #x then parts[#parts+1] = ", " end
    end
    parts[#parts+1] = "]"
    return table.concat(parts)
  else
    local keys = {}
    for k in pairs(x) do table.insert(keys, k) end
    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
    local parts = {"{"}
    for i, k in ipairs(keys) do
      parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
      if i < #keys then parts[#parts+1] = ", " end
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  end
elseif type(x) == "string" then
    return '"' .. x .. '"'
  else
    return tostring(x)
  end
end
print(encode(v))
end)(largest_prime_factor(10))
;
(function(v)
local function encode(x)
if type(x) == "table" then
  if #x > 0 then
    local parts = {"["}
    for i, val in ipairs(x) do
      parts[#parts+1] = encode(val)
      if i < #x then parts[#parts+1] = ", " end
    end
    parts[#parts+1] = "]"
    return table.concat(parts)
  else
    local keys = {}
    for k in pairs(x) do table.insert(keys, k) end
    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
    local parts = {"{"}
    for i, k in ipairs(keys) do
      parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
      if i < #keys then parts[#parts+1] = ", " end
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  end
elseif type(x) == "string" then
    return '"' .. x .. '"'
  else
    return tostring(x)
  end
end
print(encode(v))
end)(largest_prime_factor(17))
;
(function(v)
local function encode(x)
if type(x) == "table" then
  if #x > 0 then
    local parts = {"["}
    for i, val in ipairs(x) do
      parts[#parts+1] = encode(val)
      if i < #x then parts[#parts+1] = ", " end
    end
    parts[#parts+1] = "]"
    return table.concat(parts)
  else
    local keys = {}
    for k in pairs(x) do table.insert(keys, k) end
    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
    local parts = {"{"}
    for i, k in ipairs(keys) do
      parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
      if i < #keys then parts[#parts+1] = ", " end
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  end
elseif type(x) == "string" then
    return '"' .. x .. '"'
  else
    return tostring(x)
  end
end
print(encode(v))
end)(largest_prime_factor(600851475143))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
