-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function is_substring_divisible(num)
    if ((num[3 + 1] % 2) ~= 0) then
      return false
    end
    if ((((num[2 + 1] + num[3 + 1]) + num[4 + 1]) % 3) ~= 0) then
      return false
    end
    if ((num[5 + 1] % 5) ~= 0) then
      return false
    end
    local primes = {7, 11, 13, 17}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(primes)) do
          local p = primes[i + 1]
          local idx = (i + 4)
          local val = (((num[idx + 1] * 100) + (num[(idx + 1) + 1] * 10)) + num[(idx + 2) + 1])
          if ((val % p) ~= 0) then
            return false
          end
          i = (i + 1)
        end
        return true
      end
      function remove_at(xs, idx)
        local res = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(xs)) do
              if (i ~= idx) then
                res = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(res, xs[i + 1])
            end
            i = (i + 1)
          end
          return res
        end
        function digits_to_number(xs)
          local value = 0
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(xs)) do
                value = ((value * 10) + xs[i + 1])
                i = (i + 1)
              end
              return value
            end
            function search(prefix, remaining)
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(remaining) == 0) then
                    if is_substring_divisible(prefix) then
                      return digits_to_number(prefix)
                    end
                    return 0
                  end
                  local total = 0
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(remaining)) do
                        local d = remaining[i + 1]
                        local next_prefix = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(prefix, d)
                      local next_remaining = remove_at(remaining, i)
                      total = (total + search(next_prefix, next_remaining))
                      i = (i + 1)
                    end
                    return total
                  end
                  function solution(n)
                    local digits = {}
                    local i = 0
                    while (i < n) do
                      digits = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(digits, i)
                    i = (i + 1)
                  end
                  return search({}, digits)
                end
                print((string.gsub(string.format("solution() = %d", solution(10)), "%s+$", "")))
                local _bench_end = os.clock()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
