-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then
  e = #lst
elseif e < 0 then
    e = #lst + e
  end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function split(s, sep)
    local parts = {}
    local cur = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if ((((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(sep) > 0) and ((i + (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(sep)) <= (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(s))) and (_substring(s, i, (i + (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(sep))) == sep)) then
                            parts = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(parts, cur)
                          cur = ""
                          i = (i + (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(sep))
                            else
                              cur = (cur .. string.sub(s, (i + 1), (i + 1)))
                              i = (i + 1)
                            end
                          end
                          parts = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(parts, cur)
                        return parts
                      end
                      function card_value(ch)
                        if (ch == "A") then
                          return 14
                        else
                          if (ch == "K") then
                            return 13
                          else
                            if (ch == "Q") then
                              return 12
                            else
                              if (ch == "J") then
                                return 11
                              else
                                if (ch == "T") then
                                  return 10
                                else
                                  if (ch == "9") then
                                    return 9
                                  else
                                    if (ch == "8") then
                                      return 8
                                    else
                                      if (ch == "7") then
                                        return 7
                                      else
                                        if (ch == "6") then
                                          return 6
                                        else
                                          if (ch == "5") then
                                            return 5
                                          else
                                            if (ch == "4") then
                                              return 4
                                            else
                                              if (ch == "3") then
                                                return 3
                                              else
                                                return 2
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                      function parse_hand(hand)
                        local counts = {}
                        local i = 0
                        while (i <= 14) do
                          counts = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(counts, 0)
                        i = (i + 1)
                      end
                      local suits = {}
                      for _, card in ipairs(_split(hand, " ")) do
                        local v = card_value(string.sub(card, (0 + 1), 1))
                        counts[v + 1] = (counts[v + 1] + 1)
                        suits = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(suits, string.sub(card, (1 + 1), 2))
                    end
                    local vals = {}
                    local v = 14
                    while (v >= 2) do
                      local c = counts[v + 1]
                      local k = 0
                      while (k < c) do
                        vals = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(vals, v)
                      k = (k + 1)
                    end
                    v = (v - 1)
                  end
                  local is_straight = false
                  if (((((((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(vals) == 5) and (vals[0 + 1] == 14)) and (vals[1 + 1] == 5)) and (vals[2 + 1] == 4)) and (vals[3 + 1] == 3)) and (vals[4 + 1] == 2)) then
                        is_straight = true
                        vals[0 + 1] = 5
                        vals[1 + 1] = 4
                        vals[2 + 1] = 3
                        vals[3 + 1] = 2
                        vals[4 + 1] = 14
                      else
                        is_straight = true
                        local j = 0
                        while (j < 4) do
                          if ((vals[j + 1] - vals[(j + 1) + 1]) ~= 1) then
                            is_straight = false
                          end
                          j = (j + 1)
                        end
                      end
                      local is_flush = true
                      local s0 = suits[0 + 1]
                      local t = 1
                      while (t < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(suits)) do
                            if (suits[t + 1] ~= s0) then
                              is_flush = false
                            end
                            t = (t + 1)
                          end
                          local four_val = 0
                          local three_val = 0
                          local pair_vals = {}
                          v = 14
                          while (v >= 2) do
                            if (counts[v + 1] == 4) then
                              four_val = v
                            else
                              if (counts[v + 1] == 3) then
                                three_val = v
                              else
                                if (counts[v + 1] == 2) then
                                  pair_vals = (function(lst, item)
                                  local res = {table.unpack(lst or {})}
                                  table.insert(res, item)
                                  return res
                                end)(pair_vals, v)
                              end
                            end
                          end
                          v = (v - 1)
                        end
                        local rank = 1
                        if (((is_flush and is_straight) and (vals[0 + 1] == 14)) and (vals[4 + 1] == 10)) then
                          rank = 10
                        else
                          if (is_flush and is_straight) then
                            rank = 9
                          else
                            if (four_val ~= 0) then
                              rank = 8
                            else
                              if ((three_val ~= 0) and ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(pair_vals) == 1)) then
                                    rank = 7
                                  else
                                    if is_flush then
                                      rank = 6
                                    else
                                      if is_straight then
                                        rank = 5
                                      else
                                        if (three_val ~= 0) then
                                          rank = 4
                                        else
                                          if ((function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(pair_vals) == 2) then
                                                rank = 3
                                              else
                                                if ((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(pair_vals) == 1) then
                                                      rank = 2
                                                    else
                                                      rank = 1
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                    return {rank = rank, values = vals}
                                  end
                                  function compare(a, b)
                                    if (a.rank > b.rank) then
                                      return "Win"
                                    end
                                    if (a.rank < b.rank) then
                                      return "Loss"
                                    end
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(a.values)) do
                                          if (a.values[i + 1] > b.values[i + 1]) then
                                            return "Win"
                                          end
                                          if (a.values[i + 1] < b.values[i + 1]) then
                                            return "Loss"
                                          end
                                          i = (i + 1)
                                        end
                                        return "Tie"
                                      end
                                      function main()
                                        local tests = {{"2H 3H 4H 5H 6H", "KS AS TS QS JS", "Loss"}, {"2H 3H 4H 5H 6H", "AS AD AC AH JD", "Win"}, {"AS AH 2H AD AC", "JS JD JC JH 3D", "Win"}, {"2S AH 2H AS AC", "JS JD JC JH AD", "Loss"}, {"2S AH 2H AS AC", "2H 3H 5H 6H 7H", "Win"}}
                                        for _, t in ipairs(tests) do
                                          local res = compare(parse_hand(t[0 + 1]), parse_hand(t[1 + 1]))
                                          print((((type(((tostring(res) .. " expected ") .. tostring(t[2 + 1]))) == "table")) and (
                                          (function(v)
                                          local function encode(x)
                                          if type(x) == "table" then
                                            if x.__name and x.__order then
                                              local parts = {x.__name, " {"}
                                              for i, k in ipairs(x.__order) do
                                                if i > 1 then parts[#parts+1] = ", " end
                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            elseif #x > 0 then
                                                local allTables = true
                                                for _, v in ipairs(x) do
                                                  if type(v) ~= "table" then allTables = false break end
                                                end
                                                local parts = {}
                                                if not allTables then parts[#parts+1] = "[" end
                                                for i, val in ipairs(x) do
                                                  parts[#parts+1] = encode(val)
                                                  if i < #x then parts[#parts+1] = " " end
                                                end
                                                if not allTables then parts[#parts+1] = "]" end
                                                return table.concat(parts)
                                              else
                                                local keys = {}
                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                local parts = {"{"}
                                                for i, k in ipairs(keys) do
                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                  if i < #keys then parts[#parts+1] = ", " end
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              end
                                            elseif type(x) == "string" then
                                                return '"' .. x .. '"'
                                              else
                                                return tostring(x)
                                              end
                                            end
                                            return encode(v)
                                          end)(((tostring(res) .. " expected ") .. tostring(t[2 + 1])))) or (((tostring(res) .. " expected ") .. tostring(t[2 + 1])))))
                                        end
                                      end
                                      main()
                                      local _bench_end = os.clock()
                                      collectgarbage()
                                      local _bench_end_mem = collectgarbage('count') * 1024
                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                    end;
