-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function solution(n)
    local max_product = 0
    local i = 0
    while (i <= ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(n) - 13)) do
          local product = 1
          local j = 0
          while (j < 13) do
            product = (product * math.floor(tonumber(string.sub(n, ((i + j) + 1), ((i + j) + 1))) or 0))
            j = (j + 1)
          end
          if (product > max_product) then
            max_product = product
          end
          i = (i + 1)
        end
        return max_product
      end
      N = ((((((((((((((((((("73167176531330624919225119674426574742355349194934" .. "96983520312774506326239578318016984801869478851843") .. "85861560789112949495459501737958331952853208805511") .. "12540698747158523863050715693290963295227443043557") .. "66896648950445244523161731856403098711121722383113") .. "62229893423380308135336276614282806444486645238749") .. "30358907296290491560440772390713810515859307960866") .. "70172427121883998797908792274921901699720888093776") .. "65727333001053367881220235421809751254540594752243") .. "52584907711670556013604839586446706324415722155397") .. "53697817977846174064955149290862569321978468622482") .. "83972241375657056057490261407972968652414535100474") .. "82166370484403199890008895243450658541227588666881") .. "16427171479924442928230863465674813919123162824586") .. "17866458359124566529476545682848912883142607690042") .. "24219022671055626321111109370544217506941658960408") .. "07198403850962455444362981230987879927244284909188") .. "84580156166097919133875499200524063689912560717606") .. "05886116467109405077541002256983155200055935729725") .. "71636269561882670428252483600823257530420752963450")
      print(solution("13978431290823798458352374"))
      print(solution("13978431295823798458352374"))
      print(solution("1397843129582379841238352374"))
      print(solution(N))
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
