-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function int_sqrt(n)
    local r = 0
    while (((r + 1) * (r + 1)) <= n) do
      r = (r + 1)
    end
    return r
  end
  function sum_of_divisors(n)
    local total = 0
    local root = int_sqrt(n)
    local i = 1
    while (i <= root) do
      if ((n % i) == 0) then
        if ((i * i) == n) then
          total = (total + i)
        else
          total = ((total + i) + (n // i))
        end
      end
      i = (i + 1)
    end
    return (total - n)
  end
  function solution(limit)
    local total = 0
    local i = 1
    while (i < limit) do
      local s = sum_of_divisors(i)
      if ((s ~= i) and (sum_of_divisors(s) == i)) then
        total = (total + i)
      end
      i = (i + 1)
    end
    return total
  end
  print(solution(10000))
  print(solution(5000))
  print(solution(1000))
  print(solution(100))
  print(solution(50))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
