-- Generated by Mochi v0.10.63 on 2025-08-11 16:20 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function parse_row(row_str)
    local nums = {}
    local current = 0
    local has_digit = false
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(row_str)) do
          local ch = _substring(row_str, i, (i + 1))
          if (ch == " ") then
            if has_digit then
              nums = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(nums, current)
            current = 0
            has_digit = false
          end
        else
          current = ((current * 10) + math.floor(tonumber(ch) or 0))
          has_digit = true
        end
        i = (i + 1)
      end
      if has_digit then
        nums = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(nums, current)
    end
    return nums
  end
  function parse_matrix(matrix_str)
    local matrix = {}
    for _, row_str in ipairs(matrix_str) do
      local row = parse_row(row_str)
      matrix = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(matrix, row)
  end
  return matrix
end
function bitcount(x)
  local count = 0
  local y = x
  while (y > 0) do
    if ((y % 2) == 1) then
      count = (count + 1)
    end
    y = (y // 2)
  end
  return count
end
function build_powers(n)
  local powers = {}
  local i = 0
  local current = 1
  while (i <= n) do
    powers = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(powers, current)
  current = (current * 2)
  i = (i + 1)
end
return powers
end
function solution(matrix_str)
  local arr = parse_matrix(matrix_str)
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr)
      local powers = build_powers(n)
      local size = powers[n + 1]
      local dp = {}
      local i = 0
      while (i < size) do
        dp = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(dp, 0)
      i = (i + 1)
    end
    local mask = 0
    while (mask < size) do
      local row = bitcount(mask)
      if (row < n) then
        local col = 0
        while (col < n) do
          if (((mask // powers[col + 1]) % 2) == 0) then
            local new_mask = (mask + powers[col + 1])
            local value = (dp[mask + 1] + arr[row + 1][col + 1])
            if (value > dp[new_mask + 1]) then
              dp[new_mask + 1] = value
            end
          end
          col = (col + 1)
        end
      end
      mask = (mask + 1)
    end
    return dp[(size - 1) + 1]
  end
  MATRIX_2 = {"7 53 183 439 863 497 383 563 79 973 287 63 343 169 583", "627 343 773 959 943 767 473 103 699 303 957 703 583 639 913", "447 283 463 29 23 487 463 993 119 883 327 493 423 159 743", "217 623 3 399 853 407 103 983 89 463 290 516 212 462 350", "960 376 682 962 300 780 486 502 912 800 250 346 172 812 350", "870 456 192 162 593 473 915 45 989 873 823 965 425 329 803", "973 965 905 919 133 673 665 235 509 613 673 815 165 992 326", "322 148 972 962 286 255 941 541 265 323 925 281 601 95 973", "445 721 11 525 473 65 511 164 138 672 18 428 154 448 848", "414 456 310 312 798 104 566 520 302 248 694 976 430 392 198", "184 829 373 181 631 101 969 613 840 740 778 458 284 760 390", "821 461 843 513 17 901 711 993 293 157 274 94 192 156 574", "34 124 4 878 450 476 712 914 838 669 875 299 823 329 699", "815 559 813 459 522 788 168 586 966 232 308 833 251 631 107", "813 883 451 509 615 77 281 613 459 205 380 274 302 35 805"}
  result = solution(MATRIX_2)
  print((((type(("solution() = " .. _str(result))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(("solution() = " .. _str(result)))) or (("solution() = " .. _str(result)))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
