-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function range_desc(start, _end)
    local res = {}
    local i = start
    while (i >= _end) do
      res = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(res, i)
    i = (i - 1)
  end
  return res
end
function range_asc(start, _end)
  local res = {}
  local i = start
  while (i <= _end) do
    res = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(res, i)
  i = (i + 1)
end
return res
end
function concat_lists(a, b)
  local res = a
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(b)) do
        res = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(res, b[i + 1])
      i = (i + 1)
    end
    return res
  end
  function swap(xs, i, j)
    local res = {}
    local k = 0
    while (k < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (k == i) then
            res = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(res, xs[j + 1])
        else
          if (k == j) then
            res = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(res, xs[i + 1])
        else
          res = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(res, xs[k + 1])
      end
    end
    k = (k + 1)
  end
  return res
end
function generate_gon_ring(gon_side, perm)
  local result = {}
  result = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(result, perm[0 + 1])
result = (function(lst, item)
local res = {table.unpack(lst or {})}
table.insert(res, item)
return res
end)(result, perm[1 + 1])
result = (function(lst, item)
local res = {table.unpack(lst or {})}
table.insert(res, item)
return res
end)(result, perm[2 + 1])
local extended = (function(lst, item)
local res = {table.unpack(lst or {})}
table.insert(res, item)
return res
end)(perm, perm[1 + 1])
local magic_number = (((gon_side < 5)) and (1) or (2))
local i = 1
while (i < (((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(extended) // 3) + magic_number)) do
      result = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(result, extended[((2 * i) + 1) + 1])
    result = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(result, result[((3 * i) - 1) + 1])
  result = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(result, extended[((2 * i) + 2) + 1])
i = (i + 1)
end
return result
end
function min_outer(numbers)
  local min_val = numbers[0 + 1]
  local i = 3
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(numbers)) do
        if (numbers[i + 1] < min_val) then
          min_val = numbers[i + 1]
        end
        i = (i + 3)
      end
      return min_val
    end
    function is_magic_gon(numbers)
      if (((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(numbers) % 3) ~= 0) then
            return false
          end
          if (min_outer(numbers) ~= numbers[0 + 1]) then
            return false
          end
          local total = ((numbers[0 + 1] + numbers[1 + 1]) + numbers[2 + 1])
          local i = 3
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(numbers)) do
                if (((numbers[i + 1] + numbers[(i + 1) + 1]) + numbers[(i + 2) + 1]) ~= total) then
                  return false
                end
                i = (i + 3)
              end
              return true
            end
            function permute_search(nums, start, gon_side, current_max)
              if (start == (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(nums)) then
                    local ring = generate_gon_ring(gon_side, nums)
                    if is_magic_gon(ring) then
                      local s = ""
                      local k = 0
                      while (k < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(ring)) do
                            s = (s .. _str(ring[k + 1]))
                            k = (k + 1)
                          end
                          if (s > current_max) then
                            return s
                          end
                        end
                        return current_max
                      end
                      local res = current_max
                      local i = start
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(nums)) do
                            local swapped = swap(nums, start, i)
                            local candidate = permute_search(swapped, (start + 1), gon_side, res)
                            if (candidate > res) then
                              res = candidate
                            end
                            i = (i + 1)
                          end
                          return res
                        end
                        function solution(gon_side)
                          if ((gon_side < 3) or (gon_side > 5)) then
                            return ""
                          end
                          local small = range_desc((gon_side + 1), 1)
                          local big = range_asc((gon_side + 2), (gon_side * 2))
                          local numbers = concat_lists(small, big)
                          local max_str = permute_search(numbers, 0, gon_side, "")
                          return max_str
                        end
                        print((((type(solution(5)) == "table")) and (
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "string" then
                              return '"' .. x .. '"'
                            else
                              return tostring(x)
                            end
                          end
                          return encode(v)
                        end)(solution(5))) or (solution(5))))
                        local _bench_end = os.clock()
                        collectgarbage()
                        local _bench_end_mem = collectgarbage('count') * 1024
                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                      end;
