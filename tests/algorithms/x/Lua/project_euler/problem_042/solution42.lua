-- Generated by Mochi v0.10.70 on 2025-08-22 15:25 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for k in pairs(v) do
      if k ~= '__name' and k ~= '__order' then
        c = c + 1
      end
    end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _str(v)
    if type(v) == 'number' then
      local s = tostring(v)
      s = string.gsub(s, '%.0+$', '')
      return s
    elseif type(v) == 'boolean' then
        if v then return 'true' else return 'false' end
      elseif type(v) == 'table' then
          local src = v
          if v.items ~= nil then
            src = v.items
          end
          local parts = {}
          for i = 1, #src do
            parts[#parts+1] = _str(src[i])
          end
          return '[' .. table.concat(parts, ', ') .. ']'
        end
        return tostring(v)
      end
      _dataDir = "/workspace/mochi/tests/github/TheAlgorithms/Mochi/project_euler/problem_042"
      
      local function _read_file(path)
      local p = path
      local f = io.open(p, 'rb')
      if not f and _dataDir then
        f = io.open(_dataDir .. '/' .. path, 'rb')
      end
      if not f then return '' end
      local data = f:read('*a') or ''
      f:close()
      return data
    end
    
    local function _ord(s)
    if type(s) == 'string' and #s > 0 then
      return string.byte(s, 1)
    end
    return 0
  end
  do
    collectgarbage()
    local _bench_start_mem = collectgarbage('count') * 1024
    local _bench_start = os.clock()
    function triangular_numbers(limit)
      local res = {}
      local n = 1
      while (n <= limit) do
        res = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(res, ((n * (n + 1)) // 2))
      n = (n + 1)
    end
    return res
  end
  function parse_words(text)
    local words = {}
    local current = ""
    local i = 0
    while (i < _len(text)) do
      local c = string.sub(text, (i + 1), (i + 1))
      if (c == ",") then
        words = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(words, current)
      current = ""
    else
      if (c == "\"") then
      else
        if ((c == "\r") or (c == "\n")) then
        else
          current = (current .. c)
        end
      end
    end
    i = (i + 1)
  end
  if (_len(current) > 0) then
    words = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(words, current)
end
return words
end
function word_value(word)
  local total = 0
  local i = 0
  while (i < _len(word)) do
    total = ((total + _ord(string.sub(word, (i + 1), (i + 1)))) - 64)
    i = (i + 1)
  end
  return total
end
function contains(xs, target)
  for _, x in ipairs(xs) do
    if (x == target) then
      return true
    end
  end
  return false
end
function solution()
  local text = _read_file("words.txt")
  local words = parse_words(text)
  local tri = triangular_numbers(100)
  local count = 0
  for _, w in ipairs(words) do
    local v = word_value(w)
    if contains(tri, v) then
      count = (count + 1)
    end
  end
  return count
end
print((((type(_str(solution())) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "number" then
      if math.type and math.type(x) == "integer" then
        return string.format("%d", x)
      else
        local s = string.format("%g", x)
        if not string.find(s, "[%.eE]") then
          s = s .. ".0"
        end
        return s
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(_str(solution()))) or (_str(solution()))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
