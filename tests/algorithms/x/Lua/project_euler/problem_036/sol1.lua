-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function is_palindrome_str(s)
    local i = 0
    local j = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s) - 1)
        while (i < j) do
          if (_substring(s, i, (i + 1)) ~= _substring(s, j, (j + 1))) then
            return false
          end
          i = (i + 1)
          j = (j - 1)
        end
        return true
      end
      function to_binary(n)
        if (n == 0) then
          return "0"
        end
        local res = ""
        local x = n
        while (x > 0) do
          res = (_str((x % 2)) .. res)
          x = (x // 2)
        end
        return res
      end
      function solution(n)
        local total = 0
        local i = 1
        while (i < n) do
          local dec = _str(i)
          local bin = to_binary(i)
          if (is_palindrome_str(dec) and is_palindrome_str(bin)) then
            total = (total + i)
          end
          i = (i + 1)
        end
        return total
      end
      print(solution(1000000))
      print(solution(500000))
      print(solution(100000))
      print(solution(1000))
      print(solution(100))
      print(solution(10))
      print(solution(2))
      print(solution(1))
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
