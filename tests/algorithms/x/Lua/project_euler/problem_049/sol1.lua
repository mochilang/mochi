-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function is_prime(number)
    if ((1 < number) and (number < 4)) then
      return true
    end
    if (((number < 2) or ((number % 2) == 0)) or ((number % 3) == 0)) then
      return false
    end
    local i = 5
    while ((i * i) <= number) do
      if (((number % i) == 0) or ((number % (i + 2)) == 0)) then
        return false
      end
      i = (i + 6)
    end
    return true
  end
  function search(target, arr)
    local left = 0
    local right = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(arr) - 1)
        while (left <= right) do
          local middle = ((left + right) // 2)
          if (arr[middle + 1] == target) then
            return true
          end
          if (arr[middle + 1] < target) then
            left = (middle + 1)
          else
            right = (middle - 1)
          end
        end
        return false
      end
      function sort_int(xs)
        local arr = xs
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(arr)) do
              local j = (i + 1)
              while (j < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(arr)) do
                    if (arr[j + 1] < arr[i + 1]) then
                      local tmp = arr[i + 1]
                      arr[i + 1] = arr[j + 1]
                      arr[j + 1] = tmp
                    end
                    j = (j + 1)
                  end
                  i = (i + 1)
                end
                return arr
              end
              function permutations_of_number(n)
                local s = _str(n)
                local d = {}
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s)) do
                      d = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(d, math.floor(tonumber(string.sub(s, (i + 1), (i + 1))) or 0))
                    i = (i + 1)
                  end
                  local res = {}
                  local a = 0
                  while (a < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(d)) do
                        local b = 0
                        while (b < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(d)) do
                              if (b ~= a) then
                                local c = 0
                                while (c < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(d)) do
                                      if ((c ~= a) and (c ~= b)) then
                                        local e = 0
                                        while (e < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(d)) do
                                              if (((e ~= a) and (e ~= b)) and (e ~= c)) then
                                                local val = ((((d[a + 1] * 1000) + (d[b + 1] * 100)) + (d[c + 1] * 10)) + d[e + 1])
                                                res = (function(lst, item)
                                                local res = {table.unpack(lst or {})}
                                                table.insert(res, item)
                                                return res
                                              end)(res, val)
                                            end
                                            e = (e + 1)
                                          end
                                        end
                                        c = (c + 1)
                                      end
                                    end
                                    b = (b + 1)
                                  end
                                  a = (a + 1)
                                end
                                return res
                              end
                              function abs_int(x)
                                if (x < 0) then
                                  return (-x)
                                end
                                return x
                              end
                              function contains_int(xs, v)
                                local i = 0
                                while (i < (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(xs)) do
                                      if (xs[i + 1] == v) then
                                        return true
                                      end
                                      i = (i + 1)
                                    end
                                    return false
                                  end
                                  function solution()
                                    local prime_list = {}
                                    local n = 1001
                                    while (n < 10000) do
                                      if is_prime(n) then
                                        prime_list = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        table.insert(res, item)
                                        return res
                                      end)(prime_list, n)
                                    end
                                    n = (n + 2)
                                  end
                                  local candidates = {}
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(prime_list)) do
                                        local number = prime_list[i + 1]
                                        local tmp = {}
                                        local perms = permutations_of_number(number)
                                        local j = 0
                                        while (j < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(perms)) do
                                              local prime = perms[j + 1]
                                              if (((prime % 2) ~= 0) and search(prime, prime_list)) then
                                                tmp = (function(lst, item)
                                                local res = {table.unpack(lst or {})}
                                                table.insert(res, item)
                                                return res
                                              end)(tmp, prime)
                                            end
                                            j = (j + 1)
                                          end
                                          tmp = sort_int(tmp)
                                          if ((function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(tmp) >= 3) then
                                                candidates = (function(lst, item)
                                                local res = {table.unpack(lst or {})}
                                                table.insert(res, item)
                                                return res
                                              end)(candidates, tmp)
                                            end
                                            i = (i + 1)
                                          end
                                          local passed = {}
                                          i = 0
                                          while (i < (function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(candidates)) do
                                                local candidate = candidates[i + 1]
                                                local found = false
                                                local a = 0
                                                while (a < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(candidate)) do
                                                      local b = (a + 1)
                                                      while (b < (function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(candidate)) do
                                                            local c = (b + 1)
                                                            while (c < (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(candidate)) do
                                                                  local x = candidate[a + 1]
                                                                  local y = candidate[b + 1]
                                                                  local z = candidate[c + 1]
                                                                  if ((((abs_int((x - y)) == abs_int((y - z))) and (x ~= y)) and (x ~= z)) and (y ~= z)) then
                                                                    local triple = sort_int({x, y, z})
                                                                    passed = (function(lst, item)
                                                                    local res = {table.unpack(lst or {})}
                                                                    table.insert(res, item)
                                                                    return res
                                                                  end)(passed, triple)
                                                                  found = true
                                                                  break
                                                                end
                                                                c = (c + 1)
                                                              end
                                                              if found then
                                                                break
                                                              end
                                                              b = (b + 1)
                                                            end
                                                            if found then
                                                              break
                                                            end
                                                            a = (a + 1)
                                                          end
                                                          i = (i + 1)
                                                        end
                                                        local answer_nums = {}
                                                        i = 0
                                                        while (i < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(passed)) do
                                                              local seq = passed[i + 1]
                                                              local val = math.floor(tonumber(((_str(seq[0 + 1]) .. _str(seq[1 + 1])) .. _str(seq[2 + 1]))) or 0)
                                                              if (not contains_int(answer_nums, val)) then
                                                                answer_nums = (function(lst, item)
                                                                local res = {table.unpack(lst or {})}
                                                                table.insert(res, item)
                                                                return res
                                                              end)(answer_nums, val)
                                                            end
                                                            i = (i + 1)
                                                          end
                                                          local max_val = answer_nums[0 + 1]
                                                          i = 1
                                                          while (i < (function(v)
                                                          if type(v) == 'table' and v.items ~= nil then
                                                            return #v.items
                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                              local c = 0
                                                              for _ in pairs(v) do c = c + 1 end
                                                              return c
                                                            elseif type(v) == 'string' then
                                                                local l = utf8.len(v)
                                                                if l then return l end
                                                                return #v
                                                              elseif type(v) == 'table' then
                                                                  return #v
                                                                else
                                                                  return 0
                                                                end
                                                              end)(answer_nums)) do
                                                                if (answer_nums[i + 1] > max_val) then
                                                                  max_val = answer_nums[i + 1]
                                                                end
                                                                i = (i + 1)
                                                              end
                                                              return max_val
                                                            end
                                                            print(solution())
                                                            local _bench_end = os.clock()
                                                            collectgarbage()
                                                            local _bench_end_mem = collectgarbage('count') * 1024
                                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                          end;
