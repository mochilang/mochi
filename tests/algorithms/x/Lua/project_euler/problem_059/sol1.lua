-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then
  e = #lst
elseif e < 0 then
    e = #lst + e
  end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function xor(a, b)
    local res = 0
    local bit = 1
    local x = a
    local y = b
    while ((x > 0) or (y > 0)) do
      local abit = (x % 2)
      local bbit = (y % 2)
      if (abit ~= bbit) then
        res = (res + bit)
      end
      x = (x // 2)
      y = (y // 2)
      bit = (bit * 2)
    end
    return res
  end
  function chr(code)
    if (code == 10) then
      return "\n"
    end
    if (code == 13) then
      return "\r"
    end
    if (code == 9) then
      return "\t"
    end
    if ((code >= 32) and (code < 127)) then
      return string.sub(ascii_chars, ((code - 32) + 1), (code - 31))
    end
    return ""
  end
  function ord(ch)
    if (ch == "\n") then
      return 10
    end
    if (ch == "\r") then
      return 13
    end
    if (ch == "\t") then
      return 9
    end
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(ascii_chars)) do
          if (string.sub(ascii_chars, (i + 1), (i + 1)) == ch) then
            return (32 + i)
          end
          i = (i + 1)
        end
        return 0
      end
      function is_valid_ascii(code)
        if ((code >= 32) and (code <= 126)) then
          return true
        end
        if (((code == 9) or (code == 10)) or (code == 13)) then
          return true
        end
        return false
      end
      function try_key(ciphertext, key)
        local decoded = ""
        local i = 0
        local klen = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(key)
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(ciphertext)) do
                  local decodedchar = xor(ciphertext[i + 1], key[(i % klen) + 1])
                  if (not is_valid_ascii(decodedchar)) then
                    return _nil
                  end
                  decoded = (decoded .. chr(decodedchar))
                  i = (i + 1)
                end
                return decoded
              end
              function filter_valid_chars(ciphertext)
                local possibles = {}
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(LOWERCASE_INTS)) do
                      local j = 0
                      while (j < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(LOWERCASE_INTS)) do
                            local k = 0
                            while (k < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(LOWERCASE_INTS)) do
                                  local key = {LOWERCASE_INTS[i + 1], LOWERCASE_INTS[j + 1], LOWERCASE_INTS[k + 1]}
                                  local decoded = try_key(ciphertext, key)
                                  if (decoded ~= _nil) then
                                    possibles = (function(lst, item)
                                    local res = {table.unpack(lst or {})}
                                    table.insert(res, item)
                                    return res
                                  end)(possibles, decoded)
                                end
                                k = (k + 1)
                              end
                              j = (j + 1)
                            end
                            i = (i + 1)
                          end
                          return possibles
                        end
                        function contains(s, sub)
                          local n = (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(s)
                              local m = (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(sub)
                                  if (m == 0) then
                                    return true
                                  end
                                  local i = 0
                                  while (i <= (n - m)) do
                                    local j = 0
                                    local is_match = true
                                    while (j < m) do
                                      if (string.sub(s, ((i + j) + 1), ((i + j) + 1)) ~= string.sub(sub, (j + 1), (j + 1))) then
                                        is_match = false
                                        break
                                      end
                                      j = (j + 1)
                                    end
                                    if is_match then
                                      return true
                                    end
                                    i = (i + 1)
                                  end
                                  return false
                                end
                                function filter_common_word(possibles, common_word)
                                  local res = {}
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(possibles)) do
                                        local p = possibles[i + 1]
                                        if (string.find(string.lower(p), common_word, 1, true) ~= nil) then
                                          res = (function(lst, item)
                                          local res = {table.unpack(lst or {})}
                                          table.insert(res, item)
                                          return res
                                        end)(res, p)
                                      end
                                      i = (i + 1)
                                    end
                                    return res
                                  end
                                  function solution(ciphertext)
                                    local possibles = filter_valid_chars(ciphertext)
                                    local i = 0
                                    while (i < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(COMMON_WORDS)) do
                                          local word = COMMON_WORDS[i + 1]
                                          possibles = filter_common_word(possibles, word)
                                          if ((function(v)
                                          if type(v) == 'table' and v.items ~= nil then
                                            return #v.items
                                          elseif type(v) == 'table' and (v[1] == nil) then
                                              local c = 0
                                              for _ in pairs(v) do c = c + 1 end
                                              return c
                                            elseif type(v) == 'string' then
                                                local l = utf8.len(v)
                                                if l then return l end
                                                return #v
                                              elseif type(v) == 'table' then
                                                  return #v
                                                else
                                                  return 0
                                                end
                                              end)(possibles) == 1) then
                                                break
                                              end
                                              i = (i + 1)
                                            end
                                            local decoded_text = possibles[0 + 1]
                                            local sum = 0
                                            local j = 0
                                            while (j < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(decoded_text)) do
                                                  sum = (sum + ord(_substring(decoded_text, j, (j + 1))))
                                                  j = (j + 1)
                                                end
                                                return sum
                                              end
                                              ascii_chars = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                                              LOWERCASE_INTS = {}
                                              i = 97
                                              while (i <= 122) do
                                                LOWERCASE_INTS = (function(lst, item)
                                                local res = {table.unpack(lst or {})}
                                                table.insert(res, item)
                                                return res
                                              end)(LOWERCASE_INTS, i)
                                              i = (i + 1)
                                            end
                                            COMMON_WORDS = {"the", "be", "to", "of", "and", "in", "that", "have"}
                                            ciphertext = {17, 6, 1, 69, 12, 1, 69, 26, 11, 69, 1, 2, 69, 15, 10, 1, 78, 13, 11, 78, 16, 13, 15, 16, 69, 6, 5, 19, 11}
                                            print((((type(_str(solution(ciphertext))) == "table")) and (
                                            (function(v)
                                            local function encode(x)
                                            if type(x) == "table" then
                                              if x.__name and x.__order then
                                                local parts = {x.__name, " {"}
                                                for i, k in ipairs(x.__order) do
                                                  if i > 1 then parts[#parts+1] = ", " end
                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              elseif #x > 0 then
                                                  local allTables = true
                                                  for _, v in ipairs(x) do
                                                    if type(v) ~= "table" then allTables = false break end
                                                  end
                                                  local parts = {}
                                                  if not allTables then parts[#parts+1] = "[" end
                                                  for i, val in ipairs(x) do
                                                    parts[#parts+1] = encode(val)
                                                    if i < #x then parts[#parts+1] = " " end
                                                  end
                                                  if not allTables then parts[#parts+1] = "]" end
                                                  return table.concat(parts)
                                                else
                                                  local keys = {}
                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                  local parts = {"{"}
                                                  for i, k in ipairs(keys) do
                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                    if i < #keys then parts[#parts+1] = ", " end
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                end
                                              elseif type(x) == "string" then
                                                  return '"' .. x .. '"'
                                                else
                                                  return tostring(x)
                                                end
                                              end
                                              return encode(v)
                                            end)(_str(solution(ciphertext)))) or (_str(solution(ciphertext)))))
                                            local _bench_end = os.clock()
                                            collectgarbage()
                                            local _bench_end_mem = collectgarbage('count') * 1024
                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                          end;
