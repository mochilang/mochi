-- Generated by Mochi v0.10.61 on 2025-08-08 15:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sum_digit_factorials(n)
    if (cache_sum_digit_factorials[n] ~= nil) then
      return cache_sum_digit_factorials[n + 1]
    end
    local m = n
    local ret = 0
    if (m == 0) then
      ret = DIGIT_FACTORIALS[0 + 1]
    end
    while (m > 0) do
      local digit = (m % 10)
      ret = (ret + DIGIT_FACTORIALS[digit + 1])
      m = (m // 10)
    end
    cache_sum_digit_factorials[n + 1] = ret
    return ret
  end
  function chain_length(n)
    if (chain_length_cache[n] ~= nil) then
      return chain_length_cache[n + 1]
    end
    local chain = {}
    local seen = {}
    local current = n
    while true do
      if (chain_length_cache[current] ~= nil) then
        local known = chain_length_cache[current + 1]
        local total = known
        local i = ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(chain) - 1)
            while (i >= 0) do
              total = (total + 1)
              chain_length_cache[chain[i + 1] + 1] = total
              i = (i - 1)
            end
            return chain_length_cache[n + 1]
          end
          if (seen[current] ~= nil) then
            local loop_start = seen[current + 1]
            local loop_len = ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(chain) - loop_start)
                local i = ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(chain) - 1)
                    local ahead = 0
                    while (i >= 0) do
                      if (i >= loop_start) then
                        chain_length_cache[chain[i + 1] + 1] = loop_len
                      else
                        chain_length_cache[chain[i + 1] + 1] = (loop_len + (ahead + 1))
                      end
                      ahead = (ahead + 1)
                      i = (i - 1)
                    end
                    return chain_length_cache[n + 1]
                  end
                  seen[current + 1] = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(chain)
                      chain = (function(lst, item)
                      lst = lst or {}
                      table.insert(lst, item)
                      return lst
                    end)(chain, current)
                    current = sum_digit_factorials(current)
                  end
                end
                function solution(num_terms, max_start)
                  local count = 0
                  local i = 1
                  while (i < max_start) do
                    if (chain_length(i) == num_terms) then
                      count = (count + 1)
                    end
                    i = (i + 1)
                  end
                  return count
                end
                DIGIT_FACTORIALS = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880}
                cache_sum_digit_factorials = {[145] = 145}
                chain_length_cache = {[145] = 0, [169] = 3, [36301] = 3, [1454] = 3, [871] = 2, [45361] = 2, [872] = 2}
                print((((type(("solution() = " .. _str(solution(60, 1000)))) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(("solution() = " .. _str(solution(60, 1000))))) or (("solution() = " .. _str(solution(60, 1000))))))
                local _bench_end = os.clock()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
