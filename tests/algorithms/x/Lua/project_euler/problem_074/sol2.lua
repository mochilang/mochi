-- Generated by Mochi v0.10.61 on 2025-08-08 15:40 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function digit_factorial_sum(number)
    if (number < 0) then
      _panic("Parameter number must be greater than or equal to 0")
    end
    if (number == 0) then
      return DIGIT_FACTORIAL[0 + 1]
    end
    local n = number
    local total = 0
    while (n > 0) do
      local digit = (n % 10)
      total = (total + DIGIT_FACTORIAL[digit + 1])
      n = (n // 10)
    end
    return total
  end
  function chain_len(n, limit)
    local seen = {}
    local length = 0
    local cur = n
    while (((seen[cur] ~= nil) == false) and (length <= limit)) do
      seen[cur + 1] = true
      length = (length + 1)
      cur = digit_factorial_sum(cur)
    end
    return length
  end
  function solution(chain_length, number_limit)
    if ((chain_length <= 0) or (number_limit <= 0)) then
      _panic("Parameters chain_length and number_limit must be greater than 0")
    end
    local count = 0
    local start = 1
    while (start < number_limit) do
      if (chain_len(start, chain_length) == chain_length) then
        count = (count + 1)
      end
      start = (start + 1)
    end
    return count
  end
  DIGIT_FACTORIAL = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880}
  print((((type(_str(solution(60, 1000000))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(_str(solution(60, 1000000)))) or (_str(solution(60, 1000000)))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
