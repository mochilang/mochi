-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function is_leap(year)
    if ((((year % 4) == 0) and ((year % 100) ~= 0)) or ((year % 400) == 0)) then
      return true
    end
    return false
  end
  function count_sundays()
    local days_per_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
    local day = 6
    local month = 1
    local year = 1901
    local sundays = 0
    while (year < 2001) do
      day = (day + 7)
      if is_leap(year) then
        if ((day > days_per_month[(month - 1) + 1]) and (month ~= 2)) then
          month = (month + 1)
          day = (day - days_per_month[(month - 2) + 1])
        else
          if ((day > 29) and (month == 2)) then
            month = (month + 1)
            day = (day - 29)
          end
        end
      else
        if (day > days_per_month[(month - 1) + 1]) then
          month = (month + 1)
          day = (day - days_per_month[(month - 2) + 1])
        end
      end
      if (month > 12) then
        year = (year + 1)
        month = 1
      end
      if ((year < 2001) and (day == 1)) then
        sundays = (sundays + 1)
      end
    end
    return sundays
  end
  print(count_sundays())
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
