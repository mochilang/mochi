-- Generated by Mochi v0.10.60 on 2025-08-07 14:57 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function solution(pence)
    local coins = {1, 2, 5, 10, 20, 50, 100, 200}
    local ways = {}
    local i = 0
    while (i <= pence) do
      ways = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(ways, 0)
    i = (i + 1)
  end
  ways[0 + 1] = 1
  local idx = 0
  while (idx < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(coins)) do
        local coin = coins[idx + 1]
        local j = coin
        while (j <= pence) do
          ways[j + 1] = (ways[j + 1] + ways[(j - coin) + 1])
          j = (j + 1)
        end
        idx = (idx + 1)
      end
      return ways[pence + 1]
    end
    print(solution(500))
    print(solution(200))
    print(solution(50))
    print(solution(10))
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
