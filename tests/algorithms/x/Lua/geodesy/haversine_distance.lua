-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function to_radians(deg)
    return ((deg * PI) / 180)
  end
  function sin_taylor(x)
    local term = x
    local sum = x
    local i = 1
    while (i < 10) do
      local k1 = (2 * i)
      local k2 = (k1 + 1)
      term = ((((-term) * x) * x) / (k1 * k2))
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function cos_taylor(x)
    local term = 1
    local sum = 1
    local i = 1
    while (i < 10) do
      local k1 = ((2 * i) - 1)
      local k2 = (2 * i)
      term = ((((-term) * x) * x) / (k1 * k2))
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function tan_approx(x)
    return (sin_taylor(x) / cos_taylor(x))
  end
  function sqrtApprox(x)
    local guess = (x / 2)
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function atanApprox(x)
    if (x > 1) then
      return ((PI / 2) - (x / ((x * x) + 0.28)))
    end
    if (x < (-1)) then
      return (((-PI) / 2) - (x / ((x * x) + 0.28)))
    end
    return (x / (1 + ((0.28 * x) * x)))
  end
  function atan2Approx(y, x)
    if (x > 0) then
      local val = atanApprox((y / x))
      return val
    end
    if (x < 0) then
      if (y >= 0) then
        return (atanApprox((y / x)) + PI)
      end
      return (atanApprox((y / x)) - PI)
    end
    if (y > 0) then
      return (PI / 2)
    end
    if (y < 0) then
      return ((-PI) / 2)
    end
    return 0
  end
  function asinApprox(x)
    local denom = sqrtApprox((1 - (x * x)))
    local res = atan2Approx(x, denom)
    return res
  end
  function haversine_distance(lat1, lon1, lat2, lon2)
    local flattening = ((AXIS_A - AXIS_B) / AXIS_A)
    local phi_1 = atanApprox(((1 - flattening) * tan_approx(to_radians(lat1))))
    local phi_2 = atanApprox(((1 - flattening) * tan_approx(to_radians(lat2))))
    local lambda_1 = to_radians(lon1)
    local lambda_2 = to_radians(lon2)
    local sin_sq_phi = sin_taylor(((phi_2 - phi_1) / 2))
    local sin_sq_lambda = sin_taylor(((lambda_2 - lambda_1) / 2))
    sin_sq_phi = (sin_sq_phi * sin_sq_phi)
    sin_sq_lambda = (sin_sq_lambda * sin_sq_lambda)
    local h_value = sqrtApprox((sin_sq_phi + ((cos_taylor(phi_1) * cos_taylor(phi_2)) * sin_sq_lambda)))
    return ((2 * RADIUS) * asinApprox(h_value))
  end
  PI = 3.141592653589793
  AXIS_A = 6.378137e+06
  AXIS_B = 6.356752314245e+06
  RADIUS = 6.378137e+06
  SAN_FRANCISCO = {37.774856, (-122.424227)}
  YOSEMITE = {37.864742, (-119.537521)}
  print((((type(tostring(haversine_distance(SAN_FRANCISCO[0 + 1], SAN_FRANCISCO[1 + 1], YOSEMITE[0 + 1], YOSEMITE[1 + 1]))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(tostring(haversine_distance(SAN_FRANCISCO[0 + 1], SAN_FRANCISCO[1 + 1], YOSEMITE[0 + 1], YOSEMITE[1 + 1])))) or (tostring(haversine_distance(SAN_FRANCISCO[0 + 1], SAN_FRANCISCO[1 + 1], YOSEMITE[0 + 1], YOSEMITE[1 + 1])))))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
