-- Generated by Mochi v0.10.64 on 2025-08-12 09:13 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function multiply(matrix_a, matrix_b)
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(matrix_a)
        local matrix_c = {}
        local i = 0
        while (i < n) do
          local row = {}
          local j = 0
          while (j < n) do
            local val = 0
            local k = 0
            while (k < n) do
              val = (val + (matrix_a[i + 1][k + 1] * matrix_b[k + 1][j + 1]))
              k = (k + 1)
            end
            row = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(row, val)
          j = (j + 1)
        end
        matrix_c = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(matrix_c, row)
      i = (i + 1)
    end
    return matrix_c
  end
  function identity(n)
    local res = {}
    local i = 0
    while (i < n) do
      local row = {}
      local j = 0
      while (j < n) do
        if (i == j) then
          row = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(row, 1)
      else
        row = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(row, 0)
    end
    j = (j + 1)
  end
  res = (function(lst, item)
  lst = lst or {}
  table.insert(lst, item)
  return lst
end)(res, row)
i = (i + 1)
end
return res
end
function nth_fibonacci_matrix(n)
  if (n <= 1) then
    return n
  end
  local res_matrix = identity(2)
  local fib_matrix = {{1, 1}, {1, 0}}
  local m = (n - 1)
  while (m > 0) do
    if ((m % 2) == 1) then
      res_matrix = multiply(res_matrix, fib_matrix)
    end
    fib_matrix = multiply(fib_matrix, fib_matrix)
    m = (m // 2)
  end
  return res_matrix[0 + 1][0 + 1]
end
function nth_fibonacci_bruteforce(n)
  if (n <= 1) then
    return n
  end
  local fib0 = 0
  local fib1 = 1
  local i = 2
  while (i <= n) do
    local next = (fib0 + fib1)
    fib0 = fib1
    fib1 = next
    i = (i + 1)
  end
  return fib1
end
function parse_number(s)
  local result = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(s)) do
        local ch = _substring(s, i, (i + 1))
        if ((ch >= "0") and (ch <= "9")) then
          result = ((result * 10) + math.floor(tonumber(ch) or 0))
        end
        i = (i + 1)
      end
      return result
    end
    function main()
      local ordinals = {"0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"}
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(ordinals)) do
            local ordinal = ordinals[i + 1]
            local n = parse_number(ordinal)
            local msg = ((((ordinal .. " fibonacci number using matrix exponentiation is ") .. _str(nth_fibonacci_matrix(n))) .. " and using bruteforce is ") .. _str(nth_fibonacci_bruteforce(n)))
            print((((type(msg) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(msg)) or (msg)))
            i = (i + 1)
          end
        end
        main()
        local _bench_end = os.clock()
        collectgarbage()
        local _bench_end_mem = collectgarbage('count') * 1024
        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
      end;
