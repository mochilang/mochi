-- Generated by Mochi v0.10.67 on 2025-08-17 14:03 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _str(v)
    if type(v) == 'number' then
      local s = tostring(v)
      s = string.gsub(s, '%.0+$', '')
      return s
    elseif type(v) == 'table' then
        local parts = {}
        for i = 1, #v do
          parts[#parts+1] = _str(v[i])
        end
        return '[' .. table.concat(parts, ', ') .. ']'
      end
      return tostring(v)
    end
    do
      collectgarbage()
      local _bench_start_mem = collectgarbage('count') * 1024
      local _bench_start = os.clock()
      function add(matrices)
        local rows = _len(matrices[0 + 1])
        local cols = _len(matrices[0 + 1][0 + 1])
        local r = 0
        local result = {}
        while (r < rows) do
          local row = {}
          local c = 0
          while (c < cols) do
            local sum = 0.0
            local m = 0
            while (m < _len(matrices)) do
              sum = (sum + matrices[m + 1][r + 1][c + 1])
              m = (m + 1)
            end
            row = (function(lst, item)
            local res = {table.unpack(lst or {})}
            res[#res+1] = item
            return res
          end)(row, sum)
          c = (c + 1)
        end
        result = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(result, row)
      r = (r + 1)
    end
    return result
  end
  function subtract(a, b)
    local rows = _len(a)
    local cols = _len(a[0 + 1])
    local r = 0
    local result = {}
    while (r < rows) do
      local row = {}
      local c = 0
      while (c < cols) do
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(row, (a[r + 1][c + 1] - b[r + 1][c + 1]))
      c = (c + 1)
    end
    result = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(result, row)
  r = (r + 1)
end
return result
end
function scalar_multiply(matrix, n)
  local result = {}
  local i = 0
  while (i < _len(matrix)) do
    local row = {}
    local j = 0
    while (j < _len(matrix[i + 1])) do
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(row, (matrix[i + 1][j + 1] * n))
    j = (j + 1)
  end
  result = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(result, row)
i = (i + 1)
end
return result
end
function multiply(a, b)
  local rowsA = _len(a)
  local colsA = _len(a[0 + 1])
  local rowsB = _len(b)
  local colsB = _len(b[0 + 1])
  local result = {}
  local i = 0
  while (i < rowsA) do
    local row = {}
    local j = 0
    while (j < colsB) do
      local sum = 0.0
      local k = 0
      while (k < colsA) do
        sum = (sum + (a[i + 1][k + 1] * b[k + 1][j + 1]))
        k = (k + 1)
      end
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(row, sum)
    j = (j + 1)
  end
  result = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(result, row)
i = (i + 1)
end
return result
end
function identity(n)
  local result = {}
  local i = 0
  while (i < n) do
    local row = {}
    local j = 0
    while (j < n) do
      if (i == j) then
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(row, 1.0)
    else
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(row, 0.0)
  end
  j = (j + 1)
end
result = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(result, row)
i = (i + 1)
end
return result
end
function transpose(matrix)
  local rows = _len(matrix)
  local cols = _len(matrix[0 + 1])
  local result = {}
  local c = 0
  while (c < cols) do
    local row = {}
    local r = 0
    while (r < rows) do
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(row, matrix[r + 1][c + 1])
    r = (r + 1)
  end
  result = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(result, row)
c = (c + 1)
end
return result
end
function minor(matrix, row, column)
  local result = {}
  local i = 0
  while (i < _len(matrix)) do
    if (i ~= row) then
      local new_row = {}
      local j = 0
      while (j < _len(matrix[i + 1])) do
        if (j ~= column) then
          new_row = (function(lst, item)
          local res = {table.unpack(lst or {})}
          res[#res+1] = item
          return res
        end)(new_row, matrix[i + 1][j + 1])
      end
      j = (j + 1)
    end
    result = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(result, new_row)
end
i = (i + 1)
end
return result
end
function determinant(matrix)
  if (_len(matrix) == 1) then
    return matrix[0 + 1][0 + 1]
  end
  local det = 0.0
  local c = 0
  while (c < _len(matrix[0 + 1])) do
    local sub = minor(matrix, 0, c)
    local sign = ((((c % 2) == 0)) and (1.0) or ((-1.0)))
    det = (det + ((matrix[0 + 1][c + 1] * determinant(sub)) * sign))
    c = (c + 1)
  end
  return det
end
function inverse(matrix)
  local det = determinant(matrix)
  if (det == 0.0) then
    return {}
  end
  local size = _len(matrix)
  local matrix_minor = {}
  local i = 0
  while (i < size) do
    local row = {}
    local j = 0
    while (j < size) do
      local m = minor(matrix, i, j)
      row = (function(lst, item)
      local res = {table.unpack(lst or {})}
      res[#res+1] = item
      return res
    end)(row, determinant(m))
    j = (j + 1)
  end
  matrix_minor = (function(lst, item)
  local res = {table.unpack(lst or {})}
  res[#res+1] = item
  return res
end)(matrix_minor, row)
i = (i + 1)
end
local cofactors = {}
i = 0
while (i < size) do
  local row = {}
  local j = 0
  while (j < size) do
    local sign = (((((i + j) % 2) == 0)) and (1.0) or ((-1.0)))
    row = (function(lst, item)
    local res = {table.unpack(lst or {})}
    res[#res+1] = item
    return res
  end)(row, (matrix_minor[i + 1][j + 1] * sign))
  j = (j + 1)
end
cofactors = (function(lst, item)
local res = {table.unpack(lst or {})}
res[#res+1] = item
return res
end)(cofactors, row)
i = (i + 1)
end
local adjugate = transpose(cofactors)
return scalar_multiply(adjugate, (1.0 / det))
end
function main()
  local matrix_a = {{12.0, 10.0}, {3.0, 9.0}}
  local matrix_b = {{3.0, 4.0}, {7.0, 4.0}}
  local matrix_c = {{11.0, 12.0, 13.0, 14.0}, {21.0, 22.0, 23.0, 24.0}, {31.0, 32.0, 33.0, 34.0}, {41.0, 42.0, 43.0, 44.0}}
  local matrix_d = {{3.0, 0.0, 2.0}, {2.0, 0.0, (-2.0)}, {0.0, 1.0, 1.0}}
  print((((type((("Add Operation, add(matrix_a, matrix_b) = " ..
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "number" then
        if math.type and math.type(x) == "integer" then
          return string.format("%d", x)
        else
          local s = string.format("%g", x)
          if not string.find(s, "[%.eE]") then
            s = s .. ".0"
          end
          return s
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(add({matrix_a, matrix_b}))) .. " \n")) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "number" then
          if math.type and math.type(x) == "integer" then
            return string.format("%d", x)
          else
            local s = string.format("%g", x)
            if not string.find(s, "[%.eE]") then
              s = s .. ".0"
            end
            return s
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)((("Add Operation, add(matrix_a, matrix_b) = " ..
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "number" then
            if math.type and math.type(x) == "integer" then
              return string.format("%d", x)
            else
              local s = string.format("%g", x)
              if not string.find(s, "[%.eE]") then
                s = s .. ".0"
              end
              return s
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(add({matrix_a, matrix_b}))) .. " \n"))) or ((("Add Operation, add(matrix_a, matrix_b) = " ..
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "number" then
              if math.type and math.type(x) == "integer" then
                return string.format("%d", x)
              else
                local s = string.format("%g", x)
                if not string.find(s, "[%.eE]") then
                  s = s .. ".0"
                end
                return s
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(add({matrix_a, matrix_b}))) .. " \n"))))
          print((((type((("Multiply Operation, multiply(matrix_a, matrix_b) = " ..
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "number" then
                if math.type and math.type(x) == "integer" then
                  return string.format("%d", x)
                else
                  local s = string.format("%g", x)
                  if not string.find(s, "[%.eE]") then
                    s = s .. ".0"
                  end
                  return s
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(multiply(matrix_a, matrix_b))) .. " \n")) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "number" then
                  if math.type and math.type(x) == "integer" then
                    return string.format("%d", x)
                  else
                    local s = string.format("%g", x)
                    if not string.find(s, "[%.eE]") then
                      s = s .. ".0"
                    end
                    return s
                  end
                elseif type(x) == "string" then
                    return '"' .. x .. '"'
                  else
                    return tostring(x)
                  end
                end
                return encode(v)
              end)((("Multiply Operation, multiply(matrix_a, matrix_b) = " ..
              (function(v)
              local function encode(x)
              if type(x) == "table" then
                if x.__name and x.__order then
                  local parts = {x.__name, " {"}
                  for i, k in ipairs(x.__order) do
                    if i > 1 then parts[#parts+1] = ", " end
                    parts[#parts+1] = k .. " = " .. encode(x[k])
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                elseif #x > 0 then
                    local allTables = true
                    for _, v in ipairs(x) do
                      if type(v) ~= "table" then allTables = false break end
                    end
                    local parts = {}
                    if not allTables then parts[#parts+1] = "[" end
                    for i, val in ipairs(x) do
                      parts[#parts+1] = encode(val)
                      if i < #x then parts[#parts+1] = " " end
                    end
                    if not allTables then parts[#parts+1] = "]" end
                    return table.concat(parts)
                  else
                    local keys = {}
                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                    local parts = {"{"}
                    for i, k in ipairs(keys) do
                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                      if i < #keys then parts[#parts+1] = ", " end
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  end
                elseif type(x) == "number" then
                    if math.type and math.type(x) == "integer" then
                      return string.format("%d", x)
                    else
                      local s = string.format("%g", x)
                      if not string.find(s, "[%.eE]") then
                        s = s .. ".0"
                      end
                      return s
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(multiply(matrix_a, matrix_b))) .. " \n"))) or ((("Multiply Operation, multiply(matrix_a, matrix_b) = " ..
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "number" then
                      if math.type and math.type(x) == "integer" then
                        return string.format("%d", x)
                      else
                        local s = string.format("%g", x)
                        if not string.find(s, "[%.eE]") then
                          s = s .. ".0"
                        end
                        return s
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(multiply(matrix_a, matrix_b))) .. " \n"))))
                  print((((type((("Identity: " ..
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "number" then
                        if math.type and math.type(x) == "integer" then
                          return string.format("%d", x)
                        else
                          local s = string.format("%g", x)
                          if not string.find(s, "[%.eE]") then
                            s = s .. ".0"
                          end
                          return s
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)(identity(5))) .. "\n")) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "number" then
                          if math.type and math.type(x) == "integer" then
                            return string.format("%d", x)
                          else
                            local s = string.format("%g", x)
                            if not string.find(s, "[%.eE]") then
                              s = s .. ".0"
                            end
                            return s
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)((("Identity: " ..
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "number" then
                            if math.type and math.type(x) == "integer" then
                              return string.format("%d", x)
                            else
                              local s = string.format("%g", x)
                              if not string.find(s, "[%.eE]") then
                                s = s .. ".0"
                              end
                              return s
                            end
                          elseif type(x) == "string" then
                              return '"' .. x .. '"'
                            else
                              return tostring(x)
                            end
                          end
                          return encode(v)
                        end)(identity(5))) .. "\n"))) or ((("Identity: " ..
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "number" then
                              if math.type and math.type(x) == "integer" then
                                return string.format("%d", x)
                              else
                                local s = string.format("%g", x)
                                if not string.find(s, "[%.eE]") then
                                  s = s .. ".0"
                                end
                                return s
                              end
                            elseif type(x) == "string" then
                                return '"' .. x .. '"'
                              else
                                return tostring(x)
                              end
                            end
                            return encode(v)
                          end)(identity(5))) .. "\n"))))
                          print((((type((((("Minor of " ..
                          (function(v)
                          local function encode(x)
                          if type(x) == "table" then
                            if x.__name and x.__order then
                              local parts = {x.__name, " {"}
                              for i, k in ipairs(x.__order) do
                                if i > 1 then parts[#parts+1] = ", " end
                                parts[#parts+1] = k .. " = " .. encode(x[k])
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            elseif #x > 0 then
                                local allTables = true
                                for _, v in ipairs(x) do
                                  if type(v) ~= "table" then allTables = false break end
                                end
                                local parts = {}
                                if not allTables then parts[#parts+1] = "[" end
                                for i, val in ipairs(x) do
                                  parts[#parts+1] = encode(val)
                                  if i < #x then parts[#parts+1] = " " end
                                end
                                if not allTables then parts[#parts+1] = "]" end
                                return table.concat(parts)
                              else
                                local keys = {}
                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                local parts = {"{"}
                                for i, k in ipairs(keys) do
                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                  if i < #keys then parts[#parts+1] = ", " end
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              end
                            elseif type(x) == "number" then
                                if math.type and math.type(x) == "integer" then
                                  return string.format("%d", x)
                                else
                                  local s = string.format("%g", x)
                                  if not string.find(s, "[%.eE]") then
                                    s = s .. ".0"
                                  end
                                  return s
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(matrix_c)) .. " = ") ..
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "number" then
                                  if math.type and math.type(x) == "integer" then
                                    return string.format("%d", x)
                                  else
                                    local s = string.format("%g", x)
                                    if not string.find(s, "[%.eE]") then
                                      s = s .. ".0"
                                    end
                                    return s
                                  end
                                elseif type(x) == "string" then
                                    return '"' .. x .. '"'
                                  else
                                    return tostring(x)
                                  end
                                end
                                return encode(v)
                              end)(minor(matrix_c, 1, 2))) .. " \n")) == "table")) and (
                              (function(v)
                              local function encode(x)
                              if type(x) == "table" then
                                if x.__name and x.__order then
                                  local parts = {x.__name, " {"}
                                  for i, k in ipairs(x.__order) do
                                    if i > 1 then parts[#parts+1] = ", " end
                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                elseif #x > 0 then
                                    local allTables = true
                                    for _, v in ipairs(x) do
                                      if type(v) ~= "table" then allTables = false break end
                                    end
                                    local parts = {}
                                    if not allTables then parts[#parts+1] = "[" end
                                    for i, val in ipairs(x) do
                                      parts[#parts+1] = encode(val)
                                      if i < #x then parts[#parts+1] = " " end
                                    end
                                    if not allTables then parts[#parts+1] = "]" end
                                    return table.concat(parts)
                                  else
                                    local keys = {}
                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                    local parts = {"{"}
                                    for i, k in ipairs(keys) do
                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                      if i < #keys then parts[#parts+1] = ", " end
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  end
                                elseif type(x) == "number" then
                                    if math.type and math.type(x) == "integer" then
                                      return string.format("%d", x)
                                    else
                                      local s = string.format("%g", x)
                                      if not string.find(s, "[%.eE]") then
                                        s = s .. ".0"
                                      end
                                      return s
                                    end
                                  elseif type(x) == "string" then
                                      return '"' .. x .. '"'
                                    else
                                      return tostring(x)
                                    end
                                  end
                                  return encode(v)
                                end)((((("Minor of " ..
                                (function(v)
                                local function encode(x)
                                if type(x) == "table" then
                                  if x.__name and x.__order then
                                    local parts = {x.__name, " {"}
                                    for i, k in ipairs(x.__order) do
                                      if i > 1 then parts[#parts+1] = ", " end
                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  elseif #x > 0 then
                                      local allTables = true
                                      for _, v in ipairs(x) do
                                        if type(v) ~= "table" then allTables = false break end
                                      end
                                      local parts = {}
                                      if not allTables then parts[#parts+1] = "[" end
                                      for i, val in ipairs(x) do
                                        parts[#parts+1] = encode(val)
                                        if i < #x then parts[#parts+1] = " " end
                                      end
                                      if not allTables then parts[#parts+1] = "]" end
                                      return table.concat(parts)
                                    else
                                      local keys = {}
                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                      local parts = {"{"}
                                      for i, k in ipairs(keys) do
                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                        if i < #keys then parts[#parts+1] = ", " end
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    end
                                  elseif type(x) == "number" then
                                      if math.type and math.type(x) == "integer" then
                                        return string.format("%d", x)
                                      else
                                        local s = string.format("%g", x)
                                        if not string.find(s, "[%.eE]") then
                                          s = s .. ".0"
                                        end
                                        return s
                                      end
                                    elseif type(x) == "string" then
                                        return '"' .. x .. '"'
                                      else
                                        return tostring(x)
                                      end
                                    end
                                    return encode(v)
                                  end)(matrix_c)) .. " = ") ..
                                  (function(v)
                                  local function encode(x)
                                  if type(x) == "table" then
                                    if x.__name and x.__order then
                                      local parts = {x.__name, " {"}
                                      for i, k in ipairs(x.__order) do
                                        if i > 1 then parts[#parts+1] = ", " end
                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    elseif #x > 0 then
                                        local allTables = true
                                        for _, v in ipairs(x) do
                                          if type(v) ~= "table" then allTables = false break end
                                        end
                                        local parts = {}
                                        if not allTables then parts[#parts+1] = "[" end
                                        for i, val in ipairs(x) do
                                          parts[#parts+1] = encode(val)
                                          if i < #x then parts[#parts+1] = " " end
                                        end
                                        if not allTables then parts[#parts+1] = "]" end
                                        return table.concat(parts)
                                      else
                                        local keys = {}
                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                        local parts = {"{"}
                                        for i, k in ipairs(keys) do
                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                          if i < #keys then parts[#parts+1] = ", " end
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      end
                                    elseif type(x) == "number" then
                                        if math.type and math.type(x) == "integer" then
                                          return string.format("%d", x)
                                        else
                                          local s = string.format("%g", x)
                                          if not string.find(s, "[%.eE]") then
                                            s = s .. ".0"
                                          end
                                          return s
                                        end
                                      elseif type(x) == "string" then
                                          return '"' .. x .. '"'
                                        else
                                          return tostring(x)
                                        end
                                      end
                                      return encode(v)
                                    end)(minor(matrix_c, 1, 2))) .. " \n"))) or ((((("Minor of " ..
                                    (function(v)
                                    local function encode(x)
                                    if type(x) == "table" then
                                      if x.__name and x.__order then
                                        local parts = {x.__name, " {"}
                                        for i, k in ipairs(x.__order) do
                                          if i > 1 then parts[#parts+1] = ", " end
                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      elseif #x > 0 then
                                          local allTables = true
                                          for _, v in ipairs(x) do
                                            if type(v) ~= "table" then allTables = false break end
                                          end
                                          local parts = {}
                                          if not allTables then parts[#parts+1] = "[" end
                                          for i, val in ipairs(x) do
                                            parts[#parts+1] = encode(val)
                                            if i < #x then parts[#parts+1] = " " end
                                          end
                                          if not allTables then parts[#parts+1] = "]" end
                                          return table.concat(parts)
                                        else
                                          local keys = {}
                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                          local parts = {"{"}
                                          for i, k in ipairs(keys) do
                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                            if i < #keys then parts[#parts+1] = ", " end
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        end
                                      elseif type(x) == "number" then
                                          if math.type and math.type(x) == "integer" then
                                            return string.format("%d", x)
                                          else
                                            local s = string.format("%g", x)
                                            if not string.find(s, "[%.eE]") then
                                              s = s .. ".0"
                                            end
                                            return s
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(matrix_c)) .. " = ") ..
                                      (function(v)
                                      local function encode(x)
                                      if type(x) == "table" then
                                        if x.__name and x.__order then
                                          local parts = {x.__name, " {"}
                                          for i, k in ipairs(x.__order) do
                                            if i > 1 then parts[#parts+1] = ", " end
                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        elseif #x > 0 then
                                            local allTables = true
                                            for _, v in ipairs(x) do
                                              if type(v) ~= "table" then allTables = false break end
                                            end
                                            local parts = {}
                                            if not allTables then parts[#parts+1] = "[" end
                                            for i, val in ipairs(x) do
                                              parts[#parts+1] = encode(val)
                                              if i < #x then parts[#parts+1] = " " end
                                            end
                                            if not allTables then parts[#parts+1] = "]" end
                                            return table.concat(parts)
                                          else
                                            local keys = {}
                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                            local parts = {"{"}
                                            for i, k in ipairs(keys) do
                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                              if i < #keys then parts[#parts+1] = ", " end
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          end
                                        elseif type(x) == "number" then
                                            if math.type and math.type(x) == "integer" then
                                              return string.format("%d", x)
                                            else
                                              local s = string.format("%g", x)
                                              if not string.find(s, "[%.eE]") then
                                                s = s .. ".0"
                                              end
                                              return s
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(minor(matrix_c, 1, 2))) .. " \n"))))
                                        print((((type((((("Determinant of " ..
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "number" then
                                              if math.type and math.type(x) == "integer" then
                                                return string.format("%d", x)
                                              else
                                                local s = string.format("%g", x)
                                                if not string.find(s, "[%.eE]") then
                                                  s = s .. ".0"
                                                end
                                                return s
                                              end
                                            elseif type(x) == "string" then
                                                return '"' .. x .. '"'
                                              else
                                                return tostring(x)
                                              end
                                            end
                                            return encode(v)
                                          end)(matrix_b)) .. " = ") .. _str(determinant(matrix_b))) .. " \n")) == "table")) and (
                                          (function(v)
                                          local function encode(x)
                                          if type(x) == "table" then
                                            if x.__name and x.__order then
                                              local parts = {x.__name, " {"}
                                              for i, k in ipairs(x.__order) do
                                                if i > 1 then parts[#parts+1] = ", " end
                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            elseif #x > 0 then
                                                local allTables = true
                                                for _, v in ipairs(x) do
                                                  if type(v) ~= "table" then allTables = false break end
                                                end
                                                local parts = {}
                                                if not allTables then parts[#parts+1] = "[" end
                                                for i, val in ipairs(x) do
                                                  parts[#parts+1] = encode(val)
                                                  if i < #x then parts[#parts+1] = " " end
                                                end
                                                if not allTables then parts[#parts+1] = "]" end
                                                return table.concat(parts)
                                              else
                                                local keys = {}
                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                local parts = {"{"}
                                                for i, k in ipairs(keys) do
                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                  if i < #keys then parts[#parts+1] = ", " end
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              end
                                            elseif type(x) == "number" then
                                                if math.type and math.type(x) == "integer" then
                                                  return string.format("%d", x)
                                                else
                                                  local s = string.format("%g", x)
                                                  if not string.find(s, "[%.eE]") then
                                                    s = s .. ".0"
                                                  end
                                                  return s
                                                end
                                              elseif type(x) == "string" then
                                                  return '"' .. x .. '"'
                                                else
                                                  return tostring(x)
                                                end
                                              end
                                              return encode(v)
                                            end)((((("Determinant of " ..
                                            (function(v)
                                            local function encode(x)
                                            if type(x) == "table" then
                                              if x.__name and x.__order then
                                                local parts = {x.__name, " {"}
                                                for i, k in ipairs(x.__order) do
                                                  if i > 1 then parts[#parts+1] = ", " end
                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              elseif #x > 0 then
                                                  local allTables = true
                                                  for _, v in ipairs(x) do
                                                    if type(v) ~= "table" then allTables = false break end
                                                  end
                                                  local parts = {}
                                                  if not allTables then parts[#parts+1] = "[" end
                                                  for i, val in ipairs(x) do
                                                    parts[#parts+1] = encode(val)
                                                    if i < #x then parts[#parts+1] = " " end
                                                  end
                                                  if not allTables then parts[#parts+1] = "]" end
                                                  return table.concat(parts)
                                                else
                                                  local keys = {}
                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                  local parts = {"{"}
                                                  for i, k in ipairs(keys) do
                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                    if i < #keys then parts[#parts+1] = ", " end
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                end
                                              elseif type(x) == "number" then
                                                  if math.type and math.type(x) == "integer" then
                                                    return string.format("%d", x)
                                                  else
                                                    local s = string.format("%g", x)
                                                    if not string.find(s, "[%.eE]") then
                                                      s = s .. ".0"
                                                    end
                                                    return s
                                                  end
                                                elseif type(x) == "string" then
                                                    return '"' .. x .. '"'
                                                  else
                                                    return tostring(x)
                                                  end
                                                end
                                                return encode(v)
                                              end)(matrix_b)) .. " = ") .. _str(determinant(matrix_b))) .. " \n"))) or ((((("Determinant of " ..
                                              (function(v)
                                              local function encode(x)
                                              if type(x) == "table" then
                                                if x.__name and x.__order then
                                                  local parts = {x.__name, " {"}
                                                  for i, k in ipairs(x.__order) do
                                                    if i > 1 then parts[#parts+1] = ", " end
                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                  end
                                                  parts[#parts+1] = "}"
                                                  return table.concat(parts)
                                                elseif #x > 0 then
                                                    local allTables = true
                                                    for _, v in ipairs(x) do
                                                      if type(v) ~= "table" then allTables = false break end
                                                    end
                                                    local parts = {}
                                                    if not allTables then parts[#parts+1] = "[" end
                                                    for i, val in ipairs(x) do
                                                      parts[#parts+1] = encode(val)
                                                      if i < #x then parts[#parts+1] = " " end
                                                    end
                                                    if not allTables then parts[#parts+1] = "]" end
                                                    return table.concat(parts)
                                                  else
                                                    local keys = {}
                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                    local parts = {"{"}
                                                    for i, k in ipairs(keys) do
                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                      if i < #keys then parts[#parts+1] = ", " end
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  end
                                                elseif type(x) == "number" then
                                                    if math.type and math.type(x) == "integer" then
                                                      return string.format("%d", x)
                                                    else
                                                      local s = string.format("%g", x)
                                                      if not string.find(s, "[%.eE]") then
                                                        s = s .. ".0"
                                                      end
                                                      return s
                                                    end
                                                  elseif type(x) == "string" then
                                                      return '"' .. x .. '"'
                                                    else
                                                      return tostring(x)
                                                    end
                                                  end
                                                  return encode(v)
                                                end)(matrix_b)) .. " = ") .. _str(determinant(matrix_b))) .. " \n"))))
                                                print((((type((((("Inverse of " ..
                                                (function(v)
                                                local function encode(x)
                                                if type(x) == "table" then
                                                  if x.__name and x.__order then
                                                    local parts = {x.__name, " {"}
                                                    for i, k in ipairs(x.__order) do
                                                      if i > 1 then parts[#parts+1] = ", " end
                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  elseif #x > 0 then
                                                      local allTables = true
                                                      for _, v in ipairs(x) do
                                                        if type(v) ~= "table" then allTables = false break end
                                                      end
                                                      local parts = {}
                                                      if not allTables then parts[#parts+1] = "[" end
                                                      for i, val in ipairs(x) do
                                                        parts[#parts+1] = encode(val)
                                                        if i < #x then parts[#parts+1] = " " end
                                                      end
                                                      if not allTables then parts[#parts+1] = "]" end
                                                      return table.concat(parts)
                                                    else
                                                      local keys = {}
                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                      local parts = {"{"}
                                                      for i, k in ipairs(keys) do
                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                        if i < #keys then parts[#parts+1] = ", " end
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    end
                                                  elseif type(x) == "number" then
                                                      if math.type and math.type(x) == "integer" then
                                                        return string.format("%d", x)
                                                      else
                                                        local s = string.format("%g", x)
                                                        if not string.find(s, "[%.eE]") then
                                                          s = s .. ".0"
                                                        end
                                                        return s
                                                      end
                                                    elseif type(x) == "string" then
                                                        return '"' .. x .. '"'
                                                      else
                                                        return tostring(x)
                                                      end
                                                    end
                                                    return encode(v)
                                                  end)(matrix_d)) .. " = ") ..
                                                  (function(v)
                                                  local function encode(x)
                                                  if type(x) == "table" then
                                                    if x.__name and x.__order then
                                                      local parts = {x.__name, " {"}
                                                      for i, k in ipairs(x.__order) do
                                                        if i > 1 then parts[#parts+1] = ", " end
                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    elseif #x > 0 then
                                                        local allTables = true
                                                        for _, v in ipairs(x) do
                                                          if type(v) ~= "table" then allTables = false break end
                                                        end
                                                        local parts = {}
                                                        if not allTables then parts[#parts+1] = "[" end
                                                        for i, val in ipairs(x) do
                                                          parts[#parts+1] = encode(val)
                                                          if i < #x then parts[#parts+1] = " " end
                                                        end
                                                        if not allTables then parts[#parts+1] = "]" end
                                                        return table.concat(parts)
                                                      else
                                                        local keys = {}
                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                        local parts = {"{"}
                                                        for i, k in ipairs(keys) do
                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                          if i < #keys then parts[#parts+1] = ", " end
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      end
                                                    elseif type(x) == "number" then
                                                        if math.type and math.type(x) == "integer" then
                                                          return string.format("%d", x)
                                                        else
                                                          local s = string.format("%g", x)
                                                          if not string.find(s, "[%.eE]") then
                                                            s = s .. ".0"
                                                          end
                                                          return s
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(inverse(matrix_d))) .. "\n")) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "number" then
                                                          if math.type and math.type(x) == "integer" then
                                                            return string.format("%d", x)
                                                          else
                                                            local s = string.format("%g", x)
                                                            if not string.find(s, "[%.eE]") then
                                                              s = s .. ".0"
                                                            end
                                                            return s
                                                          end
                                                        elseif type(x) == "string" then
                                                            return '"' .. x .. '"'
                                                          else
                                                            return tostring(x)
                                                          end
                                                        end
                                                        return encode(v)
                                                      end)((((("Inverse of " ..
                                                      (function(v)
                                                      local function encode(x)
                                                      if type(x) == "table" then
                                                        if x.__name and x.__order then
                                                          local parts = {x.__name, " {"}
                                                          for i, k in ipairs(x.__order) do
                                                            if i > 1 then parts[#parts+1] = ", " end
                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        elseif #x > 0 then
                                                            local allTables = true
                                                            for _, v in ipairs(x) do
                                                              if type(v) ~= "table" then allTables = false break end
                                                            end
                                                            local parts = {}
                                                            if not allTables then parts[#parts+1] = "[" end
                                                            for i, val in ipairs(x) do
                                                              parts[#parts+1] = encode(val)
                                                              if i < #x then parts[#parts+1] = " " end
                                                            end
                                                            if not allTables then parts[#parts+1] = "]" end
                                                            return table.concat(parts)
                                                          else
                                                            local keys = {}
                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                            local parts = {"{"}
                                                            for i, k in ipairs(keys) do
                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                              if i < #keys then parts[#parts+1] = ", " end
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          end
                                                        elseif type(x) == "number" then
                                                            if math.type and math.type(x) == "integer" then
                                                              return string.format("%d", x)
                                                            else
                                                              local s = string.format("%g", x)
                                                              if not string.find(s, "[%.eE]") then
                                                                s = s .. ".0"
                                                              end
                                                              return s
                                                            end
                                                          elseif type(x) == "string" then
                                                              return '"' .. x .. '"'
                                                            else
                                                              return tostring(x)
                                                            end
                                                          end
                                                          return encode(v)
                                                        end)(matrix_d)) .. " = ") ..
                                                        (function(v)
                                                        local function encode(x)
                                                        if type(x) == "table" then
                                                          if x.__name and x.__order then
                                                            local parts = {x.__name, " {"}
                                                            for i, k in ipairs(x.__order) do
                                                              if i > 1 then parts[#parts+1] = ", " end
                                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          elseif #x > 0 then
                                                              local allTables = true
                                                              for _, v in ipairs(x) do
                                                                if type(v) ~= "table" then allTables = false break end
                                                              end
                                                              local parts = {}
                                                              if not allTables then parts[#parts+1] = "[" end
                                                              for i, val in ipairs(x) do
                                                                parts[#parts+1] = encode(val)
                                                                if i < #x then parts[#parts+1] = " " end
                                                              end
                                                              if not allTables then parts[#parts+1] = "]" end
                                                              return table.concat(parts)
                                                            else
                                                              local keys = {}
                                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                              local parts = {"{"}
                                                              for i, k in ipairs(keys) do
                                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                if i < #keys then parts[#parts+1] = ", " end
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            end
                                                          elseif type(x) == "number" then
                                                              if math.type and math.type(x) == "integer" then
                                                                return string.format("%d", x)
                                                              else
                                                                local s = string.format("%g", x)
                                                                if not string.find(s, "[%.eE]") then
                                                                  s = s .. ".0"
                                                                end
                                                                return s
                                                              end
                                                            elseif type(x) == "string" then
                                                                return '"' .. x .. '"'
                                                              else
                                                                return tostring(x)
                                                              end
                                                            end
                                                            return encode(v)
                                                          end)(inverse(matrix_d))) .. "\n"))) or ((((("Inverse of " ..
                                                          (function(v)
                                                          local function encode(x)
                                                          if type(x) == "table" then
                                                            if x.__name and x.__order then
                                                              local parts = {x.__name, " {"}
                                                              for i, k in ipairs(x.__order) do
                                                                if i > 1 then parts[#parts+1] = ", " end
                                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            elseif #x > 0 then
                                                                local allTables = true
                                                                for _, v in ipairs(x) do
                                                                  if type(v) ~= "table" then allTables = false break end
                                                                end
                                                                local parts = {}
                                                                if not allTables then parts[#parts+1] = "[" end
                                                                for i, val in ipairs(x) do
                                                                  parts[#parts+1] = encode(val)
                                                                  if i < #x then parts[#parts+1] = " " end
                                                                end
                                                                if not allTables then parts[#parts+1] = "]" end
                                                                return table.concat(parts)
                                                              else
                                                                local keys = {}
                                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                local parts = {"{"}
                                                                for i, k in ipairs(keys) do
                                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                  if i < #keys then parts[#parts+1] = ", " end
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              end
                                                            elseif type(x) == "number" then
                                                                if math.type and math.type(x) == "integer" then
                                                                  return string.format("%d", x)
                                                                else
                                                                  local s = string.format("%g", x)
                                                                  if not string.find(s, "[%.eE]") then
                                                                    s = s .. ".0"
                                                                  end
                                                                  return s
                                                                end
                                                              elseif type(x) == "string" then
                                                                  return '"' .. x .. '"'
                                                                else
                                                                  return tostring(x)
                                                                end
                                                              end
                                                              return encode(v)
                                                            end)(matrix_d)) .. " = ") ..
                                                            (function(v)
                                                            local function encode(x)
                                                            if type(x) == "table" then
                                                              if x.__name and x.__order then
                                                                local parts = {x.__name, " {"}
                                                                for i, k in ipairs(x.__order) do
                                                                  if i > 1 then parts[#parts+1] = ", " end
                                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                end
                                                                parts[#parts+1] = "}"
                                                                return table.concat(parts)
                                                              elseif #x > 0 then
                                                                  local allTables = true
                                                                  for _, v in ipairs(x) do
                                                                    if type(v) ~= "table" then allTables = false break end
                                                                  end
                                                                  local parts = {}
                                                                  if not allTables then parts[#parts+1] = "[" end
                                                                  for i, val in ipairs(x) do
                                                                    parts[#parts+1] = encode(val)
                                                                    if i < #x then parts[#parts+1] = " " end
                                                                  end
                                                                  if not allTables then parts[#parts+1] = "]" end
                                                                  return table.concat(parts)
                                                                else
                                                                  local keys = {}
                                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                  local parts = {"{"}
                                                                  for i, k in ipairs(keys) do
                                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                    if i < #keys then parts[#parts+1] = ", " end
                                                                  end
                                                                  parts[#parts+1] = "}"
                                                                  return table.concat(parts)
                                                                end
                                                              elseif type(x) == "number" then
                                                                  if math.type and math.type(x) == "integer" then
                                                                    return string.format("%d", x)
                                                                  else
                                                                    local s = string.format("%g", x)
                                                                    if not string.find(s, "[%.eE]") then
                                                                      s = s .. ".0"
                                                                    end
                                                                    return s
                                                                  end
                                                                elseif type(x) == "string" then
                                                                    return '"' .. x .. '"'
                                                                  else
                                                                    return tostring(x)
                                                                  end
                                                                end
                                                                return encode(v)
                                                              end)(inverse(matrix_d))) .. "\n"))))
                                                            end
                                                            main()
                                                            local _bench_end = os.clock()
                                                            collectgarbage()
                                                            local _bench_end_mem = collectgarbage('count') * 1024
                                                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                          end;
