-- Generated by Mochi v0.10.59 on 2025-08-07 11:58 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function inverse_of_matrix(matrix)
    if ((((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(matrix) == 2) and ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(matrix[0 + 1]) == 2)) and ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(matrix[1 + 1]) == 2)) then
                  local det = ((matrix[0 + 1][0 + 1] * matrix[1 + 1][1 + 1]) - (matrix[1 + 1][0 + 1] * matrix[0 + 1][1 + 1]))
                  if (det == 0) then
                    print("This matrix has no inverse.")
                    return {}
                  end
                  return {{(matrix[1 + 1][1 + 1] / det), ((-matrix[0 + 1][1 + 1]) / det)}, {((-matrix[1 + 1][0 + 1]) / det), (matrix[0 + 1][0 + 1] / det)}}
                else
                  if (((((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(matrix) == 3) and ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(matrix[0 + 1]) == 3)) and ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(matrix[1 + 1]) == 3)) and ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(matrix[2 + 1]) == 3)) then
                                    local det = (((((matrix[0 + 1][0 + 1] * matrix[1 + 1][1 + 1]) * matrix[2 + 1][2 + 1]) + ((matrix[0 + 1][1 + 1] * matrix[1 + 1][2 + 1]) * matrix[2 + 1][0 + 1])) + ((matrix[0 + 1][2 + 1] * matrix[1 + 1][0 + 1]) * matrix[2 + 1][1 + 1])) - ((((matrix[0 + 1][2 + 1] * matrix[1 + 1][1 + 1]) * matrix[2 + 1][0 + 1]) + ((matrix[0 + 1][1 + 1] * matrix[1 + 1][0 + 1]) * matrix[2 + 1][2 + 1])) + ((matrix[0 + 1][0 + 1] * matrix[1 + 1][2 + 1]) * matrix[2 + 1][1 + 1])))
                                    if (det == 0) then
                                      print("This matrix has no inverse.")
                                      return {}
                                    end
                                    local cof = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}
                                    cof[0 + 1][0 + 1] = ((matrix[1 + 1][1 + 1] * matrix[2 + 1][2 + 1]) - (matrix[1 + 1][2 + 1] * matrix[2 + 1][1 + 1]))
                                    cof[0 + 1][1 + 1] = (-((matrix[1 + 1][0 + 1] * matrix[2 + 1][2 + 1]) - (matrix[1 + 1][2 + 1] * matrix[2 + 1][0 + 1])))
                                    cof[0 + 1][2 + 1] = ((matrix[1 + 1][0 + 1] * matrix[2 + 1][1 + 1]) - (matrix[1 + 1][1 + 1] * matrix[2 + 1][0 + 1]))
                                    cof[1 + 1][0 + 1] = (-((matrix[0 + 1][1 + 1] * matrix[2 + 1][2 + 1]) - (matrix[0 + 1][2 + 1] * matrix[2 + 1][1 + 1])))
                                    cof[1 + 1][1 + 1] = ((matrix[0 + 1][0 + 1] * matrix[2 + 1][2 + 1]) - (matrix[0 + 1][2 + 1] * matrix[2 + 1][0 + 1]))
                                    cof[1 + 1][2 + 1] = (-((matrix[0 + 1][0 + 1] * matrix[2 + 1][1 + 1]) - (matrix[0 + 1][1 + 1] * matrix[2 + 1][0 + 1])))
                                    cof[2 + 1][0 + 1] = ((matrix[0 + 1][1 + 1] * matrix[1 + 1][2 + 1]) - (matrix[0 + 1][2 + 1] * matrix[1 + 1][1 + 1]))
                                    cof[2 + 1][1 + 1] = (-((matrix[0 + 1][0 + 1] * matrix[1 + 1][2 + 1]) - (matrix[0 + 1][2 + 1] * matrix[1 + 1][0 + 1])))
                                    cof[2 + 1][2 + 1] = ((matrix[0 + 1][0 + 1] * matrix[1 + 1][1 + 1]) - (matrix[0 + 1][1 + 1] * matrix[1 + 1][0 + 1]))
                                    local inv = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}
                                    local i = 0
                                    while (i < 3) do
                                      local j = 0
                                      while (j < 3) do
                                        inv[i + 1][j + 1] = (cof[j + 1][i + 1] / det)
                                        j = (j + 1)
                                      end
                                      i = (i + 1)
                                    end
                                    return inv
                                  end
                                end
                                print("Please provide a matrix of size 2x2 or 3x3.")
                                return {}
                              end
                              m2 = {{2, 5}, {2, 0}}
                              print(
                              (function(v)
                              local function encode(x)
                              if type(x) == "table" then
                                if x.__name and x.__order then
                                  local parts = {x.__name, " {"}
                                  for i, k in ipairs(x.__order) do
                                    if i > 1 then parts[#parts+1] = ", " end
                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                elseif #x > 0 then
                                    local allTables = true
                                    for _, v in ipairs(x) do
                                      if type(v) ~= "table" then allTables = false break end
                                    end
                                    local parts = {}
                                    if not allTables then parts[#parts+1] = "[" end
                                    for i, val in ipairs(x) do
                                      parts[#parts+1] = encode(val)
                                      if i < #x then parts[#parts+1] = " " end
                                    end
                                    if not allTables then parts[#parts+1] = "]" end
                                    return table.concat(parts)
                                  else
                                    local keys = {}
                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                    local parts = {"{"}
                                    for i, k in ipairs(keys) do
                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                      if i < #keys then parts[#parts+1] = ", " end
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  end
                                elseif type(x) == "string" then
                                    return '"' .. x .. '"'
                                  else
                                    return tostring(x)
                                  end
                                end
                                return encode(v)
                              end)(inverse_of_matrix(m2)))
                              m3 = {{2, 5, 7}, {2, 0, 1}, {1, 2, 3}}
                              print(
                              (function(v)
                              local function encode(x)
                              if type(x) == "table" then
                                if x.__name and x.__order then
                                  local parts = {x.__name, " {"}
                                  for i, k in ipairs(x.__order) do
                                    if i > 1 then parts[#parts+1] = ", " end
                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                elseif #x > 0 then
                                    local allTables = true
                                    for _, v in ipairs(x) do
                                      if type(v) ~= "table" then allTables = false break end
                                    end
                                    local parts = {}
                                    if not allTables then parts[#parts+1] = "[" end
                                    for i, val in ipairs(x) do
                                      parts[#parts+1] = encode(val)
                                      if i < #x then parts[#parts+1] = " " end
                                    end
                                    if not allTables then parts[#parts+1] = "]" end
                                    return table.concat(parts)
                                  else
                                    local keys = {}
                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                    local parts = {"{"}
                                    for i, k in ipairs(keys) do
                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                      if i < #keys then parts[#parts+1] = ", " end
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  end
                                elseif type(x) == "string" then
                                    return '"' .. x .. '"'
                                  else
                                    return tostring(x)
                                  end
                                end
                                return encode(v)
                              end)(inverse_of_matrix(m3)))
                              local _bench_end = os.clock()
                              collectgarbage()
                              local _bench_end_mem = collectgarbage('count') * 1024
                              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                            end;
