-- Generated by Mochi v0.10.67 on 2025-08-17 14:03 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _str(v)
    if type(v) == 'number' then
      local s = tostring(v)
      s = string.gsub(s, '%.0+$', '')
      return s
    elseif type(v) == 'table' then
        local parts = {}
        for i = 1, #v do
          parts[#parts+1] = _str(v[i])
        end
        return '[' .. table.concat(parts, ', ') .. ']'
      end
      return tostring(v)
    end
    do
      collectgarbage()
      local _bench_start_mem = collectgarbage('count') * 1024
      local _bench_start = os.clock()
      function encode(row, col)
        return ((_str(row) .. ",") .. _str(col))
      end
      function is_safe(row, col, rows, cols)
        return ((((row >= 0) and (row < rows)) and (col >= 0)) and (col < cols))
      end
      function has(seen, key)
        return (seen[key] ~= nil)
      end
      function depth_first_search(row, col, seen, mat)
        local rows = _len(mat)
        local cols = _len(mat[0 + 1])
        local key = encode(row, col)
        if ((is_safe(row, col, rows, cols) and (not has(seen, key))) and (mat[row + 1][col + 1] == 1)) then
          seen[key] = true
          return ((((1 + depth_first_search((row + 1), col, seen, mat)) + depth_first_search((row - 1), col, seen, mat)) + depth_first_search(row, (col + 1), seen, mat)) + depth_first_search(row, (col - 1), seen, mat))
        else
          return 0
        end
      end
      function find_max_area(mat)
        local seen = {}
        local rows = _len(mat)
        local max_area = 0
        local r = 0
        while (r < rows) do
          local line = mat[r + 1]
          local cols = _len(line)
          local c = 0
          while (c < cols) do
            if (line[c + 1] == 1) then
              local key = encode(r, c)
              if (not (seen[key] ~= nil)) then
                local area = depth_first_search(r, c, seen, mat)
                if (area > max_area) then
                  max_area = area
                end
              end
            end
            c = (c + 1)
          end
          r = (r + 1)
        end
        return max_area
      end
      matrix = {{0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0}, {0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0}, {0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}}
      print(find_max_area(matrix))
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
