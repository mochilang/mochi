-- Generated by Mochi v0.10.64 on 2025-08-12 09:13 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function abs_int(n)
    if (n < 0) then
      return (-n)
    end
    return n
  end
  function make_matrix(row_size)
    local size = abs_int(row_size)
    if (size == 0) then
      size = 4
    end
    local mat = {}
    local y = 0
    while (y < size) do
      local row = {}
      local x = 0
      while (x < size) do
        row = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(row, ((1 + x) + (y * size)))
      x = (x + 1)
    end
    mat = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(mat, row)
  y = (y + 1)
end
return mat
end
function transpose(mat)
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(mat)
      local result = {}
      local i = 0
      while (i < n) do
        local row = {}
        local j = 0
        while (j < n) do
          row = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(row, mat[j + 1][i + 1])
        j = (j + 1)
      end
      result = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(result, row)
    i = (i + 1)
  end
  return result
end
function reverse_row(mat)
  local result = {}
  local i = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(mat) - 1)
      while (i >= 0) do
        result = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(result, mat[i + 1])
      i = (i - 1)
    end
    return result
  end
  function reverse_column(mat)
    local result = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(mat)) do
          local row = {}
          local j = ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(mat[i + 1]) - 1)
              while (j >= 0) do
                row = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(row, mat[i + 1][j + 1])
              j = (j - 1)
            end
            result = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(result, row)
          i = (i + 1)
        end
        return result
      end
      function rotate_90(mat)
        local t = transpose(mat)
        local rr = reverse_row(t)
        return rr
      end
      function rotate_180(mat)
        local rc = reverse_column(mat)
        local rr = reverse_row(rc)
        return rr
      end
      function rotate_270(mat)
        local t = transpose(mat)
        local rc = reverse_column(t)
        return rc
      end
      function row_to_string(row)
        local line = ""
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(row)) do
              if (i == 0) then
                line = _str(row[i + 1])
              else
                line = ((line .. " ") .. _str(row[i + 1]))
              end
              i = (i + 1)
            end
            return line
          end
          function print_matrix(mat)
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(mat)) do
                  print((((type(row_to_string(mat[i + 1])) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(row_to_string(mat[i + 1]))) or (row_to_string(mat[i + 1]))))
                  i = (i + 1)
                end
              end
              mat = make_matrix(4)
              print("\norigin:\n")
              print_matrix(mat)
              print("\nrotate 90 counterclockwise:\n")
              r90 = rotate_90(mat)
              print_matrix(r90)
              mat = make_matrix(4)
              print("\norigin:\n")
              print_matrix(mat)
              print("\nrotate 180:\n")
              r180 = rotate_180(mat)
              print_matrix(r180)
              mat = make_matrix(4)
              print("\norigin:\n")
              print_matrix(mat)
              print("\nrotate 270 counterclockwise:\n")
              r270 = rotate_270(mat)
              print_matrix(r270)
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
