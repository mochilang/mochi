-- Generated by Mochi v0.10.64 on 2025-08-12 09:13 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function update_area_of_max_square(row, col, rows, cols, mat, largest_square_area)
    if ((row >= rows) or (col >= cols)) then
      return 0
    end
    local right = update_area_of_max_square(row, (col + 1), rows, cols, mat, largest_square_area)
    local diagonal = update_area_of_max_square((row + 1), (col + 1), rows, cols, mat, largest_square_area)
    local down = update_area_of_max_square((row + 1), col, rows, cols, mat, largest_square_area)
    if (mat[row + 1][col + 1] == 1) then
      local sub = (1 + (function(lst)
      local m = nil
      for _, v in ipairs(lst) do
        if m == nil or v < m then
          m = v
        end
      end
      return m
    end)({right, diagonal, down}))
    if (sub > largest_square_area[0 + 1]) then
      largest_square_area[0 + 1] = sub
    end
    return sub
  else
    return 0
  end
end
function largest_square_area_in_matrix_top_down(rows, cols, mat)
  local largest = {0}
  update_area_of_max_square(0, 0, rows, cols, mat, largest)
  return largest[0 + 1]
end
function update_area_of_max_square_with_dp(row, col, rows, cols, mat, dp_array, largest_square_area)
  if ((row >= rows) or (col >= cols)) then
    return 0
  end
  if (dp_array[row + 1][col + 1] ~= (-1)) then
    return dp_array[row + 1][col + 1]
  end
  local right = update_area_of_max_square_with_dp(row, (col + 1), rows, cols, mat, dp_array, largest_square_area)
  local diagonal = update_area_of_max_square_with_dp((row + 1), (col + 1), rows, cols, mat, dp_array, largest_square_area)
  local down = update_area_of_max_square_with_dp((row + 1), col, rows, cols, mat, dp_array, largest_square_area)
  if (mat[row + 1][col + 1] == 1) then
    local sub = (1 + (function(lst)
    local m = nil
    for _, v in ipairs(lst) do
      if m == nil or v < m then
        m = v
      end
    end
    return m
  end)({right, diagonal, down}))
  if (sub > largest_square_area[0 + 1]) then
    largest_square_area[0 + 1] = sub
  end
  dp_array[row + 1][col + 1] = sub
  return sub
else
  dp_array[row + 1][col + 1] = 0
  return 0
end
end
function largest_square_area_in_matrix_top_down_with_dp(rows, cols, mat)
  local largest = {0}
  local dp_array = {}
  local r = 0
  while (r < rows) do
    local row_list = {}
    local c = 0
    while (c < cols) do
      row_list = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(row_list, (-1))
    c = (c + 1)
  end
  dp_array = (function(lst, item)
  lst = lst or {}
  table.insert(lst, item)
  return lst
end)(dp_array, row_list)
r = (r + 1)
end
update_area_of_max_square_with_dp(0, 0, rows, cols, mat, dp_array, largest)
return largest[0 + 1]
end
function largest_square_area_in_matrix_bottom_up(rows, cols, mat)
  local dp_array = {}
  local r = 0
  while (r <= rows) do
    local row_list = {}
    local c = 0
    while (c <= cols) do
      row_list = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(row_list, 0)
    c = (c + 1)
  end
  dp_array = (function(lst, item)
  lst = lst or {}
  table.insert(lst, item)
  return lst
end)(dp_array, row_list)
r = (r + 1)
end
local largest = 0
local row = (rows - 1)
while (row >= 0) do
  local col = (cols - 1)
  while (col >= 0) do
    local right = dp_array[row + 1][(col + 1) + 1]
    local diagonal = dp_array[(row + 1) + 1][(col + 1) + 1]
    local bottom = dp_array[(row + 1) + 1][col + 1]
    if (mat[row + 1][col + 1] == 1) then
      local value = (1 + (function(lst)
      local m = nil
      for _, v in ipairs(lst) do
        if m == nil or v < m then
          m = v
        end
      end
      return m
    end)({right, diagonal, bottom}))
    dp_array[row + 1][col + 1] = value
    if (value > largest) then
      largest = value
    end
  else
    dp_array[row + 1][col + 1] = 0
  end
  col = (col - 1)
end
row = (row - 1)
end
return largest
end
function largest_square_area_in_matrix_bottom_up_space_optimization(rows, cols, mat)
  local current_row = {}
  local i = 0
  while (i <= cols) do
    current_row = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(current_row, 0)
  i = (i + 1)
end
local next_row = {}
local j = 0
while (j <= cols) do
  next_row = (function(lst, item)
  lst = lst or {}
  table.insert(lst, item)
  return lst
end)(next_row, 0)
j = (j + 1)
end
local largest = 0
local row = (rows - 1)
while (row >= 0) do
  local col = (cols - 1)
  while (col >= 0) do
    local right = current_row[(col + 1) + 1]
    local diagonal = next_row[(col + 1) + 1]
    local bottom = next_row[col + 1]
    if (mat[row + 1][col + 1] == 1) then
      local value = (1 + (function(lst)
      local m = nil
      for _, v in ipairs(lst) do
        if m == nil or v < m then
          m = v
        end
      end
      return m
    end)({right, diagonal, bottom}))
    current_row[col + 1] = value
    if (value > largest) then
      largest = value
    end
  else
    current_row[col + 1] = 0
  end
  col = (col - 1)
end
next_row = current_row
current_row = {}
local t = 0
while (t <= cols) do
  current_row = (function(lst, item)
  lst = lst or {}
  table.insert(lst, item)
  return lst
end)(current_row, 0)
t = (t + 1)
end
row = (row - 1)
end
return largest
end
sample = {{1, 1}, {1, 1}}
print(largest_square_area_in_matrix_top_down(2, 2, sample))
print(largest_square_area_in_matrix_top_down_with_dp(2, 2, sample))
print(largest_square_area_in_matrix_bottom_up(2, 2, sample))
print(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, sample))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
