-- Generated by Mochi v0.10.64 on 2025-08-12 13:49 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
-- ensure panic messages are newline-terminated for readability
io.stderr:write(tostring(msg) .. '\n')
io.stderr:flush()
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
local len = #lst
if s < 0 then s = len + s end
if s < 0 then s = 0 end
if e == nil then
  e = len
elseif e < 0 then
    e = len + e
  end
  if e > len then e = len end
  if s > e then return {} end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function is_alnum(ch)
    return ((((ch >= "0") and (ch <= "9")) or ((ch >= "A") and (ch <= "Z"))) or ((ch >= "a") and (ch <= "z")))
  end
  function to_int(token)
    local res = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(token)) do
          res = ((res * 10) + math.floor(tonumber(_substring(token, i, (i + 1))) or 0))
          i = (i + 1)
        end
        return res
      end
      function split(s, sep)
        local res = {}
        local current = ""
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s)) do
              local ch = _substring(s, i, (i + 1))
              if (ch == sep) then
                res = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(res, current)
              current = ""
            else
              current = (current .. ch)
            end
            i = (i + 1)
          end
          res = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(res, current)
        return res
      end
      function parse_moves(input_str)
        local _pairs = split(input_str, ",")
        local moves = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(_pairs)) do
              local pair = _pairs[i + 1]
              local numbers = {}
              local num = ""
              local j = 0
              while (j < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(pair)) do
                    local ch = _substring(pair, j, (j + 1))
                    if (ch == " ") then
                      if (num ~= "") then
                        numbers = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(numbers, num)
                      num = ""
                    end
                  else
                    num = (num .. ch)
                  end
                  j = (j + 1)
                end
                if (num ~= "") then
                  numbers = (function(lst, item)
                  lst = lst or {}
                  table.insert(lst, item)
                  return lst
                end)(numbers, num)
              end
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(numbers) ~= 2) then
                    _panic("Each move must have exactly two numbers.")
                  end
                  local x = to_int(numbers[0 + 1])
                  local y = to_int(numbers[1 + 1])
                  moves = (function(lst, item)
                  lst = lst or {}
                  table.insert(lst, item)
                  return lst
                end)(moves, {x = x, y = y})
                i = (i + 1)
              end
              return moves
            end
            function validate_matrix_size(size)
              if (size <= 0) then
                _panic("Matrix size must be a positive integer.")
              end
            end
            function validate_matrix_content(matrix, size)
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(matrix) ~= size) then
                    _panic("The matrix dont match with size.")
                  end
                  local i = 0
                  while (i < size) do
                    local row = matrix[i + 1]
                    if ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(row) ~= size) then
                          _panic((("Each row in the matrix must have exactly " .. _str(size)) .. " characters."))
                        end
                        local j = 0
                        while (j < size) do
                          local ch = _substring(row, j, (j + 1))
                          if (not is_alnum(ch)) then
                            _panic("Matrix rows can only contain letters and numbers.")
                          end
                          j = (j + 1)
                        end
                        i = (i + 1)
                      end
                    end
                    function validate_moves(moves, size)
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(moves)) do
                            local mv = moves[i + 1]
                            if ((((mv.x < 0) or (mv.x >= size)) or (mv.y < 0)) or (mv.y >= size)) then
                              _panic("Move is out of bounds for a matrix.")
                            end
                            i = (i + 1)
                          end
                        end
                        function contains(pos, r, c)
                          local i = 0
                          while (i < (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(pos)) do
                                local p = pos[i + 1]
                                if ((p.x == r) and (p.y == c)) then
                                  return true
                                end
                                i = (i + 1)
                              end
                              return false
                            end
                            function find_repeat(matrix_g, row, column, size)
                              column = ((size - 1) - column)
                              local visited = {}
                              local repeated = {}
                              local color = matrix_g[column + 1][row + 1]
                              if (color == "-") then
                                return repeated
                              end
                              local stack = {{x = column, y = row}}
                              while ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(stack) > 0) do
                                    local idx = ((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(stack) - 1)
                                        local pos = stack[idx + 1]
                                        stack = (function(lst,s,e)
                                        local r={}
                                        for i=s+1,e do
                                          r[#r+1]=lst[i]
                                        end
                                        return r
                                      end)(stack, 0, idx)
                                      if ((((pos.x < 0) or (pos.x >= size)) or (pos.y < 0)) or (pos.y >= size)) then
                                        goto __cont_1
                                      end
                                      if contains(visited, pos.x, pos.y) then
                                        goto __cont_1
                                      end
                                      visited = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(visited, pos)
                                    if (matrix_g[pos.x + 1][pos.y + 1] == color) then
                                      repeated = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(repeated, pos)
                                    stack = (function(lst, item)
                                    lst = lst or {}
                                    table.insert(lst, item)
                                    return lst
                                  end)(stack, {x = (pos.x - 1), y = pos.y})
                                  stack = (function(lst, item)
                                  lst = lst or {}
                                  table.insert(lst, item)
                                  return lst
                                end)(stack, {x = (pos.x + 1), y = pos.y})
                                stack = (function(lst, item)
                                lst = lst or {}
                                table.insert(lst, item)
                                return lst
                              end)(stack, {x = pos.x, y = (pos.y - 1)})
                              stack = (function(lst, item)
                              lst = lst or {}
                              table.insert(lst, item)
                              return lst
                            end)(stack, {x = pos.x, y = (pos.y + 1)})
                          end
                          ::__cont_1::
                        end
                        return repeated
                      end
                      function increment_score(count)
                        return ((count * (count + 1)) // 2)
                      end
                      function move_x(matrix_g, column, size)
                        local new_list = {}
                        local row = 0
                        while (row < size) do
                          local val = matrix_g[row + 1][column + 1]
                          if (val ~= "-") then
                            new_list = (function(lst, item)
                            lst = lst or {}
                            table.insert(lst, item)
                            return lst
                          end)(new_list, val)
                        else
                          new_list = (function(a, b)
                          local res = {table.unpack(a or {})}
                          for _, v in ipairs(b or {}) do
                            res[#res+1] = v
                          end
                          return res
                        end)({val}, new_list)
                      end
                      row = (row + 1)
                    end
                    row = 0
                    while (row < size) do
                      matrix_g[row + 1][column + 1] = new_list[row + 1]
                      row = (row + 1)
                    end
                    return matrix_g
                  end
                  function move_y(matrix_g, size)
                    local empty_cols = {}
                    local column = (size - 1)
                    while (column >= 0) do
                      local row = 0
                      local all_empty = true
                      while (row < size) do
                        if (matrix_g[row + 1][column + 1] ~= "-") then
                          all_empty = false
                          break
                        end
                        row = (row + 1)
                      end
                      if all_empty then
                        empty_cols = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(empty_cols, column)
                    end
                    column = (column - 1)
                  end
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(empty_cols)) do
                        local col = empty_cols[i + 1]
                        local c = (col + 1)
                        while (c < size) do
                          local r = 0
                          while (r < size) do
                            matrix_g[r + 1][(c - 1) + 1] = matrix_g[r + 1][c + 1]
                            r = (r + 1)
                          end
                          c = (c + 1)
                        end
                        local r = 0
                        while (r < size) do
                          matrix_g[r + 1][(size - 1) + 1] = "-"
                          r = (r + 1)
                        end
                        i = (i + 1)
                      end
                      return matrix_g
                    end
                    function play(matrix_g, pos_x, pos_y, size)
                      local same_colors = find_repeat(matrix_g, pos_x, pos_y, size)
                      if ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(same_colors) ~= 0) then
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(same_colors)) do
                                  local p = same_colors[i + 1]
                                  matrix_g[p.x + 1][p.y + 1] = "-"
                                  i = (i + 1)
                                end
                                local column = 0
                                while (column < size) do
                                  matrix_g = move_x(matrix_g, column, size)
                                  column = (column + 1)
                                end
                                matrix_g = move_y(matrix_g, size)
                              end
                              local sc = increment_score((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(same_colors))
                                  return {matrix = matrix_g, score = sc}
                                end
                                function build_matrix(matrix)
                                  local res = {}
                                  local i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(matrix)) do
                                        local row = matrix[i + 1]
                                        local row_list = {}
                                        local j = 0
                                        while (j < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(row)) do
                                              row_list = (function(lst, item)
                                              lst = lst or {}
                                              table.insert(lst, item)
                                              return lst
                                            end)(row_list, _substring(row, j, (j + 1)))
                                            j = (j + 1)
                                          end
                                          res = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(res, row_list)
                                        i = (i + 1)
                                      end
                                      return res
                                    end
                                    function process_game(size, matrix, moves)
                                      local game_matrix = build_matrix(matrix)
                                      local total = 0
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(moves)) do
                                            local mv = moves[i + 1]
                                            local res = play(game_matrix, mv.x, mv.y, size)
                                            game_matrix = res.matrix
                                            total = (total + res.score)
                                            i = (i + 1)
                                          end
                                          return total
                                        end
                                        function main()
                                          local size = 4
                                          local matrix = {"RRBG", "RBBG", "YYGG", "XYGG"}
                                          local moves = parse_moves("0 1,1 1")
                                          validate_matrix_size(size)
                                          validate_matrix_content(matrix, size)
                                          validate_moves(moves, size)
                                          local score = process_game(size, matrix, moves)
                                          print((((type(_str(score)) == "table")) and (
                                          (function(v)
                                          local function encode(x)
                                          if type(x) == "table" then
                                            if x.__name and x.__order then
                                              local parts = {x.__name, " {"}
                                              for i, k in ipairs(x.__order) do
                                                if i > 1 then parts[#parts+1] = ", " end
                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            elseif #x > 0 then
                                                local allTables = true
                                                for _, v in ipairs(x) do
                                                  if type(v) ~= "table" then allTables = false break end
                                                end
                                                local parts = {}
                                                if not allTables then parts[#parts+1] = "[" end
                                                for i, val in ipairs(x) do
                                                  parts[#parts+1] = encode(val)
                                                  if i < #x then parts[#parts+1] = " " end
                                                end
                                                if not allTables then parts[#parts+1] = "]" end
                                                return table.concat(parts)
                                              else
                                                local keys = {}
                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                local parts = {"{"}
                                                for i, k in ipairs(keys) do
                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                  if i < #keys then parts[#parts+1] = ", " end
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              end
                                            elseif type(x) == "string" then
                                                return '"' .. x .. '"'
                                              else
                                                return tostring(x)
                                              end
                                            end
                                            return encode(v)
                                          end)(_str(score))) or (_str(score))))
                                        end
                                        main()
                                        local _bench_end = os.clock()
                                        collectgarbage()
                                        local _bench_end_mem = collectgarbage('count') * 1024
                                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                      end;
