-- Generated by Mochi v0.10.64 on 2025-08-12 13:49 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function slice(lst, s, e)
local len = #lst
if s < 0 then s = len + s end
if s < 0 then s = 0 end
if e == nil then
  e = len
elseif e < 0 then
    e = len + e
  end
  if e > len then e = len end
  if s > e then return {} end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function generate_large_matrix()
    local result = {}
    local i = 0
    while (i < 1000) do
      local row = {}
      local j = (1000 - i)
      while (j > ((-1000) - i)) do
        row = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(row, j)
      j = (j - 1)
    end
    result = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(result, row)
  i = (i + 1)
end
return result
end
function find_negative_index(arr)
  local left = 0
  local right = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr) - 1)
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(arr) == 0) then
            return 0
          end
          if (arr[0 + 1] < 0) then
            return 0
          end
          while (left <= right) do
            local mid = ((left + right) // 2)
            local num = arr[mid + 1]
            if (num < 0) then
              if (mid == 0) then
                return 0
              end
              if (arr[(mid - 1) + 1] >= 0) then
                return mid
              end
              right = (mid - 1)
            else
              left = (mid + 1)
            end
          end
          return (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(arr)
            end
            function count_negatives_binary_search(grid)
              local total = 0
              local bound = (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(grid[0 + 1])
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(grid)) do
                        local row = grid[i + 1]
                        local idx = find_negative_index(slice(row, 0, bound))
                        bound = idx
                        total = (total + idx)
                        i = (i + 1)
                      end
                      return (((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(grid) * (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(grid[0 + 1])) - total)
                            end
                            function count_negatives_brute_force(grid)
                              local count = 0
                              local i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(grid)) do
                                    local row = grid[i + 1]
                                    local j = 0
                                    while (j < (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(row)) do
                                          if (row[j + 1] < 0) then
                                            count = (count + 1)
                                          end
                                          j = (j + 1)
                                        end
                                        i = (i + 1)
                                      end
                                      return count
                                    end
                                    function count_negatives_brute_force_with_break(grid)
                                      local total = 0
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(grid)) do
                                            local row = grid[i + 1]
                                            local j = 0
                                            while (j < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(row)) do
                                                  local number = row[j + 1]
                                                  if (number < 0) then
                                                    total = (total + ((function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(row) - j))
                                                        break
                                                      end
                                                      j = (j + 1)
                                                    end
                                                    i = (i + 1)
                                                  end
                                                  return total
                                                end
                                                grid = generate_large_matrix()
                                                test_grids = {{{4, 3, 2, (-1)}, {3, 2, 1, (-1)}, {1, 1, (-1), (-2)}, {(-1), (-1), (-2), (-3)}}, {{3, 2}, {1, 0}}, {{7, 7, 6}}, {{7, 7, 6}, {(-1), (-2), (-3)}}, grid}
                                                results_bin = {}
                                                i = 0
                                                while (i < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(test_grids)) do
                                                      results_bin = (function(lst, item)
                                                      lst = lst or {}
                                                      table.insert(lst, item)
                                                      return lst
                                                    end)(results_bin, count_negatives_binary_search(test_grids[i + 1]))
                                                    i = (i + 1)
                                                  end
                                                  print((((type(
                                                  (function(v)
                                                  local function encode(x)
                                                  if type(x) == "table" then
                                                    if x.__name and x.__order then
                                                      local parts = {x.__name, " {"}
                                                      for i, k in ipairs(x.__order) do
                                                        if i > 1 then parts[#parts+1] = ", " end
                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    elseif #x > 0 then
                                                        local allTables = true
                                                        for _, v in ipairs(x) do
                                                          if type(v) ~= "table" then allTables = false break end
                                                        end
                                                        local parts = {}
                                                        if not allTables then parts[#parts+1] = "[" end
                                                        for i, val in ipairs(x) do
                                                          parts[#parts+1] = encode(val)
                                                          if i < #x then parts[#parts+1] = " " end
                                                        end
                                                        if not allTables then parts[#parts+1] = "]" end
                                                        return table.concat(parts)
                                                      else
                                                        local keys = {}
                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                        local parts = {"{"}
                                                        for i, k in ipairs(keys) do
                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                          if i < #keys then parts[#parts+1] = ", " end
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      end
                                                    elseif type(x) == "string" then
                                                        return '"' .. x .. '"'
                                                      else
                                                        return tostring(x)
                                                      end
                                                    end
                                                    return encode(v)
                                                  end)(results_bin)) == "table")) and (
                                                  (function(v)
                                                  local function encode(x)
                                                  if type(x) == "table" then
                                                    if x.__name and x.__order then
                                                      local parts = {x.__name, " {"}
                                                      for i, k in ipairs(x.__order) do
                                                        if i > 1 then parts[#parts+1] = ", " end
                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    elseif #x > 0 then
                                                        local allTables = true
                                                        for _, v in ipairs(x) do
                                                          if type(v) ~= "table" then allTables = false break end
                                                        end
                                                        local parts = {}
                                                        if not allTables then parts[#parts+1] = "[" end
                                                        for i, val in ipairs(x) do
                                                          parts[#parts+1] = encode(val)
                                                          if i < #x then parts[#parts+1] = " " end
                                                        end
                                                        if not allTables then parts[#parts+1] = "]" end
                                                        return table.concat(parts)
                                                      else
                                                        local keys = {}
                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                        local parts = {"{"}
                                                        for i, k in ipairs(keys) do
                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                          if i < #keys then parts[#parts+1] = ", " end
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      end
                                                    elseif type(x) == "string" then
                                                        return '"' .. x .. '"'
                                                      else
                                                        return tostring(x)
                                                      end
                                                    end
                                                    return encode(v)
                                                  end)(
                                                  (function(v)
                                                  local function encode(x)
                                                  if type(x) == "table" then
                                                    if x.__name and x.__order then
                                                      local parts = {x.__name, " {"}
                                                      for i, k in ipairs(x.__order) do
                                                        if i > 1 then parts[#parts+1] = ", " end
                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    elseif #x > 0 then
                                                        local allTables = true
                                                        for _, v in ipairs(x) do
                                                          if type(v) ~= "table" then allTables = false break end
                                                        end
                                                        local parts = {}
                                                        if not allTables then parts[#parts+1] = "[" end
                                                        for i, val in ipairs(x) do
                                                          parts[#parts+1] = encode(val)
                                                          if i < #x then parts[#parts+1] = " " end
                                                        end
                                                        if not allTables then parts[#parts+1] = "]" end
                                                        return table.concat(parts)
                                                      else
                                                        local keys = {}
                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                        local parts = {"{"}
                                                        for i, k in ipairs(keys) do
                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                          if i < #keys then parts[#parts+1] = ", " end
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      end
                                                    elseif type(x) == "string" then
                                                        return '"' .. x .. '"'
                                                      else
                                                        return tostring(x)
                                                      end
                                                    end
                                                    return encode(v)
                                                  end)(results_bin))) or (
                                                  (function(v)
                                                  local function encode(x)
                                                  if type(x) == "table" then
                                                    if x.__name and x.__order then
                                                      local parts = {x.__name, " {"}
                                                      for i, k in ipairs(x.__order) do
                                                        if i > 1 then parts[#parts+1] = ", " end
                                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    elseif #x > 0 then
                                                        local allTables = true
                                                        for _, v in ipairs(x) do
                                                          if type(v) ~= "table" then allTables = false break end
                                                        end
                                                        local parts = {}
                                                        if not allTables then parts[#parts+1] = "[" end
                                                        for i, val in ipairs(x) do
                                                          parts[#parts+1] = encode(val)
                                                          if i < #x then parts[#parts+1] = " " end
                                                        end
                                                        if not allTables then parts[#parts+1] = "]" end
                                                        return table.concat(parts)
                                                      else
                                                        local keys = {}
                                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                        local parts = {"{"}
                                                        for i, k in ipairs(keys) do
                                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                          if i < #keys then parts[#parts+1] = ", " end
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      end
                                                    elseif type(x) == "string" then
                                                        return '"' .. x .. '"'
                                                      else
                                                        return tostring(x)
                                                      end
                                                    end
                                                    return encode(v)
                                                  end)(results_bin))))
                                                  results_brute = {}
                                                  i = 0
                                                  while (i < (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(test_grids)) do
                                                        results_brute = (function(lst, item)
                                                        lst = lst or {}
                                                        table.insert(lst, item)
                                                        return lst
                                                      end)(results_brute, count_negatives_brute_force(test_grids[i + 1]))
                                                      i = (i + 1)
                                                    end
                                                    print((((type(
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(results_brute)) == "table")) and (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(results_brute))) or (
                                                    (function(v)
                                                    local function encode(x)
                                                    if type(x) == "table" then
                                                      if x.__name and x.__order then
                                                        local parts = {x.__name, " {"}
                                                        for i, k in ipairs(x.__order) do
                                                          if i > 1 then parts[#parts+1] = ", " end
                                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                                        end
                                                        parts[#parts+1] = "}"
                                                        return table.concat(parts)
                                                      elseif #x > 0 then
                                                          local allTables = true
                                                          for _, v in ipairs(x) do
                                                            if type(v) ~= "table" then allTables = false break end
                                                          end
                                                          local parts = {}
                                                          if not allTables then parts[#parts+1] = "[" end
                                                          for i, val in ipairs(x) do
                                                            parts[#parts+1] = encode(val)
                                                            if i < #x then parts[#parts+1] = " " end
                                                          end
                                                          if not allTables then parts[#parts+1] = "]" end
                                                          return table.concat(parts)
                                                        else
                                                          local keys = {}
                                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                          local parts = {"{"}
                                                          for i, k in ipairs(keys) do
                                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                            if i < #keys then parts[#parts+1] = ", " end
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        end
                                                      elseif type(x) == "string" then
                                                          return '"' .. x .. '"'
                                                        else
                                                          return tostring(x)
                                                        end
                                                      end
                                                      return encode(v)
                                                    end)(results_brute))))
                                                    results_break = {}
                                                    i = 0
                                                    while (i < (function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(test_grids)) do
                                                          results_break = (function(lst, item)
                                                          lst = lst or {}
                                                          table.insert(lst, item)
                                                          return lst
                                                        end)(results_break, count_negatives_brute_force_with_break(test_grids[i + 1]))
                                                        i = (i + 1)
                                                      end
                                                      print((((type(
                                                      (function(v)
                                                      local function encode(x)
                                                      if type(x) == "table" then
                                                        if x.__name and x.__order then
                                                          local parts = {x.__name, " {"}
                                                          for i, k in ipairs(x.__order) do
                                                            if i > 1 then parts[#parts+1] = ", " end
                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        elseif #x > 0 then
                                                            local allTables = true
                                                            for _, v in ipairs(x) do
                                                              if type(v) ~= "table" then allTables = false break end
                                                            end
                                                            local parts = {}
                                                            if not allTables then parts[#parts+1] = "[" end
                                                            for i, val in ipairs(x) do
                                                              parts[#parts+1] = encode(val)
                                                              if i < #x then parts[#parts+1] = " " end
                                                            end
                                                            if not allTables then parts[#parts+1] = "]" end
                                                            return table.concat(parts)
                                                          else
                                                            local keys = {}
                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                            local parts = {"{"}
                                                            for i, k in ipairs(keys) do
                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                              if i < #keys then parts[#parts+1] = ", " end
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          end
                                                        elseif type(x) == "string" then
                                                            return '"' .. x .. '"'
                                                          else
                                                            return tostring(x)
                                                          end
                                                        end
                                                        return encode(v)
                                                      end)(results_break)) == "table")) and (
                                                      (function(v)
                                                      local function encode(x)
                                                      if type(x) == "table" then
                                                        if x.__name and x.__order then
                                                          local parts = {x.__name, " {"}
                                                          for i, k in ipairs(x.__order) do
                                                            if i > 1 then parts[#parts+1] = ", " end
                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        elseif #x > 0 then
                                                            local allTables = true
                                                            for _, v in ipairs(x) do
                                                              if type(v) ~= "table" then allTables = false break end
                                                            end
                                                            local parts = {}
                                                            if not allTables then parts[#parts+1] = "[" end
                                                            for i, val in ipairs(x) do
                                                              parts[#parts+1] = encode(val)
                                                              if i < #x then parts[#parts+1] = " " end
                                                            end
                                                            if not allTables then parts[#parts+1] = "]" end
                                                            return table.concat(parts)
                                                          else
                                                            local keys = {}
                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                            local parts = {"{"}
                                                            for i, k in ipairs(keys) do
                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                              if i < #keys then parts[#parts+1] = ", " end
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          end
                                                        elseif type(x) == "string" then
                                                            return '"' .. x .. '"'
                                                          else
                                                            return tostring(x)
                                                          end
                                                        end
                                                        return encode(v)
                                                      end)(
                                                      (function(v)
                                                      local function encode(x)
                                                      if type(x) == "table" then
                                                        if x.__name and x.__order then
                                                          local parts = {x.__name, " {"}
                                                          for i, k in ipairs(x.__order) do
                                                            if i > 1 then parts[#parts+1] = ", " end
                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        elseif #x > 0 then
                                                            local allTables = true
                                                            for _, v in ipairs(x) do
                                                              if type(v) ~= "table" then allTables = false break end
                                                            end
                                                            local parts = {}
                                                            if not allTables then parts[#parts+1] = "[" end
                                                            for i, val in ipairs(x) do
                                                              parts[#parts+1] = encode(val)
                                                              if i < #x then parts[#parts+1] = " " end
                                                            end
                                                            if not allTables then parts[#parts+1] = "]" end
                                                            return table.concat(parts)
                                                          else
                                                            local keys = {}
                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                            local parts = {"{"}
                                                            for i, k in ipairs(keys) do
                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                              if i < #keys then parts[#parts+1] = ", " end
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          end
                                                        elseif type(x) == "string" then
                                                            return '"' .. x .. '"'
                                                          else
                                                            return tostring(x)
                                                          end
                                                        end
                                                        return encode(v)
                                                      end)(results_break))) or (
                                                      (function(v)
                                                      local function encode(x)
                                                      if type(x) == "table" then
                                                        if x.__name and x.__order then
                                                          local parts = {x.__name, " {"}
                                                          for i, k in ipairs(x.__order) do
                                                            if i > 1 then parts[#parts+1] = ", " end
                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                          end
                                                          parts[#parts+1] = "}"
                                                          return table.concat(parts)
                                                        elseif #x > 0 then
                                                            local allTables = true
                                                            for _, v in ipairs(x) do
                                                              if type(v) ~= "table" then allTables = false break end
                                                            end
                                                            local parts = {}
                                                            if not allTables then parts[#parts+1] = "[" end
                                                            for i, val in ipairs(x) do
                                                              parts[#parts+1] = encode(val)
                                                              if i < #x then parts[#parts+1] = " " end
                                                            end
                                                            if not allTables then parts[#parts+1] = "]" end
                                                            return table.concat(parts)
                                                          else
                                                            local keys = {}
                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                            local parts = {"{"}
                                                            for i, k in ipairs(keys) do
                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                              if i < #keys then parts[#parts+1] = ", " end
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          end
                                                        elseif type(x) == "string" then
                                                            return '"' .. x .. '"'
                                                          else
                                                            return tostring(x)
                                                          end
                                                        end
                                                        return encode(v)
                                                      end)(results_break))))
                                                      local _bench_end = os.clock()
                                                      collectgarbage()
                                                      local _bench_end_mem = collectgarbage('count') * 1024
                                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                    end;
