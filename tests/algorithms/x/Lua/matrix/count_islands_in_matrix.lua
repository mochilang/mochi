-- Generated by Mochi v0.10.67 on 2025-08-17 08:49 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    do
      collectgarbage()
      local _bench_start_mem = collectgarbage('count') * 1024
      local _bench_start = os.clock()
      function is_safe(grid, visited, row, col)
        local rows = _len(grid)
        local cols = _len(grid[0 + 1])
        local within_bounds = ((((row >= 0) and (row < rows)) and (col >= 0)) and (col < cols))
        if (not within_bounds) then
          return false
        end
        local visited_cell = visited[row + 1][col + 1]
        local not_visited = (visited_cell == false)
        return (not_visited and (grid[row + 1][col + 1] == 1))
      end
      function dfs(grid, visited, row, col)
        local row_nbr = {(-1), (-1), (-1), 0, 0, 1, 1, 1}
        local col_nbr = {(-1), 0, 1, (-1), 1, (-1), 0, 1}
        visited[row + 1][col + 1] = true
        local k = 0
        while (k < 8) do
          local new_row = (row + row_nbr[k + 1])
          local new_col = (col + col_nbr[k + 1])
          if is_safe(grid, visited, new_row, new_col) then
            dfs(grid, visited, new_row, new_col)
          end
          k = (k + 1)
        end
      end
      function count_islands(grid)
        local rows = _len(grid)
        local cols = _len(grid[0 + 1])
        local visited = {}
        local i = 0
        while (i < rows) do
          local row_list = {}
          local j = 0
          while (j < cols) do
            row_list = (function(lst, item)
            local res = {table.unpack(lst or {})}
            res[#res+1] = item
            return res
          end)(row_list, false)
          j = (j + 1)
        end
        visited = (function(lst, item)
        local res = {table.unpack(lst or {})}
        res[#res+1] = item
        return res
      end)(visited, row_list)
      i = (i + 1)
    end
    local count = 0
    i = 0
    while (i < rows) do
      local j = 0
      while (j < cols) do
        if ((not visited[i + 1][j + 1]) and (grid[i + 1][j + 1] == 1)) then
          dfs(grid, visited, i, j)
          count = (count + 1)
        end
        j = (j + 1)
      end
      i = (i + 1)
    end
    return count
  end
  grid = {{1, 1, 0, 0, 0}, {0, 1, 0, 0, 1}, {1, 0, 0, 1, 1}, {0, 0, 0, 0, 0}, {1, 0, 1, 0, 1}}
  print(count_islands(grid))
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
