-- Generated by Mochi v0.10.59 on 2025-08-07 11:58 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function apply_table(inp, _table)
    local res = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(_table)) do
          local idx = (_table[i + 1] - 1)
          if (idx < 0) then
            idx = ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(inp) - 1)
              end
              res = (res .. string.sub(inp, (idx + 1), (idx + 1)))
              i = (i + 1)
            end
            return res
          end
          function left_shift(data)
            return (string.sub(data, (1 + 1), (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(data)) .. string.sub(data, (0 + 1), 1))
              end
              function xor(a, b)
                local res = ""
                local i = 0
                while ((i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(a)) and (i < (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(b))) do
                          if (string.sub(a, (i + 1), (i + 1)) == string.sub(b, (i + 1), (i + 1))) then
                            res = (res .. "0")
                          else
                            res = (res .. "1")
                          end
                          i = (i + 1)
                        end
                        return res
                      end
                      function int_to_binary(n)
                        if (n == 0) then
                          return "0"
                        end
                        local res = ""
                        local num = n
                        while (num > 0) do
                          res = (_str((num % 2)) .. res)
                          num = (num // 2)
                        end
                        return res
                      end
                      function pad_left(s, width)
                        local res = s
                        while ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(res) < width) do
                              res = ("0" .. res)
                            end
                            return res
                          end
                          function bin_to_int(s)
                            local result = 0
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(s)) do
                                  local digit = math.floor(tonumber(string.sub(s, (i + 1), (i + 1))) or 0)
                                  result = ((result * 2) + digit)
                                  i = (i + 1)
                                end
                                return result
                              end
                              function apply_sbox(s, data)
                                local row_bits = (string.sub(data, (0 + 1), 1) .. string.sub(data, (((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(data) - 1) + 1), (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(data)))
                                        local col_bits = string.sub(data, (1 + 1), 3)
                                        local row = bin_to_int(row_bits)
                                        local col = bin_to_int(col_bits)
                                        local val = s[row + 1][col + 1]
                                        local out = int_to_binary(val)
                                        return out
                                      end
                                      function f(expansion, s0, s1, key, message)
                                        local left = string.sub(message, (0 + 1), 4)
                                        local right = string.sub(message, (4 + 1), 8)
                                        local temp = apply_table(right, expansion)
                                        temp = xor(temp, key)
                                        local left_bin_str = apply_sbox(s0, string.sub(temp, (0 + 1), 4))
                                        local right_bin_str = apply_sbox(s1, string.sub(temp, (4 + 1), 8))
                                        left_bin_str = pad_left(left_bin_str, 2)
                                        right_bin_str = pad_left(right_bin_str, 2)
                                        temp = apply_table((left_bin_str .. right_bin_str), p4_table)
                                        temp = xor(left, temp)
                                        return (temp .. right)
                                      end
                                      p4_table = {2, 4, 3, 1}
                                      key = "1010000010"
                                      message = "11010111"
                                      p8_table = {6, 3, 7, 4, 8, 5, 10, 9}
                                      p10_table = {3, 5, 2, 7, 4, 10, 1, 9, 8, 6}
                                      IP = {2, 6, 3, 1, 4, 8, 5, 7}
                                      IP_inv = {4, 1, 3, 5, 7, 2, 8, 6}
                                      expansion = {4, 1, 2, 3, 2, 3, 4, 1}
                                      s0 = {{1, 0, 3, 2}, {3, 2, 1, 0}, {0, 2, 1, 3}, {3, 1, 3, 2}}
                                      s1 = {{0, 1, 2, 3}, {2, 0, 1, 3}, {3, 0, 1, 0}, {2, 1, 0, 3}}
                                      temp = apply_table(key, p10_table)
                                      left = string.sub(temp, (0 + 1), 5)
                                      right = string.sub(temp, (5 + 1), 10)
                                      left = left_shift(left)
                                      right = left_shift(right)
                                      key1 = apply_table((left .. right), p8_table)
                                      left = left_shift(left)
                                      right = left_shift(right)
                                      left = left_shift(left)
                                      right = left_shift(right)
                                      key2 = apply_table((left .. right), p8_table)
                                      temp = apply_table(message, IP)
                                      temp = f(expansion, s0, s1, key1, temp)
                                      temp = (string.sub(temp, (4 + 1), 8) .. string.sub(temp, (0 + 1), 4))
                                      temp = f(expansion, s0, s1, key2, temp)
                                      CT = apply_table(temp, IP_inv)
                                      print((((type(("Cipher text is: " .. CT)) == "table")) and (
                                      (function(v)
                                      local function encode(x)
                                      if type(x) == "table" then
                                        if x.__name and x.__order then
                                          local parts = {x.__name, " {"}
                                          for i, k in ipairs(x.__order) do
                                            if i > 1 then parts[#parts+1] = ", " end
                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        elseif #x > 0 then
                                            local allTables = true
                                            for _, v in ipairs(x) do
                                              if type(v) ~= "table" then allTables = false break end
                                            end
                                            local parts = {}
                                            if not allTables then parts[#parts+1] = "[" end
                                            for i, val in ipairs(x) do
                                              parts[#parts+1] = encode(val)
                                              if i < #x then parts[#parts+1] = " " end
                                            end
                                            if not allTables then parts[#parts+1] = "]" end
                                            return table.concat(parts)
                                          else
                                            local keys = {}
                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                            local parts = {"{"}
                                            for i, k in ipairs(keys) do
                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                              if i < #keys then parts[#parts+1] = ", " end
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(("Cipher text is: " .. CT))) or (("Cipher text is: " .. CT))))
                                      temp = apply_table(CT, IP)
                                      temp = f(expansion, s0, s1, key2, temp)
                                      temp = (string.sub(temp, (4 + 1), 8) .. string.sub(temp, (0 + 1), 4))
                                      temp = f(expansion, s0, s1, key1, temp)
                                      PT = apply_table(temp, IP_inv)
                                      print((((type(("Plain text after decypting is: " .. PT)) == "table")) and (
                                      (function(v)
                                      local function encode(x)
                                      if type(x) == "table" then
                                        if x.__name and x.__order then
                                          local parts = {x.__name, " {"}
                                          for i, k in ipairs(x.__order) do
                                            if i > 1 then parts[#parts+1] = ", " end
                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        elseif #x > 0 then
                                            local allTables = true
                                            for _, v in ipairs(x) do
                                              if type(v) ~= "table" then allTables = false break end
                                            end
                                            local parts = {}
                                            if not allTables then parts[#parts+1] = "[" end
                                            for i, val in ipairs(x) do
                                              parts[#parts+1] = encode(val)
                                              if i < #x then parts[#parts+1] = " " end
                                            end
                                            if not allTables then parts[#parts+1] = "]" end
                                            return table.concat(parts)
                                          else
                                            local keys = {}
                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                            local parts = {"{"}
                                            for i, k in ipairs(keys) do
                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                              if i < #keys then parts[#parts+1] = ", " end
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          end
                                        elseif type(x) == "string" then
                                            return '"' .. x .. '"'
                                          else
                                            return tostring(x)
                                          end
                                        end
                                        return encode(v)
                                      end)(("Plain text after decypting is: " .. PT))) or (("Plain text after decypting is: " .. PT))))
                                      local _bench_end = os.clock()
                                      collectgarbage()
                                      local _bench_end_mem = collectgarbage('count') * 1024
                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                    end;
