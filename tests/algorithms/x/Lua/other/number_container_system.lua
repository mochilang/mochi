-- Generated by Mochi v0.10.59 on 2025-08-07 11:58 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function remove_at(xs, idx)
    local res = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (i ~= idx) then
            res = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(res, xs[i + 1])
        end
        i = (i + 1)
      end
      return res
    end
    function insert_at(xs, idx, val)
      local res = {}
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(xs)) do
            if (i == idx) then
              res = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(res, val)
          end
          res = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(res, xs[i + 1])
        i = (i + 1)
      end
      if (idx == (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(xs)) then
            res = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(res, val)
        end
        return res
      end
      function binary_search_delete(array, item)
        local low = 0
        local high = ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(array) - 1)
            local arr = array
            while (low <= high) do
              local mid = ((low + high) // 2)
              if (arr[mid + 1] == item) then
                arr = remove_at(arr, mid)
                return arr
              else
                if (arr[mid + 1] < item) then
                  low = (mid + 1)
                else
                  high = (mid - 1)
                end
              end
            end
            print("ValueError: Either the item is not in the array or the array was unsorted")
            return arr
          end
          function binary_search_insert(array, index)
            local low = 0
            local high = ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(array) - 1)
                local arr = array
                while (low <= high) do
                  local mid = ((low + high) // 2)
                  if (arr[mid + 1] == index) then
                    arr = insert_at(arr, (mid + 1), index)
                    return arr
                  else
                    if (arr[mid + 1] < index) then
                      low = (mid + 1)
                    else
                      high = (mid - 1)
                    end
                  end
                end
                arr = insert_at(arr, low, index)
                return arr
              end
              function change(cont, idx, num)
                local numbermap = cont.numbermap
                local indexmap = cont.indexmap
                if (indexmap[idx] ~= nil) then
                  local old = indexmap[idx + 1]
                  local indexes = numbermap[old + 1]
                  if ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(indexes) == 1) then
                        numbermap[old + 1] = {}
                      else
                        numbermap[old + 1] = binary_search_delete(indexes, idx)
                      end
                    end
                    indexmap[idx + 1] = num
                    if (numbermap[num] ~= nil) then
                      numbermap[num + 1] = binary_search_insert(numbermap[num + 1], idx)
                    else
                      numbermap[num + 1] = {idx}
                    end
                    return {numbermap = numbermap, indexmap = indexmap}
                  end
                  function find(cont, num)
                    local numbermap = cont.numbermap
                    if (numbermap[num] ~= nil) then
                      local arr = numbermap[num + 1]
                      if ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(arr) > 0) then
                            return arr[0 + 1]
                          end
                        end
                        return (-1)
                      end
                      nm = {}
                      im = {}
                      cont = {numbermap = nm, indexmap = im}
                      print(find(cont, 10))
                      cont = change((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cont), 0, 10)
                      print(find(cont, 10))
                      cont = change((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cont), 0, 20)
                      print(find(cont, 10))
                      print(find(cont, 20))
                      local _bench_end = os.clock()
                      collectgarbage()
                      local _bench_end_mem = collectgarbage('count') * 1024
                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                    end;
