-- Generated by Mochi v0.10.64 on 2025-08-12 09:13 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function processes_resource_summation(alloc)
    local resources = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(alloc[0 + 1])
        local sums = {}
        local i = 0
        while (i < resources) do
          local total = 0
          local j = 0
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(alloc)) do
                total = (total + alloc[j + 1][i + 1])
                j = (j + 1)
              end
              sums = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(sums, total)
            i = (i + 1)
          end
          return sums
        end
        function available_resources(claim, alloc_sum)
          local avail = {}
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(claim)) do
                avail = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(avail, (claim[i + 1] - alloc_sum[i + 1]))
              i = (i + 1)
            end
            return avail
          end
          function need(max, alloc)
            local needs = {}
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(max)) do
                  local row = {}
                  local j = 0
                  while (j < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(max[0 + 1])) do
                        row = (function(lst, item)
                        lst = lst or {}
                        table.insert(lst, item)
                        return lst
                      end)(row, (max[i + 1][j + 1] - alloc[i + 1][j + 1]))
                      j = (j + 1)
                    end
                    needs = (function(lst, item)
                    lst = lst or {}
                    table.insert(lst, item)
                    return lst
                  end)(needs, row)
                  i = (i + 1)
                end
                return needs
              end
              function pretty_print(claim, alloc, max)
                print("         Allocated Resource Table")
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(alloc)) do
                      local row = alloc[i + 1]
                      local line = (("P" .. _str((i + 1))) .. "       ")
                      local j = 0
                      while (j < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(row)) do
                            line = (line .. _str(row[j + 1]))
                            if (j < ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(row) - 1)) then
                                  line = (line .. "        ")
                                end
                                j = (j + 1)
                              end
                              print((((type(line) == "table")) and (
                              (function(v)
                              local function encode(x)
                              if type(x) == "table" then
                                if x.__name and x.__order then
                                  local parts = {x.__name, " {"}
                                  for i, k in ipairs(x.__order) do
                                    if i > 1 then parts[#parts+1] = ", " end
                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                elseif #x > 0 then
                                    local allTables = true
                                    for _, v in ipairs(x) do
                                      if type(v) ~= "table" then allTables = false break end
                                    end
                                    local parts = {}
                                    if not allTables then parts[#parts+1] = "[" end
                                    for i, val in ipairs(x) do
                                      parts[#parts+1] = encode(val)
                                      if i < #x then parts[#parts+1] = " " end
                                    end
                                    if not allTables then parts[#parts+1] = "]" end
                                    return table.concat(parts)
                                  else
                                    local keys = {}
                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                    local parts = {"{"}
                                    for i, k in ipairs(keys) do
                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                      if i < #keys then parts[#parts+1] = ", " end
                                    end
                                    parts[#parts+1] = "}"
                                    return table.concat(parts)
                                  end
                                elseif type(x) == "string" then
                                    return '"' .. x .. '"'
                                  else
                                    return tostring(x)
                                  end
                                end
                                return encode(v)
                              end)(line)) or (line)))
                              print("")
                              i = (i + 1)
                            end
                            print("         System Resource Table")
                            i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(max)) do
                                  local row = max[i + 1]
                                  local line = (("P" .. _str((i + 1))) .. "       ")
                                  local j = 0
                                  while (j < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(row)) do
                                        line = (line .. _str(row[j + 1]))
                                        if (j < ((function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(row) - 1)) then
                                              line = (line .. "        ")
                                            end
                                            j = (j + 1)
                                          end
                                          print((((type(line) == "table")) and (
                                          (function(v)
                                          local function encode(x)
                                          if type(x) == "table" then
                                            if x.__name and x.__order then
                                              local parts = {x.__name, " {"}
                                              for i, k in ipairs(x.__order) do
                                                if i > 1 then parts[#parts+1] = ", " end
                                                parts[#parts+1] = k .. " = " .. encode(x[k])
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            elseif #x > 0 then
                                                local allTables = true
                                                for _, v in ipairs(x) do
                                                  if type(v) ~= "table" then allTables = false break end
                                                end
                                                local parts = {}
                                                if not allTables then parts[#parts+1] = "[" end
                                                for i, val in ipairs(x) do
                                                  parts[#parts+1] = encode(val)
                                                  if i < #x then parts[#parts+1] = " " end
                                                end
                                                if not allTables then parts[#parts+1] = "]" end
                                                return table.concat(parts)
                                              else
                                                local keys = {}
                                                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                local parts = {"{"}
                                                for i, k in ipairs(keys) do
                                                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                  if i < #keys then parts[#parts+1] = ", " end
                                                end
                                                parts[#parts+1] = "}"
                                                return table.concat(parts)
                                              end
                                            elseif type(x) == "string" then
                                                return '"' .. x .. '"'
                                              else
                                                return tostring(x)
                                              end
                                            end
                                            return encode(v)
                                          end)(line)) or (line)))
                                          print("")
                                          i = (i + 1)
                                        end
                                        local usage = ""
                                        i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(claim)) do
                                              if (i > 0) then
                                                usage = (usage .. " ")
                                              end
                                              usage = (usage .. _str(claim[i + 1]))
                                              i = (i + 1)
                                            end
                                            local alloc_sum = processes_resource_summation(alloc)
                                            local avail = available_resources(claim, alloc_sum)
                                            local avail_str = ""
                                            i = 0
                                            while (i < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(avail)) do
                                                  if (i > 0) then
                                                    avail_str = (avail_str .. " ")
                                                  end
                                                  avail_str = (avail_str .. _str(avail[i + 1]))
                                                  i = (i + 1)
                                                end
                                                print((((type(("Current Usage by Active Processes: " .. usage)) == "table")) and (
                                                (function(v)
                                                local function encode(x)
                                                if type(x) == "table" then
                                                  if x.__name and x.__order then
                                                    local parts = {x.__name, " {"}
                                                    for i, k in ipairs(x.__order) do
                                                      if i > 1 then parts[#parts+1] = ", " end
                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  elseif #x > 0 then
                                                      local allTables = true
                                                      for _, v in ipairs(x) do
                                                        if type(v) ~= "table" then allTables = false break end
                                                      end
                                                      local parts = {}
                                                      if not allTables then parts[#parts+1] = "[" end
                                                      for i, val in ipairs(x) do
                                                        parts[#parts+1] = encode(val)
                                                        if i < #x then parts[#parts+1] = " " end
                                                      end
                                                      if not allTables then parts[#parts+1] = "]" end
                                                      return table.concat(parts)
                                                    else
                                                      local keys = {}
                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                      local parts = {"{"}
                                                      for i, k in ipairs(keys) do
                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                        if i < #keys then parts[#parts+1] = ", " end
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    end
                                                  elseif type(x) == "string" then
                                                      return '"' .. x .. '"'
                                                    else
                                                      return tostring(x)
                                                    end
                                                  end
                                                  return encode(v)
                                                end)(("Current Usage by Active Processes: " .. usage))) or (("Current Usage by Active Processes: " .. usage))))
                                                print((((type(("Initial Available Resources:       " .. avail_str)) == "table")) and (
                                                (function(v)
                                                local function encode(x)
                                                if type(x) == "table" then
                                                  if x.__name and x.__order then
                                                    local parts = {x.__name, " {"}
                                                    for i, k in ipairs(x.__order) do
                                                      if i > 1 then parts[#parts+1] = ", " end
                                                      parts[#parts+1] = k .. " = " .. encode(x[k])
                                                    end
                                                    parts[#parts+1] = "}"
                                                    return table.concat(parts)
                                                  elseif #x > 0 then
                                                      local allTables = true
                                                      for _, v in ipairs(x) do
                                                        if type(v) ~= "table" then allTables = false break end
                                                      end
                                                      local parts = {}
                                                      if not allTables then parts[#parts+1] = "[" end
                                                      for i, val in ipairs(x) do
                                                        parts[#parts+1] = encode(val)
                                                        if i < #x then parts[#parts+1] = " " end
                                                      end
                                                      if not allTables then parts[#parts+1] = "]" end
                                                      return table.concat(parts)
                                                    else
                                                      local keys = {}
                                                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                      local parts = {"{"}
                                                      for i, k in ipairs(keys) do
                                                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                        if i < #keys then parts[#parts+1] = ", " end
                                                      end
                                                      parts[#parts+1] = "}"
                                                      return table.concat(parts)
                                                    end
                                                  elseif type(x) == "string" then
                                                      return '"' .. x .. '"'
                                                    else
                                                      return tostring(x)
                                                    end
                                                  end
                                                  return encode(v)
                                                end)(("Initial Available Resources:       " .. avail_str))) or (("Initial Available Resources:       " .. avail_str))))
                                              end
                                              function bankers_algorithm(claim, alloc, max)
                                                local need_list = need(max, alloc)
                                                local alloc_sum = processes_resource_summation(alloc)
                                                local avail = available_resources(claim, alloc_sum)
                                                print("__________________________________________________")
                                                print("")
                                                local finished = {}
                                                local i = 0
                                                while (i < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(need_list)) do
                                                      finished = (function(lst, item)
                                                      lst = lst or {}
                                                      table.insert(lst, item)
                                                      return lst
                                                    end)(finished, false)
                                                    i = (i + 1)
                                                  end
                                                  local remaining = (function(v)
                                                  if type(v) == 'table' and v.items ~= nil then
                                                    return #v.items
                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                      local c = 0
                                                      for _ in pairs(v) do c = c + 1 end
                                                      return c
                                                    elseif type(v) == 'string' then
                                                        local l = utf8.len(v)
                                                        if l then return l end
                                                        return #v
                                                      elseif type(v) == 'table' then
                                                          return #v
                                                        else
                                                          return 0
                                                        end
                                                      end)(need_list)
                                                      while (remaining > 0) do
                                                        local safe = false
                                                        local p = 0
                                                        while (p < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(need_list)) do
                                                              if (not finished[p + 1]) then
                                                                local exec = true
                                                                local r = 0
                                                                while (r < (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(avail)) do
                                                                      if (need_list[p + 1][r + 1] > avail[r + 1]) then
                                                                        exec = false
                                                                        break
                                                                      end
                                                                      r = (r + 1)
                                                                    end
                                                                    if exec then
                                                                      safe = true
                                                                      print((((type((("Process " .. _str((p + 1))) .. " is executing.")) == "table")) and (
                                                                      (function(v)
                                                                      local function encode(x)
                                                                      if type(x) == "table" then
                                                                        if x.__name and x.__order then
                                                                          local parts = {x.__name, " {"}
                                                                          for i, k in ipairs(x.__order) do
                                                                            if i > 1 then parts[#parts+1] = ", " end
                                                                            parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                          end
                                                                          parts[#parts+1] = "}"
                                                                          return table.concat(parts)
                                                                        elseif #x > 0 then
                                                                            local allTables = true
                                                                            for _, v in ipairs(x) do
                                                                              if type(v) ~= "table" then allTables = false break end
                                                                            end
                                                                            local parts = {}
                                                                            if not allTables then parts[#parts+1] = "[" end
                                                                            for i, val in ipairs(x) do
                                                                              parts[#parts+1] = encode(val)
                                                                              if i < #x then parts[#parts+1] = " " end
                                                                            end
                                                                            if not allTables then parts[#parts+1] = "]" end
                                                                            return table.concat(parts)
                                                                          else
                                                                            local keys = {}
                                                                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                            local parts = {"{"}
                                                                            for i, k in ipairs(keys) do
                                                                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                              if i < #keys then parts[#parts+1] = ", " end
                                                                            end
                                                                            parts[#parts+1] = "}"
                                                                            return table.concat(parts)
                                                                          end
                                                                        elseif type(x) == "string" then
                                                                            return '"' .. x .. '"'
                                                                          else
                                                                            return tostring(x)
                                                                          end
                                                                        end
                                                                        return encode(v)
                                                                      end)((("Process " .. _str((p + 1))) .. " is executing."))) or ((("Process " .. _str((p + 1))) .. " is executing."))))
                                                                      r = 0
                                                                      while (r < (function(v)
                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                        return #v.items
                                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                                          local c = 0
                                                                          for _ in pairs(v) do c = c + 1 end
                                                                          return c
                                                                        elseif type(v) == 'string' then
                                                                            local l = utf8.len(v)
                                                                            if l then return l end
                                                                            return #v
                                                                          elseif type(v) == 'table' then
                                                                              return #v
                                                                            else
                                                                              return 0
                                                                            end
                                                                          end)(avail)) do
                                                                            avail[r + 1] = (avail[r + 1] + alloc[p + 1][r + 1])
                                                                            r = (r + 1)
                                                                          end
                                                                          local avail_str = ""
                                                                          r = 0
                                                                          while (r < (function(v)
                                                                          if type(v) == 'table' and v.items ~= nil then
                                                                            return #v.items
                                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                                              local c = 0
                                                                              for _ in pairs(v) do c = c + 1 end
                                                                              return c
                                                                            elseif type(v) == 'string' then
                                                                                local l = utf8.len(v)
                                                                                if l then return l end
                                                                                return #v
                                                                              elseif type(v) == 'table' then
                                                                                  return #v
                                                                                else
                                                                                  return 0
                                                                                end
                                                                              end)(avail)) do
                                                                                if (r > 0) then
                                                                                  avail_str = (avail_str .. " ")
                                                                                end
                                                                                avail_str = (avail_str .. _str(avail[r + 1]))
                                                                                r = (r + 1)
                                                                              end
                                                                              print((((type(("Updated available resource stack for processes: " .. avail_str)) == "table")) and (
                                                                              (function(v)
                                                                              local function encode(x)
                                                                              if type(x) == "table" then
                                                                                if x.__name and x.__order then
                                                                                  local parts = {x.__name, " {"}
                                                                                  for i, k in ipairs(x.__order) do
                                                                                    if i > 1 then parts[#parts+1] = ", " end
                                                                                    parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                  end
                                                                                  parts[#parts+1] = "}"
                                                                                  return table.concat(parts)
                                                                                elseif #x > 0 then
                                                                                    local allTables = true
                                                                                    for _, v in ipairs(x) do
                                                                                      if type(v) ~= "table" then allTables = false break end
                                                                                    end
                                                                                    local parts = {}
                                                                                    if not allTables then parts[#parts+1] = "[" end
                                                                                    for i, val in ipairs(x) do
                                                                                      parts[#parts+1] = encode(val)
                                                                                      if i < #x then parts[#parts+1] = " " end
                                                                                    end
                                                                                    if not allTables then parts[#parts+1] = "]" end
                                                                                    return table.concat(parts)
                                                                                  else
                                                                                    local keys = {}
                                                                                    for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                    table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                    local parts = {"{"}
                                                                                    for i, k in ipairs(keys) do
                                                                                      parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                      if i < #keys then parts[#parts+1] = ", " end
                                                                                    end
                                                                                    parts[#parts+1] = "}"
                                                                                    return table.concat(parts)
                                                                                  end
                                                                                elseif type(x) == "string" then
                                                                                    return '"' .. x .. '"'
                                                                                  else
                                                                                    return tostring(x)
                                                                                  end
                                                                                end
                                                                                return encode(v)
                                                                              end)(("Updated available resource stack for processes: " .. avail_str))) or (("Updated available resource stack for processes: " .. avail_str))))
                                                                              print("The process is in a safe state.")
                                                                              print("")
                                                                              finished[p + 1] = true
                                                                              remaining = (remaining - 1)
                                                                            end
                                                                          end
                                                                          p = (p + 1)
                                                                        end
                                                                        if (not safe) then
                                                                          print("System in unsafe state. Aborting...")
                                                                          print("")
                                                                          break
                                                                        end
                                                                      end
                                                                    end
                                                                    claim_vector = {8, 5, 9, 7}
                                                                    allocated_resources_table = {{2, 0, 1, 1}, {0, 1, 2, 1}, {4, 0, 0, 3}, {0, 2, 1, 0}, {1, 0, 3, 0}}
                                                                    maximum_claim_table = {{3, 2, 1, 4}, {0, 2, 5, 2}, {5, 1, 0, 5}, {1, 5, 3, 0}, {3, 0, 3, 3}}
                                                                    pretty_print(claim_vector, allocated_resources_table, maximum_claim_table)
                                                                    bankers_algorithm(claim_vector, allocated_resources_table, maximum_claim_table)
                                                                    local _bench_end = os.clock()
                                                                    collectgarbage()
                                                                    local _bench_end_mem = collectgarbage('count') * 1024
                                                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                  end;
