-- Generated by Mochi v0.10.59 on 2025-08-07 11:58 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rand()
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return seed
  end
  function rand_range(max)
    return (rand() % max)
  end
  function shuffle(list_int)
    local i = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(list_int) - 1)
        while (i > 0) do
          local j = rand_range((i + 1))
          local tmp = list_int[i + 1]
          list_int[i + 1] = list_int[j + 1]
          list_int[j + 1] = tmp
          i = (i - 1)
        end
        return list_int
      end
      function rand_letter()
        local letters = "abcdefghijklmnopqrstuvwxyz"
        local i = rand_range(26)
        return string.sub(letters, (i + 1), (i + 1))
      end
      function make_word_search(words, width, height)
        local board = {}
        local r = 0
        while (r < height) do
          local row = {}
          local c = 0
          while (c < width) do
            row = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(row, "")
          c = (c + 1)
        end
        board = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(board, row)
      r = (r + 1)
    end
    return {words = words, width = width, height = height, board = board}
  end
  function insert_dir(ws, word, dr, dc, rows, cols)
    local word_len = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(word)
        local ri = 0
        while (ri < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(rows)) do
              local row = rows[ri + 1]
              local ci = 0
              while (ci < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(cols)) do
                    local col = cols[ci + 1]
                    local end_r = (row + (dr * (word_len - 1)))
                    local end_c = (col + (dc * (word_len - 1)))
                    if ((((end_r < 0) or (end_r >= ws.height)) or (end_c < 0)) or (end_c >= ws.width)) then
                      ci = (ci + 1)
                      goto __cont_2
                    end
                    local k = 0
                    local ok = true
                    while (k < word_len) do
                      local rr = (row + (dr * k))
                      local cc = (col + (dc * k))
                      if (ws.board[rr + 1][cc + 1] ~= "") then
                        ok = false
                        break
                      end
                      k = (k + 1)
                    end
                    if ok then
                      k = 0
                      while (k < word_len) do
                        local rr2 = (row + (dr * k))
                        local cc2 = (col + (dc * k))
                        local row_list = ws.board[rr2 + 1]
                        row_list[cc2 + 1] = string.sub(word, (k + 1), (k + 1))
                        k = (k + 1)
                      end
                      return true
                    end
                    ci = (ci + 1)
                    ::__cont_2::
                  end
                  ri = (ri + 1)
                  ::__cont_1::
                end
                return false
              end
              function generate_board(ws)
                local dirs_r = {(-1), (-1), 0, 1, 1, 1, 0, (-1)}
                local dirs_c = {0, 1, 1, 1, 0, (-1), (-1), (-1)}
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(ws.words)) do
                      local word = ws.words[i + 1]
                      local rows = {}
                      local r = 0
                      while (r < ws.height) do
                        rows = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(rows, r)
                      r = (r + 1)
                    end
                    local cols = {}
                    local c = 0
                    while (c < ws.width) do
                      cols = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(cols, c)
                    c = (c + 1)
                  end
                  rows = shuffle(rows)
                  cols = shuffle(cols)
                  local d = rand_range(8)
                  insert_dir(ws, word, dirs_r[d + 1], dirs_c[d + 1], rows, cols)
                  i = (i + 1)
                end
              end
              function visualise(ws, add_fake_chars)
                local result = ""
                local r = 0
                while (r < ws.height) do
                  local c = 0
                  while (c < ws.width) do
                    local ch = ws.board[r + 1][c + 1]
                    if (ch == "") then
                      if add_fake_chars then
                        ch = rand_letter()
                      else
                        ch = "#"
                      end
                    end
                    result = ((result .. ch) .. " ")
                    c = (c + 1)
                  end
                  result = (result .. "\n")
                  r = (r + 1)
                end
                return result
              end
              function main()
                local words = {"cat", "dog", "snake", "fish"}
                local ws = make_word_search(words, 10, 10)
                generate_board(ws)
                print((((type(visualise(ws, true)) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(visualise(ws, true))) or (visualise(ws, true))))
              end
              seed = 123456789
              main()
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
