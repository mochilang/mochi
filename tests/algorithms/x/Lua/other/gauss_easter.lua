-- Generated by Mochi v0.10.64 on 2025-08-12 09:13 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function gauss_easter(year)
    local metonic_cycle = (year % 19)
    local julian_leap_year = (year % 4)
    local non_leap_year = (year % 7)
    local leap_day_inhibits = (year // 100)
    local lunar_orbit_correction = ((13 + (8 * leap_day_inhibits)) // 25)
    local leap_day_reinstall_number = (leap_day_inhibits / 4)
    local secular_moon_shift = ((((15 - lunar_orbit_correction) + leap_day_inhibits) - leap_day_reinstall_number) % 30)
    local century_starting_point = (((4 + leap_day_inhibits) - leap_day_reinstall_number) % 7)
    local days_to_add = (((19 * metonic_cycle) + secular_moon_shift) % 30)
    local days_from_phm_to_sunday = (((((2 * julian_leap_year) + (4 * non_leap_year)) + (6 * days_to_add)) + century_starting_point) % 7)
    if ((days_to_add == 29) and (days_from_phm_to_sunday == 6)) then
      return {month = 4, day = 19}
    end
    if ((days_to_add == 28) and (days_from_phm_to_sunday == 6)) then
      return {month = 4, day = 18}
    end
    local offset = math.floor(tonumber((days_to_add + days_from_phm_to_sunday)) or 0)
    local total = (22 + offset)
    if (total > 31) then
      return {month = 4, day = (total - 31)}
    end
    return {month = 3, day = total}
  end
  function format_date(year, d)
    local month = (((d.month < 10)) and (("0" .. _str(d.month))) or (_str(d.month)))
    local day = (((d.day < 10)) and (("0" .. _str(d.day))) or (_str(d.day)))
    return ((((_str(year) .. "-") .. month) .. "-") .. day)
  end
  years = {1994, 2000, 2010, 2021, 2023, 2032, 2100}
  i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(years)) do
        y = years[i + 1]
        e = gauss_easter(y)
        print((((type(((("Easter in " .. _str(y)) .. " is ") .. format_date(y, e))) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(((("Easter in " .. _str(y)) .. " is ") .. format_date(y, e)))) or (((("Easter in " .. _str(y)) .. " is ") .. format_date(y, e)))))
        i = (i + 1)
      end
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
