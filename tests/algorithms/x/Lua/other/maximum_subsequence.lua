-- Generated by Mochi v0.10.73 on 2025-08-25 23:45 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _len(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil or v[0] ~= nil) then
    local c = 0
    for k in pairs(v) do
      if k ~= '__name' and k ~= '__order' then
        c = c + 1
      end
    end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end
    
    local function _panic(msg)
    -- ensure panic messages are newline-terminated for readability
    if type(msg) == 'table' then
      io.stderr:write(_str(msg) .. '\n')
    else
      io.stderr:write(tostring(msg) .. '\n')
    end
    io.stderr:flush()
    os.exit(1)
  end
  
  local function _str(v)
  if type(v) == 'number' then
    local s = tostring(v)
    s = string.gsub(s, '%.0+$', '')
    return s
  elseif type(v) == 'boolean' then
      if v then return 'true' else return 'false' end
    elseif type(v) == 'table' then
        local src = v
        if v.items ~= nil then
          src = v.items
        end
        local parts = {}
        for i = 1, #src do
          parts[#parts+1] = _str(src[i])
        end
        return '[' .. table.concat(parts, ', ') .. ']'
      end
      return tostring(v)
    end
    do
      collectgarbage()
      local _bench_start_mem = collectgarbage('count') * 1024
      local _bench_start = os.clock()
      function max_int(a, b)
        if (a >= b) then
          return a
        else
          return b
        end
      end
      function max_subsequence_sum(nums)
        if (_len(nums) == 0) then
          _panic("input sequence should not be empty")
        end
        local ans = nums[0 + 1]
        local i = 1
        while (i < _len(nums)) do
          local num = nums[i + 1]
          local extended = (ans + num)
          ans = max_int(max_int(ans, extended), num)
          i = (i + 1)
        end
        return ans
      end
      print(max_subsequence_sum({1, 2, 3, 4, (-2)}))
      print(max_subsequence_sum({(-2), (-3), (-1), (-4), (-6)}))
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
