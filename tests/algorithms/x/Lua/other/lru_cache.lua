-- Generated by Mochi v0.10.59 on 2025-08-07 11:58 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function new_list()
    local nodes = {}
    local head = {key = 0, value = 0, prev = (0 - 1), next = 1}
    local tail = {key = 0, value = 0, prev = 0, next = (0 - 1)}
    nodes = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(nodes, head)
  nodes = (function(lst, item)
  local res = {table.unpack(lst or {})}
  table.insert(res, item)
  return res
end)(nodes, tail)
return {nodes = nodes, head = 0, tail = 1}
end
function dll_add(lst, idx)
  local nodes = lst.nodes
  local tail_idx = lst.tail
  local tail_node = nodes[tail_idx + 1]
  local prev_idx = tail_node.prev
  local node = nodes[idx + 1]
  node.prev = prev_idx
  node.next = tail_idx
  nodes[idx + 1] = node
  local prev_node = nodes[prev_idx + 1]
  prev_node.next = idx
  nodes[prev_idx + 1] = prev_node
  tail_node.prev = idx
  nodes[tail_idx + 1] = tail_node
  lst.nodes = nodes
  return lst
end
function dll_remove(lst, idx)
  local nodes = lst.nodes
  local node = nodes[idx + 1]
  local prev_idx = node.prev
  local next_idx = node.next
  if ((prev_idx == (0 - 1)) or (next_idx == (0 - 1))) then
    return lst
  end
  local prev_node = nodes[prev_idx + 1]
  prev_node.next = next_idx
  nodes[prev_idx + 1] = prev_node
  local next_node = nodes[next_idx + 1]
  next_node.prev = prev_idx
  nodes[next_idx + 1] = next_node
  node.prev = (0 - 1)
  node.next = (0 - 1)
  nodes[idx + 1] = node
  lst.nodes = nodes
  return lst
end
function new_cache(cap)
  local empty_map = {}
  return {list = new_list(), capacity = cap, num_keys = 0, hits = 0, misses = 0, cache = empty_map}
end
function lru_get(c, key)
  local cache = c
  local key_str = _str(key)
  if (cache.cache[key_str] ~= nil) then
    local idx = cache.cache[key_str]
    if (idx ~= (0 - 1)) then
      cache.hits = (cache.hits + 1)
      local node = cache.list.nodes[idx + 1]
      local value = node.value
      cache.list = dll_remove((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache.list), idx)
      cache.list = dll_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache.list), idx)
      return {cache = cache, value = value, ok = true}
    end
  end
  cache.misses = (cache.misses + 1)
  return {cache = cache, value = 0, ok = false}
end
function lru_put(c, key, value)
  local cache = c
  local key_str = _str(key)
  if (not (cache.cache[key_str] ~= nil)) then
    if (cache.num_keys >= cache.capacity) then
      local head_node = cache.list.nodes[cache.list.head + 1]
      local first_idx = head_node.next
      local first_node = cache.list.nodes[first_idx + 1]
      local old_key = first_node.key
      cache.list = dll_remove((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache.list), first_idx)
      local mdel = cache.cache
      mdel[_str(old_key)] = (0 - 1)
      cache.cache = mdel
      cache.num_keys = (cache.num_keys - 1)
    end
    local nodes = cache.list.nodes
    local new_node = {key = key, value = value, prev = (0 - 1), next = (0 - 1)}
    nodes = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(nodes, new_node)
  local idx = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(nodes) - 1)
      cache.list.nodes = nodes
      cache.list = dll_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache.list), idx)
      local m = cache.cache
      m[key_str] = idx
      cache.cache = m
      cache.num_keys = (cache.num_keys + 1)
    else
      local m = cache.cache
      local idx = m[key_str]
      local nodes = cache.list.nodes
      local node = nodes[idx + 1]
      node.value = value
      nodes[idx + 1] = node
      cache.list.nodes = nodes
      cache.list = dll_remove((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache.list), idx)
      cache.list = dll_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache.list), idx)
      cache.cache = m
    end
    return cache
  end
  function cache_info(cache)
    return (((((((("CacheInfo(hits=" .. _str(cache.hits)) .. ", misses=") .. _str(cache.misses)) .. ", capacity=") .. _str(cache.capacity)) .. ", current size=") .. _str(cache.num_keys)) .. ")")
  end
  function print_result(res)
    if res.ok then
      print((((type(_str(res.value)) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(_str(res.value))) or (_str(res.value))))
    else
      print("None")
    end
  end
  function main()
    local cache = new_cache(2)
    cache = lru_put((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache), 1, 1)
    cache = lru_put((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache), 2, 2)
    local r1 = lru_get(cache, 1)
    cache = r1.cache
    print_result(r1)
    cache = lru_put((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache), 3, 3)
    local r2 = lru_get(cache, 2)
    cache = r2.cache
    print_result(r2)
    cache = lru_put((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(cache), 4, 4)
    local r3 = lru_get(cache, 1)
    cache = r3.cache
    print_result(r3)
    local r4 = lru_get(cache, 3)
    cache = r4.cache
    print_result(r4)
    local r5 = lru_get(cache, 4)
    cache = r5.cache
    print_result(r5)
    print((((type(cache_info(cache)) == "table")) and (
    (function(v)
    local function encode(x)
    if type(x) == "table" then
      if x.__name and x.__order then
        local parts = {x.__name, " {"}
        for i, k in ipairs(x.__order) do
          if i > 1 then parts[#parts+1] = ", " end
          parts[#parts+1] = k .. " = " .. encode(x[k])
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      elseif #x > 0 then
          local allTables = true
          for _, v in ipairs(x) do
            if type(v) ~= "table" then allTables = false break end
          end
          local parts = {}
          if not allTables then parts[#parts+1] = "[" end
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = " " end
          end
          if not allTables then parts[#parts+1] = "]" end
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      return encode(v)
    end)(cache_info(cache))) or (cache_info(cache))))
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
