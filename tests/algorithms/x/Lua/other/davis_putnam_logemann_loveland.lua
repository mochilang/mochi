-- Generated by Mochi v0.10.59 on 2025-08-07 11:58 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function new_clause(lits)
    local m = {}
    local names = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(lits)) do
          local lit = lits[i + 1]
          m[lit] = (0 - 1)
          names = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(names, lit)
        i = (i + 1)
      end
      return {literals = m, names = names}
    end
    function assign_clause(c, model)
      local lits = c.literals
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(c.names)) do
            local lit = c.names[i + 1]
            local symbol = _substring(lit, 0, 2)
            if (model[symbol] ~= nil) then
              local value = model[symbol]
              if ((_substring(lit, ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(lit) - 1), (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(lit)) == "'") and (value ~= (0 - 1))) then
                        value = (1 - value)
                      end
                      lits[lit] = value
                    end
                    i = (i + 1)
                  end
                  c.literals = lits
                  return c
                end
                function evaluate_clause(c, model)
                  local i = 0
                  while (i < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(c.names)) do
                        local lit = c.names[i + 1]
                        local sym = (((_substring(lit, ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(lit) - 1), (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(lit)) == "'")) and (_substring(lit, 0, 2)) or ((lit .. "'")))
                                if (c.literals[sym] ~= nil) then
                                  return {value = 1, clause = c}
                                end
                                i = (i + 1)
                              end
                              c = assign_clause((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c), model)
                              i = 0
                              while (i < (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(c.names)) do
                                    local lit = c.names[i + 1]
                                    local value = c.literals[lit]
                                    if (value == 1) then
                                      return {value = 1, clause = c}
                                    end
                                    if (value == (0 - 1)) then
                                      return {value = (0 - 1), clause = c}
                                    end
                                    i = (i + 1)
                                  end
                                  local any_true = 0
                                  i = 0
                                  while (i < (function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(c.names)) do
                                        local lit = c.names[i + 1]
                                        if (c.literals[lit] == 1) then
                                          any_true = 1
                                        end
                                        i = (i + 1)
                                      end
                                      return {value = any_true, clause = c}
                                    end
                                    function new_formula(cs)
                                      return {clauses = cs}
                                    end
                                    function remove_symbol(symbols, s)
                                      local res = {}
                                      local i = 0
                                      while (i < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(symbols)) do
                                            if (symbols[i + 1] ~= s) then
                                              res = (function(lst, item)
                                              local res = {table.unpack(lst or {})}
                                              table.insert(res, item)
                                              return res
                                            end)(res, symbols[i + 1])
                                          end
                                          i = (i + 1)
                                        end
                                        return res
                                      end
                                      function dpll_algorithm(clauses, symbols, model)
                                        local all_true = true
                                        local i = 0
                                        while (i < (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(clauses)) do
                                              local ev = evaluate_clause(clauses[i + 1], model)
                                              clauses[i + 1] = ev.clause
                                              if (ev.value == 0) then
                                                return {sat = false, model = {}}
                                              else
                                                if (ev.value == (0 - 1)) then
                                                  all_true = false
                                                end
                                              end
                                              i = (i + 1)
                                            end
                                            if all_true then
                                              return {sat = true, model = model}
                                            end
                                            local p = symbols[0 + 1]
                                            local rest = remove_symbol(symbols, p)
                                            local tmp1 = model
                                            local tmp2 = model
                                            tmp1[p] = 1
                                            tmp2[p] = 0
                                            local res1 = dpll_algorithm(clauses, rest, tmp1)
                                            if res1.sat then
                                              return res1
                                            end
                                            return dpll_algorithm(clauses, rest, tmp2)
                                          end
                                          function str_clause(c)
                                            local line = "{"
                                            local first = true
                                            local i = 0
                                            while (i < (function(v)
                                            if type(v) == 'table' and v.items ~= nil then
                                              return #v.items
                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                local c = 0
                                                for _ in pairs(v) do c = c + 1 end
                                                return c
                                              elseif type(v) == 'string' then
                                                  local l = utf8.len(v)
                                                  if l then return l end
                                                  return #v
                                                elseif type(v) == 'table' then
                                                    return #v
                                                  else
                                                    return 0
                                                  end
                                                end)(c.names)) do
                                                  local lit = c.names[i + 1]
                                                  if first then
                                                    first = false
                                                  else
                                                    line = (line .. " , ")
                                                  end
                                                  line = (line .. lit)
                                                  i = (i + 1)
                                                end
                                                line = (line .. "}")
                                                return line
                                              end
                                              function str_formula(f)
                                                local line = "{"
                                                local i = 0
                                                while (i < (function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(f.clauses)) do
                                                      line = (line .. str_clause(f.clauses[i + 1]))
                                                      if (i < ((function(v)
                                                      if type(v) == 'table' and v.items ~= nil then
                                                        return #v.items
                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                          local c = 0
                                                          for _ in pairs(v) do c = c + 1 end
                                                          return c
                                                        elseif type(v) == 'string' then
                                                            local l = utf8.len(v)
                                                            if l then return l end
                                                            return #v
                                                          elseif type(v) == 'table' then
                                                              return #v
                                                            else
                                                              return 0
                                                            end
                                                          end)(f.clauses) - 1)) then
                                                            line = (line .. " , ")
                                                          end
                                                          i = (i + 1)
                                                        end
                                                        line = (line .. "}")
                                                        return line
                                                      end
                                                      clause1 = new_clause({"A4", "A3", "A5'", "A1", "A3'"})
                                                      clause2 = new_clause({"A4"})
                                                      formula = new_formula({clause1, clause2})
                                                      formula_str = str_formula(formula)
                                                      clauses = {clause1, clause2}
                                                      symbols = {"A4", "A3", "A5", "A1"}
                                                      model = {}
                                                      result = dpll_algorithm(clauses, symbols, model)
                                                      if result.sat then
                                                        print((((type((("The formula " .. formula_str) .. " is satisfiable.")) == "table")) and (
                                                        (function(v)
                                                        local function encode(x)
                                                        if type(x) == "table" then
                                                          if x.__name and x.__order then
                                                            local parts = {x.__name, " {"}
                                                            for i, k in ipairs(x.__order) do
                                                              if i > 1 then parts[#parts+1] = ", " end
                                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          elseif #x > 0 then
                                                              local allTables = true
                                                              for _, v in ipairs(x) do
                                                                if type(v) ~= "table" then allTables = false break end
                                                              end
                                                              local parts = {}
                                                              if not allTables then parts[#parts+1] = "[" end
                                                              for i, val in ipairs(x) do
                                                                parts[#parts+1] = encode(val)
                                                                if i < #x then parts[#parts+1] = " " end
                                                              end
                                                              if not allTables then parts[#parts+1] = "]" end
                                                              return table.concat(parts)
                                                            else
                                                              local keys = {}
                                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                              local parts = {"{"}
                                                              for i, k in ipairs(keys) do
                                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                if i < #keys then parts[#parts+1] = ", " end
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            end
                                                          elseif type(x) == "string" then
                                                              return '"' .. x .. '"'
                                                            else
                                                              return tostring(x)
                                                            end
                                                          end
                                                          return encode(v)
                                                        end)((("The formula " .. formula_str) .. " is satisfiable."))) or ((("The formula " .. formula_str) .. " is satisfiable."))))
                                                      else
                                                        print((((type((("The formula " .. formula_str) .. " is not satisfiable.")) == "table")) and (
                                                        (function(v)
                                                        local function encode(x)
                                                        if type(x) == "table" then
                                                          if x.__name and x.__order then
                                                            local parts = {x.__name, " {"}
                                                            for i, k in ipairs(x.__order) do
                                                              if i > 1 then parts[#parts+1] = ", " end
                                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                                            end
                                                            parts[#parts+1] = "}"
                                                            return table.concat(parts)
                                                          elseif #x > 0 then
                                                              local allTables = true
                                                              for _, v in ipairs(x) do
                                                                if type(v) ~= "table" then allTables = false break end
                                                              end
                                                              local parts = {}
                                                              if not allTables then parts[#parts+1] = "[" end
                                                              for i, val in ipairs(x) do
                                                                parts[#parts+1] = encode(val)
                                                                if i < #x then parts[#parts+1] = " " end
                                                              end
                                                              if not allTables then parts[#parts+1] = "]" end
                                                              return table.concat(parts)
                                                            else
                                                              local keys = {}
                                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                              local parts = {"{"}
                                                              for i, k in ipairs(keys) do
                                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                if i < #keys then parts[#parts+1] = ", " end
                                                              end
                                                              parts[#parts+1] = "}"
                                                              return table.concat(parts)
                                                            end
                                                          elseif type(x) == "string" then
                                                              return '"' .. x .. '"'
                                                            else
                                                              return tostring(x)
                                                            end
                                                          end
                                                          return encode(v)
                                                        end)((("The formula " .. formula_str) .. " is not satisfiable."))) or ((("The formula " .. formula_str) .. " is not satisfiable."))))
                                                      end
                                                      local _bench_end = os.clock()
                                                      collectgarbage()
                                                      local _bench_end_mem = collectgarbage('count') * 1024
                                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                    end;
