-- Generated by Mochi v0.10.59 on 2025-08-06 16:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function sum_list(nums)
    local s = 0
    for _, n in ipairs(nums) do
      s = (s + n)
    end
    return s
  end
  function create_state_space_tree(nums, max_sum, num_index, path, curr_sum, remaining_sum)
    local result = {}
    if ((curr_sum > max_sum) or ((curr_sum + remaining_sum) < max_sum)) then
      return result
    end
    if (curr_sum == max_sum) then
      result = (function(lst, item)
      local res = {table.unpack(lst)}
      table.insert(res, item)
      return res
    end)(result, path)
    return result
  end
  local index = num_index
  while (index < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(nums)) do
        local value = nums[index + 1]
        local subres = create_state_space_tree(nums, max_sum, (index + 1), (function(lst, item)
        local res = {table.unpack(lst)}
        table.insert(res, item)
        return res
      end)(path, value), (curr_sum + value), (remaining_sum - value))
      local j = 0
      while (j < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(subres)) do
            result = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(result, subres[j + 1])
          j = (j + 1)
        end
        index = (index + 1)
      end
      return result
    end
    function generate_sum_of_subsets_solutions(nums, max_sum)
      local total = sum_list(nums)
      return create_state_space_tree(nums, max_sum, 0, {}, 0, total)
    end
    function main()
      
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if #x > 0 then
          local parts = {"["}
          for i, val in ipairs(x) do
            parts[#parts+1] = encode(val)
            if i < #x then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "]"
          return table.concat(parts)
        else
          local keys = {}
          for k in pairs(x) do table.insert(keys, k) end
          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
          local parts = {"{"}
          for i, k in ipairs(keys) do
            parts[#parts+1] = '"' .. tostring(k) .. '": ' .. encode(x[k])
            if i < #keys then parts[#parts+1] = ", " end
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        end
      elseif type(x) == "string" then
          return '"' .. x .. '"'
        else
          return tostring(x)
        end
      end
      print(encode(v))
    end)(generate_sum_of_subsets_solutions({3, 34, 4, 12, 5, 2}, 9))
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
