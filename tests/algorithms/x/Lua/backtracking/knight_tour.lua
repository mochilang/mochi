-- Generated by Mochi v0.10.59 on 2025-08-06 16:21 GMT+7
function input()
  return io.read('*l')
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function get_valid_pos(position, n)
    local y = position[0 + 1]
    local x = position[1 + 1]
    local positions = {{(y + 1), (x + 2)}, {(y - 1), (x + 2)}, {(y + 1), (x - 2)}, {(y - 1), (x - 2)}, {(y + 2), (x + 1)}, {(y + 2), (x - 1)}, {(y - 2), (x + 1)}, {(y - 2), (x - 1)}}
    local permissible = {}
    for idx = 0, (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(positions) - 1 do
          local inner = positions[idx + 1]
          local y_test = inner[0 + 1]
          local x_test = inner[1 + 1]
          if ((((y_test >= 0) and (y_test < n)) and (x_test >= 0)) and (x_test < n)) then
            permissible = (function(lst, item)
            local res = {table.unpack(lst)}
            table.insert(res, item)
            return res
          end)(permissible, inner)
        end
      end
      return permissible
    end
    function is_complete(board)
      for i = 0, (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(board) - 1 do
            local row = board[i + 1]
            for j = 0, (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(row) - 1 do
                  if (row[j + 1] == 0) then
                    return false
                  end
                end
              end
              return true
            end
            function open_knight_tour_helper(board, pos, curr)
              if is_complete(board) then
                return true
              end
              local moves = get_valid_pos(pos, (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(board))
                  for i = 0, (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(moves) - 1 do
                        local position = moves[i + 1]
                        local y = position[0 + 1]
                        local x = position[1 + 1]
                        if (board[y + 1][x + 1] == 0) then
                          board[y + 1][x + 1] = (curr + 1)
                          if open_knight_tour_helper(board, position, (curr + 1)) then
                            return true
                          end
                          board[y + 1][x + 1] = 0
                        end
                      end
                      return false
                    end
                    function open_knight_tour(n)
                      local board = {}
                      for i = 0, n - 1 do
                        local row = {}
                        for j = 0, n - 1 do
                          row = (function(lst, item)
                          local res = {table.unpack(lst)}
                          table.insert(res, item)
                          return res
                        end)(row, 0)
                      end
                      board = (function(lst, item)
                      local res = {table.unpack(lst)}
                      table.insert(res, item)
                      return res
                    end)(board, row)
                  end
                  for i = 0, n - 1 do
                    for j = 0, n - 1 do
                      board[i + 1][j + 1] = 1
                      if open_knight_tour_helper(board, {i, j}, 1) then
                        return board
                      end
                      board[i + 1][j + 1] = 0
                    end
                  end
                  print((((type(("Open Knight Tour cannot be performed on a board of size " .. tostring(n))) == "table")) and (
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(("Open Knight Tour cannot be performed on a board of size " .. tostring(n)))) or (("Open Knight Tour cannot be performed on a board of size " .. tostring(n)))))
                  return board
                end
                board = open_knight_tour(1)
                print(board[0 + 1][0 + 1])
                local _bench_end = os.clock()
                collectgarbage()
                local _bench_end_mem = collectgarbage('count') * 1024
                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
              end;
