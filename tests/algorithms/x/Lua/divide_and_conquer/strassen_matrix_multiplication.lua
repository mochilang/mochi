-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function default_matrix_multiplication(a, b)
    return {{((a[0 + 1][0 + 1] * b[0 + 1][0 + 1]) + (a[0 + 1][1 + 1] * b[1 + 1][0 + 1])), ((a[0 + 1][0 + 1] * b[0 + 1][1 + 1]) + (a[0 + 1][1 + 1] * b[1 + 1][1 + 1]))}, {((a[1 + 1][0 + 1] * b[0 + 1][0 + 1]) + (a[1 + 1][1 + 1] * b[1 + 1][0 + 1])), ((a[1 + 1][0 + 1] * b[0 + 1][1 + 1]) + (a[1 + 1][1 + 1] * b[1 + 1][1 + 1]))}}
  end
  function matrix_addition(matrix_a, matrix_b)
    local result = {}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(matrix_a)) do
          local row = {}
          local j = 0
          while (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(matrix_a[i + 1])) do
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(row, (matrix_a[i + 1][j + 1] + matrix_b[i + 1][j + 1]))
              j = (j + 1)
            end
            result = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(result, row)
          i = (i + 1)
        end
        return result
      end
      function matrix_subtraction(matrix_a, matrix_b)
        local result = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(matrix_a)) do
              local row = {}
              local j = 0
              while (j < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(matrix_a[i + 1])) do
                    row = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(row, (matrix_a[i + 1][j + 1] - matrix_b[i + 1][j + 1]))
                  j = (j + 1)
                end
                result = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(result, row)
              i = (i + 1)
            end
            return result
          end
          function split_matrix(a)
            local n = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(a)
                local mid = (n // 2)
                local top_left = {}
                local top_right = {}
                local bot_left = {}
                local bot_right = {}
                local i = 0
                while (i < mid) do
                  local left_row = {}
                  local right_row = {}
                  local j = 0
                  while (j < mid) do
                    left_row = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(left_row, a[i + 1][j + 1])
                  right_row = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(right_row, a[i + 1][(j + mid) + 1])
                j = (j + 1)
              end
              top_left = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(top_left, left_row)
            top_right = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(top_right, right_row)
          i = (i + 1)
        end
        i = mid
        while (i < n) do
          local left_row = {}
          local right_row = {}
          local j = 0
          while (j < mid) do
            left_row = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(left_row, a[i + 1][j + 1])
          right_row = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(right_row, a[i + 1][(j + mid) + 1])
        j = (j + 1)
      end
      bot_left = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(bot_left, left_row)
    bot_right = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(bot_right, right_row)
  i = (i + 1)
end
return {top_left, top_right, bot_left, bot_right}
end
function matrix_dimensions(matrix)
  return {(function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(matrix), (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(matrix[0 + 1])}
        end
        function next_power_of_two(n)
          local p = 1
          while (p < n) do
            p = (p * 2)
          end
          return p
        end
        function pad_matrix(mat, rows, cols)
          local res = {}
          local i = 0
          while (i < rows) do
            local row = {}
            local j = 0
            while (j < cols) do
              local v = 0
              if ((i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(mat)) and (j < (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(mat[0 + 1]))) then
                        v = mat[i + 1][j + 1]
                      end
                      row = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(row, v)
                    j = (j + 1)
                  end
                  res = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(res, row)
                i = (i + 1)
              end
              return res
            end
            function actual_strassen(matrix_a, matrix_b)
              if (matrix_dimensions(matrix_a)[0 + 1] == 2) then
                return default_matrix_multiplication(matrix_a, matrix_b)
              end
              local parts_a = split_matrix(matrix_a)
              local a = parts_a[0 + 1]
              local b = parts_a[1 + 1]
              local c = parts_a[2 + 1]
              local d = parts_a[3 + 1]
              local parts_b = split_matrix(matrix_b)
              local e = parts_b[0 + 1]
              local f = parts_b[1 + 1]
              local g = parts_b[2 + 1]
              local h = parts_b[3 + 1]
              local t1 = actual_strassen(a, matrix_subtraction(f, h))
              local t2 = actual_strassen(matrix_addition(a, b), h)
              local t3 = actual_strassen(matrix_addition(c, d), e)
              local t4 = actual_strassen(d, matrix_subtraction(g, e))
              local t5 = actual_strassen(matrix_addition(a, d), matrix_addition(e, h))
              local t6 = actual_strassen(matrix_subtraction(b, d), matrix_addition(g, h))
              local t7 = actual_strassen(matrix_subtraction(a, c), matrix_addition(e, f))
              local top_left = matrix_addition(matrix_subtraction(matrix_addition(t5, t4), t2), t6)
              local top_right = matrix_addition(t1, t2)
              local bot_left = matrix_addition(t3, t4)
              local bot_right = matrix_subtraction(matrix_subtraction(matrix_addition(t1, t5), t3), t7)
              local new_matrix = {}
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(top_right)) do
                    new_matrix = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(new_matrix, (function(a, b)
                  local res = {table.unpack(a or {})}
                  for _, v in ipairs(b or {}) do
                    res[#res+1] = v
                  end
                  return res
                end)(top_left[i + 1], top_right[i + 1]))
                i = (i + 1)
              end
              i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(bot_right)) do
                    new_matrix = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(new_matrix, (function(a, b)
                  local res = {table.unpack(a or {})}
                  for _, v in ipairs(b or {}) do
                    res[#res+1] = v
                  end
                  return res
                end)(bot_left[i + 1], bot_right[i + 1]))
                i = (i + 1)
              end
              return new_matrix
            end
            function strassen(matrix1, matrix2)
              local dims1 = matrix_dimensions(matrix1)
              local dims2 = matrix_dimensions(matrix2)
              if (dims1[1 + 1] ~= dims2[0 + 1]) then
                return {}
              end
              local maximum = math.floor(tonumber((function(lst)
              local m = nil
              for _, v in ipairs(lst) do
                if m == nil or v > m then
                  m = v
                end
              end
              return m
            end)({dims1[0 + 1], dims1[1 + 1], dims2[0 + 1], dims2[1 + 1]})) or 0)
            local size = next_power_of_two(maximum)
            local new_matrix1 = pad_matrix(matrix1, size, size)
            local new_matrix2 = pad_matrix(matrix2, size, size)
            local result_padded = actual_strassen(new_matrix1, new_matrix2)
            local final_matrix = {}
            local i = 0
            while (i < dims1[0 + 1]) do
              local row = {}
              local j = 0
              while (j < dims2[1 + 1]) do
                row = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(row, result_padded[i + 1][j + 1])
              j = (j + 1)
            end
            final_matrix = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(final_matrix, row)
          i = (i + 1)
        end
        return final_matrix
      end
      function main()
        local matrix1 = {{2, 3, 4, 5}, {6, 4, 3, 1}, {2, 3, 6, 7}, {3, 1, 2, 4}, {2, 3, 4, 5}, {6, 4, 3, 1}, {2, 3, 6, 7}, {3, 1, 2, 4}, {2, 3, 4, 5}, {6, 2, 3, 1}}
        local matrix2 = {{0, 2, 1, 1}, {16, 2, 3, 3}, {2, 2, 7, 7}, {13, 11, 22, 4}}
        local res = strassen(matrix1, matrix2)
        print(
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(res))
      end
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
