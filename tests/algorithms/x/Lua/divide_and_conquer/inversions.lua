-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function slice_list(arr, start, _end)
    local res = {}
    local k = start
    while (k < _end) do
      res = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(res, arr[k + 1])
    k = (k + 1)
  end
  return res
end
function count_inversions_bf(arr)
  local n = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr)
      local inv = 0
      local i = 0
      while (i < (n - 1)) do
        local j = (i + 1)
        while (j < n) do
          if (arr[i + 1] > arr[j + 1]) then
            inv = (inv + 1)
          end
          j = (j + 1)
        end
        i = (i + 1)
      end
      return inv
    end
    function count_cross_inversions(p, q)
      local r = {}
      local i = 0
      local j = 0
      local inv = 0
      while ((i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(p)) and (j < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(q))) do
                if (p[i + 1] > q[j + 1]) then
                  inv = (inv + ((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(p) - i))
                      r = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(r, q[j + 1])
                    j = (j + 1)
                  else
                    r = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(r, p[i + 1])
                  i = (i + 1)
                end
              end
              if (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(p)) then
                    r = (function(a, b)
                    local res = {table.unpack(a or {})}
                    for _, v in ipairs(b or {}) do
                      res[#res+1] = v
                    end
                    return res
                  end)(r, slice_list(p, i, (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(p)))
                    else
                      r = (function(a, b)
                      local res = {table.unpack(a or {})}
                      for _, v in ipairs(b or {}) do
                        res[#res+1] = v
                      end
                      return res
                    end)(r, slice_list(q, j, (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(q)))
                      end
                      return {arr = r, inv = inv}
                    end
                    function count_inversions_recursive(arr)
                      if ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(arr) <= 1) then
                            return {arr = arr, inv = 0}
                          end
                          local mid = ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(arr) // 2)
                              local p = slice_list(arr, 0, mid)
                              local q = slice_list(arr, mid, (function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(arr))
                                  local res_p = count_inversions_recursive(p)
                                  local res_q = count_inversions_recursive(q)
                                  local res_cross = count_cross_inversions(res_p.arr, res_q.arr)
                                  local total = ((res_p.inv + res_q.inv) + res_cross.inv)
                                  return {arr = res_cross.arr, inv = total}
                                end
                                arr_1 = {10, 2, 1, 5, 5, 2, 11}
                                nbf = count_inversions_bf(arr_1)
                                nrec = count_inversions_recursive(arr_1).inv
                                print((string.gsub(string.format("number of inversions =  %d", nbf), "%s+$", "")))
                                arr_1 = {1, 2, 2, 5, 5, 10, 11}
                                nbf2 = count_inversions_bf(arr_1)
                                nrec2 = count_inversions_recursive(arr_1).inv
                                print((string.gsub(string.format("number of inversions =  %d", nbf2), "%s+$", "")))
                                arr_1 = {}
                                nbf3 = count_inversions_bf(arr_1)
                                nrec3 = count_inversions_recursive(arr_1).inv
                                print((string.gsub(string.format("number of inversions =  %d", nbf3), "%s+$", "")))
                                local _bench_end = os.clock()
                                collectgarbage()
                                local _bench_end_mem = collectgarbage('count') * 1024
                                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                              end;
