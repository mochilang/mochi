-- Generated by Mochi v0.10.60 on 2025-08-08 10:08 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then
  e = #lst
elseif e < 0 then
    e = #lst + e
  end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function abs(x)
    if (x < 0) then
      return (0 - x)
    end
    return x
  end
  function sqrtApprox(x)
    local guess = x
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function euclidean_distance_sqr(p1, p2)
    local dx = (p1[0 + 1] - p2[0 + 1])
    local dy = (p1[1 + 1] - p2[1 + 1])
    return ((dx * dx) + (dy * dy))
  end
  function column_based_sort(arr, column)
    local points = arr
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(points)) do
          local j = 0
          while (j < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(points) - 1)) do
                if (points[j + 1][column + 1] > points[(j + 1) + 1][column + 1]) then
                  local tmp = points[j + 1]
                  points[j + 1] = points[(j + 1) + 1]
                  points[(j + 1) + 1] = tmp
                end
                j = (j + 1)
              end
              i = (i + 1)
            end
            return points
          end
          function dis_between_closest_pair(points, count, min_dis)
            local i = 0
            while (i < (count - 1)) do
              local j = (i + 1)
              while (j < count) do
                local current = euclidean_distance_sqr(points[i + 1], points[j + 1])
                if (current < min_dis) then
                  min_dis = current
                end
                j = (j + 1)
              end
              i = (i + 1)
            end
            return min_dis
          end
          function dis_between_closest_in_strip(points, count, min_dis)
            local i_start = 0
            if (6 < (count - 1)) then
              i_start = 6
            else
              i_start = (count - 1)
            end
            local i = i_start
            while (i < count) do
              local j_start = 0
              if ((i - 6) > 0) then
                j_start = (i - 6)
              end
              local j = j_start
              while (j < i) do
                local current = euclidean_distance_sqr(points[i + 1], points[j + 1])
                if (current < min_dis) then
                  min_dis = current
                end
                j = (j + 1)
              end
              i = (i + 1)
            end
            return min_dis
          end
          function closest_pair_of_points_sqr(px, py, count)
            if (count <= 3) then
              return dis_between_closest_pair(px, count, 1e+18)
            end
            local mid = (count // 2)
            local left = closest_pair_of_points_sqr(px, (function(lst,s,e)
            local r={}
            for i=s+1,e do
              r[#r+1]=lst[i]
            end
            return r
          end)(py, 0, mid), mid)
          local right = closest_pair_of_points_sqr(py, (function(lst,s,e)
          local r={}
          for i=s+1,e do
            r[#r+1]=lst[i]
          end
          return r
        end)(py, mid, count), (count - mid))
        local best = left
        if (right < best) then
          best = right
        end
        local strip = {}
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(px)) do
              if (abs((px[i + 1][0 + 1] - px[mid + 1][0 + 1])) < best) then
                strip = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(strip, px[i + 1])
            end
            i = (i + 1)
          end
          local strip_best = dis_between_closest_in_strip(strip, (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(strip), best)
              if (strip_best < best) then
                best = strip_best
              end
              return best
            end
            function closest_pair_of_points(points, count)
              local points_sorted_on_x = column_based_sort(points, 0)
              local points_sorted_on_y = column_based_sort(points, 1)
              local dist_sqr = closest_pair_of_points_sqr(points_sorted_on_x, points_sorted_on_y, count)
              return sqrtApprox(dist_sqr)
            end
            points = {{2, 3}, {12, 30}, {40, 50}, {5, 1}, {12, 10}, {3, 4}}
            print((((type(("Distance: " .. _str(closest_pair_of_points(points, (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(points))))) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(("Distance: " .. _str(closest_pair_of_points(points, (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(points)))))) or (("Distance: " .. _str(closest_pair_of_points(points, (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(points)))))))
                        local _bench_end = os.clock()
                        collectgarbage()
                        local _bench_end_mem = collectgarbage('count') * 1024
                        local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                        local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                        print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                      end;
