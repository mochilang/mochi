-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function round_int(x)
    return math.floor(tonumber((x + 0.5)) or 0)
  end
  function hsv_to_rgb(h, s, v)
    local i = math.floor(tonumber((h * 6)) or 0)
    local f = ((h * 6) - i)
    local p = (v * (1 - s))
    local q = (v * (1 - (f * s)))
    local t = (v * (1 - ((1 - f) * s)))
    local mod = (i % 6)
    local r = 0
    local g = 0
    local b = 0
    if (mod == 0) then
      r = v
      g = t
      b = p
    else
      if (mod == 1) then
        r = q
        g = v
        b = p
      else
        if (mod == 2) then
          r = p
          g = v
          b = t
        else
          if (mod == 3) then
            r = p
            g = q
            b = v
          else
            if (mod == 4) then
              r = t
              g = p
              b = v
            else
              r = v
              g = p
              b = q
            end
          end
        end
      end
    end
    return {r = round_int((r * 255)), g = round_int((g * 255)), b = round_int((b * 255))}
  end
  function get_distance(x, y, max_step)
    local a = x
    local b = y
    local step = (-1)
    while (step < (max_step - 1)) do
      step = (step + 1)
      local a_new = (((a * a) - (b * b)) + x)
      b = (((2 * a) * b) + y)
      a = a_new
      if (((a * a) + (b * b)) > 4) then
        break
      end
    end
    return (step // (max_step - 1))
  end
  function get_black_and_white_rgb(distance)
    if (distance == 1) then
      return {r = 0, g = 0, b = 0}
    else
      return {r = 255, g = 255, b = 255}
    end
  end
  function get_color_coded_rgb(distance)
    if (distance == 1) then
      return {r = 0, g = 0, b = 0}
    else
      return hsv_to_rgb(distance, 1, 1)
    end
  end
  function get_image(image_width, image_height, figure_center_x, figure_center_y, figure_width, max_step, use_distance_color_coding)
    local img = {}
    local figure_height = ((figure_width / image_width) * image_height)
    local image_y = 0
    while (image_y < image_height) do
      local row = {}
      local image_x = 0
      while (image_x < image_width) do
        local fx = (figure_center_x + (((image_x // image_width) - 0.5) * figure_width))
        local fy = (figure_center_y + (((image_y // image_height) - 0.5) * figure_height))
        local distance = get_distance(fx, fy, max_step)
        local rgb = nil
        if use_distance_color_coding then
          rgb = get_color_coded_rgb(distance)
        else
          rgb = get_black_and_white_rgb(distance)
        end
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(row, rgb)
      image_x = (image_x + 1)
    end
    img = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(img, row)
  image_y = (image_y + 1)
end
return img
end
function rgb_to_string(c)
  return (((((("(" .. tostring(c.r)) .. ", ") .. tostring(c.g)) .. ", ") .. tostring(c.b)) .. ")")
end
img1 = get_image(10, 10, (-0.6), 0, 3.2, 50, true)
print((((type(rgb_to_string(img1[0 + 1][0 + 1])) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(rgb_to_string(img1[0 + 1][0 + 1]))) or (rgb_to_string(img1[0 + 1][0 + 1]))))
img2 = get_image(10, 10, (-0.6), 0, 3.2, 50, false)
print((((type(rgb_to_string(img2[0 + 1][0 + 1])) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(rgb_to_string(img2[0 + 1][0 + 1]))) or (rgb_to_string(img2[0 + 1][0 + 1]))))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
