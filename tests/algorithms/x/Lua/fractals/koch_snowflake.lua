-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function _mod(x, m)
    return (x - (math.floor(tonumber((x / m)) or 0) * m))
  end
  function sin(x)
    local y = (_mod((x + PI), TWO_PI) - PI)
    local y2 = (y * y)
    local y3 = (y2 * y)
    local y5 = (y3 * y2)
    local y7 = (y5 * y2)
    return (((y - (y3 / 6)) + (y5 / 120)) - (y7 / 5040))
  end
  function cos(x)
    local y = (_mod((x + PI), TWO_PI) - PI)
    local y2 = (y * y)
    local y4 = (y2 * y2)
    local y6 = (y4 * y2)
    return (((1 - (y2 / 2)) + (y4 / 24)) - (y6 / 720))
  end
  function rotate(v, angle_deg)
    local theta = ((angle_deg * PI) / 180)
    local c = cos(theta)
    local s = sin(theta)
    return {x = ((v.x * c) - (v.y * s)), y = ((v.x * s) + (v.y * c))}
  end
  function iteration_step(vectors)
    local new_vectors = {}
    local i = 0
    while (i < ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(vectors) - 1)) do
          local start = vectors[i + 1]
          local _end = vectors[(i + 1) + 1]
          new_vectors = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(new_vectors, start)
        local dx = (_end.x - start.x)
        local dy = (_end.y - start.y)
        local one_third = {x = (start.x + (dx / 3)), y = (start.y + (dy / 3))}
        local mid = rotate((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)({x = (dx / 3), y = (dy / 3)}), 60)
        local peak = {x = (one_third.x + mid.x), y = (one_third.y + mid.y)}
        local two_third = {x = (start.x + ((dx * 2) / 3)), y = (start.y + ((dy * 2) / 3))}
        new_vectors = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(new_vectors, one_third)
      new_vectors = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(new_vectors, peak)
    new_vectors = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(new_vectors, two_third)
  i = (i + 1)
end
new_vectors = (function(lst, item)
local res = {table.unpack(lst or {})}
table.insert(res, item)
return res
end)(new_vectors, vectors[((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(vectors) - 1) + 1])
    return new_vectors
  end
  function iterate(initial, steps)
    local vectors = initial
    local i = 0
    while (i < steps) do
      vectors = iteration_step(vectors)
      i = (i + 1)
    end
    return vectors
  end
  function vec_to_string(v)
    return (((("(" .. tostring(v.x)) .. ", ") .. tostring(v.y)) .. ")")
  end
  function vec_list_to_string(lst)
    local res = "["
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(lst)) do
          res = (res .. vec_to_string(lst[i + 1]))
          if (i < ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(lst) - 1)) then
                res = (res .. ", ")
              end
              i = (i + 1)
            end
            res = (res .. "]")
            return res
          end
          PI = 3.141592653589793
          TWO_PI = 6.283185307179586
          VECTOR_1 = {x = 0, y = 0}
          VECTOR_2 = {x = 0.5, y = 0.8660254}
          VECTOR_3 = {x = 1, y = 0}
          INITIAL_VECTORS = {VECTOR_1, VECTOR_2, VECTOR_3, VECTOR_1}
          example = iterate({VECTOR_1, VECTOR_3}, 1)
          print((((type(vec_list_to_string(example)) == "table")) and (
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(vec_list_to_string(example))) or (vec_list_to_string(example))))
          local _bench_end = os.clock()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
