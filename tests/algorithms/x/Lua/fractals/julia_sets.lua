-- Generated by Mochi v0.10.59 on 2025-08-07 08:10 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function complex_add(a, b)
    return {re = (a.re + b.re), im = (a.im + b.im)}
  end
  function complex_mul(a, b)
    local real = ((a.re * b.re) - (a.im * b.im))
    local imag = ((a.re * b.im) + (a.im * b.re))
    return {re = real, im = imag}
  end
  function sqrtApprox(x)
    local guess = (x / 2)
    local i = 0
    while (i < 20) do
      guess = ((guess + (x / guess)) / 2)
      i = (i + 1)
    end
    return guess
  end
  function complex_abs(a)
    return sqrtApprox(((a.re * a.re) + (a.im * a.im)))
  end
  function sin_taylor(x)
    local term = x
    local sum = x
    local i = 1
    while (i < 10) do
      local k1 = (2 * i)
      local k2 = ((2 * i) + 1)
      term = ((((-term) * x) * x) / (k1 * k2))
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function cos_taylor(x)
    local term = 1
    local sum = 1
    local i = 1
    while (i < 10) do
      local k1 = ((2 * i) - 1)
      local k2 = (2 * i)
      term = ((((-term) * x) * x) / (k1 * k2))
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function exp_taylor(x)
    local term = 1
    local sum = 1
    local i = 1
    while (i < 20) do
      term = ((term * x) / i)
      sum = (sum + term)
      i = (i + 1)
    end
    return sum
  end
  function complex_exp(z)
    local e = exp_taylor(z.re)
    return {re = (e * cos_taylor(z.im)), im = (e * sin_taylor(z.im))}
  end
  function eval_quadratic(c, z)
    return complex_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(complex_mul((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(z), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(z))), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c))
  end
  function eval_exponential(c, z)
    return complex_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(complex_exp((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(z))), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c))
  end
  function iterate_function(eval_function, c, nb_iterations, z0, infinity)
    local z_n = z0
    local i = 0
    while (i < nb_iterations) do
      z_n = eval_function((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(z_n))
      if (complex_abs(z_n) > infinity) then
        return z_n
      end
      i = (i + 1)
    end
    return z_n
  end
  function prepare_grid(window_size, nb_pixels)
    local grid = {}
    local i = 0
    while (i < nb_pixels) do
      local row = {}
      local j = 0
      while (j < nb_pixels) do
        local real = ((-window_size) + (((2 * window_size) * i) / (nb_pixels - 1)))
        local imag = ((-window_size) + (((2 * window_size) * j) / (nb_pixels - 1)))
        row = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(row, {re = real, im = imag})
      j = (j + 1)
    end
    grid = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(grid, row)
  i = (i + 1)
end
return grid
end
function julia_demo()
  local grid = prepare_grid(1, 5)
  local c_poly = {re = (-0.4), im = 0.6}
  local c_exp = {re = (-2), im = 0}
  local poly_result = {}
  local exp_result = {}
  local y = 0
  while (y < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(grid)) do
        local row_poly = {}
        local row_exp = {}
        local x = 0
        while (x < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(grid[y + 1])) do
              local z0 = grid[y + 1][x + 1]
              local z_poly = iterate_function(eval_quadratic, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c_poly), 20, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(z0), 4)
              local z_exp = iterate_function(eval_exponential, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(c_exp), 10, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(z0), 1e+10)
              row_poly = (function(lst, item)
              local res = {table.unpack(lst or {})}
              table.insert(res, item)
              return res
            end)(row_poly, (((complex_abs(z_poly) < 2)) and (1) or (0)))
            row_exp = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(row_exp, (((complex_abs(z_exp) < 10000)) and (1) or (0)))
          x = (x + 1)
        end
        poly_result = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(poly_result, row_poly)
      exp_result = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(exp_result, row_exp)
    y = (y + 1)
  end
  print(
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(poly_result))
  print(
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(exp_result))
end
julia_demo()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
