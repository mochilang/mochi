-- Generated by Mochi v0.10.63 on 2025-08-11 16:32 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function insertion_sort(a, start, end_)
    local arr = a
    local i = start
    while (i < end_) do
      local key = arr[i + 1]
      local j = i
      while ((j > start) and (arr[(j - 1) + 1] > key)) do
        arr[j + 1] = arr[(j - 1) + 1]
        j = (j - 1)
      end
      arr[j + 1] = key
      i = (i + 1)
    end
    return arr
  end
  function heapify(a, index, heap_size)
    local arr = a
    local largest = index
    local left = ((2 * index) + 1)
    local right = ((2 * index) + 2)
    if ((left < heap_size) and (arr[left + 1] > arr[largest + 1])) then
      largest = left
    end
    if ((right < heap_size) and (arr[right + 1] > arr[largest + 1])) then
      largest = right
    end
    if (largest ~= index) then
      local temp = arr[index + 1]
      arr[index + 1] = arr[largest + 1]
      arr[largest + 1] = temp
      arr = heapify(arr, largest, heap_size)
    end
    return arr
  end
  function heap_sort(a)
    local arr = a
    local n = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(arr)
        if (n <= 1) then
          return arr
        end
        local i = (n // 2)
        while true do
          arr = heapify(arr, i, n)
          if (i == 0) then
            break
          end
          i = (i - 1)
        end
        i = (n - 1)
        while (i > 0) do
          local temp = arr[0 + 1]
          arr[0 + 1] = arr[i + 1]
          arr[i + 1] = temp
          arr = heapify(arr, 0, i)
          i = (i - 1)
        end
        return arr
      end
      function median_of_3(arr, first, middle, last)
        local a = arr[first + 1]
        local b = arr[middle + 1]
        local c = arr[last + 1]
        if (((a > b) and (a < c)) or ((a < b) and (a > c))) then
          return a
        else
          if (((b > a) and (b < c)) or ((b < a) and (b > c))) then
            return b
          else
            return c
          end
        end
      end
      function partition(arr, low, high, pivot)
        local i = low
        local j = high
        while true do
          while (arr[i + 1] < pivot) do
            i = (i + 1)
          end
          j = (j - 1)
          while (pivot < arr[j + 1]) do
            j = (j - 1)
          end
          if (i >= j) then
            return i
          end
          local temp = arr[i + 1]
          arr[i + 1] = arr[j + 1]
          arr[j + 1] = temp
          i = (i + 1)
        end
      end
      function int_log2(n)
        local v = n
        local r = 0
        while (v > 1) do
          v = (v // 2)
          r = (r + 1)
        end
        return r
      end
      function intro_sort(arr, start, end_, size_threshold, max_depth)
        local array = arr
        local s = start
        local e = end_
        local depth = max_depth
        while ((e - s) > size_threshold) do
          if (depth == 0) then
            return heap_sort(array)
          end
          depth = (depth - 1)
          local pivot = median_of_3(array, s, ((s + ((e - s) // 2)) + 1), (e - 1))
          local p = partition(array, s, e, pivot)
          array = intro_sort(array, p, e, size_threshold, depth)
          e = p
        end
        local res = insertion_sort(array, s, e)
        local _ = (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(res)
            return res
          end
          function intro_sort_main(arr)
            if ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(arr) == 0) then
                  print(
                  (function(v)
                  local function encode(x)
                  if type(x) == "table" then
                    if x.__name and x.__order then
                      local parts = {x.__name, " {"}
                      for i, k in ipairs(x.__order) do
                        if i > 1 then parts[#parts+1] = ", " end
                        parts[#parts+1] = k .. " = " .. encode(x[k])
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    elseif #x > 0 then
                        local allTables = true
                        for _, v in ipairs(x) do
                          if type(v) ~= "table" then allTables = false break end
                        end
                        local parts = {}
                        if not allTables then parts[#parts+1] = "[" end
                        for i, val in ipairs(x) do
                          parts[#parts+1] = encode(val)
                          if i < #x then parts[#parts+1] = " " end
                        end
                        if not allTables then parts[#parts+1] = "]" end
                        return table.concat(parts)
                      else
                        local keys = {}
                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                        local parts = {"{"}
                        for i, k in ipairs(keys) do
                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                          if i < #keys then parts[#parts+1] = ", " end
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      end
                    elseif type(x) == "string" then
                        return '"' .. x .. '"'
                      else
                        return tostring(x)
                      end
                    end
                    return encode(v)
                  end)(arr))
                  return
                end
                local max_depth = (2 * int_log2((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(arr)))
                    local sorted = intro_sort(arr, 0, (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(arr), 16, max_depth)
                        print(
                        (function(v)
                        local function encode(x)
                        if type(x) == "table" then
                          if x.__name and x.__order then
                            local parts = {x.__name, " {"}
                            for i, k in ipairs(x.__order) do
                              if i > 1 then parts[#parts+1] = ", " end
                              parts[#parts+1] = k .. " = " .. encode(x[k])
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          elseif #x > 0 then
                              local allTables = true
                              for _, v in ipairs(x) do
                                if type(v) ~= "table" then allTables = false break end
                              end
                              local parts = {}
                              if not allTables then parts[#parts+1] = "[" end
                              for i, val in ipairs(x) do
                                parts[#parts+1] = encode(val)
                                if i < #x then parts[#parts+1] = " " end
                              end
                              if not allTables then parts[#parts+1] = "]" end
                              return table.concat(parts)
                            else
                              local keys = {}
                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                              local parts = {"{"}
                              for i, k in ipairs(keys) do
                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                if i < #keys then parts[#parts+1] = ", " end
                              end
                              parts[#parts+1] = "}"
                              return table.concat(parts)
                            end
                          elseif type(x) == "string" then
                              return '"' .. x .. '"'
                            else
                              return tostring(x)
                            end
                          end
                          return encode(v)
                        end)(sorted))
                      end
                      example1 = {4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12}
                      intro_sort_main(example1)
                      example2 = {21, 15, 11, 45, (-2), (-11), 46}
                      intro_sort_main(example2)
                      local _bench_end = os.clock()
                      collectgarbage()
                      local _bench_end_mem = collectgarbage('count') * 1024
                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                    end;
