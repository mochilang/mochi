-- Generated by Mochi v0.10.61 on 2025-08-08 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function subarray(xs, start, _end)
    local result = {}
    local k = start
    while (k < _end) do
      result = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(result, xs[k + 1])
    k = (k + 1)
  end
  return result
end
function merge(left_half, right_half)
  local result = {}
  local i = 0
  local j = 0
  while ((i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(left_half)) and (j < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(right_half))) do
            if (left_half[i + 1] < right_half[j + 1]) then
              result = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(result, left_half[i + 1])
            i = (i + 1)
          else
            result = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(result, right_half[j + 1])
          j = (j + 1)
        end
      end
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(left_half)) do
            result = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(result, left_half[i + 1])
          i = (i + 1)
        end
        while (j < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(right_half)) do
              result = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(result, right_half[j + 1])
            j = (j + 1)
          end
          return result
        end
        function merge_sort(array)
          if ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(array) <= 1) then
                return array
              end
              local middle = ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(array) // 2)
                  local left_half = subarray(array, 0, middle)
                  local right_half = subarray(array, middle, (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(array))
                      local sorted_left = merge_sort(left_half)
                      local sorted_right = merge_sort(right_half)
                      return merge(sorted_left, sorted_right)
                    end
                    function split_into_blocks(data, block_size)
                      local blocks = {}
                      local i = 0
                      while (i < (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(data)) do
                            local _end = ((((i + block_size) < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(data))) and ((i + block_size)) or ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(data)))
                                    local block = subarray(data, i, _end)
                                    local sorted_block = merge_sort(block)
                                    blocks = (function(lst, item)
                                    lst = lst or {}
                                    table.insert(lst, item)
                                    return lst
                                  end)(blocks, sorted_block)
                                  i = _end
                                end
                                return blocks
                              end
                              function merge_blocks(blocks)
                                local num_blocks = (function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(blocks)
                                    local indices = {}
                                    local i = 0
                                    while (i < num_blocks) do
                                      indices = (function(lst, item)
                                      lst = lst or {}
                                      table.insert(lst, item)
                                      return lst
                                    end)(indices, 0)
                                    i = (i + 1)
                                  end
                                  local result = {}
                                  local done = false
                                  while (not done) do
                                    done = true
                                    local min_val = 0
                                    local min_block = (0 - 1)
                                    local j = 0
                                    while (j < num_blocks) do
                                      local idx = indices[j + 1]
                                      if (idx < (function(v)
                                      if type(v) == 'table' and v.items ~= nil then
                                        return #v.items
                                      elseif type(v) == 'table' and (v[1] == nil) then
                                          local c = 0
                                          for _ in pairs(v) do c = c + 1 end
                                          return c
                                        elseif type(v) == 'string' then
                                            local l = utf8.len(v)
                                            if l then return l end
                                            return #v
                                          elseif type(v) == 'table' then
                                              return #v
                                            else
                                              return 0
                                            end
                                          end)(blocks[j + 1])) then
                                            local val = blocks[j + 1][idx + 1]
                                            if ((min_block == (0 - 1)) or (val < min_val)) then
                                              min_val = val
                                              min_block = j
                                            end
                                            done = false
                                          end
                                          j = (j + 1)
                                        end
                                        if (not done) then
                                          result = (function(lst, item)
                                          lst = lst or {}
                                          table.insert(lst, item)
                                          return lst
                                        end)(result, min_val)
                                        indices[min_block + 1] = (indices[min_block + 1] + 1)
                                      end
                                    end
                                    return result
                                  end
                                  function external_sort(data, block_size)
                                    local blocks = split_into_blocks(data, block_size)
                                    return merge_blocks(blocks)
                                  end
                                  function main()
                                    local data = {7, 1, 5, 3, 9, 2, 6, 4, 8, 0}
                                    local sorted_data = external_sort(data, 3)
                                    print(
                                    (function(v)
                                    local function encode(x)
                                    if type(x) == "table" then
                                      if x.__name and x.__order then
                                        local parts = {x.__name, " {"}
                                        for i, k in ipairs(x.__order) do
                                          if i > 1 then parts[#parts+1] = ", " end
                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      elseif #x > 0 then
                                          local allTables = true
                                          for _, v in ipairs(x) do
                                            if type(v) ~= "table" then allTables = false break end
                                          end
                                          local parts = {}
                                          if not allTables then parts[#parts+1] = "[" end
                                          for i, val in ipairs(x) do
                                            parts[#parts+1] = encode(val)
                                            if i < #x then parts[#parts+1] = " " end
                                          end
                                          if not allTables then parts[#parts+1] = "]" end
                                          return table.concat(parts)
                                        else
                                          local keys = {}
                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                          local parts = {"{"}
                                          for i, k in ipairs(keys) do
                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                            if i < #keys then parts[#parts+1] = ", " end
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        end
                                      elseif type(x) == "string" then
                                          return '"' .. x .. '"'
                                        else
                                          return tostring(x)
                                        end
                                      end
                                      return encode(v)
                                    end)(sorted_data))
                                  end
                                  main()
                                  local _bench_end = os.clock()
                                  collectgarbage()
                                  local _bench_end_mem = collectgarbage('count') * 1024
                                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                end;
