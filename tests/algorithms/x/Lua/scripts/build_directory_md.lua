-- Generated by Mochi v0.10.61 on 2025-08-08 16:06 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then
  e = #lst
elseif e < 0 then
    e = #lst + e
  end
  local r = {}
  for i = s + 1, e do
    r[#r+1] = lst[i]
  end
  return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function split(s, sep)
    local parts = {}
    local cur = ""
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(s)) do
          if ((((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(sep) > 0) and ((i + (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(sep)) <= (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(s))) and (_substring(s, i, (i + (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(sep))) == sep)) then
                            parts = (function(lst, item)
                            lst = lst or {}
                            table.insert(lst, item)
                            return lst
                          end)(parts, cur)
                          cur = ""
                          i = (i + (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(sep))
                            else
                              cur = (cur .. _substring(s, i, (i + 1)))
                              i = (i + 1)
                            end
                          end
                          parts = (function(lst, item)
                          lst = lst or {}
                          table.insert(lst, item)
                          return lst
                        end)(parts, cur)
                        return parts
                      end
                      function join(xs, sep)
                        local res = ""
                        local i = 0
                        while (i < (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(xs)) do
                              if (i > 0) then
                                res = (res .. sep)
                              end
                              res = (res .. xs[i + 1])
                              i = (i + 1)
                            end
                            return res
                          end
                          function _repeat(s, n)
                            local out = ""
                            local i = 0
                            while (i < n) do
                              out = (out .. s)
                              i = (i + 1)
                            end
                            return out
                          end
                          function replace_char(s, old, new)
                            local out = ""
                            local i = 0
                            while (i < (function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(s)) do
                                  local c = _substring(s, i, (i + 1))
                                  if (c == old) then
                                    out = (out .. new)
                                  else
                                    out = (out .. c)
                                  end
                                  i = (i + 1)
                                end
                                return out
                              end
                              function contains(s, sub)
                                if ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(sub) == 0) then
                                      return true
                                    end
                                    local i = 0
                                    while ((i + (function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(sub)) <= (function(v)
                                        if type(v) == 'table' and v.items ~= nil then
                                          return #v.items
                                        elseif type(v) == 'table' and (v[1] == nil) then
                                            local c = 0
                                            for _ in pairs(v) do c = c + 1 end
                                            return c
                                          elseif type(v) == 'string' then
                                              local l = utf8.len(v)
                                              if l then return l end
                                              return #v
                                            elseif type(v) == 'table' then
                                                return #v
                                              else
                                                return 0
                                              end
                                            end)(s)) do
                                              if (_substring(s, i, (i + (function(v)
                                              if type(v) == 'table' and v.items ~= nil then
                                                return #v.items
                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                  local c = 0
                                                  for _ in pairs(v) do c = c + 1 end
                                                  return c
                                                elseif type(v) == 'string' then
                                                    local l = utf8.len(v)
                                                    if l then return l end
                                                    return #v
                                                  elseif type(v) == 'table' then
                                                      return #v
                                                    else
                                                      return 0
                                                    end
                                                  end)(sub))) == sub) then
                                                    return true
                                                  end
                                                  i = (i + 1)
                                                end
                                                return false
                                              end
                                              function file_extension(name)
                                                local i = ((function(v)
                                                if type(v) == 'table' and v.items ~= nil then
                                                  return #v.items
                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                    local c = 0
                                                    for _ in pairs(v) do c = c + 1 end
                                                    return c
                                                  elseif type(v) == 'string' then
                                                      local l = utf8.len(v)
                                                      if l then return l end
                                                      return #v
                                                    elseif type(v) == 'table' then
                                                        return #v
                                                      else
                                                        return 0
                                                      end
                                                    end)(name) - 1)
                                                    while (i >= 0) do
                                                      if (_substring(name, i, (i + 1)) == ".") then
                                                        return string.sub(name, (i + 1), #name)
                                                      end
                                                      i = (i - 1)
                                                    end
                                                    return ""
                                                  end
                                                  function remove_extension(name)
                                                    local i = ((function(v)
                                                    if type(v) == 'table' and v.items ~= nil then
                                                      return #v.items
                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                        local c = 0
                                                        for _ in pairs(v) do c = c + 1 end
                                                        return c
                                                      elseif type(v) == 'string' then
                                                          local l = utf8.len(v)
                                                          if l then return l end
                                                          return #v
                                                        elseif type(v) == 'table' then
                                                            return #v
                                                          else
                                                            return 0
                                                          end
                                                        end)(name) - 1)
                                                        while (i >= 0) do
                                                          if (_substring(name, i, (i + 1)) == ".") then
                                                            return string.sub(name, 1, i)
                                                          end
                                                          i = (i - 1)
                                                        end
                                                        return name
                                                      end
                                                      function title_case(s)
                                                        local out = ""
                                                        local cap = true
                                                        local i = 0
                                                        while (i < (function(v)
                                                        if type(v) == 'table' and v.items ~= nil then
                                                          return #v.items
                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                            local c = 0
                                                            for _ in pairs(v) do c = c + 1 end
                                                            return c
                                                          elseif type(v) == 'string' then
                                                              local l = utf8.len(v)
                                                              if l then return l end
                                                              return #v
                                                            elseif type(v) == 'table' then
                                                                return #v
                                                              else
                                                                return 0
                                                              end
                                                            end)(s)) do
                                                              local c = _substring(s, i, (i + 1))
                                                              if (c == " ") then
                                                                out = (out .. c)
                                                                cap = true
                                                              else
                                                                if cap then
                                                                  out = (out .. string.upper(c))
                                                                  cap = false
                                                                else
                                                                  out = (out .. string.lower(c))
                                                                end
                                                              end
                                                              i = (i + 1)
                                                            end
                                                            return out
                                                          end
                                                          function count_char(s, ch)
                                                            local cnt = 0
                                                            local i = 0
                                                            while (i < (function(v)
                                                            if type(v) == 'table' and v.items ~= nil then
                                                              return #v.items
                                                            elseif type(v) == 'table' and (v[1] == nil) then
                                                                local c = 0
                                                                for _ in pairs(v) do c = c + 1 end
                                                                return c
                                                              elseif type(v) == 'string' then
                                                                  local l = utf8.len(v)
                                                                  if l then return l end
                                                                  return #v
                                                                elseif type(v) == 'table' then
                                                                    return #v
                                                                  else
                                                                    return 0
                                                                  end
                                                                end)(s)) do
                                                                  if (_substring(s, i, (i + 1)) == ch) then
                                                                    cnt = (cnt + 1)
                                                                  end
                                                                  i = (i + 1)
                                                                end
                                                                return cnt
                                                              end
                                                              function md_prefix(level)
                                                                if (level == 0) then
                                                                  return "\n##"
                                                                end
                                                                return (string.rep("  ", level) .. "*")
                                                              end
                                                              function print_path(old_path, new_path)
                                                                local old_parts = _split(old_path, "/")
                                                                local new_parts = _split(new_path, "/")
                                                                local i = 0
                                                                while (i < (function(v)
                                                                if type(v) == 'table' and v.items ~= nil then
                                                                  return #v.items
                                                                elseif type(v) == 'table' and (v[1] == nil) then
                                                                    local c = 0
                                                                    for _ in pairs(v) do c = c + 1 end
                                                                    return c
                                                                  elseif type(v) == 'string' then
                                                                      local l = utf8.len(v)
                                                                      if l then return l end
                                                                      return #v
                                                                    elseif type(v) == 'table' then
                                                                        return #v
                                                                      else
                                                                        return 0
                                                                      end
                                                                    end)(new_parts)) do
                                                                      if (((i >= (function(v)
                                                                      if type(v) == 'table' and v.items ~= nil then
                                                                        return #v.items
                                                                      elseif type(v) == 'table' and (v[1] == nil) then
                                                                          local c = 0
                                                                          for _ in pairs(v) do c = c + 1 end
                                                                          return c
                                                                        elseif type(v) == 'string' then
                                                                            local l = utf8.len(v)
                                                                            if l then return l end
                                                                            return #v
                                                                          elseif type(v) == 'table' then
                                                                              return #v
                                                                            else
                                                                              return 0
                                                                            end
                                                                          end)(old_parts)) or (old_parts[i + 1] ~= new_parts[i + 1])) and (new_parts[i + 1] ~= "")) then
                                                                            local title = title_case(replace_char(new_parts[i + 1], "_", " "))
                                                                            print((((type(((md_prefix(i) .. " ") .. title)) == "table")) and (
                                                                            (function(v)
                                                                            local function encode(x)
                                                                            if type(x) == "table" then
                                                                              if x.__name and x.__order then
                                                                                local parts = {x.__name, " {"}
                                                                                for i, k in ipairs(x.__order) do
                                                                                  if i > 1 then parts[#parts+1] = ", " end
                                                                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                end
                                                                                parts[#parts+1] = "}"
                                                                                return table.concat(parts)
                                                                              elseif #x > 0 then
                                                                                  local allTables = true
                                                                                  for _, v in ipairs(x) do
                                                                                    if type(v) ~= "table" then allTables = false break end
                                                                                  end
                                                                                  local parts = {}
                                                                                  if not allTables then parts[#parts+1] = "[" end
                                                                                  for i, val in ipairs(x) do
                                                                                    parts[#parts+1] = encode(val)
                                                                                    if i < #x then parts[#parts+1] = " " end
                                                                                  end
                                                                                  if not allTables then parts[#parts+1] = "]" end
                                                                                  return table.concat(parts)
                                                                                else
                                                                                  local keys = {}
                                                                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                  local parts = {"{"}
                                                                                  for i, k in ipairs(keys) do
                                                                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                    if i < #keys then parts[#parts+1] = ", " end
                                                                                  end
                                                                                  parts[#parts+1] = "}"
                                                                                  return table.concat(parts)
                                                                                end
                                                                              elseif type(x) == "string" then
                                                                                  return '"' .. x .. '"'
                                                                                else
                                                                                  return tostring(x)
                                                                                end
                                                                              end
                                                                              return encode(v)
                                                                            end)(((md_prefix(i) .. " ") .. title))) or (((md_prefix(i) .. " ") .. title))))
                                                                          end
                                                                          i = (i + 1)
                                                                        end
                                                                        return new_path
                                                                      end
                                                                      function sort_strings(xs)
                                                                        local arr = xs
                                                                        local i = 0
                                                                        while (i < (function(v)
                                                                        if type(v) == 'table' and v.items ~= nil then
                                                                          return #v.items
                                                                        elseif type(v) == 'table' and (v[1] == nil) then
                                                                            local c = 0
                                                                            for _ in pairs(v) do c = c + 1 end
                                                                            return c
                                                                          elseif type(v) == 'string' then
                                                                              local l = utf8.len(v)
                                                                              if l then return l end
                                                                              return #v
                                                                            elseif type(v) == 'table' then
                                                                                return #v
                                                                              else
                                                                                return 0
                                                                              end
                                                                            end)(arr)) do
                                                                              local min_idx = i
                                                                              local j = (i + 1)
                                                                              while (j < (function(v)
                                                                              if type(v) == 'table' and v.items ~= nil then
                                                                                return #v.items
                                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                                  local c = 0
                                                                                  for _ in pairs(v) do c = c + 1 end
                                                                                  return c
                                                                                elseif type(v) == 'string' then
                                                                                    local l = utf8.len(v)
                                                                                    if l then return l end
                                                                                    return #v
                                                                                  elseif type(v) == 'table' then
                                                                                      return #v
                                                                                    else
                                                                                      return 0
                                                                                    end
                                                                                  end)(arr)) do
                                                                                    if (arr[j + 1] < arr[min_idx + 1]) then
                                                                                      min_idx = j
                                                                                    end
                                                                                    j = (j + 1)
                                                                                  end
                                                                                  local tmp = arr[i + 1]
                                                                                  arr[i + 1] = arr[min_idx + 1]
                                                                                  arr[min_idx + 1] = tmp
                                                                                  i = (i + 1)
                                                                                end
                                                                                return arr
                                                                              end
                                                                              function good_file_paths(paths)
                                                                                local res = {}
                                                                                for _, p in ipairs(paths) do
                                                                                  local parts = _split(p, "/")
                                                                                  local skip = false
                                                                                  local k = 0
                                                                                  while (k < ((function(v)
                                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                                    return #v.items
                                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                                      local c = 0
                                                                                      for _ in pairs(v) do c = c + 1 end
                                                                                      return c
                                                                                    elseif type(v) == 'string' then
                                                                                        local l = utf8.len(v)
                                                                                        if l then return l end
                                                                                        return #v
                                                                                      elseif type(v) == 'table' then
                                                                                          return #v
                                                                                        else
                                                                                          return 0
                                                                                        end
                                                                                      end)(parts) - 1)) do
                                                                                        local part = parts[k]
                                                                                        if ((((part == "scripts") or (string.sub(part, (0 + 1), 1) == ".")) or (string.sub(part, (0 + 1), 1) == "_")) or (function(lst, v)
                                                                                        for _, x in ipairs(lst) do
                                                                                          if x == v then
                                                                                            return true
                                                                                          end
                                                                                        end
                                                                                        return false
                                                                                      end)(part, "venv")) then
                                                                                        skip = true
                                                                                      end
                                                                                      k = (k + 1)
                                                                                    end
                                                                                    if skip then
                                                                                      goto __cont_1
                                                                                    end
                                                                                    local filename = parts[((function(v)
                                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                                      return #v.items
                                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                                        local c = 0
                                                                                        for _ in pairs(v) do c = c + 1 end
                                                                                        return c
                                                                                      elseif type(v) == 'string' then
                                                                                          local l = utf8.len(v)
                                                                                          if l then return l end
                                                                                          return #v
                                                                                        elseif type(v) == 'table' then
                                                                                            return #v
                                                                                          else
                                                                                            return 0
                                                                                          end
                                                                                        end)(parts) - 1) + 1]
                                                                                        if (filename == "__init__.py") then
                                                                                          goto __cont_1
                                                                                        end
                                                                                        local ext = file_extension(filename)
                                                                                        if ((ext == ".py") or (ext == ".ipynb")) then
                                                                                          res = (function(lst, item)
                                                                                          lst = lst or {}
                                                                                          table.insert(lst, item)
                                                                                          return lst
                                                                                        end)(res, p)
                                                                                      end
                                                                                      ::__cont_1::
                                                                                    end
                                                                                    return res
                                                                                  end
                                                                                  function print_directory_md(paths)
                                                                                    local files = sort_strings(good_file_paths(paths))
                                                                                    local old_path = ""
                                                                                    local i = 0
                                                                                    while (i < (function(v)
                                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                                      return #v.items
                                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                                        local c = 0
                                                                                        for _ in pairs(v) do c = c + 1 end
                                                                                        return c
                                                                                      elseif type(v) == 'string' then
                                                                                          local l = utf8.len(v)
                                                                                          if l then return l end
                                                                                          return #v
                                                                                        elseif type(v) == 'table' then
                                                                                            return #v
                                                                                          else
                                                                                            return 0
                                                                                          end
                                                                                        end)(files)) do
                                                                                          local fp = files[i + 1]
                                                                                          local parts = _split(fp, "/")
                                                                                          local filename = parts[((function(v)
                                                                                          if type(v) == 'table' and v.items ~= nil then
                                                                                            return #v.items
                                                                                          elseif type(v) == 'table' and (v[1] == nil) then
                                                                                              local c = 0
                                                                                              for _ in pairs(v) do c = c + 1 end
                                                                                              return c
                                                                                            elseif type(v) == 'string' then
                                                                                                local l = utf8.len(v)
                                                                                                if l then return l end
                                                                                                return #v
                                                                                              elseif type(v) == 'table' then
                                                                                                  return #v
                                                                                                else
                                                                                                  return 0
                                                                                                end
                                                                                              end)(parts) - 1) + 1]
                                                                                              local filepath = ""
                                                                                              if ((function(v)
                                                                                              if type(v) == 'table' and v.items ~= nil then
                                                                                                return #v.items
                                                                                              elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                  local c = 0
                                                                                                  for _ in pairs(v) do c = c + 1 end
                                                                                                  return c
                                                                                                elseif type(v) == 'string' then
                                                                                                    local l = utf8.len(v)
                                                                                                    if l then return l end
                                                                                                    return #v
                                                                                                  elseif type(v) == 'table' then
                                                                                                      return #v
                                                                                                    else
                                                                                                      return 0
                                                                                                    end
                                                                                                  end)(parts) > 1) then
                                                                                                    filepath = join((function(lst,s,e)
                                                                                                    local r={}
                                                                                                    for i=s+1,e do
                                                                                                      r[#r+1]=lst[i]
                                                                                                    end
                                                                                                    return r
                                                                                                  end)(parts, 0, ((function(v)
                                                                                                  if type(v) == 'table' and v.items ~= nil then
                                                                                                    return #v.items
                                                                                                  elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                      local c = 0
                                                                                                      for _ in pairs(v) do c = c + 1 end
                                                                                                      return c
                                                                                                    elseif type(v) == 'string' then
                                                                                                        local l = utf8.len(v)
                                                                                                        if l then return l end
                                                                                                        return #v
                                                                                                      elseif type(v) == 'table' then
                                                                                                          return #v
                                                                                                        else
                                                                                                          return 0
                                                                                                        end
                                                                                                      end)(parts) - 1)), "/")
                                                                                                    end
                                                                                                    if (filepath ~= old_path) then
                                                                                                      old_path = print_path(old_path, filepath)
                                                                                                    end
                                                                                                    local indent = 0
                                                                                                    if ((function(v)
                                                                                                    if type(v) == 'table' and v.items ~= nil then
                                                                                                      return #v.items
                                                                                                    elseif type(v) == 'table' and (v[1] == nil) then
                                                                                                        local c = 0
                                                                                                        for _ in pairs(v) do c = c + 1 end
                                                                                                        return c
                                                                                                      elseif type(v) == 'string' then
                                                                                                          local l = utf8.len(v)
                                                                                                          if l then return l end
                                                                                                          return #v
                                                                                                        elseif type(v) == 'table' then
                                                                                                            return #v
                                                                                                          else
                                                                                                            return 0
                                                                                                          end
                                                                                                        end)(filepath) > 0) then
                                                                                                          indent = (count_char(filepath, "/") + 1)
                                                                                                        end
                                                                                                        local url = replace_char(fp, " ", "%20")
                                                                                                        local name = title_case(replace_char(remove_extension(filename), "_", " "))
                                                                                                        print((((type((((((md_prefix(indent) .. " [") .. name) .. "](") .. url) .. ")")) == "table")) and (
                                                                                                        (function(v)
                                                                                                        local function encode(x)
                                                                                                        if type(x) == "table" then
                                                                                                          if x.__name and x.__order then
                                                                                                            local parts = {x.__name, " {"}
                                                                                                            for i, k in ipairs(x.__order) do
                                                                                                              if i > 1 then parts[#parts+1] = ", " end
                                                                                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                                                                                            end
                                                                                                            parts[#parts+1] = "}"
                                                                                                            return table.concat(parts)
                                                                                                          elseif #x > 0 then
                                                                                                              local allTables = true
                                                                                                              for _, v in ipairs(x) do
                                                                                                                if type(v) ~= "table" then allTables = false break end
                                                                                                              end
                                                                                                              local parts = {}
                                                                                                              if not allTables then parts[#parts+1] = "[" end
                                                                                                              for i, val in ipairs(x) do
                                                                                                                parts[#parts+1] = encode(val)
                                                                                                                if i < #x then parts[#parts+1] = " " end
                                                                                                              end
                                                                                                              if not allTables then parts[#parts+1] = "]" end
                                                                                                              return table.concat(parts)
                                                                                                            else
                                                                                                              local keys = {}
                                                                                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                                                                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                                                                                              local parts = {"{"}
                                                                                                              for i, k in ipairs(keys) do
                                                                                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                                                                                if i < #keys then parts[#parts+1] = ", " end
                                                                                                              end
                                                                                                              parts[#parts+1] = "}"
                                                                                                              return table.concat(parts)
                                                                                                            end
                                                                                                          elseif type(x) == "string" then
                                                                                                              return '"' .. x .. '"'
                                                                                                            else
                                                                                                              return tostring(x)
                                                                                                            end
                                                                                                          end
                                                                                                          return encode(v)
                                                                                                        end)((((((md_prefix(indent) .. " [") .. name) .. "](") .. url) .. ")"))) or ((((((md_prefix(indent) .. " [") .. name) .. "](") .. url) .. ")"))))
                                                                                                        i = (i + 1)
                                                                                                      end
                                                                                                    end
                                                                                                    sample = {"data_structures/linked_list.py", "data_structures/binary_tree.py", "math/number_theory/prime_check.py", "math/number_theory/greatest_common_divisor.ipynb"}
                                                                                                    print_directory_md(sample)
                                                                                                    local _bench_end = os.clock()
                                                                                                    collectgarbage()
                                                                                                    local _bench_end_mem = collectgarbage('count') * 1024
                                                                                                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                                                                                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                                                                                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                                                                                  end;
