-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function empty_list()
    return {next = {}, head = NULL}
  end
  function add_node(list, value)
    local nexts = list.next
    local new_index = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(nexts)
        nexts = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(nexts, NULL)
      if (list.head == NULL) then
        return {next = nexts, head = new_index}
      end
      local last = list.head
      while (nexts[last + 1] ~= NULL) do
        last = nexts[last + 1]
      end
      local new_nexts = {}
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(nexts)) do
            if (i == last) then
              new_nexts = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(new_nexts, new_index)
          else
            new_nexts = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(new_nexts, nexts[i + 1])
        end
        i = (i + 1)
      end
      return {next = new_nexts, head = list.head}
    end
    function set_next(list, index, next_index)
      local nexts = list.next
      local new_nexts = {}
      local i = 0
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(nexts)) do
            if (i == index) then
              new_nexts = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(new_nexts, next_index)
          else
            new_nexts = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(new_nexts, nexts[i + 1])
        end
        i = (i + 1)
      end
      return {next = new_nexts, head = list.head}
    end
    function detect_cycle(list)
      if (list.head == NULL) then
        return false
      end
      local nexts = list.next
      local slow = list.head
      local fast = list.head
      while ((fast ~= NULL) and (nexts[fast + 1] ~= NULL)) do
        slow = nexts[slow + 1]
        fast = nexts[nexts[fast + 1] + 1]
        if (slow == fast) then
          return true
        end
      end
      return false
    end
    function main()
      local ll = empty_list()
      ll = add_node((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ll), 1)
      ll = add_node((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ll), 2)
      ll = add_node((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ll), 3)
      ll = add_node((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ll), 4)
      ll = set_next((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ll), 3, 1)
      print((((type(detect_cycle(ll)) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(detect_cycle(ll))) or (detect_cycle(ll))))
    end
    NULL = (0 - 1)
    main()
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
