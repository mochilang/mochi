-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function random()
    seed = (((seed * 13) + 7) % 100)
    return (seed / 100)
  end
  function random_level()
    local lvl = 1
    while ((random() < P) and (lvl < MAX_LEVEL)) do
      lvl = (lvl + 1)
    end
    return lvl
  end
  function empty_forward()
    local f = {}
    local i = 0
    while (i < MAX_LEVEL) do
      f = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(f, NIL)
    i = (i + 1)
  end
  return f
end
function init()
  node_keys = {(-1)}
  node_vals = {0}
  node_forwards = {empty_forward()}
  level = 1
end
function insert(key, value)
  local update = {}
  local i = 0
  while (i < MAX_LEVEL) do
    update = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(update, 0)
  i = (i + 1)
end
local x = 0
i = (level - 1)
while (i >= 0) do
  while ((node_forwards[x + 1][i + 1] ~= NIL) and (node_keys[node_forwards[x + 1][i + 1] + 1] < key)) do
    x = node_forwards[x + 1][i + 1]
  end
  update[i + 1] = x
  i = (i - 1)
end
x = node_forwards[x + 1][0 + 1]
if ((x ~= NIL) and (node_keys[x + 1] == key)) then
  node_vals[x + 1] = value
  return
end
local lvl = random_level()
if (lvl > level) then
  local j = level
  while (j < lvl) do
    update[j + 1] = 0
    j = (j + 1)
  end
  level = lvl
end
node_keys = (function(lst, item)
lst = lst or {}
table.insert(lst, item)
return lst
end)(node_keys, key)
node_vals = (function(lst, item)
lst = lst or {}
table.insert(lst, item)
return lst
end)(node_vals, value)
local forwards = empty_forward()
local idx = ((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)(node_keys) - 1)
    i = 0
    while (i < lvl) do
      forwards[i + 1] = node_forwards[update[i + 1] + 1][i + 1]
      node_forwards[update[i + 1] + 1][i + 1] = idx
      i = (i + 1)
    end
    node_forwards = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(node_forwards, forwards)
end
function find(key)
  local x = 0
  local i = (level - 1)
  while (i >= 0) do
    while ((node_forwards[x + 1][i + 1] ~= NIL) and (node_keys[node_forwards[x + 1][i + 1] + 1] < key)) do
      x = node_forwards[x + 1][i + 1]
    end
    i = (i - 1)
  end
  x = node_forwards[x + 1][0 + 1]
  if ((x ~= NIL) and (node_keys[x + 1] == key)) then
    return node_vals[x + 1]
  end
  return (-1)
end
function delete(key)
  local update = {}
  local i = 0
  while (i < MAX_LEVEL) do
    update = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(update, 0)
  i = (i + 1)
end
local x = 0
i = (level - 1)
while (i >= 0) do
  while ((node_forwards[x + 1][i + 1] ~= NIL) and (node_keys[node_forwards[x + 1][i + 1] + 1] < key)) do
    x = node_forwards[x + 1][i + 1]
  end
  update[i + 1] = x
  i = (i - 1)
end
x = node_forwards[x + 1][0 + 1]
if ((x == NIL) or (node_keys[x + 1] ~= key)) then
  return
end
i = 0
while (i < level) do
  if (node_forwards[update[i + 1] + 1][i + 1] == x) then
    node_forwards[update[i + 1] + 1][i + 1] = node_forwards[x + 1][i + 1]
  end
  i = (i + 1)
end
while ((level > 1) and (node_forwards[0 + 1][(level - 1) + 1] == NIL)) do
  level = (level - 1)
end
end
function to_string()
  local s = ""
  local x = node_forwards[0 + 1][0 + 1]
  while (x ~= NIL) do
    if (s ~= "") then
      s = (s .. " -> ")
    end
    s = (((s .. _str(node_keys[x + 1])) .. ":") .. _str(node_vals[x + 1]))
    x = node_forwards[x + 1][0 + 1]
  end
  return s
end
function main()
  init()
  insert(2, 2)
  insert(4, 4)
  insert(6, 4)
  insert(4, 5)
  insert(8, 4)
  insert(9, 4)
  delete(4)
  print((((type(to_string()) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(to_string())) or (to_string())))
end
NIL = (0 - 1)
MAX_LEVEL = 6
P = 0.5
seed = 1
node_keys = {}
node_vals = {}
node_forwards = {}
level = 1
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
