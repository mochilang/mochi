-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function swap_up(i)
    local temp = heap[i + 1]
    local idx = i
    while ((idx // 2) > 0) do
      if (heap[idx + 1] > heap[(idx // 2) + 1]) then
        heap[idx + 1] = heap[(idx // 2) + 1]
        heap[(idx // 2) + 1] = temp
      end
      idx = (idx // 2)
    end
  end
  function insert(value)
    heap = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(heap, value)
  size = (size + 1)
  swap_up(size)
end
function swap_down(i)
  local idx = i
  while (size >= (2 * idx)) do
    local bigger_child = (((((2 * idx) + 1) > size)) and ((2 * idx)) or ((((heap[(2 * idx) + 1] > heap[((2 * idx) + 1) + 1])) and ((2 * idx)) or (((2 * idx) + 1)))))
    local temp = heap[idx + 1]
    if (heap[idx + 1] < heap[bigger_child + 1]) then
      heap[idx + 1] = heap[bigger_child + 1]
      heap[bigger_child + 1] = temp
    end
    idx = bigger_child
  end
end
function shrink()
  local new_heap = {}
  local i = 0
  while (i <= size) do
    new_heap = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(new_heap, heap[i + 1])
  i = (i + 1)
end
heap = new_heap
end
function pop()
  local max_value = heap[1 + 1]
  heap[1 + 1] = heap[size + 1]
  size = (size - 1)
  shrink()
  swap_down(1)
  return max_value
end
function get_list()
  local out = {}
  local i = 1
  while (i <= size) do
    out = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(out, heap[i + 1])
  i = (i + 1)
end
return out
end
function len()
  return size
end
heap = {0}
size = 0
insert(6)
insert(10)
insert(15)
insert(12)
print(pop())
print(pop())
print(
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(get_list()))
print((function(v)
if type(v) == 'table' and v.items ~= nil then
  return #v.items
elseif type(v) == 'table' and (v[1] == nil) then
    local c = 0
    for _ in pairs(v) do c = c + 1 end
    return c
  elseif type(v) == 'string' then
      local l = utf8.len(v)
      if l then return l end
      return #v
    elseif type(v) == 'table' then
        return #v
      else
        return 0
      end
    end)())
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
