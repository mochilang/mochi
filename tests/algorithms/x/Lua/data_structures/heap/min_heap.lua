-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function get_parent_idx(idx)
    return ((idx - 1) // 2)
  end
  function get_left_child_idx(idx)
    return ((idx * 2) + 1)
  end
  function get_right_child_idx(idx)
    return ((idx * 2) + 2)
  end
  function remove_key(m, k)
    local out = {}
    for key in pairs(m) do
      if (key ~= k) then
        out[key] = m[key]
      end
    end
    return out
  end
  function slice_without_last(xs)
    local res = {}
    local i = 0
    while (i < ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs) - 1)) do
          res = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(res, xs[i + 1])
        i = (i + 1)
      end
      return res
    end
    function sift_down(mh, idx)
      local heap = mh.heap
      local idx_map = mh.idx_of_element
      local i = idx
      while true do
        local left = get_left_child_idx(i)
        local right = get_right_child_idx(i)
        local smallest = i
        if ((left < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(heap)) and (heap[left + 1].val < heap[smallest + 1].val)) then
              smallest = left
            end
            if ((right < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(heap)) and (heap[right + 1].val < heap[smallest + 1].val)) then
                  smallest = right
                end
                if (smallest ~= i) then
                  local tmp = heap[i + 1]
                  heap[i + 1] = heap[smallest + 1]
                  heap[smallest + 1] = tmp
                  idx_map[heap[i + 1].name] = i
                  idx_map[heap[smallest + 1].name] = smallest
                  i = smallest
                else
                  break
                end
              end
              mh.heap = heap
              mh.idx_of_element = idx_map
            end
            function sift_up(mh, idx)
              local heap = mh.heap
              local idx_map = mh.idx_of_element
              local i = idx
              local p = get_parent_idx(i)
              while ((p >= 0) and (heap[p + 1].val > heap[i + 1].val)) do
                local tmp = heap[p + 1]
                heap[p + 1] = heap[i + 1]
                heap[i + 1] = tmp
                idx_map[heap[p + 1].name] = p
                idx_map[heap[i + 1].name] = i
                i = p
                p = get_parent_idx(i)
              end
              mh.heap = heap
              mh.idx_of_element = idx_map
            end
            function new_min_heap(array)
              local idx_map = {}
              local val_map = {}
              local heap = array
              local i = 0
              while (i < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(array)) do
                    local n = array[i + 1]
                    idx_map[n.name] = i
                    val_map[n.name] = n.val
                    i = (i + 1)
                  end
                  local mh = {heap = heap, idx_of_element = idx_map, heap_dict = val_map}
                  local start = get_parent_idx(((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(array) - 1))
                      while (start >= 0) do
                        sift_down(mh, start)
                        start = (start - 1)
                      end
                      return mh
                    end
                    function peek(mh)
                      return mh.heap[0 + 1]
                    end
                    function remove_min(mh)
                      local heap = mh.heap
                      local idx_map = mh.idx_of_element
                      local val_map = mh.heap_dict
                      local last_idx = ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(heap) - 1)
                          local top = heap[0 + 1]
                          local last = heap[last_idx + 1]
                          heap[0 + 1] = last
                          idx_map[last.name] = 0
                          heap = slice_without_last(heap)
                          idx_map = remove_key(idx_map, top.name)
                          val_map = remove_key(val_map, top.name)
                          mh.heap = heap
                          mh.idx_of_element = idx_map
                          mh.heap_dict = val_map
                          if ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(heap) > 0) then
                                sift_down(mh, 0)
                              end
                              return top
                            end
                            function insert(mh, node)
                              local heap = mh.heap
                              local idx_map = mh.idx_of_element
                              local val_map = mh.heap_dict
                              heap = (function(lst, item)
                              lst = lst or {}
                              table.insert(lst, item)
                              return lst
                            end)(heap, node)
                            local idx = ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(heap) - 1)
                                idx_map[node.name] = idx
                                val_map[node.name] = node.val
                                mh.heap = heap
                                mh.idx_of_element = idx_map
                                mh.heap_dict = val_map
                                sift_up(mh, idx)
                              end
                              function is_empty(mh)
                                return ((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(mh.heap) == 0)
                                  end
                                  function get_value(mh, key)
                                    return mh.heap_dict[key]
                                  end
                                  function decrease_key(mh, node, new_value)
                                    local heap = mh.heap
                                    local val_map = mh.heap_dict
                                    local idx_map = mh.idx_of_element
                                    local idx = idx_map[node.name]
                                    if (not (heap[idx + 1].val > new_value)) then
                                      _panic("newValue must be less than current value")
                                    end
                                    node.val = new_value
                                    heap[idx + 1].val = new_value
                                    val_map[node.name] = new_value
                                    mh.heap = heap
                                    mh.heap_dict = val_map
                                    sift_up(mh, idx)
                                  end
                                  function node_to_string(n)
                                    return (((("Node(" .. n.name) .. ", ") .. _str(n.val)) .. ")")
                                  end
                                  r = {name = "R", val = (-1)}
                                  b = {name = "B", val = 6}
                                  a = {name = "A", val = 3}
                                  x = {name = "X", val = 1}
                                  e = {name = "E", val = 4}
                                  my_min_heap = new_min_heap({r, b, a, x, e})
                                  print("Min Heap - before decrease key")
                                  for _, n in ipairs(my_min_heap.heap) do
                                    print((((type(node_to_string(n)) == "table")) and (
                                    (function(v)
                                    local function encode(x)
                                    if type(x) == "table" then
                                      if x.__name and x.__order then
                                        local parts = {x.__name, " {"}
                                        for i, k in ipairs(x.__order) do
                                          if i > 1 then parts[#parts+1] = ", " end
                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      elseif #x > 0 then
                                          local allTables = true
                                          for _, v in ipairs(x) do
                                            if type(v) ~= "table" then allTables = false break end
                                          end
                                          local parts = {}
                                          if not allTables then parts[#parts+1] = "[" end
                                          for i, val in ipairs(x) do
                                            parts[#parts+1] = encode(val)
                                            if i < #x then parts[#parts+1] = " " end
                                          end
                                          if not allTables then parts[#parts+1] = "]" end
                                          return table.concat(parts)
                                        else
                                          local keys = {}
                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                          local parts = {"{"}
                                          for i, k in ipairs(keys) do
                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                            if i < #keys then parts[#parts+1] = ", " end
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        end
                                      elseif type(x) == "string" then
                                          return '"' .. x .. '"'
                                        else
                                          return tostring(x)
                                        end
                                      end
                                      return encode(v)
                                    end)(node_to_string(n))) or (node_to_string(n))))
                                  end
                                  print("Min Heap - After decrease key of node [B -> -17]")
                                  decrease_key(my_min_heap, b, (-17))
                                  for _, n in ipairs(my_min_heap.heap) do
                                    print((((type(node_to_string(n)) == "table")) and (
                                    (function(v)
                                    local function encode(x)
                                    if type(x) == "table" then
                                      if x.__name and x.__order then
                                        local parts = {x.__name, " {"}
                                        for i, k in ipairs(x.__order) do
                                          if i > 1 then parts[#parts+1] = ", " end
                                          parts[#parts+1] = k .. " = " .. encode(x[k])
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      elseif #x > 0 then
                                          local allTables = true
                                          for _, v in ipairs(x) do
                                            if type(v) ~= "table" then allTables = false break end
                                          end
                                          local parts = {}
                                          if not allTables then parts[#parts+1] = "[" end
                                          for i, val in ipairs(x) do
                                            parts[#parts+1] = encode(val)
                                            if i < #x then parts[#parts+1] = " " end
                                          end
                                          if not allTables then parts[#parts+1] = "]" end
                                          return table.concat(parts)
                                        else
                                          local keys = {}
                                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                          local parts = {"{"}
                                          for i, k in ipairs(keys) do
                                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                            if i < #keys then parts[#parts+1] = ", " end
                                          end
                                          parts[#parts+1] = "}"
                                          return table.concat(parts)
                                        end
                                      elseif type(x) == "string" then
                                          return '"' .. x .. '"'
                                        else
                                          return tostring(x)
                                        end
                                      end
                                      return encode(v)
                                    end)(node_to_string(n))) or (node_to_string(n))))
                                  end
                                  print((((type(_str(get_value(my_min_heap, "B"))) == "table")) and (
                                  (function(v)
                                  local function encode(x)
                                  if type(x) == "table" then
                                    if x.__name and x.__order then
                                      local parts = {x.__name, " {"}
                                      for i, k in ipairs(x.__order) do
                                        if i > 1 then parts[#parts+1] = ", " end
                                        parts[#parts+1] = k .. " = " .. encode(x[k])
                                      end
                                      parts[#parts+1] = "}"
                                      return table.concat(parts)
                                    elseif #x > 0 then
                                        local allTables = true
                                        for _, v in ipairs(x) do
                                          if type(v) ~= "table" then allTables = false break end
                                        end
                                        local parts = {}
                                        if not allTables then parts[#parts+1] = "[" end
                                        for i, val in ipairs(x) do
                                          parts[#parts+1] = encode(val)
                                          if i < #x then parts[#parts+1] = " " end
                                        end
                                        if not allTables then parts[#parts+1] = "]" end
                                        return table.concat(parts)
                                      else
                                        local keys = {}
                                        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                        local parts = {"{"}
                                        for i, k in ipairs(keys) do
                                          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                          if i < #keys then parts[#parts+1] = ", " end
                                        end
                                        parts[#parts+1] = "}"
                                        return table.concat(parts)
                                      end
                                    elseif type(x) == "string" then
                                        return '"' .. x .. '"'
                                      else
                                        return tostring(x)
                                      end
                                    end
                                    return encode(v)
                                  end)(_str(get_value(my_min_heap, "B")))) or (_str(get_value(my_min_heap, "B")))))
                                  local _bench_end = os.clock()
                                  collectgarbage()
                                  local _bench_end_mem = collectgarbage('count') * 1024
                                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                end;
