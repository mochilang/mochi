-- Generated by Mochi v0.10.59 on 2025-08-06 22:50 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function new_queue(items)
    return {stack1 = items, stack2 = {}}
  end
  function len_queue(q)
    return ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(q.stack1) + (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(q.stack2))
          end
          function str_queue(q)
            local items = {}
            local i = ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(q.stack2) - 1)
                while (i >= 0) do
                  items = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(items, q.stack2[i + 1])
                i = (i - 1)
              end
              local j = 0
              while (j < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(q.stack1)) do
                    items = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(items, q.stack1[j + 1])
                  j = (j + 1)
                end
                local s = "Queue(("
                local k = 0
                while (k < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(items)) do
                      s = (s .. tostring(items[k + 1]))
                      if (k < ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(items) - 1)) then
                            s = (s .. ", ")
                          end
                          k = (k + 1)
                        end
                        s = (s .. "))")
                        return s
                      end
                      function put(q, item)
                        local s1 = q.stack1
                        s1 = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(s1, item)
                      return {stack1 = s1, stack2 = q.stack2}
                    end
                    function get(q)
                      local s1 = q.stack1
                      local s2 = q.stack2
                      if ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(s2) == 0) then
                            while ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(s1) > 0) do
                                  local idx = ((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(s1) - 1)
                                      local v = s1[idx + 1]
                                      local new_s1 = {}
                                      local i = 0
                                      while (i < idx) do
                                        new_s1 = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        table.insert(res, item)
                                        return res
                                      end)(new_s1, s1[i + 1])
                                      i = (i + 1)
                                    end
                                    s1 = new_s1
                                    s2 = (function(lst, item)
                                    local res = {table.unpack(lst or {})}
                                    table.insert(res, item)
                                    return res
                                  end)(s2, v)
                                end
                              end
                              if ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(s2) == 0) then
                                    panic("Queue is empty")
                                  end
                                  local idx2 = ((function(v)
                                  if type(v) == 'table' and v.items ~= nil then
                                    return #v.items
                                  elseif type(v) == 'table' and (v[1] == nil) then
                                      local c = 0
                                      for _ in pairs(v) do c = c + 1 end
                                      return c
                                    elseif type(v) == 'string' then
                                        local l = utf8.len(v)
                                        if l then return l end
                                        return #v
                                      elseif type(v) == 'table' then
                                          return #v
                                        else
                                          return 0
                                        end
                                      end)(s2) - 1)
                                      local value = s2[idx2 + 1]
                                      local new_s2 = {}
                                      local j = 0
                                      while (j < idx2) do
                                        new_s2 = (function(lst, item)
                                        local res = {table.unpack(lst or {})}
                                        table.insert(res, item)
                                        return res
                                      end)(new_s2, s2[j + 1])
                                      j = (j + 1)
                                    end
                                    s2 = new_s2
                                    return {queue = {stack1 = s1, stack2 = s2}, value = value}
                                  end
                                  q = new_queue({10, 20, 30})
                                  r1 = ((function(m,k,d) local v=m[k] if v==nil then return d end return v end)(q, nil, nil))
                                  q = r1.queue
                                  print(r1.value)
                                  q = put((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(q), 40)
                                  r2 = ((function(m,k,d) local v=m[k] if v==nil then return d end return v end)(q, nil, nil))
                                  q = r2.queue
                                  print(r2.value)
                                  r3 = ((function(m,k,d) local v=m[k] if v==nil then return d end return v end)(q, nil, nil))
                                  q = r3.queue
                                  print(r3.value)
                                  print(len_queue(q))
                                  r4 = ((function(m,k,d) local v=m[k] if v==nil then return d end return v end)(q, nil, nil))
                                  q = r4.queue
                                  print(r4.value)
                                  local _bench_end = os.clock()
                                  collectgarbage()
                                  local _bench_end_mem = collectgarbage('count') * 1024
                                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                end;
