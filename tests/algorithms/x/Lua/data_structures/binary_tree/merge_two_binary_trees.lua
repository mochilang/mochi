-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function merge_two_binary_trees(t1, t2)
    return (function(_m)
    if _m['__name'] == "Leaf" then
      return t2
    elseif _m['__name'] == "Node" then
        local l1 = _m["left"]
        local v1 = _m["value"]
        local r1 = _m["right"]
        return (function(_m)
        if _m['__name'] == "Leaf" then
          return t1
        elseif _m['__name'] == "Node" then
            local l2 = _m["left"]
            local v2 = _m["value"]
            local r2 = _m["right"]
            return {__name = "Node", left = merge_two_binary_trees(l1, l2), value = (tostring(v1) .. tostring(v2)), right = merge_two_binary_trees(r1, r2)}
          end
        end)(t2)
      end
    end)(t1)
  end
  function is_leaf(t)
    return (function(_m)
    if _m['__name'] == "Leaf" then
      return true
    elseif true then
        return false
      end
    end)(t)
  end
  function get_left(t)
    return (function(_m)
    if _m['__name'] == "Node" then
      local l = _m["left"]
      local _ = _m["value"]
      local _ = _m["right"]
      return l
    elseif true then
        return {__name = "Leaf"}
      end
    end)(t)
  end
  function get_right(t)
    return (function(_m)
    if _m['__name'] == "Node" then
      local _ = _m["left"]
      local _ = _m["value"]
      local r = _m["right"]
      return r
    elseif true then
        return {__name = "Leaf"}
      end
    end)(t)
  end
  function get_value(t)
    return (function(_m)
    if _m['__name'] == "Node" then
      local _ = _m["left"]
      local v = _m["value"]
      local _ = _m["right"]
      return v
    elseif true then
        return 0
      end
    end)(t)
  end
  function print_preorder(t)
    if (not is_leaf(t)) then
      local v = get_value(t)
      local l = get_left(t)
      local r = get_right(t)
      print(v)
      print_preorder(l)
      print_preorder(r)
    end
  end
  tree1 = {__name = "Node", left = {__name = "Node", left = {__name = "Node", left = {__name = "Leaf"}, value = 4, right = {__name = "Leaf"}}, value = 2, right = {__name = "Leaf"}}, value = 1, right = {__name = "Node", left = {__name = "Leaf"}, value = 3, right = {__name = "Leaf"}}}
  tree2 = {__name = "Node", left = {__name = "Node", left = {__name = "Leaf"}, value = 4, right = {__name = "Node", left = {__name = "Leaf"}, value = 9, right = {__name = "Leaf"}}}, value = 2, right = {__name = "Node", left = {__name = "Leaf"}, value = 6, right = {__name = "Node", left = {__name = "Leaf"}, value = 5, right = {__name = "Leaf"}}}}
  print("Tree1 is:")
  print_preorder(tree1)
  print("Tree2 is:")
  print_preorder(tree2)
  merged_tree = merge_two_binary_trees(tree1, tree2)
  print("Merged Tree is:")
  print_preorder(merged_tree)
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
