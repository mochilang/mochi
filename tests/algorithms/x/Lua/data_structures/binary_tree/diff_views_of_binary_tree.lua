-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function slice(lst, s, e)
if s < 0 then s = #lst + s end
if e == nil then e = #lst end
local r = {}
for i = s + 1, e do
  r[#r+1] = lst[i]
end
return r
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_tree()
    return {values = {3, 9, 20, 15, 7}, lefts = {1, NIL, 3, NIL, NIL}, rights = {2, NIL, 4, NIL, NIL}, root = 0}
  end
  function index_of(xs, x)
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs)) do
          if (xs[i + 1] == x) then
            return i
          end
          i = (i + 1)
        end
        return NIL
      end
      function sort_pairs(hds, vals)
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(hds)) do
              local j = i
              while ((j > 0) and (hds[(j - 1) + 1] > hds[j + 1])) do
                local hd_tmp = hds[(j - 1) + 1]
                hds[(j - 1) + 1] = hds[j + 1]
                hds[j + 1] = hd_tmp
                local val_tmp = vals[(j - 1) + 1]
                vals[(j - 1) + 1] = vals[j + 1]
                vals[j + 1] = val_tmp
                j = (j - 1)
              end
              i = (i + 1)
            end
          end
          function right_view(t)
            local res = {}
            local queue = {t.root}
            while ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(queue) > 0) do
                  local size = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(queue)
                      local i = 0
                      while (i < size) do
                        local idx = queue[i + 1]
                        if (t.lefts[idx + 1] ~= NIL) then
                          queue = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(queue, t.lefts[idx + 1])
                      end
                      if (t.rights[idx + 1] ~= NIL) then
                        queue = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(queue, t.rights[idx + 1])
                    end
                    i = (i + 1)
                  end
                  res = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(res, t.values[queue[(size - 1) + 1] + 1])
                queue = (function(lst,s,e)
                local r={}
                for i=s+1,e do
                  r[#r+1]=lst[i]
                end
                return r
              end)(queue, size, (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(queue))
                end
                return res
              end
              function left_view(t)
                local res = {}
                local queue = {t.root}
                while ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(queue) > 0) do
                      local size = (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(queue)
                          local i = 0
                          while (i < size) do
                            local idx = queue[i + 1]
                            if (t.lefts[idx + 1] ~= NIL) then
                              queue = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(queue, t.lefts[idx + 1])
                          end
                          if (t.rights[idx + 1] ~= NIL) then
                            queue = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(queue, t.rights[idx + 1])
                        end
                        i = (i + 1)
                      end
                      res = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(res, t.values[queue[0 + 1] + 1])
                    queue = (function(lst,s,e)
                    local r={}
                    for i=s+1,e do
                      r[#r+1]=lst[i]
                    end
                    return r
                  end)(queue, size, (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(queue))
                    end
                    return res
                  end
                  function top_view(t)
                    local hds = {}
                    local vals = {}
                    local queue_idx = {t.root}
                    local queue_hd = {0}
                    while ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(queue_idx) > 0) do
                          local idx = queue_idx[0 + 1]
                          queue_idx = (function(lst,s,e)
                          local r={}
                          for i=s+1,e do
                            r[#r+1]=lst[i]
                          end
                          return r
                        end)(queue_idx, 1, (function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(queue_idx))
                            local hd = queue_hd[0 + 1]
                            queue_hd = (function(lst,s,e)
                            local r={}
                            for i=s+1,e do
                              r[#r+1]=lst[i]
                            end
                            return r
                          end)(queue_hd, 1, (function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(queue_hd))
                              if (index_of(hds, hd) == NIL) then
                                hds = (function(lst, item)
                                local res = {table.unpack(lst or {})}
                                table.insert(res, item)
                                return res
                              end)(hds, hd)
                              vals = (function(lst, item)
                              local res = {table.unpack(lst or {})}
                              table.insert(res, item)
                              return res
                            end)(vals, t.values[idx + 1])
                          end
                          if (t.lefts[idx + 1] ~= NIL) then
                            queue_idx = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(queue_idx, t.lefts[idx + 1])
                          queue_hd = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(queue_hd, (hd - 1))
                      end
                      if (t.rights[idx + 1] ~= NIL) then
                        queue_idx = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(queue_idx, t.rights[idx + 1])
                      queue_hd = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(queue_hd, (hd + 1))
                  end
                end
                sort_pairs(hds, vals)
                return vals
              end
              function bottom_view(t)
                local hds = {}
                local vals = {}
                local queue_idx = {t.root}
                local queue_hd = {0}
                while ((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(queue_idx) > 0) do
                      local idx = queue_idx[0 + 1]
                      queue_idx = (function(lst,s,e)
                      local r={}
                      for i=s+1,e do
                        r[#r+1]=lst[i]
                      end
                      return r
                    end)(queue_idx, 1, (function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(queue_idx))
                        local hd = queue_hd[0 + 1]
                        queue_hd = (function(lst,s,e)
                        local r={}
                        for i=s+1,e do
                          r[#r+1]=lst[i]
                        end
                        return r
                      end)(queue_hd, 1, (function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(queue_hd))
                          local pos = index_of(hds, hd)
                          if (pos == NIL) then
                            hds = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(hds, hd)
                          vals = (function(lst, item)
                          local res = {table.unpack(lst or {})}
                          table.insert(res, item)
                          return res
                        end)(vals, t.values[idx + 1])
                      else
                        vals[pos + 1] = t.values[idx + 1]
                      end
                      if (t.lefts[idx + 1] ~= NIL) then
                        queue_idx = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(queue_idx, t.lefts[idx + 1])
                      queue_hd = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(queue_hd, (hd - 1))
                  end
                  if (t.rights[idx + 1] ~= NIL) then
                    queue_idx = (function(lst, item)
                    local res = {table.unpack(lst or {})}
                    table.insert(res, item)
                    return res
                  end)(queue_idx, t.rights[idx + 1])
                  queue_hd = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(queue_hd, (hd + 1))
              end
            end
            sort_pairs(hds, vals)
            return vals
          end
          NIL = (0 - 1)
          tree = make_tree()
          print(
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(right_view(tree)))
          print(
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(left_view(tree)))
          print(
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(top_view(tree)))
          print(
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)(bottom_view(tree)))
          local _bench_end = os.clock()
          collectgarbage()
          local _bench_end_mem = collectgarbage('count') * 1024
          local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
          local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
          print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
        end;
