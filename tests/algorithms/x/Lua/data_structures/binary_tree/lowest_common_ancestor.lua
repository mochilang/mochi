-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function pow2(exp)
    local res = 1
    local i = 0
    while (i < exp) do
      res = (res * 2)
      i = (i + 1)
    end
    return res
  end
  function create_sparse(max_node, parent)
    local j = 1
    while (pow2(j) < max_node) do
      local i = 1
      while (i <= max_node) do
        parent[j + 1][i + 1] = parent[(j - 1) + 1][parent[(j - 1) + 1][i + 1] + 1]
        i = (i + 1)
      end
      j = (j + 1)
    end
    return parent
  end
  function lowest_common_ancestor(u, v, level, parent)
    if (level[u + 1] < level[v + 1]) then
      local temp = u
      u = v
      v = temp
    end
    local i = 18
    while (i >= 0) do
      if ((level[u + 1] - pow2(i)) >= level[v + 1]) then
        u = parent[i + 1][u + 1]
      end
      i = (i - 1)
    end
    if (u == v) then
      return u
    end
    i = 18
    while (i >= 0) do
      local pu = parent[i + 1][u + 1]
      local pv = parent[i + 1][v + 1]
      if ((pu ~= 0) and (pu ~= pv)) then
        u = pu
        v = pv
      end
      i = (i - 1)
    end
    return parent[0 + 1][u + 1]
  end
  function breadth_first_search(level, parent, max_node, graph, root)
    level[root + 1] = 0
    local q = {}
    q = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(q, root)
  local head = 0
  while (head < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(q)) do
        local u = q[head + 1]
        head = (head + 1)
        local adj = graph[u]
        local j = 0
        while (j < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(adj)) do
              local v = adj[j + 1]
              if (level[v + 1] == (0 - 1)) then
                level[v + 1] = (level[u + 1] + 1)
                parent[0 + 1][v + 1] = u
                q = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(q, v)
            end
            j = (j + 1)
          end
        end
      end
      function main()
        local max_node = 13
        local parent = {}
        local i = 0
        while (i < 20) do
          local row = {}
          local j = 0
          while (j < (max_node + 10)) do
            row = (function(lst, item)
            lst = lst or {}
            table.insert(lst, item)
            return lst
          end)(row, 0)
          j = (j + 1)
        end
        parent = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(parent, row)
      i = (i + 1)
    end
    local level = {}
    i = 0
    while (i < (max_node + 10)) do
      level = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(level, (0 - 1))
    i = (i + 1)
  end
  local graph = {}
  graph[1] = {2, 3, 4}
  graph[2] = {5}
  graph[3] = {6, 7}
  graph[4] = {8}
  graph[5] = {9, 10}
  graph[6] = {11}
  graph[7] = {}
  graph[8] = {12, 13}
  graph[9] = {}
  graph[10] = {}
  graph[11] = {}
  graph[12] = {}
  graph[13] = {}
  breadth_first_search(level, parent, max_node, graph, 1)
  parent = create_sparse(max_node, parent)
  print((((type(("LCA of node 1 and 3 is: " .. _str(lowest_common_ancestor(1, 3, level, parent)))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(("LCA of node 1 and 3 is: " .. _str(lowest_common_ancestor(1, 3, level, parent))))) or (("LCA of node 1 and 3 is: " .. _str(lowest_common_ancestor(1, 3, level, parent))))))
  print((((type(("LCA of node 5 and 6 is: " .. _str(lowest_common_ancestor(5, 6, level, parent)))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(("LCA of node 5 and 6 is: " .. _str(lowest_common_ancestor(5, 6, level, parent))))) or (("LCA of node 5 and 6 is: " .. _str(lowest_common_ancestor(5, 6, level, parent))))))
  print((((type(("LCA of node 7 and 11 is: " .. _str(lowest_common_ancestor(7, 11, level, parent)))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(("LCA of node 7 and 11 is: " .. _str(lowest_common_ancestor(7, 11, level, parent))))) or (("LCA of node 7 and 11 is: " .. _str(lowest_common_ancestor(7, 11, level, parent))))))
  print((((type(("LCA of node 6 and 7 is: " .. _str(lowest_common_ancestor(6, 7, level, parent)))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(("LCA of node 6 and 7 is: " .. _str(lowest_common_ancestor(6, 7, level, parent))))) or (("LCA of node 6 and 7 is: " .. _str(lowest_common_ancestor(6, 7, level, parent))))))
  print((((type(("LCA of node 4 and 12 is: " .. _str(lowest_common_ancestor(4, 12, level, parent)))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(("LCA of node 4 and 12 is: " .. _str(lowest_common_ancestor(4, 12, level, parent))))) or (("LCA of node 4 and 12 is: " .. _str(lowest_common_ancestor(4, 12, level, parent))))))
  print((((type(("LCA of node 8 and 8 is: " .. _str(lowest_common_ancestor(8, 8, level, parent)))) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(("LCA of node 8 and 8 is: " .. _str(lowest_common_ancestor(8, 8, level, parent))))) or (("LCA of node 8 and 8 is: " .. _str(lowest_common_ancestor(8, 8, level, parent))))))
end
main()
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
