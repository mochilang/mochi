-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_tree()
    return {nodes = {}, root = (-1)}
  end
  function rotate_left(t, x)
    local nodes = t.nodes
    local y = nodes[x + 1][RIGHT + 1]
    local yLeft = nodes[y + 1][LEFT + 1]
    nodes[x + 1][RIGHT + 1] = yLeft
    if (yLeft ~= NEG_ONE) then
      nodes[yLeft + 1][PARENT + 1] = x
    end
    local xParent = nodes[x + 1][PARENT + 1]
    nodes[y + 1][PARENT + 1] = xParent
    if (xParent == NEG_ONE) then
      t.root = y
    else
      if (x == nodes[xParent + 1][LEFT + 1]) then
        nodes[xParent + 1][LEFT + 1] = y
      else
        nodes[xParent + 1][RIGHT + 1] = y
      end
    end
    nodes[y + 1][LEFT + 1] = x
    nodes[x + 1][PARENT + 1] = y
    t.nodes = nodes
    return t
  end
  function rotate_right(t, x)
    local nodes = t.nodes
    local y = nodes[x + 1][LEFT + 1]
    local yRight = nodes[y + 1][RIGHT + 1]
    nodes[x + 1][LEFT + 1] = yRight
    if (yRight ~= NEG_ONE) then
      nodes[yRight + 1][PARENT + 1] = x
    end
    local xParent = nodes[x + 1][PARENT + 1]
    nodes[y + 1][PARENT + 1] = xParent
    if (xParent == NEG_ONE) then
      t.root = y
    else
      if (x == nodes[xParent + 1][RIGHT + 1]) then
        nodes[xParent + 1][RIGHT + 1] = y
      else
        nodes[xParent + 1][LEFT + 1] = y
      end
    end
    nodes[y + 1][RIGHT + 1] = x
    nodes[x + 1][PARENT + 1] = y
    t.nodes = nodes
    return t
  end
  function insert_fix(t, z)
    local nodes = t.nodes
    while ((z ~= t.root) and (nodes[nodes[z + 1][PARENT + 1] + 1][COLOR + 1] == 1)) do
      if (nodes[z + 1][PARENT + 1] == nodes[nodes[nodes[z + 1][PARENT + 1] + 1][PARENT + 1] + 1][LEFT + 1]) then
        local y = nodes[nodes[nodes[z + 1][PARENT + 1] + 1][PARENT + 1] + 1][RIGHT + 1]
        if ((y ~= NEG_ONE) and (nodes[y + 1][COLOR + 1] == 1)) then
          nodes[nodes[z + 1][PARENT + 1] + 1][COLOR + 1] = 0
          nodes[y + 1][COLOR + 1] = 0
          local gp = nodes[nodes[z + 1][PARENT + 1] + 1][PARENT + 1]
          nodes[gp + 1][COLOR + 1] = 1
          z = gp
        else
          if (z == nodes[nodes[z + 1][PARENT + 1] + 1][RIGHT + 1]) then
            z = nodes[z + 1][PARENT + 1]
            t.nodes = nodes
            t = rotate_left((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t), z)
            nodes = t.nodes
          end
          nodes[nodes[z + 1][PARENT + 1] + 1][COLOR + 1] = 0
          local gp = nodes[nodes[z + 1][PARENT + 1] + 1][PARENT + 1]
          nodes[gp + 1][COLOR + 1] = 1
          t.nodes = nodes
          t = rotate_right((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t), gp)
          nodes = t.nodes
        end
      else
        local y = nodes[nodes[nodes[z + 1][PARENT + 1] + 1][PARENT + 1] + 1][LEFT + 1]
        if ((y ~= NEG_ONE) and (nodes[y + 1][COLOR + 1] == 1)) then
          nodes[nodes[z + 1][PARENT + 1] + 1][COLOR + 1] = 0
          nodes[y + 1][COLOR + 1] = 0
          local gp = nodes[nodes[z + 1][PARENT + 1] + 1][PARENT + 1]
          nodes[gp + 1][COLOR + 1] = 1
          z = gp
        else
          if (z == nodes[nodes[z + 1][PARENT + 1] + 1][LEFT + 1]) then
            z = nodes[z + 1][PARENT + 1]
            t.nodes = nodes
            t = rotate_right((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t), z)
            nodes = t.nodes
          end
          nodes[nodes[z + 1][PARENT + 1] + 1][COLOR + 1] = 0
          local gp = nodes[nodes[z + 1][PARENT + 1] + 1][PARENT + 1]
          nodes[gp + 1][COLOR + 1] = 1
          t.nodes = nodes
          t = rotate_left((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t), gp)
          nodes = t.nodes
        end
      end
    end
    nodes = t.nodes
    nodes[t.root + 1][COLOR + 1] = 0
    t.nodes = nodes
    return t
  end
  function tree_insert(t, v)
    local nodes = t.nodes
    local node = {v, 1, (-1), (-1), (-1)}
    nodes = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(nodes, node)
  local idx = ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(nodes) - 1)
      local y = NEG_ONE
      local x = t.root
      while (x ~= NEG_ONE) do
        y = x
        if (v < nodes[x + 1][LABEL + 1]) then
          x = nodes[x + 1][LEFT + 1]
        else
          x = nodes[x + 1][RIGHT + 1]
        end
      end
      nodes[idx + 1][PARENT + 1] = y
      if (y == NEG_ONE) then
        t.root = idx
      else
        if (v < nodes[y + 1][LABEL + 1]) then
          nodes[y + 1][LEFT + 1] = idx
        else
          nodes[y + 1][RIGHT + 1] = idx
        end
      end
      t.nodes = nodes
      t = insert_fix((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t), idx)
      return t
    end
    function inorder(t, x, acc)
      if (x == NEG_ONE) then
        return acc
      end
      acc = inorder(t, t.nodes[x + 1][LEFT + 1], acc)
      acc = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(acc, t.nodes[x + 1][LABEL + 1])
    acc = inorder(t, t.nodes[x + 1][RIGHT + 1], acc)
    return acc
  end
  function main()
    local t = make_tree()
    local values = {10, 20, 30, 15, 25, 5, 1}
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(values)) do
          t = tree_insert((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(t), values[i + 1])
          i = (i + 1)
        end
        local res = {}
        res = inorder(t, t.root, res)
        print((((type(
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(res)) == "table")) and (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(res))) or (
        (function(v)
        local function encode(x)
        if type(x) == "table" then
          if x.__name and x.__order then
            local parts = {x.__name, " {"}
            for i, k in ipairs(x.__order) do
              if i > 1 then parts[#parts+1] = ", " end
              parts[#parts+1] = k .. " = " .. encode(x[k])
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          elseif #x > 0 then
              local allTables = true
              for _, v in ipairs(x) do
                if type(v) ~= "table" then allTables = false break end
              end
              local parts = {}
              if not allTables then parts[#parts+1] = "[" end
              for i, val in ipairs(x) do
                parts[#parts+1] = encode(val)
                if i < #x then parts[#parts+1] = " " end
              end
              if not allTables then parts[#parts+1] = "]" end
              return table.concat(parts)
            else
              local keys = {}
              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
              local parts = {"{"}
              for i, k in ipairs(keys) do
                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                if i < #keys then parts[#parts+1] = ", " end
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            end
          elseif type(x) == "string" then
              return '"' .. x .. '"'
            else
              return tostring(x)
            end
          end
          return encode(v)
        end)(res))))
      end
      LABEL = 0
      COLOR = 1
      PARENT = 2
      LEFT = 3
      RIGHT = 4
      NEG_ONE = (-1)
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
