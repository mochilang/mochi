-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function init_int_array(n)
    local arr = {}
    local i = 0
    while (i < ((4 * n) + 5)) do
      arr = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(arr, 0)
    i = (i + 1)
  end
  return arr
end
function init_bool_array(n)
  local arr = {}
  local i = 0
  while (i < ((4 * n) + 5)) do
    arr = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(arr, false)
  i = (i + 1)
end
return arr
end
function left(idx)
  return (idx * 2)
end
function right(idx)
  return ((idx * 2) + 1)
end
function build(segment_tree, idx, l, r, a)
  if (l == r) then
    segment_tree[idx + 1] = a[(l - 1) + 1]
  else
    local mid = ((l + r) // 2)
    build(segment_tree, left(idx), l, mid, a)
    build(segment_tree, right(idx), (mid + 1), r, a)
    local lv = segment_tree[left(idx) + 1]
    local rv = segment_tree[right(idx) + 1]
    if (lv > rv) then
      segment_tree[idx + 1] = lv
    else
      segment_tree[idx + 1] = rv
    end
  end
end
function update(segment_tree, lazy, flag, idx, l, r, a, b, val)
  if flag[idx + 1] then
    segment_tree[idx + 1] = lazy[idx + 1]
    flag[idx + 1] = false
    if (l ~= r) then
      lazy[left(idx) + 1] = lazy[idx + 1]
      lazy[right(idx) + 1] = lazy[idx + 1]
      flag[left(idx) + 1] = true
      flag[right(idx) + 1] = true
    end
  end
  if ((r < a) or (l > b)) then
    return
  end
  if ((l >= a) and (r <= b)) then
    segment_tree[idx + 1] = val
    if (l ~= r) then
      lazy[left(idx) + 1] = val
      lazy[right(idx) + 1] = val
      flag[left(idx) + 1] = true
      flag[right(idx) + 1] = true
    end
    return
  end
  local mid = ((l + r) // 2)
  update(segment_tree, lazy, flag, left(idx), l, mid, a, b, val)
  update(segment_tree, lazy, flag, right(idx), (mid + 1), r, a, b, val)
  local lv = segment_tree[left(idx) + 1]
  local rv = segment_tree[right(idx) + 1]
  if (lv > rv) then
    segment_tree[idx + 1] = lv
  else
    segment_tree[idx + 1] = rv
  end
end
function query(segment_tree, lazy, flag, idx, l, r, a, b)
  if flag[idx + 1] then
    segment_tree[idx + 1] = lazy[idx + 1]
    flag[idx + 1] = false
    if (l ~= r) then
      lazy[left(idx) + 1] = lazy[idx + 1]
      lazy[right(idx) + 1] = lazy[idx + 1]
      flag[left(idx) + 1] = true
      flag[right(idx) + 1] = true
    end
  end
  if ((r < a) or (l > b)) then
    return NEG_INF
  end
  if ((l >= a) and (r <= b)) then
    return segment_tree[idx + 1]
  end
  local mid = ((l + r) // 2)
  local q1 = query(segment_tree, lazy, flag, left(idx), l, mid, a, b)
  local q2 = query(segment_tree, lazy, flag, right(idx), (mid + 1), r, a, b)
  if (q1 > q2) then
    return q1
  else
    return q2
  end
end
function segtree_to_string(segment_tree, lazy, flag, n)
  local res = "["
  local i = 1
  while (i <= n) do
    local v = query(segment_tree, lazy, flag, 1, 1, n, i, i)
    res = (res .. _str(v))
    if (i < n) then
      res = (res .. ", ")
    end
    i = (i + 1)
  end
  res = (res .. "]")
  return res
end
NEG_INF = (-1000000000)
A = {1, 2, (-4), 7, 3, (-5), 6, 11, (-20), 9, 14, 15, 5, 2, (-8)}
n = 15
segment_tree = init_int_array(n)
lazy = init_int_array(n)
flag = init_bool_array(n)
build(segment_tree, 1, 1, n, A)
print(query(segment_tree, lazy, flag, 1, 1, n, 4, 6))
print(query(segment_tree, lazy, flag, 1, 1, n, 7, 11))
print(query(segment_tree, lazy, flag, 1, 1, n, 7, 12))
update(segment_tree, lazy, flag, 1, 1, n, 1, 3, 111)
print(query(segment_tree, lazy, flag, 1, 1, n, 1, 15))
update(segment_tree, lazy, flag, 1, 1, n, 7, 8, 235)
print((((type(segtree_to_string(segment_tree, lazy, flag, n)) == "table")) and (
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(segtree_to_string(segment_tree, lazy, flag, n))) or (segtree_to_string(segment_tree, lazy, flag, n))))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
