-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function fenwick_from_list(arr)
    local size = (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(arr)
        local tree = {}
        local i = 0
        while (i < size) do
          tree = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(tree, arr[i + 1])
        i = (i + 1)
      end
      i = 1
      while (i < size) do
        local j = fenwick_next(i)
        if (j < size) then
          tree[j + 1] = (tree[j + 1] + tree[i + 1])
        end
        i = (i + 1)
      end
      return {size = size, tree = tree}
    end
    function fenwick_empty(size)
      local tree = {}
      local i = 0
      while (i < size) do
        tree = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(tree, 0)
      i = (i + 1)
    end
    return {size = size, tree = tree}
  end
  function fenwick_get_array(f)
    local arr = {}
    local i = 0
    while (i < f.size) do
      arr = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(arr, f.tree[i + 1])
    i = (i + 1)
  end
  i = (f.size - 1)
  while (i > 0) do
    local j = fenwick_next(i)
    if (j < f.size) then
      arr[j + 1] = (arr[j + 1] - arr[i + 1])
    end
    i = (i - 1)
  end
  return arr
end
function bit_and(a, b)
  local ua = a
  local ub = b
  local res = 0
  local bit = 1
  while ((ua ~= 0) or (ub ~= 0)) do
    if (((ua % 2) == 1) and ((ub % 2) == 1)) then
      res = (res + bit)
    end
    ua = math.floor(tonumber((ua // 2)) or 0)
    ub = math.floor(tonumber((ub // 2)) or 0)
    bit = (bit * 2)
  end
  return res
end
function low_bit(x)
  if (x == 0) then
    return 0
  end
  return (x - bit_and(x, (x - 1)))
end
function fenwick_next(index)
  return (index + low_bit(index))
end
function fenwick_prev(index)
  return (index - low_bit(index))
end
function fenwick_add(f, index, value)
  local tree = f.tree
  if (index == 0) then
    tree[0 + 1] = (tree[0 + 1] + value)
    return {size = f.size, tree = tree}
  end
  local i = index
  while (i < f.size) do
    tree[i + 1] = (tree[i + 1] + value)
    i = fenwick_next(i)
  end
  return {size = f.size, tree = tree}
end
function fenwick_update(f, index, value)
  local current = fenwick_get(f, index)
  return fenwick_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(f), index, (value - current))
end
function fenwick_prefix(f, right)
  if (right == 0) then
    return 0
  end
  local result = f.tree[0 + 1]
  local r = (right - 1)
  while (r > 0) do
    result = (tostring(result) .. tostring(f.tree[r + 1]))
    r = fenwick_prev(r)
  end
  return result
end
function fenwick_query(f, left, right)
  return (fenwick_prefix(f, right) - fenwick_prefix(f, left))
end
function fenwick_get(f, index)
  return fenwick_query(f, index, (index + 1))
end
function fenwick_rank_query(f, value)
  local v = (value - f.tree[0 + 1])
  if (v < 0) then
    return (-1)
  end
  local j = 1
  while ((j * 2) < f.size) do
    j = (j * 2)
  end
  local i = 0
  local jj = j
  while (jj > 0) do
    if (((i + jj) < f.size) and (f.tree[(i + jj) + 1] <= v)) then
      v = (v - f.tree[(i + jj) + 1])
      i = (i + jj)
    end
    jj = (jj // 2)
  end
  return i
end
f_base = fenwick_from_list({1, 2, 3, 4, 5})
print(
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(fenwick_get_array(f_base)))
f = fenwick_from_list({1, 2, 3, 4, 5})
f = fenwick_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(f), 0, 1)
f = fenwick_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(f), 1, 2)
f = fenwick_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(f), 2, 3)
f = fenwick_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(f), 3, 4)
f = fenwick_add((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(f), 4, 5)
print(
(function(v)
local function encode(x)
if type(x) == "table" then
  if x.__name and x.__order then
    local parts = {x.__name, " {"}
    for i, k in ipairs(x.__order) do
      if i > 1 then parts[#parts+1] = ", " end
      parts[#parts+1] = k .. " = " .. encode(x[k])
    end
    parts[#parts+1] = "}"
    return table.concat(parts)
  elseif #x > 0 then
      local allTables = true
      for _, v in ipairs(x) do
        if type(v) ~= "table" then allTables = false break end
      end
      local parts = {}
      if not allTables then parts[#parts+1] = "[" end
      for i, val in ipairs(x) do
        parts[#parts+1] = encode(val)
        if i < #x then parts[#parts+1] = " " end
      end
      if not allTables then parts[#parts+1] = "]" end
      return table.concat(parts)
    else
      local keys = {}
      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
      local parts = {"{"}
      for i, k in ipairs(keys) do
        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
        if i < #keys then parts[#parts+1] = ", " end
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    end
  elseif type(x) == "string" then
      return '"' .. x .. '"'
    else
      return tostring(x)
    end
  end
  return encode(v)
end)(fenwick_get_array(f)))
f2 = fenwick_from_list({1, 2, 3, 4, 5})
print(fenwick_prefix(f2, 3))
print(fenwick_query(f2, 1, 4))
f3 = fenwick_from_list({1, 2, 0, 3, 0, 5})
print(fenwick_rank_query(f3, 0))
print(fenwick_rank_query(f3, 2))
print(fenwick_rank_query(f3, 1))
print(fenwick_rank_query(f3, 3))
print(fenwick_rank_query(f3, 5))
print(fenwick_rank_query(f3, 6))
print(fenwick_rank_query(f3, 11))
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
