-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_list(length, value)
    local lst = {}
    local i = 0
    while (i < length) do
      lst = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(lst, value)
    i = (i + 1)
  end
  return lst
end
function min_list(arr)
  local m = arr[0 + 1]
  local i = 1
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(arr)) do
        if (arr[i + 1] < m) then
          m = arr[i + 1]
        end
        i = (i + 1)
      end
      return m
    end
    function max_list(arr)
      local m = arr[0 + 1]
      local i = 1
      while (i < (function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(arr)) do
            if (arr[i + 1] > m) then
              m = arr[i + 1]
            end
            i = (i + 1)
          end
          return m
        end
        function build_tree(arr)
          local n = {minn = min_list(arr), maxx = max_list(arr), map_left = make_list((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(arr), 0), left = (-1), right = (-1)}
              if (n.minn == n.maxx) then
                nodes = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(nodes, n)
              return ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(nodes) - 1)
                end
                local pivot = ((tostring(n.minn) .. tostring(n.maxx)) // 2)
                local left_arr = {}
                local right_arr = {}
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(arr)) do
                      local num = arr[i + 1]
                      if (num <= pivot) then
                        left_arr = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(left_arr, num)
                    else
                      right_arr = (function(lst, item)
                      local res = {table.unpack(lst or {})}
                      table.insert(res, item)
                      return res
                    end)(right_arr, num)
                  end
                  local ml = n.map_left
                  ml[i + 1] = (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(left_arr)
                      n.map_left = ml
                      i = (i + 1)
                    end
                    if ((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(left_arr) > 0) then
                          n.left = build_tree(left_arr)
                        end
                        if ((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(right_arr) > 0) then
                              n.right = build_tree(right_arr)
                            end
                            nodes = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(nodes, n)
                          return ((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(nodes) - 1)
                            end
                            function rank_till_index(node_idx, num, index)
                              if ((index < 0) or (node_idx < 0)) then
                                return 0
                              end
                              local node = nodes[node_idx + 1]
                              if (node.minn == node.maxx) then
                                if (node.minn == num) then
                                  return (index + 1)
                                else
                                  return 0
                                end
                              end
                              local pivot = ((tostring(node.minn) .. tostring(node.maxx)) // 2)
                              if (num <= pivot) then
                                return rank_till_index(node.left, num, (node.map_left[index + 1] - 1))
                              else
                                return rank_till_index(node.right, num, (index - node.map_left[index + 1]))
                              end
                            end
                            function rank(node_idx, num, start, _end)
                              if (start > _end) then
                                return 0
                              end
                              local rank_till_end = rank_till_index(node_idx, num, _end)
                              local rank_before_start = rank_till_index(node_idx, num, (start - 1))
                              return (rank_till_end - rank_before_start)
                            end
                            function quantile(node_idx, index, start, _end)
                              if (((index > (_end - start)) or (start > _end)) or (node_idx < 0)) then
                                return (-1)
                              end
                              local node = nodes[node_idx + 1]
                              if (node.minn == node.maxx) then
                                return node.minn
                              end
                              local left_start = (((start == 0)) and (0) or (node.map_left[(start - 1) + 1]))
                              local num_left = (node.map_left[_end + 1] - left_start)
                              if (num_left > index) then
                                return quantile(node.left, index, left_start, (node.map_left[_end + 1] - 1))
                              else
                                return quantile(node.right, (index - num_left), (start - left_start), (_end - node.map_left[_end + 1]))
                              end
                            end
                            function range_counting(node_idx, start, _end, start_num, end_num)
                              if (((start > _end) or (node_idx < 0)) or (start_num > end_num)) then
                                return 0
                              end
                              local node = nodes[node_idx + 1]
                              if ((node.minn > end_num) or (node.maxx < start_num)) then
                                return 0
                              end
                              if ((start_num <= node.minn) and (node.maxx <= end_num)) then
                                return ((_end - start) + 1)
                              end
                              local left = range_counting(node.left, (((start == 0)) and (0) or (node.map_left[(start - 1) + 1])), (node.map_left[_end + 1] - 1), start_num, end_num)
                              local right = range_counting(node.right, (start - (((start == 0)) and (0) or (node.map_left[(start - 1) + 1]))), (_end - node.map_left[_end + 1]), start_num, end_num)
                              return (left + right)
                            end
                            nodes = {}
                            test_array = {2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7}
                            root = build_tree(test_array)
                            print((((type(("rank_till_index 6 at 6 -> " .. tostring(rank_till_index(root, 6, 6)))) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(("rank_till_index 6 at 6 -> " .. tostring(rank_till_index(root, 6, 6))))) or (("rank_till_index 6 at 6 -> " .. tostring(rank_till_index(root, 6, 6))))))
                            print((((type(("rank 6 in [3,13] -> " .. tostring(rank(root, 6, 3, 13)))) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(("rank 6 in [3,13] -> " .. tostring(rank(root, 6, 3, 13))))) or (("rank 6 in [3,13] -> " .. tostring(rank(root, 6, 3, 13))))))
                            print((((type(("quantile index 2 in [2,5] -> " .. tostring(quantile(root, 2, 2, 5)))) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(("quantile index 2 in [2,5] -> " .. tostring(quantile(root, 2, 2, 5))))) or (("quantile index 2 in [2,5] -> " .. tostring(quantile(root, 2, 2, 5))))))
                            print((((type(("range_counting [3,7] in [1,10] -> " .. tostring(range_counting(root, 1, 10, 3, 7)))) == "table")) and (
                            (function(v)
                            local function encode(x)
                            if type(x) == "table" then
                              if x.__name and x.__order then
                                local parts = {x.__name, " {"}
                                for i, k in ipairs(x.__order) do
                                  if i > 1 then parts[#parts+1] = ", " end
                                  parts[#parts+1] = k .. " = " .. encode(x[k])
                                end
                                parts[#parts+1] = "}"
                                return table.concat(parts)
                              elseif #x > 0 then
                                  local allTables = true
                                  for _, v in ipairs(x) do
                                    if type(v) ~= "table" then allTables = false break end
                                  end
                                  local parts = {}
                                  if not allTables then parts[#parts+1] = "[" end
                                  for i, val in ipairs(x) do
                                    parts[#parts+1] = encode(val)
                                    if i < #x then parts[#parts+1] = " " end
                                  end
                                  if not allTables then parts[#parts+1] = "]" end
                                  return table.concat(parts)
                                else
                                  local keys = {}
                                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                  local parts = {"{"}
                                  for i, k in ipairs(keys) do
                                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                    if i < #keys then parts[#parts+1] = ", " end
                                  end
                                  parts[#parts+1] = "}"
                                  return table.concat(parts)
                                end
                              elseif type(x) == "string" then
                                  return '"' .. x .. '"'
                                else
                                  return tostring(x)
                                end
                              end
                              return encode(v)
                            end)(("range_counting [3,7] in [1,10] -> " .. tostring(range_counting(root, 1, 10, 3, 7))))) or (("range_counting [3,7] in [1,10] -> " .. tostring(range_counting(root, 1, 10, 3, 7))))))
                            local _bench_end = os.clock()
                            collectgarbage()
                            local _bench_end_mem = collectgarbage('count') * 1024
                            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                          end;
