-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function combine(a, b, op)
    if (op == 0) then
      return (a + b)
    end
    if (op == 1) then
      if (a > b) then
        return a
      end
      return b
    end
    if (a < b) then
      return a
    end
    return b
  end
  function build_tree(nodes, arr, start, _end, op)
    if (start == _end) then
      local node = {start = start, ["end"] = _end, val = arr[start + 1], mid = start, left = (-1), right = (-1)}
      local new_nodes = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(nodes, node)
    return {nodes = new_nodes, idx = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(new_nodes) - 1)}
      end
      local mid = ((start + _end) // 2)
      local left_res = build_tree(nodes, arr, start, mid, op)
      local right_res = build_tree(left_res.nodes, arr, (mid + 1), _end, op)
      local left_node = right_res.nodes[left_res.idx + 1]
      local right_node = right_res.nodes[right_res.idx + 1]
      local val = combine(left_node.val, right_node.val, op)
      local parent = {start = start, ["end"] = _end, val = val, mid = mid, left = left_res.idx, right = right_res.idx}
      local new_nodes = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(right_res.nodes, parent)
    return {nodes = new_nodes, idx = ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(new_nodes) - 1)}
      end
      function new_segment_tree(collection, op)
        return {arr = collection, op = op}
      end
      function update(tree, i, val)
        local new_arr = {}
        local idx = 0
        while (idx < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(tree.arr)) do
              if (idx == i) then
                new_arr = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(new_arr, val)
            else
              new_arr = (function(lst, item)
              lst = lst or {}
              table.insert(lst, item)
              return lst
            end)(new_arr, tree.arr[idx + 1])
          end
          idx = (idx + 1)
        end
        return {arr = new_arr, op = tree.op}
      end
      function query_range(tree, i, j)
        local result = tree.arr[i + 1]
        local idx = (i + 1)
        while (idx <= j) do
          result = combine(result, tree.arr[idx + 1], tree.op)
          idx = (idx + 1)
        end
        return result
      end
      function traverse(tree)
        if ((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(tree.arr) == 0) then
              return {}
            end
            local res = build_tree({}, tree.arr, 0, ((function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(tree.arr) - 1), tree.op)
                return res.nodes
              end
              function node_to_string(node)
                return (((((("SegmentTreeNode(start=" .. _str(node.start)) .. ", end=") .. _str(node["end"])) .. ", val=") .. _str(node.val)) .. ")")
              end
              function print_traverse(tree)
                local nodes = traverse(tree)
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(nodes)) do
                      print((((type(node_to_string(nodes[i + 1])) == "table")) and (
                      (function(v)
                      local function encode(x)
                      if type(x) == "table" then
                        if x.__name and x.__order then
                          local parts = {x.__name, " {"}
                          for i, k in ipairs(x.__order) do
                            if i > 1 then parts[#parts+1] = ", " end
                            parts[#parts+1] = k .. " = " .. encode(x[k])
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        elseif #x > 0 then
                            local allTables = true
                            for _, v in ipairs(x) do
                              if type(v) ~= "table" then allTables = false break end
                            end
                            local parts = {}
                            if not allTables then parts[#parts+1] = "[" end
                            for i, val in ipairs(x) do
                              parts[#parts+1] = encode(val)
                              if i < #x then parts[#parts+1] = " " end
                            end
                            if not allTables then parts[#parts+1] = "]" end
                            return table.concat(parts)
                          else
                            local keys = {}
                            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                            local parts = {"{"}
                            for i, k in ipairs(keys) do
                              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                              if i < #keys then parts[#parts+1] = ", " end
                            end
                            parts[#parts+1] = "}"
                            return table.concat(parts)
                          end
                        elseif type(x) == "string" then
                            return '"' .. x .. '"'
                          else
                            return tostring(x)
                          end
                        end
                        return encode(v)
                      end)(node_to_string(nodes[i + 1]))) or (node_to_string(nodes[i + 1]))))
                      i = (i + 1)
                    end
                    print("")
                  end
                  arr = {2, 1, 5, 3, 4}
                  for _, op in ipairs({0, 1, 2}) do
                    print("**************************************************")
                    tree = new_segment_tree(arr, op)
                    print_traverse(tree)
                    tree = update((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(tree), 1, 5)
                    print_traverse(tree)
                    print(query_range(tree, 3, 4))
                    print(query_range(tree, 2, 2))
                    print(query_range(tree, 1, 3))
                    print("")
                  end
                  local _bench_end = os.clock()
                  collectgarbage()
                  local _bench_end_mem = collectgarbage('count') * 1024
                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                end;
