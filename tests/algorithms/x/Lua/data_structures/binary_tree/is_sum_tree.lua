-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function tree_sum(nodes, idx)
    if (idx == (-1)) then
      return 0
    end
    local node = nodes[idx + 1]
    return ((node.value + tree_sum(nodes, node.left)) + tree_sum(nodes, node.right))
  end
  function is_sum_node(nodes, idx)
    local node = nodes[idx + 1]
    if ((node.left == (-1)) and (node.right == (-1))) then
      return true
    end
    local left_sum = tree_sum(nodes, node.left)
    local right_sum = tree_sum(nodes, node.right)
    if (node.value ~= (left_sum + right_sum)) then
      return false
    end
    local left_ok = true
    if (node.left ~= (-1)) then
      left_ok = is_sum_node(nodes, node.left)
    end
    local right_ok = true
    if (node.right ~= (-1)) then
      right_ok = is_sum_node(nodes, node.right)
    end
    return (left_ok and right_ok)
  end
  function build_a_tree()
    return {{value = 11, left = 1, right = 2}, {value = 2, left = 3, right = 4}, {value = 29, left = 5, right = 6}, {value = 1, left = (-1), right = (-1)}, {value = 7, left = (-1), right = (-1)}, {value = 15, left = (-1), right = (-1)}, {value = 40, left = 7, right = (-1)}, {value = 35, left = (-1), right = (-1)}}
  end
  function build_a_sum_tree()
    return {{value = 26, left = 1, right = 2}, {value = 10, left = 3, right = 4}, {value = 3, left = (-1), right = 5}, {value = 4, left = (-1), right = (-1)}, {value = 6, left = (-1), right = (-1)}, {value = 3, left = (-1), right = (-1)}}
  end
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
