-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function new_node(value)
    local node = {__name = "GenType1", __order = {"data", "left", "right", "height"}, data = value, left = NIL, right = NIL, height = 1}
    nodes = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(nodes, node)
  return ((function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(nodes) - 1)
    end
    function get_height(i)
      if (i == NIL) then
        return 0
      end
      return nodes[i + 1].height
    end
    function my_max(a, b)
      if (a > b) then
        return a
      end
      return b
    end
    function update_height(i)
      nodes[i + 1].height = (my_max(get_height(nodes[i + 1].left), get_height(nodes[i + 1].right)) + 1)
    end
    function right_rotation(i)
      local left = nodes[i + 1].left
      nodes[i + 1].left = nodes[left + 1].right
      nodes[left + 1].right = i
      update_height(i)
      update_height(left)
      return left
    end
    function left_rotation(i)
      local right = nodes[i + 1].right
      nodes[i + 1].right = nodes[right + 1].left
      nodes[right + 1].left = i
      update_height(i)
      update_height(right)
      return right
    end
    function lr_rotation(i)
      nodes[i + 1].left = left_rotation(nodes[i + 1].left)
      return right_rotation(i)
    end
    function rl_rotation(i)
      nodes[i + 1].right = right_rotation(nodes[i + 1].right)
      return left_rotation(i)
    end
    function insert_node(i, value)
      if (i == NIL) then
        return new_node(value)
      end
      if (value < nodes[i + 1].data) then
        nodes[i + 1].left = insert_node(nodes[i + 1].left, value)
        if ((get_height(nodes[i + 1].left) - get_height(nodes[i + 1].right)) == 2) then
          if (value < nodes[nodes[i + 1].left + 1].data) then
            i = right_rotation(i)
          else
            i = lr_rotation(i)
          end
        end
      else
        nodes[i + 1].right = insert_node(nodes[i + 1].right, value)
        if ((get_height(nodes[i + 1].right) - get_height(nodes[i + 1].left)) == 2) then
          if (value < nodes[nodes[i + 1].right + 1].data) then
            i = rl_rotation(i)
          else
            i = left_rotation(i)
          end
        end
      end
      update_height(i)
      return i
    end
    function get_left_most(i)
      local cur = i
      while (nodes[cur + 1].left ~= NIL) do
        cur = nodes[cur + 1].left
      end
      return nodes[cur + 1].data
    end
    function del_node(i, value)
      if (i == NIL) then
        return NIL
      end
      if (value < nodes[i + 1].data) then
        nodes[i + 1].left = del_node(nodes[i + 1].left, value)
      else
        if (value > nodes[i + 1].data) then
          nodes[i + 1].right = del_node(nodes[i + 1].right, value)
        else
          if ((nodes[i + 1].left ~= NIL) and (nodes[i + 1].right ~= NIL)) then
            local temp = get_left_most(nodes[i + 1].right)
            nodes[i + 1].data = temp
            nodes[i + 1].right = del_node(nodes[i + 1].right, temp)
          else
            if (nodes[i + 1].left ~= NIL) then
              i = nodes[i + 1].left
            else
              i = nodes[i + 1].right
            end
          end
        end
      end
      if (i == NIL) then
        return NIL
      end
      local lh = get_height(nodes[i + 1].left)
      local rh = get_height(nodes[i + 1].right)
      if ((rh - lh) == 2) then
        if (get_height(nodes[nodes[i + 1].right + 1].right) > get_height(nodes[nodes[i + 1].right + 1].left)) then
          i = left_rotation(i)
        else
          i = rl_rotation(i)
        end
      else
        if ((lh - rh) == 2) then
          if (get_height(nodes[nodes[i + 1].left + 1].left) > get_height(nodes[nodes[i + 1].left + 1].right)) then
            i = right_rotation(i)
          else
            i = lr_rotation(i)
          end
        end
      end
      update_height(i)
      return i
    end
    function inorder(i)
      if (i == NIL) then
        return ""
      end
      local left = inorder(nodes[i + 1].left)
      local right = inorder(nodes[i + 1].right)
      local res = tostring(nodes[i + 1].data)
      if (left ~= "") then
        res = ((left .. " ") .. res)
      end
      if (right ~= "") then
        res = ((res .. " ") .. right)
      end
      return res
    end
    function main()
      nodes = {}
      local root = NIL
      root = insert_node(root, 4)
      root = insert_node(root, 2)
      root = insert_node(root, 3)
      print((((type(inorder(root)) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(inorder(root))) or (inorder(root))))
      print((((type(tostring(get_height(root))) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(tostring(get_height(root)))) or (tostring(get_height(root)))))
      root = del_node(root, 3)
      print((((type(inorder(root)) == "table")) and (
      (function(v)
      local function encode(x)
      if type(x) == "table" then
        if x.__name and x.__order then
          local parts = {x.__name, " {"}
          for i, k in ipairs(x.__order) do
            if i > 1 then parts[#parts+1] = ", " end
            parts[#parts+1] = k .. " = " .. encode(x[k])
          end
          parts[#parts+1] = "}"
          return table.concat(parts)
        elseif #x > 0 then
            local allTables = true
            for _, v in ipairs(x) do
              if type(v) ~= "table" then allTables = false break end
            end
            local parts = {}
            if not allTables then parts[#parts+1] = "[" end
            for i, val in ipairs(x) do
              parts[#parts+1] = encode(val)
              if i < #x then parts[#parts+1] = " " end
            end
            if not allTables then parts[#parts+1] = "]" end
            return table.concat(parts)
          else
            local keys = {}
            for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
            table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
            local parts = {"{"}
            for i, k in ipairs(keys) do
              parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
              if i < #keys then parts[#parts+1] = ", " end
            end
            parts[#parts+1] = "}"
            return table.concat(parts)
          end
        elseif type(x) == "string" then
            return '"' .. x .. '"'
          else
            return tostring(x)
          end
        end
        return encode(v)
      end)(inorder(root))) or (inorder(root))))
    end
    NIL = (0 - 1)
    nodes = {}
    main()
    local _bench_end = os.clock()
    collectgarbage()
    local _bench_end_mem = collectgarbage('count') * 1024
    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
  end;
