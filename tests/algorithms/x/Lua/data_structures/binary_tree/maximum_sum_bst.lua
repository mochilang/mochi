-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function min_int(a, b)
    if (a < b) then
      return a
    end
    return b
  end
  function max_int(a, b)
    if (a > b) then
      return a
    end
    return b
  end
  function solver(nodes, idx)
    if (idx == (0 - 1)) then
      return {is_bst = true, min_val = 2147483647, max_val = (-2147483648), total = 0, best = 0}
    end
    local node = nodes[idx + 1]
    local left_info = solver(nodes, node.left)
    local right_info = solver(nodes, node.right)
    local current_best = max_int(left_info.best, right_info.best)
    if (((left_info.is_bst and right_info.is_bst) and (left_info.max_val < node.val)) and (node.val < right_info.min_val)) then
      local sum_val = (tostring((tostring(left_info.total) .. tostring(right_info.total))) .. tostring(node.val))
      current_best = max_int(current_best, sum_val)
      return {is_bst = true, min_val = min_int(left_info.min_val, node.val), max_val = max_int(right_info.max_val, node.val), total = sum_val, best = current_best}
    end
    return {is_bst = false, min_val = 0, max_val = 0, total = 0, best = current_best}
  end
  function max_sum_bst(nodes, root)
    local info = solver(nodes, root)
    return info.best
  end
  function main()
    local t1_nodes = {{val = 4, left = 1, right = (0 - 1)}, {val = 3, left = 2, right = 3}, {val = 1, left = (0 - 1), right = (0 - 1)}, {val = 2, left = (0 - 1), right = (0 - 1)}}
    print(max_sum_bst(t1_nodes, 0))
    local t2_nodes = {{val = (-4), left = 1, right = 2}, {val = (-2), left = (0 - 1), right = (0 - 1)}, {val = (-5), left = (0 - 1), right = (0 - 1)}}
    print(max_sum_bst(t2_nodes, 0))
    local t3_nodes = {{val = 1, left = 1, right = 2}, {val = 4, left = 3, right = 4}, {val = 3, left = 5, right = 6}, {val = 2, left = (0 - 1), right = (0 - 1)}, {val = 4, left = (0 - 1), right = (0 - 1)}, {val = 2, left = (0 - 1), right = (0 - 1)}, {val = 5, left = 7, right = 8}, {val = 4, left = (0 - 1), right = (0 - 1)}, {val = 6, left = (0 - 1), right = (0 - 1)}}
    print(max_sum_bst(t3_nodes, 0))
  end
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
