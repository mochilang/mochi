-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function binomial_coefficient(n, k)
    local result = 1
    local kk = k
    if (k > (n - k)) then
      kk = (n - k)
    end
    for i = 0, kk - 1 do
      result = (result * (n - i))
      result = (result // (i + 1))
    end
    return result
  end
  function catalan_number(node_count)
    return (binomial_coefficient((2 * node_count), node_count) // (node_count + 1))
  end
  function factorial(n)
    if (n < 0) then
      print("factorial() not defined for negative values")
      return 0
    end
    local result = 1
    for i = 1, (n + 1) - 1 do
      result = (result * i)
    end
    return result
  end
  function binary_tree_count(node_count)
    return (catalan_number(node_count) * factorial(node_count))
  end
  print("Enter the number of nodes:")
  input_str = input()
  node_count = math.floor(tonumber(input_str) or 0)
  if (node_count <= 0) then
    print("We need some nodes to work with.")
  else
    bst = catalan_number(node_count)
    bt = binary_tree_count(node_count)
    print((string.gsub(string.format("Given %d nodes, there are %d binary trees and %d binary search trees.", node_count, bt, bst), "%s+$", "")))
  end
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
