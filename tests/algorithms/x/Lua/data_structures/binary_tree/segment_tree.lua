-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function left_child(idx)
    return (idx * 2)
  end
  function right_child(idx)
    return ((idx * 2) + 1)
  end
  function build(idx, left, right)
    if (left == right) then
      st[idx + 1] = A[left + 1]
    else
      local mid = ((left + right) // 2)
      build(left_child(idx), left, mid)
      build(right_child(idx), (mid + 1), right)
      local left_val = st[left_child(idx) + 1]
      local right_val = st[right_child(idx) + 1]
      st[idx + 1] = (((left_val > right_val)) and (left_val) or (right_val))
    end
  end
  function update_recursive(idx, left, right, a, b, val)
    if ((right < a) or (left > b)) then
      return true
    end
    if (left == right) then
      st[idx + 1] = val
      return true
    end
    local mid = ((left + right) // 2)
    update_recursive(left_child(idx), left, mid, a, b, val)
    update_recursive(right_child(idx), (mid + 1), right, a, b, val)
    local left_val = st[left_child(idx) + 1]
    local right_val = st[right_child(idx) + 1]
    st[idx + 1] = (((left_val > right_val)) and (left_val) or (right_val))
    return true
  end
  function update(a, b, val)
    return update_recursive(1, 0, (N - 1), (a - 1), (b - 1), val)
  end
  function query_recursive(idx, left, right, a, b)
    if ((right < a) or (left > b)) then
      return NEG_INF
    end
    if ((left >= a) and (right <= b)) then
      return st[idx + 1]
    end
    local mid = ((left + right) // 2)
    local q1 = query_recursive(left_child(idx), left, mid, a, b)
    local q2 = query_recursive(right_child(idx), (mid + 1), right, a, b)
    return (((q1 > q2)) and (q1) or (q2))
  end
  function query(a, b)
    return query_recursive(1, 0, (N - 1), (a - 1), (b - 1))
  end
  function show_data()
    local i = 0
    local show_list = {}
    while (i < N) do
      show_list = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(show_list, query((i + 1), (i + 1)))
    i = (i + 1)
  end
  print(
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(show_list))
end
function main()
  A = {1, 2, (-4), 7, 3, (-5), 6, 11, (-20), 9, 14, 15, 5, 2, (-8)}
  N = (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(A)
      local i = 0
      while (i < (4 * N)) do
        st = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(st, 0)
      i = (i + 1)
    end
    if (N > 0) then
      build(1, 0, (N - 1))
    end
    print(query(4, 6))
    print(query(7, 11))
    print(query(7, 12))
    update(1, 3, 111)
    print(query(1, 15))
    update(7, 8, 235)
    show_data()
  end
  A = {}
  N = 0
  st = {}
  NEG_INF = (-1000000000)
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
