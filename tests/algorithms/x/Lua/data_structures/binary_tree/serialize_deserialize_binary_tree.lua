-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _split(s, sep)
local t = {}
local pattern = string.format("([^%s]+)", sep)
string.gsub(s, pattern, function(c) t[#t+1] = c end)
return t
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function digit(ch)
    local digits = "0123456789"
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(digits)) do
          if (_substring(digits, i, (i + 1)) == ch) then
            return i
          end
          i = (i + 1)
        end
        return 0
      end
      function to_int(s)
        local i = 0
        local sign = 1
        if (((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(s) > 0) and (_substring(s, 0, 1) == "-")) then
              sign = (-1)
              i = 1
            end
            local num = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(s)) do
                  local ch = _substring(s, i, (i + 1))
                  num = ((num * 10) + digit(ch))
                  i = (i + 1)
                end
                return (sign * num)
              end
              function split(s, sep)
                local res = {}
                local current = ""
                local i = 0
                while (i < (function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(s)) do
                      local ch = _substring(s, i, (i + 1))
                      if (ch == sep) then
                        res = (function(lst, item)
                        local res = {table.unpack(lst or {})}
                        table.insert(res, item)
                        return res
                      end)(res, current)
                      current = ""
                    else
                      current = (current .. ch)
                    end
                    i = (i + 1)
                  end
                  res = (function(lst, item)
                  local res = {table.unpack(lst or {})}
                  table.insert(res, item)
                  return res
                end)(res, current)
                return res
              end
              function serialize(node)
                return (function(_m)
                if _m['__name'] == "Empty" then
                  return "null"
                elseif _m['__name'] == "Node" then
                    local l = _m["left"]
                    local v = _m["value"]
                    local r = _m["right"]
                    return ((((tostring(v) .. ",") .. serialize(l)) .. ",") .. serialize(r))
                  end
                end)(node)
              end
              function build(nodes, idx)
                local value = nodes[idx + 1]
                if (value == "null") then
                  return {node = {__name = "Empty"}, next = (idx + 1)}
                end
                local left_res = build(nodes, (idx + 1))
                local right_res = build(nodes, left_res.next)
                local node = {__name = "Node", left = left_res.node, value = to_int(value), right = right_res.node}
                return {node = node, next = right_res.next}
              end
              function deserialize(data)
                local nodes = _split(data, ",")
                local res = build(nodes, 0)
                return res.node
              end
              function five_tree()
                local left_child = {__name = "Node", value = 2, left = {__name = "Empty"}, right = {__name = "Empty"}}
                local right_left = {__name = "Node", value = 4, left = {__name = "Empty"}, right = {__name = "Empty"}}
                local right_right = {__name = "Node", value = 5, left = {__name = "Empty"}, right = {__name = "Empty"}}
                local right_child = {__name = "Node", value = 3, left = right_left, right = right_right}
                return {__name = "Node", value = 1, left = left_child, right = right_child}
              end
              function main()
                local root = five_tree()
                local serial = serialize(root)
                print((((type(serial) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(serial)) or (serial)))
                local rebuilt = deserialize(serial)
                local serial2 = serialize(rebuilt)
                print((((type(serial2) == "table")) and (
                (function(v)
                local function encode(x)
                if type(x) == "table" then
                  if x.__name and x.__order then
                    local parts = {x.__name, " {"}
                    for i, k in ipairs(x.__order) do
                      if i > 1 then parts[#parts+1] = ", " end
                      parts[#parts+1] = k .. " = " .. encode(x[k])
                    end
                    parts[#parts+1] = "}"
                    return table.concat(parts)
                  elseif #x > 0 then
                      local allTables = true
                      for _, v in ipairs(x) do
                        if type(v) ~= "table" then allTables = false break end
                      end
                      local parts = {}
                      if not allTables then parts[#parts+1] = "[" end
                      for i, val in ipairs(x) do
                        parts[#parts+1] = encode(val)
                        if i < #x then parts[#parts+1] = " " end
                      end
                      if not allTables then parts[#parts+1] = "]" end
                      return table.concat(parts)
                    else
                      local keys = {}
                      for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                      table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                      local parts = {"{"}
                      for i, k in ipairs(keys) do
                        parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                        if i < #keys then parts[#parts+1] = ", " end
                      end
                      parts[#parts+1] = "}"
                      return table.concat(parts)
                    end
                  elseif type(x) == "string" then
                      return '"' .. x .. '"'
                    else
                      return tostring(x)
                    end
                  end
                  return encode(v)
                end)(serial2)) or (serial2)))
                print((((serial == serial2)) and (1) or (0)))
              end
              main()
              local _bench_end = os.clock()
              collectgarbage()
              local _bench_end_mem = collectgarbage('count') * 1024
              local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
              local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
              print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
            end;
