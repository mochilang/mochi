-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function count_nodes(nodes, idx)
    if (idx == 0) then
      return 0
    end
    local node = nodes[idx + 1]
    return ((count_nodes(nodes, node.left) + count_nodes(nodes, node.right)) + 1)
  end
  function count_coins(nodes, idx)
    if (idx == 0) then
      return 0
    end
    local node = nodes[idx + 1]
    return ((count_coins(nodes, node.left) + count_coins(nodes, node.right)) + node.data)
  end
  function iabs(x)
    if (x < 0) then
      return (-x)
    end
    return x
  end
  function dfs(nodes, idx)
    if (idx == 0) then
      return 0
    end
    local node = nodes[idx + 1]
    local left_excess = dfs(nodes, node.left)
    local right_excess = dfs(nodes, node.right)
    local abs_left = iabs(left_excess)
    local abs_right = iabs(right_excess)
    total_moves = ((total_moves + abs_left) + abs_right)
    return (((node.data + left_excess) + right_excess) - 1)
  end
  function distribute_coins(nodes, root)
    if (root == 0) then
      return 0
    end
    if (count_nodes(nodes, root) ~= count_coins(nodes, root)) then
      panic("The nodes number should be same as the number of coins")
    end
    total_moves = 0
    dfs(nodes, root)
    return total_moves
  end
  function main()
    local example1 = {{data = 0, left = 0, right = 0}, {data = 3, left = 2, right = 3}, {data = 0, left = 0, right = 0}, {data = 0, left = 0, right = 0}}
    local example2 = {{data = 0, left = 0, right = 0}, {data = 0, left = 2, right = 3}, {data = 3, left = 0, right = 0}, {data = 0, left = 0, right = 0}}
    local example3 = {{data = 0, left = 0, right = 0}, {data = 0, left = 2, right = 3}, {data = 0, left = 0, right = 0}, {data = 3, left = 0, right = 0}}
    print(distribute_coins(example1, 1))
    print(distribute_coins(example2, 1))
    print(distribute_coins(example3, 1))
    print(distribute_coins({{data = 0, left = 0, right = 0}}, 0))
  end
  total_moves = 0
  main()
  local _bench_end = os.clock()
  collectgarbage()
  local _bench_end_mem = collectgarbage('count') * 1024
  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
