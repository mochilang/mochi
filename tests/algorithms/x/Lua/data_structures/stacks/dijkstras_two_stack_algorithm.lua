-- Generated by Mochi v0.10.59 on 2025-08-06 22:50 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function is_digit(ch)
    return ((((((((((ch == "0") or (ch == "1")) or (ch == "2")) or (ch == "3")) or (ch == "4")) or (ch == "5")) or (ch == "6")) or (ch == "7")) or (ch == "8")) or (ch == "9"))
  end
  function slice_without_last_int(xs)
    local res = {}
    local i = 0
    while (i < ((function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(xs) - 1)) do
          res = (function(lst, item)
          local res = {table.unpack(lst or {})}
          table.insert(res, item)
          return res
        end)(res, xs[i + 1])
        i = (i + 1)
      end
      return res
    end
    function slice_without_last_string(xs)
      local res = {}
      local i = 0
      while (i < ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(xs) - 1)) do
            res = (function(lst, item)
            local res = {table.unpack(lst or {})}
            table.insert(res, item)
            return res
          end)(res, xs[i + 1])
          i = (i + 1)
        end
        return res
      end
      function dijkstras_two_stack_algorithm(equation)
        local operand_stack = {}
        local operator_stack = {}
        local idx = 0
        while (idx < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(equation)) do
              local ch = _substring(equation, idx, (idx + 1))
              if is_digit(ch) then
                operand_stack = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(operand_stack, math.floor(tonumber(ch) or 0))
            else
              if ((((ch == "+") or (ch == "-")) or (ch == "*")) or (ch == "/")) then
                operator_stack = (function(lst, item)
                local res = {table.unpack(lst or {})}
                table.insert(res, item)
                return res
              end)(operator_stack, ch)
            else
              if (ch == ")") then
                local opr = operator_stack[((function(v)
                if type(v) == 'table' and v.items ~= nil then
                  return #v.items
                elseif type(v) == 'table' and (v[1] == nil) then
                    local c = 0
                    for _ in pairs(v) do c = c + 1 end
                    return c
                  elseif type(v) == 'string' then
                      local l = utf8.len(v)
                      if l then return l end
                      return #v
                    elseif type(v) == 'table' then
                        return #v
                      else
                        return 0
                      end
                    end)(operator_stack) - 1) + 1]
                    operator_stack = slice_without_last_string(operator_stack)
                    local num1 = operand_stack[((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(operand_stack) - 1) + 1]
                        operand_stack = slice_without_last_int(operand_stack)
                        local num2 = operand_stack[((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(operand_stack) - 1) + 1]
                            operand_stack = slice_without_last_int(operand_stack)
                            local total = (((opr == "+")) and ((num2 + num1)) or ((((opr == "-")) and ((num2 - num1)) or ((((opr == "*")) and ((num2 * num1)) or ((num2 // num1)))))))
                            operand_stack = (function(lst, item)
                            local res = {table.unpack(lst or {})}
                            table.insert(res, item)
                            return res
                          end)(operand_stack, total)
                        end
                      end
                    end
                    idx = (idx + 1)
                  end
                  return operand_stack[((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(operand_stack) - 1) + 1]
                    end
                    equation = "(5 + ((4 * 2) * (2 + 3)))"
                    print((((type(((equation .. " = ") .. tostring(dijkstras_two_stack_algorithm(equation)))) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)(((equation .. " = ") .. tostring(dijkstras_two_stack_algorithm(equation))))) or (((equation .. " = ") .. tostring(dijkstras_two_stack_algorithm(equation))))))
                    local _bench_end = os.clock()
                    collectgarbage()
                    local _bench_end_mem = collectgarbage('count') * 1024
                    local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                    local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                    print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                  end;
