-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _panic(msg)
io.stderr:write(tostring(msg))
os.exit(1)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_set(ds, x)
    local p = ds.parent
    local r = ds.rank
    p[x + 1] = x
    r[x + 1] = 0
    return {parent = p, rank = r}
  end
  function find_set(ds, x)
    if (ds.parent[x + 1] == x) then
      return {ds = ds, root = x}
    end
    local res = find_set(ds, ds.parent[x + 1])
    local p = res.ds.parent
    p[x + 1] = res.root
    return {ds = {parent = p, rank = res.ds.rank}, root = res.root}
  end
  function union_set(ds, x, y)
    local fx = find_set(ds, x)
    local ds1 = fx.ds
    local x_root = fx.root
    local fy = find_set(ds1, y)
    local ds2 = fy.ds
    local y_root = fy.root
    if (x_root == y_root) then
      return ds2
    end
    local p = ds2.parent
    local r = ds2.rank
    if (r[x_root + 1] > r[y_root + 1]) then
      p[y_root + 1] = x_root
    else
      p[x_root + 1] = y_root
      if (r[x_root + 1] == r[y_root + 1]) then
        r[y_root + 1] = (r[y_root + 1] + 1)
      end
    end
    return {parent = p, rank = r}
  end
  function same_python_set(a, b)
    if ((a < 3) and (b < 3)) then
      return true
    end
    if ((((a >= 3) and (a < 6)) and (b >= 3)) and (b < 6)) then
      return true
    end
    return false
  end
  ds = {parent = {}, rank = {}}
  i = 0
  while (i < 6) do
    ds.parent = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(ds.parent, 0)
  ds.rank = (function(lst, item)
  lst = lst or {}
  table.insert(lst, item)
  return lst
end)(ds.rank, 0)
ds = make_set((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ds), i)
i = (i + 1)
end
ds = union_set((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ds), 0, 1)
ds = union_set((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ds), 1, 2)
ds = union_set((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ds), 3, 4)
ds = union_set((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ds), 3, 5)
i = 0
while (i < 6) do
  j = 0
  while (j < 6) do
    res_i = find_set(ds, i)
    ds = res_i.ds
    root_i = res_i.root
    res_j = find_set(ds, j)
    ds = res_j.ds
    root_j = res_j.root
    same = same_python_set(i, j)
    root_same = (root_i == root_j)
    if same then
      if (not root_same) then
        _panic("nodes should be in same set")
      end
    else
      if root_same then
        _panic("nodes should be in different sets")
      end
    end
    j = (j + 1)
  end
  i = (i + 1)
end
i = 0
while (i < 6) do
  res = find_set(ds, i)
  ds = res.ds
  print((((type(_str(res.root)) == "table")) and (
  (function(v)
  local function encode(x)
  if type(x) == "table" then
    if x.__name and x.__order then
      local parts = {x.__name, " {"}
      for i, k in ipairs(x.__order) do
        if i > 1 then parts[#parts+1] = ", " end
        parts[#parts+1] = k .. " = " .. encode(x[k])
      end
      parts[#parts+1] = "}"
      return table.concat(parts)
    elseif #x > 0 then
        local allTables = true
        for _, v in ipairs(x) do
          if type(v) ~= "table" then allTables = false break end
        end
        local parts = {}
        if not allTables then parts[#parts+1] = "[" end
        for i, val in ipairs(x) do
          parts[#parts+1] = encode(val)
          if i < #x then parts[#parts+1] = " " end
        end
        if not allTables then parts[#parts+1] = "]" end
        return table.concat(parts)
      else
        local keys = {}
        for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
        table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
        local parts = {"{"}
        for i, k in ipairs(keys) do
          parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
          if i < #keys then parts[#parts+1] = ", " end
        end
        parts[#parts+1] = "}"
        return table.concat(parts)
      end
    elseif type(x) == "string" then
        return '"' .. x .. '"'
      else
        return tostring(x)
      end
    end
    return encode(v)
  end)(_str(res.root))) or (_str(res.root))))
  i = (i + 1)
end
local _bench_end = os.clock()
collectgarbage()
local _bench_end_mem = collectgarbage('count') * 1024
local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
end;
