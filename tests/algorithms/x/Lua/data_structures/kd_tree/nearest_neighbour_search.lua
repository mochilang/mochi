-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function square_distance(a, b)
    local i = 0
    local total = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(a)) do
          local diff = (a[i + 1] - b[i + 1])
          total = (total + (diff * diff))
          i = (i + 1)
        end
        return total
      end
      function search(nodes, index, query_point, depth, best)
        if (index == (-1)) then
          return best
        end
        local result = best
        result.nodes_visited = (result.nodes_visited + 1)
        local node = nodes[index + 1]
        local current_point = node.point
        local current_dist = square_distance(query_point, current_point)
        if (((function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(result.point) == 0) or (current_dist < result.distance)) then
              result.point = current_point
              result.distance = current_dist
            end
            local k = (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(query_point)
                local axis = (depth % k)
                local nearer = node.left
                local further = node.right
                if (query_point[axis + 1] > current_point[axis + 1]) then
                  nearer = node.right
                  further = node.left
                end
                result = search(nodes, nearer, query_point, (depth + 1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(result))
                local diff = (query_point[axis + 1] - current_point[axis + 1])
                if ((diff * diff) < result.distance) then
                  result = search(nodes, further, query_point, (depth + 1), (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(result))
                end
                return result
              end
              function nearest_neighbour_search(nodes, root, query_point)
                local initial = {point = {}, distance = 1e+30, nodes_visited = 0}
                return search(nodes, root, query_point, 0, (function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(initial))
              end
              nodes = {{point = {9, 1}, left = 1, right = 4}, {point = {2, 7}, left = 2, right = 3}, {point = {3, 6}, left = (-1), right = (-1)}, {point = {6, 12}, left = (-1), right = (-1)}, {point = {17, 15}, left = 5, right = 6}, {point = {13, 15}, left = (-1), right = (-1)}, {point = {10, 19}, left = (-1), right = (-1)}}
              queries = {{9, 2}, {12, 15}, {1, 3}}
              q = 0
              while (q < (function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(queries)) do
                    res = nearest_neighbour_search(nodes, 0, queries[q + 1])
                    print((((type((((((
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)(res.point) .. " ") .. _str(res.distance)) .. " ") .. _str(res.nodes_visited)) .. "\n")) == "table")) and (
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)((((((
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)(res.point) .. " ") .. _str(res.distance)) .. " ") .. _str(res.nodes_visited)) .. "\n"))) or ((((((
                    (function(v)
                    local function encode(x)
                    if type(x) == "table" then
                      if x.__name and x.__order then
                        local parts = {x.__name, " {"}
                        for i, k in ipairs(x.__order) do
                          if i > 1 then parts[#parts+1] = ", " end
                          parts[#parts+1] = k .. " = " .. encode(x[k])
                        end
                        parts[#parts+1] = "}"
                        return table.concat(parts)
                      elseif #x > 0 then
                          local allTables = true
                          for _, v in ipairs(x) do
                            if type(v) ~= "table" then allTables = false break end
                          end
                          local parts = {}
                          if not allTables then parts[#parts+1] = "[" end
                          for i, val in ipairs(x) do
                            parts[#parts+1] = encode(val)
                            if i < #x then parts[#parts+1] = " " end
                          end
                          if not allTables then parts[#parts+1] = "]" end
                          return table.concat(parts)
                        else
                          local keys = {}
                          for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                          table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                          local parts = {"{"}
                          for i, k in ipairs(keys) do
                            parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                            if i < #keys then parts[#parts+1] = ", " end
                          end
                          parts[#parts+1] = "}"
                          return table.concat(parts)
                        end
                      elseif type(x) == "string" then
                          return '"' .. x .. '"'
                        else
                          return tostring(x)
                        end
                      end
                      return encode(v)
                    end)(res.point) .. " ") .. _str(res.distance)) .. " ") .. _str(res.nodes_visited)) .. "\n"))))
                    q = (q + 1)
                  end
                  local _bench_end = os.clock()
                  collectgarbage()
                  local _bench_end_mem = collectgarbage('count') * 1024
                  local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                  local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                  print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                end;
