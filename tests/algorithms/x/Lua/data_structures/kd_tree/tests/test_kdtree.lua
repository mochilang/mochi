-- Generated by Mochi v0.10.59 on 2025-08-06 22:50 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function rand_float()
    seed = (((seed * 1103515245) + 12345) % 2147483648)
    return (seed / 2.147483648e+09)
  end
  function hypercube_points(num_points, cube_size, num_dimensions)
    local pts = {}
    local i = 0
    while (i < num_points) do
      local p = {}
      local j = 0
      while (j < num_dimensions) do
        local v = (cube_size * rand_float())
        p = (function(lst, item)
        local res = {table.unpack(lst or {})}
        table.insert(res, item)
        return res
      end)(p, v)
      j = (j + 1)
    end
    pts = (function(lst, item)
    local res = {table.unpack(lst or {})}
    table.insert(res, item)
    return res
  end)(pts, p)
  i = (i + 1)
end
return pts
end
function build_kdtree(points, depth)
  return points
end
function distance_sq(a, b)
  local sum = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(a)) do
        local d = (a[i + 1] - b[i + 1])
        sum = (sum + (d * d))
        i = (i + 1)
      end
      return sum
    end
    function nearest_neighbour_search(points, query)
      if ((function(v)
      if type(v) == 'table' and v.items ~= nil then
        return #v.items
      elseif type(v) == 'table' and (v[1] == nil) then
          local c = 0
          for _ in pairs(v) do c = c + 1 end
          return c
        elseif type(v) == 'string' then
            local l = utf8.len(v)
            if l then return l end
            return #v
          elseif type(v) == 'table' then
              return #v
            else
              return 0
            end
          end)(points) == 0) then
            return {__name = "GenType1", __order = {"index", "dist", "visited"}, index = (-1), dist = INF, visited = 0}
          end
          local nearest_idx = 0
          local nearest_dist = INF
          local visited = 0
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(points)) do
                local d = distance_sq(query, points[i + 1])
                visited = (visited + 1)
                if (d < nearest_dist) then
                  nearest_dist = d
                  nearest_idx = i
                end
                i = (i + 1)
              end
              return {__name = "GenType2", __order = {"index", "dist", "visited"}, index = nearest_idx, dist = nearest_dist, visited = visited}
            end
            function test_build_cases()
              local empty_pts = {}
              local tree0 = build_kdtree(empty_pts, 0)
              if ((function(v)
              if type(v) == 'table' and v.items ~= nil then
                return #v.items
              elseif type(v) == 'table' and (v[1] == nil) then
                  local c = 0
                  for _ in pairs(v) do c = c + 1 end
                  return c
                elseif type(v) == 'string' then
                    local l = utf8.len(v)
                    if l then return l end
                    return #v
                  elseif type(v) == 'table' then
                      return #v
                    else
                      return 0
                    end
                  end)(tree0) == 0) then
                    print("case1 true")
                  else
                    print("case1 false")
                  end
                  local pts1 = hypercube_points(10, 10, 2)
                  local tree1 = build_kdtree(pts1, 2)
                  if (((function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(tree1) > 0) and ((function(v)
                      if type(v) == 'table' and v.items ~= nil then
                        return #v.items
                      elseif type(v) == 'table' and (v[1] == nil) then
                          local c = 0
                          for _ in pairs(v) do c = c + 1 end
                          return c
                        elseif type(v) == 'string' then
                            local l = utf8.len(v)
                            if l then return l end
                            return #v
                          elseif type(v) == 'table' then
                              return #v
                            else
                              return 0
                            end
                          end)(tree1[0 + 1]) == 2)) then
                            print("case2 true")
                          else
                            print("case2 false")
                          end
                          local pts2 = hypercube_points(10, 10, 3)
                          local tree2 = build_kdtree(pts2, (-2))
                          if (((function(v)
                          if type(v) == 'table' and v.items ~= nil then
                            return #v.items
                          elseif type(v) == 'table' and (v[1] == nil) then
                              local c = 0
                              for _ in pairs(v) do c = c + 1 end
                              return c
                            elseif type(v) == 'string' then
                                local l = utf8.len(v)
                                if l then return l end
                                return #v
                              elseif type(v) == 'table' then
                                  return #v
                                else
                                  return 0
                                end
                              end)(tree2) > 0) and ((function(v)
                              if type(v) == 'table' and v.items ~= nil then
                                return #v.items
                              elseif type(v) == 'table' and (v[1] == nil) then
                                  local c = 0
                                  for _ in pairs(v) do c = c + 1 end
                                  return c
                                elseif type(v) == 'string' then
                                    local l = utf8.len(v)
                                    if l then return l end
                                    return #v
                                  elseif type(v) == 'table' then
                                      return #v
                                    else
                                      return 0
                                    end
                                  end)(tree2[0 + 1]) == 3)) then
                                    print("case3 true")
                                  else
                                    print("case3 false")
                                  end
                                end
                                function test_search()
                                  local pts = hypercube_points(10, 10, 2)
                                  local tree = build_kdtree(pts, 0)
                                  local qp = hypercube_points(1, 10, 2)[0 + 1]
                                  local res = nearest_neighbour_search(tree, qp)
                                  if (((res.index ~= (-1)) and (res.dist >= 0)) and (res.visited > 0)) then
                                    print("search true")
                                  else
                                    print("search false")
                                  end
                                end
                                function test_edge()
                                  local empty_pts = {}
                                  local tree = build_kdtree(empty_pts, 0)
                                  local query = {0, 0}
                                  local res = nearest_neighbour_search(tree, query)
                                  if (((res.index == (-1)) and (res.dist > 1e+08)) and (res.visited == 0)) then
                                    print("edge true")
                                  else
                                    print("edge false")
                                  end
                                end
                                function main()
                                  seed = 1
                                  test_build_cases()
                                  test_search()
                                  test_edge()
                                end
                                INF = 1e+09
                                seed = 1
                                main()
                                local _bench_end = os.clock()
                                collectgarbage()
                                local _bench_end_mem = collectgarbage('count') * 1024
                                local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                              end;
