-- Generated by Mochi v0.10.59 on 2025-08-06 21:51 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _substring(s, i, j)
i = i + 1
if j == nil then j = #s end
local si = utf8.offset(s, i)
if not si then return '' end
local sj = utf8.offset(s, j+1)
if not sj then sj = -1 end
return string.sub(s, si, sj-1)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function create_hash_table(size)
    local vals = {}
    local i = 0
    while (i < size) do
      vals = (function(lst, item)
      local res = {table.unpack(lst or {})}
      table.insert(res, item)
      return res
    end)(vals, _nil)
    i = (i + 1)
  end
  return {size_table = size, values = vals, lim_charge = 0.75}
end
function hash_function(_table, key)
  return (key % _table.size_table)
end
function balanced_factor(_table)
  local count = 0
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(_table.values)) do
        if (_table.values[i + 1] ~= _nil) then
          count = (count + 1)
        end
        i = (i + 1)
      end
      return (count // _table.size_table)
    end
    function collision_resolution(_table, key)
      local i = 1
      local new_key = hash_function(_table, (key + (i * i)))
      while ((_table.values[new_key + 1] ~= _nil) and (_table.values[new_key + 1] ~= key)) do
        i = (i + 1)
        if (balanced_factor(_table) >= _table.lim_charge) then
          return _table.size_table
        end
        new_key = hash_function(_table, (key + (i * i)))
      end
      return new_key
    end
    function insert_data(_table, data)
      local key = hash_function(_table, data)
      local vals = _table.values
      if (vals[key + 1] == _nil) then
        vals[key + 1] = data
      else
        if (vals[key + 1] == data) then
          _table.values = vals
          return
        else
          local new_key = collision_resolution(_table, key)
          if ((new_key < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(vals)) and (vals[new_key + 1] == _nil)) then
                vals[new_key + 1] = data
              end
            end
          end
          _table.values = vals
        end
        function int_to_string(n)
          if (n == 0) then
            return "0"
          end
          local num = n
          local neg = false
          if (num < 0) then
            neg = true
            num = (-num)
          end
          local res = ""
          while (num > 0) do
            local digit = (num % 10)
            local ch = _substring("0123456789", digit, (digit + 1))
            res = (ch .. res)
            num = (num // 10)
          end
          if neg then
            res = ("-" .. res)
          end
          return res
        end
        function keys_to_string(_table)
          local result = "{"
          local first = true
          local i = 0
          while (i < (function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(_table.values)) do
                local v = _table.values[i + 1]
                if (v ~= _nil) then
                  if (not first) then
                    result = (result .. ", ")
                  end
                  result = (((result .. int_to_string(i)) .. ": ") .. int_to_string(v))
                  first = false
                end
                i = (i + 1)
              end
              result = (result .. "}")
              return result
            end
            qp = create_hash_table(8)
            insert_data(qp, 0)
            insert_data(qp, 999)
            insert_data(qp, 111)
            print((((type(keys_to_string(qp)) == "table")) and (
            (function(v)
            local function encode(x)
            if type(x) == "table" then
              if x.__name and x.__order then
                local parts = {x.__name, " {"}
                for i, k in ipairs(x.__order) do
                  if i > 1 then parts[#parts+1] = ", " end
                  parts[#parts+1] = k .. " = " .. encode(x[k])
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              elseif #x > 0 then
                  local allTables = true
                  for _, v in ipairs(x) do
                    if type(v) ~= "table" then allTables = false break end
                  end
                  local parts = {}
                  if not allTables then parts[#parts+1] = "[" end
                  for i, val in ipairs(x) do
                    parts[#parts+1] = encode(val)
                    if i < #x then parts[#parts+1] = " " end
                  end
                  if not allTables then parts[#parts+1] = "]" end
                  return table.concat(parts)
                else
                  local keys = {}
                  for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                  table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                  local parts = {"{"}
                  for i, k in ipairs(keys) do
                    parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                    if i < #keys then parts[#parts+1] = ", " end
                  end
                  parts[#parts+1] = "}"
                  return table.concat(parts)
                end
              elseif type(x) == "string" then
                  return '"' .. x .. '"'
                else
                  return tostring(x)
                end
              end
              return encode(v)
            end)(keys_to_string(qp))) or (keys_to_string(qp))))
            local _bench_end = os.clock()
            collectgarbage()
            local _bench_end_mem = collectgarbage('count') * 1024
            local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
            local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
            print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
          end;
