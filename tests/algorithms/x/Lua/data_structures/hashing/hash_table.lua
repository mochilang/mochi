-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function repeat_int(n, val)
    local res = nil
    local i = 0
    while (i < n) do
      res = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(res, val)
    i = (i + 1)
  end
  return res
end
function repeat_bool(n, val)
  local res = nil
  local i = 0
  while (i < n) do
    res = (function(lst, item)
    lst = lst or {}
    table.insert(lst, item)
    return lst
  end)(res, val)
  i = (i + 1)
end
return res
end
function set_int(xs, idx, value)
  local res = nil
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(xs)) do
        if (i == idx) then
          res = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(res, value)
      else
        res = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(res, xs[i + 1])
    end
    i = (i + 1)
  end
  return res
end
function set_bool(xs, idx, value)
  local res = nil
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(xs)) do
        if (i == idx) then
          res = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(res, value)
      else
        res = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(res, xs[i + 1])
    end
    i = (i + 1)
  end
  return res
end
function create_table(size_table, charge_factor, lim_charge)
  return {size_table = size_table, values = repeat_int(size_table, 0), filled = repeat_bool(size_table, false), charge_factor = charge_factor, lim_charge = lim_charge}
end
function hash_function(ht, key)
  local k = (key % ht.size_table)
  if (k < 0) then
    k = (k + ht.size_table)
  end
  return k
end
function is_prime(n)
  if (n < 2) then
    return false
  end
  if ((n % 2) == 0) then
    return (n == 2)
  end
  local i = 3
  while ((i * i) <= n) do
    if ((n % i) == 0) then
      return false
    end
    i = (i + 2)
  end
  return true
end
function next_prime(value, factor)
  local candidate = ((value * factor) + 1)
  while (not is_prime(candidate)) do
    candidate = (candidate + 1)
  end
  return candidate
end
function set_value(ht, key, data)
  local new_values = set_int(ht.values, key, data)
  local new_filled = set_bool(ht.filled, key, true)
  return {size_table = ht.size_table, values = new_values, filled = new_filled, charge_factor = ht.charge_factor, lim_charge = ht.lim_charge}
end
function collision_resolution(ht, key)
  local new_key = hash_function(ht, (key + 1))
  local steps = 0
  while ht.filled[new_key + 1] do
    new_key = hash_function(ht, (new_key + 1))
    steps = (steps + 1)
    if (steps >= ht.size_table) then
      return (-1)
    end
  end
  return new_key
end
function rehashing(ht)
  local survivors = nil
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(ht.values)) do
        if ht.filled[i + 1] then
          survivors = (function(lst, item)
          lst = lst or {}
          table.insert(lst, item)
          return lst
        end)(survivors, ht.values[i + 1])
      end
      i = (i + 1)
    end
    local new_size = next_prime(ht.size_table, 2)
    local new_ht = create_table(new_size, ht.charge_factor, ht.lim_charge)
    i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(survivors)) do
          new_ht = insert_data((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(new_ht), survivors[i + 1])
          i = (i + 1)
        end
        return new_ht
      end
      function insert_data(ht, data)
        local key = hash_function(ht, data)
        if (not ht.filled[key + 1]) then
          return set_value((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ht), key, data)
        end
        if (ht.values[key + 1] == data) then
          return ht
        end
        local new_key = collision_resolution(ht, key)
        if (new_key >= 0) then
          return set_value((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ht), new_key, data)
        end
        local resized = rehashing((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ht))
        return insert_data((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(resized), data)
      end
      function keys(ht)
        local res = nil
        local i = 0
        while (i < (function(v)
        if type(v) == 'table' and v.items ~= nil then
          return #v.items
        elseif type(v) == 'table' and (v[1] == nil) then
            local c = 0
            for _ in pairs(v) do c = c + 1 end
            return c
          elseif type(v) == 'string' then
              local l = utf8.len(v)
              if l then return l end
              return #v
            elseif type(v) == 'table' then
                return #v
              else
                return 0
              end
            end)(ht.values)) do
              if ht.filled[i + 1] then
                res = (function(lst, item)
                lst = lst or {}
                table.insert(lst, item)
                return lst
              end)(res, {i, ht.values[i + 1]})
            end
            i = (i + 1)
          end
          return res
        end
        function main()
          local ht = create_table(3, 1, 0.75)
          ht = insert_data((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ht), 17)
          ht = insert_data((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ht), 18)
          ht = insert_data((function(_t) local _c={} for k,v in pairs(_t) do _c[k]=v end return _c end)(ht), 99)
          print(
          (function(v)
          local function encode(x)
          if type(x) == "table" then
            if x.__name and x.__order then
              local parts = {x.__name, " {"}
              for i, k in ipairs(x.__order) do
                if i > 1 then parts[#parts+1] = ", " end
                parts[#parts+1] = k .. " = " .. encode(x[k])
              end
              parts[#parts+1] = "}"
              return table.concat(parts)
            elseif #x > 0 then
                local allTables = true
                for _, v in ipairs(x) do
                  if type(v) ~= "table" then allTables = false break end
                end
                local parts = {}
                if not allTables then parts[#parts+1] = "[" end
                for i, val in ipairs(x) do
                  parts[#parts+1] = encode(val)
                  if i < #x then parts[#parts+1] = " " end
                end
                if not allTables then parts[#parts+1] = "]" end
                return table.concat(parts)
              else
                local keys = {}
                for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                local parts = {"{"}
                for i, k in ipairs(keys) do
                  parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                  if i < #keys then parts[#parts+1] = ", " end
                end
                parts[#parts+1] = "}"
                return table.concat(parts)
              end
            elseif type(x) == "string" then
                return '"' .. x .. '"'
              else
                return tostring(x)
              end
            end
            return encode(v)
          end)((function(m)
          local keys = {}
          for k in pairs(m) do
            if k ~= '__name' and k ~= '__order' then table.insert(keys, k) end
          end
          table.sort(keys, function(a,b) return a<b end)
          return keys
        end)(ht)))
      end
      main()
      local _bench_end = os.clock()
      collectgarbage()
      local _bench_end_mem = collectgarbage('count') * 1024
      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
    end;
