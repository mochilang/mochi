-- Generated by Mochi v0.10.61 on 2025-08-09 10:14 GMT+7
function input()
  local line = io.read('*l')
  if line == nil then return '' end
  return line
end
local _nil = {}

local _now_seed = 0
local _now_seeded = false
do
  local s = os.getenv("MOCHI_NOW_SEED")
  if s and s ~= "" then
    local v = tonumber(s)
    if v then
      _now_seed = v
      _now_seeded = true
    end
  end
end
local function _now()
if _now_seeded then
  -- keep the seed within safe integer range for Lua (53 bits)
  _now_seed = (_now_seed * 1664525 + 1013904223) % 9007199254740991
  return _now_seed % 1000000000
end
return os.time() * 1000000000 + math.floor(os.clock() * 1000000000)
end

local function _str(v)
if type(v) == 'number' then
  local s = tostring(v)
  s = string.gsub(s, '%.0+$', '')
  return s
end
return tostring(v)
end
do
  collectgarbage()
  local _bench_start_mem = collectgarbage('count') * 1024
  local _bench_start = os.clock()
  function make_table(size_table, charge_factor)
    local vals = {}
    local i = 0
    while (i < size_table) do
      vals = (function(lst, item)
      lst = lst or {}
      table.insert(lst, item)
      return lst
    end)(vals, {})
    i = (i + 1)
  end
  return {size_table = size_table, charge_factor = charge_factor, values = vals, keys = {}}
end
function hash_function(ht, key)
  local res = (key % ht.size_table)
  if (res < 0) then
    res = (res + ht.size_table)
  end
  return res
end
function prepend(lst, value)
  local result = {value}
  local i = 0
  while (i < (function(v)
  if type(v) == 'table' and v.items ~= nil then
    return #v.items
  elseif type(v) == 'table' and (v[1] == nil) then
      local c = 0
      for _ in pairs(v) do c = c + 1 end
      return c
    elseif type(v) == 'string' then
        local l = utf8.len(v)
        if l then return l end
        return #v
      elseif type(v) == 'table' then
          return #v
        else
          return 0
        end
      end)(lst)) do
        result = (function(lst, item)
        lst = lst or {}
        table.insert(lst, item)
        return lst
      end)(result, lst[i + 1])
      i = (i + 1)
    end
    return result
  end
  function set_value(ht, key, data)
    local current = ht.values[key + 1]
    local updated = prepend(current, data)
    local vals = ht.values
    vals[key + 1] = updated
    ht.values = vals
    local ks = ht.keys
    ks[key] = updated
    ht.keys = ks
  end
  function count_empty(ht)
    local count = 0
    local i = 0
    while (i < (function(v)
    if type(v) == 'table' and v.items ~= nil then
      return #v.items
    elseif type(v) == 'table' and (v[1] == nil) then
        local c = 0
        for _ in pairs(v) do c = c + 1 end
        return c
      elseif type(v) == 'string' then
          local l = utf8.len(v)
          if l then return l end
          return #v
        elseif type(v) == 'table' then
            return #v
          else
            return 0
          end
        end)(ht.values)) do
          if ((function(v)
          if type(v) == 'table' and v.items ~= nil then
            return #v.items
          elseif type(v) == 'table' and (v[1] == nil) then
              local c = 0
              for _ in pairs(v) do c = c + 1 end
              return c
            elseif type(v) == 'string' then
                local l = utf8.len(v)
                if l then return l end
                return #v
              elseif type(v) == 'table' then
                  return #v
                else
                  return 0
                end
              end)(ht.values[i + 1]) == 0) then
                count = (count + 1)
              end
              i = (i + 1)
            end
            return count
          end
          function balanced_factor(ht)
            local total = 0
            local i = 0
            while (i < (function(v)
            if type(v) == 'table' and v.items ~= nil then
              return #v.items
            elseif type(v) == 'table' and (v[1] == nil) then
                local c = 0
                for _ in pairs(v) do c = c + 1 end
                return c
              elseif type(v) == 'string' then
                  local l = utf8.len(v)
                  if l then return l end
                  return #v
                elseif type(v) == 'table' then
                    return #v
                  else
                    return 0
                  end
                end)(ht.values)) do
                  total = (total + (ht.charge_factor - (function(v)
                  if type(v) == 'table' and v.items ~= nil then
                    return #v.items
                  elseif type(v) == 'table' and (v[1] == nil) then
                      local c = 0
                      for _ in pairs(v) do c = c + 1 end
                      return c
                    elseif type(v) == 'string' then
                        local l = utf8.len(v)
                        if l then return l end
                        return #v
                      elseif type(v) == 'table' then
                          return #v
                        else
                          return 0
                        end
                      end)(ht.values[i + 1])))
                      i = (i + 1)
                    end
                    return ((total // ht.size_table) * ht.charge_factor)
                  end
                  function collision_resolution(ht, key)
                    if (not (((function(v)
                    if type(v) == 'table' and v.items ~= nil then
                      return #v.items
                    elseif type(v) == 'table' and (v[1] == nil) then
                        local c = 0
                        for _ in pairs(v) do c = c + 1 end
                        return c
                      elseif type(v) == 'string' then
                          local l = utf8.len(v)
                          if l then return l end
                          return #v
                        elseif type(v) == 'table' then
                            return #v
                          else
                            return 0
                          end
                        end)(ht.values[key + 1]) == ht.charge_factor) and (count_empty(ht) == 0))) then
                          return key
                        end
                        local new_key = ((key + 1) % ht.size_table)
                        local steps = 0
                        while (((function(v)
                        if type(v) == 'table' and v.items ~= nil then
                          return #v.items
                        elseif type(v) == 'table' and (v[1] == nil) then
                            local c = 0
                            for _ in pairs(v) do c = c + 1 end
                            return c
                          elseif type(v) == 'string' then
                              local l = utf8.len(v)
                              if l then return l end
                              return #v
                            elseif type(v) == 'table' then
                                return #v
                              else
                                return 0
                              end
                            end)(ht.values[new_key + 1]) == ht.charge_factor) and (steps < (ht.size_table - 1))) do
                              new_key = ((new_key + 1) % ht.size_table)
                              steps = (steps + 1)
                            end
                            if ((function(v)
                            if type(v) == 'table' and v.items ~= nil then
                              return #v.items
                            elseif type(v) == 'table' and (v[1] == nil) then
                                local c = 0
                                for _ in pairs(v) do c = c + 1 end
                                return c
                              elseif type(v) == 'string' then
                                  local l = utf8.len(v)
                                  if l then return l end
                                  return #v
                                elseif type(v) == 'table' then
                                    return #v
                                  else
                                    return 0
                                  end
                                end)(ht.values[new_key + 1]) < ht.charge_factor) then
                                  return new_key
                                end
                                return (-1)
                              end
                              function insert(ht, data)
                                local key = hash_function(ht, data)
                                if (((function(v)
                                if type(v) == 'table' and v.items ~= nil then
                                  return #v.items
                                elseif type(v) == 'table' and (v[1] == nil) then
                                    local c = 0
                                    for _ in pairs(v) do c = c + 1 end
                                    return c
                                  elseif type(v) == 'string' then
                                      local l = utf8.len(v)
                                      if l then return l end
                                      return #v
                                    elseif type(v) == 'table' then
                                        return #v
                                      else
                                        return 0
                                      end
                                    end)(ht.values[key + 1]) == 0) or ((function(v)
                                    if type(v) == 'table' and v.items ~= nil then
                                      return #v.items
                                    elseif type(v) == 'table' and (v[1] == nil) then
                                        local c = 0
                                        for _ in pairs(v) do c = c + 1 end
                                        return c
                                      elseif type(v) == 'string' then
                                          local l = utf8.len(v)
                                          if l then return l end
                                          return #v
                                        elseif type(v) == 'table' then
                                            return #v
                                          else
                                            return 0
                                          end
                                        end)(ht.values[key + 1]) < ht.charge_factor)) then
                                          set_value(ht, key, data)
                                          return
                                        end
                                        local dest = collision_resolution(ht, key)
                                        if (dest >= 0) then
                                          set_value(ht, dest, data)
                                        else
                                          print("table full")
                                        end
                                      end
                                      function main()
                                        local ht = make_table(3, 2)
                                        insert(ht, 10)
                                        insert(ht, 20)
                                        insert(ht, 30)
                                        insert(ht, 40)
                                        insert(ht, 50)
                                        print((((type(
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(ht.values)) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(ht.values))) or (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(ht.values))))
                                        print((((type(_str(balanced_factor(ht))) == "table")) and (
                                        (function(v)
                                        local function encode(x)
                                        if type(x) == "table" then
                                          if x.__name and x.__order then
                                            local parts = {x.__name, " {"}
                                            for i, k in ipairs(x.__order) do
                                              if i > 1 then parts[#parts+1] = ", " end
                                              parts[#parts+1] = k .. " = " .. encode(x[k])
                                            end
                                            parts[#parts+1] = "}"
                                            return table.concat(parts)
                                          elseif #x > 0 then
                                              local allTables = true
                                              for _, v in ipairs(x) do
                                                if type(v) ~= "table" then allTables = false break end
                                              end
                                              local parts = {}
                                              if not allTables then parts[#parts+1] = "[" end
                                              for i, val in ipairs(x) do
                                                parts[#parts+1] = encode(val)
                                                if i < #x then parts[#parts+1] = " " end
                                              end
                                              if not allTables then parts[#parts+1] = "]" end
                                              return table.concat(parts)
                                            else
                                              local keys = {}
                                              for k in pairs(x) do if k ~= "__name" and k ~= "__order" then table.insert(keys, k) end end
                                              table.sort(keys, function(a,b) return tostring(a) > tostring(b) end)
                                              local parts = {"{"}
                                              for i, k in ipairs(keys) do
                                                parts[#parts+1] = "'" .. tostring(k) .. "': " .. encode(x[k])
                                                if i < #keys then parts[#parts+1] = ", " end
                                              end
                                              parts[#parts+1] = "}"
                                              return table.concat(parts)
                                            end
                                          elseif type(x) == "string" then
                                              return '"' .. x .. '"'
                                            else
                                              return tostring(x)
                                            end
                                          end
                                          return encode(v)
                                        end)(_str(balanced_factor(ht)))) or (_str(balanced_factor(ht)))))
                                      end
                                      main()
                                      local _bench_end = os.clock()
                                      collectgarbage()
                                      local _bench_end_mem = collectgarbage('count') * 1024
                                      local _bench_duration_us = math.floor((_bench_end - _bench_start) * 1000000)
                                      local _bench_mem = math.floor(math.max(0, _bench_end_mem - _bench_start_mem))
                                      print('{\n  "duration_us": ' .. _bench_duration_us .. ',\n  "memory_bytes": ' .. _bench_mem .. ',\n  "name": "main"\n}')
                                    end;
